/*
 * Copyright 2025 Georgii Ippolitov (g000sha256)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dev.g000sha256.tdl

import dev.g000sha256.tdl.dto.AccentColor
import dev.g000sha256.tdl.dto.AcceptedGiftTypes
import dev.g000sha256.tdl.dto.AccountInfo
import dev.g000sha256.tdl.dto.AccountTtl
import dev.g000sha256.tdl.dto.AddedReaction
import dev.g000sha256.tdl.dto.AddedReactions
import dev.g000sha256.tdl.dto.Address
import dev.g000sha256.tdl.dto.AdvertisementSponsor
import dev.g000sha256.tdl.dto.AffiliateInfo
import dev.g000sha256.tdl.dto.AffiliateProgramInfo
import dev.g000sha256.tdl.dto.AffiliateProgramParameters
import dev.g000sha256.tdl.dto.AffiliateProgramSortOrder
import dev.g000sha256.tdl.dto.AffiliateProgramSortOrderCreationDate
import dev.g000sha256.tdl.dto.AffiliateProgramSortOrderProfitability
import dev.g000sha256.tdl.dto.AffiliateProgramSortOrderRevenue
import dev.g000sha256.tdl.dto.AffiliateType
import dev.g000sha256.tdl.dto.AffiliateTypeBot
import dev.g000sha256.tdl.dto.AffiliateTypeChannel
import dev.g000sha256.tdl.dto.AffiliateTypeCurrentUser
import dev.g000sha256.tdl.dto.AlternativeVideo
import dev.g000sha256.tdl.dto.AnimatedChatPhoto
import dev.g000sha256.tdl.dto.AnimatedEmoji
import dev.g000sha256.tdl.dto.Animation
import dev.g000sha256.tdl.dto.Animations
import dev.g000sha256.tdl.dto.ArchiveChatListSettings
import dev.g000sha256.tdl.dto.AttachmentMenuBot
import dev.g000sha256.tdl.dto.AttachmentMenuBotColor
import dev.g000sha256.tdl.dto.Audio
import dev.g000sha256.tdl.dto.AuthenticationCodeInfo
import dev.g000sha256.tdl.dto.AuthenticationCodeType
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeCall
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeFirebaseAndroid
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeFirebaseIos
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeFlashCall
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeFragment
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeMissedCall
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeSms
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeSmsPhrase
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeSmsWord
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeTelegramMessage
import dev.g000sha256.tdl.dto.AuthorizationState
import dev.g000sha256.tdl.dto.AuthorizationStateClosed
import dev.g000sha256.tdl.dto.AuthorizationStateClosing
import dev.g000sha256.tdl.dto.AuthorizationStateLoggingOut
import dev.g000sha256.tdl.dto.AuthorizationStateReady
import dev.g000sha256.tdl.dto.AuthorizationStateWaitCode
import dev.g000sha256.tdl.dto.AuthorizationStateWaitEmailAddress
import dev.g000sha256.tdl.dto.AuthorizationStateWaitEmailCode
import dev.g000sha256.tdl.dto.AuthorizationStateWaitOtherDeviceConfirmation
import dev.g000sha256.tdl.dto.AuthorizationStateWaitPassword
import dev.g000sha256.tdl.dto.AuthorizationStateWaitPhoneNumber
import dev.g000sha256.tdl.dto.AuthorizationStateWaitPremiumPurchase
import dev.g000sha256.tdl.dto.AuthorizationStateWaitRegistration
import dev.g000sha256.tdl.dto.AuthorizationStateWaitTdlibParameters
import dev.g000sha256.tdl.dto.AutoDownloadSettings
import dev.g000sha256.tdl.dto.AutoDownloadSettingsPresets
import dev.g000sha256.tdl.dto.AutosaveSettings
import dev.g000sha256.tdl.dto.AutosaveSettingsException
import dev.g000sha256.tdl.dto.AutosaveSettingsScope
import dev.g000sha256.tdl.dto.AutosaveSettingsScopeChannelChats
import dev.g000sha256.tdl.dto.AutosaveSettingsScopeChat
import dev.g000sha256.tdl.dto.AutosaveSettingsScopeGroupChats
import dev.g000sha256.tdl.dto.AutosaveSettingsScopePrivateChats
import dev.g000sha256.tdl.dto.AvailableGift
import dev.g000sha256.tdl.dto.AvailableGifts
import dev.g000sha256.tdl.dto.AvailableReaction
import dev.g000sha256.tdl.dto.AvailableReactions
import dev.g000sha256.tdl.dto.Background
import dev.g000sha256.tdl.dto.BackgroundFill
import dev.g000sha256.tdl.dto.BackgroundFillFreeformGradient
import dev.g000sha256.tdl.dto.BackgroundFillGradient
import dev.g000sha256.tdl.dto.BackgroundFillSolid
import dev.g000sha256.tdl.dto.BackgroundType
import dev.g000sha256.tdl.dto.BackgroundTypeChatTheme
import dev.g000sha256.tdl.dto.BackgroundTypeFill
import dev.g000sha256.tdl.dto.BackgroundTypePattern
import dev.g000sha256.tdl.dto.BackgroundTypeWallpaper
import dev.g000sha256.tdl.dto.Backgrounds
import dev.g000sha256.tdl.dto.BankCardActionOpenUrl
import dev.g000sha256.tdl.dto.BankCardInfo
import dev.g000sha256.tdl.dto.BasicGroup
import dev.g000sha256.tdl.dto.BasicGroupFullInfo
import dev.g000sha256.tdl.dto.Birthdate
import dev.g000sha256.tdl.dto.BlockList
import dev.g000sha256.tdl.dto.BlockListMain
import dev.g000sha256.tdl.dto.BlockListStories
import dev.g000sha256.tdl.dto.BotCommand
import dev.g000sha256.tdl.dto.BotCommandScope
import dev.g000sha256.tdl.dto.BotCommandScopeAllChatAdministrators
import dev.g000sha256.tdl.dto.BotCommandScopeAllGroupChats
import dev.g000sha256.tdl.dto.BotCommandScopeAllPrivateChats
import dev.g000sha256.tdl.dto.BotCommandScopeChat
import dev.g000sha256.tdl.dto.BotCommandScopeChatAdministrators
import dev.g000sha256.tdl.dto.BotCommandScopeChatMember
import dev.g000sha256.tdl.dto.BotCommandScopeDefault
import dev.g000sha256.tdl.dto.BotCommands
import dev.g000sha256.tdl.dto.BotInfo
import dev.g000sha256.tdl.dto.BotMediaPreview
import dev.g000sha256.tdl.dto.BotMediaPreviewInfo
import dev.g000sha256.tdl.dto.BotMediaPreviews
import dev.g000sha256.tdl.dto.BotMenuButton
import dev.g000sha256.tdl.dto.BotVerification
import dev.g000sha256.tdl.dto.BotVerificationParameters
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReason
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReasonAcceptedRequest
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReasonAddedToAttachmentMenu
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReasonConnectedWebsite
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReasonLaunchedWebApp
import dev.g000sha256.tdl.dto.BusinessAwayMessageSchedule
import dev.g000sha256.tdl.dto.BusinessAwayMessageScheduleAlways
import dev.g000sha256.tdl.dto.BusinessAwayMessageScheduleCustom
import dev.g000sha256.tdl.dto.BusinessAwayMessageScheduleOutsideOfOpeningHours
import dev.g000sha256.tdl.dto.BusinessAwayMessageSettings
import dev.g000sha256.tdl.dto.BusinessBotManageBar
import dev.g000sha256.tdl.dto.BusinessBotRights
import dev.g000sha256.tdl.dto.BusinessChatLink
import dev.g000sha256.tdl.dto.BusinessChatLinkInfo
import dev.g000sha256.tdl.dto.BusinessChatLinks
import dev.g000sha256.tdl.dto.BusinessConnectedBot
import dev.g000sha256.tdl.dto.BusinessConnection
import dev.g000sha256.tdl.dto.BusinessFeature
import dev.g000sha256.tdl.dto.BusinessFeatureAccountLinks
import dev.g000sha256.tdl.dto.BusinessFeatureAwayMessage
import dev.g000sha256.tdl.dto.BusinessFeatureBots
import dev.g000sha256.tdl.dto.BusinessFeatureChatFolderTags
import dev.g000sha256.tdl.dto.BusinessFeatureEmojiStatus
import dev.g000sha256.tdl.dto.BusinessFeatureGreetingMessage
import dev.g000sha256.tdl.dto.BusinessFeatureLocation
import dev.g000sha256.tdl.dto.BusinessFeatureOpeningHours
import dev.g000sha256.tdl.dto.BusinessFeaturePromotionAnimation
import dev.g000sha256.tdl.dto.BusinessFeatureQuickReplies
import dev.g000sha256.tdl.dto.BusinessFeatureStartPage
import dev.g000sha256.tdl.dto.BusinessFeatureUpgradedStories
import dev.g000sha256.tdl.dto.BusinessFeatures
import dev.g000sha256.tdl.dto.BusinessGreetingMessageSettings
import dev.g000sha256.tdl.dto.BusinessInfo
import dev.g000sha256.tdl.dto.BusinessLocation
import dev.g000sha256.tdl.dto.BusinessMessage
import dev.g000sha256.tdl.dto.BusinessMessages
import dev.g000sha256.tdl.dto.BusinessOpeningHours
import dev.g000sha256.tdl.dto.BusinessOpeningHoursInterval
import dev.g000sha256.tdl.dto.BusinessRecipients
import dev.g000sha256.tdl.dto.BusinessStartPage
import dev.g000sha256.tdl.dto.Call
import dev.g000sha256.tdl.dto.CallDiscardReason
import dev.g000sha256.tdl.dto.CallDiscardReasonDeclined
import dev.g000sha256.tdl.dto.CallDiscardReasonDisconnected
import dev.g000sha256.tdl.dto.CallDiscardReasonEmpty
import dev.g000sha256.tdl.dto.CallDiscardReasonHungUp
import dev.g000sha256.tdl.dto.CallDiscardReasonMissed
import dev.g000sha256.tdl.dto.CallDiscardReasonUpgradeToGroupCall
import dev.g000sha256.tdl.dto.CallId
import dev.g000sha256.tdl.dto.CallProblem
import dev.g000sha256.tdl.dto.CallProblemDistortedSpeech
import dev.g000sha256.tdl.dto.CallProblemDistortedVideo
import dev.g000sha256.tdl.dto.CallProblemDropped
import dev.g000sha256.tdl.dto.CallProblemEcho
import dev.g000sha256.tdl.dto.CallProblemInterruptions
import dev.g000sha256.tdl.dto.CallProblemNoise
import dev.g000sha256.tdl.dto.CallProblemPixelatedVideo
import dev.g000sha256.tdl.dto.CallProblemSilentLocal
import dev.g000sha256.tdl.dto.CallProblemSilentRemote
import dev.g000sha256.tdl.dto.CallProtocol
import dev.g000sha256.tdl.dto.CallServer
import dev.g000sha256.tdl.dto.CallServerType
import dev.g000sha256.tdl.dto.CallServerTypeTelegramReflector
import dev.g000sha256.tdl.dto.CallServerTypeWebrtc
import dev.g000sha256.tdl.dto.CallState
import dev.g000sha256.tdl.dto.CallStateDiscarded
import dev.g000sha256.tdl.dto.CallStateError
import dev.g000sha256.tdl.dto.CallStateExchangingKeys
import dev.g000sha256.tdl.dto.CallStateHangingUp
import dev.g000sha256.tdl.dto.CallStatePending
import dev.g000sha256.tdl.dto.CallStateReady
import dev.g000sha256.tdl.dto.CallbackQueryAnswer
import dev.g000sha256.tdl.dto.CallbackQueryPayload
import dev.g000sha256.tdl.dto.CallbackQueryPayloadData
import dev.g000sha256.tdl.dto.CallbackQueryPayloadDataWithPassword
import dev.g000sha256.tdl.dto.CallbackQueryPayloadGame
import dev.g000sha256.tdl.dto.CanPostStoryResult
import dev.g000sha256.tdl.dto.CanPostStoryResultActiveStoryLimitExceeded
import dev.g000sha256.tdl.dto.CanPostStoryResultBoostNeeded
import dev.g000sha256.tdl.dto.CanPostStoryResultMonthlyLimitExceeded
import dev.g000sha256.tdl.dto.CanPostStoryResultOk
import dev.g000sha256.tdl.dto.CanPostStoryResultPremiumNeeded
import dev.g000sha256.tdl.dto.CanPostStoryResultWeeklyLimitExceeded
import dev.g000sha256.tdl.dto.CanSendMessageToUserResult
import dev.g000sha256.tdl.dto.CanSendMessageToUserResultOk
import dev.g000sha256.tdl.dto.CanSendMessageToUserResultUserHasPaidMessages
import dev.g000sha256.tdl.dto.CanSendMessageToUserResultUserIsDeleted
import dev.g000sha256.tdl.dto.CanSendMessageToUserResultUserRestrictsNewChats
import dev.g000sha256.tdl.dto.CanTransferOwnershipResult
import dev.g000sha256.tdl.dto.CanTransferOwnershipResultOk
import dev.g000sha256.tdl.dto.CanTransferOwnershipResultPasswordNeeded
import dev.g000sha256.tdl.dto.CanTransferOwnershipResultPasswordTooFresh
import dev.g000sha256.tdl.dto.CanTransferOwnershipResultSessionTooFresh
import dev.g000sha256.tdl.dto.Chat
import dev.g000sha256.tdl.dto.ChatAction
import dev.g000sha256.tdl.dto.ChatActionBar
import dev.g000sha256.tdl.dto.ChatActionBarAddContact
import dev.g000sha256.tdl.dto.ChatActionBarInviteMembers
import dev.g000sha256.tdl.dto.ChatActionBarJoinRequest
import dev.g000sha256.tdl.dto.ChatActionBarReportAddBlock
import dev.g000sha256.tdl.dto.ChatActionBarReportSpam
import dev.g000sha256.tdl.dto.ChatActionBarSharePhoneNumber
import dev.g000sha256.tdl.dto.ChatActionCancel
import dev.g000sha256.tdl.dto.ChatActionChoosingContact
import dev.g000sha256.tdl.dto.ChatActionChoosingLocation
import dev.g000sha256.tdl.dto.ChatActionChoosingSticker
import dev.g000sha256.tdl.dto.ChatActionRecordingVideo
import dev.g000sha256.tdl.dto.ChatActionRecordingVideoNote
import dev.g000sha256.tdl.dto.ChatActionRecordingVoiceNote
import dev.g000sha256.tdl.dto.ChatActionStartPlayingGame
import dev.g000sha256.tdl.dto.ChatActionTyping
import dev.g000sha256.tdl.dto.ChatActionUploadingDocument
import dev.g000sha256.tdl.dto.ChatActionUploadingPhoto
import dev.g000sha256.tdl.dto.ChatActionUploadingVideo
import dev.g000sha256.tdl.dto.ChatActionUploadingVideoNote
import dev.g000sha256.tdl.dto.ChatActionUploadingVoiceNote
import dev.g000sha256.tdl.dto.ChatActionWatchingAnimations
import dev.g000sha256.tdl.dto.ChatActiveStories
import dev.g000sha256.tdl.dto.ChatAdministrator
import dev.g000sha256.tdl.dto.ChatAdministratorRights
import dev.g000sha256.tdl.dto.ChatAdministrators
import dev.g000sha256.tdl.dto.ChatAvailableReactions
import dev.g000sha256.tdl.dto.ChatAvailableReactionsAll
import dev.g000sha256.tdl.dto.ChatAvailableReactionsSome
import dev.g000sha256.tdl.dto.ChatBackground
import dev.g000sha256.tdl.dto.ChatBoost
import dev.g000sha256.tdl.dto.ChatBoostFeatures
import dev.g000sha256.tdl.dto.ChatBoostLevelFeatures
import dev.g000sha256.tdl.dto.ChatBoostLink
import dev.g000sha256.tdl.dto.ChatBoostLinkInfo
import dev.g000sha256.tdl.dto.ChatBoostSlot
import dev.g000sha256.tdl.dto.ChatBoostSlots
import dev.g000sha256.tdl.dto.ChatBoostSource
import dev.g000sha256.tdl.dto.ChatBoostSourceGiftCode
import dev.g000sha256.tdl.dto.ChatBoostSourceGiveaway
import dev.g000sha256.tdl.dto.ChatBoostSourcePremium
import dev.g000sha256.tdl.dto.ChatBoostStatus
import dev.g000sha256.tdl.dto.ChatEvent
import dev.g000sha256.tdl.dto.ChatEventAccentColorChanged
import dev.g000sha256.tdl.dto.ChatEventAction
import dev.g000sha256.tdl.dto.ChatEventActiveUsernamesChanged
import dev.g000sha256.tdl.dto.ChatEventAutomaticTranslationToggled
import dev.g000sha256.tdl.dto.ChatEventAvailableReactionsChanged
import dev.g000sha256.tdl.dto.ChatEventBackgroundChanged
import dev.g000sha256.tdl.dto.ChatEventCustomEmojiStickerSetChanged
import dev.g000sha256.tdl.dto.ChatEventDescriptionChanged
import dev.g000sha256.tdl.dto.ChatEventEmojiStatusChanged
import dev.g000sha256.tdl.dto.ChatEventForumTopicCreated
import dev.g000sha256.tdl.dto.ChatEventForumTopicDeleted
import dev.g000sha256.tdl.dto.ChatEventForumTopicEdited
import dev.g000sha256.tdl.dto.ChatEventForumTopicPinned
import dev.g000sha256.tdl.dto.ChatEventForumTopicToggleIsClosed
import dev.g000sha256.tdl.dto.ChatEventForumTopicToggleIsHidden
import dev.g000sha256.tdl.dto.ChatEventHasAggressiveAntiSpamEnabledToggled
import dev.g000sha256.tdl.dto.ChatEventHasProtectedContentToggled
import dev.g000sha256.tdl.dto.ChatEventInviteLinkDeleted
import dev.g000sha256.tdl.dto.ChatEventInviteLinkEdited
import dev.g000sha256.tdl.dto.ChatEventInviteLinkRevoked
import dev.g000sha256.tdl.dto.ChatEventInvitesToggled
import dev.g000sha256.tdl.dto.ChatEventIsAllHistoryAvailableToggled
import dev.g000sha256.tdl.dto.ChatEventIsForumToggled
import dev.g000sha256.tdl.dto.ChatEventLinkedChatChanged
import dev.g000sha256.tdl.dto.ChatEventLocationChanged
import dev.g000sha256.tdl.dto.ChatEventLogFilters
import dev.g000sha256.tdl.dto.ChatEventMemberInvited
import dev.g000sha256.tdl.dto.ChatEventMemberJoined
import dev.g000sha256.tdl.dto.ChatEventMemberJoinedByInviteLink
import dev.g000sha256.tdl.dto.ChatEventMemberJoinedByRequest
import dev.g000sha256.tdl.dto.ChatEventMemberLeft
import dev.g000sha256.tdl.dto.ChatEventMemberPromoted
import dev.g000sha256.tdl.dto.ChatEventMemberRestricted
import dev.g000sha256.tdl.dto.ChatEventMemberSubscriptionExtended
import dev.g000sha256.tdl.dto.ChatEventMessageAutoDeleteTimeChanged
import dev.g000sha256.tdl.dto.ChatEventMessageDeleted
import dev.g000sha256.tdl.dto.ChatEventMessageEdited
import dev.g000sha256.tdl.dto.ChatEventMessagePinned
import dev.g000sha256.tdl.dto.ChatEventMessageUnpinned
import dev.g000sha256.tdl.dto.ChatEventPermissionsChanged
import dev.g000sha256.tdl.dto.ChatEventPhotoChanged
import dev.g000sha256.tdl.dto.ChatEventPollStopped
import dev.g000sha256.tdl.dto.ChatEventProfileAccentColorChanged
import dev.g000sha256.tdl.dto.ChatEventShowMessageSenderToggled
import dev.g000sha256.tdl.dto.ChatEventSignMessagesToggled
import dev.g000sha256.tdl.dto.ChatEventSlowModeDelayChanged
import dev.g000sha256.tdl.dto.ChatEventStickerSetChanged
import dev.g000sha256.tdl.dto.ChatEventTitleChanged
import dev.g000sha256.tdl.dto.ChatEventUsernameChanged
import dev.g000sha256.tdl.dto.ChatEventVideoChatCreated
import dev.g000sha256.tdl.dto.ChatEventVideoChatEnded
import dev.g000sha256.tdl.dto.ChatEventVideoChatMuteNewParticipantsToggled
import dev.g000sha256.tdl.dto.ChatEventVideoChatParticipantIsMutedToggled
import dev.g000sha256.tdl.dto.ChatEventVideoChatParticipantVolumeLevelChanged
import dev.g000sha256.tdl.dto.ChatEvents
import dev.g000sha256.tdl.dto.ChatFolder
import dev.g000sha256.tdl.dto.ChatFolderIcon
import dev.g000sha256.tdl.dto.ChatFolderInfo
import dev.g000sha256.tdl.dto.ChatFolderInviteLink
import dev.g000sha256.tdl.dto.ChatFolderInviteLinkInfo
import dev.g000sha256.tdl.dto.ChatFolderInviteLinks
import dev.g000sha256.tdl.dto.ChatFolderName
import dev.g000sha256.tdl.dto.ChatInviteLink
import dev.g000sha256.tdl.dto.ChatInviteLinkCount
import dev.g000sha256.tdl.dto.ChatInviteLinkCounts
import dev.g000sha256.tdl.dto.ChatInviteLinkInfo
import dev.g000sha256.tdl.dto.ChatInviteLinkMember
import dev.g000sha256.tdl.dto.ChatInviteLinkMembers
import dev.g000sha256.tdl.dto.ChatInviteLinkSubscriptionInfo
import dev.g000sha256.tdl.dto.ChatInviteLinks
import dev.g000sha256.tdl.dto.ChatJoinRequest
import dev.g000sha256.tdl.dto.ChatJoinRequests
import dev.g000sha256.tdl.dto.ChatJoinRequestsInfo
import dev.g000sha256.tdl.dto.ChatList
import dev.g000sha256.tdl.dto.ChatListArchive
import dev.g000sha256.tdl.dto.ChatListFolder
import dev.g000sha256.tdl.dto.ChatListMain
import dev.g000sha256.tdl.dto.ChatLists
import dev.g000sha256.tdl.dto.ChatLocation
import dev.g000sha256.tdl.dto.ChatMember
import dev.g000sha256.tdl.dto.ChatMemberStatus
import dev.g000sha256.tdl.dto.ChatMemberStatusAdministrator
import dev.g000sha256.tdl.dto.ChatMemberStatusBanned
import dev.g000sha256.tdl.dto.ChatMemberStatusCreator
import dev.g000sha256.tdl.dto.ChatMemberStatusLeft
import dev.g000sha256.tdl.dto.ChatMemberStatusMember
import dev.g000sha256.tdl.dto.ChatMemberStatusRestricted
import dev.g000sha256.tdl.dto.ChatMembers
import dev.g000sha256.tdl.dto.ChatMembersFilter
import dev.g000sha256.tdl.dto.ChatMembersFilterAdministrators
import dev.g000sha256.tdl.dto.ChatMembersFilterBanned
import dev.g000sha256.tdl.dto.ChatMembersFilterBots
import dev.g000sha256.tdl.dto.ChatMembersFilterContacts
import dev.g000sha256.tdl.dto.ChatMembersFilterMembers
import dev.g000sha256.tdl.dto.ChatMembersFilterMention
import dev.g000sha256.tdl.dto.ChatMembersFilterRestricted
import dev.g000sha256.tdl.dto.ChatMessageSender
import dev.g000sha256.tdl.dto.ChatMessageSenders
import dev.g000sha256.tdl.dto.ChatNotificationSettings
import dev.g000sha256.tdl.dto.ChatPermissions
import dev.g000sha256.tdl.dto.ChatPhoto
import dev.g000sha256.tdl.dto.ChatPhotoInfo
import dev.g000sha256.tdl.dto.ChatPhotoSticker
import dev.g000sha256.tdl.dto.ChatPhotoStickerType
import dev.g000sha256.tdl.dto.ChatPhotoStickerTypeCustomEmoji
import dev.g000sha256.tdl.dto.ChatPhotoStickerTypeRegularOrMask
import dev.g000sha256.tdl.dto.ChatPhotos
import dev.g000sha256.tdl.dto.ChatPosition
import dev.g000sha256.tdl.dto.ChatRevenueAmount
import dev.g000sha256.tdl.dto.ChatRevenueStatistics
import dev.g000sha256.tdl.dto.ChatRevenueTransaction
import dev.g000sha256.tdl.dto.ChatRevenueTransactionType
import dev.g000sha256.tdl.dto.ChatRevenueTransactionTypeEarnings
import dev.g000sha256.tdl.dto.ChatRevenueTransactionTypeRefund
import dev.g000sha256.tdl.dto.ChatRevenueTransactionTypeWithdrawal
import dev.g000sha256.tdl.dto.ChatRevenueTransactions
import dev.g000sha256.tdl.dto.ChatSource
import dev.g000sha256.tdl.dto.ChatSourceMtprotoProxy
import dev.g000sha256.tdl.dto.ChatSourcePublicServiceAnnouncement
import dev.g000sha256.tdl.dto.ChatStatistics
import dev.g000sha256.tdl.dto.ChatStatisticsAdministratorActionsInfo
import dev.g000sha256.tdl.dto.ChatStatisticsChannel
import dev.g000sha256.tdl.dto.ChatStatisticsInteractionInfo
import dev.g000sha256.tdl.dto.ChatStatisticsInviterInfo
import dev.g000sha256.tdl.dto.ChatStatisticsMessageSenderInfo
import dev.g000sha256.tdl.dto.ChatStatisticsObjectType
import dev.g000sha256.tdl.dto.ChatStatisticsObjectTypeMessage
import dev.g000sha256.tdl.dto.ChatStatisticsObjectTypeStory
import dev.g000sha256.tdl.dto.ChatStatisticsSupergroup
import dev.g000sha256.tdl.dto.ChatTheme
import dev.g000sha256.tdl.dto.ChatType
import dev.g000sha256.tdl.dto.ChatTypeBasicGroup
import dev.g000sha256.tdl.dto.ChatTypePrivate
import dev.g000sha256.tdl.dto.ChatTypeSecret
import dev.g000sha256.tdl.dto.ChatTypeSupergroup
import dev.g000sha256.tdl.dto.Chats
import dev.g000sha256.tdl.dto.CheckChatUsernameResult
import dev.g000sha256.tdl.dto.CheckChatUsernameResultOk
import dev.g000sha256.tdl.dto.CheckChatUsernameResultPublicChatsTooMany
import dev.g000sha256.tdl.dto.CheckChatUsernameResultPublicGroupsUnavailable
import dev.g000sha256.tdl.dto.CheckChatUsernameResultUsernameInvalid
import dev.g000sha256.tdl.dto.CheckChatUsernameResultUsernameOccupied
import dev.g000sha256.tdl.dto.CheckChatUsernameResultUsernamePurchasable
import dev.g000sha256.tdl.dto.CheckStickerSetNameResult
import dev.g000sha256.tdl.dto.CheckStickerSetNameResultNameInvalid
import dev.g000sha256.tdl.dto.CheckStickerSetNameResultNameOccupied
import dev.g000sha256.tdl.dto.CheckStickerSetNameResultOk
import dev.g000sha256.tdl.dto.Checklist
import dev.g000sha256.tdl.dto.ChecklistTask
import dev.g000sha256.tdl.dto.CloseBirthdayUser
import dev.g000sha256.tdl.dto.ClosedVectorPath
import dev.g000sha256.tdl.dto.CollectibleItemInfo
import dev.g000sha256.tdl.dto.CollectibleItemType
import dev.g000sha256.tdl.dto.CollectibleItemTypePhoneNumber
import dev.g000sha256.tdl.dto.CollectibleItemTypeUsername
import dev.g000sha256.tdl.dto.ConnectedAffiliateProgram
import dev.g000sha256.tdl.dto.ConnectedAffiliatePrograms
import dev.g000sha256.tdl.dto.ConnectedWebsite
import dev.g000sha256.tdl.dto.ConnectedWebsites
import dev.g000sha256.tdl.dto.ConnectionState
import dev.g000sha256.tdl.dto.ConnectionStateConnecting
import dev.g000sha256.tdl.dto.ConnectionStateConnectingToProxy
import dev.g000sha256.tdl.dto.ConnectionStateReady
import dev.g000sha256.tdl.dto.ConnectionStateUpdating
import dev.g000sha256.tdl.dto.ConnectionStateWaitingForNetwork
import dev.g000sha256.tdl.dto.Contact
import dev.g000sha256.tdl.dto.Count
import dev.g000sha256.tdl.dto.Countries
import dev.g000sha256.tdl.dto.CountryInfo
import dev.g000sha256.tdl.dto.CreatedBasicGroupChat
import dev.g000sha256.tdl.dto.CurrentWeather
import dev.g000sha256.tdl.dto.CustomRequestResult
import dev.g000sha256.tdl.dto.Data
import dev.g000sha256.tdl.dto.DatabaseStatistics
import dev.g000sha256.tdl.dto.Date
import dev.g000sha256.tdl.dto.DateRange
import dev.g000sha256.tdl.dto.DatedFile
import dev.g000sha256.tdl.dto.DeepLinkInfo
import dev.g000sha256.tdl.dto.DeviceToken
import dev.g000sha256.tdl.dto.DeviceTokenApplePush
import dev.g000sha256.tdl.dto.DeviceTokenApplePushVoIP
import dev.g000sha256.tdl.dto.DeviceTokenBlackBerryPush
import dev.g000sha256.tdl.dto.DeviceTokenFirebaseCloudMessaging
import dev.g000sha256.tdl.dto.DeviceTokenHuaweiPush
import dev.g000sha256.tdl.dto.DeviceTokenMicrosoftPush
import dev.g000sha256.tdl.dto.DeviceTokenMicrosoftPushVoIP
import dev.g000sha256.tdl.dto.DeviceTokenSimplePush
import dev.g000sha256.tdl.dto.DeviceTokenTizenPush
import dev.g000sha256.tdl.dto.DeviceTokenUbuntuPush
import dev.g000sha256.tdl.dto.DeviceTokenWebPush
import dev.g000sha256.tdl.dto.DeviceTokenWindowsPush
import dev.g000sha256.tdl.dto.DiceStickers
import dev.g000sha256.tdl.dto.DiceStickersRegular
import dev.g000sha256.tdl.dto.DiceStickersSlotMachine
import dev.g000sha256.tdl.dto.DirectMessagesChatTopic
import dev.g000sha256.tdl.dto.Document
import dev.g000sha256.tdl.dto.DownloadedFileCounts
import dev.g000sha256.tdl.dto.DraftMessage
import dev.g000sha256.tdl.dto.EmailAddressAuthentication
import dev.g000sha256.tdl.dto.EmailAddressAuthenticationAppleId
import dev.g000sha256.tdl.dto.EmailAddressAuthenticationCode
import dev.g000sha256.tdl.dto.EmailAddressAuthenticationCodeInfo
import dev.g000sha256.tdl.dto.EmailAddressAuthenticationGoogleId
import dev.g000sha256.tdl.dto.EmailAddressResetState
import dev.g000sha256.tdl.dto.EmailAddressResetStateAvailable
import dev.g000sha256.tdl.dto.EmailAddressResetStatePending
import dev.g000sha256.tdl.dto.EmojiCategories
import dev.g000sha256.tdl.dto.EmojiCategory
import dev.g000sha256.tdl.dto.EmojiCategorySource
import dev.g000sha256.tdl.dto.EmojiCategorySourcePremium
import dev.g000sha256.tdl.dto.EmojiCategorySourceSearch
import dev.g000sha256.tdl.dto.EmojiCategoryType
import dev.g000sha256.tdl.dto.EmojiCategoryTypeChatPhoto
import dev.g000sha256.tdl.dto.EmojiCategoryTypeDefault
import dev.g000sha256.tdl.dto.EmojiCategoryTypeEmojiStatus
import dev.g000sha256.tdl.dto.EmojiCategoryTypeRegularStickers
import dev.g000sha256.tdl.dto.EmojiKeyword
import dev.g000sha256.tdl.dto.EmojiKeywords
import dev.g000sha256.tdl.dto.EmojiReaction
import dev.g000sha256.tdl.dto.EmojiStatus
import dev.g000sha256.tdl.dto.EmojiStatusCustomEmojis
import dev.g000sha256.tdl.dto.EmojiStatusType
import dev.g000sha256.tdl.dto.EmojiStatusTypeCustomEmoji
import dev.g000sha256.tdl.dto.EmojiStatusTypeUpgradedGift
import dev.g000sha256.tdl.dto.EmojiStatuses
import dev.g000sha256.tdl.dto.Emojis
import dev.g000sha256.tdl.dto.EncryptedCredentials
import dev.g000sha256.tdl.dto.EncryptedPassportElement
import dev.g000sha256.tdl.dto.Error
import dev.g000sha256.tdl.dto.FactCheck
import dev.g000sha256.tdl.dto.FailedToAddMember
import dev.g000sha256.tdl.dto.FailedToAddMembers
import dev.g000sha256.tdl.dto.File
import dev.g000sha256.tdl.dto.FileDownload
import dev.g000sha256.tdl.dto.FileDownloadedPrefixSize
import dev.g000sha256.tdl.dto.FileType
import dev.g000sha256.tdl.dto.FileTypeAnimation
import dev.g000sha256.tdl.dto.FileTypeAudio
import dev.g000sha256.tdl.dto.FileTypeDocument
import dev.g000sha256.tdl.dto.FileTypeNone
import dev.g000sha256.tdl.dto.FileTypeNotificationSound
import dev.g000sha256.tdl.dto.FileTypePhoto
import dev.g000sha256.tdl.dto.FileTypePhotoStory
import dev.g000sha256.tdl.dto.FileTypeProfilePhoto
import dev.g000sha256.tdl.dto.FileTypeSecret
import dev.g000sha256.tdl.dto.FileTypeSecretThumbnail
import dev.g000sha256.tdl.dto.FileTypeSecure
import dev.g000sha256.tdl.dto.FileTypeSelfDestructingPhoto
import dev.g000sha256.tdl.dto.FileTypeSelfDestructingVideo
import dev.g000sha256.tdl.dto.FileTypeSelfDestructingVideoNote
import dev.g000sha256.tdl.dto.FileTypeSelfDestructingVoiceNote
import dev.g000sha256.tdl.dto.FileTypeSticker
import dev.g000sha256.tdl.dto.FileTypeThumbnail
import dev.g000sha256.tdl.dto.FileTypeUnknown
import dev.g000sha256.tdl.dto.FileTypeVideo
import dev.g000sha256.tdl.dto.FileTypeVideoNote
import dev.g000sha256.tdl.dto.FileTypeVideoStory
import dev.g000sha256.tdl.dto.FileTypeVoiceNote
import dev.g000sha256.tdl.dto.FileTypeWallpaper
import dev.g000sha256.tdl.dto.FirebaseAuthenticationSettings
import dev.g000sha256.tdl.dto.FirebaseAuthenticationSettingsAndroid
import dev.g000sha256.tdl.dto.FirebaseAuthenticationSettingsIos
import dev.g000sha256.tdl.dto.FirebaseDeviceVerificationParameters
import dev.g000sha256.tdl.dto.FirebaseDeviceVerificationParametersPlayIntegrity
import dev.g000sha256.tdl.dto.FirebaseDeviceVerificationParametersSafetyNet
import dev.g000sha256.tdl.dto.FormattedText
import dev.g000sha256.tdl.dto.ForumTopic
import dev.g000sha256.tdl.dto.ForumTopicIcon
import dev.g000sha256.tdl.dto.ForumTopicInfo
import dev.g000sha256.tdl.dto.ForumTopics
import dev.g000sha256.tdl.dto.ForwardSource
import dev.g000sha256.tdl.dto.FoundAffiliateProgram
import dev.g000sha256.tdl.dto.FoundAffiliatePrograms
import dev.g000sha256.tdl.dto.FoundChatBoosts
import dev.g000sha256.tdl.dto.FoundChatMessages
import dev.g000sha256.tdl.dto.FoundFileDownloads
import dev.g000sha256.tdl.dto.FoundMessages
import dev.g000sha256.tdl.dto.FoundPosition
import dev.g000sha256.tdl.dto.FoundPositions
import dev.g000sha256.tdl.dto.FoundStories
import dev.g000sha256.tdl.dto.FoundUsers
import dev.g000sha256.tdl.dto.FoundWebApp
import dev.g000sha256.tdl.dto.Game
import dev.g000sha256.tdl.dto.GameHighScore
import dev.g000sha256.tdl.dto.GameHighScores
import dev.g000sha256.tdl.dto.Gift
import dev.g000sha256.tdl.dto.GiftForResale
import dev.g000sha256.tdl.dto.GiftForResaleOrder
import dev.g000sha256.tdl.dto.GiftForResaleOrderNumber
import dev.g000sha256.tdl.dto.GiftForResaleOrderPrice
import dev.g000sha256.tdl.dto.GiftForResaleOrderPriceChangeDate
import dev.g000sha256.tdl.dto.GiftSettings
import dev.g000sha256.tdl.dto.GiftUpgradePreview
import dev.g000sha256.tdl.dto.GiftsForResale
import dev.g000sha256.tdl.dto.GiveawayInfo
import dev.g000sha256.tdl.dto.GiveawayInfoCompleted
import dev.g000sha256.tdl.dto.GiveawayInfoOngoing
import dev.g000sha256.tdl.dto.GiveawayParameters
import dev.g000sha256.tdl.dto.GiveawayParticipantStatus
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusAdministrator
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusAlreadyWasMember
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusDisallowedCountry
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusEligible
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusParticipating
import dev.g000sha256.tdl.dto.GiveawayPrize
import dev.g000sha256.tdl.dto.GiveawayPrizePremium
import dev.g000sha256.tdl.dto.GiveawayPrizeStars
import dev.g000sha256.tdl.dto.GroupCall
import dev.g000sha256.tdl.dto.GroupCallDataChannel
import dev.g000sha256.tdl.dto.GroupCallDataChannelMain
import dev.g000sha256.tdl.dto.GroupCallDataChannelScreenSharing
import dev.g000sha256.tdl.dto.GroupCallId
import dev.g000sha256.tdl.dto.GroupCallInfo
import dev.g000sha256.tdl.dto.GroupCallJoinParameters
import dev.g000sha256.tdl.dto.GroupCallParticipant
import dev.g000sha256.tdl.dto.GroupCallParticipantVideoInfo
import dev.g000sha256.tdl.dto.GroupCallParticipants
import dev.g000sha256.tdl.dto.GroupCallRecentSpeaker
import dev.g000sha256.tdl.dto.GroupCallVideoQuality
import dev.g000sha256.tdl.dto.GroupCallVideoQualityFull
import dev.g000sha256.tdl.dto.GroupCallVideoQualityMedium
import dev.g000sha256.tdl.dto.GroupCallVideoQualityThumbnail
import dev.g000sha256.tdl.dto.GroupCallVideoSourceGroup
import dev.g000sha256.tdl.dto.Hashtags
import dev.g000sha256.tdl.dto.HttpUrl
import dev.g000sha256.tdl.dto.IdentityDocument
import dev.g000sha256.tdl.dto.ImportedContacts
import dev.g000sha256.tdl.dto.InlineKeyboardButton
import dev.g000sha256.tdl.dto.InlineKeyboardButtonType
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeBuy
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeCallback
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeCallbackGame
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeCallbackWithPassword
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeCopyText
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeLoginUrl
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeSwitchInline
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeUrl
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeUser
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeWebApp
import dev.g000sha256.tdl.dto.InlineQueryResult
import dev.g000sha256.tdl.dto.InlineQueryResultAnimation
import dev.g000sha256.tdl.dto.InlineQueryResultArticle
import dev.g000sha256.tdl.dto.InlineQueryResultAudio
import dev.g000sha256.tdl.dto.InlineQueryResultContact
import dev.g000sha256.tdl.dto.InlineQueryResultDocument
import dev.g000sha256.tdl.dto.InlineQueryResultGame
import dev.g000sha256.tdl.dto.InlineQueryResultLocation
import dev.g000sha256.tdl.dto.InlineQueryResultPhoto
import dev.g000sha256.tdl.dto.InlineQueryResultSticker
import dev.g000sha256.tdl.dto.InlineQueryResultVenue
import dev.g000sha256.tdl.dto.InlineQueryResultVideo
import dev.g000sha256.tdl.dto.InlineQueryResultVoiceNote
import dev.g000sha256.tdl.dto.InlineQueryResults
import dev.g000sha256.tdl.dto.InlineQueryResultsButton
import dev.g000sha256.tdl.dto.InlineQueryResultsButtonType
import dev.g000sha256.tdl.dto.InlineQueryResultsButtonTypeStartBot
import dev.g000sha256.tdl.dto.InlineQueryResultsButtonTypeWebApp
import dev.g000sha256.tdl.dto.InputBackground
import dev.g000sha256.tdl.dto.InputBackgroundLocal
import dev.g000sha256.tdl.dto.InputBackgroundPrevious
import dev.g000sha256.tdl.dto.InputBackgroundRemote
import dev.g000sha256.tdl.dto.InputBusinessChatLink
import dev.g000sha256.tdl.dto.InputBusinessStartPage
import dev.g000sha256.tdl.dto.InputChatPhoto
import dev.g000sha256.tdl.dto.InputChatPhotoAnimation
import dev.g000sha256.tdl.dto.InputChatPhotoPrevious
import dev.g000sha256.tdl.dto.InputChatPhotoStatic
import dev.g000sha256.tdl.dto.InputChatPhotoSticker
import dev.g000sha256.tdl.dto.InputChecklist
import dev.g000sha256.tdl.dto.InputChecklistTask
import dev.g000sha256.tdl.dto.InputCredentials
import dev.g000sha256.tdl.dto.InputCredentialsApplePay
import dev.g000sha256.tdl.dto.InputCredentialsGooglePay
import dev.g000sha256.tdl.dto.InputCredentialsNew
import dev.g000sha256.tdl.dto.InputCredentialsSaved
import dev.g000sha256.tdl.dto.InputFile
import dev.g000sha256.tdl.dto.InputFileGenerated
import dev.g000sha256.tdl.dto.InputFileId
import dev.g000sha256.tdl.dto.InputFileLocal
import dev.g000sha256.tdl.dto.InputFileRemote
import dev.g000sha256.tdl.dto.InputGroupCall
import dev.g000sha256.tdl.dto.InputGroupCallLink
import dev.g000sha256.tdl.dto.InputGroupCallMessage
import dev.g000sha256.tdl.dto.InputIdentityDocument
import dev.g000sha256.tdl.dto.InputInlineQueryResult
import dev.g000sha256.tdl.dto.InputInlineQueryResultAnimation
import dev.g000sha256.tdl.dto.InputInlineQueryResultArticle
import dev.g000sha256.tdl.dto.InputInlineQueryResultAudio
import dev.g000sha256.tdl.dto.InputInlineQueryResultContact
import dev.g000sha256.tdl.dto.InputInlineQueryResultDocument
import dev.g000sha256.tdl.dto.InputInlineQueryResultGame
import dev.g000sha256.tdl.dto.InputInlineQueryResultLocation
import dev.g000sha256.tdl.dto.InputInlineQueryResultPhoto
import dev.g000sha256.tdl.dto.InputInlineQueryResultSticker
import dev.g000sha256.tdl.dto.InputInlineQueryResultVenue
import dev.g000sha256.tdl.dto.InputInlineQueryResultVideo
import dev.g000sha256.tdl.dto.InputInlineQueryResultVoiceNote
import dev.g000sha256.tdl.dto.InputInvoice
import dev.g000sha256.tdl.dto.InputInvoiceMessage
import dev.g000sha256.tdl.dto.InputInvoiceName
import dev.g000sha256.tdl.dto.InputInvoiceTelegram
import dev.g000sha256.tdl.dto.InputMessageAnimation
import dev.g000sha256.tdl.dto.InputMessageAudio
import dev.g000sha256.tdl.dto.InputMessageChecklist
import dev.g000sha256.tdl.dto.InputMessageContact
import dev.g000sha256.tdl.dto.InputMessageContent
import dev.g000sha256.tdl.dto.InputMessageDice
import dev.g000sha256.tdl.dto.InputMessageDocument
import dev.g000sha256.tdl.dto.InputMessageForwarded
import dev.g000sha256.tdl.dto.InputMessageGame
import dev.g000sha256.tdl.dto.InputMessageInvoice
import dev.g000sha256.tdl.dto.InputMessageLocation
import dev.g000sha256.tdl.dto.InputMessagePaidMedia
import dev.g000sha256.tdl.dto.InputMessagePhoto
import dev.g000sha256.tdl.dto.InputMessagePoll
import dev.g000sha256.tdl.dto.InputMessageReplyTo
import dev.g000sha256.tdl.dto.InputMessageReplyToExternalMessage
import dev.g000sha256.tdl.dto.InputMessageReplyToMessage
import dev.g000sha256.tdl.dto.InputMessageReplyToStory
import dev.g000sha256.tdl.dto.InputMessageSticker
import dev.g000sha256.tdl.dto.InputMessageStory
import dev.g000sha256.tdl.dto.InputMessageText
import dev.g000sha256.tdl.dto.InputMessageVenue
import dev.g000sha256.tdl.dto.InputMessageVideo
import dev.g000sha256.tdl.dto.InputMessageVideoNote
import dev.g000sha256.tdl.dto.InputMessageVoiceNote
import dev.g000sha256.tdl.dto.InputPaidMedia
import dev.g000sha256.tdl.dto.InputPaidMediaType
import dev.g000sha256.tdl.dto.InputPaidMediaTypePhoto
import dev.g000sha256.tdl.dto.InputPaidMediaTypeVideo
import dev.g000sha256.tdl.dto.InputPassportElement
import dev.g000sha256.tdl.dto.InputPassportElementAddress
import dev.g000sha256.tdl.dto.InputPassportElementBankStatement
import dev.g000sha256.tdl.dto.InputPassportElementDriverLicense
import dev.g000sha256.tdl.dto.InputPassportElementEmailAddress
import dev.g000sha256.tdl.dto.InputPassportElementError
import dev.g000sha256.tdl.dto.InputPassportElementErrorSource
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceDataField
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceFile
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceFiles
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceFrontSide
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceReverseSide
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceSelfie
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceTranslationFile
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceTranslationFiles
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceUnspecified
import dev.g000sha256.tdl.dto.InputPassportElementIdentityCard
import dev.g000sha256.tdl.dto.InputPassportElementInternalPassport
import dev.g000sha256.tdl.dto.InputPassportElementPassport
import dev.g000sha256.tdl.dto.InputPassportElementPassportRegistration
import dev.g000sha256.tdl.dto.InputPassportElementPersonalDetails
import dev.g000sha256.tdl.dto.InputPassportElementPhoneNumber
import dev.g000sha256.tdl.dto.InputPassportElementRentalAgreement
import dev.g000sha256.tdl.dto.InputPassportElementTemporaryRegistration
import dev.g000sha256.tdl.dto.InputPassportElementUtilityBill
import dev.g000sha256.tdl.dto.InputPersonalDocument
import dev.g000sha256.tdl.dto.InputSticker
import dev.g000sha256.tdl.dto.InputStoryArea
import dev.g000sha256.tdl.dto.InputStoryAreaType
import dev.g000sha256.tdl.dto.InputStoryAreaTypeFoundVenue
import dev.g000sha256.tdl.dto.InputStoryAreaTypeLink
import dev.g000sha256.tdl.dto.InputStoryAreaTypeLocation
import dev.g000sha256.tdl.dto.InputStoryAreaTypeMessage
import dev.g000sha256.tdl.dto.InputStoryAreaTypePreviousVenue
import dev.g000sha256.tdl.dto.InputStoryAreaTypeSuggestedReaction
import dev.g000sha256.tdl.dto.InputStoryAreaTypeUpgradedGift
import dev.g000sha256.tdl.dto.InputStoryAreaTypeWeather
import dev.g000sha256.tdl.dto.InputStoryAreas
import dev.g000sha256.tdl.dto.InputStoryContent
import dev.g000sha256.tdl.dto.InputStoryContentPhoto
import dev.g000sha256.tdl.dto.InputStoryContentVideo
import dev.g000sha256.tdl.dto.InputTextQuote
import dev.g000sha256.tdl.dto.InputThumbnail
import dev.g000sha256.tdl.dto.InternalLinkType
import dev.g000sha256.tdl.dto.InternalLinkTypeActiveSessions
import dev.g000sha256.tdl.dto.InternalLinkTypeAttachmentMenuBot
import dev.g000sha256.tdl.dto.InternalLinkTypeAuthenticationCode
import dev.g000sha256.tdl.dto.InternalLinkTypeBackground
import dev.g000sha256.tdl.dto.InternalLinkTypeBotAddToChannel
import dev.g000sha256.tdl.dto.InternalLinkTypeBotStart
import dev.g000sha256.tdl.dto.InternalLinkTypeBotStartInGroup
import dev.g000sha256.tdl.dto.InternalLinkTypeBusinessChat
import dev.g000sha256.tdl.dto.InternalLinkTypeBuyStars
import dev.g000sha256.tdl.dto.InternalLinkTypeChangePhoneNumber
import dev.g000sha256.tdl.dto.InternalLinkTypeChatAffiliateProgram
import dev.g000sha256.tdl.dto.InternalLinkTypeChatBoost
import dev.g000sha256.tdl.dto.InternalLinkTypeChatFolderInvite
import dev.g000sha256.tdl.dto.InternalLinkTypeChatFolderSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeChatInvite
import dev.g000sha256.tdl.dto.InternalLinkTypeDefaultMessageAutoDeleteTimerSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeEditProfileSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeGame
import dev.g000sha256.tdl.dto.InternalLinkTypeGroupCall
import dev.g000sha256.tdl.dto.InternalLinkTypeInstantView
import dev.g000sha256.tdl.dto.InternalLinkTypeInvoice
import dev.g000sha256.tdl.dto.InternalLinkTypeLanguagePack
import dev.g000sha256.tdl.dto.InternalLinkTypeLanguageSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeMainWebApp
import dev.g000sha256.tdl.dto.InternalLinkTypeMessage
import dev.g000sha256.tdl.dto.InternalLinkTypeMessageDraft
import dev.g000sha256.tdl.dto.InternalLinkTypeMyStars
import dev.g000sha256.tdl.dto.InternalLinkTypePassportDataRequest
import dev.g000sha256.tdl.dto.InternalLinkTypePhoneNumberConfirmation
import dev.g000sha256.tdl.dto.InternalLinkTypePremiumFeatures
import dev.g000sha256.tdl.dto.InternalLinkTypePremiumGift
import dev.g000sha256.tdl.dto.InternalLinkTypePremiumGiftCode
import dev.g000sha256.tdl.dto.InternalLinkTypePrivacyAndSecuritySettings
import dev.g000sha256.tdl.dto.InternalLinkTypeProxy
import dev.g000sha256.tdl.dto.InternalLinkTypePublicChat
import dev.g000sha256.tdl.dto.InternalLinkTypeQrCodeAuthentication
import dev.g000sha256.tdl.dto.InternalLinkTypeRestorePurchases
import dev.g000sha256.tdl.dto.InternalLinkTypeSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeStickerSet
import dev.g000sha256.tdl.dto.InternalLinkTypeStory
import dev.g000sha256.tdl.dto.InternalLinkTypeTheme
import dev.g000sha256.tdl.dto.InternalLinkTypeThemeSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeUnknownDeepLink
import dev.g000sha256.tdl.dto.InternalLinkTypeUnsupportedProxy
import dev.g000sha256.tdl.dto.InternalLinkTypeUpgradedGift
import dev.g000sha256.tdl.dto.InternalLinkTypeUserPhoneNumber
import dev.g000sha256.tdl.dto.InternalLinkTypeUserToken
import dev.g000sha256.tdl.dto.InternalLinkTypeVideoChat
import dev.g000sha256.tdl.dto.InternalLinkTypeWebApp
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResult
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResultSuccess
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResultUserAlreadyParticipant
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResultUserPrivacyRestricted
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResultUserWasBanned
import dev.g000sha256.tdl.dto.InviteLinkChatType
import dev.g000sha256.tdl.dto.InviteLinkChatTypeBasicGroup
import dev.g000sha256.tdl.dto.InviteLinkChatTypeChannel
import dev.g000sha256.tdl.dto.InviteLinkChatTypeSupergroup
import dev.g000sha256.tdl.dto.Invoice
import dev.g000sha256.tdl.dto.JsonObjectMember
import dev.g000sha256.tdl.dto.JsonValue
import dev.g000sha256.tdl.dto.JsonValueArray
import dev.g000sha256.tdl.dto.JsonValueBoolean
import dev.g000sha256.tdl.dto.JsonValueNull
import dev.g000sha256.tdl.dto.JsonValueNumber
import dev.g000sha256.tdl.dto.JsonValueObject
import dev.g000sha256.tdl.dto.JsonValueString
import dev.g000sha256.tdl.dto.KeyboardButton
import dev.g000sha256.tdl.dto.KeyboardButtonType
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestChat
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestLocation
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestPhoneNumber
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestPoll
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestUsers
import dev.g000sha256.tdl.dto.KeyboardButtonTypeText
import dev.g000sha256.tdl.dto.KeyboardButtonTypeWebApp
import dev.g000sha256.tdl.dto.LabeledPricePart
import dev.g000sha256.tdl.dto.LanguagePackInfo
import dev.g000sha256.tdl.dto.LanguagePackString
import dev.g000sha256.tdl.dto.LanguagePackStringValue
import dev.g000sha256.tdl.dto.LanguagePackStringValueDeleted
import dev.g000sha256.tdl.dto.LanguagePackStringValueOrdinary
import dev.g000sha256.tdl.dto.LanguagePackStringValuePluralized
import dev.g000sha256.tdl.dto.LanguagePackStrings
import dev.g000sha256.tdl.dto.LinkPreview
import dev.g000sha256.tdl.dto.LinkPreviewAlbumMedia
import dev.g000sha256.tdl.dto.LinkPreviewAlbumMediaPhoto
import dev.g000sha256.tdl.dto.LinkPreviewAlbumMediaVideo
import dev.g000sha256.tdl.dto.LinkPreviewOptions
import dev.g000sha256.tdl.dto.LinkPreviewType
import dev.g000sha256.tdl.dto.LinkPreviewTypeAlbum
import dev.g000sha256.tdl.dto.LinkPreviewTypeAnimation
import dev.g000sha256.tdl.dto.LinkPreviewTypeApp
import dev.g000sha256.tdl.dto.LinkPreviewTypeArticle
import dev.g000sha256.tdl.dto.LinkPreviewTypeAudio
import dev.g000sha256.tdl.dto.LinkPreviewTypeBackground
import dev.g000sha256.tdl.dto.LinkPreviewTypeChannelBoost
import dev.g000sha256.tdl.dto.LinkPreviewTypeChat
import dev.g000sha256.tdl.dto.LinkPreviewTypeDocument
import dev.g000sha256.tdl.dto.LinkPreviewTypeEmbeddedAnimationPlayer
import dev.g000sha256.tdl.dto.LinkPreviewTypeEmbeddedAudioPlayer
import dev.g000sha256.tdl.dto.LinkPreviewTypeEmbeddedVideoPlayer
import dev.g000sha256.tdl.dto.LinkPreviewTypeExternalAudio
import dev.g000sha256.tdl.dto.LinkPreviewTypeExternalVideo
import dev.g000sha256.tdl.dto.LinkPreviewTypeGroupCall
import dev.g000sha256.tdl.dto.LinkPreviewTypeInvoice
import dev.g000sha256.tdl.dto.LinkPreviewTypeMessage
import dev.g000sha256.tdl.dto.LinkPreviewTypePhoto
import dev.g000sha256.tdl.dto.LinkPreviewTypePremiumGiftCode
import dev.g000sha256.tdl.dto.LinkPreviewTypeShareableChatFolder
import dev.g000sha256.tdl.dto.LinkPreviewTypeSticker
import dev.g000sha256.tdl.dto.LinkPreviewTypeStickerSet
import dev.g000sha256.tdl.dto.LinkPreviewTypeStory
import dev.g000sha256.tdl.dto.LinkPreviewTypeSupergroupBoost
import dev.g000sha256.tdl.dto.LinkPreviewTypeTheme
import dev.g000sha256.tdl.dto.LinkPreviewTypeUnsupported
import dev.g000sha256.tdl.dto.LinkPreviewTypeUpgradedGift
import dev.g000sha256.tdl.dto.LinkPreviewTypeUser
import dev.g000sha256.tdl.dto.LinkPreviewTypeVideo
import dev.g000sha256.tdl.dto.LinkPreviewTypeVideoChat
import dev.g000sha256.tdl.dto.LinkPreviewTypeVideoNote
import dev.g000sha256.tdl.dto.LinkPreviewTypeVoiceNote
import dev.g000sha256.tdl.dto.LinkPreviewTypeWebApp
import dev.g000sha256.tdl.dto.LocalFile
import dev.g000sha256.tdl.dto.LocalizationTargetInfo
import dev.g000sha256.tdl.dto.Location
import dev.g000sha256.tdl.dto.LocationAddress
import dev.g000sha256.tdl.dto.LogStream
import dev.g000sha256.tdl.dto.LogStreamDefault
import dev.g000sha256.tdl.dto.LogStreamEmpty
import dev.g000sha256.tdl.dto.LogStreamFile
import dev.g000sha256.tdl.dto.LogTags
import dev.g000sha256.tdl.dto.LogVerbosityLevel
import dev.g000sha256.tdl.dto.LoginUrlInfo
import dev.g000sha256.tdl.dto.LoginUrlInfoOpen
import dev.g000sha256.tdl.dto.LoginUrlInfoRequestConfirmation
import dev.g000sha256.tdl.dto.MainWebApp
import dev.g000sha256.tdl.dto.MaskPoint
import dev.g000sha256.tdl.dto.MaskPointChin
import dev.g000sha256.tdl.dto.MaskPointEyes
import dev.g000sha256.tdl.dto.MaskPointForehead
import dev.g000sha256.tdl.dto.MaskPointMouth
import dev.g000sha256.tdl.dto.MaskPosition
import dev.g000sha256.tdl.dto.Message
import dev.g000sha256.tdl.dto.MessageAnimatedEmoji
import dev.g000sha256.tdl.dto.MessageAnimation
import dev.g000sha256.tdl.dto.MessageAudio
import dev.g000sha256.tdl.dto.MessageAutoDeleteTime
import dev.g000sha256.tdl.dto.MessageBasicGroupChatCreate
import dev.g000sha256.tdl.dto.MessageBotWriteAccessAllowed
import dev.g000sha256.tdl.dto.MessageCalendar
import dev.g000sha256.tdl.dto.MessageCalendarDay
import dev.g000sha256.tdl.dto.MessageCall
import dev.g000sha256.tdl.dto.MessageChatAddMembers
import dev.g000sha256.tdl.dto.MessageChatBoost
import dev.g000sha256.tdl.dto.MessageChatChangePhoto
import dev.g000sha256.tdl.dto.MessageChatChangeTitle
import dev.g000sha256.tdl.dto.MessageChatDeleteMember
import dev.g000sha256.tdl.dto.MessageChatDeletePhoto
import dev.g000sha256.tdl.dto.MessageChatJoinByLink
import dev.g000sha256.tdl.dto.MessageChatJoinByRequest
import dev.g000sha256.tdl.dto.MessageChatSetBackground
import dev.g000sha256.tdl.dto.MessageChatSetMessageAutoDeleteTime
import dev.g000sha256.tdl.dto.MessageChatSetTheme
import dev.g000sha256.tdl.dto.MessageChatShared
import dev.g000sha256.tdl.dto.MessageChatUpgradeFrom
import dev.g000sha256.tdl.dto.MessageChatUpgradeTo
import dev.g000sha256.tdl.dto.MessageChecklist
import dev.g000sha256.tdl.dto.MessageChecklistTasksAdded
import dev.g000sha256.tdl.dto.MessageChecklistTasksDone
import dev.g000sha256.tdl.dto.MessageContact
import dev.g000sha256.tdl.dto.MessageContactRegistered
import dev.g000sha256.tdl.dto.MessageContent
import dev.g000sha256.tdl.dto.MessageCopyOptions
import dev.g000sha256.tdl.dto.MessageCustomServiceAction
import dev.g000sha256.tdl.dto.MessageDice
import dev.g000sha256.tdl.dto.MessageDirectMessagePriceChanged
import dev.g000sha256.tdl.dto.MessageDocument
import dev.g000sha256.tdl.dto.MessageEffect
import dev.g000sha256.tdl.dto.MessageEffectType
import dev.g000sha256.tdl.dto.MessageEffectTypeEmojiReaction
import dev.g000sha256.tdl.dto.MessageEffectTypePremiumSticker
import dev.g000sha256.tdl.dto.MessageExpiredPhoto
import dev.g000sha256.tdl.dto.MessageExpiredVideo
import dev.g000sha256.tdl.dto.MessageExpiredVideoNote
import dev.g000sha256.tdl.dto.MessageExpiredVoiceNote
import dev.g000sha256.tdl.dto.MessageFileType
import dev.g000sha256.tdl.dto.MessageFileTypeGroup
import dev.g000sha256.tdl.dto.MessageFileTypePrivate
import dev.g000sha256.tdl.dto.MessageFileTypeUnknown
import dev.g000sha256.tdl.dto.MessageForumTopicCreated
import dev.g000sha256.tdl.dto.MessageForumTopicEdited
import dev.g000sha256.tdl.dto.MessageForumTopicIsClosedToggled
import dev.g000sha256.tdl.dto.MessageForumTopicIsHiddenToggled
import dev.g000sha256.tdl.dto.MessageForwardInfo
import dev.g000sha256.tdl.dto.MessageGame
import dev.g000sha256.tdl.dto.MessageGameScore
import dev.g000sha256.tdl.dto.MessageGift
import dev.g000sha256.tdl.dto.MessageGiftedPremium
import dev.g000sha256.tdl.dto.MessageGiftedStars
import dev.g000sha256.tdl.dto.MessageGiveaway
import dev.g000sha256.tdl.dto.MessageGiveawayCompleted
import dev.g000sha256.tdl.dto.MessageGiveawayCreated
import dev.g000sha256.tdl.dto.MessageGiveawayPrizeStars
import dev.g000sha256.tdl.dto.MessageGiveawayWinners
import dev.g000sha256.tdl.dto.MessageGroupCall
import dev.g000sha256.tdl.dto.MessageImportInfo
import dev.g000sha256.tdl.dto.MessageInteractionInfo
import dev.g000sha256.tdl.dto.MessageInviteVideoChatParticipants
import dev.g000sha256.tdl.dto.MessageInvoice
import dev.g000sha256.tdl.dto.MessageLink
import dev.g000sha256.tdl.dto.MessageLinkInfo
import dev.g000sha256.tdl.dto.MessageLocation
import dev.g000sha256.tdl.dto.MessageOrigin
import dev.g000sha256.tdl.dto.MessageOriginChannel
import dev.g000sha256.tdl.dto.MessageOriginChat
import dev.g000sha256.tdl.dto.MessageOriginHiddenUser
import dev.g000sha256.tdl.dto.MessageOriginUser
import dev.g000sha256.tdl.dto.MessagePaidMedia
import dev.g000sha256.tdl.dto.MessagePaidMessagePriceChanged
import dev.g000sha256.tdl.dto.MessagePaidMessagesRefunded
import dev.g000sha256.tdl.dto.MessagePassportDataReceived
import dev.g000sha256.tdl.dto.MessagePassportDataSent
import dev.g000sha256.tdl.dto.MessagePaymentRefunded
import dev.g000sha256.tdl.dto.MessagePaymentSuccessful
import dev.g000sha256.tdl.dto.MessagePaymentSuccessfulBot
import dev.g000sha256.tdl.dto.MessagePhoto
import dev.g000sha256.tdl.dto.MessagePinMessage
import dev.g000sha256.tdl.dto.MessagePoll
import dev.g000sha256.tdl.dto.MessagePosition
import dev.g000sha256.tdl.dto.MessagePositions
import dev.g000sha256.tdl.dto.MessagePremiumGiftCode
import dev.g000sha256.tdl.dto.MessageProperties
import dev.g000sha256.tdl.dto.MessageProximityAlertTriggered
import dev.g000sha256.tdl.dto.MessageReaction
import dev.g000sha256.tdl.dto.MessageReactions
import dev.g000sha256.tdl.dto.MessageReadDate
import dev.g000sha256.tdl.dto.MessageReadDateMyPrivacyRestricted
import dev.g000sha256.tdl.dto.MessageReadDateRead
import dev.g000sha256.tdl.dto.MessageReadDateTooOld
import dev.g000sha256.tdl.dto.MessageReadDateUnread
import dev.g000sha256.tdl.dto.MessageReadDateUserPrivacyRestricted
import dev.g000sha256.tdl.dto.MessageRefundedUpgradedGift
import dev.g000sha256.tdl.dto.MessageReplyInfo
import dev.g000sha256.tdl.dto.MessageReplyTo
import dev.g000sha256.tdl.dto.MessageReplyToMessage
import dev.g000sha256.tdl.dto.MessageReplyToStory
import dev.g000sha256.tdl.dto.MessageSchedulingState
import dev.g000sha256.tdl.dto.MessageSchedulingStateSendAtDate
import dev.g000sha256.tdl.dto.MessageSchedulingStateSendWhenOnline
import dev.g000sha256.tdl.dto.MessageSchedulingStateSendWhenVideoProcessed
import dev.g000sha256.tdl.dto.MessageScreenshotTaken
import dev.g000sha256.tdl.dto.MessageSelfDestructType
import dev.g000sha256.tdl.dto.MessageSelfDestructTypeImmediately
import dev.g000sha256.tdl.dto.MessageSelfDestructTypeTimer
import dev.g000sha256.tdl.dto.MessageSendOptions
import dev.g000sha256.tdl.dto.MessageSender
import dev.g000sha256.tdl.dto.MessageSenderChat
import dev.g000sha256.tdl.dto.MessageSenderUser
import dev.g000sha256.tdl.dto.MessageSenders
import dev.g000sha256.tdl.dto.MessageSendingState
import dev.g000sha256.tdl.dto.MessageSendingStateFailed
import dev.g000sha256.tdl.dto.MessageSendingStatePending
import dev.g000sha256.tdl.dto.MessageSource
import dev.g000sha256.tdl.dto.MessageSourceChatEventLog
import dev.g000sha256.tdl.dto.MessageSourceChatHistory
import dev.g000sha256.tdl.dto.MessageSourceChatList
import dev.g000sha256.tdl.dto.MessageSourceDirectMessagesChatTopicHistory
import dev.g000sha256.tdl.dto.MessageSourceForumTopicHistory
import dev.g000sha256.tdl.dto.MessageSourceHistoryPreview
import dev.g000sha256.tdl.dto.MessageSourceMessageThreadHistory
import dev.g000sha256.tdl.dto.MessageSourceNotification
import dev.g000sha256.tdl.dto.MessageSourceOther
import dev.g000sha256.tdl.dto.MessageSourceScreenshot
import dev.g000sha256.tdl.dto.MessageSourceSearch
import dev.g000sha256.tdl.dto.MessageStatistics
import dev.g000sha256.tdl.dto.MessageSticker
import dev.g000sha256.tdl.dto.MessageStory
import dev.g000sha256.tdl.dto.MessageSuggestProfilePhoto
import dev.g000sha256.tdl.dto.MessageSupergroupChatCreate
import dev.g000sha256.tdl.dto.MessageText
import dev.g000sha256.tdl.dto.MessageThreadInfo
import dev.g000sha256.tdl.dto.MessageTopic
import dev.g000sha256.tdl.dto.MessageTopicDirectMessages
import dev.g000sha256.tdl.dto.MessageTopicForum
import dev.g000sha256.tdl.dto.MessageTopicSavedMessages
import dev.g000sha256.tdl.dto.MessageUnsupported
import dev.g000sha256.tdl.dto.MessageUpgradedGift
import dev.g000sha256.tdl.dto.MessageUsersShared
import dev.g000sha256.tdl.dto.MessageVenue
import dev.g000sha256.tdl.dto.MessageVideo
import dev.g000sha256.tdl.dto.MessageVideoChatEnded
import dev.g000sha256.tdl.dto.MessageVideoChatScheduled
import dev.g000sha256.tdl.dto.MessageVideoChatStarted
import dev.g000sha256.tdl.dto.MessageVideoNote
import dev.g000sha256.tdl.dto.MessageViewer
import dev.g000sha256.tdl.dto.MessageViewers
import dev.g000sha256.tdl.dto.MessageVoiceNote
import dev.g000sha256.tdl.dto.MessageWebAppDataReceived
import dev.g000sha256.tdl.dto.MessageWebAppDataSent
import dev.g000sha256.tdl.dto.Messages
import dev.g000sha256.tdl.dto.Minithumbnail
import dev.g000sha256.tdl.dto.NetworkStatistics
import dev.g000sha256.tdl.dto.NetworkStatisticsEntry
import dev.g000sha256.tdl.dto.NetworkStatisticsEntryCall
import dev.g000sha256.tdl.dto.NetworkStatisticsEntryFile
import dev.g000sha256.tdl.dto.NetworkType
import dev.g000sha256.tdl.dto.NetworkTypeMobile
import dev.g000sha256.tdl.dto.NetworkTypeMobileRoaming
import dev.g000sha256.tdl.dto.NetworkTypeNone
import dev.g000sha256.tdl.dto.NetworkTypeOther
import dev.g000sha256.tdl.dto.NetworkTypeWiFi
import dev.g000sha256.tdl.dto.NewChatPrivacySettings
import dev.g000sha256.tdl.dto.Notification
import dev.g000sha256.tdl.dto.NotificationGroup
import dev.g000sha256.tdl.dto.NotificationGroupType
import dev.g000sha256.tdl.dto.NotificationGroupTypeCalls
import dev.g000sha256.tdl.dto.NotificationGroupTypeMentions
import dev.g000sha256.tdl.dto.NotificationGroupTypeMessages
import dev.g000sha256.tdl.dto.NotificationGroupTypeSecretChat
import dev.g000sha256.tdl.dto.NotificationSettingsScope
import dev.g000sha256.tdl.dto.NotificationSettingsScopeChannelChats
import dev.g000sha256.tdl.dto.NotificationSettingsScopeGroupChats
import dev.g000sha256.tdl.dto.NotificationSettingsScopePrivateChats
import dev.g000sha256.tdl.dto.NotificationSound
import dev.g000sha256.tdl.dto.NotificationSounds
import dev.g000sha256.tdl.dto.NotificationType
import dev.g000sha256.tdl.dto.NotificationTypeNewCall
import dev.g000sha256.tdl.dto.NotificationTypeNewMessage
import dev.g000sha256.tdl.dto.NotificationTypeNewPushMessage
import dev.g000sha256.tdl.dto.NotificationTypeNewSecretChat
import dev.g000sha256.tdl.dto.Ok
import dev.g000sha256.tdl.dto.OptionValue
import dev.g000sha256.tdl.dto.OptionValueBoolean
import dev.g000sha256.tdl.dto.OptionValueEmpty
import dev.g000sha256.tdl.dto.OptionValueInteger
import dev.g000sha256.tdl.dto.OptionValueString
import dev.g000sha256.tdl.dto.OrderInfo
import dev.g000sha256.tdl.dto.Outline
import dev.g000sha256.tdl.dto.PageBlock
import dev.g000sha256.tdl.dto.PageBlockAnchor
import dev.g000sha256.tdl.dto.PageBlockAnimation
import dev.g000sha256.tdl.dto.PageBlockAudio
import dev.g000sha256.tdl.dto.PageBlockAuthorDate
import dev.g000sha256.tdl.dto.PageBlockBlockQuote
import dev.g000sha256.tdl.dto.PageBlockCaption
import dev.g000sha256.tdl.dto.PageBlockChatLink
import dev.g000sha256.tdl.dto.PageBlockCollage
import dev.g000sha256.tdl.dto.PageBlockCover
import dev.g000sha256.tdl.dto.PageBlockDetails
import dev.g000sha256.tdl.dto.PageBlockDivider
import dev.g000sha256.tdl.dto.PageBlockEmbedded
import dev.g000sha256.tdl.dto.PageBlockEmbeddedPost
import dev.g000sha256.tdl.dto.PageBlockFooter
import dev.g000sha256.tdl.dto.PageBlockHeader
import dev.g000sha256.tdl.dto.PageBlockHorizontalAlignment
import dev.g000sha256.tdl.dto.PageBlockHorizontalAlignmentCenter
import dev.g000sha256.tdl.dto.PageBlockHorizontalAlignmentLeft
import dev.g000sha256.tdl.dto.PageBlockHorizontalAlignmentRight
import dev.g000sha256.tdl.dto.PageBlockKicker
import dev.g000sha256.tdl.dto.PageBlockList
import dev.g000sha256.tdl.dto.PageBlockListItem
import dev.g000sha256.tdl.dto.PageBlockMap
import dev.g000sha256.tdl.dto.PageBlockParagraph
import dev.g000sha256.tdl.dto.PageBlockPhoto
import dev.g000sha256.tdl.dto.PageBlockPreformatted
import dev.g000sha256.tdl.dto.PageBlockPullQuote
import dev.g000sha256.tdl.dto.PageBlockRelatedArticle
import dev.g000sha256.tdl.dto.PageBlockRelatedArticles
import dev.g000sha256.tdl.dto.PageBlockSlideshow
import dev.g000sha256.tdl.dto.PageBlockSubheader
import dev.g000sha256.tdl.dto.PageBlockSubtitle
import dev.g000sha256.tdl.dto.PageBlockTable
import dev.g000sha256.tdl.dto.PageBlockTableCell
import dev.g000sha256.tdl.dto.PageBlockTitle
import dev.g000sha256.tdl.dto.PageBlockVerticalAlignment
import dev.g000sha256.tdl.dto.PageBlockVerticalAlignmentBottom
import dev.g000sha256.tdl.dto.PageBlockVerticalAlignmentMiddle
import dev.g000sha256.tdl.dto.PageBlockVerticalAlignmentTop
import dev.g000sha256.tdl.dto.PageBlockVideo
import dev.g000sha256.tdl.dto.PageBlockVoiceNote
import dev.g000sha256.tdl.dto.PaidMedia
import dev.g000sha256.tdl.dto.PaidMediaPhoto
import dev.g000sha256.tdl.dto.PaidMediaPreview
import dev.g000sha256.tdl.dto.PaidMediaUnsupported
import dev.g000sha256.tdl.dto.PaidMediaVideo
import dev.g000sha256.tdl.dto.PaidReactionType
import dev.g000sha256.tdl.dto.PaidReactionTypeAnonymous
import dev.g000sha256.tdl.dto.PaidReactionTypeChat
import dev.g000sha256.tdl.dto.PaidReactionTypeRegular
import dev.g000sha256.tdl.dto.PaidReactor
import dev.g000sha256.tdl.dto.PassportAuthorizationForm
import dev.g000sha256.tdl.dto.PassportElement
import dev.g000sha256.tdl.dto.PassportElementAddress
import dev.g000sha256.tdl.dto.PassportElementBankStatement
import dev.g000sha256.tdl.dto.PassportElementDriverLicense
import dev.g000sha256.tdl.dto.PassportElementEmailAddress
import dev.g000sha256.tdl.dto.PassportElementError
import dev.g000sha256.tdl.dto.PassportElementErrorSource
import dev.g000sha256.tdl.dto.PassportElementErrorSourceDataField
import dev.g000sha256.tdl.dto.PassportElementErrorSourceFile
import dev.g000sha256.tdl.dto.PassportElementErrorSourceFiles
import dev.g000sha256.tdl.dto.PassportElementErrorSourceFrontSide
import dev.g000sha256.tdl.dto.PassportElementErrorSourceReverseSide
import dev.g000sha256.tdl.dto.PassportElementErrorSourceSelfie
import dev.g000sha256.tdl.dto.PassportElementErrorSourceTranslationFile
import dev.g000sha256.tdl.dto.PassportElementErrorSourceTranslationFiles
import dev.g000sha256.tdl.dto.PassportElementErrorSourceUnspecified
import dev.g000sha256.tdl.dto.PassportElementIdentityCard
import dev.g000sha256.tdl.dto.PassportElementInternalPassport
import dev.g000sha256.tdl.dto.PassportElementPassport
import dev.g000sha256.tdl.dto.PassportElementPassportRegistration
import dev.g000sha256.tdl.dto.PassportElementPersonalDetails
import dev.g000sha256.tdl.dto.PassportElementPhoneNumber
import dev.g000sha256.tdl.dto.PassportElementRentalAgreement
import dev.g000sha256.tdl.dto.PassportElementTemporaryRegistration
import dev.g000sha256.tdl.dto.PassportElementType
import dev.g000sha256.tdl.dto.PassportElementTypeAddress
import dev.g000sha256.tdl.dto.PassportElementTypeBankStatement
import dev.g000sha256.tdl.dto.PassportElementTypeDriverLicense
import dev.g000sha256.tdl.dto.PassportElementTypeEmailAddress
import dev.g000sha256.tdl.dto.PassportElementTypeIdentityCard
import dev.g000sha256.tdl.dto.PassportElementTypeInternalPassport
import dev.g000sha256.tdl.dto.PassportElementTypePassport
import dev.g000sha256.tdl.dto.PassportElementTypePassportRegistration
import dev.g000sha256.tdl.dto.PassportElementTypePersonalDetails
import dev.g000sha256.tdl.dto.PassportElementTypePhoneNumber
import dev.g000sha256.tdl.dto.PassportElementTypeRentalAgreement
import dev.g000sha256.tdl.dto.PassportElementTypeTemporaryRegistration
import dev.g000sha256.tdl.dto.PassportElementTypeUtilityBill
import dev.g000sha256.tdl.dto.PassportElementUtilityBill
import dev.g000sha256.tdl.dto.PassportElements
import dev.g000sha256.tdl.dto.PassportElementsWithErrors
import dev.g000sha256.tdl.dto.PassportRequiredElement
import dev.g000sha256.tdl.dto.PassportSuitableElement
import dev.g000sha256.tdl.dto.PasswordState
import dev.g000sha256.tdl.dto.PaymentForm
import dev.g000sha256.tdl.dto.PaymentFormType
import dev.g000sha256.tdl.dto.PaymentFormTypeRegular
import dev.g000sha256.tdl.dto.PaymentFormTypeStarSubscription
import dev.g000sha256.tdl.dto.PaymentFormTypeStars
import dev.g000sha256.tdl.dto.PaymentOption
import dev.g000sha256.tdl.dto.PaymentProvider
import dev.g000sha256.tdl.dto.PaymentProviderOther
import dev.g000sha256.tdl.dto.PaymentProviderSmartGlocal
import dev.g000sha256.tdl.dto.PaymentProviderStripe
import dev.g000sha256.tdl.dto.PaymentReceipt
import dev.g000sha256.tdl.dto.PaymentReceiptType
import dev.g000sha256.tdl.dto.PaymentReceiptTypeRegular
import dev.g000sha256.tdl.dto.PaymentReceiptTypeStars
import dev.g000sha256.tdl.dto.PaymentResult
import dev.g000sha256.tdl.dto.PersonalDetails
import dev.g000sha256.tdl.dto.PersonalDocument
import dev.g000sha256.tdl.dto.PhoneNumberAuthenticationSettings
import dev.g000sha256.tdl.dto.PhoneNumberCodeType
import dev.g000sha256.tdl.dto.PhoneNumberCodeTypeChange
import dev.g000sha256.tdl.dto.PhoneNumberCodeTypeConfirmOwnership
import dev.g000sha256.tdl.dto.PhoneNumberCodeTypeVerify
import dev.g000sha256.tdl.dto.PhoneNumberInfo
import dev.g000sha256.tdl.dto.Photo
import dev.g000sha256.tdl.dto.PhotoSize
import dev.g000sha256.tdl.dto.Point
import dev.g000sha256.tdl.dto.Poll
import dev.g000sha256.tdl.dto.PollOption
import dev.g000sha256.tdl.dto.PollType
import dev.g000sha256.tdl.dto.PollTypeQuiz
import dev.g000sha256.tdl.dto.PollTypeRegular
import dev.g000sha256.tdl.dto.PremiumFeature
import dev.g000sha256.tdl.dto.PremiumFeatureAccentColor
import dev.g000sha256.tdl.dto.PremiumFeatureAdvancedChatManagement
import dev.g000sha256.tdl.dto.PremiumFeatureAnimatedProfilePhoto
import dev.g000sha256.tdl.dto.PremiumFeatureAppIcons
import dev.g000sha256.tdl.dto.PremiumFeatureBackgroundForBoth
import dev.g000sha256.tdl.dto.PremiumFeatureBusiness
import dev.g000sha256.tdl.dto.PremiumFeatureChatBoost
import dev.g000sha256.tdl.dto.PremiumFeatureChecklists
import dev.g000sha256.tdl.dto.PremiumFeatureCustomEmoji
import dev.g000sha256.tdl.dto.PremiumFeatureDisabledAds
import dev.g000sha256.tdl.dto.PremiumFeatureEmojiStatus
import dev.g000sha256.tdl.dto.PremiumFeatureForumTopicIcon
import dev.g000sha256.tdl.dto.PremiumFeatureImprovedDownloadSpeed
import dev.g000sha256.tdl.dto.PremiumFeatureIncreasedLimits
import dev.g000sha256.tdl.dto.PremiumFeatureIncreasedUploadFileSize
import dev.g000sha256.tdl.dto.PremiumFeatureLastSeenTimes
import dev.g000sha256.tdl.dto.PremiumFeatureMessageEffects
import dev.g000sha256.tdl.dto.PremiumFeatureMessagePrivacy
import dev.g000sha256.tdl.dto.PremiumFeatureProfileBadge
import dev.g000sha256.tdl.dto.PremiumFeaturePromotionAnimation
import dev.g000sha256.tdl.dto.PremiumFeatureRealTimeChatTranslation
import dev.g000sha256.tdl.dto.PremiumFeatureSavedMessagesTags
import dev.g000sha256.tdl.dto.PremiumFeatureUniqueReactions
import dev.g000sha256.tdl.dto.PremiumFeatureUniqueStickers
import dev.g000sha256.tdl.dto.PremiumFeatureUpgradedStories
import dev.g000sha256.tdl.dto.PremiumFeatureVoiceRecognition
import dev.g000sha256.tdl.dto.PremiumFeatures
import dev.g000sha256.tdl.dto.PremiumGiftCodeInfo
import dev.g000sha256.tdl.dto.PremiumGiftPaymentOption
import dev.g000sha256.tdl.dto.PremiumGiftPaymentOptions
import dev.g000sha256.tdl.dto.PremiumGiveawayPaymentOption
import dev.g000sha256.tdl.dto.PremiumGiveawayPaymentOptions
import dev.g000sha256.tdl.dto.PremiumLimit
import dev.g000sha256.tdl.dto.PremiumLimitType
import dev.g000sha256.tdl.dto.PremiumLimitTypeActiveStoryCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeBioLength
import dev.g000sha256.tdl.dto.PremiumLimitTypeCaptionLength
import dev.g000sha256.tdl.dto.PremiumLimitTypeChatFolderChosenChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeChatFolderCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeChatFolderInviteLinkCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeCreatedPublicChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeFavoriteStickerCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeMonthlyPostedStoryCount
import dev.g000sha256.tdl.dto.PremiumLimitTypePinnedArchivedChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypePinnedChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypePinnedSavedMessagesTopicCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeSavedAnimationCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeShareableChatFolderCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeSimilarChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeStoryCaptionLength
import dev.g000sha256.tdl.dto.PremiumLimitTypeStorySuggestedReactionAreaCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeSupergroupCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeWeeklyPostedStoryCount
import dev.g000sha256.tdl.dto.PremiumPaymentOption
import dev.g000sha256.tdl.dto.PremiumSource
import dev.g000sha256.tdl.dto.PremiumSourceBusinessFeature
import dev.g000sha256.tdl.dto.PremiumSourceFeature
import dev.g000sha256.tdl.dto.PremiumSourceLimitExceeded
import dev.g000sha256.tdl.dto.PremiumSourceLink
import dev.g000sha256.tdl.dto.PremiumSourceSettings
import dev.g000sha256.tdl.dto.PremiumSourceStoryFeature
import dev.g000sha256.tdl.dto.PremiumState
import dev.g000sha256.tdl.dto.PremiumStatePaymentOption
import dev.g000sha256.tdl.dto.PremiumStoryFeature
import dev.g000sha256.tdl.dto.PremiumStoryFeatureCustomExpirationDuration
import dev.g000sha256.tdl.dto.PremiumStoryFeatureLinksAndFormatting
import dev.g000sha256.tdl.dto.PremiumStoryFeaturePermanentViewsHistory
import dev.g000sha256.tdl.dto.PremiumStoryFeaturePriorityOrder
import dev.g000sha256.tdl.dto.PremiumStoryFeatureSaveStories
import dev.g000sha256.tdl.dto.PremiumStoryFeatureStealthMode
import dev.g000sha256.tdl.dto.PremiumStoryFeatureVideoQuality
import dev.g000sha256.tdl.dto.PrepaidGiveaway
import dev.g000sha256.tdl.dto.PreparedInlineMessage
import dev.g000sha256.tdl.dto.PreparedInlineMessageId
import dev.g000sha256.tdl.dto.ProductInfo
import dev.g000sha256.tdl.dto.ProfileAccentColor
import dev.g000sha256.tdl.dto.ProfileAccentColors
import dev.g000sha256.tdl.dto.ProfilePhoto
import dev.g000sha256.tdl.dto.Proxies
import dev.g000sha256.tdl.dto.Proxy
import dev.g000sha256.tdl.dto.ProxyType
import dev.g000sha256.tdl.dto.ProxyTypeHttp
import dev.g000sha256.tdl.dto.ProxyTypeMtproto
import dev.g000sha256.tdl.dto.ProxyTypeSocks5
import dev.g000sha256.tdl.dto.PublicChatType
import dev.g000sha256.tdl.dto.PublicChatTypeHasUsername
import dev.g000sha256.tdl.dto.PublicChatTypeIsLocationBased
import dev.g000sha256.tdl.dto.PublicForward
import dev.g000sha256.tdl.dto.PublicForwardMessage
import dev.g000sha256.tdl.dto.PublicForwardStory
import dev.g000sha256.tdl.dto.PublicForwards
import dev.g000sha256.tdl.dto.PushMessageContent
import dev.g000sha256.tdl.dto.PushMessageContentAnimation
import dev.g000sha256.tdl.dto.PushMessageContentAudio
import dev.g000sha256.tdl.dto.PushMessageContentBasicGroupChatCreate
import dev.g000sha256.tdl.dto.PushMessageContentChatAddMembers
import dev.g000sha256.tdl.dto.PushMessageContentChatChangePhoto
import dev.g000sha256.tdl.dto.PushMessageContentChatChangeTitle
import dev.g000sha256.tdl.dto.PushMessageContentChatDeleteMember
import dev.g000sha256.tdl.dto.PushMessageContentChatJoinByLink
import dev.g000sha256.tdl.dto.PushMessageContentChatJoinByRequest
import dev.g000sha256.tdl.dto.PushMessageContentChatSetBackground
import dev.g000sha256.tdl.dto.PushMessageContentChatSetTheme
import dev.g000sha256.tdl.dto.PushMessageContentChecklist
import dev.g000sha256.tdl.dto.PushMessageContentChecklistTasksAdded
import dev.g000sha256.tdl.dto.PushMessageContentChecklistTasksDone
import dev.g000sha256.tdl.dto.PushMessageContentContact
import dev.g000sha256.tdl.dto.PushMessageContentContactRegistered
import dev.g000sha256.tdl.dto.PushMessageContentDocument
import dev.g000sha256.tdl.dto.PushMessageContentGame
import dev.g000sha256.tdl.dto.PushMessageContentGameScore
import dev.g000sha256.tdl.dto.PushMessageContentGift
import dev.g000sha256.tdl.dto.PushMessageContentGiveaway
import dev.g000sha256.tdl.dto.PushMessageContentHidden
import dev.g000sha256.tdl.dto.PushMessageContentInviteVideoChatParticipants
import dev.g000sha256.tdl.dto.PushMessageContentInvoice
import dev.g000sha256.tdl.dto.PushMessageContentLocation
import dev.g000sha256.tdl.dto.PushMessageContentMediaAlbum
import dev.g000sha256.tdl.dto.PushMessageContentMessageForwards
import dev.g000sha256.tdl.dto.PushMessageContentPaidMedia
import dev.g000sha256.tdl.dto.PushMessageContentPhoto
import dev.g000sha256.tdl.dto.PushMessageContentPoll
import dev.g000sha256.tdl.dto.PushMessageContentPremiumGiftCode
import dev.g000sha256.tdl.dto.PushMessageContentProximityAlertTriggered
import dev.g000sha256.tdl.dto.PushMessageContentRecurringPayment
import dev.g000sha256.tdl.dto.PushMessageContentScreenshotTaken
import dev.g000sha256.tdl.dto.PushMessageContentSticker
import dev.g000sha256.tdl.dto.PushMessageContentStory
import dev.g000sha256.tdl.dto.PushMessageContentSuggestProfilePhoto
import dev.g000sha256.tdl.dto.PushMessageContentText
import dev.g000sha256.tdl.dto.PushMessageContentUpgradedGift
import dev.g000sha256.tdl.dto.PushMessageContentVideo
import dev.g000sha256.tdl.dto.PushMessageContentVideoChatEnded
import dev.g000sha256.tdl.dto.PushMessageContentVideoChatStarted
import dev.g000sha256.tdl.dto.PushMessageContentVideoNote
import dev.g000sha256.tdl.dto.PushMessageContentVoiceNote
import dev.g000sha256.tdl.dto.PushReceiverId
import dev.g000sha256.tdl.dto.QuickReplyMessage
import dev.g000sha256.tdl.dto.QuickReplyMessages
import dev.g000sha256.tdl.dto.QuickReplyShortcut
import dev.g000sha256.tdl.dto.ReactionNotificationSettings
import dev.g000sha256.tdl.dto.ReactionNotificationSource
import dev.g000sha256.tdl.dto.ReactionNotificationSourceAll
import dev.g000sha256.tdl.dto.ReactionNotificationSourceContacts
import dev.g000sha256.tdl.dto.ReactionNotificationSourceNone
import dev.g000sha256.tdl.dto.ReactionType
import dev.g000sha256.tdl.dto.ReactionTypeCustomEmoji
import dev.g000sha256.tdl.dto.ReactionTypeEmoji
import dev.g000sha256.tdl.dto.ReactionTypePaid
import dev.g000sha256.tdl.dto.ReactionUnavailabilityReason
import dev.g000sha256.tdl.dto.ReactionUnavailabilityReasonAnonymousAdministrator
import dev.g000sha256.tdl.dto.ReactionUnavailabilityReasonGuest
import dev.g000sha256.tdl.dto.ReadDatePrivacySettings
import dev.g000sha256.tdl.dto.ReceivedGift
import dev.g000sha256.tdl.dto.ReceivedGifts
import dev.g000sha256.tdl.dto.RecommendedChatFolder
import dev.g000sha256.tdl.dto.RecommendedChatFolders
import dev.g000sha256.tdl.dto.RecoveryEmailAddress
import dev.g000sha256.tdl.dto.RemoteFile
import dev.g000sha256.tdl.dto.ReplyMarkup
import dev.g000sha256.tdl.dto.ReplyMarkupForceReply
import dev.g000sha256.tdl.dto.ReplyMarkupInlineKeyboard
import dev.g000sha256.tdl.dto.ReplyMarkupRemoveKeyboard
import dev.g000sha256.tdl.dto.ReplyMarkupShowKeyboard
import dev.g000sha256.tdl.dto.ReportChatResult
import dev.g000sha256.tdl.dto.ReportChatResultMessagesRequired
import dev.g000sha256.tdl.dto.ReportChatResultOk
import dev.g000sha256.tdl.dto.ReportChatResultOptionRequired
import dev.g000sha256.tdl.dto.ReportChatResultTextRequired
import dev.g000sha256.tdl.dto.ReportOption
import dev.g000sha256.tdl.dto.ReportReason
import dev.g000sha256.tdl.dto.ReportReasonChildAbuse
import dev.g000sha256.tdl.dto.ReportReasonCopyright
import dev.g000sha256.tdl.dto.ReportReasonCustom
import dev.g000sha256.tdl.dto.ReportReasonFake
import dev.g000sha256.tdl.dto.ReportReasonIllegalDrugs
import dev.g000sha256.tdl.dto.ReportReasonPersonalDetails
import dev.g000sha256.tdl.dto.ReportReasonPornography
import dev.g000sha256.tdl.dto.ReportReasonSpam
import dev.g000sha256.tdl.dto.ReportReasonUnrelatedLocation
import dev.g000sha256.tdl.dto.ReportReasonViolence
import dev.g000sha256.tdl.dto.ReportSponsoredResult
import dev.g000sha256.tdl.dto.ReportSponsoredResultAdsHidden
import dev.g000sha256.tdl.dto.ReportSponsoredResultFailed
import dev.g000sha256.tdl.dto.ReportSponsoredResultOk
import dev.g000sha256.tdl.dto.ReportSponsoredResultOptionRequired
import dev.g000sha256.tdl.dto.ReportSponsoredResultPremiumRequired
import dev.g000sha256.tdl.dto.ReportStoryResult
import dev.g000sha256.tdl.dto.ReportStoryResultOk
import dev.g000sha256.tdl.dto.ReportStoryResultOptionRequired
import dev.g000sha256.tdl.dto.ReportStoryResultTextRequired
import dev.g000sha256.tdl.dto.ResendCodeReason
import dev.g000sha256.tdl.dto.ResendCodeReasonUserRequest
import dev.g000sha256.tdl.dto.ResendCodeReasonVerificationFailed
import dev.g000sha256.tdl.dto.ResetPasswordResult
import dev.g000sha256.tdl.dto.ResetPasswordResultDeclined
import dev.g000sha256.tdl.dto.ResetPasswordResultOk
import dev.g000sha256.tdl.dto.ResetPasswordResultPending
import dev.g000sha256.tdl.dto.RevenueWithdrawalState
import dev.g000sha256.tdl.dto.RevenueWithdrawalStateFailed
import dev.g000sha256.tdl.dto.RevenueWithdrawalStatePending
import dev.g000sha256.tdl.dto.RevenueWithdrawalStateSucceeded
import dev.g000sha256.tdl.dto.RichText
import dev.g000sha256.tdl.dto.RichTextAnchor
import dev.g000sha256.tdl.dto.RichTextAnchorLink
import dev.g000sha256.tdl.dto.RichTextBold
import dev.g000sha256.tdl.dto.RichTextEmailAddress
import dev.g000sha256.tdl.dto.RichTextFixed
import dev.g000sha256.tdl.dto.RichTextIcon
import dev.g000sha256.tdl.dto.RichTextItalic
import dev.g000sha256.tdl.dto.RichTextMarked
import dev.g000sha256.tdl.dto.RichTextPhoneNumber
import dev.g000sha256.tdl.dto.RichTextPlain
import dev.g000sha256.tdl.dto.RichTextReference
import dev.g000sha256.tdl.dto.RichTextStrikethrough
import dev.g000sha256.tdl.dto.RichTextSubscript
import dev.g000sha256.tdl.dto.RichTextSuperscript
import dev.g000sha256.tdl.dto.RichTextUnderline
import dev.g000sha256.tdl.dto.RichTextUrl
import dev.g000sha256.tdl.dto.RichTexts
import dev.g000sha256.tdl.dto.RtmpUrl
import dev.g000sha256.tdl.dto.SavedCredentials
import dev.g000sha256.tdl.dto.SavedMessagesTag
import dev.g000sha256.tdl.dto.SavedMessagesTags
import dev.g000sha256.tdl.dto.SavedMessagesTopic
import dev.g000sha256.tdl.dto.SavedMessagesTopicType
import dev.g000sha256.tdl.dto.SavedMessagesTopicTypeAuthorHidden
import dev.g000sha256.tdl.dto.SavedMessagesTopicTypeMyNotes
import dev.g000sha256.tdl.dto.SavedMessagesTopicTypeSavedFromChat
import dev.g000sha256.tdl.dto.ScopeAutosaveSettings
import dev.g000sha256.tdl.dto.ScopeNotificationSettings
import dev.g000sha256.tdl.dto.SearchMessagesChatTypeFilter
import dev.g000sha256.tdl.dto.SearchMessagesChatTypeFilterChannel
import dev.g000sha256.tdl.dto.SearchMessagesChatTypeFilterGroup
import dev.g000sha256.tdl.dto.SearchMessagesChatTypeFilterPrivate
import dev.g000sha256.tdl.dto.SearchMessagesFilter
import dev.g000sha256.tdl.dto.SearchMessagesFilterAnimation
import dev.g000sha256.tdl.dto.SearchMessagesFilterAudio
import dev.g000sha256.tdl.dto.SearchMessagesFilterChatPhoto
import dev.g000sha256.tdl.dto.SearchMessagesFilterDocument
import dev.g000sha256.tdl.dto.SearchMessagesFilterEmpty
import dev.g000sha256.tdl.dto.SearchMessagesFilterFailedToSend
import dev.g000sha256.tdl.dto.SearchMessagesFilterMention
import dev.g000sha256.tdl.dto.SearchMessagesFilterPhoto
import dev.g000sha256.tdl.dto.SearchMessagesFilterPhotoAndVideo
import dev.g000sha256.tdl.dto.SearchMessagesFilterPinned
import dev.g000sha256.tdl.dto.SearchMessagesFilterUnreadMention
import dev.g000sha256.tdl.dto.SearchMessagesFilterUnreadReaction
import dev.g000sha256.tdl.dto.SearchMessagesFilterUrl
import dev.g000sha256.tdl.dto.SearchMessagesFilterVideo
import dev.g000sha256.tdl.dto.SearchMessagesFilterVideoNote
import dev.g000sha256.tdl.dto.SearchMessagesFilterVoiceAndVideoNote
import dev.g000sha256.tdl.dto.SearchMessagesFilterVoiceNote
import dev.g000sha256.tdl.dto.Seconds
import dev.g000sha256.tdl.dto.SecretChat
import dev.g000sha256.tdl.dto.SecretChatState
import dev.g000sha256.tdl.dto.SecretChatStateClosed
import dev.g000sha256.tdl.dto.SecretChatStatePending
import dev.g000sha256.tdl.dto.SecretChatStateReady
import dev.g000sha256.tdl.dto.SentGift
import dev.g000sha256.tdl.dto.SentGiftRegular
import dev.g000sha256.tdl.dto.SentGiftUpgraded
import dev.g000sha256.tdl.dto.SentWebAppMessage
import dev.g000sha256.tdl.dto.Session
import dev.g000sha256.tdl.dto.SessionType
import dev.g000sha256.tdl.dto.SessionTypeAndroid
import dev.g000sha256.tdl.dto.SessionTypeApple
import dev.g000sha256.tdl.dto.SessionTypeBrave
import dev.g000sha256.tdl.dto.SessionTypeChrome
import dev.g000sha256.tdl.dto.SessionTypeEdge
import dev.g000sha256.tdl.dto.SessionTypeFirefox
import dev.g000sha256.tdl.dto.SessionTypeIpad
import dev.g000sha256.tdl.dto.SessionTypeIphone
import dev.g000sha256.tdl.dto.SessionTypeLinux
import dev.g000sha256.tdl.dto.SessionTypeMac
import dev.g000sha256.tdl.dto.SessionTypeOpera
import dev.g000sha256.tdl.dto.SessionTypeSafari
import dev.g000sha256.tdl.dto.SessionTypeUbuntu
import dev.g000sha256.tdl.dto.SessionTypeUnknown
import dev.g000sha256.tdl.dto.SessionTypeVivaldi
import dev.g000sha256.tdl.dto.SessionTypeWindows
import dev.g000sha256.tdl.dto.SessionTypeXbox
import dev.g000sha256.tdl.dto.Sessions
import dev.g000sha256.tdl.dto.SharedChat
import dev.g000sha256.tdl.dto.SharedUser
import dev.g000sha256.tdl.dto.ShippingOption
import dev.g000sha256.tdl.dto.SpeechRecognitionResult
import dev.g000sha256.tdl.dto.SpeechRecognitionResultError
import dev.g000sha256.tdl.dto.SpeechRecognitionResultPending
import dev.g000sha256.tdl.dto.SpeechRecognitionResultText
import dev.g000sha256.tdl.dto.SponsoredChat
import dev.g000sha256.tdl.dto.SponsoredChats
import dev.g000sha256.tdl.dto.SponsoredMessage
import dev.g000sha256.tdl.dto.SponsoredMessages
import dev.g000sha256.tdl.dto.StarAmount
import dev.g000sha256.tdl.dto.StarCount
import dev.g000sha256.tdl.dto.StarGiveawayPaymentOption
import dev.g000sha256.tdl.dto.StarGiveawayPaymentOptions
import dev.g000sha256.tdl.dto.StarGiveawayWinnerOption
import dev.g000sha256.tdl.dto.StarPaymentOption
import dev.g000sha256.tdl.dto.StarPaymentOptions
import dev.g000sha256.tdl.dto.StarRevenueStatistics
import dev.g000sha256.tdl.dto.StarRevenueStatus
import dev.g000sha256.tdl.dto.StarSubscription
import dev.g000sha256.tdl.dto.StarSubscriptionPricing
import dev.g000sha256.tdl.dto.StarSubscriptionType
import dev.g000sha256.tdl.dto.StarSubscriptionTypeBot
import dev.g000sha256.tdl.dto.StarSubscriptionTypeChannel
import dev.g000sha256.tdl.dto.StarSubscriptions
import dev.g000sha256.tdl.dto.StarTransaction
import dev.g000sha256.tdl.dto.StarTransactionDirection
import dev.g000sha256.tdl.dto.StarTransactionDirectionIncoming
import dev.g000sha256.tdl.dto.StarTransactionDirectionOutgoing
import dev.g000sha256.tdl.dto.StarTransactionType
import dev.g000sha256.tdl.dto.StarTransactionTypeAffiliateProgramCommission
import dev.g000sha256.tdl.dto.StarTransactionTypeAppStoreDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypeBotInvoicePurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeBotInvoiceSale
import dev.g000sha256.tdl.dto.StarTransactionTypeBotPaidMediaPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeBotPaidMediaSale
import dev.g000sha256.tdl.dto.StarTransactionTypeBotSubscriptionPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeBotSubscriptionSale
import dev.g000sha256.tdl.dto.StarTransactionTypeBusinessBotTransferReceive
import dev.g000sha256.tdl.dto.StarTransactionTypeBusinessBotTransferSend
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelPaidMediaPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelPaidMediaSale
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelPaidReactionReceive
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelPaidReactionSend
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelSubscriptionPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelSubscriptionSale
import dev.g000sha256.tdl.dto.StarTransactionTypeFragmentDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypeFragmentWithdrawal
import dev.g000sha256.tdl.dto.StarTransactionTypeGiftPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeGiftSale
import dev.g000sha256.tdl.dto.StarTransactionTypeGiftTransfer
import dev.g000sha256.tdl.dto.StarTransactionTypeGiftUpgrade
import dev.g000sha256.tdl.dto.StarTransactionTypeGiveawayDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypeGooglePlayDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypePaidMessageReceive
import dev.g000sha256.tdl.dto.StarTransactionTypePaidMessageSend
import dev.g000sha256.tdl.dto.StarTransactionTypePremiumBotDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypePremiumPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeTelegramAdsWithdrawal
import dev.g000sha256.tdl.dto.StarTransactionTypeTelegramApiUsage
import dev.g000sha256.tdl.dto.StarTransactionTypeUnsupported
import dev.g000sha256.tdl.dto.StarTransactionTypeUpgradedGiftPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeUpgradedGiftSale
import dev.g000sha256.tdl.dto.StarTransactionTypeUserDeposit
import dev.g000sha256.tdl.dto.StarTransactions
import dev.g000sha256.tdl.dto.StatisticalGraph
import dev.g000sha256.tdl.dto.StatisticalGraphAsync
import dev.g000sha256.tdl.dto.StatisticalGraphData
import dev.g000sha256.tdl.dto.StatisticalGraphError
import dev.g000sha256.tdl.dto.StatisticalValue
import dev.g000sha256.tdl.dto.Sticker
import dev.g000sha256.tdl.dto.StickerFormat
import dev.g000sha256.tdl.dto.StickerFormatTgs
import dev.g000sha256.tdl.dto.StickerFormatWebm
import dev.g000sha256.tdl.dto.StickerFormatWebp
import dev.g000sha256.tdl.dto.StickerFullType
import dev.g000sha256.tdl.dto.StickerFullTypeCustomEmoji
import dev.g000sha256.tdl.dto.StickerFullTypeMask
import dev.g000sha256.tdl.dto.StickerFullTypeRegular
import dev.g000sha256.tdl.dto.StickerSet
import dev.g000sha256.tdl.dto.StickerSetInfo
import dev.g000sha256.tdl.dto.StickerSets
import dev.g000sha256.tdl.dto.StickerType
import dev.g000sha256.tdl.dto.StickerTypeCustomEmoji
import dev.g000sha256.tdl.dto.StickerTypeMask
import dev.g000sha256.tdl.dto.StickerTypeRegular
import dev.g000sha256.tdl.dto.Stickers
import dev.g000sha256.tdl.dto.StorageStatistics
import dev.g000sha256.tdl.dto.StorageStatisticsByChat
import dev.g000sha256.tdl.dto.StorageStatisticsByFileType
import dev.g000sha256.tdl.dto.StorageStatisticsFast
import dev.g000sha256.tdl.dto.StorePaymentPurpose
import dev.g000sha256.tdl.dto.StorePaymentPurposeGiftedStars
import dev.g000sha256.tdl.dto.StorePaymentPurposePremiumGift
import dev.g000sha256.tdl.dto.StorePaymentPurposePremiumGiftCodes
import dev.g000sha256.tdl.dto.StorePaymentPurposePremiumGiveaway
import dev.g000sha256.tdl.dto.StorePaymentPurposePremiumSubscription
import dev.g000sha256.tdl.dto.StorePaymentPurposeStarGiveaway
import dev.g000sha256.tdl.dto.StorePaymentPurposeStars
import dev.g000sha256.tdl.dto.StoreTransaction
import dev.g000sha256.tdl.dto.StoreTransactionAppStore
import dev.g000sha256.tdl.dto.StoreTransactionGooglePlay
import dev.g000sha256.tdl.dto.Stories
import dev.g000sha256.tdl.dto.Story
import dev.g000sha256.tdl.dto.StoryArea
import dev.g000sha256.tdl.dto.StoryAreaPosition
import dev.g000sha256.tdl.dto.StoryAreaType
import dev.g000sha256.tdl.dto.StoryAreaTypeLink
import dev.g000sha256.tdl.dto.StoryAreaTypeLocation
import dev.g000sha256.tdl.dto.StoryAreaTypeMessage
import dev.g000sha256.tdl.dto.StoryAreaTypeSuggestedReaction
import dev.g000sha256.tdl.dto.StoryAreaTypeUpgradedGift
import dev.g000sha256.tdl.dto.StoryAreaTypeVenue
import dev.g000sha256.tdl.dto.StoryAreaTypeWeather
import dev.g000sha256.tdl.dto.StoryContent
import dev.g000sha256.tdl.dto.StoryContentPhoto
import dev.g000sha256.tdl.dto.StoryContentUnsupported
import dev.g000sha256.tdl.dto.StoryContentVideo
import dev.g000sha256.tdl.dto.StoryFullId
import dev.g000sha256.tdl.dto.StoryInfo
import dev.g000sha256.tdl.dto.StoryInteraction
import dev.g000sha256.tdl.dto.StoryInteractionInfo
import dev.g000sha256.tdl.dto.StoryInteractionType
import dev.g000sha256.tdl.dto.StoryInteractionTypeForward
import dev.g000sha256.tdl.dto.StoryInteractionTypeRepost
import dev.g000sha256.tdl.dto.StoryInteractionTypeView
import dev.g000sha256.tdl.dto.StoryInteractions
import dev.g000sha256.tdl.dto.StoryList
import dev.g000sha256.tdl.dto.StoryListArchive
import dev.g000sha256.tdl.dto.StoryListMain
import dev.g000sha256.tdl.dto.StoryOrigin
import dev.g000sha256.tdl.dto.StoryOriginHiddenUser
import dev.g000sha256.tdl.dto.StoryOriginPublicStory
import dev.g000sha256.tdl.dto.StoryPrivacySettings
import dev.g000sha256.tdl.dto.StoryPrivacySettingsCloseFriends
import dev.g000sha256.tdl.dto.StoryPrivacySettingsContacts
import dev.g000sha256.tdl.dto.StoryPrivacySettingsEveryone
import dev.g000sha256.tdl.dto.StoryPrivacySettingsSelectedUsers
import dev.g000sha256.tdl.dto.StoryRepostInfo
import dev.g000sha256.tdl.dto.StoryStatistics
import dev.g000sha256.tdl.dto.StoryVideo
import dev.g000sha256.tdl.dto.SuggestedAction
import dev.g000sha256.tdl.dto.SuggestedActionCheckPassword
import dev.g000sha256.tdl.dto.SuggestedActionCheckPhoneNumber
import dev.g000sha256.tdl.dto.SuggestedActionConvertToBroadcastGroup
import dev.g000sha256.tdl.dto.SuggestedActionCustom
import dev.g000sha256.tdl.dto.SuggestedActionEnableArchiveAndMuteNewChats
import dev.g000sha256.tdl.dto.SuggestedActionExtendPremium
import dev.g000sha256.tdl.dto.SuggestedActionExtendStarSubscriptions
import dev.g000sha256.tdl.dto.SuggestedActionGiftPremiumForChristmas
import dev.g000sha256.tdl.dto.SuggestedActionRestorePremium
import dev.g000sha256.tdl.dto.SuggestedActionSetBirthdate
import dev.g000sha256.tdl.dto.SuggestedActionSetPassword
import dev.g000sha256.tdl.dto.SuggestedActionSetProfilePhoto
import dev.g000sha256.tdl.dto.SuggestedActionSubscribeToAnnualPremium
import dev.g000sha256.tdl.dto.SuggestedActionUpgradePremium
import dev.g000sha256.tdl.dto.SuggestedActionViewChecksHint
import dev.g000sha256.tdl.dto.Supergroup
import dev.g000sha256.tdl.dto.SupergroupFullInfo
import dev.g000sha256.tdl.dto.SupergroupMembersFilter
import dev.g000sha256.tdl.dto.SupergroupMembersFilterAdministrators
import dev.g000sha256.tdl.dto.SupergroupMembersFilterBanned
import dev.g000sha256.tdl.dto.SupergroupMembersFilterBots
import dev.g000sha256.tdl.dto.SupergroupMembersFilterContacts
import dev.g000sha256.tdl.dto.SupergroupMembersFilterMention
import dev.g000sha256.tdl.dto.SupergroupMembersFilterRecent
import dev.g000sha256.tdl.dto.SupergroupMembersFilterRestricted
import dev.g000sha256.tdl.dto.SupergroupMembersFilterSearch
import dev.g000sha256.tdl.dto.TMeUrl
import dev.g000sha256.tdl.dto.TMeUrlType
import dev.g000sha256.tdl.dto.TMeUrlTypeChatInvite
import dev.g000sha256.tdl.dto.TMeUrlTypeStickerSet
import dev.g000sha256.tdl.dto.TMeUrlTypeSupergroup
import dev.g000sha256.tdl.dto.TMeUrlTypeUser
import dev.g000sha256.tdl.dto.TMeUrls
import dev.g000sha256.tdl.dto.TargetChat
import dev.g000sha256.tdl.dto.TargetChatChosen
import dev.g000sha256.tdl.dto.TargetChatCurrent
import dev.g000sha256.tdl.dto.TargetChatInternalLink
import dev.g000sha256.tdl.dto.TargetChatTypes
import dev.g000sha256.tdl.dto.TelegramPaymentPurpose
import dev.g000sha256.tdl.dto.TelegramPaymentPurposeGiftedStars
import dev.g000sha256.tdl.dto.TelegramPaymentPurposeJoinChat
import dev.g000sha256.tdl.dto.TelegramPaymentPurposePremiumGift
import dev.g000sha256.tdl.dto.TelegramPaymentPurposePremiumGiftCodes
import dev.g000sha256.tdl.dto.TelegramPaymentPurposePremiumGiveaway
import dev.g000sha256.tdl.dto.TelegramPaymentPurposeStarGiveaway
import dev.g000sha256.tdl.dto.TelegramPaymentPurposeStars
import dev.g000sha256.tdl.dto.TemporaryPasswordState
import dev.g000sha256.tdl.dto.TermsOfService
import dev.g000sha256.tdl.dto.TestBytes
import dev.g000sha256.tdl.dto.TestInt
import dev.g000sha256.tdl.dto.TestString
import dev.g000sha256.tdl.dto.TestVectorInt
import dev.g000sha256.tdl.dto.TestVectorIntObject
import dev.g000sha256.tdl.dto.TestVectorString
import dev.g000sha256.tdl.dto.TestVectorStringObject
import dev.g000sha256.tdl.dto.Text
import dev.g000sha256.tdl.dto.TextEntities
import dev.g000sha256.tdl.dto.TextEntity
import dev.g000sha256.tdl.dto.TextEntityType
import dev.g000sha256.tdl.dto.TextEntityTypeBankCardNumber
import dev.g000sha256.tdl.dto.TextEntityTypeBlockQuote
import dev.g000sha256.tdl.dto.TextEntityTypeBold
import dev.g000sha256.tdl.dto.TextEntityTypeBotCommand
import dev.g000sha256.tdl.dto.TextEntityTypeCashtag
import dev.g000sha256.tdl.dto.TextEntityTypeCode
import dev.g000sha256.tdl.dto.TextEntityTypeCustomEmoji
import dev.g000sha256.tdl.dto.TextEntityTypeEmailAddress
import dev.g000sha256.tdl.dto.TextEntityTypeExpandableBlockQuote
import dev.g000sha256.tdl.dto.TextEntityTypeHashtag
import dev.g000sha256.tdl.dto.TextEntityTypeItalic
import dev.g000sha256.tdl.dto.TextEntityTypeMediaTimestamp
import dev.g000sha256.tdl.dto.TextEntityTypeMention
import dev.g000sha256.tdl.dto.TextEntityTypeMentionName
import dev.g000sha256.tdl.dto.TextEntityTypePhoneNumber
import dev.g000sha256.tdl.dto.TextEntityTypePre
import dev.g000sha256.tdl.dto.TextEntityTypePreCode
import dev.g000sha256.tdl.dto.TextEntityTypeSpoiler
import dev.g000sha256.tdl.dto.TextEntityTypeStrikethrough
import dev.g000sha256.tdl.dto.TextEntityTypeTextUrl
import dev.g000sha256.tdl.dto.TextEntityTypeUnderline
import dev.g000sha256.tdl.dto.TextEntityTypeUrl
import dev.g000sha256.tdl.dto.TextParseMode
import dev.g000sha256.tdl.dto.TextParseModeHTML
import dev.g000sha256.tdl.dto.TextParseModeMarkdown
import dev.g000sha256.tdl.dto.TextQuote
import dev.g000sha256.tdl.dto.ThemeParameters
import dev.g000sha256.tdl.dto.ThemeSettings
import dev.g000sha256.tdl.dto.Thumbnail
import dev.g000sha256.tdl.dto.ThumbnailFormat
import dev.g000sha256.tdl.dto.ThumbnailFormatGif
import dev.g000sha256.tdl.dto.ThumbnailFormatJpeg
import dev.g000sha256.tdl.dto.ThumbnailFormatMpeg4
import dev.g000sha256.tdl.dto.ThumbnailFormatPng
import dev.g000sha256.tdl.dto.ThumbnailFormatTgs
import dev.g000sha256.tdl.dto.ThumbnailFormatWebm
import dev.g000sha256.tdl.dto.ThumbnailFormatWebp
import dev.g000sha256.tdl.dto.TimeZone
import dev.g000sha256.tdl.dto.TimeZones
import dev.g000sha256.tdl.dto.TopChatCategory
import dev.g000sha256.tdl.dto.TopChatCategoryBots
import dev.g000sha256.tdl.dto.TopChatCategoryCalls
import dev.g000sha256.tdl.dto.TopChatCategoryChannels
import dev.g000sha256.tdl.dto.TopChatCategoryForwardChats
import dev.g000sha256.tdl.dto.TopChatCategoryGroups
import dev.g000sha256.tdl.dto.TopChatCategoryInlineBots
import dev.g000sha256.tdl.dto.TopChatCategoryUsers
import dev.g000sha256.tdl.dto.TopChatCategoryWebAppBots
import dev.g000sha256.tdl.dto.TrendingStickerSets
import dev.g000sha256.tdl.dto.UnconfirmedSession
import dev.g000sha256.tdl.dto.UnreadReaction
import dev.g000sha256.tdl.dto.Update
import dev.g000sha256.tdl.dto.UpdateAccentColors
import dev.g000sha256.tdl.dto.UpdateActiveEmojiReactions
import dev.g000sha256.tdl.dto.UpdateActiveLiveLocationMessages
import dev.g000sha256.tdl.dto.UpdateActiveNotifications
import dev.g000sha256.tdl.dto.UpdateAnimatedEmojiMessageClicked
import dev.g000sha256.tdl.dto.UpdateAnimationSearchParameters
import dev.g000sha256.tdl.dto.UpdateApplicationRecaptchaVerificationRequired
import dev.g000sha256.tdl.dto.UpdateApplicationVerificationRequired
import dev.g000sha256.tdl.dto.UpdateAttachmentMenuBots
import dev.g000sha256.tdl.dto.UpdateAuthorizationState
import dev.g000sha256.tdl.dto.UpdateAutosaveSettings
import dev.g000sha256.tdl.dto.UpdateAvailableMessageEffects
import dev.g000sha256.tdl.dto.UpdateBasicGroup
import dev.g000sha256.tdl.dto.UpdateBasicGroupFullInfo
import dev.g000sha256.tdl.dto.UpdateBusinessConnection
import dev.g000sha256.tdl.dto.UpdateBusinessMessageEdited
import dev.g000sha256.tdl.dto.UpdateBusinessMessagesDeleted
import dev.g000sha256.tdl.dto.UpdateCall
import dev.g000sha256.tdl.dto.UpdateChatAccentColors
import dev.g000sha256.tdl.dto.UpdateChatAction
import dev.g000sha256.tdl.dto.UpdateChatActionBar
import dev.g000sha256.tdl.dto.UpdateChatActiveStories
import dev.g000sha256.tdl.dto.UpdateChatAddedToList
import dev.g000sha256.tdl.dto.UpdateChatAvailableReactions
import dev.g000sha256.tdl.dto.UpdateChatBackground
import dev.g000sha256.tdl.dto.UpdateChatBlockList
import dev.g000sha256.tdl.dto.UpdateChatBoost
import dev.g000sha256.tdl.dto.UpdateChatBusinessBotManageBar
import dev.g000sha256.tdl.dto.UpdateChatDefaultDisableNotification
import dev.g000sha256.tdl.dto.UpdateChatDraftMessage
import dev.g000sha256.tdl.dto.UpdateChatEmojiStatus
import dev.g000sha256.tdl.dto.UpdateChatFolders
import dev.g000sha256.tdl.dto.UpdateChatHasProtectedContent
import dev.g000sha256.tdl.dto.UpdateChatHasScheduledMessages
import dev.g000sha256.tdl.dto.UpdateChatIsMarkedAsUnread
import dev.g000sha256.tdl.dto.UpdateChatIsTranslatable
import dev.g000sha256.tdl.dto.UpdateChatLastMessage
import dev.g000sha256.tdl.dto.UpdateChatMember
import dev.g000sha256.tdl.dto.UpdateChatMessageAutoDeleteTime
import dev.g000sha256.tdl.dto.UpdateChatMessageSender
import dev.g000sha256.tdl.dto.UpdateChatNotificationSettings
import dev.g000sha256.tdl.dto.UpdateChatOnlineMemberCount
import dev.g000sha256.tdl.dto.UpdateChatPendingJoinRequests
import dev.g000sha256.tdl.dto.UpdateChatPermissions
import dev.g000sha256.tdl.dto.UpdateChatPhoto
import dev.g000sha256.tdl.dto.UpdateChatPosition
import dev.g000sha256.tdl.dto.UpdateChatReadInbox
import dev.g000sha256.tdl.dto.UpdateChatReadOutbox
import dev.g000sha256.tdl.dto.UpdateChatRemovedFromList
import dev.g000sha256.tdl.dto.UpdateChatReplyMarkup
import dev.g000sha256.tdl.dto.UpdateChatRevenueAmount
import dev.g000sha256.tdl.dto.UpdateChatTheme
import dev.g000sha256.tdl.dto.UpdateChatThemes
import dev.g000sha256.tdl.dto.UpdateChatTitle
import dev.g000sha256.tdl.dto.UpdateChatUnreadMentionCount
import dev.g000sha256.tdl.dto.UpdateChatUnreadReactionCount
import dev.g000sha256.tdl.dto.UpdateChatVideoChat
import dev.g000sha256.tdl.dto.UpdateChatViewAsTopics
import dev.g000sha256.tdl.dto.UpdateConnectionState
import dev.g000sha256.tdl.dto.UpdateContactCloseBirthdays
import dev.g000sha256.tdl.dto.UpdateDefaultBackground
import dev.g000sha256.tdl.dto.UpdateDefaultPaidReactionType
import dev.g000sha256.tdl.dto.UpdateDefaultReactionType
import dev.g000sha256.tdl.dto.UpdateDeleteMessages
import dev.g000sha256.tdl.dto.UpdateDiceEmojis
import dev.g000sha256.tdl.dto.UpdateDirectMessagesChatTopic
import dev.g000sha256.tdl.dto.UpdateFavoriteStickers
import dev.g000sha256.tdl.dto.UpdateFile
import dev.g000sha256.tdl.dto.UpdateFileAddedToDownloads
import dev.g000sha256.tdl.dto.UpdateFileDownload
import dev.g000sha256.tdl.dto.UpdateFileDownloads
import dev.g000sha256.tdl.dto.UpdateFileGenerationStart
import dev.g000sha256.tdl.dto.UpdateFileGenerationStop
import dev.g000sha256.tdl.dto.UpdateFileRemovedFromDownloads
import dev.g000sha256.tdl.dto.UpdateForumTopic
import dev.g000sha256.tdl.dto.UpdateForumTopicInfo
import dev.g000sha256.tdl.dto.UpdateFreezeState
import dev.g000sha256.tdl.dto.UpdateGroupCall
import dev.g000sha256.tdl.dto.UpdateGroupCallParticipant
import dev.g000sha256.tdl.dto.UpdateGroupCallParticipants
import dev.g000sha256.tdl.dto.UpdateGroupCallVerificationState
import dev.g000sha256.tdl.dto.UpdateHavePendingNotifications
import dev.g000sha256.tdl.dto.UpdateInstalledStickerSets
import dev.g000sha256.tdl.dto.UpdateLanguagePackStrings
import dev.g000sha256.tdl.dto.UpdateMessageContent
import dev.g000sha256.tdl.dto.UpdateMessageContentOpened
import dev.g000sha256.tdl.dto.UpdateMessageEdited
import dev.g000sha256.tdl.dto.UpdateMessageFactCheck
import dev.g000sha256.tdl.dto.UpdateMessageInteractionInfo
import dev.g000sha256.tdl.dto.UpdateMessageIsPinned
import dev.g000sha256.tdl.dto.UpdateMessageLiveLocationViewed
import dev.g000sha256.tdl.dto.UpdateMessageMentionRead
import dev.g000sha256.tdl.dto.UpdateMessageReaction
import dev.g000sha256.tdl.dto.UpdateMessageReactions
import dev.g000sha256.tdl.dto.UpdateMessageSendAcknowledged
import dev.g000sha256.tdl.dto.UpdateMessageSendFailed
import dev.g000sha256.tdl.dto.UpdateMessageSendSucceeded
import dev.g000sha256.tdl.dto.UpdateMessageUnreadReactions
import dev.g000sha256.tdl.dto.UpdateNewBusinessCallbackQuery
import dev.g000sha256.tdl.dto.UpdateNewBusinessMessage
import dev.g000sha256.tdl.dto.UpdateNewCallSignalingData
import dev.g000sha256.tdl.dto.UpdateNewCallbackQuery
import dev.g000sha256.tdl.dto.UpdateNewChat
import dev.g000sha256.tdl.dto.UpdateNewChatJoinRequest
import dev.g000sha256.tdl.dto.UpdateNewChosenInlineResult
import dev.g000sha256.tdl.dto.UpdateNewCustomEvent
import dev.g000sha256.tdl.dto.UpdateNewCustomQuery
import dev.g000sha256.tdl.dto.UpdateNewInlineCallbackQuery
import dev.g000sha256.tdl.dto.UpdateNewInlineQuery
import dev.g000sha256.tdl.dto.UpdateNewMessage
import dev.g000sha256.tdl.dto.UpdateNewPreCheckoutQuery
import dev.g000sha256.tdl.dto.UpdateNewShippingQuery
import dev.g000sha256.tdl.dto.UpdateNotification
import dev.g000sha256.tdl.dto.UpdateNotificationGroup
import dev.g000sha256.tdl.dto.UpdateOption
import dev.g000sha256.tdl.dto.UpdateOwnedStarCount
import dev.g000sha256.tdl.dto.UpdatePaidMediaPurchased
import dev.g000sha256.tdl.dto.UpdatePoll
import dev.g000sha256.tdl.dto.UpdatePollAnswer
import dev.g000sha256.tdl.dto.UpdateProfileAccentColors
import dev.g000sha256.tdl.dto.UpdateQuickReplyShortcut
import dev.g000sha256.tdl.dto.UpdateQuickReplyShortcutDeleted
import dev.g000sha256.tdl.dto.UpdateQuickReplyShortcutMessages
import dev.g000sha256.tdl.dto.UpdateQuickReplyShortcuts
import dev.g000sha256.tdl.dto.UpdateReactionNotificationSettings
import dev.g000sha256.tdl.dto.UpdateRecentStickers
import dev.g000sha256.tdl.dto.UpdateSavedAnimations
import dev.g000sha256.tdl.dto.UpdateSavedMessagesTags
import dev.g000sha256.tdl.dto.UpdateSavedMessagesTopic
import dev.g000sha256.tdl.dto.UpdateSavedMessagesTopicCount
import dev.g000sha256.tdl.dto.UpdateSavedNotificationSounds
import dev.g000sha256.tdl.dto.UpdateScopeNotificationSettings
import dev.g000sha256.tdl.dto.UpdateSecretChat
import dev.g000sha256.tdl.dto.UpdateServiceNotification
import dev.g000sha256.tdl.dto.UpdateSpeechRecognitionTrial
import dev.g000sha256.tdl.dto.UpdateSpeedLimitNotification
import dev.g000sha256.tdl.dto.UpdateStarRevenueStatus
import dev.g000sha256.tdl.dto.UpdateStickerSet
import dev.g000sha256.tdl.dto.UpdateStory
import dev.g000sha256.tdl.dto.UpdateStoryDeleted
import dev.g000sha256.tdl.dto.UpdateStoryListChatCount
import dev.g000sha256.tdl.dto.UpdateStoryPostFailed
import dev.g000sha256.tdl.dto.UpdateStoryPostSucceeded
import dev.g000sha256.tdl.dto.UpdateStoryStealthMode
import dev.g000sha256.tdl.dto.UpdateSuggestedActions
import dev.g000sha256.tdl.dto.UpdateSupergroup
import dev.g000sha256.tdl.dto.UpdateSupergroupFullInfo
import dev.g000sha256.tdl.dto.UpdateTermsOfService
import dev.g000sha256.tdl.dto.UpdateTopicMessageCount
import dev.g000sha256.tdl.dto.UpdateTrendingStickerSets
import dev.g000sha256.tdl.dto.UpdateUnconfirmedSession
import dev.g000sha256.tdl.dto.UpdateUnreadChatCount
import dev.g000sha256.tdl.dto.UpdateUnreadMessageCount
import dev.g000sha256.tdl.dto.UpdateUser
import dev.g000sha256.tdl.dto.UpdateUserFullInfo
import dev.g000sha256.tdl.dto.UpdateUserPrivacySettingRules
import dev.g000sha256.tdl.dto.UpdateUserStatus
import dev.g000sha256.tdl.dto.UpdateVideoPublished
import dev.g000sha256.tdl.dto.UpdateWebAppMessageSent
import dev.g000sha256.tdl.dto.Updates
import dev.g000sha256.tdl.dto.UpgradeGiftResult
import dev.g000sha256.tdl.dto.UpgradedGift
import dev.g000sha256.tdl.dto.UpgradedGiftAttributeId
import dev.g000sha256.tdl.dto.UpgradedGiftAttributeIdBackdrop
import dev.g000sha256.tdl.dto.UpgradedGiftAttributeIdModel
import dev.g000sha256.tdl.dto.UpgradedGiftAttributeIdSymbol
import dev.g000sha256.tdl.dto.UpgradedGiftBackdrop
import dev.g000sha256.tdl.dto.UpgradedGiftBackdropColors
import dev.g000sha256.tdl.dto.UpgradedGiftBackdropCount
import dev.g000sha256.tdl.dto.UpgradedGiftModel
import dev.g000sha256.tdl.dto.UpgradedGiftModelCount
import dev.g000sha256.tdl.dto.UpgradedGiftOriginalDetails
import dev.g000sha256.tdl.dto.UpgradedGiftSymbol
import dev.g000sha256.tdl.dto.UpgradedGiftSymbolCount
import dev.g000sha256.tdl.dto.User
import dev.g000sha256.tdl.dto.UserFullInfo
import dev.g000sha256.tdl.dto.UserLink
import dev.g000sha256.tdl.dto.UserPrivacySetting
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowCalls
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowChatInvites
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowFindingByPhoneNumber
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowPeerToPeerCalls
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowUnpaidMessages
import dev.g000sha256.tdl.dto.UserPrivacySettingAutosaveGifts
import dev.g000sha256.tdl.dto.UserPrivacySettingRule
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowAll
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowBots
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowChatMembers
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowContacts
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowPremiumUsers
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowUsers
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictAll
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictBots
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictChatMembers
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictContacts
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictUsers
import dev.g000sha256.tdl.dto.UserPrivacySettingRules
import dev.g000sha256.tdl.dto.UserPrivacySettingShowBio
import dev.g000sha256.tdl.dto.UserPrivacySettingShowBirthdate
import dev.g000sha256.tdl.dto.UserPrivacySettingShowLinkInForwardedMessages
import dev.g000sha256.tdl.dto.UserPrivacySettingShowPhoneNumber
import dev.g000sha256.tdl.dto.UserPrivacySettingShowProfilePhoto
import dev.g000sha256.tdl.dto.UserPrivacySettingShowStatus
import dev.g000sha256.tdl.dto.UserStatus
import dev.g000sha256.tdl.dto.UserStatusEmpty
import dev.g000sha256.tdl.dto.UserStatusLastMonth
import dev.g000sha256.tdl.dto.UserStatusLastWeek
import dev.g000sha256.tdl.dto.UserStatusOffline
import dev.g000sha256.tdl.dto.UserStatusOnline
import dev.g000sha256.tdl.dto.UserStatusRecently
import dev.g000sha256.tdl.dto.UserSupportInfo
import dev.g000sha256.tdl.dto.UserType
import dev.g000sha256.tdl.dto.UserTypeBot
import dev.g000sha256.tdl.dto.UserTypeDeleted
import dev.g000sha256.tdl.dto.UserTypeRegular
import dev.g000sha256.tdl.dto.UserTypeUnknown
import dev.g000sha256.tdl.dto.Usernames
import dev.g000sha256.tdl.dto.Users
import dev.g000sha256.tdl.dto.ValidatedOrderInfo
import dev.g000sha256.tdl.dto.VectorPathCommand
import dev.g000sha256.tdl.dto.VectorPathCommandCubicBezierCurve
import dev.g000sha256.tdl.dto.VectorPathCommandLine
import dev.g000sha256.tdl.dto.Venue
import dev.g000sha256.tdl.dto.VerificationStatus
import dev.g000sha256.tdl.dto.Video
import dev.g000sha256.tdl.dto.VideoChat
import dev.g000sha256.tdl.dto.VideoChatStream
import dev.g000sha256.tdl.dto.VideoChatStreams
import dev.g000sha256.tdl.dto.VideoMessageAdvertisement
import dev.g000sha256.tdl.dto.VideoMessageAdvertisements
import dev.g000sha256.tdl.dto.VideoNote
import dev.g000sha256.tdl.dto.VideoStoryboard
import dev.g000sha256.tdl.dto.VoiceNote
import dev.g000sha256.tdl.dto.WebApp
import dev.g000sha256.tdl.dto.WebAppInfo
import dev.g000sha256.tdl.dto.WebAppOpenMode
import dev.g000sha256.tdl.dto.WebAppOpenModeCompact
import dev.g000sha256.tdl.dto.WebAppOpenModeFullScreen
import dev.g000sha256.tdl.dto.WebAppOpenModeFullSize
import dev.g000sha256.tdl.dto.WebAppOpenParameters
import dev.g000sha256.tdl.dto.WebPageInstantView
import dev.g000sha256.tdl.function.AcceptCall
import dev.g000sha256.tdl.function.AcceptTermsOfService
import dev.g000sha256.tdl.function.ActivateStoryStealthMode
import dev.g000sha256.tdl.function.AddBotMediaPreview
import dev.g000sha256.tdl.function.AddChatFolderByInviteLink
import dev.g000sha256.tdl.function.AddChatMember
import dev.g000sha256.tdl.function.AddChatMembers
import dev.g000sha256.tdl.function.AddChatToList
import dev.g000sha256.tdl.function.AddChecklistTasks
import dev.g000sha256.tdl.function.AddContact
import dev.g000sha256.tdl.function.AddCustomServerLanguagePack
import dev.g000sha256.tdl.function.AddFavoriteSticker
import dev.g000sha256.tdl.function.AddFileToDownloads
import dev.g000sha256.tdl.function.AddLocalMessage
import dev.g000sha256.tdl.function.AddLogMessage
import dev.g000sha256.tdl.function.AddMessageReaction
import dev.g000sha256.tdl.function.AddNetworkStatistics
import dev.g000sha256.tdl.function.AddPendingPaidMessageReaction
import dev.g000sha256.tdl.function.AddProxy
import dev.g000sha256.tdl.function.AddQuickReplyShortcutInlineQueryResultMessage
import dev.g000sha256.tdl.function.AddQuickReplyShortcutMessage
import dev.g000sha256.tdl.function.AddQuickReplyShortcutMessageAlbum
import dev.g000sha256.tdl.function.AddRecentSticker
import dev.g000sha256.tdl.function.AddRecentlyFoundChat
import dev.g000sha256.tdl.function.AddSavedAnimation
import dev.g000sha256.tdl.function.AddSavedNotificationSound
import dev.g000sha256.tdl.function.AddStickerToSet
import dev.g000sha256.tdl.function.AllowBotToSendMessages
import dev.g000sha256.tdl.function.AllowUnpaidMessagesFromUser
import dev.g000sha256.tdl.function.AnswerCallbackQuery
import dev.g000sha256.tdl.function.AnswerCustomQuery
import dev.g000sha256.tdl.function.AnswerInlineQuery
import dev.g000sha256.tdl.function.AnswerPreCheckoutQuery
import dev.g000sha256.tdl.function.AnswerShippingQuery
import dev.g000sha256.tdl.function.AnswerWebAppQuery
import dev.g000sha256.tdl.function.ApplyPremiumGiftCode
import dev.g000sha256.tdl.function.AssignStoreTransaction
import dev.g000sha256.tdl.function.BanChatMember
import dev.g000sha256.tdl.function.BanGroupCallParticipants
import dev.g000sha256.tdl.function.BlockMessageSenderFromReplies
import dev.g000sha256.tdl.function.BoostChat
import dev.g000sha256.tdl.function.CanBotSendMessages
import dev.g000sha256.tdl.function.CanPostStory
import dev.g000sha256.tdl.function.CanPurchaseFromStore
import dev.g000sha256.tdl.function.CanSendMessageToUser
import dev.g000sha256.tdl.function.CanTransferOwnership
import dev.g000sha256.tdl.function.CancelDownloadFile
import dev.g000sha256.tdl.function.CancelPasswordReset
import dev.g000sha256.tdl.function.CancelPreliminaryUploadFile
import dev.g000sha256.tdl.function.CancelRecoveryEmailAddressVerification
import dev.g000sha256.tdl.function.ChangeImportedContacts
import dev.g000sha256.tdl.function.ChangeStickerSet
import dev.g000sha256.tdl.function.CheckAuthenticationBotToken
import dev.g000sha256.tdl.function.CheckAuthenticationCode
import dev.g000sha256.tdl.function.CheckAuthenticationEmailCode
import dev.g000sha256.tdl.function.CheckAuthenticationPassword
import dev.g000sha256.tdl.function.CheckAuthenticationPasswordRecoveryCode
import dev.g000sha256.tdl.function.CheckAuthenticationPremiumPurchase
import dev.g000sha256.tdl.function.CheckChatFolderInviteLink
import dev.g000sha256.tdl.function.CheckChatInviteLink
import dev.g000sha256.tdl.function.CheckChatUsername
import dev.g000sha256.tdl.function.CheckCreatedPublicChatsLimit
import dev.g000sha256.tdl.function.CheckEmailAddressVerificationCode
import dev.g000sha256.tdl.function.CheckLoginEmailAddressCode
import dev.g000sha256.tdl.function.CheckPasswordRecoveryCode
import dev.g000sha256.tdl.function.CheckPhoneNumberCode
import dev.g000sha256.tdl.function.CheckPremiumGiftCode
import dev.g000sha256.tdl.function.CheckQuickReplyShortcutName
import dev.g000sha256.tdl.function.CheckRecoveryEmailAddressCode
import dev.g000sha256.tdl.function.CheckStickerSetName
import dev.g000sha256.tdl.function.CheckWebAppFileDownload
import dev.g000sha256.tdl.function.CleanFileName
import dev.g000sha256.tdl.function.ClearAllDraftMessages
import dev.g000sha256.tdl.function.ClearAutosaveSettingsExceptions
import dev.g000sha256.tdl.function.ClearImportedContacts
import dev.g000sha256.tdl.function.ClearRecentEmojiStatuses
import dev.g000sha256.tdl.function.ClearRecentReactions
import dev.g000sha256.tdl.function.ClearRecentStickers
import dev.g000sha256.tdl.function.ClearRecentlyFoundChats
import dev.g000sha256.tdl.function.ClearSearchedForTags
import dev.g000sha256.tdl.function.ClickAnimatedEmojiMessage
import dev.g000sha256.tdl.function.ClickChatSponsoredMessage
import dev.g000sha256.tdl.function.ClickPremiumSubscriptionButton
import dev.g000sha256.tdl.function.ClickVideoMessageAdvertisement
import dev.g000sha256.tdl.function.Close
import dev.g000sha256.tdl.function.CloseChat
import dev.g000sha256.tdl.function.CloseSecretChat
import dev.g000sha256.tdl.function.CloseStory
import dev.g000sha256.tdl.function.CloseWebApp
import dev.g000sha256.tdl.function.CommitPendingPaidMessageReactions
import dev.g000sha256.tdl.function.ConfirmQrCodeAuthentication
import dev.g000sha256.tdl.function.ConfirmSession
import dev.g000sha256.tdl.function.ConnectAffiliateProgram
import dev.g000sha256.tdl.function.CreateBasicGroupChat
import dev.g000sha256.tdl.function.CreateBusinessChatLink
import dev.g000sha256.tdl.function.CreateCall
import dev.g000sha256.tdl.function.CreateChatFolder
import dev.g000sha256.tdl.function.CreateChatFolderInviteLink
import dev.g000sha256.tdl.function.CreateChatInviteLink
import dev.g000sha256.tdl.function.CreateChatSubscriptionInviteLink
import dev.g000sha256.tdl.function.CreateForumTopic
import dev.g000sha256.tdl.function.CreateGroupCall
import dev.g000sha256.tdl.function.CreateInvoiceLink
import dev.g000sha256.tdl.function.CreateNewBasicGroupChat
import dev.g000sha256.tdl.function.CreateNewSecretChat
import dev.g000sha256.tdl.function.CreateNewStickerSet
import dev.g000sha256.tdl.function.CreateNewSupergroupChat
import dev.g000sha256.tdl.function.CreatePrivateChat
import dev.g000sha256.tdl.function.CreateSecretChat
import dev.g000sha256.tdl.function.CreateSupergroupChat
import dev.g000sha256.tdl.function.CreateTemporaryPassword
import dev.g000sha256.tdl.function.CreateVideoChat
import dev.g000sha256.tdl.function.DeclineGroupCallInvitation
import dev.g000sha256.tdl.function.DecryptGroupCallData
import dev.g000sha256.tdl.function.DeleteAccount
import dev.g000sha256.tdl.function.DeleteAllCallMessages
import dev.g000sha256.tdl.function.DeleteAllRevokedChatInviteLinks
import dev.g000sha256.tdl.function.DeleteBotMediaPreviews
import dev.g000sha256.tdl.function.DeleteBusinessChatLink
import dev.g000sha256.tdl.function.DeleteBusinessConnectedBot
import dev.g000sha256.tdl.function.DeleteBusinessMessages
import dev.g000sha256.tdl.function.DeleteBusinessStory
import dev.g000sha256.tdl.function.DeleteChat
import dev.g000sha256.tdl.function.DeleteChatBackground
import dev.g000sha256.tdl.function.DeleteChatFolder
import dev.g000sha256.tdl.function.DeleteChatFolderInviteLink
import dev.g000sha256.tdl.function.DeleteChatHistory
import dev.g000sha256.tdl.function.DeleteChatMessagesByDate
import dev.g000sha256.tdl.function.DeleteChatMessagesBySender
import dev.g000sha256.tdl.function.DeleteChatReplyMarkup
import dev.g000sha256.tdl.function.DeleteCommands
import dev.g000sha256.tdl.function.DeleteDefaultBackground
import dev.g000sha256.tdl.function.DeleteDirectMessagesChatTopicHistory
import dev.g000sha256.tdl.function.DeleteDirectMessagesChatTopicMessagesByDate
import dev.g000sha256.tdl.function.DeleteFile
import dev.g000sha256.tdl.function.DeleteForumTopic
import dev.g000sha256.tdl.function.DeleteLanguagePack
import dev.g000sha256.tdl.function.DeleteMessages
import dev.g000sha256.tdl.function.DeletePassportElement
import dev.g000sha256.tdl.function.DeleteProfilePhoto
import dev.g000sha256.tdl.function.DeleteQuickReplyShortcut
import dev.g000sha256.tdl.function.DeleteQuickReplyShortcutMessages
import dev.g000sha256.tdl.function.DeleteRevokedChatInviteLink
import dev.g000sha256.tdl.function.DeleteSavedCredentials
import dev.g000sha256.tdl.function.DeleteSavedMessagesTopicHistory
import dev.g000sha256.tdl.function.DeleteSavedMessagesTopicMessagesByDate
import dev.g000sha256.tdl.function.DeleteSavedOrderInfo
import dev.g000sha256.tdl.function.DeleteStickerSet
import dev.g000sha256.tdl.function.DeleteStory
import dev.g000sha256.tdl.function.Destroy
import dev.g000sha256.tdl.function.DisableAllSupergroupUsernames
import dev.g000sha256.tdl.function.DisableProxy
import dev.g000sha256.tdl.function.DiscardCall
import dev.g000sha256.tdl.function.DisconnectAffiliateProgram
import dev.g000sha256.tdl.function.DisconnectAllWebsites
import dev.g000sha256.tdl.function.DisconnectWebsite
import dev.g000sha256.tdl.function.DownloadFile
import dev.g000sha256.tdl.function.EditBotMediaPreview
import dev.g000sha256.tdl.function.EditBusinessChatLink
import dev.g000sha256.tdl.function.EditBusinessMessageCaption
import dev.g000sha256.tdl.function.EditBusinessMessageChecklist
import dev.g000sha256.tdl.function.EditBusinessMessageLiveLocation
import dev.g000sha256.tdl.function.EditBusinessMessageMedia
import dev.g000sha256.tdl.function.EditBusinessMessageReplyMarkup
import dev.g000sha256.tdl.function.EditBusinessMessageText
import dev.g000sha256.tdl.function.EditBusinessStory
import dev.g000sha256.tdl.function.EditChatFolder
import dev.g000sha256.tdl.function.EditChatFolderInviteLink
import dev.g000sha256.tdl.function.EditChatInviteLink
import dev.g000sha256.tdl.function.EditChatSubscriptionInviteLink
import dev.g000sha256.tdl.function.EditCustomLanguagePackInfo
import dev.g000sha256.tdl.function.EditForumTopic
import dev.g000sha256.tdl.function.EditInlineMessageCaption
import dev.g000sha256.tdl.function.EditInlineMessageLiveLocation
import dev.g000sha256.tdl.function.EditInlineMessageMedia
import dev.g000sha256.tdl.function.EditInlineMessageReplyMarkup
import dev.g000sha256.tdl.function.EditInlineMessageText
import dev.g000sha256.tdl.function.EditMessageCaption
import dev.g000sha256.tdl.function.EditMessageChecklist
import dev.g000sha256.tdl.function.EditMessageLiveLocation
import dev.g000sha256.tdl.function.EditMessageMedia
import dev.g000sha256.tdl.function.EditMessageReplyMarkup
import dev.g000sha256.tdl.function.EditMessageSchedulingState
import dev.g000sha256.tdl.function.EditMessageText
import dev.g000sha256.tdl.function.EditProxy
import dev.g000sha256.tdl.function.EditQuickReplyMessage
import dev.g000sha256.tdl.function.EditStarSubscription
import dev.g000sha256.tdl.function.EditStory
import dev.g000sha256.tdl.function.EditStoryCover
import dev.g000sha256.tdl.function.EditUserStarSubscription
import dev.g000sha256.tdl.function.EnableProxy
import dev.g000sha256.tdl.function.EncryptGroupCallData
import dev.g000sha256.tdl.function.EndGroupCall
import dev.g000sha256.tdl.function.EndGroupCallRecording
import dev.g000sha256.tdl.function.EndGroupCallScreenSharing
import dev.g000sha256.tdl.function.FinishFileGeneration
import dev.g000sha256.tdl.function.ForwardMessages
import dev.g000sha256.tdl.function.GetAccountTtl
import dev.g000sha256.tdl.function.GetActiveSessions
import dev.g000sha256.tdl.function.GetAllPassportElements
import dev.g000sha256.tdl.function.GetAllStickerEmojis
import dev.g000sha256.tdl.function.GetAnimatedEmoji
import dev.g000sha256.tdl.function.GetApplicationConfig
import dev.g000sha256.tdl.function.GetApplicationDownloadLink
import dev.g000sha256.tdl.function.GetArchiveChatListSettings
import dev.g000sha256.tdl.function.GetArchivedStickerSets
import dev.g000sha256.tdl.function.GetAttachedStickerSets
import dev.g000sha256.tdl.function.GetAttachmentMenuBot
import dev.g000sha256.tdl.function.GetAuthorizationState
import dev.g000sha256.tdl.function.GetAutoDownloadSettingsPresets
import dev.g000sha256.tdl.function.GetAutosaveSettings
import dev.g000sha256.tdl.function.GetAvailableChatBoostSlots
import dev.g000sha256.tdl.function.GetAvailableGifts
import dev.g000sha256.tdl.function.GetBackgroundUrl
import dev.g000sha256.tdl.function.GetBankCardInfo
import dev.g000sha256.tdl.function.GetBasicGroup
import dev.g000sha256.tdl.function.GetBasicGroupFullInfo
import dev.g000sha256.tdl.function.GetBlockedMessageSenders
import dev.g000sha256.tdl.function.GetBotInfoDescription
import dev.g000sha256.tdl.function.GetBotInfoShortDescription
import dev.g000sha256.tdl.function.GetBotMediaPreviewInfo
import dev.g000sha256.tdl.function.GetBotMediaPreviews
import dev.g000sha256.tdl.function.GetBotName
import dev.g000sha256.tdl.function.GetBotSimilarBotCount
import dev.g000sha256.tdl.function.GetBotSimilarBots
import dev.g000sha256.tdl.function.GetBusinessAccountStarAmount
import dev.g000sha256.tdl.function.GetBusinessChatLinkInfo
import dev.g000sha256.tdl.function.GetBusinessChatLinks
import dev.g000sha256.tdl.function.GetBusinessConnectedBot
import dev.g000sha256.tdl.function.GetBusinessConnection
import dev.g000sha256.tdl.function.GetBusinessFeatures
import dev.g000sha256.tdl.function.GetCallbackQueryAnswer
import dev.g000sha256.tdl.function.GetCallbackQueryMessage
import dev.g000sha256.tdl.function.GetChat
import dev.g000sha256.tdl.function.GetChatActiveStories
import dev.g000sha256.tdl.function.GetChatAdministrators
import dev.g000sha256.tdl.function.GetChatArchivedStories
import dev.g000sha256.tdl.function.GetChatAvailableMessageSenders
import dev.g000sha256.tdl.function.GetChatAvailablePaidMessageReactionSenders
import dev.g000sha256.tdl.function.GetChatBoostFeatures
import dev.g000sha256.tdl.function.GetChatBoostLevelFeatures
import dev.g000sha256.tdl.function.GetChatBoostLink
import dev.g000sha256.tdl.function.GetChatBoostLinkInfo
import dev.g000sha256.tdl.function.GetChatBoostStatus
import dev.g000sha256.tdl.function.GetChatBoosts
import dev.g000sha256.tdl.function.GetChatEventLog
import dev.g000sha256.tdl.function.GetChatFolder
import dev.g000sha256.tdl.function.GetChatFolderChatCount
import dev.g000sha256.tdl.function.GetChatFolderChatsToLeave
import dev.g000sha256.tdl.function.GetChatFolderDefaultIconName
import dev.g000sha256.tdl.function.GetChatFolderInviteLinks
import dev.g000sha256.tdl.function.GetChatFolderNewChats
import dev.g000sha256.tdl.function.GetChatHistory
import dev.g000sha256.tdl.function.GetChatInviteLink
import dev.g000sha256.tdl.function.GetChatInviteLinkCounts
import dev.g000sha256.tdl.function.GetChatInviteLinkMembers
import dev.g000sha256.tdl.function.GetChatInviteLinks
import dev.g000sha256.tdl.function.GetChatJoinRequests
import dev.g000sha256.tdl.function.GetChatListsToAddChat
import dev.g000sha256.tdl.function.GetChatMember
import dev.g000sha256.tdl.function.GetChatMessageByDate
import dev.g000sha256.tdl.function.GetChatMessageCalendar
import dev.g000sha256.tdl.function.GetChatMessageCount
import dev.g000sha256.tdl.function.GetChatMessagePosition
import dev.g000sha256.tdl.function.GetChatNotificationSettingsExceptions
import dev.g000sha256.tdl.function.GetChatPinnedMessage
import dev.g000sha256.tdl.function.GetChatPostedToChatPageStories
import dev.g000sha256.tdl.function.GetChatRevenueStatistics
import dev.g000sha256.tdl.function.GetChatRevenueTransactions
import dev.g000sha256.tdl.function.GetChatRevenueWithdrawalUrl
import dev.g000sha256.tdl.function.GetChatScheduledMessages
import dev.g000sha256.tdl.function.GetChatSimilarChatCount
import dev.g000sha256.tdl.function.GetChatSimilarChats
import dev.g000sha256.tdl.function.GetChatSparseMessagePositions
import dev.g000sha256.tdl.function.GetChatSponsoredMessages
import dev.g000sha256.tdl.function.GetChatStatistics
import dev.g000sha256.tdl.function.GetChatStoryInteractions
import dev.g000sha256.tdl.function.GetChats
import dev.g000sha256.tdl.function.GetChatsForChatFolderInviteLink
import dev.g000sha256.tdl.function.GetChatsToPostStories
import dev.g000sha256.tdl.function.GetCloseFriends
import dev.g000sha256.tdl.function.GetCollectibleItemInfo
import dev.g000sha256.tdl.function.GetCommands
import dev.g000sha256.tdl.function.GetConnectedAffiliateProgram
import dev.g000sha256.tdl.function.GetConnectedAffiliatePrograms
import dev.g000sha256.tdl.function.GetConnectedWebsites
import dev.g000sha256.tdl.function.GetContacts
import dev.g000sha256.tdl.function.GetCountries
import dev.g000sha256.tdl.function.GetCountryCode
import dev.g000sha256.tdl.function.GetCountryFlagEmoji
import dev.g000sha256.tdl.function.GetCreatedPublicChats
import dev.g000sha256.tdl.function.GetCurrentState
import dev.g000sha256.tdl.function.GetCurrentWeather
import dev.g000sha256.tdl.function.GetCustomEmojiReactionAnimations
import dev.g000sha256.tdl.function.GetCustomEmojiStickers
import dev.g000sha256.tdl.function.GetDatabaseStatistics
import dev.g000sha256.tdl.function.GetDeepLinkInfo
import dev.g000sha256.tdl.function.GetDefaultBackgroundCustomEmojiStickers
import dev.g000sha256.tdl.function.GetDefaultChatEmojiStatuses
import dev.g000sha256.tdl.function.GetDefaultChatPhotoCustomEmojiStickers
import dev.g000sha256.tdl.function.GetDefaultEmojiStatuses
import dev.g000sha256.tdl.function.GetDefaultMessageAutoDeleteTime
import dev.g000sha256.tdl.function.GetDefaultProfilePhotoCustomEmojiStickers
import dev.g000sha256.tdl.function.GetDirectMessagesChatTopic
import dev.g000sha256.tdl.function.GetDirectMessagesChatTopicHistory
import dev.g000sha256.tdl.function.GetDirectMessagesChatTopicMessageByDate
import dev.g000sha256.tdl.function.GetDirectMessagesChatTopicRevenue
import dev.g000sha256.tdl.function.GetDisallowedChatEmojiStatuses
import dev.g000sha256.tdl.function.GetEmojiCategories
import dev.g000sha256.tdl.function.GetEmojiReaction
import dev.g000sha256.tdl.function.GetEmojiSuggestionsUrl
import dev.g000sha256.tdl.function.GetExternalLink
import dev.g000sha256.tdl.function.GetExternalLinkInfo
import dev.g000sha256.tdl.function.GetFavoriteStickers
import dev.g000sha256.tdl.function.GetFile
import dev.g000sha256.tdl.function.GetFileDownloadedPrefixSize
import dev.g000sha256.tdl.function.GetFileExtension
import dev.g000sha256.tdl.function.GetFileMimeType
import dev.g000sha256.tdl.function.GetForumTopic
import dev.g000sha256.tdl.function.GetForumTopicDefaultIcons
import dev.g000sha256.tdl.function.GetForumTopicLink
import dev.g000sha256.tdl.function.GetForumTopics
import dev.g000sha256.tdl.function.GetGameHighScores
import dev.g000sha256.tdl.function.GetGiftUpgradePreview
import dev.g000sha256.tdl.function.GetGiveawayInfo
import dev.g000sha256.tdl.function.GetGreetingStickers
import dev.g000sha256.tdl.function.GetGrossingWebAppBots
import dev.g000sha256.tdl.function.GetGroupCall
import dev.g000sha256.tdl.function.GetGroupCallParticipants
import dev.g000sha256.tdl.function.GetGroupsInCommon
import dev.g000sha256.tdl.function.GetImportedContactCount
import dev.g000sha256.tdl.function.GetInactiveSupergroupChats
import dev.g000sha256.tdl.function.GetInlineGameHighScores
import dev.g000sha256.tdl.function.GetInlineQueryResults
import dev.g000sha256.tdl.function.GetInstalledBackgrounds
import dev.g000sha256.tdl.function.GetInstalledStickerSets
import dev.g000sha256.tdl.function.GetInternalLink
import dev.g000sha256.tdl.function.GetInternalLinkType
import dev.g000sha256.tdl.function.GetJsonString
import dev.g000sha256.tdl.function.GetJsonValue
import dev.g000sha256.tdl.function.GetKeywordEmojis
import dev.g000sha256.tdl.function.GetLanguagePackInfo
import dev.g000sha256.tdl.function.GetLanguagePackString
import dev.g000sha256.tdl.function.GetLanguagePackStrings
import dev.g000sha256.tdl.function.GetLinkPreview
import dev.g000sha256.tdl.function.GetLocalizationTargetInfo
import dev.g000sha256.tdl.function.GetLogStream
import dev.g000sha256.tdl.function.GetLogTagVerbosityLevel
import dev.g000sha256.tdl.function.GetLogTags
import dev.g000sha256.tdl.function.GetLogVerbosityLevel
import dev.g000sha256.tdl.function.GetLoginUrl
import dev.g000sha256.tdl.function.GetLoginUrlInfo
import dev.g000sha256.tdl.function.GetMainWebApp
import dev.g000sha256.tdl.function.GetMapThumbnailFile
import dev.g000sha256.tdl.function.GetMarkdownText
import dev.g000sha256.tdl.function.GetMe
import dev.g000sha256.tdl.function.GetMenuButton
import dev.g000sha256.tdl.function.GetMessage
import dev.g000sha256.tdl.function.GetMessageAddedReactions
import dev.g000sha256.tdl.function.GetMessageAuthor
import dev.g000sha256.tdl.function.GetMessageAvailableReactions
import dev.g000sha256.tdl.function.GetMessageEffect
import dev.g000sha256.tdl.function.GetMessageEmbeddingCode
import dev.g000sha256.tdl.function.GetMessageFileType
import dev.g000sha256.tdl.function.GetMessageImportConfirmationText
import dev.g000sha256.tdl.function.GetMessageLink
import dev.g000sha256.tdl.function.GetMessageLinkInfo
import dev.g000sha256.tdl.function.GetMessageLocally
import dev.g000sha256.tdl.function.GetMessageProperties
import dev.g000sha256.tdl.function.GetMessagePublicForwards
import dev.g000sha256.tdl.function.GetMessageReadDate
import dev.g000sha256.tdl.function.GetMessageStatistics
import dev.g000sha256.tdl.function.GetMessageThread
import dev.g000sha256.tdl.function.GetMessageThreadHistory
import dev.g000sha256.tdl.function.GetMessageViewers
import dev.g000sha256.tdl.function.GetMessages
import dev.g000sha256.tdl.function.GetNetworkStatistics
import dev.g000sha256.tdl.function.GetNewChatPrivacySettings
import dev.g000sha256.tdl.function.GetOption
import dev.g000sha256.tdl.function.GetOwnedBots
import dev.g000sha256.tdl.function.GetOwnedStickerSets
import dev.g000sha256.tdl.function.GetPaidMessageRevenue
import dev.g000sha256.tdl.function.GetPassportAuthorizationForm
import dev.g000sha256.tdl.function.GetPassportAuthorizationFormAvailableElements
import dev.g000sha256.tdl.function.GetPassportElement
import dev.g000sha256.tdl.function.GetPasswordState
import dev.g000sha256.tdl.function.GetPaymentForm
import dev.g000sha256.tdl.function.GetPaymentReceipt
import dev.g000sha256.tdl.function.GetPhoneNumberInfo
import dev.g000sha256.tdl.function.GetPhoneNumberInfoSync
import dev.g000sha256.tdl.function.GetPollVoters
import dev.g000sha256.tdl.function.GetPreferredCountryLanguage
import dev.g000sha256.tdl.function.GetPremiumFeatures
import dev.g000sha256.tdl.function.GetPremiumGiftPaymentOptions
import dev.g000sha256.tdl.function.GetPremiumGiveawayPaymentOptions
import dev.g000sha256.tdl.function.GetPremiumInfoSticker
import dev.g000sha256.tdl.function.GetPremiumLimit
import dev.g000sha256.tdl.function.GetPremiumState
import dev.g000sha256.tdl.function.GetPremiumStickerExamples
import dev.g000sha256.tdl.function.GetPremiumStickers
import dev.g000sha256.tdl.function.GetPreparedInlineMessage
import dev.g000sha256.tdl.function.GetProxies
import dev.g000sha256.tdl.function.GetProxyLink
import dev.g000sha256.tdl.function.GetPushReceiverId
import dev.g000sha256.tdl.function.GetReadDatePrivacySettings
import dev.g000sha256.tdl.function.GetReceivedGift
import dev.g000sha256.tdl.function.GetReceivedGifts
import dev.g000sha256.tdl.function.GetRecentEmojiStatuses
import dev.g000sha256.tdl.function.GetRecentInlineBots
import dev.g000sha256.tdl.function.GetRecentStickers
import dev.g000sha256.tdl.function.GetRecentlyOpenedChats
import dev.g000sha256.tdl.function.GetRecentlyVisitedTMeUrls
import dev.g000sha256.tdl.function.GetRecommendedChatFolders
import dev.g000sha256.tdl.function.GetRecommendedChats
import dev.g000sha256.tdl.function.GetRecoveryEmailAddress
import dev.g000sha256.tdl.function.GetRemoteFile
import dev.g000sha256.tdl.function.GetRepliedMessage
import dev.g000sha256.tdl.function.GetSavedAnimations
import dev.g000sha256.tdl.function.GetSavedMessagesTags
import dev.g000sha256.tdl.function.GetSavedMessagesTopicHistory
import dev.g000sha256.tdl.function.GetSavedMessagesTopicMessageByDate
import dev.g000sha256.tdl.function.GetSavedNotificationSound
import dev.g000sha256.tdl.function.GetSavedNotificationSounds
import dev.g000sha256.tdl.function.GetSavedOrderInfo
import dev.g000sha256.tdl.function.GetScopeNotificationSettings
import dev.g000sha256.tdl.function.GetSearchSponsoredChats
import dev.g000sha256.tdl.function.GetSearchedForTags
import dev.g000sha256.tdl.function.GetSecretChat
import dev.g000sha256.tdl.function.GetStarAdAccountUrl
import dev.g000sha256.tdl.function.GetStarGiftPaymentOptions
import dev.g000sha256.tdl.function.GetStarGiveawayPaymentOptions
import dev.g000sha256.tdl.function.GetStarPaymentOptions
import dev.g000sha256.tdl.function.GetStarRevenueStatistics
import dev.g000sha256.tdl.function.GetStarSubscriptions
import dev.g000sha256.tdl.function.GetStarTransactions
import dev.g000sha256.tdl.function.GetStarWithdrawalUrl
import dev.g000sha256.tdl.function.GetStatisticalGraph
import dev.g000sha256.tdl.function.GetStickerEmojis
import dev.g000sha256.tdl.function.GetStickerOutline
import dev.g000sha256.tdl.function.GetStickerSet
import dev.g000sha256.tdl.function.GetStickerSetName
import dev.g000sha256.tdl.function.GetStickers
import dev.g000sha256.tdl.function.GetStorageStatistics
import dev.g000sha256.tdl.function.GetStorageStatisticsFast
import dev.g000sha256.tdl.function.GetStory
import dev.g000sha256.tdl.function.GetStoryAvailableReactions
import dev.g000sha256.tdl.function.GetStoryInteractions
import dev.g000sha256.tdl.function.GetStoryNotificationSettingsExceptions
import dev.g000sha256.tdl.function.GetStoryPublicForwards
import dev.g000sha256.tdl.function.GetStoryStatistics
import dev.g000sha256.tdl.function.GetSuggestedFileName
import dev.g000sha256.tdl.function.GetSuggestedStickerSetName
import dev.g000sha256.tdl.function.GetSuitableDiscussionChats
import dev.g000sha256.tdl.function.GetSuitablePersonalChats
import dev.g000sha256.tdl.function.GetSupergroup
import dev.g000sha256.tdl.function.GetSupergroupFullInfo
import dev.g000sha256.tdl.function.GetSupergroupMembers
import dev.g000sha256.tdl.function.GetSupportName
import dev.g000sha256.tdl.function.GetSupportUser
import dev.g000sha256.tdl.function.GetTemporaryPasswordState
import dev.g000sha256.tdl.function.GetTextEntities
import dev.g000sha256.tdl.function.GetThemeParametersJsonString
import dev.g000sha256.tdl.function.GetThemedChatEmojiStatuses
import dev.g000sha256.tdl.function.GetThemedEmojiStatuses
import dev.g000sha256.tdl.function.GetTimeZones
import dev.g000sha256.tdl.function.GetTopChats
import dev.g000sha256.tdl.function.GetTrendingStickerSets
import dev.g000sha256.tdl.function.GetUpgradedGift
import dev.g000sha256.tdl.function.GetUpgradedGiftEmojiStatuses
import dev.g000sha256.tdl.function.GetUpgradedGiftWithdrawalUrl
import dev.g000sha256.tdl.function.GetUser
import dev.g000sha256.tdl.function.GetUserChatBoosts
import dev.g000sha256.tdl.function.GetUserFullInfo
import dev.g000sha256.tdl.function.GetUserLink
import dev.g000sha256.tdl.function.GetUserPrivacySettingRules
import dev.g000sha256.tdl.function.GetUserProfilePhotos
import dev.g000sha256.tdl.function.GetUserSupportInfo
import dev.g000sha256.tdl.function.GetVideoChatAvailableParticipants
import dev.g000sha256.tdl.function.GetVideoChatInviteLink
import dev.g000sha256.tdl.function.GetVideoChatRtmpUrl
import dev.g000sha256.tdl.function.GetVideoChatStreamSegment
import dev.g000sha256.tdl.function.GetVideoChatStreams
import dev.g000sha256.tdl.function.GetVideoMessageAdvertisements
import dev.g000sha256.tdl.function.GetWebAppLinkUrl
import dev.g000sha256.tdl.function.GetWebAppPlaceholder
import dev.g000sha256.tdl.function.GetWebAppUrl
import dev.g000sha256.tdl.function.GetWebPageInstantView
import dev.g000sha256.tdl.function.GiftPremiumWithStars
import dev.g000sha256.tdl.function.HideContactCloseBirthdays
import dev.g000sha256.tdl.function.HideSuggestedAction
import dev.g000sha256.tdl.function.ImportContacts
import dev.g000sha256.tdl.function.ImportMessages
import dev.g000sha256.tdl.function.InviteGroupCallParticipant
import dev.g000sha256.tdl.function.InviteVideoChatParticipants
import dev.g000sha256.tdl.function.JoinChat
import dev.g000sha256.tdl.function.JoinChatByInviteLink
import dev.g000sha256.tdl.function.JoinGroupCall
import dev.g000sha256.tdl.function.JoinVideoChat
import dev.g000sha256.tdl.function.LaunchPrepaidGiveaway
import dev.g000sha256.tdl.function.LeaveChat
import dev.g000sha256.tdl.function.LeaveGroupCall
import dev.g000sha256.tdl.function.LoadActiveStories
import dev.g000sha256.tdl.function.LoadChats
import dev.g000sha256.tdl.function.LoadDirectMessagesChatTopics
import dev.g000sha256.tdl.function.LoadGroupCallParticipants
import dev.g000sha256.tdl.function.LoadQuickReplyShortcutMessages
import dev.g000sha256.tdl.function.LoadQuickReplyShortcuts
import dev.g000sha256.tdl.function.LoadSavedMessagesTopics
import dev.g000sha256.tdl.function.LogOut
import dev.g000sha256.tdl.function.MarkChecklistTasksAsDone
import dev.g000sha256.tdl.function.OpenBotSimilarBot
import dev.g000sha256.tdl.function.OpenChat
import dev.g000sha256.tdl.function.OpenChatSimilarChat
import dev.g000sha256.tdl.function.OpenMessageContent
import dev.g000sha256.tdl.function.OpenSponsoredChat
import dev.g000sha256.tdl.function.OpenStory
import dev.g000sha256.tdl.function.OpenWebApp
import dev.g000sha256.tdl.function.OptimizeStorage
import dev.g000sha256.tdl.function.ParseMarkdown
import dev.g000sha256.tdl.function.ParseTextEntities
import dev.g000sha256.tdl.function.PinChatMessage
import dev.g000sha256.tdl.function.PingProxy
import dev.g000sha256.tdl.function.PostStory
import dev.g000sha256.tdl.function.PreliminaryUploadFile
import dev.g000sha256.tdl.function.ProcessChatFolderNewChats
import dev.g000sha256.tdl.function.ProcessChatJoinRequest
import dev.g000sha256.tdl.function.ProcessChatJoinRequests
import dev.g000sha256.tdl.function.ProcessPushNotification
import dev.g000sha256.tdl.function.RateSpeechRecognition
import dev.g000sha256.tdl.function.ReadAllChatMentions
import dev.g000sha256.tdl.function.ReadAllChatReactions
import dev.g000sha256.tdl.function.ReadAllDirectMessagesChatTopicReactions
import dev.g000sha256.tdl.function.ReadAllMessageThreadMentions
import dev.g000sha256.tdl.function.ReadAllMessageThreadReactions
import dev.g000sha256.tdl.function.ReadBusinessMessage
import dev.g000sha256.tdl.function.ReadChatList
import dev.g000sha256.tdl.function.ReadFilePart
import dev.g000sha256.tdl.function.ReaddQuickReplyShortcutMessages
import dev.g000sha256.tdl.function.RecognizeSpeech
import dev.g000sha256.tdl.function.RecoverAuthenticationPassword
import dev.g000sha256.tdl.function.RecoverPassword
import dev.g000sha256.tdl.function.RefundStarPayment
import dev.g000sha256.tdl.function.RegisterDevice
import dev.g000sha256.tdl.function.RegisterUser
import dev.g000sha256.tdl.function.RemoveAllFilesFromDownloads
import dev.g000sha256.tdl.function.RemoveBusinessConnectedBotFromChat
import dev.g000sha256.tdl.function.RemoveChatActionBar
import dev.g000sha256.tdl.function.RemoveContacts
import dev.g000sha256.tdl.function.RemoveFavoriteSticker
import dev.g000sha256.tdl.function.RemoveFileFromDownloads
import dev.g000sha256.tdl.function.RemoveInstalledBackground
import dev.g000sha256.tdl.function.RemoveMessageReaction
import dev.g000sha256.tdl.function.RemoveMessageSenderBotVerification
import dev.g000sha256.tdl.function.RemoveNotification
import dev.g000sha256.tdl.function.RemoveNotificationGroup
import dev.g000sha256.tdl.function.RemovePendingPaidMessageReactions
import dev.g000sha256.tdl.function.RemoveProxy
import dev.g000sha256.tdl.function.RemoveRecentHashtag
import dev.g000sha256.tdl.function.RemoveRecentSticker
import dev.g000sha256.tdl.function.RemoveRecentlyFoundChat
import dev.g000sha256.tdl.function.RemoveSavedAnimation
import dev.g000sha256.tdl.function.RemoveSavedNotificationSound
import dev.g000sha256.tdl.function.RemoveSearchedForTag
import dev.g000sha256.tdl.function.RemoveStickerFromSet
import dev.g000sha256.tdl.function.RemoveTopChat
import dev.g000sha256.tdl.function.ReorderActiveUsernames
import dev.g000sha256.tdl.function.ReorderBotActiveUsernames
import dev.g000sha256.tdl.function.ReorderBotMediaPreviews
import dev.g000sha256.tdl.function.ReorderChatFolders
import dev.g000sha256.tdl.function.ReorderInstalledStickerSets
import dev.g000sha256.tdl.function.ReorderQuickReplyShortcuts
import dev.g000sha256.tdl.function.ReorderSupergroupActiveUsernames
import dev.g000sha256.tdl.function.ReplacePrimaryChatInviteLink
import dev.g000sha256.tdl.function.ReplaceStickerInSet
import dev.g000sha256.tdl.function.ReplaceVideoChatRtmpUrl
import dev.g000sha256.tdl.function.ReportAuthenticationCodeMissing
import dev.g000sha256.tdl.function.ReportChat
import dev.g000sha256.tdl.function.ReportChatPhoto
import dev.g000sha256.tdl.function.ReportChatSponsoredMessage
import dev.g000sha256.tdl.function.ReportMessageReactions
import dev.g000sha256.tdl.function.ReportPhoneNumberCodeMissing
import dev.g000sha256.tdl.function.ReportSponsoredChat
import dev.g000sha256.tdl.function.ReportStory
import dev.g000sha256.tdl.function.ReportSupergroupAntiSpamFalsePositive
import dev.g000sha256.tdl.function.ReportSupergroupSpam
import dev.g000sha256.tdl.function.ReportVideoMessageAdvertisement
import dev.g000sha256.tdl.function.RequestAuthenticationPasswordRecovery
import dev.g000sha256.tdl.function.RequestPasswordRecovery
import dev.g000sha256.tdl.function.RequestQrCodeAuthentication
import dev.g000sha256.tdl.function.ResendAuthenticationCode
import dev.g000sha256.tdl.function.ResendEmailAddressVerificationCode
import dev.g000sha256.tdl.function.ResendLoginEmailAddressCode
import dev.g000sha256.tdl.function.ResendMessages
import dev.g000sha256.tdl.function.ResendPhoneNumberCode
import dev.g000sha256.tdl.function.ResendRecoveryEmailAddressCode
import dev.g000sha256.tdl.function.ResetAllNotificationSettings
import dev.g000sha256.tdl.function.ResetAuthenticationEmailAddress
import dev.g000sha256.tdl.function.ResetInstalledBackgrounds
import dev.g000sha256.tdl.function.ResetNetworkStatistics
import dev.g000sha256.tdl.function.ResetPassword
import dev.g000sha256.tdl.function.ReuseStarSubscription
import dev.g000sha256.tdl.function.RevokeChatInviteLink
import dev.g000sha256.tdl.function.RevokeGroupCallInviteLink
import dev.g000sha256.tdl.function.SaveApplicationLogEvent
import dev.g000sha256.tdl.function.SavePreparedInlineMessage
import dev.g000sha256.tdl.function.SearchAffiliatePrograms
import dev.g000sha256.tdl.function.SearchBackground
import dev.g000sha256.tdl.function.SearchCallMessages
import dev.g000sha256.tdl.function.SearchChatAffiliateProgram
import dev.g000sha256.tdl.function.SearchChatMembers
import dev.g000sha256.tdl.function.SearchChatMessages
import dev.g000sha256.tdl.function.SearchChatRecentLocationMessages
import dev.g000sha256.tdl.function.SearchChats
import dev.g000sha256.tdl.function.SearchChatsOnServer
import dev.g000sha256.tdl.function.SearchContacts
import dev.g000sha256.tdl.function.SearchEmojis
import dev.g000sha256.tdl.function.SearchFileDownloads
import dev.g000sha256.tdl.function.SearchGiftsForResale
import dev.g000sha256.tdl.function.SearchHashtags
import dev.g000sha256.tdl.function.SearchInstalledStickerSets
import dev.g000sha256.tdl.function.SearchMessages
import dev.g000sha256.tdl.function.SearchOutgoingDocumentMessages
import dev.g000sha256.tdl.function.SearchPublicChat
import dev.g000sha256.tdl.function.SearchPublicChats
import dev.g000sha256.tdl.function.SearchPublicMessagesByTag
import dev.g000sha256.tdl.function.SearchPublicStoriesByLocation
import dev.g000sha256.tdl.function.SearchPublicStoriesByTag
import dev.g000sha256.tdl.function.SearchPublicStoriesByVenue
import dev.g000sha256.tdl.function.SearchQuote
import dev.g000sha256.tdl.function.SearchRecentlyFoundChats
import dev.g000sha256.tdl.function.SearchSavedMessages
import dev.g000sha256.tdl.function.SearchSecretMessages
import dev.g000sha256.tdl.function.SearchStickerSet
import dev.g000sha256.tdl.function.SearchStickerSets
import dev.g000sha256.tdl.function.SearchStickers
import dev.g000sha256.tdl.function.SearchStringsByPrefix
import dev.g000sha256.tdl.function.SearchUserByPhoneNumber
import dev.g000sha256.tdl.function.SearchUserByToken
import dev.g000sha256.tdl.function.SearchWebApp
import dev.g000sha256.tdl.function.SellGift
import dev.g000sha256.tdl.function.SendAuthenticationFirebaseSms
import dev.g000sha256.tdl.function.SendBotStartMessage
import dev.g000sha256.tdl.function.SendBusinessMessage
import dev.g000sha256.tdl.function.SendBusinessMessageAlbum
import dev.g000sha256.tdl.function.SendCallDebugInformation
import dev.g000sha256.tdl.function.SendCallLog
import dev.g000sha256.tdl.function.SendCallRating
import dev.g000sha256.tdl.function.SendCallSignalingData
import dev.g000sha256.tdl.function.SendChatAction
import dev.g000sha256.tdl.function.SendCustomRequest
import dev.g000sha256.tdl.function.SendEmailAddressVerificationCode
import dev.g000sha256.tdl.function.SendGift
import dev.g000sha256.tdl.function.SendInlineQueryResultMessage
import dev.g000sha256.tdl.function.SendMessage
import dev.g000sha256.tdl.function.SendMessageAlbum
import dev.g000sha256.tdl.function.SendPassportAuthorizationForm
import dev.g000sha256.tdl.function.SendPaymentForm
import dev.g000sha256.tdl.function.SendPhoneNumberCode
import dev.g000sha256.tdl.function.SendPhoneNumberFirebaseSms
import dev.g000sha256.tdl.function.SendQuickReplyShortcutMessages
import dev.g000sha256.tdl.function.SendResoldGift
import dev.g000sha256.tdl.function.SendWebAppCustomRequest
import dev.g000sha256.tdl.function.SendWebAppData
import dev.g000sha256.tdl.function.SetAccentColor
import dev.g000sha256.tdl.function.SetAccountTtl
import dev.g000sha256.tdl.function.SetAlarm
import dev.g000sha256.tdl.function.SetApplicationVerificationToken
import dev.g000sha256.tdl.function.SetArchiveChatListSettings
import dev.g000sha256.tdl.function.SetAuthenticationEmailAddress
import dev.g000sha256.tdl.function.SetAuthenticationPhoneNumber
import dev.g000sha256.tdl.function.SetAuthenticationPremiumPurchaseTransaction
import dev.g000sha256.tdl.function.SetAutoDownloadSettings
import dev.g000sha256.tdl.function.SetAutosaveSettings
import dev.g000sha256.tdl.function.SetBio
import dev.g000sha256.tdl.function.SetBirthdate
import dev.g000sha256.tdl.function.SetBotInfoDescription
import dev.g000sha256.tdl.function.SetBotInfoShortDescription
import dev.g000sha256.tdl.function.SetBotName
import dev.g000sha256.tdl.function.SetBotProfilePhoto
import dev.g000sha256.tdl.function.SetBotUpdatesStatus
import dev.g000sha256.tdl.function.SetBusinessAccountBio
import dev.g000sha256.tdl.function.SetBusinessAccountGiftSettings
import dev.g000sha256.tdl.function.SetBusinessAccountName
import dev.g000sha256.tdl.function.SetBusinessAccountProfilePhoto
import dev.g000sha256.tdl.function.SetBusinessAccountUsername
import dev.g000sha256.tdl.function.SetBusinessAwayMessageSettings
import dev.g000sha256.tdl.function.SetBusinessConnectedBot
import dev.g000sha256.tdl.function.SetBusinessGreetingMessageSettings
import dev.g000sha256.tdl.function.SetBusinessLocation
import dev.g000sha256.tdl.function.SetBusinessMessageIsPinned
import dev.g000sha256.tdl.function.SetBusinessOpeningHours
import dev.g000sha256.tdl.function.SetBusinessStartPage
import dev.g000sha256.tdl.function.SetChatAccentColor
import dev.g000sha256.tdl.function.SetChatActiveStoriesList
import dev.g000sha256.tdl.function.SetChatAffiliateProgram
import dev.g000sha256.tdl.function.SetChatAvailableReactions
import dev.g000sha256.tdl.function.SetChatBackground
import dev.g000sha256.tdl.function.SetChatClientData
import dev.g000sha256.tdl.function.SetChatDescription
import dev.g000sha256.tdl.function.SetChatDirectMessagesGroup
import dev.g000sha256.tdl.function.SetChatDiscussionGroup
import dev.g000sha256.tdl.function.SetChatDraftMessage
import dev.g000sha256.tdl.function.SetChatEmojiStatus
import dev.g000sha256.tdl.function.SetChatLocation
import dev.g000sha256.tdl.function.SetChatMemberStatus
import dev.g000sha256.tdl.function.SetChatMessageAutoDeleteTime
import dev.g000sha256.tdl.function.SetChatMessageSender
import dev.g000sha256.tdl.function.SetChatNotificationSettings
import dev.g000sha256.tdl.function.SetChatPaidMessageStarCount
import dev.g000sha256.tdl.function.SetChatPermissions
import dev.g000sha256.tdl.function.SetChatPhoto
import dev.g000sha256.tdl.function.SetChatPinnedStories
import dev.g000sha256.tdl.function.SetChatProfileAccentColor
import dev.g000sha256.tdl.function.SetChatSlowModeDelay
import dev.g000sha256.tdl.function.SetChatTheme
import dev.g000sha256.tdl.function.SetChatTitle
import dev.g000sha256.tdl.function.SetCloseFriends
import dev.g000sha256.tdl.function.SetCommands
import dev.g000sha256.tdl.function.SetCustomEmojiStickerSetThumbnail
import dev.g000sha256.tdl.function.SetCustomLanguagePack
import dev.g000sha256.tdl.function.SetCustomLanguagePackString
import dev.g000sha256.tdl.function.SetDatabaseEncryptionKey
import dev.g000sha256.tdl.function.SetDefaultBackground
import dev.g000sha256.tdl.function.SetDefaultChannelAdministratorRights
import dev.g000sha256.tdl.function.SetDefaultGroupAdministratorRights
import dev.g000sha256.tdl.function.SetDefaultMessageAutoDeleteTime
import dev.g000sha256.tdl.function.SetDefaultReactionType
import dev.g000sha256.tdl.function.SetDirectMessagesChatTopicDraftMessage
import dev.g000sha256.tdl.function.SetDirectMessagesChatTopicIsMarkedAsUnread
import dev.g000sha256.tdl.function.SetEmojiStatus
import dev.g000sha256.tdl.function.SetFileGenerationProgress
import dev.g000sha256.tdl.function.SetForumTopicNotificationSettings
import dev.g000sha256.tdl.function.SetGameScore
import dev.g000sha256.tdl.function.SetGiftResalePrice
import dev.g000sha256.tdl.function.SetGiftSettings
import dev.g000sha256.tdl.function.SetGroupCallParticipantIsSpeaking
import dev.g000sha256.tdl.function.SetGroupCallParticipantVolumeLevel
import dev.g000sha256.tdl.function.SetInactiveSessionTtl
import dev.g000sha256.tdl.function.SetInlineGameScore
import dev.g000sha256.tdl.function.SetLogStream
import dev.g000sha256.tdl.function.SetLogTagVerbosityLevel
import dev.g000sha256.tdl.function.SetLogVerbosityLevel
import dev.g000sha256.tdl.function.SetLoginEmailAddress
import dev.g000sha256.tdl.function.SetMenuButton
import dev.g000sha256.tdl.function.SetMessageFactCheck
import dev.g000sha256.tdl.function.SetMessageReactions
import dev.g000sha256.tdl.function.SetMessageSenderBlockList
import dev.g000sha256.tdl.function.SetMessageSenderBotVerification
import dev.g000sha256.tdl.function.SetName
import dev.g000sha256.tdl.function.SetNetworkType
import dev.g000sha256.tdl.function.SetNewChatPrivacySettings
import dev.g000sha256.tdl.function.SetOption
import dev.g000sha256.tdl.function.SetPaidMessageReactionType
import dev.g000sha256.tdl.function.SetPassportElement
import dev.g000sha256.tdl.function.SetPassportElementErrors
import dev.g000sha256.tdl.function.SetPassword
import dev.g000sha256.tdl.function.SetPersonalChat
import dev.g000sha256.tdl.function.SetPinnedChats
import dev.g000sha256.tdl.function.SetPinnedForumTopics
import dev.g000sha256.tdl.function.SetPinnedGifts
import dev.g000sha256.tdl.function.SetPinnedSavedMessagesTopics
import dev.g000sha256.tdl.function.SetPollAnswer
import dev.g000sha256.tdl.function.SetProfileAccentColor
import dev.g000sha256.tdl.function.SetProfilePhoto
import dev.g000sha256.tdl.function.SetQuickReplyShortcutName
import dev.g000sha256.tdl.function.SetReactionNotificationSettings
import dev.g000sha256.tdl.function.SetReadDatePrivacySettings
import dev.g000sha256.tdl.function.SetRecoveryEmailAddress
import dev.g000sha256.tdl.function.SetSavedMessagesTagLabel
import dev.g000sha256.tdl.function.SetScopeNotificationSettings
import dev.g000sha256.tdl.function.SetStickerEmojis
import dev.g000sha256.tdl.function.SetStickerKeywords
import dev.g000sha256.tdl.function.SetStickerMaskPosition
import dev.g000sha256.tdl.function.SetStickerPositionInSet
import dev.g000sha256.tdl.function.SetStickerSetThumbnail
import dev.g000sha256.tdl.function.SetStickerSetTitle
import dev.g000sha256.tdl.function.SetStoryPrivacySettings
import dev.g000sha256.tdl.function.SetStoryReaction
import dev.g000sha256.tdl.function.SetSupergroupCustomEmojiStickerSet
import dev.g000sha256.tdl.function.SetSupergroupStickerSet
import dev.g000sha256.tdl.function.SetSupergroupUnrestrictBoostCount
import dev.g000sha256.tdl.function.SetSupergroupUsername
import dev.g000sha256.tdl.function.SetTdlibParameters
import dev.g000sha256.tdl.function.SetUserEmojiStatus
import dev.g000sha256.tdl.function.SetUserPersonalProfilePhoto
import dev.g000sha256.tdl.function.SetUserPrivacySettingRules
import dev.g000sha256.tdl.function.SetUserSupportInfo
import dev.g000sha256.tdl.function.SetUsername
import dev.g000sha256.tdl.function.SetVideoChatDefaultParticipant
import dev.g000sha256.tdl.function.SetVideoChatTitle
import dev.g000sha256.tdl.function.ShareChatWithBot
import dev.g000sha256.tdl.function.SharePhoneNumber
import dev.g000sha256.tdl.function.ShareUsersWithBot
import dev.g000sha256.tdl.function.StartGroupCallRecording
import dev.g000sha256.tdl.function.StartGroupCallScreenSharing
import dev.g000sha256.tdl.function.StartScheduledVideoChat
import dev.g000sha256.tdl.function.StopBusinessPoll
import dev.g000sha256.tdl.function.StopPoll
import dev.g000sha256.tdl.function.SuggestUserProfilePhoto
import dev.g000sha256.tdl.function.SynchronizeLanguagePack
import dev.g000sha256.tdl.function.TerminateAllOtherSessions
import dev.g000sha256.tdl.function.TerminateSession
import dev.g000sha256.tdl.function.TestCallBytes
import dev.g000sha256.tdl.function.TestCallEmpty
import dev.g000sha256.tdl.function.TestCallString
import dev.g000sha256.tdl.function.TestCallVectorInt
import dev.g000sha256.tdl.function.TestCallVectorIntObject
import dev.g000sha256.tdl.function.TestCallVectorString
import dev.g000sha256.tdl.function.TestCallVectorStringObject
import dev.g000sha256.tdl.function.TestGetDifference
import dev.g000sha256.tdl.function.TestNetwork
import dev.g000sha256.tdl.function.TestProxy
import dev.g000sha256.tdl.function.TestReturnError
import dev.g000sha256.tdl.function.TestSquareInt
import dev.g000sha256.tdl.function.TestUseUpdate
import dev.g000sha256.tdl.function.ToggleAllDownloadsArePaused
import dev.g000sha256.tdl.function.ToggleBotCanManageEmojiStatus
import dev.g000sha256.tdl.function.ToggleBotIsAddedToAttachmentMenu
import dev.g000sha256.tdl.function.ToggleBotUsernameIsActive
import dev.g000sha256.tdl.function.ToggleBusinessConnectedBotChatIsPaused
import dev.g000sha256.tdl.function.ToggleChatDefaultDisableNotification
import dev.g000sha256.tdl.function.ToggleChatFolderTags
import dev.g000sha256.tdl.function.ToggleChatGiftNotifications
import dev.g000sha256.tdl.function.ToggleChatHasProtectedContent
import dev.g000sha256.tdl.function.ToggleChatIsMarkedAsUnread
import dev.g000sha256.tdl.function.ToggleChatIsPinned
import dev.g000sha256.tdl.function.ToggleChatIsTranslatable
import dev.g000sha256.tdl.function.ToggleChatViewAsTopics
import dev.g000sha256.tdl.function.ToggleDirectMessagesChatTopicCanSendUnpaidMessages
import dev.g000sha256.tdl.function.ToggleDownloadIsPaused
import dev.g000sha256.tdl.function.ToggleForumTopicIsClosed
import dev.g000sha256.tdl.function.ToggleForumTopicIsPinned
import dev.g000sha256.tdl.function.ToggleGeneralForumTopicIsHidden
import dev.g000sha256.tdl.function.ToggleGiftIsSaved
import dev.g000sha256.tdl.function.ToggleGroupCallIsMyVideoEnabled
import dev.g000sha256.tdl.function.ToggleGroupCallIsMyVideoPaused
import dev.g000sha256.tdl.function.ToggleGroupCallParticipantIsHandRaised
import dev.g000sha256.tdl.function.ToggleGroupCallParticipantIsMuted
import dev.g000sha256.tdl.function.ToggleGroupCallScreenSharingIsPaused
import dev.g000sha256.tdl.function.ToggleHasSponsoredMessagesEnabled
import dev.g000sha256.tdl.function.ToggleSavedMessagesTopicIsPinned
import dev.g000sha256.tdl.function.ToggleSessionCanAcceptCalls
import dev.g000sha256.tdl.function.ToggleSessionCanAcceptSecretChats
import dev.g000sha256.tdl.function.ToggleStoryIsPostedToChatPage
import dev.g000sha256.tdl.function.ToggleSupergroupCanHaveSponsoredMessages
import dev.g000sha256.tdl.function.ToggleSupergroupHasAggressiveAntiSpamEnabled
import dev.g000sha256.tdl.function.ToggleSupergroupHasAutomaticTranslation
import dev.g000sha256.tdl.function.ToggleSupergroupHasHiddenMembers
import dev.g000sha256.tdl.function.ToggleSupergroupIsAllHistoryAvailable
import dev.g000sha256.tdl.function.ToggleSupergroupIsBroadcastGroup
import dev.g000sha256.tdl.function.ToggleSupergroupIsForum
import dev.g000sha256.tdl.function.ToggleSupergroupJoinByRequest
import dev.g000sha256.tdl.function.ToggleSupergroupJoinToSendMessages
import dev.g000sha256.tdl.function.ToggleSupergroupSignMessages
import dev.g000sha256.tdl.function.ToggleSupergroupUsernameIsActive
import dev.g000sha256.tdl.function.ToggleUsernameIsActive
import dev.g000sha256.tdl.function.ToggleVideoChatEnabledStartNotification
import dev.g000sha256.tdl.function.ToggleVideoChatMuteNewParticipants
import dev.g000sha256.tdl.function.TransferBusinessAccountStars
import dev.g000sha256.tdl.function.TransferChatOwnership
import dev.g000sha256.tdl.function.TransferGift
import dev.g000sha256.tdl.function.TranslateMessageText
import dev.g000sha256.tdl.function.TranslateText
import dev.g000sha256.tdl.function.UnpinAllChatMessages
import dev.g000sha256.tdl.function.UnpinAllDirectMessagesChatTopicMessages
import dev.g000sha256.tdl.function.UnpinAllMessageThreadMessages
import dev.g000sha256.tdl.function.UnpinChatMessage
import dev.g000sha256.tdl.function.UpgradeBasicGroupChatToSupergroupChat
import dev.g000sha256.tdl.function.UpgradeGift
import dev.g000sha256.tdl.function.UploadStickerFile
import dev.g000sha256.tdl.function.ValidateOrderInfo
import dev.g000sha256.tdl.function.ViewMessages
import dev.g000sha256.tdl.function.ViewPremiumFeature
import dev.g000sha256.tdl.function.ViewSponsoredChat
import dev.g000sha256.tdl.function.ViewTrendingStickerSets
import dev.g000sha256.tdl.function.ViewVideoMessageAdvertisement
import dev.g000sha256.tdl.function.WriteGeneratedFilePart
import dev.g000sha256.tdl.util.buildJsonObjectString
import dev.g000sha256.tdl.util.put
import kotlin.Any
import kotlin.Long
import kotlin.String
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.buildJsonObject

internal class TdlSerializer internal constructor() {
    internal fun serialize(function: Any, requestId: Long): String {
        when(function) {
            is AcceptCall -> return serialize(requestId = requestId, function = function)
            is AcceptTermsOfService -> return serialize(requestId = requestId, function = function)
            is ActivateStoryStealthMode -> return serialize(requestId = requestId, function = function)
            is AddBotMediaPreview -> return serialize(requestId = requestId, function = function)
            is AddChatFolderByInviteLink -> return serialize(requestId = requestId, function = function)
            is AddChatMember -> return serialize(requestId = requestId, function = function)
            is AddChatMembers -> return serialize(requestId = requestId, function = function)
            is AddChatToList -> return serialize(requestId = requestId, function = function)
            is AddChecklistTasks -> return serialize(requestId = requestId, function = function)
            is AddContact -> return serialize(requestId = requestId, function = function)
            is AddCustomServerLanguagePack -> return serialize(requestId = requestId, function = function)
            is AddFavoriteSticker -> return serialize(requestId = requestId, function = function)
            is AddFileToDownloads -> return serialize(requestId = requestId, function = function)
            is AddLocalMessage -> return serialize(requestId = requestId, function = function)
            is AddLogMessage -> return serialize(requestId = requestId, function = function)
            is AddMessageReaction -> return serialize(requestId = requestId, function = function)
            is AddNetworkStatistics -> return serialize(requestId = requestId, function = function)
            is AddPendingPaidMessageReaction -> return serialize(requestId = requestId, function = function)
            is AddProxy -> return serialize(requestId = requestId, function = function)
            is AddQuickReplyShortcutInlineQueryResultMessage -> return serialize(requestId = requestId, function = function)
            is AddQuickReplyShortcutMessage -> return serialize(requestId = requestId, function = function)
            is AddQuickReplyShortcutMessageAlbum -> return serialize(requestId = requestId, function = function)
            is AddRecentSticker -> return serialize(requestId = requestId, function = function)
            is AddRecentlyFoundChat -> return serialize(requestId = requestId, function = function)
            is AddSavedAnimation -> return serialize(requestId = requestId, function = function)
            is AddSavedNotificationSound -> return serialize(requestId = requestId, function = function)
            is AddStickerToSet -> return serialize(requestId = requestId, function = function)
            is AllowBotToSendMessages -> return serialize(requestId = requestId, function = function)
            is AllowUnpaidMessagesFromUser -> return serialize(requestId = requestId, function = function)
            is AnswerCallbackQuery -> return serialize(requestId = requestId, function = function)
            is AnswerCustomQuery -> return serialize(requestId = requestId, function = function)
            is AnswerInlineQuery -> return serialize(requestId = requestId, function = function)
            is AnswerPreCheckoutQuery -> return serialize(requestId = requestId, function = function)
            is AnswerShippingQuery -> return serialize(requestId = requestId, function = function)
            is AnswerWebAppQuery -> return serialize(requestId = requestId, function = function)
            is ApplyPremiumGiftCode -> return serialize(requestId = requestId, function = function)
            is AssignStoreTransaction -> return serialize(requestId = requestId, function = function)
            is BanChatMember -> return serialize(requestId = requestId, function = function)
            is BanGroupCallParticipants -> return serialize(requestId = requestId, function = function)
            is BlockMessageSenderFromReplies -> return serialize(requestId = requestId, function = function)
            is BoostChat -> return serialize(requestId = requestId, function = function)
            is CanBotSendMessages -> return serialize(requestId = requestId, function = function)
            is CanPostStory -> return serialize(requestId = requestId, function = function)
            is CanPurchaseFromStore -> return serialize(requestId = requestId, function = function)
            is CanSendMessageToUser -> return serialize(requestId = requestId, function = function)
            is CanTransferOwnership -> return serialize(requestId = requestId, function = function)
            is CancelDownloadFile -> return serialize(requestId = requestId, function = function)
            is CancelPasswordReset -> return serialize(requestId = requestId, function = function)
            is CancelPreliminaryUploadFile -> return serialize(requestId = requestId, function = function)
            is CancelRecoveryEmailAddressVerification -> return serialize(requestId = requestId, function = function)
            is ChangeImportedContacts -> return serialize(requestId = requestId, function = function)
            is ChangeStickerSet -> return serialize(requestId = requestId, function = function)
            is CheckAuthenticationBotToken -> return serialize(requestId = requestId, function = function)
            is CheckAuthenticationCode -> return serialize(requestId = requestId, function = function)
            is CheckAuthenticationEmailCode -> return serialize(requestId = requestId, function = function)
            is CheckAuthenticationPassword -> return serialize(requestId = requestId, function = function)
            is CheckAuthenticationPasswordRecoveryCode -> return serialize(requestId = requestId, function = function)
            is CheckAuthenticationPremiumPurchase -> return serialize(requestId = requestId, function = function)
            is CheckChatFolderInviteLink -> return serialize(requestId = requestId, function = function)
            is CheckChatInviteLink -> return serialize(requestId = requestId, function = function)
            is CheckChatUsername -> return serialize(requestId = requestId, function = function)
            is CheckCreatedPublicChatsLimit -> return serialize(requestId = requestId, function = function)
            is CheckEmailAddressVerificationCode -> return serialize(requestId = requestId, function = function)
            is CheckLoginEmailAddressCode -> return serialize(requestId = requestId, function = function)
            is CheckPasswordRecoveryCode -> return serialize(requestId = requestId, function = function)
            is CheckPhoneNumberCode -> return serialize(requestId = requestId, function = function)
            is CheckPremiumGiftCode -> return serialize(requestId = requestId, function = function)
            is CheckQuickReplyShortcutName -> return serialize(requestId = requestId, function = function)
            is CheckRecoveryEmailAddressCode -> return serialize(requestId = requestId, function = function)
            is CheckStickerSetName -> return serialize(requestId = requestId, function = function)
            is CheckWebAppFileDownload -> return serialize(requestId = requestId, function = function)
            is CleanFileName -> return serialize(requestId = requestId, function = function)
            is ClearAllDraftMessages -> return serialize(requestId = requestId, function = function)
            is ClearAutosaveSettingsExceptions -> return serialize(requestId = requestId, function = function)
            is ClearImportedContacts -> return serialize(requestId = requestId, function = function)
            is ClearRecentEmojiStatuses -> return serialize(requestId = requestId, function = function)
            is ClearRecentReactions -> return serialize(requestId = requestId, function = function)
            is ClearRecentStickers -> return serialize(requestId = requestId, function = function)
            is ClearRecentlyFoundChats -> return serialize(requestId = requestId, function = function)
            is ClearSearchedForTags -> return serialize(requestId = requestId, function = function)
            is ClickAnimatedEmojiMessage -> return serialize(requestId = requestId, function = function)
            is ClickChatSponsoredMessage -> return serialize(requestId = requestId, function = function)
            is ClickPremiumSubscriptionButton -> return serialize(requestId = requestId, function = function)
            is ClickVideoMessageAdvertisement -> return serialize(requestId = requestId, function = function)
            is Close -> return serialize(requestId = requestId, function = function)
            is CloseChat -> return serialize(requestId = requestId, function = function)
            is CloseSecretChat -> return serialize(requestId = requestId, function = function)
            is CloseStory -> return serialize(requestId = requestId, function = function)
            is CloseWebApp -> return serialize(requestId = requestId, function = function)
            is CommitPendingPaidMessageReactions -> return serialize(requestId = requestId, function = function)
            is ConfirmQrCodeAuthentication -> return serialize(requestId = requestId, function = function)
            is ConfirmSession -> return serialize(requestId = requestId, function = function)
            is ConnectAffiliateProgram -> return serialize(requestId = requestId, function = function)
            is CreateBasicGroupChat -> return serialize(requestId = requestId, function = function)
            is CreateBusinessChatLink -> return serialize(requestId = requestId, function = function)
            is CreateCall -> return serialize(requestId = requestId, function = function)
            is CreateChatFolder -> return serialize(requestId = requestId, function = function)
            is CreateChatFolderInviteLink -> return serialize(requestId = requestId, function = function)
            is CreateChatInviteLink -> return serialize(requestId = requestId, function = function)
            is CreateChatSubscriptionInviteLink -> return serialize(requestId = requestId, function = function)
            is CreateForumTopic -> return serialize(requestId = requestId, function = function)
            is CreateGroupCall -> return serialize(requestId = requestId, function = function)
            is CreateInvoiceLink -> return serialize(requestId = requestId, function = function)
            is CreateNewBasicGroupChat -> return serialize(requestId = requestId, function = function)
            is CreateNewSecretChat -> return serialize(requestId = requestId, function = function)
            is CreateNewStickerSet -> return serialize(requestId = requestId, function = function)
            is CreateNewSupergroupChat -> return serialize(requestId = requestId, function = function)
            is CreatePrivateChat -> return serialize(requestId = requestId, function = function)
            is CreateSecretChat -> return serialize(requestId = requestId, function = function)
            is CreateSupergroupChat -> return serialize(requestId = requestId, function = function)
            is CreateTemporaryPassword -> return serialize(requestId = requestId, function = function)
            is CreateVideoChat -> return serialize(requestId = requestId, function = function)
            is DeclineGroupCallInvitation -> return serialize(requestId = requestId, function = function)
            is DecryptGroupCallData -> return serialize(requestId = requestId, function = function)
            is DeleteAccount -> return serialize(requestId = requestId, function = function)
            is DeleteAllCallMessages -> return serialize(requestId = requestId, function = function)
            is DeleteAllRevokedChatInviteLinks -> return serialize(requestId = requestId, function = function)
            is DeleteBotMediaPreviews -> return serialize(requestId = requestId, function = function)
            is DeleteBusinessChatLink -> return serialize(requestId = requestId, function = function)
            is DeleteBusinessConnectedBot -> return serialize(requestId = requestId, function = function)
            is DeleteBusinessMessages -> return serialize(requestId = requestId, function = function)
            is DeleteBusinessStory -> return serialize(requestId = requestId, function = function)
            is DeleteChat -> return serialize(requestId = requestId, function = function)
            is DeleteChatBackground -> return serialize(requestId = requestId, function = function)
            is DeleteChatFolder -> return serialize(requestId = requestId, function = function)
            is DeleteChatFolderInviteLink -> return serialize(requestId = requestId, function = function)
            is DeleteChatHistory -> return serialize(requestId = requestId, function = function)
            is DeleteChatMessagesByDate -> return serialize(requestId = requestId, function = function)
            is DeleteChatMessagesBySender -> return serialize(requestId = requestId, function = function)
            is DeleteChatReplyMarkup -> return serialize(requestId = requestId, function = function)
            is DeleteCommands -> return serialize(requestId = requestId, function = function)
            is DeleteDefaultBackground -> return serialize(requestId = requestId, function = function)
            is DeleteDirectMessagesChatTopicHistory -> return serialize(requestId = requestId, function = function)
            is DeleteDirectMessagesChatTopicMessagesByDate -> return serialize(requestId = requestId, function = function)
            is DeleteFile -> return serialize(requestId = requestId, function = function)
            is DeleteForumTopic -> return serialize(requestId = requestId, function = function)
            is DeleteLanguagePack -> return serialize(requestId = requestId, function = function)
            is DeleteMessages -> return serialize(requestId = requestId, function = function)
            is DeletePassportElement -> return serialize(requestId = requestId, function = function)
            is DeleteProfilePhoto -> return serialize(requestId = requestId, function = function)
            is DeleteQuickReplyShortcut -> return serialize(requestId = requestId, function = function)
            is DeleteQuickReplyShortcutMessages -> return serialize(requestId = requestId, function = function)
            is DeleteRevokedChatInviteLink -> return serialize(requestId = requestId, function = function)
            is DeleteSavedCredentials -> return serialize(requestId = requestId, function = function)
            is DeleteSavedMessagesTopicHistory -> return serialize(requestId = requestId, function = function)
            is DeleteSavedMessagesTopicMessagesByDate -> return serialize(requestId = requestId, function = function)
            is DeleteSavedOrderInfo -> return serialize(requestId = requestId, function = function)
            is DeleteStickerSet -> return serialize(requestId = requestId, function = function)
            is DeleteStory -> return serialize(requestId = requestId, function = function)
            is Destroy -> return serialize(requestId = requestId, function = function)
            is DisableAllSupergroupUsernames -> return serialize(requestId = requestId, function = function)
            is DisableProxy -> return serialize(requestId = requestId, function = function)
            is DiscardCall -> return serialize(requestId = requestId, function = function)
            is DisconnectAffiliateProgram -> return serialize(requestId = requestId, function = function)
            is DisconnectAllWebsites -> return serialize(requestId = requestId, function = function)
            is DisconnectWebsite -> return serialize(requestId = requestId, function = function)
            is DownloadFile -> return serialize(requestId = requestId, function = function)
            is EditBotMediaPreview -> return serialize(requestId = requestId, function = function)
            is EditBusinessChatLink -> return serialize(requestId = requestId, function = function)
            is EditBusinessMessageCaption -> return serialize(requestId = requestId, function = function)
            is EditBusinessMessageChecklist -> return serialize(requestId = requestId, function = function)
            is EditBusinessMessageLiveLocation -> return serialize(requestId = requestId, function = function)
            is EditBusinessMessageMedia -> return serialize(requestId = requestId, function = function)
            is EditBusinessMessageReplyMarkup -> return serialize(requestId = requestId, function = function)
            is EditBusinessMessageText -> return serialize(requestId = requestId, function = function)
            is EditBusinessStory -> return serialize(requestId = requestId, function = function)
            is EditChatFolder -> return serialize(requestId = requestId, function = function)
            is EditChatFolderInviteLink -> return serialize(requestId = requestId, function = function)
            is EditChatInviteLink -> return serialize(requestId = requestId, function = function)
            is EditChatSubscriptionInviteLink -> return serialize(requestId = requestId, function = function)
            is EditCustomLanguagePackInfo -> return serialize(requestId = requestId, function = function)
            is EditForumTopic -> return serialize(requestId = requestId, function = function)
            is EditInlineMessageCaption -> return serialize(requestId = requestId, function = function)
            is EditInlineMessageLiveLocation -> return serialize(requestId = requestId, function = function)
            is EditInlineMessageMedia -> return serialize(requestId = requestId, function = function)
            is EditInlineMessageReplyMarkup -> return serialize(requestId = requestId, function = function)
            is EditInlineMessageText -> return serialize(requestId = requestId, function = function)
            is EditMessageCaption -> return serialize(requestId = requestId, function = function)
            is EditMessageChecklist -> return serialize(requestId = requestId, function = function)
            is EditMessageLiveLocation -> return serialize(requestId = requestId, function = function)
            is EditMessageMedia -> return serialize(requestId = requestId, function = function)
            is EditMessageReplyMarkup -> return serialize(requestId = requestId, function = function)
            is EditMessageSchedulingState -> return serialize(requestId = requestId, function = function)
            is EditMessageText -> return serialize(requestId = requestId, function = function)
            is EditProxy -> return serialize(requestId = requestId, function = function)
            is EditQuickReplyMessage -> return serialize(requestId = requestId, function = function)
            is EditStarSubscription -> return serialize(requestId = requestId, function = function)
            is EditStory -> return serialize(requestId = requestId, function = function)
            is EditStoryCover -> return serialize(requestId = requestId, function = function)
            is EditUserStarSubscription -> return serialize(requestId = requestId, function = function)
            is EnableProxy -> return serialize(requestId = requestId, function = function)
            is EncryptGroupCallData -> return serialize(requestId = requestId, function = function)
            is EndGroupCall -> return serialize(requestId = requestId, function = function)
            is EndGroupCallRecording -> return serialize(requestId = requestId, function = function)
            is EndGroupCallScreenSharing -> return serialize(requestId = requestId, function = function)
            is FinishFileGeneration -> return serialize(requestId = requestId, function = function)
            is ForwardMessages -> return serialize(requestId = requestId, function = function)
            is GetAccountTtl -> return serialize(requestId = requestId, function = function)
            is GetActiveSessions -> return serialize(requestId = requestId, function = function)
            is GetAllPassportElements -> return serialize(requestId = requestId, function = function)
            is GetAllStickerEmojis -> return serialize(requestId = requestId, function = function)
            is GetAnimatedEmoji -> return serialize(requestId = requestId, function = function)
            is GetApplicationConfig -> return serialize(requestId = requestId, function = function)
            is GetApplicationDownloadLink -> return serialize(requestId = requestId, function = function)
            is GetArchiveChatListSettings -> return serialize(requestId = requestId, function = function)
            is GetArchivedStickerSets -> return serialize(requestId = requestId, function = function)
            is GetAttachedStickerSets -> return serialize(requestId = requestId, function = function)
            is GetAttachmentMenuBot -> return serialize(requestId = requestId, function = function)
            is GetAuthorizationState -> return serialize(requestId = requestId, function = function)
            is GetAutoDownloadSettingsPresets -> return serialize(requestId = requestId, function = function)
            is GetAutosaveSettings -> return serialize(requestId = requestId, function = function)
            is GetAvailableChatBoostSlots -> return serialize(requestId = requestId, function = function)
            is GetAvailableGifts -> return serialize(requestId = requestId, function = function)
            is GetBackgroundUrl -> return serialize(requestId = requestId, function = function)
            is GetBankCardInfo -> return serialize(requestId = requestId, function = function)
            is GetBasicGroup -> return serialize(requestId = requestId, function = function)
            is GetBasicGroupFullInfo -> return serialize(requestId = requestId, function = function)
            is GetBlockedMessageSenders -> return serialize(requestId = requestId, function = function)
            is GetBotInfoDescription -> return serialize(requestId = requestId, function = function)
            is GetBotInfoShortDescription -> return serialize(requestId = requestId, function = function)
            is GetBotMediaPreviewInfo -> return serialize(requestId = requestId, function = function)
            is GetBotMediaPreviews -> return serialize(requestId = requestId, function = function)
            is GetBotName -> return serialize(requestId = requestId, function = function)
            is GetBotSimilarBotCount -> return serialize(requestId = requestId, function = function)
            is GetBotSimilarBots -> return serialize(requestId = requestId, function = function)
            is GetBusinessAccountStarAmount -> return serialize(requestId = requestId, function = function)
            is GetBusinessChatLinkInfo -> return serialize(requestId = requestId, function = function)
            is GetBusinessChatLinks -> return serialize(requestId = requestId, function = function)
            is GetBusinessConnectedBot -> return serialize(requestId = requestId, function = function)
            is GetBusinessConnection -> return serialize(requestId = requestId, function = function)
            is GetBusinessFeatures -> return serialize(requestId = requestId, function = function)
            is GetCallbackQueryAnswer -> return serialize(requestId = requestId, function = function)
            is GetCallbackQueryMessage -> return serialize(requestId = requestId, function = function)
            is GetChat -> return serialize(requestId = requestId, function = function)
            is GetChatActiveStories -> return serialize(requestId = requestId, function = function)
            is GetChatAdministrators -> return serialize(requestId = requestId, function = function)
            is GetChatArchivedStories -> return serialize(requestId = requestId, function = function)
            is GetChatAvailableMessageSenders -> return serialize(requestId = requestId, function = function)
            is GetChatAvailablePaidMessageReactionSenders -> return serialize(requestId = requestId, function = function)
            is GetChatBoostFeatures -> return serialize(requestId = requestId, function = function)
            is GetChatBoostLevelFeatures -> return serialize(requestId = requestId, function = function)
            is GetChatBoostLink -> return serialize(requestId = requestId, function = function)
            is GetChatBoostLinkInfo -> return serialize(requestId = requestId, function = function)
            is GetChatBoostStatus -> return serialize(requestId = requestId, function = function)
            is GetChatBoosts -> return serialize(requestId = requestId, function = function)
            is GetChatEventLog -> return serialize(requestId = requestId, function = function)
            is GetChatFolder -> return serialize(requestId = requestId, function = function)
            is GetChatFolderChatCount -> return serialize(requestId = requestId, function = function)
            is GetChatFolderChatsToLeave -> return serialize(requestId = requestId, function = function)
            is GetChatFolderDefaultIconName -> return serialize(requestId = requestId, function = function)
            is GetChatFolderInviteLinks -> return serialize(requestId = requestId, function = function)
            is GetChatFolderNewChats -> return serialize(requestId = requestId, function = function)
            is GetChatHistory -> return serialize(requestId = requestId, function = function)
            is GetChatInviteLink -> return serialize(requestId = requestId, function = function)
            is GetChatInviteLinkCounts -> return serialize(requestId = requestId, function = function)
            is GetChatInviteLinkMembers -> return serialize(requestId = requestId, function = function)
            is GetChatInviteLinks -> return serialize(requestId = requestId, function = function)
            is GetChatJoinRequests -> return serialize(requestId = requestId, function = function)
            is GetChatListsToAddChat -> return serialize(requestId = requestId, function = function)
            is GetChatMember -> return serialize(requestId = requestId, function = function)
            is GetChatMessageByDate -> return serialize(requestId = requestId, function = function)
            is GetChatMessageCalendar -> return serialize(requestId = requestId, function = function)
            is GetChatMessageCount -> return serialize(requestId = requestId, function = function)
            is GetChatMessagePosition -> return serialize(requestId = requestId, function = function)
            is GetChatNotificationSettingsExceptions -> return serialize(requestId = requestId, function = function)
            is GetChatPinnedMessage -> return serialize(requestId = requestId, function = function)
            is GetChatPostedToChatPageStories -> return serialize(requestId = requestId, function = function)
            is GetChatRevenueStatistics -> return serialize(requestId = requestId, function = function)
            is GetChatRevenueTransactions -> return serialize(requestId = requestId, function = function)
            is GetChatRevenueWithdrawalUrl -> return serialize(requestId = requestId, function = function)
            is GetChatScheduledMessages -> return serialize(requestId = requestId, function = function)
            is GetChatSimilarChatCount -> return serialize(requestId = requestId, function = function)
            is GetChatSimilarChats -> return serialize(requestId = requestId, function = function)
            is GetChatSparseMessagePositions -> return serialize(requestId = requestId, function = function)
            is GetChatSponsoredMessages -> return serialize(requestId = requestId, function = function)
            is GetChatStatistics -> return serialize(requestId = requestId, function = function)
            is GetChatStoryInteractions -> return serialize(requestId = requestId, function = function)
            is GetChats -> return serialize(requestId = requestId, function = function)
            is GetChatsForChatFolderInviteLink -> return serialize(requestId = requestId, function = function)
            is GetChatsToPostStories -> return serialize(requestId = requestId, function = function)
            is GetCloseFriends -> return serialize(requestId = requestId, function = function)
            is GetCollectibleItemInfo -> return serialize(requestId = requestId, function = function)
            is GetCommands -> return serialize(requestId = requestId, function = function)
            is GetConnectedAffiliateProgram -> return serialize(requestId = requestId, function = function)
            is GetConnectedAffiliatePrograms -> return serialize(requestId = requestId, function = function)
            is GetConnectedWebsites -> return serialize(requestId = requestId, function = function)
            is GetContacts -> return serialize(requestId = requestId, function = function)
            is GetCountries -> return serialize(requestId = requestId, function = function)
            is GetCountryCode -> return serialize(requestId = requestId, function = function)
            is GetCountryFlagEmoji -> return serialize(requestId = requestId, function = function)
            is GetCreatedPublicChats -> return serialize(requestId = requestId, function = function)
            is GetCurrentState -> return serialize(requestId = requestId, function = function)
            is GetCurrentWeather -> return serialize(requestId = requestId, function = function)
            is GetCustomEmojiReactionAnimations -> return serialize(requestId = requestId, function = function)
            is GetCustomEmojiStickers -> return serialize(requestId = requestId, function = function)
            is GetDatabaseStatistics -> return serialize(requestId = requestId, function = function)
            is GetDeepLinkInfo -> return serialize(requestId = requestId, function = function)
            is GetDefaultBackgroundCustomEmojiStickers -> return serialize(requestId = requestId, function = function)
            is GetDefaultChatEmojiStatuses -> return serialize(requestId = requestId, function = function)
            is GetDefaultChatPhotoCustomEmojiStickers -> return serialize(requestId = requestId, function = function)
            is GetDefaultEmojiStatuses -> return serialize(requestId = requestId, function = function)
            is GetDefaultMessageAutoDeleteTime -> return serialize(requestId = requestId, function = function)
            is GetDefaultProfilePhotoCustomEmojiStickers -> return serialize(requestId = requestId, function = function)
            is GetDirectMessagesChatTopic -> return serialize(requestId = requestId, function = function)
            is GetDirectMessagesChatTopicHistory -> return serialize(requestId = requestId, function = function)
            is GetDirectMessagesChatTopicMessageByDate -> return serialize(requestId = requestId, function = function)
            is GetDirectMessagesChatTopicRevenue -> return serialize(requestId = requestId, function = function)
            is GetDisallowedChatEmojiStatuses -> return serialize(requestId = requestId, function = function)
            is GetEmojiCategories -> return serialize(requestId = requestId, function = function)
            is GetEmojiReaction -> return serialize(requestId = requestId, function = function)
            is GetEmojiSuggestionsUrl -> return serialize(requestId = requestId, function = function)
            is GetExternalLink -> return serialize(requestId = requestId, function = function)
            is GetExternalLinkInfo -> return serialize(requestId = requestId, function = function)
            is GetFavoriteStickers -> return serialize(requestId = requestId, function = function)
            is GetFile -> return serialize(requestId = requestId, function = function)
            is GetFileDownloadedPrefixSize -> return serialize(requestId = requestId, function = function)
            is GetFileExtension -> return serialize(requestId = requestId, function = function)
            is GetFileMimeType -> return serialize(requestId = requestId, function = function)
            is GetForumTopic -> return serialize(requestId = requestId, function = function)
            is GetForumTopicDefaultIcons -> return serialize(requestId = requestId, function = function)
            is GetForumTopicLink -> return serialize(requestId = requestId, function = function)
            is GetForumTopics -> return serialize(requestId = requestId, function = function)
            is GetGameHighScores -> return serialize(requestId = requestId, function = function)
            is GetGiftUpgradePreview -> return serialize(requestId = requestId, function = function)
            is GetGiveawayInfo -> return serialize(requestId = requestId, function = function)
            is GetGreetingStickers -> return serialize(requestId = requestId, function = function)
            is GetGrossingWebAppBots -> return serialize(requestId = requestId, function = function)
            is GetGroupCall -> return serialize(requestId = requestId, function = function)
            is GetGroupCallParticipants -> return serialize(requestId = requestId, function = function)
            is GetGroupsInCommon -> return serialize(requestId = requestId, function = function)
            is GetImportedContactCount -> return serialize(requestId = requestId, function = function)
            is GetInactiveSupergroupChats -> return serialize(requestId = requestId, function = function)
            is GetInlineGameHighScores -> return serialize(requestId = requestId, function = function)
            is GetInlineQueryResults -> return serialize(requestId = requestId, function = function)
            is GetInstalledBackgrounds -> return serialize(requestId = requestId, function = function)
            is GetInstalledStickerSets -> return serialize(requestId = requestId, function = function)
            is GetInternalLink -> return serialize(requestId = requestId, function = function)
            is GetInternalLinkType -> return serialize(requestId = requestId, function = function)
            is GetJsonString -> return serialize(requestId = requestId, function = function)
            is GetJsonValue -> return serialize(requestId = requestId, function = function)
            is GetKeywordEmojis -> return serialize(requestId = requestId, function = function)
            is GetLanguagePackInfo -> return serialize(requestId = requestId, function = function)
            is GetLanguagePackString -> return serialize(requestId = requestId, function = function)
            is GetLanguagePackStrings -> return serialize(requestId = requestId, function = function)
            is GetLinkPreview -> return serialize(requestId = requestId, function = function)
            is GetLocalizationTargetInfo -> return serialize(requestId = requestId, function = function)
            is GetLogStream -> return serialize(requestId = requestId, function = function)
            is GetLogTagVerbosityLevel -> return serialize(requestId = requestId, function = function)
            is GetLogTags -> return serialize(requestId = requestId, function = function)
            is GetLogVerbosityLevel -> return serialize(requestId = requestId, function = function)
            is GetLoginUrl -> return serialize(requestId = requestId, function = function)
            is GetLoginUrlInfo -> return serialize(requestId = requestId, function = function)
            is GetMainWebApp -> return serialize(requestId = requestId, function = function)
            is GetMapThumbnailFile -> return serialize(requestId = requestId, function = function)
            is GetMarkdownText -> return serialize(requestId = requestId, function = function)
            is GetMe -> return serialize(requestId = requestId, function = function)
            is GetMenuButton -> return serialize(requestId = requestId, function = function)
            is GetMessage -> return serialize(requestId = requestId, function = function)
            is GetMessageAddedReactions -> return serialize(requestId = requestId, function = function)
            is GetMessageAuthor -> return serialize(requestId = requestId, function = function)
            is GetMessageAvailableReactions -> return serialize(requestId = requestId, function = function)
            is GetMessageEffect -> return serialize(requestId = requestId, function = function)
            is GetMessageEmbeddingCode -> return serialize(requestId = requestId, function = function)
            is GetMessageFileType -> return serialize(requestId = requestId, function = function)
            is GetMessageImportConfirmationText -> return serialize(requestId = requestId, function = function)
            is GetMessageLink -> return serialize(requestId = requestId, function = function)
            is GetMessageLinkInfo -> return serialize(requestId = requestId, function = function)
            is GetMessageLocally -> return serialize(requestId = requestId, function = function)
            is GetMessageProperties -> return serialize(requestId = requestId, function = function)
            is GetMessagePublicForwards -> return serialize(requestId = requestId, function = function)
            is GetMessageReadDate -> return serialize(requestId = requestId, function = function)
            is GetMessageStatistics -> return serialize(requestId = requestId, function = function)
            is GetMessageThread -> return serialize(requestId = requestId, function = function)
            is GetMessageThreadHistory -> return serialize(requestId = requestId, function = function)
            is GetMessageViewers -> return serialize(requestId = requestId, function = function)
            is GetMessages -> return serialize(requestId = requestId, function = function)
            is GetNetworkStatistics -> return serialize(requestId = requestId, function = function)
            is GetNewChatPrivacySettings -> return serialize(requestId = requestId, function = function)
            is GetOption -> return serialize(requestId = requestId, function = function)
            is GetOwnedBots -> return serialize(requestId = requestId, function = function)
            is GetOwnedStickerSets -> return serialize(requestId = requestId, function = function)
            is GetPaidMessageRevenue -> return serialize(requestId = requestId, function = function)
            is GetPassportAuthorizationForm -> return serialize(requestId = requestId, function = function)
            is GetPassportAuthorizationFormAvailableElements -> return serialize(requestId = requestId, function = function)
            is GetPassportElement -> return serialize(requestId = requestId, function = function)
            is GetPasswordState -> return serialize(requestId = requestId, function = function)
            is GetPaymentForm -> return serialize(requestId = requestId, function = function)
            is GetPaymentReceipt -> return serialize(requestId = requestId, function = function)
            is GetPhoneNumberInfo -> return serialize(requestId = requestId, function = function)
            is GetPhoneNumberInfoSync -> return serialize(requestId = requestId, function = function)
            is GetPollVoters -> return serialize(requestId = requestId, function = function)
            is GetPreferredCountryLanguage -> return serialize(requestId = requestId, function = function)
            is GetPremiumFeatures -> return serialize(requestId = requestId, function = function)
            is GetPremiumGiftPaymentOptions -> return serialize(requestId = requestId, function = function)
            is GetPremiumGiveawayPaymentOptions -> return serialize(requestId = requestId, function = function)
            is GetPremiumInfoSticker -> return serialize(requestId = requestId, function = function)
            is GetPremiumLimit -> return serialize(requestId = requestId, function = function)
            is GetPremiumState -> return serialize(requestId = requestId, function = function)
            is GetPremiumStickerExamples -> return serialize(requestId = requestId, function = function)
            is GetPremiumStickers -> return serialize(requestId = requestId, function = function)
            is GetPreparedInlineMessage -> return serialize(requestId = requestId, function = function)
            is GetProxies -> return serialize(requestId = requestId, function = function)
            is GetProxyLink -> return serialize(requestId = requestId, function = function)
            is GetPushReceiverId -> return serialize(requestId = requestId, function = function)
            is GetReadDatePrivacySettings -> return serialize(requestId = requestId, function = function)
            is GetReceivedGift -> return serialize(requestId = requestId, function = function)
            is GetReceivedGifts -> return serialize(requestId = requestId, function = function)
            is GetRecentEmojiStatuses -> return serialize(requestId = requestId, function = function)
            is GetRecentInlineBots -> return serialize(requestId = requestId, function = function)
            is GetRecentStickers -> return serialize(requestId = requestId, function = function)
            is GetRecentlyOpenedChats -> return serialize(requestId = requestId, function = function)
            is GetRecentlyVisitedTMeUrls -> return serialize(requestId = requestId, function = function)
            is GetRecommendedChatFolders -> return serialize(requestId = requestId, function = function)
            is GetRecommendedChats -> return serialize(requestId = requestId, function = function)
            is GetRecoveryEmailAddress -> return serialize(requestId = requestId, function = function)
            is GetRemoteFile -> return serialize(requestId = requestId, function = function)
            is GetRepliedMessage -> return serialize(requestId = requestId, function = function)
            is GetSavedAnimations -> return serialize(requestId = requestId, function = function)
            is GetSavedMessagesTags -> return serialize(requestId = requestId, function = function)
            is GetSavedMessagesTopicHistory -> return serialize(requestId = requestId, function = function)
            is GetSavedMessagesTopicMessageByDate -> return serialize(requestId = requestId, function = function)
            is GetSavedNotificationSound -> return serialize(requestId = requestId, function = function)
            is GetSavedNotificationSounds -> return serialize(requestId = requestId, function = function)
            is GetSavedOrderInfo -> return serialize(requestId = requestId, function = function)
            is GetScopeNotificationSettings -> return serialize(requestId = requestId, function = function)
            is GetSearchSponsoredChats -> return serialize(requestId = requestId, function = function)
            is GetSearchedForTags -> return serialize(requestId = requestId, function = function)
            is GetSecretChat -> return serialize(requestId = requestId, function = function)
            is GetStarAdAccountUrl -> return serialize(requestId = requestId, function = function)
            is GetStarGiftPaymentOptions -> return serialize(requestId = requestId, function = function)
            is GetStarGiveawayPaymentOptions -> return serialize(requestId = requestId, function = function)
            is GetStarPaymentOptions -> return serialize(requestId = requestId, function = function)
            is GetStarRevenueStatistics -> return serialize(requestId = requestId, function = function)
            is GetStarSubscriptions -> return serialize(requestId = requestId, function = function)
            is GetStarTransactions -> return serialize(requestId = requestId, function = function)
            is GetStarWithdrawalUrl -> return serialize(requestId = requestId, function = function)
            is GetStatisticalGraph -> return serialize(requestId = requestId, function = function)
            is GetStickerEmojis -> return serialize(requestId = requestId, function = function)
            is GetStickerOutline -> return serialize(requestId = requestId, function = function)
            is GetStickerSet -> return serialize(requestId = requestId, function = function)
            is GetStickerSetName -> return serialize(requestId = requestId, function = function)
            is GetStickers -> return serialize(requestId = requestId, function = function)
            is GetStorageStatistics -> return serialize(requestId = requestId, function = function)
            is GetStorageStatisticsFast -> return serialize(requestId = requestId, function = function)
            is GetStory -> return serialize(requestId = requestId, function = function)
            is GetStoryAvailableReactions -> return serialize(requestId = requestId, function = function)
            is GetStoryInteractions -> return serialize(requestId = requestId, function = function)
            is GetStoryNotificationSettingsExceptions -> return serialize(requestId = requestId, function = function)
            is GetStoryPublicForwards -> return serialize(requestId = requestId, function = function)
            is GetStoryStatistics -> return serialize(requestId = requestId, function = function)
            is GetSuggestedFileName -> return serialize(requestId = requestId, function = function)
            is GetSuggestedStickerSetName -> return serialize(requestId = requestId, function = function)
            is GetSuitableDiscussionChats -> return serialize(requestId = requestId, function = function)
            is GetSuitablePersonalChats -> return serialize(requestId = requestId, function = function)
            is GetSupergroup -> return serialize(requestId = requestId, function = function)
            is GetSupergroupFullInfo -> return serialize(requestId = requestId, function = function)
            is GetSupergroupMembers -> return serialize(requestId = requestId, function = function)
            is GetSupportName -> return serialize(requestId = requestId, function = function)
            is GetSupportUser -> return serialize(requestId = requestId, function = function)
            is GetTemporaryPasswordState -> return serialize(requestId = requestId, function = function)
            is GetTextEntities -> return serialize(requestId = requestId, function = function)
            is GetThemeParametersJsonString -> return serialize(requestId = requestId, function = function)
            is GetThemedChatEmojiStatuses -> return serialize(requestId = requestId, function = function)
            is GetThemedEmojiStatuses -> return serialize(requestId = requestId, function = function)
            is GetTimeZones -> return serialize(requestId = requestId, function = function)
            is GetTopChats -> return serialize(requestId = requestId, function = function)
            is GetTrendingStickerSets -> return serialize(requestId = requestId, function = function)
            is GetUpgradedGift -> return serialize(requestId = requestId, function = function)
            is GetUpgradedGiftEmojiStatuses -> return serialize(requestId = requestId, function = function)
            is GetUpgradedGiftWithdrawalUrl -> return serialize(requestId = requestId, function = function)
            is GetUser -> return serialize(requestId = requestId, function = function)
            is GetUserChatBoosts -> return serialize(requestId = requestId, function = function)
            is GetUserFullInfo -> return serialize(requestId = requestId, function = function)
            is GetUserLink -> return serialize(requestId = requestId, function = function)
            is GetUserPrivacySettingRules -> return serialize(requestId = requestId, function = function)
            is GetUserProfilePhotos -> return serialize(requestId = requestId, function = function)
            is GetUserSupportInfo -> return serialize(requestId = requestId, function = function)
            is GetVideoChatAvailableParticipants -> return serialize(requestId = requestId, function = function)
            is GetVideoChatInviteLink -> return serialize(requestId = requestId, function = function)
            is GetVideoChatRtmpUrl -> return serialize(requestId = requestId, function = function)
            is GetVideoChatStreamSegment -> return serialize(requestId = requestId, function = function)
            is GetVideoChatStreams -> return serialize(requestId = requestId, function = function)
            is GetVideoMessageAdvertisements -> return serialize(requestId = requestId, function = function)
            is GetWebAppLinkUrl -> return serialize(requestId = requestId, function = function)
            is GetWebAppPlaceholder -> return serialize(requestId = requestId, function = function)
            is GetWebAppUrl -> return serialize(requestId = requestId, function = function)
            is GetWebPageInstantView -> return serialize(requestId = requestId, function = function)
            is GiftPremiumWithStars -> return serialize(requestId = requestId, function = function)
            is HideContactCloseBirthdays -> return serialize(requestId = requestId, function = function)
            is HideSuggestedAction -> return serialize(requestId = requestId, function = function)
            is ImportContacts -> return serialize(requestId = requestId, function = function)
            is ImportMessages -> return serialize(requestId = requestId, function = function)
            is InviteGroupCallParticipant -> return serialize(requestId = requestId, function = function)
            is InviteVideoChatParticipants -> return serialize(requestId = requestId, function = function)
            is JoinChat -> return serialize(requestId = requestId, function = function)
            is JoinChatByInviteLink -> return serialize(requestId = requestId, function = function)
            is JoinGroupCall -> return serialize(requestId = requestId, function = function)
            is JoinVideoChat -> return serialize(requestId = requestId, function = function)
            is LaunchPrepaidGiveaway -> return serialize(requestId = requestId, function = function)
            is LeaveChat -> return serialize(requestId = requestId, function = function)
            is LeaveGroupCall -> return serialize(requestId = requestId, function = function)
            is LoadActiveStories -> return serialize(requestId = requestId, function = function)
            is LoadChats -> return serialize(requestId = requestId, function = function)
            is LoadDirectMessagesChatTopics -> return serialize(requestId = requestId, function = function)
            is LoadGroupCallParticipants -> return serialize(requestId = requestId, function = function)
            is LoadQuickReplyShortcutMessages -> return serialize(requestId = requestId, function = function)
            is LoadQuickReplyShortcuts -> return serialize(requestId = requestId, function = function)
            is LoadSavedMessagesTopics -> return serialize(requestId = requestId, function = function)
            is LogOut -> return serialize(requestId = requestId, function = function)
            is MarkChecklistTasksAsDone -> return serialize(requestId = requestId, function = function)
            is OpenBotSimilarBot -> return serialize(requestId = requestId, function = function)
            is OpenChat -> return serialize(requestId = requestId, function = function)
            is OpenChatSimilarChat -> return serialize(requestId = requestId, function = function)
            is OpenMessageContent -> return serialize(requestId = requestId, function = function)
            is OpenSponsoredChat -> return serialize(requestId = requestId, function = function)
            is OpenStory -> return serialize(requestId = requestId, function = function)
            is OpenWebApp -> return serialize(requestId = requestId, function = function)
            is OptimizeStorage -> return serialize(requestId = requestId, function = function)
            is ParseMarkdown -> return serialize(requestId = requestId, function = function)
            is ParseTextEntities -> return serialize(requestId = requestId, function = function)
            is PinChatMessage -> return serialize(requestId = requestId, function = function)
            is PingProxy -> return serialize(requestId = requestId, function = function)
            is PostStory -> return serialize(requestId = requestId, function = function)
            is PreliminaryUploadFile -> return serialize(requestId = requestId, function = function)
            is ProcessChatFolderNewChats -> return serialize(requestId = requestId, function = function)
            is ProcessChatJoinRequest -> return serialize(requestId = requestId, function = function)
            is ProcessChatJoinRequests -> return serialize(requestId = requestId, function = function)
            is ProcessPushNotification -> return serialize(requestId = requestId, function = function)
            is RateSpeechRecognition -> return serialize(requestId = requestId, function = function)
            is ReadAllChatMentions -> return serialize(requestId = requestId, function = function)
            is ReadAllChatReactions -> return serialize(requestId = requestId, function = function)
            is ReadAllDirectMessagesChatTopicReactions -> return serialize(requestId = requestId, function = function)
            is ReadAllMessageThreadMentions -> return serialize(requestId = requestId, function = function)
            is ReadAllMessageThreadReactions -> return serialize(requestId = requestId, function = function)
            is ReadBusinessMessage -> return serialize(requestId = requestId, function = function)
            is ReadChatList -> return serialize(requestId = requestId, function = function)
            is ReadFilePart -> return serialize(requestId = requestId, function = function)
            is ReaddQuickReplyShortcutMessages -> return serialize(requestId = requestId, function = function)
            is RecognizeSpeech -> return serialize(requestId = requestId, function = function)
            is RecoverAuthenticationPassword -> return serialize(requestId = requestId, function = function)
            is RecoverPassword -> return serialize(requestId = requestId, function = function)
            is RefundStarPayment -> return serialize(requestId = requestId, function = function)
            is RegisterDevice -> return serialize(requestId = requestId, function = function)
            is RegisterUser -> return serialize(requestId = requestId, function = function)
            is RemoveAllFilesFromDownloads -> return serialize(requestId = requestId, function = function)
            is RemoveBusinessConnectedBotFromChat -> return serialize(requestId = requestId, function = function)
            is RemoveChatActionBar -> return serialize(requestId = requestId, function = function)
            is RemoveContacts -> return serialize(requestId = requestId, function = function)
            is RemoveFavoriteSticker -> return serialize(requestId = requestId, function = function)
            is RemoveFileFromDownloads -> return serialize(requestId = requestId, function = function)
            is RemoveInstalledBackground -> return serialize(requestId = requestId, function = function)
            is RemoveMessageReaction -> return serialize(requestId = requestId, function = function)
            is RemoveMessageSenderBotVerification -> return serialize(requestId = requestId, function = function)
            is RemoveNotification -> return serialize(requestId = requestId, function = function)
            is RemoveNotificationGroup -> return serialize(requestId = requestId, function = function)
            is RemovePendingPaidMessageReactions -> return serialize(requestId = requestId, function = function)
            is RemoveProxy -> return serialize(requestId = requestId, function = function)
            is RemoveRecentHashtag -> return serialize(requestId = requestId, function = function)
            is RemoveRecentSticker -> return serialize(requestId = requestId, function = function)
            is RemoveRecentlyFoundChat -> return serialize(requestId = requestId, function = function)
            is RemoveSavedAnimation -> return serialize(requestId = requestId, function = function)
            is RemoveSavedNotificationSound -> return serialize(requestId = requestId, function = function)
            is RemoveSearchedForTag -> return serialize(requestId = requestId, function = function)
            is RemoveStickerFromSet -> return serialize(requestId = requestId, function = function)
            is RemoveTopChat -> return serialize(requestId = requestId, function = function)
            is ReorderActiveUsernames -> return serialize(requestId = requestId, function = function)
            is ReorderBotActiveUsernames -> return serialize(requestId = requestId, function = function)
            is ReorderBotMediaPreviews -> return serialize(requestId = requestId, function = function)
            is ReorderChatFolders -> return serialize(requestId = requestId, function = function)
            is ReorderInstalledStickerSets -> return serialize(requestId = requestId, function = function)
            is ReorderQuickReplyShortcuts -> return serialize(requestId = requestId, function = function)
            is ReorderSupergroupActiveUsernames -> return serialize(requestId = requestId, function = function)
            is ReplacePrimaryChatInviteLink -> return serialize(requestId = requestId, function = function)
            is ReplaceStickerInSet -> return serialize(requestId = requestId, function = function)
            is ReplaceVideoChatRtmpUrl -> return serialize(requestId = requestId, function = function)
            is ReportAuthenticationCodeMissing -> return serialize(requestId = requestId, function = function)
            is ReportChat -> return serialize(requestId = requestId, function = function)
            is ReportChatPhoto -> return serialize(requestId = requestId, function = function)
            is ReportChatSponsoredMessage -> return serialize(requestId = requestId, function = function)
            is ReportMessageReactions -> return serialize(requestId = requestId, function = function)
            is ReportPhoneNumberCodeMissing -> return serialize(requestId = requestId, function = function)
            is ReportSponsoredChat -> return serialize(requestId = requestId, function = function)
            is ReportStory -> return serialize(requestId = requestId, function = function)
            is ReportSupergroupAntiSpamFalsePositive -> return serialize(requestId = requestId, function = function)
            is ReportSupergroupSpam -> return serialize(requestId = requestId, function = function)
            is ReportVideoMessageAdvertisement -> return serialize(requestId = requestId, function = function)
            is RequestAuthenticationPasswordRecovery -> return serialize(requestId = requestId, function = function)
            is RequestPasswordRecovery -> return serialize(requestId = requestId, function = function)
            is RequestQrCodeAuthentication -> return serialize(requestId = requestId, function = function)
            is ResendAuthenticationCode -> return serialize(requestId = requestId, function = function)
            is ResendEmailAddressVerificationCode -> return serialize(requestId = requestId, function = function)
            is ResendLoginEmailAddressCode -> return serialize(requestId = requestId, function = function)
            is ResendMessages -> return serialize(requestId = requestId, function = function)
            is ResendPhoneNumberCode -> return serialize(requestId = requestId, function = function)
            is ResendRecoveryEmailAddressCode -> return serialize(requestId = requestId, function = function)
            is ResetAllNotificationSettings -> return serialize(requestId = requestId, function = function)
            is ResetAuthenticationEmailAddress -> return serialize(requestId = requestId, function = function)
            is ResetInstalledBackgrounds -> return serialize(requestId = requestId, function = function)
            is ResetNetworkStatistics -> return serialize(requestId = requestId, function = function)
            is ResetPassword -> return serialize(requestId = requestId, function = function)
            is ReuseStarSubscription -> return serialize(requestId = requestId, function = function)
            is RevokeChatInviteLink -> return serialize(requestId = requestId, function = function)
            is RevokeGroupCallInviteLink -> return serialize(requestId = requestId, function = function)
            is SaveApplicationLogEvent -> return serialize(requestId = requestId, function = function)
            is SavePreparedInlineMessage -> return serialize(requestId = requestId, function = function)
            is SearchAffiliatePrograms -> return serialize(requestId = requestId, function = function)
            is SearchBackground -> return serialize(requestId = requestId, function = function)
            is SearchCallMessages -> return serialize(requestId = requestId, function = function)
            is SearchChatAffiliateProgram -> return serialize(requestId = requestId, function = function)
            is SearchChatMembers -> return serialize(requestId = requestId, function = function)
            is SearchChatMessages -> return serialize(requestId = requestId, function = function)
            is SearchChatRecentLocationMessages -> return serialize(requestId = requestId, function = function)
            is SearchChats -> return serialize(requestId = requestId, function = function)
            is SearchChatsOnServer -> return serialize(requestId = requestId, function = function)
            is SearchContacts -> return serialize(requestId = requestId, function = function)
            is SearchEmojis -> return serialize(requestId = requestId, function = function)
            is SearchFileDownloads -> return serialize(requestId = requestId, function = function)
            is SearchGiftsForResale -> return serialize(requestId = requestId, function = function)
            is SearchHashtags -> return serialize(requestId = requestId, function = function)
            is SearchInstalledStickerSets -> return serialize(requestId = requestId, function = function)
            is SearchMessages -> return serialize(requestId = requestId, function = function)
            is SearchOutgoingDocumentMessages -> return serialize(requestId = requestId, function = function)
            is SearchPublicChat -> return serialize(requestId = requestId, function = function)
            is SearchPublicChats -> return serialize(requestId = requestId, function = function)
            is SearchPublicMessagesByTag -> return serialize(requestId = requestId, function = function)
            is SearchPublicStoriesByLocation -> return serialize(requestId = requestId, function = function)
            is SearchPublicStoriesByTag -> return serialize(requestId = requestId, function = function)
            is SearchPublicStoriesByVenue -> return serialize(requestId = requestId, function = function)
            is SearchQuote -> return serialize(requestId = requestId, function = function)
            is SearchRecentlyFoundChats -> return serialize(requestId = requestId, function = function)
            is SearchSavedMessages -> return serialize(requestId = requestId, function = function)
            is SearchSecretMessages -> return serialize(requestId = requestId, function = function)
            is SearchStickerSet -> return serialize(requestId = requestId, function = function)
            is SearchStickerSets -> return serialize(requestId = requestId, function = function)
            is SearchStickers -> return serialize(requestId = requestId, function = function)
            is SearchStringsByPrefix -> return serialize(requestId = requestId, function = function)
            is SearchUserByPhoneNumber -> return serialize(requestId = requestId, function = function)
            is SearchUserByToken -> return serialize(requestId = requestId, function = function)
            is SearchWebApp -> return serialize(requestId = requestId, function = function)
            is SellGift -> return serialize(requestId = requestId, function = function)
            is SendAuthenticationFirebaseSms -> return serialize(requestId = requestId, function = function)
            is SendBotStartMessage -> return serialize(requestId = requestId, function = function)
            is SendBusinessMessage -> return serialize(requestId = requestId, function = function)
            is SendBusinessMessageAlbum -> return serialize(requestId = requestId, function = function)
            is SendCallDebugInformation -> return serialize(requestId = requestId, function = function)
            is SendCallLog -> return serialize(requestId = requestId, function = function)
            is SendCallRating -> return serialize(requestId = requestId, function = function)
            is SendCallSignalingData -> return serialize(requestId = requestId, function = function)
            is SendChatAction -> return serialize(requestId = requestId, function = function)
            is SendCustomRequest -> return serialize(requestId = requestId, function = function)
            is SendEmailAddressVerificationCode -> return serialize(requestId = requestId, function = function)
            is SendGift -> return serialize(requestId = requestId, function = function)
            is SendInlineQueryResultMessage -> return serialize(requestId = requestId, function = function)
            is SendMessage -> return serialize(requestId = requestId, function = function)
            is SendMessageAlbum -> return serialize(requestId = requestId, function = function)
            is SendPassportAuthorizationForm -> return serialize(requestId = requestId, function = function)
            is SendPaymentForm -> return serialize(requestId = requestId, function = function)
            is SendPhoneNumberCode -> return serialize(requestId = requestId, function = function)
            is SendPhoneNumberFirebaseSms -> return serialize(requestId = requestId, function = function)
            is SendQuickReplyShortcutMessages -> return serialize(requestId = requestId, function = function)
            is SendResoldGift -> return serialize(requestId = requestId, function = function)
            is SendWebAppCustomRequest -> return serialize(requestId = requestId, function = function)
            is SendWebAppData -> return serialize(requestId = requestId, function = function)
            is SetAccentColor -> return serialize(requestId = requestId, function = function)
            is SetAccountTtl -> return serialize(requestId = requestId, function = function)
            is SetAlarm -> return serialize(requestId = requestId, function = function)
            is SetApplicationVerificationToken -> return serialize(requestId = requestId, function = function)
            is SetArchiveChatListSettings -> return serialize(requestId = requestId, function = function)
            is SetAuthenticationEmailAddress -> return serialize(requestId = requestId, function = function)
            is SetAuthenticationPhoneNumber -> return serialize(requestId = requestId, function = function)
            is SetAuthenticationPremiumPurchaseTransaction -> return serialize(requestId = requestId, function = function)
            is SetAutoDownloadSettings -> return serialize(requestId = requestId, function = function)
            is SetAutosaveSettings -> return serialize(requestId = requestId, function = function)
            is SetBio -> return serialize(requestId = requestId, function = function)
            is SetBirthdate -> return serialize(requestId = requestId, function = function)
            is SetBotInfoDescription -> return serialize(requestId = requestId, function = function)
            is SetBotInfoShortDescription -> return serialize(requestId = requestId, function = function)
            is SetBotName -> return serialize(requestId = requestId, function = function)
            is SetBotProfilePhoto -> return serialize(requestId = requestId, function = function)
            is SetBotUpdatesStatus -> return serialize(requestId = requestId, function = function)
            is SetBusinessAccountBio -> return serialize(requestId = requestId, function = function)
            is SetBusinessAccountGiftSettings -> return serialize(requestId = requestId, function = function)
            is SetBusinessAccountName -> return serialize(requestId = requestId, function = function)
            is SetBusinessAccountProfilePhoto -> return serialize(requestId = requestId, function = function)
            is SetBusinessAccountUsername -> return serialize(requestId = requestId, function = function)
            is SetBusinessAwayMessageSettings -> return serialize(requestId = requestId, function = function)
            is SetBusinessConnectedBot -> return serialize(requestId = requestId, function = function)
            is SetBusinessGreetingMessageSettings -> return serialize(requestId = requestId, function = function)
            is SetBusinessLocation -> return serialize(requestId = requestId, function = function)
            is SetBusinessMessageIsPinned -> return serialize(requestId = requestId, function = function)
            is SetBusinessOpeningHours -> return serialize(requestId = requestId, function = function)
            is SetBusinessStartPage -> return serialize(requestId = requestId, function = function)
            is SetChatAccentColor -> return serialize(requestId = requestId, function = function)
            is SetChatActiveStoriesList -> return serialize(requestId = requestId, function = function)
            is SetChatAffiliateProgram -> return serialize(requestId = requestId, function = function)
            is SetChatAvailableReactions -> return serialize(requestId = requestId, function = function)
            is SetChatBackground -> return serialize(requestId = requestId, function = function)
            is SetChatClientData -> return serialize(requestId = requestId, function = function)
            is SetChatDescription -> return serialize(requestId = requestId, function = function)
            is SetChatDirectMessagesGroup -> return serialize(requestId = requestId, function = function)
            is SetChatDiscussionGroup -> return serialize(requestId = requestId, function = function)
            is SetChatDraftMessage -> return serialize(requestId = requestId, function = function)
            is SetChatEmojiStatus -> return serialize(requestId = requestId, function = function)
            is SetChatLocation -> return serialize(requestId = requestId, function = function)
            is SetChatMemberStatus -> return serialize(requestId = requestId, function = function)
            is SetChatMessageAutoDeleteTime -> return serialize(requestId = requestId, function = function)
            is SetChatMessageSender -> return serialize(requestId = requestId, function = function)
            is SetChatNotificationSettings -> return serialize(requestId = requestId, function = function)
            is SetChatPaidMessageStarCount -> return serialize(requestId = requestId, function = function)
            is SetChatPermissions -> return serialize(requestId = requestId, function = function)
            is SetChatPhoto -> return serialize(requestId = requestId, function = function)
            is SetChatPinnedStories -> return serialize(requestId = requestId, function = function)
            is SetChatProfileAccentColor -> return serialize(requestId = requestId, function = function)
            is SetChatSlowModeDelay -> return serialize(requestId = requestId, function = function)
            is SetChatTheme -> return serialize(requestId = requestId, function = function)
            is SetChatTitle -> return serialize(requestId = requestId, function = function)
            is SetCloseFriends -> return serialize(requestId = requestId, function = function)
            is SetCommands -> return serialize(requestId = requestId, function = function)
            is SetCustomEmojiStickerSetThumbnail -> return serialize(requestId = requestId, function = function)
            is SetCustomLanguagePack -> return serialize(requestId = requestId, function = function)
            is SetCustomLanguagePackString -> return serialize(requestId = requestId, function = function)
            is SetDatabaseEncryptionKey -> return serialize(requestId = requestId, function = function)
            is SetDefaultBackground -> return serialize(requestId = requestId, function = function)
            is SetDefaultChannelAdministratorRights -> return serialize(requestId = requestId, function = function)
            is SetDefaultGroupAdministratorRights -> return serialize(requestId = requestId, function = function)
            is SetDefaultMessageAutoDeleteTime -> return serialize(requestId = requestId, function = function)
            is SetDefaultReactionType -> return serialize(requestId = requestId, function = function)
            is SetDirectMessagesChatTopicDraftMessage -> return serialize(requestId = requestId, function = function)
            is SetDirectMessagesChatTopicIsMarkedAsUnread -> return serialize(requestId = requestId, function = function)
            is SetEmojiStatus -> return serialize(requestId = requestId, function = function)
            is SetFileGenerationProgress -> return serialize(requestId = requestId, function = function)
            is SetForumTopicNotificationSettings -> return serialize(requestId = requestId, function = function)
            is SetGameScore -> return serialize(requestId = requestId, function = function)
            is SetGiftResalePrice -> return serialize(requestId = requestId, function = function)
            is SetGiftSettings -> return serialize(requestId = requestId, function = function)
            is SetGroupCallParticipantIsSpeaking -> return serialize(requestId = requestId, function = function)
            is SetGroupCallParticipantVolumeLevel -> return serialize(requestId = requestId, function = function)
            is SetInactiveSessionTtl -> return serialize(requestId = requestId, function = function)
            is SetInlineGameScore -> return serialize(requestId = requestId, function = function)
            is SetLogStream -> return serialize(requestId = requestId, function = function)
            is SetLogTagVerbosityLevel -> return serialize(requestId = requestId, function = function)
            is SetLogVerbosityLevel -> return serialize(requestId = requestId, function = function)
            is SetLoginEmailAddress -> return serialize(requestId = requestId, function = function)
            is SetMenuButton -> return serialize(requestId = requestId, function = function)
            is SetMessageFactCheck -> return serialize(requestId = requestId, function = function)
            is SetMessageReactions -> return serialize(requestId = requestId, function = function)
            is SetMessageSenderBlockList -> return serialize(requestId = requestId, function = function)
            is SetMessageSenderBotVerification -> return serialize(requestId = requestId, function = function)
            is SetName -> return serialize(requestId = requestId, function = function)
            is SetNetworkType -> return serialize(requestId = requestId, function = function)
            is SetNewChatPrivacySettings -> return serialize(requestId = requestId, function = function)
            is SetOption -> return serialize(requestId = requestId, function = function)
            is SetPaidMessageReactionType -> return serialize(requestId = requestId, function = function)
            is SetPassportElement -> return serialize(requestId = requestId, function = function)
            is SetPassportElementErrors -> return serialize(requestId = requestId, function = function)
            is SetPassword -> return serialize(requestId = requestId, function = function)
            is SetPersonalChat -> return serialize(requestId = requestId, function = function)
            is SetPinnedChats -> return serialize(requestId = requestId, function = function)
            is SetPinnedForumTopics -> return serialize(requestId = requestId, function = function)
            is SetPinnedGifts -> return serialize(requestId = requestId, function = function)
            is SetPinnedSavedMessagesTopics -> return serialize(requestId = requestId, function = function)
            is SetPollAnswer -> return serialize(requestId = requestId, function = function)
            is SetProfileAccentColor -> return serialize(requestId = requestId, function = function)
            is SetProfilePhoto -> return serialize(requestId = requestId, function = function)
            is SetQuickReplyShortcutName -> return serialize(requestId = requestId, function = function)
            is SetReactionNotificationSettings -> return serialize(requestId = requestId, function = function)
            is SetReadDatePrivacySettings -> return serialize(requestId = requestId, function = function)
            is SetRecoveryEmailAddress -> return serialize(requestId = requestId, function = function)
            is SetSavedMessagesTagLabel -> return serialize(requestId = requestId, function = function)
            is SetScopeNotificationSettings -> return serialize(requestId = requestId, function = function)
            is SetStickerEmojis -> return serialize(requestId = requestId, function = function)
            is SetStickerKeywords -> return serialize(requestId = requestId, function = function)
            is SetStickerMaskPosition -> return serialize(requestId = requestId, function = function)
            is SetStickerPositionInSet -> return serialize(requestId = requestId, function = function)
            is SetStickerSetThumbnail -> return serialize(requestId = requestId, function = function)
            is SetStickerSetTitle -> return serialize(requestId = requestId, function = function)
            is SetStoryPrivacySettings -> return serialize(requestId = requestId, function = function)
            is SetStoryReaction -> return serialize(requestId = requestId, function = function)
            is SetSupergroupCustomEmojiStickerSet -> return serialize(requestId = requestId, function = function)
            is SetSupergroupStickerSet -> return serialize(requestId = requestId, function = function)
            is SetSupergroupUnrestrictBoostCount -> return serialize(requestId = requestId, function = function)
            is SetSupergroupUsername -> return serialize(requestId = requestId, function = function)
            is SetTdlibParameters -> return serialize(requestId = requestId, function = function)
            is SetUserEmojiStatus -> return serialize(requestId = requestId, function = function)
            is SetUserPersonalProfilePhoto -> return serialize(requestId = requestId, function = function)
            is SetUserPrivacySettingRules -> return serialize(requestId = requestId, function = function)
            is SetUserSupportInfo -> return serialize(requestId = requestId, function = function)
            is SetUsername -> return serialize(requestId = requestId, function = function)
            is SetVideoChatDefaultParticipant -> return serialize(requestId = requestId, function = function)
            is SetVideoChatTitle -> return serialize(requestId = requestId, function = function)
            is ShareChatWithBot -> return serialize(requestId = requestId, function = function)
            is SharePhoneNumber -> return serialize(requestId = requestId, function = function)
            is ShareUsersWithBot -> return serialize(requestId = requestId, function = function)
            is StartGroupCallRecording -> return serialize(requestId = requestId, function = function)
            is StartGroupCallScreenSharing -> return serialize(requestId = requestId, function = function)
            is StartScheduledVideoChat -> return serialize(requestId = requestId, function = function)
            is StopBusinessPoll -> return serialize(requestId = requestId, function = function)
            is StopPoll -> return serialize(requestId = requestId, function = function)
            is SuggestUserProfilePhoto -> return serialize(requestId = requestId, function = function)
            is SynchronizeLanguagePack -> return serialize(requestId = requestId, function = function)
            is TerminateAllOtherSessions -> return serialize(requestId = requestId, function = function)
            is TerminateSession -> return serialize(requestId = requestId, function = function)
            is TestCallBytes -> return serialize(requestId = requestId, function = function)
            is TestCallEmpty -> return serialize(requestId = requestId, function = function)
            is TestCallString -> return serialize(requestId = requestId, function = function)
            is TestCallVectorInt -> return serialize(requestId = requestId, function = function)
            is TestCallVectorIntObject -> return serialize(requestId = requestId, function = function)
            is TestCallVectorString -> return serialize(requestId = requestId, function = function)
            is TestCallVectorStringObject -> return serialize(requestId = requestId, function = function)
            is TestGetDifference -> return serialize(requestId = requestId, function = function)
            is TestNetwork -> return serialize(requestId = requestId, function = function)
            is TestProxy -> return serialize(requestId = requestId, function = function)
            is TestReturnError -> return serialize(requestId = requestId, function = function)
            is TestSquareInt -> return serialize(requestId = requestId, function = function)
            is TestUseUpdate -> return serialize(requestId = requestId, function = function)
            is ToggleAllDownloadsArePaused -> return serialize(requestId = requestId, function = function)
            is ToggleBotCanManageEmojiStatus -> return serialize(requestId = requestId, function = function)
            is ToggleBotIsAddedToAttachmentMenu -> return serialize(requestId = requestId, function = function)
            is ToggleBotUsernameIsActive -> return serialize(requestId = requestId, function = function)
            is ToggleBusinessConnectedBotChatIsPaused -> return serialize(requestId = requestId, function = function)
            is ToggleChatDefaultDisableNotification -> return serialize(requestId = requestId, function = function)
            is ToggleChatFolderTags -> return serialize(requestId = requestId, function = function)
            is ToggleChatGiftNotifications -> return serialize(requestId = requestId, function = function)
            is ToggleChatHasProtectedContent -> return serialize(requestId = requestId, function = function)
            is ToggleChatIsMarkedAsUnread -> return serialize(requestId = requestId, function = function)
            is ToggleChatIsPinned -> return serialize(requestId = requestId, function = function)
            is ToggleChatIsTranslatable -> return serialize(requestId = requestId, function = function)
            is ToggleChatViewAsTopics -> return serialize(requestId = requestId, function = function)
            is ToggleDirectMessagesChatTopicCanSendUnpaidMessages -> return serialize(requestId = requestId, function = function)
            is ToggleDownloadIsPaused -> return serialize(requestId = requestId, function = function)
            is ToggleForumTopicIsClosed -> return serialize(requestId = requestId, function = function)
            is ToggleForumTopicIsPinned -> return serialize(requestId = requestId, function = function)
            is ToggleGeneralForumTopicIsHidden -> return serialize(requestId = requestId, function = function)
            is ToggleGiftIsSaved -> return serialize(requestId = requestId, function = function)
            is ToggleGroupCallIsMyVideoEnabled -> return serialize(requestId = requestId, function = function)
            is ToggleGroupCallIsMyVideoPaused -> return serialize(requestId = requestId, function = function)
            is ToggleGroupCallParticipantIsHandRaised -> return serialize(requestId = requestId, function = function)
            is ToggleGroupCallParticipantIsMuted -> return serialize(requestId = requestId, function = function)
            is ToggleGroupCallScreenSharingIsPaused -> return serialize(requestId = requestId, function = function)
            is ToggleHasSponsoredMessagesEnabled -> return serialize(requestId = requestId, function = function)
            is ToggleSavedMessagesTopicIsPinned -> return serialize(requestId = requestId, function = function)
            is ToggleSessionCanAcceptCalls -> return serialize(requestId = requestId, function = function)
            is ToggleSessionCanAcceptSecretChats -> return serialize(requestId = requestId, function = function)
            is ToggleStoryIsPostedToChatPage -> return serialize(requestId = requestId, function = function)
            is ToggleSupergroupCanHaveSponsoredMessages -> return serialize(requestId = requestId, function = function)
            is ToggleSupergroupHasAggressiveAntiSpamEnabled -> return serialize(requestId = requestId, function = function)
            is ToggleSupergroupHasAutomaticTranslation -> return serialize(requestId = requestId, function = function)
            is ToggleSupergroupHasHiddenMembers -> return serialize(requestId = requestId, function = function)
            is ToggleSupergroupIsAllHistoryAvailable -> return serialize(requestId = requestId, function = function)
            is ToggleSupergroupIsBroadcastGroup -> return serialize(requestId = requestId, function = function)
            is ToggleSupergroupIsForum -> return serialize(requestId = requestId, function = function)
            is ToggleSupergroupJoinByRequest -> return serialize(requestId = requestId, function = function)
            is ToggleSupergroupJoinToSendMessages -> return serialize(requestId = requestId, function = function)
            is ToggleSupergroupSignMessages -> return serialize(requestId = requestId, function = function)
            is ToggleSupergroupUsernameIsActive -> return serialize(requestId = requestId, function = function)
            is ToggleUsernameIsActive -> return serialize(requestId = requestId, function = function)
            is ToggleVideoChatEnabledStartNotification -> return serialize(requestId = requestId, function = function)
            is ToggleVideoChatMuteNewParticipants -> return serialize(requestId = requestId, function = function)
            is TransferBusinessAccountStars -> return serialize(requestId = requestId, function = function)
            is TransferChatOwnership -> return serialize(requestId = requestId, function = function)
            is TransferGift -> return serialize(requestId = requestId, function = function)
            is TranslateMessageText -> return serialize(requestId = requestId, function = function)
            is TranslateText -> return serialize(requestId = requestId, function = function)
            is UnpinAllChatMessages -> return serialize(requestId = requestId, function = function)
            is UnpinAllDirectMessagesChatTopicMessages -> return serialize(requestId = requestId, function = function)
            is UnpinAllMessageThreadMessages -> return serialize(requestId = requestId, function = function)
            is UnpinChatMessage -> return serialize(requestId = requestId, function = function)
            is UpgradeBasicGroupChatToSupergroupChat -> return serialize(requestId = requestId, function = function)
            is UpgradeGift -> return serialize(requestId = requestId, function = function)
            is UploadStickerFile -> return serialize(requestId = requestId, function = function)
            is ValidateOrderInfo -> return serialize(requestId = requestId, function = function)
            is ViewMessages -> return serialize(requestId = requestId, function = function)
            is ViewPremiumFeature -> return serialize(requestId = requestId, function = function)
            is ViewSponsoredChat -> return serialize(requestId = requestId, function = function)
            is ViewTrendingStickerSets -> return serialize(requestId = requestId, function = function)
            is ViewVideoMessageAdvertisement -> return serialize(requestId = requestId, function = function)
            is WriteGeneratedFilePart -> return serialize(requestId = requestId, function = function)
            else -> error(message = "Unknown function type: ${function::class}")
        }
    }

    private fun serialize(requestId: Long, function: AcceptCall): String {
        return buildJsonObjectString {
            put(key = "@type", string = "acceptCall")
            put(key = "@extra", long = requestId)
            put(key = "call_id", int = function.callId)
            put(key = "protocol", value = function.protocol) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AcceptTermsOfService): String {
        return buildJsonObjectString {
            put(key = "@type", string = "acceptTermsOfService")
            put(key = "@extra", long = requestId)
            put(key = "terms_of_service_id", string = function.termsOfServiceId)
        }
    }

    private fun serialize(requestId: Long, function: ActivateStoryStealthMode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "activateStoryStealthMode")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: AddBotMediaPreview): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addBotMediaPreview")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "language_code", string = function.languageCode)
            put(key = "content", value = function.content) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AddChatFolderByInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addChatFolderByInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "invite_link", string = function.inviteLink)
            put(key = "chat_ids", longs = function.chatIds)
        }
    }

    private fun serialize(requestId: Long, function: AddChatMember): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addChatMember")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "user_id", long = function.userId)
            put(key = "forward_limit", int = function.forwardLimit)
        }
    }

    private fun serialize(requestId: Long, function: AddChatMembers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addChatMembers")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "user_ids", longs = function.userIds)
        }
    }

    private fun serialize(requestId: Long, function: AddChatToList): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addChatToList")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "chat_list", value = function.chatList) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AddChecklistTasks): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addChecklistTasks")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "tasks", objects = function.tasks) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AddContact): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addContact")
            put(key = "@extra", long = requestId)
            put(key = "contact", value = function.contact) { data -> serialize(dto = data) }
            put(key = "share_phone_number", boolean = function.sharePhoneNumber)
        }
    }

    private fun serialize(requestId: Long, function: AddCustomServerLanguagePack): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addCustomServerLanguagePack")
            put(key = "@extra", long = requestId)
            put(key = "language_pack_id", string = function.languagePackId)
        }
    }

    private fun serialize(requestId: Long, function: AddFavoriteSticker): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addFavoriteSticker")
            put(key = "@extra", long = requestId)
            put(key = "sticker", value = function.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AddFileToDownloads): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addFileToDownloads")
            put(key = "@extra", long = requestId)
            put(key = "file_id", int = function.fileId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "priority", int = function.priority)
        }
    }

    private fun serialize(requestId: Long, function: AddLocalMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addLocalMessage")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "sender_id", value = function.senderId) { data -> serialize(dto = data) }
            put(key = "reply_to", value = function.replyTo) { data -> serialize(dto = data) }
            put(key = "disable_notification", boolean = function.disableNotification)
            put(key = "input_message_content", value = function.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AddLogMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addLogMessage")
            put(key = "@extra", long = requestId)
            put(key = "verbosity_level", int = function.verbosityLevel)
            put(key = "text", string = function.text)
        }
    }

    private fun serialize(requestId: Long, function: AddMessageReaction): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addMessageReaction")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reaction_type", value = function.reactionType) { data -> serialize(dto = data) }
            put(key = "is_big", boolean = function.isBig)
            put(key = "update_recent_reactions", boolean = function.updateRecentReactions)
        }
    }

    private fun serialize(requestId: Long, function: AddNetworkStatistics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addNetworkStatistics")
            put(key = "@extra", long = requestId)
            put(key = "entry", value = function.entry) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AddPendingPaidMessageReaction): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addPendingPaidMessageReaction")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "star_count", long = function.starCount)
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AddProxy): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addProxy")
            put(key = "@extra", long = requestId)
            put(key = "server", string = function.server)
            put(key = "port", int = function.port)
            put(key = "enable", boolean = function.enable)
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AddQuickReplyShortcutInlineQueryResultMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addQuickReplyShortcutInlineQueryResultMessage")
            put(key = "@extra", long = requestId)
            put(key = "shortcut_name", string = function.shortcutName)
            put(key = "reply_to_message_id", long = function.replyToMessageId)
            put(key = "query_id", long = function.queryId)
            put(key = "result_id", string = function.resultId)
            put(key = "hide_via_bot", boolean = function.hideViaBot)
        }
    }

    private fun serialize(requestId: Long, function: AddQuickReplyShortcutMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addQuickReplyShortcutMessage")
            put(key = "@extra", long = requestId)
            put(key = "shortcut_name", string = function.shortcutName)
            put(key = "reply_to_message_id", long = function.replyToMessageId)
            put(key = "input_message_content", value = function.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AddQuickReplyShortcutMessageAlbum): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addQuickReplyShortcutMessageAlbum")
            put(key = "@extra", long = requestId)
            put(key = "shortcut_name", string = function.shortcutName)
            put(key = "reply_to_message_id", long = function.replyToMessageId)
            put(key = "input_message_contents", objects = function.inputMessageContents) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AddRecentSticker): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addRecentSticker")
            put(key = "@extra", long = requestId)
            put(key = "is_attached", boolean = function.isAttached)
            put(key = "sticker", value = function.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AddRecentlyFoundChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addRecentlyFoundChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: AddSavedAnimation): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addSavedAnimation")
            put(key = "@extra", long = requestId)
            put(key = "animation", value = function.animation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AddSavedNotificationSound): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addSavedNotificationSound")
            put(key = "@extra", long = requestId)
            put(key = "sound", value = function.sound) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AddStickerToSet): String {
        return buildJsonObjectString {
            put(key = "@type", string = "addStickerToSet")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "name", string = function.name)
            put(key = "sticker", value = function.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: AllowBotToSendMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "allowBotToSendMessages")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
        }
    }

    private fun serialize(requestId: Long, function: AllowUnpaidMessagesFromUser): String {
        return buildJsonObjectString {
            put(key = "@type", string = "allowUnpaidMessagesFromUser")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "refund_payments", boolean = function.refundPayments)
        }
    }

    private fun serialize(requestId: Long, function: AnswerCallbackQuery): String {
        return buildJsonObjectString {
            put(key = "@type", string = "answerCallbackQuery")
            put(key = "@extra", long = requestId)
            put(key = "callback_query_id", long = function.callbackQueryId)
            put(key = "text", string = function.text)
            put(key = "show_alert", boolean = function.showAlert)
            put(key = "url", string = function.url)
            put(key = "cache_time", int = function.cacheTime)
        }
    }

    private fun serialize(requestId: Long, function: AnswerCustomQuery): String {
        return buildJsonObjectString {
            put(key = "@type", string = "answerCustomQuery")
            put(key = "@extra", long = requestId)
            put(key = "custom_query_id", long = function.customQueryId)
            put(key = "data", string = function.data)
        }
    }

    private fun serialize(requestId: Long, function: AnswerInlineQuery): String {
        return buildJsonObjectString {
            put(key = "@type", string = "answerInlineQuery")
            put(key = "@extra", long = requestId)
            put(key = "inline_query_id", long = function.inlineQueryId)
            put(key = "is_personal", boolean = function.isPersonal)
            put(key = "button", value = function.button) { data -> serialize(dto = data) }
            put(key = "results", objects = function.results) { data -> serialize(dto = data) }
            put(key = "cache_time", int = function.cacheTime)
            put(key = "next_offset", string = function.nextOffset)
        }
    }

    private fun serialize(requestId: Long, function: AnswerPreCheckoutQuery): String {
        return buildJsonObjectString {
            put(key = "@type", string = "answerPreCheckoutQuery")
            put(key = "@extra", long = requestId)
            put(key = "pre_checkout_query_id", long = function.preCheckoutQueryId)
            put(key = "error_message", string = function.errorMessage)
        }
    }

    private fun serialize(requestId: Long, function: AnswerShippingQuery): String {
        return buildJsonObjectString {
            put(key = "@type", string = "answerShippingQuery")
            put(key = "@extra", long = requestId)
            put(key = "shipping_query_id", long = function.shippingQueryId)
            put(key = "shipping_options", objects = function.shippingOptions) { data -> serialize(dto = data) }
            put(key = "error_message", string = function.errorMessage)
        }
    }

    private fun serialize(requestId: Long, function: AnswerWebAppQuery): String {
        return buildJsonObjectString {
            put(key = "@type", string = "answerWebAppQuery")
            put(key = "@extra", long = requestId)
            put(key = "web_app_query_id", string = function.webAppQueryId)
            put(key = "result", value = function.result) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: ApplyPremiumGiftCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "applyPremiumGiftCode")
            put(key = "@extra", long = requestId)
            put(key = "code", string = function.code)
        }
    }

    private fun serialize(requestId: Long, function: AssignStoreTransaction): String {
        return buildJsonObjectString {
            put(key = "@type", string = "assignStoreTransaction")
            put(key = "@extra", long = requestId)
            put(key = "transaction", value = function.transaction) { data -> serialize(dto = data) }
            put(key = "purpose", value = function.purpose) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: BanChatMember): String {
        return buildJsonObjectString {
            put(key = "@type", string = "banChatMember")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "member_id", value = function.memberId) { data -> serialize(dto = data) }
            put(key = "banned_until_date", int = function.bannedUntilDate)
            put(key = "revoke_messages", boolean = function.revokeMessages)
        }
    }

    private fun serialize(requestId: Long, function: BanGroupCallParticipants): String {
        return buildJsonObjectString {
            put(key = "@type", string = "banGroupCallParticipants")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "user_ids", longs = function.userIds)
        }
    }

    private fun serialize(requestId: Long, function: BlockMessageSenderFromReplies): String {
        return buildJsonObjectString {
            put(key = "@type", string = "blockMessageSenderFromReplies")
            put(key = "@extra", long = requestId)
            put(key = "message_id", long = function.messageId)
            put(key = "delete_message", boolean = function.deleteMessage)
            put(key = "delete_all_messages", boolean = function.deleteAllMessages)
            put(key = "report_spam", boolean = function.reportSpam)
        }
    }

    private fun serialize(requestId: Long, function: BoostChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "boostChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "slot_ids", ints = function.slotIds)
        }
    }

    private fun serialize(requestId: Long, function: CanBotSendMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "canBotSendMessages")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
        }
    }

    private fun serialize(requestId: Long, function: CanPostStory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "canPostStory")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: CanPurchaseFromStore): String {
        return buildJsonObjectString {
            put(key = "@type", string = "canPurchaseFromStore")
            put(key = "@extra", long = requestId)
            put(key = "purpose", value = function.purpose) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: CanSendMessageToUser): String {
        return buildJsonObjectString {
            put(key = "@type", string = "canSendMessageToUser")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "only_local", boolean = function.onlyLocal)
        }
    }

    private fun serialize(requestId: Long, function: CanTransferOwnership): String {
        return buildJsonObjectString {
            put(key = "@type", string = "canTransferOwnership")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: CancelDownloadFile): String {
        return buildJsonObjectString {
            put(key = "@type", string = "cancelDownloadFile")
            put(key = "@extra", long = requestId)
            put(key = "file_id", int = function.fileId)
            put(key = "only_if_pending", boolean = function.onlyIfPending)
        }
    }

    private fun serialize(requestId: Long, function: CancelPasswordReset): String {
        return buildJsonObjectString {
            put(key = "@type", string = "cancelPasswordReset")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: CancelPreliminaryUploadFile): String {
        return buildJsonObjectString {
            put(key = "@type", string = "cancelPreliminaryUploadFile")
            put(key = "@extra", long = requestId)
            put(key = "file_id", int = function.fileId)
        }
    }

    private fun serialize(requestId: Long, function: CancelRecoveryEmailAddressVerification): String {
        return buildJsonObjectString {
            put(key = "@type", string = "cancelRecoveryEmailAddressVerification")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ChangeImportedContacts): String {
        return buildJsonObjectString {
            put(key = "@type", string = "changeImportedContacts")
            put(key = "@extra", long = requestId)
            put(key = "contacts", objects = function.contacts) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: ChangeStickerSet): String {
        return buildJsonObjectString {
            put(key = "@type", string = "changeStickerSet")
            put(key = "@extra", long = requestId)
            put(key = "set_id", long = function.setId)
            put(key = "is_installed", boolean = function.isInstalled)
            put(key = "is_archived", boolean = function.isArchived)
        }
    }

    private fun serialize(requestId: Long, function: CheckAuthenticationBotToken): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkAuthenticationBotToken")
            put(key = "@extra", long = requestId)
            put(key = "token", string = function.token)
        }
    }

    private fun serialize(requestId: Long, function: CheckAuthenticationCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkAuthenticationCode")
            put(key = "@extra", long = requestId)
            put(key = "code", string = function.code)
        }
    }

    private fun serialize(requestId: Long, function: CheckAuthenticationEmailCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkAuthenticationEmailCode")
            put(key = "@extra", long = requestId)
            put(key = "code", value = function.code) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: CheckAuthenticationPassword): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkAuthenticationPassword")
            put(key = "@extra", long = requestId)
            put(key = "password", string = function.password)
        }
    }

    private fun serialize(requestId: Long, function: CheckAuthenticationPasswordRecoveryCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkAuthenticationPasswordRecoveryCode")
            put(key = "@extra", long = requestId)
            put(key = "recovery_code", string = function.recoveryCode)
        }
    }

    private fun serialize(requestId: Long, function: CheckAuthenticationPremiumPurchase): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkAuthenticationPremiumPurchase")
            put(key = "@extra", long = requestId)
            put(key = "currency", string = function.currency)
            put(key = "amount", long = function.amount)
        }
    }

    private fun serialize(requestId: Long, function: CheckChatFolderInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkChatFolderInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "invite_link", string = function.inviteLink)
        }
    }

    private fun serialize(requestId: Long, function: CheckChatInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkChatInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "invite_link", string = function.inviteLink)
        }
    }

    private fun serialize(requestId: Long, function: CheckChatUsername): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkChatUsername")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "username", string = function.username)
        }
    }

    private fun serialize(requestId: Long, function: CheckCreatedPublicChatsLimit): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkCreatedPublicChatsLimit")
            put(key = "@extra", long = requestId)
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: CheckEmailAddressVerificationCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkEmailAddressVerificationCode")
            put(key = "@extra", long = requestId)
            put(key = "code", string = function.code)
        }
    }

    private fun serialize(requestId: Long, function: CheckLoginEmailAddressCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkLoginEmailAddressCode")
            put(key = "@extra", long = requestId)
            put(key = "code", value = function.code) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: CheckPasswordRecoveryCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkPasswordRecoveryCode")
            put(key = "@extra", long = requestId)
            put(key = "recovery_code", string = function.recoveryCode)
        }
    }

    private fun serialize(requestId: Long, function: CheckPhoneNumberCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkPhoneNumberCode")
            put(key = "@extra", long = requestId)
            put(key = "code", string = function.code)
        }
    }

    private fun serialize(requestId: Long, function: CheckPremiumGiftCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkPremiumGiftCode")
            put(key = "@extra", long = requestId)
            put(key = "code", string = function.code)
        }
    }

    private fun serialize(requestId: Long, function: CheckQuickReplyShortcutName): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkQuickReplyShortcutName")
            put(key = "@extra", long = requestId)
            put(key = "name", string = function.name)
        }
    }

    private fun serialize(requestId: Long, function: CheckRecoveryEmailAddressCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkRecoveryEmailAddressCode")
            put(key = "@extra", long = requestId)
            put(key = "code", string = function.code)
        }
    }

    private fun serialize(requestId: Long, function: CheckStickerSetName): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkStickerSetName")
            put(key = "@extra", long = requestId)
            put(key = "name", string = function.name)
        }
    }

    private fun serialize(requestId: Long, function: CheckWebAppFileDownload): String {
        return buildJsonObjectString {
            put(key = "@type", string = "checkWebAppFileDownload")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "file_name", string = function.fileName)
            put(key = "url", string = function.url)
        }
    }

    private fun serialize(requestId: Long, function: CleanFileName): String {
        return buildJsonObjectString {
            put(key = "@type", string = "cleanFileName")
            put(key = "@extra", long = requestId)
            put(key = "file_name", string = function.fileName)
        }
    }

    private fun serialize(requestId: Long, function: ClearAllDraftMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "clearAllDraftMessages")
            put(key = "@extra", long = requestId)
            put(key = "exclude_secret_chats", boolean = function.excludeSecretChats)
        }
    }

    private fun serialize(requestId: Long, function: ClearAutosaveSettingsExceptions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "clearAutosaveSettingsExceptions")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ClearImportedContacts): String {
        return buildJsonObjectString {
            put(key = "@type", string = "clearImportedContacts")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ClearRecentEmojiStatuses): String {
        return buildJsonObjectString {
            put(key = "@type", string = "clearRecentEmojiStatuses")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ClearRecentReactions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "clearRecentReactions")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ClearRecentStickers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "clearRecentStickers")
            put(key = "@extra", long = requestId)
            put(key = "is_attached", boolean = function.isAttached)
        }
    }

    private fun serialize(requestId: Long, function: ClearRecentlyFoundChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "clearRecentlyFoundChats")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ClearSearchedForTags): String {
        return buildJsonObjectString {
            put(key = "@type", string = "clearSearchedForTags")
            put(key = "@extra", long = requestId)
            put(key = "clear_cashtags", boolean = function.clearCashtags)
        }
    }

    private fun serialize(requestId: Long, function: ClickAnimatedEmojiMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "clickAnimatedEmojiMessage")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: ClickChatSponsoredMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "clickChatSponsoredMessage")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "is_media_click", boolean = function.isMediaClick)
            put(key = "from_fullscreen", boolean = function.fromFullscreen)
        }
    }

    private fun serialize(requestId: Long, function: ClickPremiumSubscriptionButton): String {
        return buildJsonObjectString {
            put(key = "@type", string = "clickPremiumSubscriptionButton")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ClickVideoMessageAdvertisement): String {
        return buildJsonObjectString {
            put(key = "@type", string = "clickVideoMessageAdvertisement")
            put(key = "@extra", long = requestId)
            put(key = "advertisement_unique_id", long = function.advertisementUniqueId)
        }
    }

    private fun serialize(requestId: Long, function: Close): String {
        return buildJsonObjectString {
            put(key = "@type", string = "close")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: CloseChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "closeChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: CloseSecretChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "closeSecretChat")
            put(key = "@extra", long = requestId)
            put(key = "secret_chat_id", int = function.secretChatId)
        }
    }

    private fun serialize(requestId: Long, function: CloseStory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "closeStory")
            put(key = "@extra", long = requestId)
            put(key = "story_poster_chat_id", long = function.storyPosterChatId)
            put(key = "story_id", int = function.storyId)
        }
    }

    private fun serialize(requestId: Long, function: CloseWebApp): String {
        return buildJsonObjectString {
            put(key = "@type", string = "closeWebApp")
            put(key = "@extra", long = requestId)
            put(key = "web_app_launch_id", long = function.webAppLaunchId)
        }
    }

    private fun serialize(requestId: Long, function: CommitPendingPaidMessageReactions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "commitPendingPaidMessageReactions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: ConfirmQrCodeAuthentication): String {
        return buildJsonObjectString {
            put(key = "@type", string = "confirmQrCodeAuthentication")
            put(key = "@extra", long = requestId)
            put(key = "link", string = function.link)
        }
    }

    private fun serialize(requestId: Long, function: ConfirmSession): String {
        return buildJsonObjectString {
            put(key = "@type", string = "confirmSession")
            put(key = "@extra", long = requestId)
            put(key = "session_id", long = function.sessionId)
        }
    }

    private fun serialize(requestId: Long, function: ConnectAffiliateProgram): String {
        return buildJsonObjectString {
            put(key = "@type", string = "connectAffiliateProgram")
            put(key = "@extra", long = requestId)
            put(key = "affiliate", value = function.affiliate) { data -> serialize(dto = data) }
            put(key = "bot_user_id", long = function.botUserId)
        }
    }

    private fun serialize(requestId: Long, function: CreateBasicGroupChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createBasicGroupChat")
            put(key = "@extra", long = requestId)
            put(key = "basic_group_id", long = function.basicGroupId)
            put(key = "force", boolean = function.force)
        }
    }

    private fun serialize(requestId: Long, function: CreateBusinessChatLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createBusinessChatLink")
            put(key = "@extra", long = requestId)
            put(key = "link_info", value = function.linkInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: CreateCall): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createCall")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "protocol", value = function.protocol) { data -> serialize(dto = data) }
            put(key = "is_video", boolean = function.isVideo)
        }
    }

    private fun serialize(requestId: Long, function: CreateChatFolder): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createChatFolder")
            put(key = "@extra", long = requestId)
            put(key = "folder", value = function.folder) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: CreateChatFolderInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createChatFolderInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_folder_id", int = function.chatFolderId)
            put(key = "name", string = function.name)
            put(key = "chat_ids", longs = function.chatIds)
        }
    }

    private fun serialize(requestId: Long, function: CreateChatInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createChatInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "name", string = function.name)
            put(key = "expiration_date", int = function.expirationDate)
            put(key = "member_limit", int = function.memberLimit)
            put(key = "creates_join_request", boolean = function.createsJoinRequest)
        }
    }

    private fun serialize(requestId: Long, function: CreateChatSubscriptionInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createChatSubscriptionInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "name", string = function.name)
            put(key = "subscription_pricing", value = function.subscriptionPricing) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: CreateForumTopic): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createForumTopic")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "name", string = function.name)
            put(key = "icon", value = function.icon) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: CreateGroupCall): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createGroupCall")
            put(key = "@extra", long = requestId)
            put(key = "join_parameters", value = function.joinParameters) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: CreateInvoiceLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createInvoiceLink")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "invoice", value = function.invoice) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: CreateNewBasicGroupChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createNewBasicGroupChat")
            put(key = "@extra", long = requestId)
            put(key = "user_ids", longs = function.userIds)
            put(key = "title", string = function.title)
            put(key = "message_auto_delete_time", int = function.messageAutoDeleteTime)
        }
    }

    private fun serialize(requestId: Long, function: CreateNewSecretChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createNewSecretChat")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
        }
    }

    private fun serialize(requestId: Long, function: CreateNewStickerSet): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createNewStickerSet")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "title", string = function.title)
            put(key = "name", string = function.name)
            put(key = "sticker_type", value = function.stickerType) { data -> serialize(dto = data) }
            put(key = "needs_repainting", boolean = function.needsRepainting)
            put(key = "stickers", objects = function.stickers) { data -> serialize(dto = data) }
            put(key = "source", string = function.source)
        }
    }

    private fun serialize(requestId: Long, function: CreateNewSupergroupChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createNewSupergroupChat")
            put(key = "@extra", long = requestId)
            put(key = "title", string = function.title)
            put(key = "is_forum", boolean = function.isForum)
            put(key = "is_channel", boolean = function.isChannel)
            put(key = "description", string = function.description)
            put(key = "location", value = function.location) { data -> serialize(dto = data) }
            put(key = "message_auto_delete_time", int = function.messageAutoDeleteTime)
            put(key = "for_import", boolean = function.forImport)
        }
    }

    private fun serialize(requestId: Long, function: CreatePrivateChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createPrivateChat")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "force", boolean = function.force)
        }
    }

    private fun serialize(requestId: Long, function: CreateSecretChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createSecretChat")
            put(key = "@extra", long = requestId)
            put(key = "secret_chat_id", int = function.secretChatId)
        }
    }

    private fun serialize(requestId: Long, function: CreateSupergroupChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createSupergroupChat")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "force", boolean = function.force)
        }
    }

    private fun serialize(requestId: Long, function: CreateTemporaryPassword): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createTemporaryPassword")
            put(key = "@extra", long = requestId)
            put(key = "password", string = function.password)
            put(key = "valid_for", int = function.validFor)
        }
    }

    private fun serialize(requestId: Long, function: CreateVideoChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "createVideoChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "title", string = function.title)
            put(key = "start_date", int = function.startDate)
            put(key = "is_rtmp_stream", boolean = function.isRtmpStream)
        }
    }

    private fun serialize(requestId: Long, function: DeclineGroupCallInvitation): String {
        return buildJsonObjectString {
            put(key = "@type", string = "declineGroupCallInvitation")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: DecryptGroupCallData): String {
        return buildJsonObjectString {
            put(key = "@type", string = "decryptGroupCallData")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "participant_id", value = function.participantId) { data -> serialize(dto = data) }
            put(key = "data_channel", value = function.dataChannel) { data -> serialize(dto = data) }
            put(key = "data", bytes = function.data)
        }
    }

    private fun serialize(requestId: Long, function: DeleteAccount): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteAccount")
            put(key = "@extra", long = requestId)
            put(key = "reason", string = function.reason)
            put(key = "password", string = function.password)
        }
    }

    private fun serialize(requestId: Long, function: DeleteAllCallMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteAllCallMessages")
            put(key = "@extra", long = requestId)
            put(key = "revoke", boolean = function.revoke)
        }
    }

    private fun serialize(requestId: Long, function: DeleteAllRevokedChatInviteLinks): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteAllRevokedChatInviteLinks")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "creator_user_id", long = function.creatorUserId)
        }
    }

    private fun serialize(requestId: Long, function: DeleteBotMediaPreviews): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteBotMediaPreviews")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "language_code", string = function.languageCode)
            put(key = "file_ids", ints = function.fileIds)
        }
    }

    private fun serialize(requestId: Long, function: DeleteBusinessChatLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteBusinessChatLink")
            put(key = "@extra", long = requestId)
            put(key = "link", string = function.link)
        }
    }

    private fun serialize(requestId: Long, function: DeleteBusinessConnectedBot): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteBusinessConnectedBot")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
        }
    }

    private fun serialize(requestId: Long, function: DeleteBusinessMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteBusinessMessages")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "message_ids", longs = function.messageIds)
        }
    }

    private fun serialize(requestId: Long, function: DeleteBusinessStory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteBusinessStory")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "story_id", int = function.storyId)
        }
    }

    private fun serialize(requestId: Long, function: DeleteChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: DeleteChatBackground): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteChatBackground")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "restore_previous", boolean = function.restorePrevious)
        }
    }

    private fun serialize(requestId: Long, function: DeleteChatFolder): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteChatFolder")
            put(key = "@extra", long = requestId)
            put(key = "chat_folder_id", int = function.chatFolderId)
            put(key = "leave_chat_ids", longs = function.leaveChatIds)
        }
    }

    private fun serialize(requestId: Long, function: DeleteChatFolderInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteChatFolderInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_folder_id", int = function.chatFolderId)
            put(key = "invite_link", string = function.inviteLink)
        }
    }

    private fun serialize(requestId: Long, function: DeleteChatHistory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteChatHistory")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "remove_from_chat_list", boolean = function.removeFromChatList)
            put(key = "revoke", boolean = function.revoke)
        }
    }

    private fun serialize(requestId: Long, function: DeleteChatMessagesByDate): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteChatMessagesByDate")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "min_date", int = function.minDate)
            put(key = "max_date", int = function.maxDate)
            put(key = "revoke", boolean = function.revoke)
        }
    }

    private fun serialize(requestId: Long, function: DeleteChatMessagesBySender): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteChatMessagesBySender")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "sender_id", value = function.senderId) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: DeleteChatReplyMarkup): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteChatReplyMarkup")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: DeleteCommands): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteCommands")
            put(key = "@extra", long = requestId)
            put(key = "scope", value = function.scope) { data -> serialize(dto = data) }
            put(key = "language_code", string = function.languageCode)
        }
    }

    private fun serialize(requestId: Long, function: DeleteDefaultBackground): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteDefaultBackground")
            put(key = "@extra", long = requestId)
            put(key = "for_dark_theme", boolean = function.forDarkTheme)
        }
    }

    private fun serialize(requestId: Long, function: DeleteDirectMessagesChatTopicHistory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteDirectMessagesChatTopicHistory")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", long = function.topicId)
        }
    }

    private fun serialize(requestId: Long, function: DeleteDirectMessagesChatTopicMessagesByDate): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteDirectMessagesChatTopicMessagesByDate")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", long = function.topicId)
            put(key = "min_date", int = function.minDate)
            put(key = "max_date", int = function.maxDate)
        }
    }

    private fun serialize(requestId: Long, function: DeleteFile): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteFile")
            put(key = "@extra", long = requestId)
            put(key = "file_id", int = function.fileId)
        }
    }

    private fun serialize(requestId: Long, function: DeleteForumTopic): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteForumTopic")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
        }
    }

    private fun serialize(requestId: Long, function: DeleteLanguagePack): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteLanguagePack")
            put(key = "@extra", long = requestId)
            put(key = "language_pack_id", string = function.languagePackId)
        }
    }

    private fun serialize(requestId: Long, function: DeleteMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_ids", longs = function.messageIds)
            put(key = "revoke", boolean = function.revoke)
        }
    }

    private fun serialize(requestId: Long, function: DeletePassportElement): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deletePassportElement")
            put(key = "@extra", long = requestId)
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: DeleteProfilePhoto): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteProfilePhoto")
            put(key = "@extra", long = requestId)
            put(key = "profile_photo_id", long = function.profilePhotoId)
        }
    }

    private fun serialize(requestId: Long, function: DeleteQuickReplyShortcut): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteQuickReplyShortcut")
            put(key = "@extra", long = requestId)
            put(key = "shortcut_id", int = function.shortcutId)
        }
    }

    private fun serialize(requestId: Long, function: DeleteQuickReplyShortcutMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteQuickReplyShortcutMessages")
            put(key = "@extra", long = requestId)
            put(key = "shortcut_id", int = function.shortcutId)
            put(key = "message_ids", longs = function.messageIds)
        }
    }

    private fun serialize(requestId: Long, function: DeleteRevokedChatInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteRevokedChatInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "invite_link", string = function.inviteLink)
        }
    }

    private fun serialize(requestId: Long, function: DeleteSavedCredentials): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteSavedCredentials")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: DeleteSavedMessagesTopicHistory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteSavedMessagesTopicHistory")
            put(key = "@extra", long = requestId)
            put(key = "saved_messages_topic_id", long = function.savedMessagesTopicId)
        }
    }

    private fun serialize(requestId: Long, function: DeleteSavedMessagesTopicMessagesByDate): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteSavedMessagesTopicMessagesByDate")
            put(key = "@extra", long = requestId)
            put(key = "saved_messages_topic_id", long = function.savedMessagesTopicId)
            put(key = "min_date", int = function.minDate)
            put(key = "max_date", int = function.maxDate)
        }
    }

    private fun serialize(requestId: Long, function: DeleteSavedOrderInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteSavedOrderInfo")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: DeleteStickerSet): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteStickerSet")
            put(key = "@extra", long = requestId)
            put(key = "name", string = function.name)
        }
    }

    private fun serialize(requestId: Long, function: DeleteStory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "deleteStory")
            put(key = "@extra", long = requestId)
            put(key = "story_poster_chat_id", long = function.storyPosterChatId)
            put(key = "story_id", int = function.storyId)
        }
    }

    private fun serialize(requestId: Long, function: Destroy): String {
        return buildJsonObjectString {
            put(key = "@type", string = "destroy")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: DisableAllSupergroupUsernames): String {
        return buildJsonObjectString {
            put(key = "@type", string = "disableAllSupergroupUsernames")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
        }
    }

    private fun serialize(requestId: Long, function: DisableProxy): String {
        return buildJsonObjectString {
            put(key = "@type", string = "disableProxy")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: DiscardCall): String {
        return buildJsonObjectString {
            put(key = "@type", string = "discardCall")
            put(key = "@extra", long = requestId)
            put(key = "call_id", int = function.callId)
            put(key = "is_disconnected", boolean = function.isDisconnected)
            put(key = "invite_link", string = function.inviteLink)
            put(key = "duration", int = function.duration)
            put(key = "is_video", boolean = function.isVideo)
            put(key = "connection_id", long = function.connectionId)
        }
    }

    private fun serialize(requestId: Long, function: DisconnectAffiliateProgram): String {
        return buildJsonObjectString {
            put(key = "@type", string = "disconnectAffiliateProgram")
            put(key = "@extra", long = requestId)
            put(key = "affiliate", value = function.affiliate) { data -> serialize(dto = data) }
            put(key = "url", string = function.url)
        }
    }

    private fun serialize(requestId: Long, function: DisconnectAllWebsites): String {
        return buildJsonObjectString {
            put(key = "@type", string = "disconnectAllWebsites")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: DisconnectWebsite): String {
        return buildJsonObjectString {
            put(key = "@type", string = "disconnectWebsite")
            put(key = "@extra", long = requestId)
            put(key = "website_id", long = function.websiteId)
        }
    }

    private fun serialize(requestId: Long, function: DownloadFile): String {
        return buildJsonObjectString {
            put(key = "@type", string = "downloadFile")
            put(key = "@extra", long = requestId)
            put(key = "file_id", int = function.fileId)
            put(key = "priority", int = function.priority)
            put(key = "offset", long = function.offset)
            put(key = "limit", long = function.limit)
            put(key = "synchronous", boolean = function.synchronous)
        }
    }

    private fun serialize(requestId: Long, function: EditBotMediaPreview): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editBotMediaPreview")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "language_code", string = function.languageCode)
            put(key = "file_id", int = function.fileId)
            put(key = "content", value = function.content) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditBusinessChatLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editBusinessChatLink")
            put(key = "@extra", long = requestId)
            put(key = "link", string = function.link)
            put(key = "link_info", value = function.linkInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditBusinessMessageCaption): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editBusinessMessageCaption")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "caption", value = function.caption) { data -> serialize(dto = data) }
            put(key = "show_caption_above_media", boolean = function.showCaptionAboveMedia)
        }
    }

    private fun serialize(requestId: Long, function: EditBusinessMessageChecklist): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editBusinessMessageChecklist")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "checklist", value = function.checklist) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditBusinessMessageLiveLocation): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editBusinessMessageLiveLocation")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "location", value = function.location) { data -> serialize(dto = data) }
            put(key = "live_period", int = function.livePeriod)
            put(key = "heading", int = function.heading)
            put(key = "proximity_alert_radius", int = function.proximityAlertRadius)
        }
    }

    private fun serialize(requestId: Long, function: EditBusinessMessageMedia): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editBusinessMessageMedia")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = function.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditBusinessMessageReplyMarkup): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editBusinessMessageReplyMarkup")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditBusinessMessageText): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editBusinessMessageText")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = function.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditBusinessStory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editBusinessStory")
            put(key = "@extra", long = requestId)
            put(key = "story_poster_chat_id", long = function.storyPosterChatId)
            put(key = "story_id", int = function.storyId)
            put(key = "content", value = function.content) { data -> serialize(dto = data) }
            put(key = "areas", value = function.areas) { data -> serialize(dto = data) }
            put(key = "caption", value = function.caption) { data -> serialize(dto = data) }
            put(key = "privacy_settings", value = function.privacySettings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditChatFolder): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editChatFolder")
            put(key = "@extra", long = requestId)
            put(key = "chat_folder_id", int = function.chatFolderId)
            put(key = "folder", value = function.folder) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditChatFolderInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editChatFolderInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_folder_id", int = function.chatFolderId)
            put(key = "invite_link", string = function.inviteLink)
            put(key = "name", string = function.name)
            put(key = "chat_ids", longs = function.chatIds)
        }
    }

    private fun serialize(requestId: Long, function: EditChatInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editChatInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "invite_link", string = function.inviteLink)
            put(key = "name", string = function.name)
            put(key = "expiration_date", int = function.expirationDate)
            put(key = "member_limit", int = function.memberLimit)
            put(key = "creates_join_request", boolean = function.createsJoinRequest)
        }
    }

    private fun serialize(requestId: Long, function: EditChatSubscriptionInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editChatSubscriptionInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "invite_link", string = function.inviteLink)
            put(key = "name", string = function.name)
        }
    }

    private fun serialize(requestId: Long, function: EditCustomLanguagePackInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editCustomLanguagePackInfo")
            put(key = "@extra", long = requestId)
            put(key = "info", value = function.info) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditForumTopic): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editForumTopic")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
            put(key = "name", string = function.name)
            put(key = "edit_icon_custom_emoji", boolean = function.editIconCustomEmoji)
            put(key = "icon_custom_emoji_id", long = function.iconCustomEmojiId)
        }
    }

    private fun serialize(requestId: Long, function: EditInlineMessageCaption): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editInlineMessageCaption")
            put(key = "@extra", long = requestId)
            put(key = "inline_message_id", string = function.inlineMessageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "caption", value = function.caption) { data -> serialize(dto = data) }
            put(key = "show_caption_above_media", boolean = function.showCaptionAboveMedia)
        }
    }

    private fun serialize(requestId: Long, function: EditInlineMessageLiveLocation): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editInlineMessageLiveLocation")
            put(key = "@extra", long = requestId)
            put(key = "inline_message_id", string = function.inlineMessageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "location", value = function.location) { data -> serialize(dto = data) }
            put(key = "live_period", int = function.livePeriod)
            put(key = "heading", int = function.heading)
            put(key = "proximity_alert_radius", int = function.proximityAlertRadius)
        }
    }

    private fun serialize(requestId: Long, function: EditInlineMessageMedia): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editInlineMessageMedia")
            put(key = "@extra", long = requestId)
            put(key = "inline_message_id", string = function.inlineMessageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = function.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditInlineMessageReplyMarkup): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editInlineMessageReplyMarkup")
            put(key = "@extra", long = requestId)
            put(key = "inline_message_id", string = function.inlineMessageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditInlineMessageText): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editInlineMessageText")
            put(key = "@extra", long = requestId)
            put(key = "inline_message_id", string = function.inlineMessageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = function.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditMessageCaption): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editMessageCaption")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "caption", value = function.caption) { data -> serialize(dto = data) }
            put(key = "show_caption_above_media", boolean = function.showCaptionAboveMedia)
        }
    }

    private fun serialize(requestId: Long, function: EditMessageChecklist): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editMessageChecklist")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "checklist", value = function.checklist) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditMessageLiveLocation): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editMessageLiveLocation")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "location", value = function.location) { data -> serialize(dto = data) }
            put(key = "live_period", int = function.livePeriod)
            put(key = "heading", int = function.heading)
            put(key = "proximity_alert_radius", int = function.proximityAlertRadius)
        }
    }

    private fun serialize(requestId: Long, function: EditMessageMedia): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editMessageMedia")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = function.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditMessageReplyMarkup): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editMessageReplyMarkup")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditMessageSchedulingState): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editMessageSchedulingState")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "scheduling_state", value = function.schedulingState) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditMessageText): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editMessageText")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = function.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditProxy): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editProxy")
            put(key = "@extra", long = requestId)
            put(key = "proxy_id", int = function.proxyId)
            put(key = "server", string = function.server)
            put(key = "port", int = function.port)
            put(key = "enable", boolean = function.enable)
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditQuickReplyMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editQuickReplyMessage")
            put(key = "@extra", long = requestId)
            put(key = "shortcut_id", int = function.shortcutId)
            put(key = "message_id", long = function.messageId)
            put(key = "input_message_content", value = function.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditStarSubscription): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editStarSubscription")
            put(key = "@extra", long = requestId)
            put(key = "subscription_id", string = function.subscriptionId)
            put(key = "is_canceled", boolean = function.isCanceled)
        }
    }

    private fun serialize(requestId: Long, function: EditStory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editStory")
            put(key = "@extra", long = requestId)
            put(key = "story_poster_chat_id", long = function.storyPosterChatId)
            put(key = "story_id", int = function.storyId)
            put(key = "content", value = function.content) { data -> serialize(dto = data) }
            put(key = "areas", value = function.areas) { data -> serialize(dto = data) }
            put(key = "caption", value = function.caption) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: EditStoryCover): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editStoryCover")
            put(key = "@extra", long = requestId)
            put(key = "story_poster_chat_id", long = function.storyPosterChatId)
            put(key = "story_id", int = function.storyId)
            put(key = "cover_frame_timestamp", double = function.coverFrameTimestamp)
        }
    }

    private fun serialize(requestId: Long, function: EditUserStarSubscription): String {
        return buildJsonObjectString {
            put(key = "@type", string = "editUserStarSubscription")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "telegram_payment_charge_id", string = function.telegramPaymentChargeId)
            put(key = "is_canceled", boolean = function.isCanceled)
        }
    }

    private fun serialize(requestId: Long, function: EnableProxy): String {
        return buildJsonObjectString {
            put(key = "@type", string = "enableProxy")
            put(key = "@extra", long = requestId)
            put(key = "proxy_id", int = function.proxyId)
        }
    }

    private fun serialize(requestId: Long, function: EncryptGroupCallData): String {
        return buildJsonObjectString {
            put(key = "@type", string = "encryptGroupCallData")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "data_channel", value = function.dataChannel) { data -> serialize(dto = data) }
            put(key = "data", bytes = function.data)
            put(key = "unencrypted_prefix_size", int = function.unencryptedPrefixSize)
        }
    }

    private fun serialize(requestId: Long, function: EndGroupCall): String {
        return buildJsonObjectString {
            put(key = "@type", string = "endGroupCall")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
        }
    }

    private fun serialize(requestId: Long, function: EndGroupCallRecording): String {
        return buildJsonObjectString {
            put(key = "@type", string = "endGroupCallRecording")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
        }
    }

    private fun serialize(requestId: Long, function: EndGroupCallScreenSharing): String {
        return buildJsonObjectString {
            put(key = "@type", string = "endGroupCallScreenSharing")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
        }
    }

    private fun serialize(requestId: Long, function: FinishFileGeneration): String {
        return buildJsonObjectString {
            put(key = "@type", string = "finishFileGeneration")
            put(key = "@extra", long = requestId)
            put(key = "generation_id", long = function.generationId)
            put(key = "error", value = function.error) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: ForwardMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "forwardMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
            put(key = "from_chat_id", long = function.fromChatId)
            put(key = "message_ids", longs = function.messageIds)
            put(key = "options", value = function.options) { data -> serialize(dto = data) }
            put(key = "send_copy", boolean = function.sendCopy)
            put(key = "remove_caption", boolean = function.removeCaption)
        }
    }

    private fun serialize(requestId: Long, function: GetAccountTtl): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getAccountTtl")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetActiveSessions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getActiveSessions")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetAllPassportElements): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getAllPassportElements")
            put(key = "@extra", long = requestId)
            put(key = "password", string = function.password)
        }
    }

    private fun serialize(requestId: Long, function: GetAllStickerEmojis): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getAllStickerEmojis")
            put(key = "@extra", long = requestId)
            put(key = "sticker_type", value = function.stickerType) { data -> serialize(dto = data) }
            put(key = "query", string = function.query)
            put(key = "chat_id", long = function.chatId)
            put(key = "return_only_main_emoji", boolean = function.returnOnlyMainEmoji)
        }
    }

    private fun serialize(requestId: Long, function: GetAnimatedEmoji): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getAnimatedEmoji")
            put(key = "@extra", long = requestId)
            put(key = "emoji", string = function.emoji)
        }
    }

    private fun serialize(requestId: Long, function: GetApplicationConfig): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getApplicationConfig")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetApplicationDownloadLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getApplicationDownloadLink")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetArchiveChatListSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getArchiveChatListSettings")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetArchivedStickerSets): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getArchivedStickerSets")
            put(key = "@extra", long = requestId)
            put(key = "sticker_type", value = function.stickerType) { data -> serialize(dto = data) }
            put(key = "offset_sticker_set_id", long = function.offsetStickerSetId)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetAttachedStickerSets): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getAttachedStickerSets")
            put(key = "@extra", long = requestId)
            put(key = "file_id", int = function.fileId)
        }
    }

    private fun serialize(requestId: Long, function: GetAttachmentMenuBot): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getAttachmentMenuBot")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
        }
    }

    private fun serialize(requestId: Long, function: GetAuthorizationState): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getAuthorizationState")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetAutoDownloadSettingsPresets): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getAutoDownloadSettingsPresets")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetAutosaveSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getAutosaveSettings")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetAvailableChatBoostSlots): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getAvailableChatBoostSlots")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetAvailableGifts): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getAvailableGifts")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetBackgroundUrl): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBackgroundUrl")
            put(key = "@extra", long = requestId)
            put(key = "name", string = function.name)
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetBankCardInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBankCardInfo")
            put(key = "@extra", long = requestId)
            put(key = "bank_card_number", string = function.bankCardNumber)
        }
    }

    private fun serialize(requestId: Long, function: GetBasicGroup): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBasicGroup")
            put(key = "@extra", long = requestId)
            put(key = "basic_group_id", long = function.basicGroupId)
        }
    }

    private fun serialize(requestId: Long, function: GetBasicGroupFullInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBasicGroupFullInfo")
            put(key = "@extra", long = requestId)
            put(key = "basic_group_id", long = function.basicGroupId)
        }
    }

    private fun serialize(requestId: Long, function: GetBlockedMessageSenders): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBlockedMessageSenders")
            put(key = "@extra", long = requestId)
            put(key = "block_list", value = function.blockList) { data -> serialize(dto = data) }
            put(key = "offset", int = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetBotInfoDescription): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBotInfoDescription")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "language_code", string = function.languageCode)
        }
    }

    private fun serialize(requestId: Long, function: GetBotInfoShortDescription): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBotInfoShortDescription")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "language_code", string = function.languageCode)
        }
    }

    private fun serialize(requestId: Long, function: GetBotMediaPreviewInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBotMediaPreviewInfo")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "language_code", string = function.languageCode)
        }
    }

    private fun serialize(requestId: Long, function: GetBotMediaPreviews): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBotMediaPreviews")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
        }
    }

    private fun serialize(requestId: Long, function: GetBotName): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBotName")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "language_code", string = function.languageCode)
        }
    }

    private fun serialize(requestId: Long, function: GetBotSimilarBotCount): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBotSimilarBotCount")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "return_local", boolean = function.returnLocal)
        }
    }

    private fun serialize(requestId: Long, function: GetBotSimilarBots): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBotSimilarBots")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
        }
    }

    private fun serialize(requestId: Long, function: GetBusinessAccountStarAmount): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBusinessAccountStarAmount")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
        }
    }

    private fun serialize(requestId: Long, function: GetBusinessChatLinkInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBusinessChatLinkInfo")
            put(key = "@extra", long = requestId)
            put(key = "link_name", string = function.linkName)
        }
    }

    private fun serialize(requestId: Long, function: GetBusinessChatLinks): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBusinessChatLinks")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetBusinessConnectedBot): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBusinessConnectedBot")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetBusinessConnection): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBusinessConnection")
            put(key = "@extra", long = requestId)
            put(key = "connection_id", string = function.connectionId)
        }
    }

    private fun serialize(requestId: Long, function: GetBusinessFeatures): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getBusinessFeatures")
            put(key = "@extra", long = requestId)
            put(key = "source", value = function.source) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetCallbackQueryAnswer): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getCallbackQueryAnswer")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "payload", value = function.payload) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetCallbackQueryMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getCallbackQueryMessage")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "callback_query_id", long = function.callbackQueryId)
        }
    }

    private fun serialize(requestId: Long, function: GetChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatActiveStories): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatActiveStories")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatAdministrators): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatAdministrators")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatArchivedStories): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatArchivedStories")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "from_story_id", int = function.fromStoryId)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetChatAvailableMessageSenders): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatAvailableMessageSenders")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatAvailablePaidMessageReactionSenders): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatAvailablePaidMessageReactionSenders")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatBoostFeatures): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatBoostFeatures")
            put(key = "@extra", long = requestId)
            put(key = "is_channel", boolean = function.isChannel)
        }
    }

    private fun serialize(requestId: Long, function: GetChatBoostLevelFeatures): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatBoostLevelFeatures")
            put(key = "@extra", long = requestId)
            put(key = "is_channel", boolean = function.isChannel)
            put(key = "level", int = function.level)
        }
    }

    private fun serialize(requestId: Long, function: GetChatBoostLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatBoostLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatBoostLinkInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatBoostLinkInfo")
            put(key = "@extra", long = requestId)
            put(key = "url", string = function.url)
        }
    }

    private fun serialize(requestId: Long, function: GetChatBoostStatus): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatBoostStatus")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatBoosts): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatBoosts")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "only_gift_codes", boolean = function.onlyGiftCodes)
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetChatEventLog): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatEventLog")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "query", string = function.query)
            put(key = "from_event_id", long = function.fromEventId)
            put(key = "limit", int = function.limit)
            put(key = "filters", value = function.filters) { data -> serialize(dto = data) }
            put(key = "user_ids", longs = function.userIds)
        }
    }

    private fun serialize(requestId: Long, function: GetChatFolder): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatFolder")
            put(key = "@extra", long = requestId)
            put(key = "chat_folder_id", int = function.chatFolderId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatFolderChatCount): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatFolderChatCount")
            put(key = "@extra", long = requestId)
            put(key = "folder", value = function.folder) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetChatFolderChatsToLeave): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatFolderChatsToLeave")
            put(key = "@extra", long = requestId)
            put(key = "chat_folder_id", int = function.chatFolderId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatFolderDefaultIconName): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatFolderDefaultIconName")
            put(key = "@extra", long = requestId)
            put(key = "folder", value = function.folder) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetChatFolderInviteLinks): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatFolderInviteLinks")
            put(key = "@extra", long = requestId)
            put(key = "chat_folder_id", int = function.chatFolderId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatFolderNewChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatFolderNewChats")
            put(key = "@extra", long = requestId)
            put(key = "chat_folder_id", int = function.chatFolderId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatHistory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatHistory")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "from_message_id", long = function.fromMessageId)
            put(key = "offset", int = function.offset)
            put(key = "limit", int = function.limit)
            put(key = "only_local", boolean = function.onlyLocal)
        }
    }

    private fun serialize(requestId: Long, function: GetChatInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "invite_link", string = function.inviteLink)
        }
    }

    private fun serialize(requestId: Long, function: GetChatInviteLinkCounts): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatInviteLinkCounts")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatInviteLinkMembers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatInviteLinkMembers")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "invite_link", string = function.inviteLink)
            put(key = "only_with_expired_subscription", boolean = function.onlyWithExpiredSubscription)
            put(key = "offset_member", value = function.offsetMember) { data -> serialize(dto = data) }
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetChatInviteLinks): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatInviteLinks")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "creator_user_id", long = function.creatorUserId)
            put(key = "is_revoked", boolean = function.isRevoked)
            put(key = "offset_date", int = function.offsetDate)
            put(key = "offset_invite_link", string = function.offsetInviteLink)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetChatJoinRequests): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatJoinRequests")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "invite_link", string = function.inviteLink)
            put(key = "query", string = function.query)
            put(key = "offset_request", value = function.offsetRequest) { data -> serialize(dto = data) }
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetChatListsToAddChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatListsToAddChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatMember): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatMember")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "member_id", value = function.memberId) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetChatMessageByDate): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatMessageByDate")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "date", int = function.date)
        }
    }

    private fun serialize(requestId: Long, function: GetChatMessageCalendar): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatMessageCalendar")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", value = function.topicId) { data -> serialize(dto = data) }
            put(key = "filter", value = function.filter) { data -> serialize(dto = data) }
            put(key = "from_message_id", long = function.fromMessageId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatMessageCount): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatMessageCount")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", value = function.topicId) { data -> serialize(dto = data) }
            put(key = "filter", value = function.filter) { data -> serialize(dto = data) }
            put(key = "return_local", boolean = function.returnLocal)
        }
    }

    private fun serialize(requestId: Long, function: GetChatMessagePosition): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatMessagePosition")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", value = function.topicId) { data -> serialize(dto = data) }
            put(key = "filter", value = function.filter) { data -> serialize(dto = data) }
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatNotificationSettingsExceptions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatNotificationSettingsExceptions")
            put(key = "@extra", long = requestId)
            put(key = "scope", value = function.scope) { data -> serialize(dto = data) }
            put(key = "compare_sound", boolean = function.compareSound)
        }
    }

    private fun serialize(requestId: Long, function: GetChatPinnedMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatPinnedMessage")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatPostedToChatPageStories): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatPostedToChatPageStories")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "from_story_id", int = function.fromStoryId)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetChatRevenueStatistics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatRevenueStatistics")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "is_dark", boolean = function.isDark)
        }
    }

    private fun serialize(requestId: Long, function: GetChatRevenueTransactions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatRevenueTransactions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "offset", int = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetChatRevenueWithdrawalUrl): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatRevenueWithdrawalUrl")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "password", string = function.password)
        }
    }

    private fun serialize(requestId: Long, function: GetChatScheduledMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatScheduledMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatSimilarChatCount): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatSimilarChatCount")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "return_local", boolean = function.returnLocal)
        }
    }

    private fun serialize(requestId: Long, function: GetChatSimilarChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatSimilarChats")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatSparseMessagePositions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatSparseMessagePositions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "filter", value = function.filter) { data -> serialize(dto = data) }
            put(key = "from_message_id", long = function.fromMessageId)
            put(key = "limit", int = function.limit)
            put(key = "saved_messages_topic_id", long = function.savedMessagesTopicId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatSponsoredMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatSponsoredMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatStatistics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatStatistics")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "is_dark", boolean = function.isDark)
        }
    }

    private fun serialize(requestId: Long, function: GetChatStoryInteractions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatStoryInteractions")
            put(key = "@extra", long = requestId)
            put(key = "story_poster_chat_id", long = function.storyPosterChatId)
            put(key = "story_id", int = function.storyId)
            put(key = "reaction_type", value = function.reactionType) { data -> serialize(dto = data) }
            put(key = "prefer_forwards", boolean = function.preferForwards)
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChats")
            put(key = "@extra", long = requestId)
            put(key = "chat_list", value = function.chatList) { data -> serialize(dto = data) }
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetChatsForChatFolderInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatsForChatFolderInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_folder_id", int = function.chatFolderId)
        }
    }

    private fun serialize(requestId: Long, function: GetChatsToPostStories): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getChatsToPostStories")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetCloseFriends): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getCloseFriends")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetCollectibleItemInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getCollectibleItemInfo")
            put(key = "@extra", long = requestId)
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetCommands): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getCommands")
            put(key = "@extra", long = requestId)
            put(key = "scope", value = function.scope) { data -> serialize(dto = data) }
            put(key = "language_code", string = function.languageCode)
        }
    }

    private fun serialize(requestId: Long, function: GetConnectedAffiliateProgram): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getConnectedAffiliateProgram")
            put(key = "@extra", long = requestId)
            put(key = "affiliate", value = function.affiliate) { data -> serialize(dto = data) }
            put(key = "bot_user_id", long = function.botUserId)
        }
    }

    private fun serialize(requestId: Long, function: GetConnectedAffiliatePrograms): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getConnectedAffiliatePrograms")
            put(key = "@extra", long = requestId)
            put(key = "affiliate", value = function.affiliate) { data -> serialize(dto = data) }
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetConnectedWebsites): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getConnectedWebsites")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetContacts): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getContacts")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetCountries): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getCountries")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetCountryCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getCountryCode")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetCountryFlagEmoji): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getCountryFlagEmoji")
            put(key = "@extra", long = requestId)
            put(key = "country_code", string = function.countryCode)
        }
    }

    private fun serialize(requestId: Long, function: GetCreatedPublicChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getCreatedPublicChats")
            put(key = "@extra", long = requestId)
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetCurrentState): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getCurrentState")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetCurrentWeather): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getCurrentWeather")
            put(key = "@extra", long = requestId)
            put(key = "location", value = function.location) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetCustomEmojiReactionAnimations): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getCustomEmojiReactionAnimations")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetCustomEmojiStickers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getCustomEmojiStickers")
            put(key = "@extra", long = requestId)
            put(key = "custom_emoji_ids", longs = function.customEmojiIds)
        }
    }

    private fun serialize(requestId: Long, function: GetDatabaseStatistics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getDatabaseStatistics")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetDeepLinkInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getDeepLinkInfo")
            put(key = "@extra", long = requestId)
            put(key = "link", string = function.link)
        }
    }

    private fun serialize(requestId: Long, function: GetDefaultBackgroundCustomEmojiStickers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getDefaultBackgroundCustomEmojiStickers")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetDefaultChatEmojiStatuses): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getDefaultChatEmojiStatuses")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetDefaultChatPhotoCustomEmojiStickers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getDefaultChatPhotoCustomEmojiStickers")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetDefaultEmojiStatuses): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getDefaultEmojiStatuses")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetDefaultMessageAutoDeleteTime): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getDefaultMessageAutoDeleteTime")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetDefaultProfilePhotoCustomEmojiStickers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getDefaultProfilePhotoCustomEmojiStickers")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetDirectMessagesChatTopic): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getDirectMessagesChatTopic")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", long = function.topicId)
        }
    }

    private fun serialize(requestId: Long, function: GetDirectMessagesChatTopicHistory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getDirectMessagesChatTopicHistory")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", long = function.topicId)
            put(key = "from_message_id", long = function.fromMessageId)
            put(key = "offset", int = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetDirectMessagesChatTopicMessageByDate): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getDirectMessagesChatTopicMessageByDate")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", long = function.topicId)
            put(key = "date", int = function.date)
        }
    }

    private fun serialize(requestId: Long, function: GetDirectMessagesChatTopicRevenue): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getDirectMessagesChatTopicRevenue")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", long = function.topicId)
        }
    }

    private fun serialize(requestId: Long, function: GetDisallowedChatEmojiStatuses): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getDisallowedChatEmojiStatuses")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetEmojiCategories): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getEmojiCategories")
            put(key = "@extra", long = requestId)
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetEmojiReaction): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getEmojiReaction")
            put(key = "@extra", long = requestId)
            put(key = "emoji", string = function.emoji)
        }
    }

    private fun serialize(requestId: Long, function: GetEmojiSuggestionsUrl): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getEmojiSuggestionsUrl")
            put(key = "@extra", long = requestId)
            put(key = "language_code", string = function.languageCode)
        }
    }

    private fun serialize(requestId: Long, function: GetExternalLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getExternalLink")
            put(key = "@extra", long = requestId)
            put(key = "link", string = function.link)
            put(key = "allow_write_access", boolean = function.allowWriteAccess)
        }
    }

    private fun serialize(requestId: Long, function: GetExternalLinkInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getExternalLinkInfo")
            put(key = "@extra", long = requestId)
            put(key = "link", string = function.link)
        }
    }

    private fun serialize(requestId: Long, function: GetFavoriteStickers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getFavoriteStickers")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetFile): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getFile")
            put(key = "@extra", long = requestId)
            put(key = "file_id", int = function.fileId)
        }
    }

    private fun serialize(requestId: Long, function: GetFileDownloadedPrefixSize): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getFileDownloadedPrefixSize")
            put(key = "@extra", long = requestId)
            put(key = "file_id", int = function.fileId)
            put(key = "offset", long = function.offset)
        }
    }

    private fun serialize(requestId: Long, function: GetFileExtension): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getFileExtension")
            put(key = "@extra", long = requestId)
            put(key = "mime_type", string = function.mimeType)
        }
    }

    private fun serialize(requestId: Long, function: GetFileMimeType): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getFileMimeType")
            put(key = "@extra", long = requestId)
            put(key = "file_name", string = function.fileName)
        }
    }

    private fun serialize(requestId: Long, function: GetForumTopic): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getForumTopic")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
        }
    }

    private fun serialize(requestId: Long, function: GetForumTopicDefaultIcons): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getForumTopicDefaultIcons")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetForumTopicLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getForumTopicLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
        }
    }

    private fun serialize(requestId: Long, function: GetForumTopics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getForumTopics")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "query", string = function.query)
            put(key = "offset_date", int = function.offsetDate)
            put(key = "offset_message_id", long = function.offsetMessageId)
            put(key = "offset_message_thread_id", long = function.offsetMessageThreadId)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetGameHighScores): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getGameHighScores")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "user_id", long = function.userId)
        }
    }

    private fun serialize(requestId: Long, function: GetGiftUpgradePreview): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getGiftUpgradePreview")
            put(key = "@extra", long = requestId)
            put(key = "gift_id", long = function.giftId)
        }
    }

    private fun serialize(requestId: Long, function: GetGiveawayInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getGiveawayInfo")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: GetGreetingStickers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getGreetingStickers")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetGrossingWebAppBots): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getGrossingWebAppBots")
            put(key = "@extra", long = requestId)
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetGroupCall): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getGroupCall")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
        }
    }

    private fun serialize(requestId: Long, function: GetGroupCallParticipants): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getGroupCallParticipants")
            put(key = "@extra", long = requestId)
            put(key = "input_group_call", value = function.inputGroupCall) { data -> serialize(dto = data) }
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetGroupsInCommon): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getGroupsInCommon")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "offset_chat_id", long = function.offsetChatId)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetImportedContactCount): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getImportedContactCount")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetInactiveSupergroupChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getInactiveSupergroupChats")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetInlineGameHighScores): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getInlineGameHighScores")
            put(key = "@extra", long = requestId)
            put(key = "inline_message_id", string = function.inlineMessageId)
            put(key = "user_id", long = function.userId)
        }
    }

    private fun serialize(requestId: Long, function: GetInlineQueryResults): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getInlineQueryResults")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "chat_id", long = function.chatId)
            put(key = "user_location", value = function.userLocation) { data -> serialize(dto = data) }
            put(key = "query", string = function.query)
            put(key = "offset", string = function.offset)
        }
    }

    private fun serialize(requestId: Long, function: GetInstalledBackgrounds): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getInstalledBackgrounds")
            put(key = "@extra", long = requestId)
            put(key = "for_dark_theme", boolean = function.forDarkTheme)
        }
    }

    private fun serialize(requestId: Long, function: GetInstalledStickerSets): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getInstalledStickerSets")
            put(key = "@extra", long = requestId)
            put(key = "sticker_type", value = function.stickerType) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetInternalLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getInternalLink")
            put(key = "@extra", long = requestId)
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
            put(key = "is_http", boolean = function.isHttp)
        }
    }

    private fun serialize(requestId: Long, function: GetInternalLinkType): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getInternalLinkType")
            put(key = "@extra", long = requestId)
            put(key = "link", string = function.link)
        }
    }

    private fun serialize(requestId: Long, function: GetJsonString): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getJsonString")
            put(key = "@extra", long = requestId)
            put(key = "json_value", value = function.jsonValue) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetJsonValue): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getJsonValue")
            put(key = "@extra", long = requestId)
            put(key = "json", string = function.json)
        }
    }

    private fun serialize(requestId: Long, function: GetKeywordEmojis): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getKeywordEmojis")
            put(key = "@extra", long = requestId)
            put(key = "text", string = function.text)
            put(key = "input_language_codes", strings = function.inputLanguageCodes)
        }
    }

    private fun serialize(requestId: Long, function: GetLanguagePackInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getLanguagePackInfo")
            put(key = "@extra", long = requestId)
            put(key = "language_pack_id", string = function.languagePackId)
        }
    }

    private fun serialize(requestId: Long, function: GetLanguagePackString): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getLanguagePackString")
            put(key = "@extra", long = requestId)
            put(key = "language_pack_database_path", string = function.languagePackDatabasePath)
            put(key = "localization_target", string = function.localizationTarget)
            put(key = "language_pack_id", string = function.languagePackId)
            put(key = "key", string = function.key)
        }
    }

    private fun serialize(requestId: Long, function: GetLanguagePackStrings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getLanguagePackStrings")
            put(key = "@extra", long = requestId)
            put(key = "language_pack_id", string = function.languagePackId)
            put(key = "keys", strings = function.keys)
        }
    }

    private fun serialize(requestId: Long, function: GetLinkPreview): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getLinkPreview")
            put(key = "@extra", long = requestId)
            put(key = "text", value = function.text) { data -> serialize(dto = data) }
            put(key = "link_preview_options", value = function.linkPreviewOptions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetLocalizationTargetInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getLocalizationTargetInfo")
            put(key = "@extra", long = requestId)
            put(key = "only_local", boolean = function.onlyLocal)
        }
    }

    private fun serialize(requestId: Long, function: GetLogStream): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getLogStream")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetLogTagVerbosityLevel): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getLogTagVerbosityLevel")
            put(key = "@extra", long = requestId)
            put(key = "tag", string = function.tag)
        }
    }

    private fun serialize(requestId: Long, function: GetLogTags): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getLogTags")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetLogVerbosityLevel): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getLogVerbosityLevel")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetLoginUrl): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getLoginUrl")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "button_id", long = function.buttonId)
            put(key = "allow_write_access", boolean = function.allowWriteAccess)
        }
    }

    private fun serialize(requestId: Long, function: GetLoginUrlInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getLoginUrlInfo")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "button_id", long = function.buttonId)
        }
    }

    private fun serialize(requestId: Long, function: GetMainWebApp): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMainWebApp")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "start_parameter", string = function.startParameter)
            put(key = "parameters", value = function.parameters) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetMapThumbnailFile): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMapThumbnailFile")
            put(key = "@extra", long = requestId)
            put(key = "location", value = function.location) { data -> serialize(dto = data) }
            put(key = "zoom", int = function.zoom)
            put(key = "width", int = function.width)
            put(key = "height", int = function.height)
            put(key = "scale", int = function.scale)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetMarkdownText): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMarkdownText")
            put(key = "@extra", long = requestId)
            put(key = "text", value = function.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetMe): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMe")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetMenuButton): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMenuButton")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
        }
    }

    private fun serialize(requestId: Long, function: GetMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessage")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageAddedReactions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageAddedReactions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reaction_type", value = function.reactionType) { data -> serialize(dto = data) }
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageAuthor): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageAuthor")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageAvailableReactions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageAvailableReactions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "row_size", int = function.rowSize)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageEffect): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageEffect")
            put(key = "@extra", long = requestId)
            put(key = "effect_id", long = function.effectId)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageEmbeddingCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageEmbeddingCode")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "for_album", boolean = function.forAlbum)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageFileType): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageFileType")
            put(key = "@extra", long = requestId)
            put(key = "message_file_head", string = function.messageFileHead)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageImportConfirmationText): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageImportConfirmationText")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "media_timestamp", int = function.mediaTimestamp)
            put(key = "for_album", boolean = function.forAlbum)
            put(key = "in_message_thread", boolean = function.inMessageThread)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageLinkInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageLinkInfo")
            put(key = "@extra", long = requestId)
            put(key = "url", string = function.url)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageLocally): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageLocally")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageProperties): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageProperties")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: GetMessagePublicForwards): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessagePublicForwards")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageReadDate): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageReadDate")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageStatistics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageStatistics")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "is_dark", boolean = function.isDark)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageThread): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageThread")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageThreadHistory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageThreadHistory")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "from_message_id", long = function.fromMessageId)
            put(key = "offset", int = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetMessageViewers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessageViewers")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: GetMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_ids", longs = function.messageIds)
        }
    }

    private fun serialize(requestId: Long, function: GetNetworkStatistics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getNetworkStatistics")
            put(key = "@extra", long = requestId)
            put(key = "only_current", boolean = function.onlyCurrent)
        }
    }

    private fun serialize(requestId: Long, function: GetNewChatPrivacySettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getNewChatPrivacySettings")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetOption): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getOption")
            put(key = "@extra", long = requestId)
            put(key = "name", string = function.name)
        }
    }

    private fun serialize(requestId: Long, function: GetOwnedBots): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getOwnedBots")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetOwnedStickerSets): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getOwnedStickerSets")
            put(key = "@extra", long = requestId)
            put(key = "offset_sticker_set_id", long = function.offsetStickerSetId)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetPaidMessageRevenue): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPaidMessageRevenue")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
        }
    }

    private fun serialize(requestId: Long, function: GetPassportAuthorizationForm): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPassportAuthorizationForm")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "scope", string = function.scope)
            put(key = "public_key", string = function.publicKey)
            put(key = "nonce", string = function.nonce)
        }
    }

    private fun serialize(requestId: Long, function: GetPassportAuthorizationFormAvailableElements): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPassportAuthorizationFormAvailableElements")
            put(key = "@extra", long = requestId)
            put(key = "authorization_form_id", int = function.authorizationFormId)
            put(key = "password", string = function.password)
        }
    }

    private fun serialize(requestId: Long, function: GetPassportElement): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPassportElement")
            put(key = "@extra", long = requestId)
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
            put(key = "password", string = function.password)
        }
    }

    private fun serialize(requestId: Long, function: GetPasswordState): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPasswordState")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetPaymentForm): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPaymentForm")
            put(key = "@extra", long = requestId)
            put(key = "input_invoice", value = function.inputInvoice) { data -> serialize(dto = data) }
            put(key = "theme", value = function.theme) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetPaymentReceipt): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPaymentReceipt")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: GetPhoneNumberInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPhoneNumberInfo")
            put(key = "@extra", long = requestId)
            put(key = "phone_number_prefix", string = function.phoneNumberPrefix)
        }
    }

    private fun serialize(requestId: Long, function: GetPhoneNumberInfoSync): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPhoneNumberInfoSync")
            put(key = "@extra", long = requestId)
            put(key = "language_code", string = function.languageCode)
            put(key = "phone_number_prefix", string = function.phoneNumberPrefix)
        }
    }

    private fun serialize(requestId: Long, function: GetPollVoters): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPollVoters")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "option_id", int = function.optionId)
            put(key = "offset", int = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetPreferredCountryLanguage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPreferredCountryLanguage")
            put(key = "@extra", long = requestId)
            put(key = "country_code", string = function.countryCode)
        }
    }

    private fun serialize(requestId: Long, function: GetPremiumFeatures): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPremiumFeatures")
            put(key = "@extra", long = requestId)
            put(key = "source", value = function.source) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetPremiumGiftPaymentOptions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPremiumGiftPaymentOptions")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetPremiumGiveawayPaymentOptions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPremiumGiveawayPaymentOptions")
            put(key = "@extra", long = requestId)
            put(key = "boosted_chat_id", long = function.boostedChatId)
        }
    }

    private fun serialize(requestId: Long, function: GetPremiumInfoSticker): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPremiumInfoSticker")
            put(key = "@extra", long = requestId)
            put(key = "month_count", int = function.monthCount)
        }
    }

    private fun serialize(requestId: Long, function: GetPremiumLimit): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPremiumLimit")
            put(key = "@extra", long = requestId)
            put(key = "limit_type", value = function.limitType) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetPremiumState): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPremiumState")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetPremiumStickerExamples): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPremiumStickerExamples")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetPremiumStickers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPremiumStickers")
            put(key = "@extra", long = requestId)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetPreparedInlineMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPreparedInlineMessage")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "prepared_message_id", string = function.preparedMessageId)
        }
    }

    private fun serialize(requestId: Long, function: GetProxies): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getProxies")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetProxyLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getProxyLink")
            put(key = "@extra", long = requestId)
            put(key = "proxy_id", int = function.proxyId)
        }
    }

    private fun serialize(requestId: Long, function: GetPushReceiverId): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getPushReceiverId")
            put(key = "@extra", long = requestId)
            put(key = "payload", string = function.payload)
        }
    }

    private fun serialize(requestId: Long, function: GetReadDatePrivacySettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getReadDatePrivacySettings")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetReceivedGift): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getReceivedGift")
            put(key = "@extra", long = requestId)
            put(key = "received_gift_id", string = function.receivedGiftId)
        }
    }

    private fun serialize(requestId: Long, function: GetReceivedGifts): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getReceivedGifts")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "owner_id", value = function.ownerId) { data -> serialize(dto = data) }
            put(key = "exclude_unsaved", boolean = function.excludeUnsaved)
            put(key = "exclude_saved", boolean = function.excludeSaved)
            put(key = "exclude_unlimited", boolean = function.excludeUnlimited)
            put(key = "exclude_limited", boolean = function.excludeLimited)
            put(key = "exclude_upgraded", boolean = function.excludeUpgraded)
            put(key = "sort_by_price", boolean = function.sortByPrice)
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetRecentEmojiStatuses): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getRecentEmojiStatuses")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetRecentInlineBots): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getRecentInlineBots")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetRecentStickers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getRecentStickers")
            put(key = "@extra", long = requestId)
            put(key = "is_attached", boolean = function.isAttached)
        }
    }

    private fun serialize(requestId: Long, function: GetRecentlyOpenedChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getRecentlyOpenedChats")
            put(key = "@extra", long = requestId)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetRecentlyVisitedTMeUrls): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getRecentlyVisitedTMeUrls")
            put(key = "@extra", long = requestId)
            put(key = "referrer", string = function.referrer)
        }
    }

    private fun serialize(requestId: Long, function: GetRecommendedChatFolders): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getRecommendedChatFolders")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetRecommendedChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getRecommendedChats")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetRecoveryEmailAddress): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getRecoveryEmailAddress")
            put(key = "@extra", long = requestId)
            put(key = "password", string = function.password)
        }
    }

    private fun serialize(requestId: Long, function: GetRemoteFile): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getRemoteFile")
            put(key = "@extra", long = requestId)
            put(key = "remote_file_id", string = function.remoteFileId)
            put(key = "file_type", value = function.fileType) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetRepliedMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getRepliedMessage")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: GetSavedAnimations): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSavedAnimations")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetSavedMessagesTags): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSavedMessagesTags")
            put(key = "@extra", long = requestId)
            put(key = "saved_messages_topic_id", long = function.savedMessagesTopicId)
        }
    }

    private fun serialize(requestId: Long, function: GetSavedMessagesTopicHistory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSavedMessagesTopicHistory")
            put(key = "@extra", long = requestId)
            put(key = "saved_messages_topic_id", long = function.savedMessagesTopicId)
            put(key = "from_message_id", long = function.fromMessageId)
            put(key = "offset", int = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetSavedMessagesTopicMessageByDate): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSavedMessagesTopicMessageByDate")
            put(key = "@extra", long = requestId)
            put(key = "saved_messages_topic_id", long = function.savedMessagesTopicId)
            put(key = "date", int = function.date)
        }
    }

    private fun serialize(requestId: Long, function: GetSavedNotificationSound): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSavedNotificationSound")
            put(key = "@extra", long = requestId)
            put(key = "notification_sound_id", long = function.notificationSoundId)
        }
    }

    private fun serialize(requestId: Long, function: GetSavedNotificationSounds): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSavedNotificationSounds")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetSavedOrderInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSavedOrderInfo")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetScopeNotificationSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getScopeNotificationSettings")
            put(key = "@extra", long = requestId)
            put(key = "scope", value = function.scope) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetSearchSponsoredChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSearchSponsoredChats")
            put(key = "@extra", long = requestId)
            put(key = "query", string = function.query)
        }
    }

    private fun serialize(requestId: Long, function: GetSearchedForTags): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSearchedForTags")
            put(key = "@extra", long = requestId)
            put(key = "tag_prefix", string = function.tagPrefix)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetSecretChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSecretChat")
            put(key = "@extra", long = requestId)
            put(key = "secret_chat_id", int = function.secretChatId)
        }
    }

    private fun serialize(requestId: Long, function: GetStarAdAccountUrl): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStarAdAccountUrl")
            put(key = "@extra", long = requestId)
            put(key = "owner_id", value = function.ownerId) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetStarGiftPaymentOptions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStarGiftPaymentOptions")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
        }
    }

    private fun serialize(requestId: Long, function: GetStarGiveawayPaymentOptions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStarGiveawayPaymentOptions")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetStarPaymentOptions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStarPaymentOptions")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetStarRevenueStatistics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStarRevenueStatistics")
            put(key = "@extra", long = requestId)
            put(key = "owner_id", value = function.ownerId) { data -> serialize(dto = data) }
            put(key = "is_dark", boolean = function.isDark)
        }
    }

    private fun serialize(requestId: Long, function: GetStarSubscriptions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStarSubscriptions")
            put(key = "@extra", long = requestId)
            put(key = "only_expiring", boolean = function.onlyExpiring)
            put(key = "offset", string = function.offset)
        }
    }

    private fun serialize(requestId: Long, function: GetStarTransactions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStarTransactions")
            put(key = "@extra", long = requestId)
            put(key = "owner_id", value = function.ownerId) { data -> serialize(dto = data) }
            put(key = "subscription_id", string = function.subscriptionId)
            put(key = "direction", value = function.direction) { data -> serialize(dto = data) }
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetStarWithdrawalUrl): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStarWithdrawalUrl")
            put(key = "@extra", long = requestId)
            put(key = "owner_id", value = function.ownerId) { data -> serialize(dto = data) }
            put(key = "star_count", long = function.starCount)
            put(key = "password", string = function.password)
        }
    }

    private fun serialize(requestId: Long, function: GetStatisticalGraph): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStatisticalGraph")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "token", string = function.token)
            put(key = "x", long = function.x)
        }
    }

    private fun serialize(requestId: Long, function: GetStickerEmojis): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStickerEmojis")
            put(key = "@extra", long = requestId)
            put(key = "sticker", value = function.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetStickerOutline): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStickerOutline")
            put(key = "@extra", long = requestId)
            put(key = "sticker_file_id", int = function.stickerFileId)
            put(key = "for_animated_emoji", boolean = function.forAnimatedEmoji)
            put(key = "for_clicked_animated_emoji_message", boolean = function.forClickedAnimatedEmojiMessage)
        }
    }

    private fun serialize(requestId: Long, function: GetStickerSet): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStickerSet")
            put(key = "@extra", long = requestId)
            put(key = "set_id", long = function.setId)
        }
    }

    private fun serialize(requestId: Long, function: GetStickerSetName): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStickerSetName")
            put(key = "@extra", long = requestId)
            put(key = "set_id", long = function.setId)
        }
    }

    private fun serialize(requestId: Long, function: GetStickers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStickers")
            put(key = "@extra", long = requestId)
            put(key = "sticker_type", value = function.stickerType) { data -> serialize(dto = data) }
            put(key = "query", string = function.query)
            put(key = "limit", int = function.limit)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetStorageStatistics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStorageStatistics")
            put(key = "@extra", long = requestId)
            put(key = "chat_limit", int = function.chatLimit)
        }
    }

    private fun serialize(requestId: Long, function: GetStorageStatisticsFast): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStorageStatisticsFast")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetStory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStory")
            put(key = "@extra", long = requestId)
            put(key = "story_poster_chat_id", long = function.storyPosterChatId)
            put(key = "story_id", int = function.storyId)
            put(key = "only_local", boolean = function.onlyLocal)
        }
    }

    private fun serialize(requestId: Long, function: GetStoryAvailableReactions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStoryAvailableReactions")
            put(key = "@extra", long = requestId)
            put(key = "row_size", int = function.rowSize)
        }
    }

    private fun serialize(requestId: Long, function: GetStoryInteractions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStoryInteractions")
            put(key = "@extra", long = requestId)
            put(key = "story_id", int = function.storyId)
            put(key = "query", string = function.query)
            put(key = "only_contacts", boolean = function.onlyContacts)
            put(key = "prefer_forwards", boolean = function.preferForwards)
            put(key = "prefer_with_reaction", boolean = function.preferWithReaction)
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetStoryNotificationSettingsExceptions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStoryNotificationSettingsExceptions")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetStoryPublicForwards): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStoryPublicForwards")
            put(key = "@extra", long = requestId)
            put(key = "story_poster_chat_id", long = function.storyPosterChatId)
            put(key = "story_id", int = function.storyId)
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetStoryStatistics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getStoryStatistics")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "story_id", int = function.storyId)
            put(key = "is_dark", boolean = function.isDark)
        }
    }

    private fun serialize(requestId: Long, function: GetSuggestedFileName): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSuggestedFileName")
            put(key = "@extra", long = requestId)
            put(key = "file_id", int = function.fileId)
            put(key = "directory", string = function.directory)
        }
    }

    private fun serialize(requestId: Long, function: GetSuggestedStickerSetName): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSuggestedStickerSetName")
            put(key = "@extra", long = requestId)
            put(key = "title", string = function.title)
        }
    }

    private fun serialize(requestId: Long, function: GetSuitableDiscussionChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSuitableDiscussionChats")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetSuitablePersonalChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSuitablePersonalChats")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetSupergroup): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSupergroup")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
        }
    }

    private fun serialize(requestId: Long, function: GetSupergroupFullInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSupergroupFullInfo")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
        }
    }

    private fun serialize(requestId: Long, function: GetSupergroupMembers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSupergroupMembers")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "filter", value = function.filter) { data -> serialize(dto = data) }
            put(key = "offset", int = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetSupportName): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSupportName")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetSupportUser): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getSupportUser")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetTemporaryPasswordState): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getTemporaryPasswordState")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetTextEntities): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getTextEntities")
            put(key = "@extra", long = requestId)
            put(key = "text", string = function.text)
        }
    }

    private fun serialize(requestId: Long, function: GetThemeParametersJsonString): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getThemeParametersJsonString")
            put(key = "@extra", long = requestId)
            put(key = "theme", value = function.theme) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetThemedChatEmojiStatuses): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getThemedChatEmojiStatuses")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetThemedEmojiStatuses): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getThemedEmojiStatuses")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetTimeZones): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getTimeZones")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetTopChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getTopChats")
            put(key = "@extra", long = requestId)
            put(key = "category", value = function.category) { data -> serialize(dto = data) }
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetTrendingStickerSets): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getTrendingStickerSets")
            put(key = "@extra", long = requestId)
            put(key = "sticker_type", value = function.stickerType) { data -> serialize(dto = data) }
            put(key = "offset", int = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetUpgradedGift): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getUpgradedGift")
            put(key = "@extra", long = requestId)
            put(key = "name", string = function.name)
        }
    }

    private fun serialize(requestId: Long, function: GetUpgradedGiftEmojiStatuses): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getUpgradedGiftEmojiStatuses")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetUpgradedGiftWithdrawalUrl): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getUpgradedGiftWithdrawalUrl")
            put(key = "@extra", long = requestId)
            put(key = "received_gift_id", string = function.receivedGiftId)
            put(key = "password", string = function.password)
        }
    }

    private fun serialize(requestId: Long, function: GetUser): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getUser")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
        }
    }

    private fun serialize(requestId: Long, function: GetUserChatBoosts): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getUserChatBoosts")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "user_id", long = function.userId)
        }
    }

    private fun serialize(requestId: Long, function: GetUserFullInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getUserFullInfo")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
        }
    }

    private fun serialize(requestId: Long, function: GetUserLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getUserLink")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: GetUserPrivacySettingRules): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getUserPrivacySettingRules")
            put(key = "@extra", long = requestId)
            put(key = "setting", value = function.setting) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetUserProfilePhotos): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getUserProfilePhotos")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "offset", int = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: GetUserSupportInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getUserSupportInfo")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
        }
    }

    private fun serialize(requestId: Long, function: GetVideoChatAvailableParticipants): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getVideoChatAvailableParticipants")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetVideoChatInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getVideoChatInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "can_self_unmute", boolean = function.canSelfUnmute)
        }
    }

    private fun serialize(requestId: Long, function: GetVideoChatRtmpUrl): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getVideoChatRtmpUrl")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: GetVideoChatStreamSegment): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getVideoChatStreamSegment")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "time_offset", long = function.timeOffset)
            put(key = "scale", int = function.scale)
            put(key = "channel_id", int = function.channelId)
            put(key = "video_quality", value = function.videoQuality) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetVideoChatStreams): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getVideoChatStreams")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
        }
    }

    private fun serialize(requestId: Long, function: GetVideoMessageAdvertisements): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getVideoMessageAdvertisements")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: GetWebAppLinkUrl): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getWebAppLinkUrl")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "web_app_short_name", string = function.webAppShortName)
            put(key = "start_parameter", string = function.startParameter)
            put(key = "allow_write_access", boolean = function.allowWriteAccess)
            put(key = "parameters", value = function.parameters) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetWebAppPlaceholder): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getWebAppPlaceholder")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
        }
    }

    private fun serialize(requestId: Long, function: GetWebAppUrl): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getWebAppUrl")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "url", string = function.url)
            put(key = "parameters", value = function.parameters) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: GetWebPageInstantView): String {
        return buildJsonObjectString {
            put(key = "@type", string = "getWebPageInstantView")
            put(key = "@extra", long = requestId)
            put(key = "url", string = function.url)
            put(key = "only_local", boolean = function.onlyLocal)
        }
    }

    private fun serialize(requestId: Long, function: GiftPremiumWithStars): String {
        return buildJsonObjectString {
            put(key = "@type", string = "giftPremiumWithStars")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "star_count", long = function.starCount)
            put(key = "month_count", int = function.monthCount)
            put(key = "text", value = function.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: HideContactCloseBirthdays): String {
        return buildJsonObjectString {
            put(key = "@type", string = "hideContactCloseBirthdays")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: HideSuggestedAction): String {
        return buildJsonObjectString {
            put(key = "@type", string = "hideSuggestedAction")
            put(key = "@extra", long = requestId)
            put(key = "action", value = function.action) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: ImportContacts): String {
        return buildJsonObjectString {
            put(key = "@type", string = "importContacts")
            put(key = "@extra", long = requestId)
            put(key = "contacts", objects = function.contacts) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: ImportMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "importMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_file", value = function.messageFile) { data -> serialize(dto = data) }
            put(key = "attached_files", objects = function.attachedFiles) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: InviteGroupCallParticipant): String {
        return buildJsonObjectString {
            put(key = "@type", string = "inviteGroupCallParticipant")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "user_id", long = function.userId)
            put(key = "is_video", boolean = function.isVideo)
        }
    }

    private fun serialize(requestId: Long, function: InviteVideoChatParticipants): String {
        return buildJsonObjectString {
            put(key = "@type", string = "inviteVideoChatParticipants")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "user_ids", longs = function.userIds)
        }
    }

    private fun serialize(requestId: Long, function: JoinChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "joinChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: JoinChatByInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "joinChatByInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "invite_link", string = function.inviteLink)
        }
    }

    private fun serialize(requestId: Long, function: JoinGroupCall): String {
        return buildJsonObjectString {
            put(key = "@type", string = "joinGroupCall")
            put(key = "@extra", long = requestId)
            put(key = "input_group_call", value = function.inputGroupCall) { data -> serialize(dto = data) }
            put(key = "join_parameters", value = function.joinParameters) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: JoinVideoChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "joinVideoChat")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "participant_id", value = function.participantId) { data -> serialize(dto = data) }
            put(key = "join_parameters", value = function.joinParameters) { data -> serialize(dto = data) }
            put(key = "invite_hash", string = function.inviteHash)
        }
    }

    private fun serialize(requestId: Long, function: LaunchPrepaidGiveaway): String {
        return buildJsonObjectString {
            put(key = "@type", string = "launchPrepaidGiveaway")
            put(key = "@extra", long = requestId)
            put(key = "giveaway_id", long = function.giveawayId)
            put(key = "parameters", value = function.parameters) { data -> serialize(dto = data) }
            put(key = "winner_count", int = function.winnerCount)
            put(key = "star_count", long = function.starCount)
        }
    }

    private fun serialize(requestId: Long, function: LeaveChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "leaveChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: LeaveGroupCall): String {
        return buildJsonObjectString {
            put(key = "@type", string = "leaveGroupCall")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
        }
    }

    private fun serialize(requestId: Long, function: LoadActiveStories): String {
        return buildJsonObjectString {
            put(key = "@type", string = "loadActiveStories")
            put(key = "@extra", long = requestId)
            put(key = "story_list", value = function.storyList) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: LoadChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "loadChats")
            put(key = "@extra", long = requestId)
            put(key = "chat_list", value = function.chatList) { data -> serialize(dto = data) }
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: LoadDirectMessagesChatTopics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "loadDirectMessagesChatTopics")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: LoadGroupCallParticipants): String {
        return buildJsonObjectString {
            put(key = "@type", string = "loadGroupCallParticipants")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: LoadQuickReplyShortcutMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "loadQuickReplyShortcutMessages")
            put(key = "@extra", long = requestId)
            put(key = "shortcut_id", int = function.shortcutId)
        }
    }

    private fun serialize(requestId: Long, function: LoadQuickReplyShortcuts): String {
        return buildJsonObjectString {
            put(key = "@type", string = "loadQuickReplyShortcuts")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: LoadSavedMessagesTopics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "loadSavedMessagesTopics")
            put(key = "@extra", long = requestId)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: LogOut): String {
        return buildJsonObjectString {
            put(key = "@type", string = "logOut")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: MarkChecklistTasksAsDone): String {
        return buildJsonObjectString {
            put(key = "@type", string = "markChecklistTasksAsDone")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "marked_as_done_task_ids", ints = function.markedAsDoneTaskIds)
            put(key = "marked_as_not_done_task_ids", ints = function.markedAsNotDoneTaskIds)
        }
    }

    private fun serialize(requestId: Long, function: OpenBotSimilarBot): String {
        return buildJsonObjectString {
            put(key = "@type", string = "openBotSimilarBot")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "opened_bot_user_id", long = function.openedBotUserId)
        }
    }

    private fun serialize(requestId: Long, function: OpenChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "openChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: OpenChatSimilarChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "openChatSimilarChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "opened_chat_id", long = function.openedChatId)
        }
    }

    private fun serialize(requestId: Long, function: OpenMessageContent): String {
        return buildJsonObjectString {
            put(key = "@type", string = "openMessageContent")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: OpenSponsoredChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "openSponsoredChat")
            put(key = "@extra", long = requestId)
            put(key = "sponsored_chat_unique_id", long = function.sponsoredChatUniqueId)
        }
    }

    private fun serialize(requestId: Long, function: OpenStory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "openStory")
            put(key = "@extra", long = requestId)
            put(key = "story_poster_chat_id", long = function.storyPosterChatId)
            put(key = "story_id", int = function.storyId)
        }
    }

    private fun serialize(requestId: Long, function: OpenWebApp): String {
        return buildJsonObjectString {
            put(key = "@type", string = "openWebApp")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "url", string = function.url)
            put(key = "message_thread_id", long = function.messageThreadId)
            put(key = "direct_messages_chat_topic_id", long = function.directMessagesChatTopicId)
            put(key = "reply_to", value = function.replyTo) { data -> serialize(dto = data) }
            put(key = "parameters", value = function.parameters) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: OptimizeStorage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "optimizeStorage")
            put(key = "@extra", long = requestId)
            put(key = "size", long = function.size)
            put(key = "ttl", int = function.ttl)
            put(key = "count", int = function.count)
            put(key = "immunity_delay", int = function.immunityDelay)
            put(key = "file_types", objects = function.fileTypes) { data -> serialize(dto = data) }
            put(key = "chat_ids", longs = function.chatIds)
            put(key = "exclude_chat_ids", longs = function.excludeChatIds)
            put(key = "return_deleted_file_statistics", boolean = function.returnDeletedFileStatistics)
            put(key = "chat_limit", int = function.chatLimit)
        }
    }

    private fun serialize(requestId: Long, function: ParseMarkdown): String {
        return buildJsonObjectString {
            put(key = "@type", string = "parseMarkdown")
            put(key = "@extra", long = requestId)
            put(key = "text", value = function.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: ParseTextEntities): String {
        return buildJsonObjectString {
            put(key = "@type", string = "parseTextEntities")
            put(key = "@extra", long = requestId)
            put(key = "text", string = function.text)
            put(key = "parse_mode", value = function.parseMode) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: PinChatMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "pinChatMessage")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "disable_notification", boolean = function.disableNotification)
            put(key = "only_for_self", boolean = function.onlyForSelf)
        }
    }

    private fun serialize(requestId: Long, function: PingProxy): String {
        return buildJsonObjectString {
            put(key = "@type", string = "pingProxy")
            put(key = "@extra", long = requestId)
            put(key = "proxy_id", int = function.proxyId)
        }
    }

    private fun serialize(requestId: Long, function: PostStory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "postStory")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "content", value = function.content) { data -> serialize(dto = data) }
            put(key = "areas", value = function.areas) { data -> serialize(dto = data) }
            put(key = "caption", value = function.caption) { data -> serialize(dto = data) }
            put(key = "privacy_settings", value = function.privacySettings) { data -> serialize(dto = data) }
            put(key = "active_period", int = function.activePeriod)
            put(key = "from_story_full_id", value = function.fromStoryFullId) { data -> serialize(dto = data) }
            put(key = "is_posted_to_chat_page", boolean = function.isPostedToChatPage)
            put(key = "protect_content", boolean = function.protectContent)
        }
    }

    private fun serialize(requestId: Long, function: PreliminaryUploadFile): String {
        return buildJsonObjectString {
            put(key = "@type", string = "preliminaryUploadFile")
            put(key = "@extra", long = requestId)
            put(key = "file", value = function.file) { data -> serialize(dto = data) }
            put(key = "file_type", value = function.fileType) { data -> serialize(dto = data) }
            put(key = "priority", int = function.priority)
        }
    }

    private fun serialize(requestId: Long, function: ProcessChatFolderNewChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "processChatFolderNewChats")
            put(key = "@extra", long = requestId)
            put(key = "chat_folder_id", int = function.chatFolderId)
            put(key = "added_chat_ids", longs = function.addedChatIds)
        }
    }

    private fun serialize(requestId: Long, function: ProcessChatJoinRequest): String {
        return buildJsonObjectString {
            put(key = "@type", string = "processChatJoinRequest")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "user_id", long = function.userId)
            put(key = "approve", boolean = function.approve)
        }
    }

    private fun serialize(requestId: Long, function: ProcessChatJoinRequests): String {
        return buildJsonObjectString {
            put(key = "@type", string = "processChatJoinRequests")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "invite_link", string = function.inviteLink)
            put(key = "approve", boolean = function.approve)
        }
    }

    private fun serialize(requestId: Long, function: ProcessPushNotification): String {
        return buildJsonObjectString {
            put(key = "@type", string = "processPushNotification")
            put(key = "@extra", long = requestId)
            put(key = "payload", string = function.payload)
        }
    }

    private fun serialize(requestId: Long, function: RateSpeechRecognition): String {
        return buildJsonObjectString {
            put(key = "@type", string = "rateSpeechRecognition")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "is_good", boolean = function.isGood)
        }
    }

    private fun serialize(requestId: Long, function: ReadAllChatMentions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "readAllChatMentions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: ReadAllChatReactions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "readAllChatReactions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: ReadAllDirectMessagesChatTopicReactions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "readAllDirectMessagesChatTopicReactions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", long = function.topicId)
        }
    }

    private fun serialize(requestId: Long, function: ReadAllMessageThreadMentions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "readAllMessageThreadMentions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
        }
    }

    private fun serialize(requestId: Long, function: ReadAllMessageThreadReactions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "readAllMessageThreadReactions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
        }
    }

    private fun serialize(requestId: Long, function: ReadBusinessMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "readBusinessMessage")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: ReadChatList): String {
        return buildJsonObjectString {
            put(key = "@type", string = "readChatList")
            put(key = "@extra", long = requestId)
            put(key = "chat_list", value = function.chatList) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: ReadFilePart): String {
        return buildJsonObjectString {
            put(key = "@type", string = "readFilePart")
            put(key = "@extra", long = requestId)
            put(key = "file_id", int = function.fileId)
            put(key = "offset", long = function.offset)
            put(key = "count", long = function.count)
        }
    }

    private fun serialize(requestId: Long, function: ReaddQuickReplyShortcutMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "readdQuickReplyShortcutMessages")
            put(key = "@extra", long = requestId)
            put(key = "shortcut_name", string = function.shortcutName)
            put(key = "message_ids", longs = function.messageIds)
        }
    }

    private fun serialize(requestId: Long, function: RecognizeSpeech): String {
        return buildJsonObjectString {
            put(key = "@type", string = "recognizeSpeech")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: RecoverAuthenticationPassword): String {
        return buildJsonObjectString {
            put(key = "@type", string = "recoverAuthenticationPassword")
            put(key = "@extra", long = requestId)
            put(key = "recovery_code", string = function.recoveryCode)
            put(key = "new_password", string = function.newPassword)
            put(key = "new_hint", string = function.newHint)
        }
    }

    private fun serialize(requestId: Long, function: RecoverPassword): String {
        return buildJsonObjectString {
            put(key = "@type", string = "recoverPassword")
            put(key = "@extra", long = requestId)
            put(key = "recovery_code", string = function.recoveryCode)
            put(key = "new_password", string = function.newPassword)
            put(key = "new_hint", string = function.newHint)
        }
    }

    private fun serialize(requestId: Long, function: RefundStarPayment): String {
        return buildJsonObjectString {
            put(key = "@type", string = "refundStarPayment")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "telegram_payment_charge_id", string = function.telegramPaymentChargeId)
        }
    }

    private fun serialize(requestId: Long, function: RegisterDevice): String {
        return buildJsonObjectString {
            put(key = "@type", string = "registerDevice")
            put(key = "@extra", long = requestId)
            put(key = "device_token", value = function.deviceToken) { data -> serialize(dto = data) }
            put(key = "other_user_ids", longs = function.otherUserIds)
        }
    }

    private fun serialize(requestId: Long, function: RegisterUser): String {
        return buildJsonObjectString {
            put(key = "@type", string = "registerUser")
            put(key = "@extra", long = requestId)
            put(key = "first_name", string = function.firstName)
            put(key = "last_name", string = function.lastName)
            put(key = "disable_notification", boolean = function.disableNotification)
        }
    }

    private fun serialize(requestId: Long, function: RemoveAllFilesFromDownloads): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeAllFilesFromDownloads")
            put(key = "@extra", long = requestId)
            put(key = "only_active", boolean = function.onlyActive)
            put(key = "only_completed", boolean = function.onlyCompleted)
            put(key = "delete_from_cache", boolean = function.deleteFromCache)
        }
    }

    private fun serialize(requestId: Long, function: RemoveBusinessConnectedBotFromChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeBusinessConnectedBotFromChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: RemoveChatActionBar): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeChatActionBar")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: RemoveContacts): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeContacts")
            put(key = "@extra", long = requestId)
            put(key = "user_ids", longs = function.userIds)
        }
    }

    private fun serialize(requestId: Long, function: RemoveFavoriteSticker): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeFavoriteSticker")
            put(key = "@extra", long = requestId)
            put(key = "sticker", value = function.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: RemoveFileFromDownloads): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeFileFromDownloads")
            put(key = "@extra", long = requestId)
            put(key = "file_id", int = function.fileId)
            put(key = "delete_from_cache", boolean = function.deleteFromCache)
        }
    }

    private fun serialize(requestId: Long, function: RemoveInstalledBackground): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeInstalledBackground")
            put(key = "@extra", long = requestId)
            put(key = "background_id", long = function.backgroundId)
        }
    }

    private fun serialize(requestId: Long, function: RemoveMessageReaction): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeMessageReaction")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reaction_type", value = function.reactionType) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: RemoveMessageSenderBotVerification): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeMessageSenderBotVerification")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "verified_id", value = function.verifiedId) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: RemoveNotification): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeNotification")
            put(key = "@extra", long = requestId)
            put(key = "notification_group_id", int = function.notificationGroupId)
            put(key = "notification_id", int = function.notificationId)
        }
    }

    private fun serialize(requestId: Long, function: RemoveNotificationGroup): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeNotificationGroup")
            put(key = "@extra", long = requestId)
            put(key = "notification_group_id", int = function.notificationGroupId)
            put(key = "max_notification_id", int = function.maxNotificationId)
        }
    }

    private fun serialize(requestId: Long, function: RemovePendingPaidMessageReactions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removePendingPaidMessageReactions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: RemoveProxy): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeProxy")
            put(key = "@extra", long = requestId)
            put(key = "proxy_id", int = function.proxyId)
        }
    }

    private fun serialize(requestId: Long, function: RemoveRecentHashtag): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeRecentHashtag")
            put(key = "@extra", long = requestId)
            put(key = "hashtag", string = function.hashtag)
        }
    }

    private fun serialize(requestId: Long, function: RemoveRecentSticker): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeRecentSticker")
            put(key = "@extra", long = requestId)
            put(key = "is_attached", boolean = function.isAttached)
            put(key = "sticker", value = function.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: RemoveRecentlyFoundChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeRecentlyFoundChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: RemoveSavedAnimation): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeSavedAnimation")
            put(key = "@extra", long = requestId)
            put(key = "animation", value = function.animation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: RemoveSavedNotificationSound): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeSavedNotificationSound")
            put(key = "@extra", long = requestId)
            put(key = "notification_sound_id", long = function.notificationSoundId)
        }
    }

    private fun serialize(requestId: Long, function: RemoveSearchedForTag): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeSearchedForTag")
            put(key = "@extra", long = requestId)
            put(key = "tag", string = function.tag)
        }
    }

    private fun serialize(requestId: Long, function: RemoveStickerFromSet): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeStickerFromSet")
            put(key = "@extra", long = requestId)
            put(key = "sticker", value = function.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: RemoveTopChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "removeTopChat")
            put(key = "@extra", long = requestId)
            put(key = "category", value = function.category) { data -> serialize(dto = data) }
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: ReorderActiveUsernames): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reorderActiveUsernames")
            put(key = "@extra", long = requestId)
            put(key = "usernames", strings = function.usernames)
        }
    }

    private fun serialize(requestId: Long, function: ReorderBotActiveUsernames): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reorderBotActiveUsernames")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "usernames", strings = function.usernames)
        }
    }

    private fun serialize(requestId: Long, function: ReorderBotMediaPreviews): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reorderBotMediaPreviews")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "language_code", string = function.languageCode)
            put(key = "file_ids", ints = function.fileIds)
        }
    }

    private fun serialize(requestId: Long, function: ReorderChatFolders): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reorderChatFolders")
            put(key = "@extra", long = requestId)
            put(key = "chat_folder_ids", ints = function.chatFolderIds)
            put(key = "main_chat_list_position", int = function.mainChatListPosition)
        }
    }

    private fun serialize(requestId: Long, function: ReorderInstalledStickerSets): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reorderInstalledStickerSets")
            put(key = "@extra", long = requestId)
            put(key = "sticker_type", value = function.stickerType) { data -> serialize(dto = data) }
            put(key = "sticker_set_ids", longs = function.stickerSetIds)
        }
    }

    private fun serialize(requestId: Long, function: ReorderQuickReplyShortcuts): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reorderQuickReplyShortcuts")
            put(key = "@extra", long = requestId)
            put(key = "shortcut_ids", ints = function.shortcutIds)
        }
    }

    private fun serialize(requestId: Long, function: ReorderSupergroupActiveUsernames): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reorderSupergroupActiveUsernames")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "usernames", strings = function.usernames)
        }
    }

    private fun serialize(requestId: Long, function: ReplacePrimaryChatInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "replacePrimaryChatInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: ReplaceStickerInSet): String {
        return buildJsonObjectString {
            put(key = "@type", string = "replaceStickerInSet")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "name", string = function.name)
            put(key = "old_sticker", value = function.oldSticker) { data -> serialize(dto = data) }
            put(key = "new_sticker", value = function.newSticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: ReplaceVideoChatRtmpUrl): String {
        return buildJsonObjectString {
            put(key = "@type", string = "replaceVideoChatRtmpUrl")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: ReportAuthenticationCodeMissing): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reportAuthenticationCodeMissing")
            put(key = "@extra", long = requestId)
            put(key = "mobile_network_code", string = function.mobileNetworkCode)
        }
    }

    private fun serialize(requestId: Long, function: ReportChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reportChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "option_id", bytes = function.optionId)
            put(key = "message_ids", longs = function.messageIds)
            put(key = "text", string = function.text)
        }
    }

    private fun serialize(requestId: Long, function: ReportChatPhoto): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reportChatPhoto")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "file_id", int = function.fileId)
            put(key = "reason", value = function.reason) { data -> serialize(dto = data) }
            put(key = "text", string = function.text)
        }
    }

    private fun serialize(requestId: Long, function: ReportChatSponsoredMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reportChatSponsoredMessage")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "option_id", bytes = function.optionId)
        }
    }

    private fun serialize(requestId: Long, function: ReportMessageReactions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reportMessageReactions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "sender_id", value = function.senderId) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: ReportPhoneNumberCodeMissing): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reportPhoneNumberCodeMissing")
            put(key = "@extra", long = requestId)
            put(key = "mobile_network_code", string = function.mobileNetworkCode)
        }
    }

    private fun serialize(requestId: Long, function: ReportSponsoredChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reportSponsoredChat")
            put(key = "@extra", long = requestId)
            put(key = "sponsored_chat_unique_id", long = function.sponsoredChatUniqueId)
            put(key = "option_id", bytes = function.optionId)
        }
    }

    private fun serialize(requestId: Long, function: ReportStory): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reportStory")
            put(key = "@extra", long = requestId)
            put(key = "story_poster_chat_id", long = function.storyPosterChatId)
            put(key = "story_id", int = function.storyId)
            put(key = "option_id", bytes = function.optionId)
            put(key = "text", string = function.text)
        }
    }

    private fun serialize(requestId: Long, function: ReportSupergroupAntiSpamFalsePositive): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reportSupergroupAntiSpamFalsePositive")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: ReportSupergroupSpam): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reportSupergroupSpam")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "message_ids", longs = function.messageIds)
        }
    }

    private fun serialize(requestId: Long, function: ReportVideoMessageAdvertisement): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reportVideoMessageAdvertisement")
            put(key = "@extra", long = requestId)
            put(key = "advertisement_unique_id", long = function.advertisementUniqueId)
            put(key = "option_id", bytes = function.optionId)
        }
    }

    private fun serialize(requestId: Long, function: RequestAuthenticationPasswordRecovery): String {
        return buildJsonObjectString {
            put(key = "@type", string = "requestAuthenticationPasswordRecovery")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: RequestPasswordRecovery): String {
        return buildJsonObjectString {
            put(key = "@type", string = "requestPasswordRecovery")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: RequestQrCodeAuthentication): String {
        return buildJsonObjectString {
            put(key = "@type", string = "requestQrCodeAuthentication")
            put(key = "@extra", long = requestId)
            put(key = "other_user_ids", longs = function.otherUserIds)
        }
    }

    private fun serialize(requestId: Long, function: ResendAuthenticationCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "resendAuthenticationCode")
            put(key = "@extra", long = requestId)
            put(key = "reason", value = function.reason) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: ResendEmailAddressVerificationCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "resendEmailAddressVerificationCode")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ResendLoginEmailAddressCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "resendLoginEmailAddressCode")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ResendMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "resendMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_ids", longs = function.messageIds)
            put(key = "quote", value = function.quote) { data -> serialize(dto = data) }
            put(key = "paid_message_star_count", long = function.paidMessageStarCount)
        }
    }

    private fun serialize(requestId: Long, function: ResendPhoneNumberCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "resendPhoneNumberCode")
            put(key = "@extra", long = requestId)
            put(key = "reason", value = function.reason) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: ResendRecoveryEmailAddressCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "resendRecoveryEmailAddressCode")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ResetAllNotificationSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "resetAllNotificationSettings")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ResetAuthenticationEmailAddress): String {
        return buildJsonObjectString {
            put(key = "@type", string = "resetAuthenticationEmailAddress")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ResetInstalledBackgrounds): String {
        return buildJsonObjectString {
            put(key = "@type", string = "resetInstalledBackgrounds")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ResetNetworkStatistics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "resetNetworkStatistics")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ResetPassword): String {
        return buildJsonObjectString {
            put(key = "@type", string = "resetPassword")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ReuseStarSubscription): String {
        return buildJsonObjectString {
            put(key = "@type", string = "reuseStarSubscription")
            put(key = "@extra", long = requestId)
            put(key = "subscription_id", string = function.subscriptionId)
        }
    }

    private fun serialize(requestId: Long, function: RevokeChatInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "revokeChatInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "invite_link", string = function.inviteLink)
        }
    }

    private fun serialize(requestId: Long, function: RevokeGroupCallInviteLink): String {
        return buildJsonObjectString {
            put(key = "@type", string = "revokeGroupCallInviteLink")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
        }
    }

    private fun serialize(requestId: Long, function: SaveApplicationLogEvent): String {
        return buildJsonObjectString {
            put(key = "@type", string = "saveApplicationLogEvent")
            put(key = "@extra", long = requestId)
            put(key = "type", string = function.type)
            put(key = "chat_id", long = function.chatId)
            put(key = "data", value = function.data) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SavePreparedInlineMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "savePreparedInlineMessage")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "result", value = function.result) { data -> serialize(dto = data) }
            put(key = "chat_types", value = function.chatTypes) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SearchAffiliatePrograms): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchAffiliatePrograms")
            put(key = "@extra", long = requestId)
            put(key = "affiliate", value = function.affiliate) { data -> serialize(dto = data) }
            put(key = "sort_order", value = function.sortOrder) { data -> serialize(dto = data) }
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchBackground): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchBackground")
            put(key = "@extra", long = requestId)
            put(key = "name", string = function.name)
        }
    }

    private fun serialize(requestId: Long, function: SearchCallMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchCallMessages")
            put(key = "@extra", long = requestId)
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
            put(key = "only_missed", boolean = function.onlyMissed)
        }
    }

    private fun serialize(requestId: Long, function: SearchChatAffiliateProgram): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchChatAffiliateProgram")
            put(key = "@extra", long = requestId)
            put(key = "username", string = function.username)
            put(key = "referrer", string = function.referrer)
        }
    }

    private fun serialize(requestId: Long, function: SearchChatMembers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchChatMembers")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "query", string = function.query)
            put(key = "limit", int = function.limit)
            put(key = "filter", value = function.filter) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SearchChatMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchChatMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", value = function.topicId) { data -> serialize(dto = data) }
            put(key = "query", string = function.query)
            put(key = "sender_id", value = function.senderId) { data -> serialize(dto = data) }
            put(key = "from_message_id", long = function.fromMessageId)
            put(key = "offset", int = function.offset)
            put(key = "limit", int = function.limit)
            put(key = "filter", value = function.filter) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SearchChatRecentLocationMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchChatRecentLocationMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchChats")
            put(key = "@extra", long = requestId)
            put(key = "query", string = function.query)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchChatsOnServer): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchChatsOnServer")
            put(key = "@extra", long = requestId)
            put(key = "query", string = function.query)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchContacts): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchContacts")
            put(key = "@extra", long = requestId)
            put(key = "query", string = function.query)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchEmojis): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchEmojis")
            put(key = "@extra", long = requestId)
            put(key = "text", string = function.text)
            put(key = "input_language_codes", strings = function.inputLanguageCodes)
        }
    }

    private fun serialize(requestId: Long, function: SearchFileDownloads): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchFileDownloads")
            put(key = "@extra", long = requestId)
            put(key = "query", string = function.query)
            put(key = "only_active", boolean = function.onlyActive)
            put(key = "only_completed", boolean = function.onlyCompleted)
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchGiftsForResale): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchGiftsForResale")
            put(key = "@extra", long = requestId)
            put(key = "gift_id", long = function.giftId)
            put(key = "order", value = function.order) { data -> serialize(dto = data) }
            put(key = "attributes", objects = function.attributes) { data -> serialize(dto = data) }
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchHashtags): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchHashtags")
            put(key = "@extra", long = requestId)
            put(key = "prefix", string = function.prefix)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchInstalledStickerSets): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchInstalledStickerSets")
            put(key = "@extra", long = requestId)
            put(key = "sticker_type", value = function.stickerType) { data -> serialize(dto = data) }
            put(key = "query", string = function.query)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_list", value = function.chatList) { data -> serialize(dto = data) }
            put(key = "query", string = function.query)
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
            put(key = "filter", value = function.filter) { data -> serialize(dto = data) }
            put(key = "chat_type_filter", value = function.chatTypeFilter) { data -> serialize(dto = data) }
            put(key = "min_date", int = function.minDate)
            put(key = "max_date", int = function.maxDate)
        }
    }

    private fun serialize(requestId: Long, function: SearchOutgoingDocumentMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchOutgoingDocumentMessages")
            put(key = "@extra", long = requestId)
            put(key = "query", string = function.query)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchPublicChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchPublicChat")
            put(key = "@extra", long = requestId)
            put(key = "username", string = function.username)
        }
    }

    private fun serialize(requestId: Long, function: SearchPublicChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchPublicChats")
            put(key = "@extra", long = requestId)
            put(key = "query", string = function.query)
        }
    }

    private fun serialize(requestId: Long, function: SearchPublicMessagesByTag): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchPublicMessagesByTag")
            put(key = "@extra", long = requestId)
            put(key = "tag", string = function.tag)
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchPublicStoriesByLocation): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchPublicStoriesByLocation")
            put(key = "@extra", long = requestId)
            put(key = "address", value = function.address) { data -> serialize(dto = data) }
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchPublicStoriesByTag): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchPublicStoriesByTag")
            put(key = "@extra", long = requestId)
            put(key = "story_poster_chat_id", long = function.storyPosterChatId)
            put(key = "tag", string = function.tag)
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchPublicStoriesByVenue): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchPublicStoriesByVenue")
            put(key = "@extra", long = requestId)
            put(key = "venue_provider", string = function.venueProvider)
            put(key = "venue_id", string = function.venueId)
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchQuote): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchQuote")
            put(key = "@extra", long = requestId)
            put(key = "text", value = function.text) { data -> serialize(dto = data) }
            put(key = "quote", value = function.quote) { data -> serialize(dto = data) }
            put(key = "quote_position", int = function.quotePosition)
        }
    }

    private fun serialize(requestId: Long, function: SearchRecentlyFoundChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchRecentlyFoundChats")
            put(key = "@extra", long = requestId)
            put(key = "query", string = function.query)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchSavedMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchSavedMessages")
            put(key = "@extra", long = requestId)
            put(key = "saved_messages_topic_id", long = function.savedMessagesTopicId)
            put(key = "tag", value = function.tag) { data -> serialize(dto = data) }
            put(key = "query", string = function.query)
            put(key = "from_message_id", long = function.fromMessageId)
            put(key = "offset", int = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchSecretMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchSecretMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "query", string = function.query)
            put(key = "offset", string = function.offset)
            put(key = "limit", int = function.limit)
            put(key = "filter", value = function.filter) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SearchStickerSet): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchStickerSet")
            put(key = "@extra", long = requestId)
            put(key = "name", string = function.name)
            put(key = "ignore_cache", boolean = function.ignoreCache)
        }
    }

    private fun serialize(requestId: Long, function: SearchStickerSets): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchStickerSets")
            put(key = "@extra", long = requestId)
            put(key = "sticker_type", value = function.stickerType) { data -> serialize(dto = data) }
            put(key = "query", string = function.query)
        }
    }

    private fun serialize(requestId: Long, function: SearchStickers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchStickers")
            put(key = "@extra", long = requestId)
            put(key = "sticker_type", value = function.stickerType) { data -> serialize(dto = data) }
            put(key = "emojis", string = function.emojis)
            put(key = "query", string = function.query)
            put(key = "input_language_codes", strings = function.inputLanguageCodes)
            put(key = "offset", int = function.offset)
            put(key = "limit", int = function.limit)
        }
    }

    private fun serialize(requestId: Long, function: SearchStringsByPrefix): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchStringsByPrefix")
            put(key = "@extra", long = requestId)
            put(key = "strings", strings = function.strings)
            put(key = "query", string = function.query)
            put(key = "limit", int = function.limit)
            put(key = "return_none_for_empty_query", boolean = function.returnNoneForEmptyQuery)
        }
    }

    private fun serialize(requestId: Long, function: SearchUserByPhoneNumber): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchUserByPhoneNumber")
            put(key = "@extra", long = requestId)
            put(key = "phone_number", string = function.phoneNumber)
            put(key = "only_local", boolean = function.onlyLocal)
        }
    }

    private fun serialize(requestId: Long, function: SearchUserByToken): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchUserByToken")
            put(key = "@extra", long = requestId)
            put(key = "token", string = function.token)
        }
    }

    private fun serialize(requestId: Long, function: SearchWebApp): String {
        return buildJsonObjectString {
            put(key = "@type", string = "searchWebApp")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "web_app_short_name", string = function.webAppShortName)
        }
    }

    private fun serialize(requestId: Long, function: SellGift): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sellGift")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "received_gift_id", string = function.receivedGiftId)
        }
    }

    private fun serialize(requestId: Long, function: SendAuthenticationFirebaseSms): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendAuthenticationFirebaseSms")
            put(key = "@extra", long = requestId)
            put(key = "token", string = function.token)
        }
    }

    private fun serialize(requestId: Long, function: SendBotStartMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendBotStartMessage")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "chat_id", long = function.chatId)
            put(key = "parameter", string = function.parameter)
        }
    }

    private fun serialize(requestId: Long, function: SendBusinessMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendBusinessMessage")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "chat_id", long = function.chatId)
            put(key = "reply_to", value = function.replyTo) { data -> serialize(dto = data) }
            put(key = "disable_notification", boolean = function.disableNotification)
            put(key = "protect_content", boolean = function.protectContent)
            put(key = "effect_id", long = function.effectId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = function.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SendBusinessMessageAlbum): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendBusinessMessageAlbum")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "chat_id", long = function.chatId)
            put(key = "reply_to", value = function.replyTo) { data -> serialize(dto = data) }
            put(key = "disable_notification", boolean = function.disableNotification)
            put(key = "protect_content", boolean = function.protectContent)
            put(key = "effect_id", long = function.effectId)
            put(key = "input_message_contents", objects = function.inputMessageContents) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SendCallDebugInformation): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendCallDebugInformation")
            put(key = "@extra", long = requestId)
            put(key = "call_id", int = function.callId)
            put(key = "debug_information", string = function.debugInformation)
        }
    }

    private fun serialize(requestId: Long, function: SendCallLog): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendCallLog")
            put(key = "@extra", long = requestId)
            put(key = "call_id", int = function.callId)
            put(key = "log_file", value = function.logFile) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SendCallRating): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendCallRating")
            put(key = "@extra", long = requestId)
            put(key = "call_id", int = function.callId)
            put(key = "rating", int = function.rating)
            put(key = "comment", string = function.comment)
            put(key = "problems", objects = function.problems) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SendCallSignalingData): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendCallSignalingData")
            put(key = "@extra", long = requestId)
            put(key = "call_id", int = function.callId)
            put(key = "data", bytes = function.data)
        }
    }

    private fun serialize(requestId: Long, function: SendChatAction): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendChatAction")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "action", value = function.action) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SendCustomRequest): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendCustomRequest")
            put(key = "@extra", long = requestId)
            put(key = "method", string = function.method)
            put(key = "parameters", string = function.parameters)
        }
    }

    private fun serialize(requestId: Long, function: SendEmailAddressVerificationCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendEmailAddressVerificationCode")
            put(key = "@extra", long = requestId)
            put(key = "email_address", string = function.emailAddress)
        }
    }

    private fun serialize(requestId: Long, function: SendGift): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendGift")
            put(key = "@extra", long = requestId)
            put(key = "gift_id", long = function.giftId)
            put(key = "owner_id", value = function.ownerId) { data -> serialize(dto = data) }
            put(key = "text", value = function.text) { data -> serialize(dto = data) }
            put(key = "is_private", boolean = function.isPrivate)
            put(key = "pay_for_upgrade", boolean = function.payForUpgrade)
        }
    }

    private fun serialize(requestId: Long, function: SendInlineQueryResultMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendInlineQueryResultMessage")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
            put(key = "reply_to", value = function.replyTo) { data -> serialize(dto = data) }
            put(key = "options", value = function.options) { data -> serialize(dto = data) }
            put(key = "query_id", long = function.queryId)
            put(key = "result_id", string = function.resultId)
            put(key = "hide_via_bot", boolean = function.hideViaBot)
        }
    }

    private fun serialize(requestId: Long, function: SendMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendMessage")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
            put(key = "reply_to", value = function.replyTo) { data -> serialize(dto = data) }
            put(key = "options", value = function.options) { data -> serialize(dto = data) }
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = function.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SendMessageAlbum): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendMessageAlbum")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
            put(key = "reply_to", value = function.replyTo) { data -> serialize(dto = data) }
            put(key = "options", value = function.options) { data -> serialize(dto = data) }
            put(key = "input_message_contents", objects = function.inputMessageContents) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SendPassportAuthorizationForm): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendPassportAuthorizationForm")
            put(key = "@extra", long = requestId)
            put(key = "authorization_form_id", int = function.authorizationFormId)
            put(key = "types", objects = function.types) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SendPaymentForm): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendPaymentForm")
            put(key = "@extra", long = requestId)
            put(key = "input_invoice", value = function.inputInvoice) { data -> serialize(dto = data) }
            put(key = "payment_form_id", long = function.paymentFormId)
            put(key = "order_info_id", string = function.orderInfoId)
            put(key = "shipping_option_id", string = function.shippingOptionId)
            put(key = "credentials", value = function.credentials) { data -> serialize(dto = data) }
            put(key = "tip_amount", long = function.tipAmount)
        }
    }

    private fun serialize(requestId: Long, function: SendPhoneNumberCode): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendPhoneNumberCode")
            put(key = "@extra", long = requestId)
            put(key = "phone_number", string = function.phoneNumber)
            put(key = "settings", value = function.settings) { data -> serialize(dto = data) }
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SendPhoneNumberFirebaseSms): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendPhoneNumberFirebaseSms")
            put(key = "@extra", long = requestId)
            put(key = "token", string = function.token)
        }
    }

    private fun serialize(requestId: Long, function: SendQuickReplyShortcutMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendQuickReplyShortcutMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "shortcut_id", int = function.shortcutId)
            put(key = "sending_id", int = function.sendingId)
        }
    }

    private fun serialize(requestId: Long, function: SendResoldGift): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendResoldGift")
            put(key = "@extra", long = requestId)
            put(key = "gift_name", string = function.giftName)
            put(key = "owner_id", value = function.ownerId) { data -> serialize(dto = data) }
            put(key = "star_count", long = function.starCount)
        }
    }

    private fun serialize(requestId: Long, function: SendWebAppCustomRequest): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendWebAppCustomRequest")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "method", string = function.method)
            put(key = "parameters", string = function.parameters)
        }
    }

    private fun serialize(requestId: Long, function: SendWebAppData): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sendWebAppData")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "button_text", string = function.buttonText)
            put(key = "data", string = function.data)
        }
    }

    private fun serialize(requestId: Long, function: SetAccentColor): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setAccentColor")
            put(key = "@extra", long = requestId)
            put(key = "accent_color_id", int = function.accentColorId)
            put(key = "background_custom_emoji_id", long = function.backgroundCustomEmojiId)
        }
    }

    private fun serialize(requestId: Long, function: SetAccountTtl): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setAccountTtl")
            put(key = "@extra", long = requestId)
            put(key = "ttl", value = function.ttl) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetAlarm): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setAlarm")
            put(key = "@extra", long = requestId)
            put(key = "seconds", double = function.seconds)
        }
    }

    private fun serialize(requestId: Long, function: SetApplicationVerificationToken): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setApplicationVerificationToken")
            put(key = "@extra", long = requestId)
            put(key = "verification_id", long = function.verificationId)
            put(key = "token", string = function.token)
        }
    }

    private fun serialize(requestId: Long, function: SetArchiveChatListSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setArchiveChatListSettings")
            put(key = "@extra", long = requestId)
            put(key = "settings", value = function.settings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetAuthenticationEmailAddress): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setAuthenticationEmailAddress")
            put(key = "@extra", long = requestId)
            put(key = "email_address", string = function.emailAddress)
        }
    }

    private fun serialize(requestId: Long, function: SetAuthenticationPhoneNumber): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setAuthenticationPhoneNumber")
            put(key = "@extra", long = requestId)
            put(key = "phone_number", string = function.phoneNumber)
            put(key = "settings", value = function.settings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetAuthenticationPremiumPurchaseTransaction): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setAuthenticationPremiumPurchaseTransaction")
            put(key = "@extra", long = requestId)
            put(key = "transaction", value = function.transaction) { data -> serialize(dto = data) }
            put(key = "is_restore", boolean = function.isRestore)
            put(key = "currency", string = function.currency)
            put(key = "amount", long = function.amount)
        }
    }

    private fun serialize(requestId: Long, function: SetAutoDownloadSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setAutoDownloadSettings")
            put(key = "@extra", long = requestId)
            put(key = "settings", value = function.settings) { data -> serialize(dto = data) }
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetAutosaveSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setAutosaveSettings")
            put(key = "@extra", long = requestId)
            put(key = "scope", value = function.scope) { data -> serialize(dto = data) }
            put(key = "settings", value = function.settings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetBio): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBio")
            put(key = "@extra", long = requestId)
            put(key = "bio", string = function.bio)
        }
    }

    private fun serialize(requestId: Long, function: SetBirthdate): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBirthdate")
            put(key = "@extra", long = requestId)
            put(key = "birthdate", value = function.birthdate) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetBotInfoDescription): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBotInfoDescription")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "language_code", string = function.languageCode)
            put(key = "description", string = function.description)
        }
    }

    private fun serialize(requestId: Long, function: SetBotInfoShortDescription): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBotInfoShortDescription")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "language_code", string = function.languageCode)
            put(key = "short_description", string = function.shortDescription)
        }
    }

    private fun serialize(requestId: Long, function: SetBotName): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBotName")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "language_code", string = function.languageCode)
            put(key = "name", string = function.name)
        }
    }

    private fun serialize(requestId: Long, function: SetBotProfilePhoto): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBotProfilePhoto")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "photo", value = function.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetBotUpdatesStatus): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBotUpdatesStatus")
            put(key = "@extra", long = requestId)
            put(key = "pending_update_count", int = function.pendingUpdateCount)
            put(key = "error_message", string = function.errorMessage)
        }
    }

    private fun serialize(requestId: Long, function: SetBusinessAccountBio): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBusinessAccountBio")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "bio", string = function.bio)
        }
    }

    private fun serialize(requestId: Long, function: SetBusinessAccountGiftSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBusinessAccountGiftSettings")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "settings", value = function.settings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetBusinessAccountName): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBusinessAccountName")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "first_name", string = function.firstName)
            put(key = "last_name", string = function.lastName)
        }
    }

    private fun serialize(requestId: Long, function: SetBusinessAccountProfilePhoto): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBusinessAccountProfilePhoto")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "photo", value = function.photo) { data -> serialize(dto = data) }
            put(key = "is_public", boolean = function.isPublic)
        }
    }

    private fun serialize(requestId: Long, function: SetBusinessAccountUsername): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBusinessAccountUsername")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "username", string = function.username)
        }
    }

    private fun serialize(requestId: Long, function: SetBusinessAwayMessageSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBusinessAwayMessageSettings")
            put(key = "@extra", long = requestId)
            put(key = "away_message_settings", value = function.awayMessageSettings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetBusinessConnectedBot): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBusinessConnectedBot")
            put(key = "@extra", long = requestId)
            put(key = "bot", value = function.bot) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetBusinessGreetingMessageSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBusinessGreetingMessageSettings")
            put(key = "@extra", long = requestId)
            put(key = "greeting_message_settings", value = function.greetingMessageSettings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetBusinessLocation): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBusinessLocation")
            put(key = "@extra", long = requestId)
            put(key = "location", value = function.location) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetBusinessMessageIsPinned): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBusinessMessageIsPinned")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "is_pinned", boolean = function.isPinned)
        }
    }

    private fun serialize(requestId: Long, function: SetBusinessOpeningHours): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBusinessOpeningHours")
            put(key = "@extra", long = requestId)
            put(key = "opening_hours", value = function.openingHours) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetBusinessStartPage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setBusinessStartPage")
            put(key = "@extra", long = requestId)
            put(key = "start_page", value = function.startPage) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetChatAccentColor): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatAccentColor")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "accent_color_id", int = function.accentColorId)
            put(key = "background_custom_emoji_id", long = function.backgroundCustomEmojiId)
        }
    }

    private fun serialize(requestId: Long, function: SetChatActiveStoriesList): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatActiveStoriesList")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "story_list", value = function.storyList) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetChatAffiliateProgram): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatAffiliateProgram")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "parameters", value = function.parameters) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetChatAvailableReactions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatAvailableReactions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "available_reactions", value = function.availableReactions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetChatBackground): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatBackground")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "background", value = function.background) { data -> serialize(dto = data) }
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
            put(key = "dark_theme_dimming", int = function.darkThemeDimming)
            put(key = "only_for_self", boolean = function.onlyForSelf)
        }
    }

    private fun serialize(requestId: Long, function: SetChatClientData): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatClientData")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "client_data", string = function.clientData)
        }
    }

    private fun serialize(requestId: Long, function: SetChatDescription): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatDescription")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "description", string = function.description)
        }
    }

    private fun serialize(requestId: Long, function: SetChatDirectMessagesGroup): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatDirectMessagesGroup")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "is_enabled", boolean = function.isEnabled)
            put(key = "paid_message_star_count", long = function.paidMessageStarCount)
        }
    }

    private fun serialize(requestId: Long, function: SetChatDiscussionGroup): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatDiscussionGroup")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "discussion_chat_id", long = function.discussionChatId)
        }
    }

    private fun serialize(requestId: Long, function: SetChatDraftMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatDraftMessage")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
            put(key = "draft_message", value = function.draftMessage) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetChatEmojiStatus): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatEmojiStatus")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "emoji_status", value = function.emojiStatus) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetChatLocation): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatLocation")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "location", value = function.location) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetChatMemberStatus): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatMemberStatus")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "member_id", value = function.memberId) { data -> serialize(dto = data) }
            put(key = "status", value = function.status) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetChatMessageAutoDeleteTime): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatMessageAutoDeleteTime")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_auto_delete_time", int = function.messageAutoDeleteTime)
        }
    }

    private fun serialize(requestId: Long, function: SetChatMessageSender): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatMessageSender")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_sender_id", value = function.messageSenderId) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetChatNotificationSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatNotificationSettings")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "notification_settings", value = function.notificationSettings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetChatPaidMessageStarCount): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatPaidMessageStarCount")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "paid_message_star_count", long = function.paidMessageStarCount)
        }
    }

    private fun serialize(requestId: Long, function: SetChatPermissions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatPermissions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "permissions", value = function.permissions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetChatPhoto): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatPhoto")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "photo", value = function.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetChatPinnedStories): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatPinnedStories")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "story_ids", ints = function.storyIds)
        }
    }

    private fun serialize(requestId: Long, function: SetChatProfileAccentColor): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatProfileAccentColor")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "profile_accent_color_id", int = function.profileAccentColorId)
            put(key = "profile_background_custom_emoji_id", long = function.profileBackgroundCustomEmojiId)
        }
    }

    private fun serialize(requestId: Long, function: SetChatSlowModeDelay): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatSlowModeDelay")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "slow_mode_delay", int = function.slowModeDelay)
        }
    }

    private fun serialize(requestId: Long, function: SetChatTheme): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatTheme")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "theme_name", string = function.themeName)
        }
    }

    private fun serialize(requestId: Long, function: SetChatTitle): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setChatTitle")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "title", string = function.title)
        }
    }

    private fun serialize(requestId: Long, function: SetCloseFriends): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setCloseFriends")
            put(key = "@extra", long = requestId)
            put(key = "user_ids", longs = function.userIds)
        }
    }

    private fun serialize(requestId: Long, function: SetCommands): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setCommands")
            put(key = "@extra", long = requestId)
            put(key = "scope", value = function.scope) { data -> serialize(dto = data) }
            put(key = "language_code", string = function.languageCode)
            put(key = "commands", objects = function.commands) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetCustomEmojiStickerSetThumbnail): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setCustomEmojiStickerSetThumbnail")
            put(key = "@extra", long = requestId)
            put(key = "name", string = function.name)
            put(key = "custom_emoji_id", long = function.customEmojiId)
        }
    }

    private fun serialize(requestId: Long, function: SetCustomLanguagePack): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setCustomLanguagePack")
            put(key = "@extra", long = requestId)
            put(key = "info", value = function.info) { data -> serialize(dto = data) }
            put(key = "strings", objects = function.strings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetCustomLanguagePackString): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setCustomLanguagePackString")
            put(key = "@extra", long = requestId)
            put(key = "language_pack_id", string = function.languagePackId)
            put(key = "new_string", value = function.newString) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetDatabaseEncryptionKey): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setDatabaseEncryptionKey")
            put(key = "@extra", long = requestId)
            put(key = "new_encryption_key", bytes = function.newEncryptionKey)
        }
    }

    private fun serialize(requestId: Long, function: SetDefaultBackground): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setDefaultBackground")
            put(key = "@extra", long = requestId)
            put(key = "background", value = function.background) { data -> serialize(dto = data) }
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
            put(key = "for_dark_theme", boolean = function.forDarkTheme)
        }
    }

    private fun serialize(requestId: Long, function: SetDefaultChannelAdministratorRights): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setDefaultChannelAdministratorRights")
            put(key = "@extra", long = requestId)
            put(key = "default_channel_administrator_rights", value = function.defaultChannelAdministratorRights) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetDefaultGroupAdministratorRights): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setDefaultGroupAdministratorRights")
            put(key = "@extra", long = requestId)
            put(key = "default_group_administrator_rights", value = function.defaultGroupAdministratorRights) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetDefaultMessageAutoDeleteTime): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setDefaultMessageAutoDeleteTime")
            put(key = "@extra", long = requestId)
            put(key = "message_auto_delete_time", value = function.messageAutoDeleteTime) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetDefaultReactionType): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setDefaultReactionType")
            put(key = "@extra", long = requestId)
            put(key = "reaction_type", value = function.reactionType) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetDirectMessagesChatTopicDraftMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setDirectMessagesChatTopicDraftMessage")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", long = function.topicId)
            put(key = "draft_message", value = function.draftMessage) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetDirectMessagesChatTopicIsMarkedAsUnread): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setDirectMessagesChatTopicIsMarkedAsUnread")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", long = function.topicId)
            put(key = "is_marked_as_unread", boolean = function.isMarkedAsUnread)
        }
    }

    private fun serialize(requestId: Long, function: SetEmojiStatus): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setEmojiStatus")
            put(key = "@extra", long = requestId)
            put(key = "emoji_status", value = function.emojiStatus) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetFileGenerationProgress): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setFileGenerationProgress")
            put(key = "@extra", long = requestId)
            put(key = "generation_id", long = function.generationId)
            put(key = "expected_size", long = function.expectedSize)
            put(key = "local_prefix_size", long = function.localPrefixSize)
        }
    }

    private fun serialize(requestId: Long, function: SetForumTopicNotificationSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setForumTopicNotificationSettings")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
            put(key = "notification_settings", value = function.notificationSettings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetGameScore): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setGameScore")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "edit_message", boolean = function.editMessage)
            put(key = "user_id", long = function.userId)
            put(key = "score", int = function.score)
            put(key = "force", boolean = function.force)
        }
    }

    private fun serialize(requestId: Long, function: SetGiftResalePrice): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setGiftResalePrice")
            put(key = "@extra", long = requestId)
            put(key = "received_gift_id", string = function.receivedGiftId)
            put(key = "resale_star_count", long = function.resaleStarCount)
        }
    }

    private fun serialize(requestId: Long, function: SetGiftSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setGiftSettings")
            put(key = "@extra", long = requestId)
            put(key = "settings", value = function.settings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetGroupCallParticipantIsSpeaking): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setGroupCallParticipantIsSpeaking")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "audio_source", int = function.audioSource)
            put(key = "is_speaking", boolean = function.isSpeaking)
        }
    }

    private fun serialize(requestId: Long, function: SetGroupCallParticipantVolumeLevel): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setGroupCallParticipantVolumeLevel")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "participant_id", value = function.participantId) { data -> serialize(dto = data) }
            put(key = "volume_level", int = function.volumeLevel)
        }
    }

    private fun serialize(requestId: Long, function: SetInactiveSessionTtl): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setInactiveSessionTtl")
            put(key = "@extra", long = requestId)
            put(key = "inactive_session_ttl_days", int = function.inactiveSessionTtlDays)
        }
    }

    private fun serialize(requestId: Long, function: SetInlineGameScore): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setInlineGameScore")
            put(key = "@extra", long = requestId)
            put(key = "inline_message_id", string = function.inlineMessageId)
            put(key = "edit_message", boolean = function.editMessage)
            put(key = "user_id", long = function.userId)
            put(key = "score", int = function.score)
            put(key = "force", boolean = function.force)
        }
    }

    private fun serialize(requestId: Long, function: SetLogStream): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setLogStream")
            put(key = "@extra", long = requestId)
            put(key = "log_stream", value = function.logStream) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetLogTagVerbosityLevel): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setLogTagVerbosityLevel")
            put(key = "@extra", long = requestId)
            put(key = "tag", string = function.tag)
            put(key = "new_verbosity_level", int = function.newVerbosityLevel)
        }
    }

    private fun serialize(requestId: Long, function: SetLogVerbosityLevel): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setLogVerbosityLevel")
            put(key = "@extra", long = requestId)
            put(key = "new_verbosity_level", int = function.newVerbosityLevel)
        }
    }

    private fun serialize(requestId: Long, function: SetLoginEmailAddress): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setLoginEmailAddress")
            put(key = "@extra", long = requestId)
            put(key = "new_login_email_address", string = function.newLoginEmailAddress)
        }
    }

    private fun serialize(requestId: Long, function: SetMenuButton): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setMenuButton")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "menu_button", value = function.menuButton) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetMessageFactCheck): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setMessageFactCheck")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "text", value = function.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetMessageReactions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setMessageReactions")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reaction_types", objects = function.reactionTypes) { data -> serialize(dto = data) }
            put(key = "is_big", boolean = function.isBig)
        }
    }

    private fun serialize(requestId: Long, function: SetMessageSenderBlockList): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setMessageSenderBlockList")
            put(key = "@extra", long = requestId)
            put(key = "sender_id", value = function.senderId) { data -> serialize(dto = data) }
            put(key = "block_list", value = function.blockList) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetMessageSenderBotVerification): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setMessageSenderBotVerification")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "verified_id", value = function.verifiedId) { data -> serialize(dto = data) }
            put(key = "custom_description", string = function.customDescription)
        }
    }

    private fun serialize(requestId: Long, function: SetName): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setName")
            put(key = "@extra", long = requestId)
            put(key = "first_name", string = function.firstName)
            put(key = "last_name", string = function.lastName)
        }
    }

    private fun serialize(requestId: Long, function: SetNetworkType): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setNetworkType")
            put(key = "@extra", long = requestId)
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetNewChatPrivacySettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setNewChatPrivacySettings")
            put(key = "@extra", long = requestId)
            put(key = "settings", value = function.settings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetOption): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setOption")
            put(key = "@extra", long = requestId)
            put(key = "name", string = function.name)
            put(key = "value", value = function.value) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetPaidMessageReactionType): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setPaidMessageReactionType")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetPassportElement): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setPassportElement")
            put(key = "@extra", long = requestId)
            put(key = "element", value = function.element) { data -> serialize(dto = data) }
            put(key = "password", string = function.password)
        }
    }

    private fun serialize(requestId: Long, function: SetPassportElementErrors): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setPassportElementErrors")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "errors", objects = function.errors) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetPassword): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setPassword")
            put(key = "@extra", long = requestId)
            put(key = "old_password", string = function.oldPassword)
            put(key = "new_password", string = function.newPassword)
            put(key = "new_hint", string = function.newHint)
            put(key = "set_recovery_email_address", boolean = function.setRecoveryEmailAddress)
            put(key = "new_recovery_email_address", string = function.newRecoveryEmailAddress)
        }
    }

    private fun serialize(requestId: Long, function: SetPersonalChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setPersonalChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: SetPinnedChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setPinnedChats")
            put(key = "@extra", long = requestId)
            put(key = "chat_list", value = function.chatList) { data -> serialize(dto = data) }
            put(key = "chat_ids", longs = function.chatIds)
        }
    }

    private fun serialize(requestId: Long, function: SetPinnedForumTopics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setPinnedForumTopics")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_ids", longs = function.messageThreadIds)
        }
    }

    private fun serialize(requestId: Long, function: SetPinnedGifts): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setPinnedGifts")
            put(key = "@extra", long = requestId)
            put(key = "owner_id", value = function.ownerId) { data -> serialize(dto = data) }
            put(key = "received_gift_ids", strings = function.receivedGiftIds)
        }
    }

    private fun serialize(requestId: Long, function: SetPinnedSavedMessagesTopics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setPinnedSavedMessagesTopics")
            put(key = "@extra", long = requestId)
            put(key = "saved_messages_topic_ids", longs = function.savedMessagesTopicIds)
        }
    }

    private fun serialize(requestId: Long, function: SetPollAnswer): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setPollAnswer")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "option_ids", ints = function.optionIds)
        }
    }

    private fun serialize(requestId: Long, function: SetProfileAccentColor): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setProfileAccentColor")
            put(key = "@extra", long = requestId)
            put(key = "profile_accent_color_id", int = function.profileAccentColorId)
            put(key = "profile_background_custom_emoji_id", long = function.profileBackgroundCustomEmojiId)
        }
    }

    private fun serialize(requestId: Long, function: SetProfilePhoto): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setProfilePhoto")
            put(key = "@extra", long = requestId)
            put(key = "photo", value = function.photo) { data -> serialize(dto = data) }
            put(key = "is_public", boolean = function.isPublic)
        }
    }

    private fun serialize(requestId: Long, function: SetQuickReplyShortcutName): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setQuickReplyShortcutName")
            put(key = "@extra", long = requestId)
            put(key = "shortcut_id", int = function.shortcutId)
            put(key = "name", string = function.name)
        }
    }

    private fun serialize(requestId: Long, function: SetReactionNotificationSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setReactionNotificationSettings")
            put(key = "@extra", long = requestId)
            put(key = "notification_settings", value = function.notificationSettings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetReadDatePrivacySettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setReadDatePrivacySettings")
            put(key = "@extra", long = requestId)
            put(key = "settings", value = function.settings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetRecoveryEmailAddress): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setRecoveryEmailAddress")
            put(key = "@extra", long = requestId)
            put(key = "password", string = function.password)
            put(key = "new_recovery_email_address", string = function.newRecoveryEmailAddress)
        }
    }

    private fun serialize(requestId: Long, function: SetSavedMessagesTagLabel): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setSavedMessagesTagLabel")
            put(key = "@extra", long = requestId)
            put(key = "tag", value = function.tag) { data -> serialize(dto = data) }
            put(key = "label", string = function.label)
        }
    }

    private fun serialize(requestId: Long, function: SetScopeNotificationSettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setScopeNotificationSettings")
            put(key = "@extra", long = requestId)
            put(key = "scope", value = function.scope) { data -> serialize(dto = data) }
            put(key = "notification_settings", value = function.notificationSettings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetStickerEmojis): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setStickerEmojis")
            put(key = "@extra", long = requestId)
            put(key = "sticker", value = function.sticker) { data -> serialize(dto = data) }
            put(key = "emojis", string = function.emojis)
        }
    }

    private fun serialize(requestId: Long, function: SetStickerKeywords): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setStickerKeywords")
            put(key = "@extra", long = requestId)
            put(key = "sticker", value = function.sticker) { data -> serialize(dto = data) }
            put(key = "keywords", strings = function.keywords)
        }
    }

    private fun serialize(requestId: Long, function: SetStickerMaskPosition): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setStickerMaskPosition")
            put(key = "@extra", long = requestId)
            put(key = "sticker", value = function.sticker) { data -> serialize(dto = data) }
            put(key = "mask_position", value = function.maskPosition) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetStickerPositionInSet): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setStickerPositionInSet")
            put(key = "@extra", long = requestId)
            put(key = "sticker", value = function.sticker) { data -> serialize(dto = data) }
            put(key = "position", int = function.position)
        }
    }

    private fun serialize(requestId: Long, function: SetStickerSetThumbnail): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setStickerSetThumbnail")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "name", string = function.name)
            put(key = "thumbnail", value = function.thumbnail) { data -> serialize(dto = data) }
            put(key = "format", value = function.format) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetStickerSetTitle): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setStickerSetTitle")
            put(key = "@extra", long = requestId)
            put(key = "name", string = function.name)
            put(key = "title", string = function.title)
        }
    }

    private fun serialize(requestId: Long, function: SetStoryPrivacySettings): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setStoryPrivacySettings")
            put(key = "@extra", long = requestId)
            put(key = "story_id", int = function.storyId)
            put(key = "privacy_settings", value = function.privacySettings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetStoryReaction): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setStoryReaction")
            put(key = "@extra", long = requestId)
            put(key = "story_poster_chat_id", long = function.storyPosterChatId)
            put(key = "story_id", int = function.storyId)
            put(key = "reaction_type", value = function.reactionType) { data -> serialize(dto = data) }
            put(key = "update_recent_reactions", boolean = function.updateRecentReactions)
        }
    }

    private fun serialize(requestId: Long, function: SetSupergroupCustomEmojiStickerSet): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setSupergroupCustomEmojiStickerSet")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "custom_emoji_sticker_set_id", long = function.customEmojiStickerSetId)
        }
    }

    private fun serialize(requestId: Long, function: SetSupergroupStickerSet): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setSupergroupStickerSet")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "sticker_set_id", long = function.stickerSetId)
        }
    }

    private fun serialize(requestId: Long, function: SetSupergroupUnrestrictBoostCount): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setSupergroupUnrestrictBoostCount")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "unrestrict_boost_count", int = function.unrestrictBoostCount)
        }
    }

    private fun serialize(requestId: Long, function: SetSupergroupUsername): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setSupergroupUsername")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "username", string = function.username)
        }
    }

    private fun serialize(requestId: Long, function: SetTdlibParameters): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setTdlibParameters")
            put(key = "@extra", long = requestId)
            put(key = "use_test_dc", boolean = function.useTestDc)
            put(key = "database_directory", string = function.databaseDirectory)
            put(key = "files_directory", string = function.filesDirectory)
            put(key = "database_encryption_key", bytes = function.databaseEncryptionKey)
            put(key = "use_file_database", boolean = function.useFileDatabase)
            put(key = "use_chat_info_database", boolean = function.useChatInfoDatabase)
            put(key = "use_message_database", boolean = function.useMessageDatabase)
            put(key = "use_secret_chats", boolean = function.useSecretChats)
            put(key = "api_id", int = function.apiId)
            put(key = "api_hash", string = function.apiHash)
            put(key = "system_language_code", string = function.systemLanguageCode)
            put(key = "device_model", string = function.deviceModel)
            put(key = "system_version", string = function.systemVersion)
            put(key = "application_version", string = function.applicationVersion)
        }
    }

    private fun serialize(requestId: Long, function: SetUserEmojiStatus): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setUserEmojiStatus")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "emoji_status", value = function.emojiStatus) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetUserPersonalProfilePhoto): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setUserPersonalProfilePhoto")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "photo", value = function.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetUserPrivacySettingRules): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setUserPrivacySettingRules")
            put(key = "@extra", long = requestId)
            put(key = "setting", value = function.setting) { data -> serialize(dto = data) }
            put(key = "rules", value = function.rules) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetUserSupportInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setUserSupportInfo")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "message", value = function.message) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetUsername): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setUsername")
            put(key = "@extra", long = requestId)
            put(key = "username", string = function.username)
        }
    }

    private fun serialize(requestId: Long, function: SetVideoChatDefaultParticipant): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setVideoChatDefaultParticipant")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "default_participant_id", value = function.defaultParticipantId) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SetVideoChatTitle): String {
        return buildJsonObjectString {
            put(key = "@type", string = "setVideoChatTitle")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "title", string = function.title)
        }
    }

    private fun serialize(requestId: Long, function: ShareChatWithBot): String {
        return buildJsonObjectString {
            put(key = "@type", string = "shareChatWithBot")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "button_id", int = function.buttonId)
            put(key = "shared_chat_id", long = function.sharedChatId)
            put(key = "only_check", boolean = function.onlyCheck)
        }
    }

    private fun serialize(requestId: Long, function: SharePhoneNumber): String {
        return buildJsonObjectString {
            put(key = "@type", string = "sharePhoneNumber")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
        }
    }

    private fun serialize(requestId: Long, function: ShareUsersWithBot): String {
        return buildJsonObjectString {
            put(key = "@type", string = "shareUsersWithBot")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "button_id", int = function.buttonId)
            put(key = "shared_user_ids", longs = function.sharedUserIds)
            put(key = "only_check", boolean = function.onlyCheck)
        }
    }

    private fun serialize(requestId: Long, function: StartGroupCallRecording): String {
        return buildJsonObjectString {
            put(key = "@type", string = "startGroupCallRecording")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "title", string = function.title)
            put(key = "record_video", boolean = function.recordVideo)
            put(key = "use_portrait_orientation", boolean = function.usePortraitOrientation)
        }
    }

    private fun serialize(requestId: Long, function: StartGroupCallScreenSharing): String {
        return buildJsonObjectString {
            put(key = "@type", string = "startGroupCallScreenSharing")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "audio_source_id", int = function.audioSourceId)
            put(key = "payload", string = function.payload)
        }
    }

    private fun serialize(requestId: Long, function: StartScheduledVideoChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "startScheduledVideoChat")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
        }
    }

    private fun serialize(requestId: Long, function: StopBusinessPoll): String {
        return buildJsonObjectString {
            put(key = "@type", string = "stopBusinessPoll")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: StopPoll): String {
        return buildJsonObjectString {
            put(key = "@type", string = "stopPoll")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "reply_markup", value = function.replyMarkup) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SuggestUserProfilePhoto): String {
        return buildJsonObjectString {
            put(key = "@type", string = "suggestUserProfilePhoto")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "photo", value = function.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: SynchronizeLanguagePack): String {
        return buildJsonObjectString {
            put(key = "@type", string = "synchronizeLanguagePack")
            put(key = "@extra", long = requestId)
            put(key = "language_pack_id", string = function.languagePackId)
        }
    }

    private fun serialize(requestId: Long, function: TerminateAllOtherSessions): String {
        return buildJsonObjectString {
            put(key = "@type", string = "terminateAllOtherSessions")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: TerminateSession): String {
        return buildJsonObjectString {
            put(key = "@type", string = "terminateSession")
            put(key = "@extra", long = requestId)
            put(key = "session_id", long = function.sessionId)
        }
    }

    private fun serialize(requestId: Long, function: TestCallBytes): String {
        return buildJsonObjectString {
            put(key = "@type", string = "testCallBytes")
            put(key = "@extra", long = requestId)
            put(key = "x", bytes = function.x)
        }
    }

    private fun serialize(requestId: Long, function: TestCallEmpty): String {
        return buildJsonObjectString {
            put(key = "@type", string = "testCallEmpty")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: TestCallString): String {
        return buildJsonObjectString {
            put(key = "@type", string = "testCallString")
            put(key = "@extra", long = requestId)
            put(key = "x", string = function.x)
        }
    }

    private fun serialize(requestId: Long, function: TestCallVectorInt): String {
        return buildJsonObjectString {
            put(key = "@type", string = "testCallVectorInt")
            put(key = "@extra", long = requestId)
            put(key = "x", ints = function.x)
        }
    }

    private fun serialize(requestId: Long, function: TestCallVectorIntObject): String {
        return buildJsonObjectString {
            put(key = "@type", string = "testCallVectorIntObject")
            put(key = "@extra", long = requestId)
            put(key = "x", objects = function.x) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: TestCallVectorString): String {
        return buildJsonObjectString {
            put(key = "@type", string = "testCallVectorString")
            put(key = "@extra", long = requestId)
            put(key = "x", strings = function.x)
        }
    }

    private fun serialize(requestId: Long, function: TestCallVectorStringObject): String {
        return buildJsonObjectString {
            put(key = "@type", string = "testCallVectorStringObject")
            put(key = "@extra", long = requestId)
            put(key = "x", objects = function.x) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: TestGetDifference): String {
        return buildJsonObjectString {
            put(key = "@type", string = "testGetDifference")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: TestNetwork): String {
        return buildJsonObjectString {
            put(key = "@type", string = "testNetwork")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: TestProxy): String {
        return buildJsonObjectString {
            put(key = "@type", string = "testProxy")
            put(key = "@extra", long = requestId)
            put(key = "server", string = function.server)
            put(key = "port", int = function.port)
            put(key = "type", value = function.type) { data -> serialize(dto = data) }
            put(key = "dc_id", int = function.dcId)
            put(key = "timeout", double = function.timeout)
        }
    }

    private fun serialize(requestId: Long, function: TestReturnError): String {
        return buildJsonObjectString {
            put(key = "@type", string = "testReturnError")
            put(key = "@extra", long = requestId)
            put(key = "error", value = function.error) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: TestSquareInt): String {
        return buildJsonObjectString {
            put(key = "@type", string = "testSquareInt")
            put(key = "@extra", long = requestId)
            put(key = "x", int = function.x)
        }
    }

    private fun serialize(requestId: Long, function: TestUseUpdate): String {
        return buildJsonObjectString {
            put(key = "@type", string = "testUseUpdate")
            put(key = "@extra", long = requestId)
        }
    }

    private fun serialize(requestId: Long, function: ToggleAllDownloadsArePaused): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleAllDownloadsArePaused")
            put(key = "@extra", long = requestId)
            put(key = "are_paused", boolean = function.arePaused)
        }
    }

    private fun serialize(requestId: Long, function: ToggleBotCanManageEmojiStatus): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleBotCanManageEmojiStatus")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "can_manage_emoji_status", boolean = function.canManageEmojiStatus)
        }
    }

    private fun serialize(requestId: Long, function: ToggleBotIsAddedToAttachmentMenu): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleBotIsAddedToAttachmentMenu")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "is_added", boolean = function.isAdded)
            put(key = "allow_write_access", boolean = function.allowWriteAccess)
        }
    }

    private fun serialize(requestId: Long, function: ToggleBotUsernameIsActive): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleBotUsernameIsActive")
            put(key = "@extra", long = requestId)
            put(key = "bot_user_id", long = function.botUserId)
            put(key = "username", string = function.username)
            put(key = "is_active", boolean = function.isActive)
        }
    }

    private fun serialize(requestId: Long, function: ToggleBusinessConnectedBotChatIsPaused): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleBusinessConnectedBotChatIsPaused")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "is_paused", boolean = function.isPaused)
        }
    }

    private fun serialize(requestId: Long, function: ToggleChatDefaultDisableNotification): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleChatDefaultDisableNotification")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "default_disable_notification", boolean = function.defaultDisableNotification)
        }
    }

    private fun serialize(requestId: Long, function: ToggleChatFolderTags): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleChatFolderTags")
            put(key = "@extra", long = requestId)
            put(key = "are_tags_enabled", boolean = function.areTagsEnabled)
        }
    }

    private fun serialize(requestId: Long, function: ToggleChatGiftNotifications): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleChatGiftNotifications")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "are_enabled", boolean = function.areEnabled)
        }
    }

    private fun serialize(requestId: Long, function: ToggleChatHasProtectedContent): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleChatHasProtectedContent")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "has_protected_content", boolean = function.hasProtectedContent)
        }
    }

    private fun serialize(requestId: Long, function: ToggleChatIsMarkedAsUnread): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleChatIsMarkedAsUnread")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "is_marked_as_unread", boolean = function.isMarkedAsUnread)
        }
    }

    private fun serialize(requestId: Long, function: ToggleChatIsPinned): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleChatIsPinned")
            put(key = "@extra", long = requestId)
            put(key = "chat_list", value = function.chatList) { data -> serialize(dto = data) }
            put(key = "chat_id", long = function.chatId)
            put(key = "is_pinned", boolean = function.isPinned)
        }
    }

    private fun serialize(requestId: Long, function: ToggleChatIsTranslatable): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleChatIsTranslatable")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "is_translatable", boolean = function.isTranslatable)
        }
    }

    private fun serialize(requestId: Long, function: ToggleChatViewAsTopics): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleChatViewAsTopics")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "view_as_topics", boolean = function.viewAsTopics)
        }
    }

    private fun serialize(requestId: Long, function: ToggleDirectMessagesChatTopicCanSendUnpaidMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleDirectMessagesChatTopicCanSendUnpaidMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", long = function.topicId)
            put(key = "can_send_unpaid_messages", boolean = function.canSendUnpaidMessages)
            put(key = "refund_payments", boolean = function.refundPayments)
        }
    }

    private fun serialize(requestId: Long, function: ToggleDownloadIsPaused): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleDownloadIsPaused")
            put(key = "@extra", long = requestId)
            put(key = "file_id", int = function.fileId)
            put(key = "is_paused", boolean = function.isPaused)
        }
    }

    private fun serialize(requestId: Long, function: ToggleForumTopicIsClosed): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleForumTopicIsClosed")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
            put(key = "is_closed", boolean = function.isClosed)
        }
    }

    private fun serialize(requestId: Long, function: ToggleForumTopicIsPinned): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleForumTopicIsPinned")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
            put(key = "is_pinned", boolean = function.isPinned)
        }
    }

    private fun serialize(requestId: Long, function: ToggleGeneralForumTopicIsHidden): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleGeneralForumTopicIsHidden")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "is_hidden", boolean = function.isHidden)
        }
    }

    private fun serialize(requestId: Long, function: ToggleGiftIsSaved): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleGiftIsSaved")
            put(key = "@extra", long = requestId)
            put(key = "received_gift_id", string = function.receivedGiftId)
            put(key = "is_saved", boolean = function.isSaved)
        }
    }

    private fun serialize(requestId: Long, function: ToggleGroupCallIsMyVideoEnabled): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleGroupCallIsMyVideoEnabled")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "is_my_video_enabled", boolean = function.isMyVideoEnabled)
        }
    }

    private fun serialize(requestId: Long, function: ToggleGroupCallIsMyVideoPaused): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleGroupCallIsMyVideoPaused")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "is_my_video_paused", boolean = function.isMyVideoPaused)
        }
    }

    private fun serialize(requestId: Long, function: ToggleGroupCallParticipantIsHandRaised): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleGroupCallParticipantIsHandRaised")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "participant_id", value = function.participantId) { data -> serialize(dto = data) }
            put(key = "is_hand_raised", boolean = function.isHandRaised)
        }
    }

    private fun serialize(requestId: Long, function: ToggleGroupCallParticipantIsMuted): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleGroupCallParticipantIsMuted")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "participant_id", value = function.participantId) { data -> serialize(dto = data) }
            put(key = "is_muted", boolean = function.isMuted)
        }
    }

    private fun serialize(requestId: Long, function: ToggleGroupCallScreenSharingIsPaused): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleGroupCallScreenSharingIsPaused")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "is_paused", boolean = function.isPaused)
        }
    }

    private fun serialize(requestId: Long, function: ToggleHasSponsoredMessagesEnabled): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleHasSponsoredMessagesEnabled")
            put(key = "@extra", long = requestId)
            put(key = "has_sponsored_messages_enabled", boolean = function.hasSponsoredMessagesEnabled)
        }
    }

    private fun serialize(requestId: Long, function: ToggleSavedMessagesTopicIsPinned): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleSavedMessagesTopicIsPinned")
            put(key = "@extra", long = requestId)
            put(key = "saved_messages_topic_id", long = function.savedMessagesTopicId)
            put(key = "is_pinned", boolean = function.isPinned)
        }
    }

    private fun serialize(requestId: Long, function: ToggleSessionCanAcceptCalls): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleSessionCanAcceptCalls")
            put(key = "@extra", long = requestId)
            put(key = "session_id", long = function.sessionId)
            put(key = "can_accept_calls", boolean = function.canAcceptCalls)
        }
    }

    private fun serialize(requestId: Long, function: ToggleSessionCanAcceptSecretChats): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleSessionCanAcceptSecretChats")
            put(key = "@extra", long = requestId)
            put(key = "session_id", long = function.sessionId)
            put(key = "can_accept_secret_chats", boolean = function.canAcceptSecretChats)
        }
    }

    private fun serialize(requestId: Long, function: ToggleStoryIsPostedToChatPage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleStoryIsPostedToChatPage")
            put(key = "@extra", long = requestId)
            put(key = "story_poster_chat_id", long = function.storyPosterChatId)
            put(key = "story_id", int = function.storyId)
            put(key = "is_posted_to_chat_page", boolean = function.isPostedToChatPage)
        }
    }

    private fun serialize(requestId: Long, function: ToggleSupergroupCanHaveSponsoredMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleSupergroupCanHaveSponsoredMessages")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "can_have_sponsored_messages", boolean = function.canHaveSponsoredMessages)
        }
    }

    private fun serialize(requestId: Long, function: ToggleSupergroupHasAggressiveAntiSpamEnabled): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleSupergroupHasAggressiveAntiSpamEnabled")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "has_aggressive_anti_spam_enabled", boolean = function.hasAggressiveAntiSpamEnabled)
        }
    }

    private fun serialize(requestId: Long, function: ToggleSupergroupHasAutomaticTranslation): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleSupergroupHasAutomaticTranslation")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "has_automatic_translation", boolean = function.hasAutomaticTranslation)
        }
    }

    private fun serialize(requestId: Long, function: ToggleSupergroupHasHiddenMembers): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleSupergroupHasHiddenMembers")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "has_hidden_members", boolean = function.hasHiddenMembers)
        }
    }

    private fun serialize(requestId: Long, function: ToggleSupergroupIsAllHistoryAvailable): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleSupergroupIsAllHistoryAvailable")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "is_all_history_available", boolean = function.isAllHistoryAvailable)
        }
    }

    private fun serialize(requestId: Long, function: ToggleSupergroupIsBroadcastGroup): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleSupergroupIsBroadcastGroup")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
        }
    }

    private fun serialize(requestId: Long, function: ToggleSupergroupIsForum): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleSupergroupIsForum")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "is_forum", boolean = function.isForum)
            put(key = "has_forum_tabs", boolean = function.hasForumTabs)
        }
    }

    private fun serialize(requestId: Long, function: ToggleSupergroupJoinByRequest): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleSupergroupJoinByRequest")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "join_by_request", boolean = function.joinByRequest)
        }
    }

    private fun serialize(requestId: Long, function: ToggleSupergroupJoinToSendMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleSupergroupJoinToSendMessages")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "join_to_send_messages", boolean = function.joinToSendMessages)
        }
    }

    private fun serialize(requestId: Long, function: ToggleSupergroupSignMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleSupergroupSignMessages")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "sign_messages", boolean = function.signMessages)
            put(key = "show_message_sender", boolean = function.showMessageSender)
        }
    }

    private fun serialize(requestId: Long, function: ToggleSupergroupUsernameIsActive): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleSupergroupUsernameIsActive")
            put(key = "@extra", long = requestId)
            put(key = "supergroup_id", long = function.supergroupId)
            put(key = "username", string = function.username)
            put(key = "is_active", boolean = function.isActive)
        }
    }

    private fun serialize(requestId: Long, function: ToggleUsernameIsActive): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleUsernameIsActive")
            put(key = "@extra", long = requestId)
            put(key = "username", string = function.username)
            put(key = "is_active", boolean = function.isActive)
        }
    }

    private fun serialize(requestId: Long, function: ToggleVideoChatEnabledStartNotification): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleVideoChatEnabledStartNotification")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "enabled_start_notification", boolean = function.enabledStartNotification)
        }
    }

    private fun serialize(requestId: Long, function: ToggleVideoChatMuteNewParticipants): String {
        return buildJsonObjectString {
            put(key = "@type", string = "toggleVideoChatMuteNewParticipants")
            put(key = "@extra", long = requestId)
            put(key = "group_call_id", int = function.groupCallId)
            put(key = "mute_new_participants", boolean = function.muteNewParticipants)
        }
    }

    private fun serialize(requestId: Long, function: TransferBusinessAccountStars): String {
        return buildJsonObjectString {
            put(key = "@type", string = "transferBusinessAccountStars")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "star_count", long = function.starCount)
        }
    }

    private fun serialize(requestId: Long, function: TransferChatOwnership): String {
        return buildJsonObjectString {
            put(key = "@type", string = "transferChatOwnership")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "user_id", long = function.userId)
            put(key = "password", string = function.password)
        }
    }

    private fun serialize(requestId: Long, function: TransferGift): String {
        return buildJsonObjectString {
            put(key = "@type", string = "transferGift")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "received_gift_id", string = function.receivedGiftId)
            put(key = "new_owner_id", value = function.newOwnerId) { data -> serialize(dto = data) }
            put(key = "star_count", long = function.starCount)
        }
    }

    private fun serialize(requestId: Long, function: TranslateMessageText): String {
        return buildJsonObjectString {
            put(key = "@type", string = "translateMessageText")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
            put(key = "to_language_code", string = function.toLanguageCode)
        }
    }

    private fun serialize(requestId: Long, function: TranslateText): String {
        return buildJsonObjectString {
            put(key = "@type", string = "translateText")
            put(key = "@extra", long = requestId)
            put(key = "text", value = function.text) { data -> serialize(dto = data) }
            put(key = "to_language_code", string = function.toLanguageCode)
        }
    }

    private fun serialize(requestId: Long, function: UnpinAllChatMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "unpinAllChatMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: UnpinAllDirectMessagesChatTopicMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "unpinAllDirectMessagesChatTopicMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "topic_id", long = function.topicId)
        }
    }

    private fun serialize(requestId: Long, function: UnpinAllMessageThreadMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "unpinAllMessageThreadMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_thread_id", long = function.messageThreadId)
        }
    }

    private fun serialize(requestId: Long, function: UnpinChatMessage): String {
        return buildJsonObjectString {
            put(key = "@type", string = "unpinChatMessage")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_id", long = function.messageId)
        }
    }

    private fun serialize(requestId: Long, function: UpgradeBasicGroupChatToSupergroupChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "upgradeBasicGroupChatToSupergroupChat")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
        }
    }

    private fun serialize(requestId: Long, function: UpgradeGift): String {
        return buildJsonObjectString {
            put(key = "@type", string = "upgradeGift")
            put(key = "@extra", long = requestId)
            put(key = "business_connection_id", string = function.businessConnectionId)
            put(key = "received_gift_id", string = function.receivedGiftId)
            put(key = "keep_original_details", boolean = function.keepOriginalDetails)
            put(key = "star_count", long = function.starCount)
        }
    }

    private fun serialize(requestId: Long, function: UploadStickerFile): String {
        return buildJsonObjectString {
            put(key = "@type", string = "uploadStickerFile")
            put(key = "@extra", long = requestId)
            put(key = "user_id", long = function.userId)
            put(key = "sticker_format", value = function.stickerFormat) { data -> serialize(dto = data) }
            put(key = "sticker", value = function.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: ValidateOrderInfo): String {
        return buildJsonObjectString {
            put(key = "@type", string = "validateOrderInfo")
            put(key = "@extra", long = requestId)
            put(key = "input_invoice", value = function.inputInvoice) { data -> serialize(dto = data) }
            put(key = "order_info", value = function.orderInfo) { data -> serialize(dto = data) }
            put(key = "allow_save", boolean = function.allowSave)
        }
    }

    private fun serialize(requestId: Long, function: ViewMessages): String {
        return buildJsonObjectString {
            put(key = "@type", string = "viewMessages")
            put(key = "@extra", long = requestId)
            put(key = "chat_id", long = function.chatId)
            put(key = "message_ids", longs = function.messageIds)
            put(key = "source", value = function.source) { data -> serialize(dto = data) }
            put(key = "force_read", boolean = function.forceRead)
        }
    }

    private fun serialize(requestId: Long, function: ViewPremiumFeature): String {
        return buildJsonObjectString {
            put(key = "@type", string = "viewPremiumFeature")
            put(key = "@extra", long = requestId)
            put(key = "feature", value = function.feature) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(requestId: Long, function: ViewSponsoredChat): String {
        return buildJsonObjectString {
            put(key = "@type", string = "viewSponsoredChat")
            put(key = "@extra", long = requestId)
            put(key = "sponsored_chat_unique_id", long = function.sponsoredChatUniqueId)
        }
    }

    private fun serialize(requestId: Long, function: ViewTrendingStickerSets): String {
        return buildJsonObjectString {
            put(key = "@type", string = "viewTrendingStickerSets")
            put(key = "@extra", long = requestId)
            put(key = "sticker_set_ids", longs = function.stickerSetIds)
        }
    }

    private fun serialize(requestId: Long, function: ViewVideoMessageAdvertisement): String {
        return buildJsonObjectString {
            put(key = "@type", string = "viewVideoMessageAdvertisement")
            put(key = "@extra", long = requestId)
            put(key = "advertisement_unique_id", long = function.advertisementUniqueId)
        }
    }

    private fun serialize(requestId: Long, function: WriteGeneratedFilePart): String {
        return buildJsonObjectString {
            put(key = "@type", string = "writeGeneratedFilePart")
            put(key = "@extra", long = requestId)
            put(key = "generation_id", long = function.generationId)
            put(key = "offset", long = function.offset)
            put(key = "data", bytes = function.data)
        }
    }

    private fun serialize(dto: AuthenticationCodeType): JsonElement {
        when(dto) {
            is AuthenticationCodeTypeTelegramMessage -> return serialize(dto = dto)
            is AuthenticationCodeTypeSms -> return serialize(dto = dto)
            is AuthenticationCodeTypeSmsWord -> return serialize(dto = dto)
            is AuthenticationCodeTypeSmsPhrase -> return serialize(dto = dto)
            is AuthenticationCodeTypeCall -> return serialize(dto = dto)
            is AuthenticationCodeTypeFlashCall -> return serialize(dto = dto)
            is AuthenticationCodeTypeMissedCall -> return serialize(dto = dto)
            is AuthenticationCodeTypeFragment -> return serialize(dto = dto)
            is AuthenticationCodeTypeFirebaseAndroid -> return serialize(dto = dto)
            is AuthenticationCodeTypeFirebaseIos -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: EmailAddressAuthentication): JsonElement {
        when(dto) {
            is EmailAddressAuthenticationCode -> return serialize(dto = dto)
            is EmailAddressAuthenticationAppleId -> return serialize(dto = dto)
            is EmailAddressAuthenticationGoogleId -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: EmailAddressResetState): JsonElement {
        when(dto) {
            is EmailAddressResetStateAvailable -> return serialize(dto = dto)
            is EmailAddressResetStatePending -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: AuthorizationState): JsonElement {
        when(dto) {
            is AuthorizationStateWaitTdlibParameters -> return serialize(dto = dto)
            is AuthorizationStateWaitPhoneNumber -> return serialize(dto = dto)
            is AuthorizationStateWaitPremiumPurchase -> return serialize(dto = dto)
            is AuthorizationStateWaitEmailAddress -> return serialize(dto = dto)
            is AuthorizationStateWaitEmailCode -> return serialize(dto = dto)
            is AuthorizationStateWaitCode -> return serialize(dto = dto)
            is AuthorizationStateWaitOtherDeviceConfirmation -> return serialize(dto = dto)
            is AuthorizationStateWaitRegistration -> return serialize(dto = dto)
            is AuthorizationStateWaitPassword -> return serialize(dto = dto)
            is AuthorizationStateReady -> return serialize(dto = dto)
            is AuthorizationStateLoggingOut -> return serialize(dto = dto)
            is AuthorizationStateClosing -> return serialize(dto = dto)
            is AuthorizationStateClosed -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: FirebaseDeviceVerificationParameters): JsonElement {
        when(dto) {
            is FirebaseDeviceVerificationParametersSafetyNet -> return serialize(dto = dto)
            is FirebaseDeviceVerificationParametersPlayIntegrity -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InputFile): JsonElement {
        when(dto) {
            is InputFileId -> return serialize(dto = dto)
            is InputFileRemote -> return serialize(dto = dto)
            is InputFileLocal -> return serialize(dto = dto)
            is InputFileGenerated -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ThumbnailFormat): JsonElement {
        when(dto) {
            is ThumbnailFormatJpeg -> return serialize(dto = dto)
            is ThumbnailFormatGif -> return serialize(dto = dto)
            is ThumbnailFormatMpeg4 -> return serialize(dto = dto)
            is ThumbnailFormatPng -> return serialize(dto = dto)
            is ThumbnailFormatTgs -> return serialize(dto = dto)
            is ThumbnailFormatWebm -> return serialize(dto = dto)
            is ThumbnailFormatWebp -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: MaskPoint): JsonElement {
        when(dto) {
            is MaskPointForehead -> return serialize(dto = dto)
            is MaskPointEyes -> return serialize(dto = dto)
            is MaskPointMouth -> return serialize(dto = dto)
            is MaskPointChin -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StickerFormat): JsonElement {
        when(dto) {
            is StickerFormatWebp -> return serialize(dto = dto)
            is StickerFormatTgs -> return serialize(dto = dto)
            is StickerFormatWebm -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StickerType): JsonElement {
        when(dto) {
            is StickerTypeRegular -> return serialize(dto = dto)
            is StickerTypeMask -> return serialize(dto = dto)
            is StickerTypeCustomEmoji -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StickerFullType): JsonElement {
        when(dto) {
            is StickerFullTypeRegular -> return serialize(dto = dto)
            is StickerFullTypeMask -> return serialize(dto = dto)
            is StickerFullTypeCustomEmoji -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PollType): JsonElement {
        when(dto) {
            is PollTypeRegular -> return serialize(dto = dto)
            is PollTypeQuiz -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: UserType): JsonElement {
        when(dto) {
            is UserTypeRegular -> return serialize(dto = dto)
            is UserTypeDeleted -> return serialize(dto = dto)
            is UserTypeBot -> return serialize(dto = dto)
            is UserTypeUnknown -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: BusinessAwayMessageSchedule): JsonElement {
        when(dto) {
            is BusinessAwayMessageScheduleAlways -> return serialize(dto = dto)
            is BusinessAwayMessageScheduleOutsideOfOpeningHours -> return serialize(dto = dto)
            is BusinessAwayMessageScheduleCustom -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ChatPhotoStickerType): JsonElement {
        when(dto) {
            is ChatPhotoStickerTypeRegularOrMask -> return serialize(dto = dto)
            is ChatPhotoStickerTypeCustomEmoji -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InputChatPhoto): JsonElement {
        when(dto) {
            is InputChatPhotoPrevious -> return serialize(dto = dto)
            is InputChatPhotoStatic -> return serialize(dto = dto)
            is InputChatPhotoAnimation -> return serialize(dto = dto)
            is InputChatPhotoSticker -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StarSubscriptionType): JsonElement {
        when(dto) {
            is StarSubscriptionTypeChannel -> return serialize(dto = dto)
            is StarSubscriptionTypeBot -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: AffiliateType): JsonElement {
        when(dto) {
            is AffiliateTypeCurrentUser -> return serialize(dto = dto)
            is AffiliateTypeBot -> return serialize(dto = dto)
            is AffiliateTypeChannel -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: AffiliateProgramSortOrder): JsonElement {
        when(dto) {
            is AffiliateProgramSortOrderProfitability -> return serialize(dto = dto)
            is AffiliateProgramSortOrderCreationDate -> return serialize(dto = dto)
            is AffiliateProgramSortOrderRevenue -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: UpgradedGiftAttributeId): JsonElement {
        when(dto) {
            is UpgradedGiftAttributeIdModel -> return serialize(dto = dto)
            is UpgradedGiftAttributeIdSymbol -> return serialize(dto = dto)
            is UpgradedGiftAttributeIdBackdrop -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: GiftForResaleOrder): JsonElement {
        when(dto) {
            is GiftForResaleOrderPrice -> return serialize(dto = dto)
            is GiftForResaleOrderPriceChangeDate -> return serialize(dto = dto)
            is GiftForResaleOrderNumber -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: SentGift): JsonElement {
        when(dto) {
            is SentGiftRegular -> return serialize(dto = dto)
            is SentGiftUpgraded -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StarTransactionDirection): JsonElement {
        when(dto) {
            is StarTransactionDirectionIncoming -> return serialize(dto = dto)
            is StarTransactionDirectionOutgoing -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StarTransactionType): JsonElement {
        when(dto) {
            is StarTransactionTypePremiumBotDeposit -> return serialize(dto = dto)
            is StarTransactionTypeAppStoreDeposit -> return serialize(dto = dto)
            is StarTransactionTypeGooglePlayDeposit -> return serialize(dto = dto)
            is StarTransactionTypeFragmentDeposit -> return serialize(dto = dto)
            is StarTransactionTypeUserDeposit -> return serialize(dto = dto)
            is StarTransactionTypeGiveawayDeposit -> return serialize(dto = dto)
            is StarTransactionTypeFragmentWithdrawal -> return serialize(dto = dto)
            is StarTransactionTypeTelegramAdsWithdrawal -> return serialize(dto = dto)
            is StarTransactionTypeTelegramApiUsage -> return serialize(dto = dto)
            is StarTransactionTypeBotPaidMediaPurchase -> return serialize(dto = dto)
            is StarTransactionTypeBotPaidMediaSale -> return serialize(dto = dto)
            is StarTransactionTypeChannelPaidMediaPurchase -> return serialize(dto = dto)
            is StarTransactionTypeChannelPaidMediaSale -> return serialize(dto = dto)
            is StarTransactionTypeBotInvoicePurchase -> return serialize(dto = dto)
            is StarTransactionTypeBotInvoiceSale -> return serialize(dto = dto)
            is StarTransactionTypeBotSubscriptionPurchase -> return serialize(dto = dto)
            is StarTransactionTypeBotSubscriptionSale -> return serialize(dto = dto)
            is StarTransactionTypeChannelSubscriptionPurchase -> return serialize(dto = dto)
            is StarTransactionTypeChannelSubscriptionSale -> return serialize(dto = dto)
            is StarTransactionTypeGiftPurchase -> return serialize(dto = dto)
            is StarTransactionTypeGiftTransfer -> return serialize(dto = dto)
            is StarTransactionTypeGiftSale -> return serialize(dto = dto)
            is StarTransactionTypeGiftUpgrade -> return serialize(dto = dto)
            is StarTransactionTypeUpgradedGiftPurchase -> return serialize(dto = dto)
            is StarTransactionTypeUpgradedGiftSale -> return serialize(dto = dto)
            is StarTransactionTypeChannelPaidReactionSend -> return serialize(dto = dto)
            is StarTransactionTypeChannelPaidReactionReceive -> return serialize(dto = dto)
            is StarTransactionTypeAffiliateProgramCommission -> return serialize(dto = dto)
            is StarTransactionTypePaidMessageSend -> return serialize(dto = dto)
            is StarTransactionTypePaidMessageReceive -> return serialize(dto = dto)
            is StarTransactionTypePremiumPurchase -> return serialize(dto = dto)
            is StarTransactionTypeBusinessBotTransferSend -> return serialize(dto = dto)
            is StarTransactionTypeBusinessBotTransferReceive -> return serialize(dto = dto)
            is StarTransactionTypeUnsupported -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: GiveawayParticipantStatus): JsonElement {
        when(dto) {
            is GiveawayParticipantStatusEligible -> return serialize(dto = dto)
            is GiveawayParticipantStatusParticipating -> return serialize(dto = dto)
            is GiveawayParticipantStatusAlreadyWasMember -> return serialize(dto = dto)
            is GiveawayParticipantStatusAdministrator -> return serialize(dto = dto)
            is GiveawayParticipantStatusDisallowedCountry -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: GiveawayInfo): JsonElement {
        when(dto) {
            is GiveawayInfoOngoing -> return serialize(dto = dto)
            is GiveawayInfoCompleted -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: GiveawayPrize): JsonElement {
        when(dto) {
            is GiveawayPrizePremium -> return serialize(dto = dto)
            is GiveawayPrizeStars -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: EmojiStatusType): JsonElement {
        when(dto) {
            is EmojiStatusTypeCustomEmoji -> return serialize(dto = dto)
            is EmojiStatusTypeUpgradedGift -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ChatMemberStatus): JsonElement {
        when(dto) {
            is ChatMemberStatusCreator -> return serialize(dto = dto)
            is ChatMemberStatusAdministrator -> return serialize(dto = dto)
            is ChatMemberStatusMember -> return serialize(dto = dto)
            is ChatMemberStatusRestricted -> return serialize(dto = dto)
            is ChatMemberStatusLeft -> return serialize(dto = dto)
            is ChatMemberStatusBanned -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ChatMembersFilter): JsonElement {
        when(dto) {
            is ChatMembersFilterContacts -> return serialize(dto = dto)
            is ChatMembersFilterAdministrators -> return serialize(dto = dto)
            is ChatMembersFilterMembers -> return serialize(dto = dto)
            is ChatMembersFilterMention -> return serialize(dto = dto)
            is ChatMembersFilterRestricted -> return serialize(dto = dto)
            is ChatMembersFilterBanned -> return serialize(dto = dto)
            is ChatMembersFilterBots -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: SupergroupMembersFilter): JsonElement {
        when(dto) {
            is SupergroupMembersFilterRecent -> return serialize(dto = dto)
            is SupergroupMembersFilterContacts -> return serialize(dto = dto)
            is SupergroupMembersFilterAdministrators -> return serialize(dto = dto)
            is SupergroupMembersFilterSearch -> return serialize(dto = dto)
            is SupergroupMembersFilterRestricted -> return serialize(dto = dto)
            is SupergroupMembersFilterBanned -> return serialize(dto = dto)
            is SupergroupMembersFilterMention -> return serialize(dto = dto)
            is SupergroupMembersFilterBots -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InviteLinkChatType): JsonElement {
        when(dto) {
            is InviteLinkChatTypeBasicGroup -> return serialize(dto = dto)
            is InviteLinkChatTypeSupergroup -> return serialize(dto = dto)
            is InviteLinkChatTypeChannel -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: SecretChatState): JsonElement {
        when(dto) {
            is SecretChatStatePending -> return serialize(dto = dto)
            is SecretChatStateReady -> return serialize(dto = dto)
            is SecretChatStateClosed -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: MessageSender): JsonElement {
        when(dto) {
            is MessageSenderUser -> return serialize(dto = dto)
            is MessageSenderChat -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: MessageReadDate): JsonElement {
        when(dto) {
            is MessageReadDateRead -> return serialize(dto = dto)
            is MessageReadDateUnread -> return serialize(dto = dto)
            is MessageReadDateTooOld -> return serialize(dto = dto)
            is MessageReadDateUserPrivacyRestricted -> return serialize(dto = dto)
            is MessageReadDateMyPrivacyRestricted -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: MessageOrigin): JsonElement {
        when(dto) {
            is MessageOriginUser -> return serialize(dto = dto)
            is MessageOriginHiddenUser -> return serialize(dto = dto)
            is MessageOriginChat -> return serialize(dto = dto)
            is MessageOriginChannel -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ReactionType): JsonElement {
        when(dto) {
            is ReactionTypeEmoji -> return serialize(dto = dto)
            is ReactionTypeCustomEmoji -> return serialize(dto = dto)
            is ReactionTypePaid -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PaidReactionType): JsonElement {
        when(dto) {
            is PaidReactionTypeRegular -> return serialize(dto = dto)
            is PaidReactionTypeAnonymous -> return serialize(dto = dto)
            is PaidReactionTypeChat -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: MessageTopic): JsonElement {
        when(dto) {
            is MessageTopicForum -> return serialize(dto = dto)
            is MessageTopicDirectMessages -> return serialize(dto = dto)
            is MessageTopicSavedMessages -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: MessageEffectType): JsonElement {
        when(dto) {
            is MessageEffectTypeEmojiReaction -> return serialize(dto = dto)
            is MessageEffectTypePremiumSticker -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: MessageSendingState): JsonElement {
        when(dto) {
            is MessageSendingStatePending -> return serialize(dto = dto)
            is MessageSendingStateFailed -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: MessageReplyTo): JsonElement {
        when(dto) {
            is MessageReplyToMessage -> return serialize(dto = dto)
            is MessageReplyToStory -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InputMessageReplyTo): JsonElement {
        when(dto) {
            is InputMessageReplyToMessage -> return serialize(dto = dto)
            is InputMessageReplyToExternalMessage -> return serialize(dto = dto)
            is InputMessageReplyToStory -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: MessageSource): JsonElement {
        when(dto) {
            is MessageSourceChatHistory -> return serialize(dto = dto)
            is MessageSourceMessageThreadHistory -> return serialize(dto = dto)
            is MessageSourceForumTopicHistory -> return serialize(dto = dto)
            is MessageSourceDirectMessagesChatTopicHistory -> return serialize(dto = dto)
            is MessageSourceHistoryPreview -> return serialize(dto = dto)
            is MessageSourceChatList -> return serialize(dto = dto)
            is MessageSourceSearch -> return serialize(dto = dto)
            is MessageSourceChatEventLog -> return serialize(dto = dto)
            is MessageSourceNotification -> return serialize(dto = dto)
            is MessageSourceScreenshot -> return serialize(dto = dto)
            is MessageSourceOther -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ReportSponsoredResult): JsonElement {
        when(dto) {
            is ReportSponsoredResultOk -> return serialize(dto = dto)
            is ReportSponsoredResultFailed -> return serialize(dto = dto)
            is ReportSponsoredResultOptionRequired -> return serialize(dto = dto)
            is ReportSponsoredResultAdsHidden -> return serialize(dto = dto)
            is ReportSponsoredResultPremiumRequired -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: NotificationSettingsScope): JsonElement {
        when(dto) {
            is NotificationSettingsScopePrivateChats -> return serialize(dto = dto)
            is NotificationSettingsScopeGroupChats -> return serialize(dto = dto)
            is NotificationSettingsScopeChannelChats -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ReactionNotificationSource): JsonElement {
        when(dto) {
            is ReactionNotificationSourceNone -> return serialize(dto = dto)
            is ReactionNotificationSourceContacts -> return serialize(dto = dto)
            is ReactionNotificationSourceAll -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ChatType): JsonElement {
        when(dto) {
            is ChatTypePrivate -> return serialize(dto = dto)
            is ChatTypeBasicGroup -> return serialize(dto = dto)
            is ChatTypeSupergroup -> return serialize(dto = dto)
            is ChatTypeSecret -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ChatList): JsonElement {
        when(dto) {
            is ChatListMain -> return serialize(dto = dto)
            is ChatListArchive -> return serialize(dto = dto)
            is ChatListFolder -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ChatSource): JsonElement {
        when(dto) {
            is ChatSourceMtprotoProxy -> return serialize(dto = dto)
            is ChatSourcePublicServiceAnnouncement -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ChatAvailableReactions): JsonElement {
        when(dto) {
            is ChatAvailableReactionsAll -> return serialize(dto = dto)
            is ChatAvailableReactionsSome -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PublicChatType): JsonElement {
        when(dto) {
            is PublicChatTypeHasUsername -> return serialize(dto = dto)
            is PublicChatTypeIsLocationBased -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ChatActionBar): JsonElement {
        when(dto) {
            is ChatActionBarReportSpam -> return serialize(dto = dto)
            is ChatActionBarInviteMembers -> return serialize(dto = dto)
            is ChatActionBarReportAddBlock -> return serialize(dto = dto)
            is ChatActionBarAddContact -> return serialize(dto = dto)
            is ChatActionBarSharePhoneNumber -> return serialize(dto = dto)
            is ChatActionBarJoinRequest -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: KeyboardButtonType): JsonElement {
        when(dto) {
            is KeyboardButtonTypeText -> return serialize(dto = dto)
            is KeyboardButtonTypeRequestPhoneNumber -> return serialize(dto = dto)
            is KeyboardButtonTypeRequestLocation -> return serialize(dto = dto)
            is KeyboardButtonTypeRequestPoll -> return serialize(dto = dto)
            is KeyboardButtonTypeRequestUsers -> return serialize(dto = dto)
            is KeyboardButtonTypeRequestChat -> return serialize(dto = dto)
            is KeyboardButtonTypeWebApp -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InlineKeyboardButtonType): JsonElement {
        when(dto) {
            is InlineKeyboardButtonTypeUrl -> return serialize(dto = dto)
            is InlineKeyboardButtonTypeLoginUrl -> return serialize(dto = dto)
            is InlineKeyboardButtonTypeWebApp -> return serialize(dto = dto)
            is InlineKeyboardButtonTypeCallback -> return serialize(dto = dto)
            is InlineKeyboardButtonTypeCallbackWithPassword -> return serialize(dto = dto)
            is InlineKeyboardButtonTypeCallbackGame -> return serialize(dto = dto)
            is InlineKeyboardButtonTypeSwitchInline -> return serialize(dto = dto)
            is InlineKeyboardButtonTypeBuy -> return serialize(dto = dto)
            is InlineKeyboardButtonTypeUser -> return serialize(dto = dto)
            is InlineKeyboardButtonTypeCopyText -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ReplyMarkup): JsonElement {
        when(dto) {
            is ReplyMarkupRemoveKeyboard -> return serialize(dto = dto)
            is ReplyMarkupForceReply -> return serialize(dto = dto)
            is ReplyMarkupShowKeyboard -> return serialize(dto = dto)
            is ReplyMarkupInlineKeyboard -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: LoginUrlInfo): JsonElement {
        when(dto) {
            is LoginUrlInfoOpen -> return serialize(dto = dto)
            is LoginUrlInfoRequestConfirmation -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: WebAppOpenMode): JsonElement {
        when(dto) {
            is WebAppOpenModeCompact -> return serialize(dto = dto)
            is WebAppOpenModeFullSize -> return serialize(dto = dto)
            is WebAppOpenModeFullScreen -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: SavedMessagesTopicType): JsonElement {
        when(dto) {
            is SavedMessagesTopicTypeMyNotes -> return serialize(dto = dto)
            is SavedMessagesTopicTypeAuthorHidden -> return serialize(dto = dto)
            is SavedMessagesTopicTypeSavedFromChat -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: RichText): JsonElement {
        when(dto) {
            is RichTextPlain -> return serialize(dto = dto)
            is RichTextBold -> return serialize(dto = dto)
            is RichTextItalic -> return serialize(dto = dto)
            is RichTextUnderline -> return serialize(dto = dto)
            is RichTextStrikethrough -> return serialize(dto = dto)
            is RichTextFixed -> return serialize(dto = dto)
            is RichTextUrl -> return serialize(dto = dto)
            is RichTextEmailAddress -> return serialize(dto = dto)
            is RichTextSubscript -> return serialize(dto = dto)
            is RichTextSuperscript -> return serialize(dto = dto)
            is RichTextMarked -> return serialize(dto = dto)
            is RichTextPhoneNumber -> return serialize(dto = dto)
            is RichTextIcon -> return serialize(dto = dto)
            is RichTextReference -> return serialize(dto = dto)
            is RichTextAnchor -> return serialize(dto = dto)
            is RichTextAnchorLink -> return serialize(dto = dto)
            is RichTexts -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PageBlockHorizontalAlignment): JsonElement {
        when(dto) {
            is PageBlockHorizontalAlignmentLeft -> return serialize(dto = dto)
            is PageBlockHorizontalAlignmentCenter -> return serialize(dto = dto)
            is PageBlockHorizontalAlignmentRight -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PageBlockVerticalAlignment): JsonElement {
        when(dto) {
            is PageBlockVerticalAlignmentTop -> return serialize(dto = dto)
            is PageBlockVerticalAlignmentMiddle -> return serialize(dto = dto)
            is PageBlockVerticalAlignmentBottom -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PageBlock): JsonElement {
        when(dto) {
            is PageBlockTitle -> return serialize(dto = dto)
            is PageBlockSubtitle -> return serialize(dto = dto)
            is PageBlockAuthorDate -> return serialize(dto = dto)
            is PageBlockHeader -> return serialize(dto = dto)
            is PageBlockSubheader -> return serialize(dto = dto)
            is PageBlockKicker -> return serialize(dto = dto)
            is PageBlockParagraph -> return serialize(dto = dto)
            is PageBlockPreformatted -> return serialize(dto = dto)
            is PageBlockFooter -> return serialize(dto = dto)
            is PageBlockDivider -> return serialize(dto = dto)
            is PageBlockAnchor -> return serialize(dto = dto)
            is PageBlockList -> return serialize(dto = dto)
            is PageBlockBlockQuote -> return serialize(dto = dto)
            is PageBlockPullQuote -> return serialize(dto = dto)
            is PageBlockAnimation -> return serialize(dto = dto)
            is PageBlockAudio -> return serialize(dto = dto)
            is PageBlockPhoto -> return serialize(dto = dto)
            is PageBlockVideo -> return serialize(dto = dto)
            is PageBlockVoiceNote -> return serialize(dto = dto)
            is PageBlockCover -> return serialize(dto = dto)
            is PageBlockEmbedded -> return serialize(dto = dto)
            is PageBlockEmbeddedPost -> return serialize(dto = dto)
            is PageBlockCollage -> return serialize(dto = dto)
            is PageBlockSlideshow -> return serialize(dto = dto)
            is PageBlockChatLink -> return serialize(dto = dto)
            is PageBlockTable -> return serialize(dto = dto)
            is PageBlockDetails -> return serialize(dto = dto)
            is PageBlockRelatedArticles -> return serialize(dto = dto)
            is PageBlockMap -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: LinkPreviewAlbumMedia): JsonElement {
        when(dto) {
            is LinkPreviewAlbumMediaPhoto -> return serialize(dto = dto)
            is LinkPreviewAlbumMediaVideo -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: LinkPreviewType): JsonElement {
        when(dto) {
            is LinkPreviewTypeAlbum -> return serialize(dto = dto)
            is LinkPreviewTypeAnimation -> return serialize(dto = dto)
            is LinkPreviewTypeApp -> return serialize(dto = dto)
            is LinkPreviewTypeArticle -> return serialize(dto = dto)
            is LinkPreviewTypeAudio -> return serialize(dto = dto)
            is LinkPreviewTypeBackground -> return serialize(dto = dto)
            is LinkPreviewTypeChannelBoost -> return serialize(dto = dto)
            is LinkPreviewTypeChat -> return serialize(dto = dto)
            is LinkPreviewTypeDocument -> return serialize(dto = dto)
            is LinkPreviewTypeEmbeddedAnimationPlayer -> return serialize(dto = dto)
            is LinkPreviewTypeEmbeddedAudioPlayer -> return serialize(dto = dto)
            is LinkPreviewTypeEmbeddedVideoPlayer -> return serialize(dto = dto)
            is LinkPreviewTypeExternalAudio -> return serialize(dto = dto)
            is LinkPreviewTypeExternalVideo -> return serialize(dto = dto)
            is LinkPreviewTypeGroupCall -> return serialize(dto = dto)
            is LinkPreviewTypeInvoice -> return serialize(dto = dto)
            is LinkPreviewTypeMessage -> return serialize(dto = dto)
            is LinkPreviewTypePhoto -> return serialize(dto = dto)
            is LinkPreviewTypePremiumGiftCode -> return serialize(dto = dto)
            is LinkPreviewTypeShareableChatFolder -> return serialize(dto = dto)
            is LinkPreviewTypeSticker -> return serialize(dto = dto)
            is LinkPreviewTypeStickerSet -> return serialize(dto = dto)
            is LinkPreviewTypeStory -> return serialize(dto = dto)
            is LinkPreviewTypeSupergroupBoost -> return serialize(dto = dto)
            is LinkPreviewTypeTheme -> return serialize(dto = dto)
            is LinkPreviewTypeUnsupported -> return serialize(dto = dto)
            is LinkPreviewTypeUpgradedGift -> return serialize(dto = dto)
            is LinkPreviewTypeUser -> return serialize(dto = dto)
            is LinkPreviewTypeVideo -> return serialize(dto = dto)
            is LinkPreviewTypeVideoChat -> return serialize(dto = dto)
            is LinkPreviewTypeVideoNote -> return serialize(dto = dto)
            is LinkPreviewTypeVoiceNote -> return serialize(dto = dto)
            is LinkPreviewTypeWebApp -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: CollectibleItemType): JsonElement {
        when(dto) {
            is CollectibleItemTypeUsername -> return serialize(dto = dto)
            is CollectibleItemTypePhoneNumber -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InputCredentials): JsonElement {
        when(dto) {
            is InputCredentialsSaved -> return serialize(dto = dto)
            is InputCredentialsNew -> return serialize(dto = dto)
            is InputCredentialsApplePay -> return serialize(dto = dto)
            is InputCredentialsGooglePay -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PaymentProvider): JsonElement {
        when(dto) {
            is PaymentProviderSmartGlocal -> return serialize(dto = dto)
            is PaymentProviderStripe -> return serialize(dto = dto)
            is PaymentProviderOther -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PaymentFormType): JsonElement {
        when(dto) {
            is PaymentFormTypeRegular -> return serialize(dto = dto)
            is PaymentFormTypeStars -> return serialize(dto = dto)
            is PaymentFormTypeStarSubscription -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PaymentReceiptType): JsonElement {
        when(dto) {
            is PaymentReceiptTypeRegular -> return serialize(dto = dto)
            is PaymentReceiptTypeStars -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InputInvoice): JsonElement {
        when(dto) {
            is InputInvoiceMessage -> return serialize(dto = dto)
            is InputInvoiceName -> return serialize(dto = dto)
            is InputInvoiceTelegram -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PaidMedia): JsonElement {
        when(dto) {
            is PaidMediaPreview -> return serialize(dto = dto)
            is PaidMediaPhoto -> return serialize(dto = dto)
            is PaidMediaVideo -> return serialize(dto = dto)
            is PaidMediaUnsupported -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PassportElementType): JsonElement {
        when(dto) {
            is PassportElementTypePersonalDetails -> return serialize(dto = dto)
            is PassportElementTypePassport -> return serialize(dto = dto)
            is PassportElementTypeDriverLicense -> return serialize(dto = dto)
            is PassportElementTypeIdentityCard -> return serialize(dto = dto)
            is PassportElementTypeInternalPassport -> return serialize(dto = dto)
            is PassportElementTypeAddress -> return serialize(dto = dto)
            is PassportElementTypeUtilityBill -> return serialize(dto = dto)
            is PassportElementTypeBankStatement -> return serialize(dto = dto)
            is PassportElementTypeRentalAgreement -> return serialize(dto = dto)
            is PassportElementTypePassportRegistration -> return serialize(dto = dto)
            is PassportElementTypeTemporaryRegistration -> return serialize(dto = dto)
            is PassportElementTypePhoneNumber -> return serialize(dto = dto)
            is PassportElementTypeEmailAddress -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PassportElement): JsonElement {
        when(dto) {
            is PassportElementPersonalDetails -> return serialize(dto = dto)
            is PassportElementPassport -> return serialize(dto = dto)
            is PassportElementDriverLicense -> return serialize(dto = dto)
            is PassportElementIdentityCard -> return serialize(dto = dto)
            is PassportElementInternalPassport -> return serialize(dto = dto)
            is PassportElementAddress -> return serialize(dto = dto)
            is PassportElementUtilityBill -> return serialize(dto = dto)
            is PassportElementBankStatement -> return serialize(dto = dto)
            is PassportElementRentalAgreement -> return serialize(dto = dto)
            is PassportElementPassportRegistration -> return serialize(dto = dto)
            is PassportElementTemporaryRegistration -> return serialize(dto = dto)
            is PassportElementPhoneNumber -> return serialize(dto = dto)
            is PassportElementEmailAddress -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InputPassportElement): JsonElement {
        when(dto) {
            is InputPassportElementPersonalDetails -> return serialize(dto = dto)
            is InputPassportElementPassport -> return serialize(dto = dto)
            is InputPassportElementDriverLicense -> return serialize(dto = dto)
            is InputPassportElementIdentityCard -> return serialize(dto = dto)
            is InputPassportElementInternalPassport -> return serialize(dto = dto)
            is InputPassportElementAddress -> return serialize(dto = dto)
            is InputPassportElementUtilityBill -> return serialize(dto = dto)
            is InputPassportElementBankStatement -> return serialize(dto = dto)
            is InputPassportElementRentalAgreement -> return serialize(dto = dto)
            is InputPassportElementPassportRegistration -> return serialize(dto = dto)
            is InputPassportElementTemporaryRegistration -> return serialize(dto = dto)
            is InputPassportElementPhoneNumber -> return serialize(dto = dto)
            is InputPassportElementEmailAddress -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PassportElementErrorSource): JsonElement {
        when(dto) {
            is PassportElementErrorSourceUnspecified -> return serialize(dto = dto)
            is PassportElementErrorSourceDataField -> return serialize(dto = dto)
            is PassportElementErrorSourceFrontSide -> return serialize(dto = dto)
            is PassportElementErrorSourceReverseSide -> return serialize(dto = dto)
            is PassportElementErrorSourceSelfie -> return serialize(dto = dto)
            is PassportElementErrorSourceTranslationFile -> return serialize(dto = dto)
            is PassportElementErrorSourceTranslationFiles -> return serialize(dto = dto)
            is PassportElementErrorSourceFile -> return serialize(dto = dto)
            is PassportElementErrorSourceFiles -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InputPassportElementErrorSource): JsonElement {
        when(dto) {
            is InputPassportElementErrorSourceUnspecified -> return serialize(dto = dto)
            is InputPassportElementErrorSourceDataField -> return serialize(dto = dto)
            is InputPassportElementErrorSourceFrontSide -> return serialize(dto = dto)
            is InputPassportElementErrorSourceReverseSide -> return serialize(dto = dto)
            is InputPassportElementErrorSourceSelfie -> return serialize(dto = dto)
            is InputPassportElementErrorSourceTranslationFile -> return serialize(dto = dto)
            is InputPassportElementErrorSourceTranslationFiles -> return serialize(dto = dto)
            is InputPassportElementErrorSourceFile -> return serialize(dto = dto)
            is InputPassportElementErrorSourceFiles -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: MessageContent): JsonElement {
        when(dto) {
            is MessageText -> return serialize(dto = dto)
            is MessageAnimation -> return serialize(dto = dto)
            is MessageAudio -> return serialize(dto = dto)
            is MessageDocument -> return serialize(dto = dto)
            is MessagePaidMedia -> return serialize(dto = dto)
            is MessagePhoto -> return serialize(dto = dto)
            is MessageSticker -> return serialize(dto = dto)
            is MessageVideo -> return serialize(dto = dto)
            is MessageVideoNote -> return serialize(dto = dto)
            is MessageVoiceNote -> return serialize(dto = dto)
            is MessageExpiredPhoto -> return serialize(dto = dto)
            is MessageExpiredVideo -> return serialize(dto = dto)
            is MessageExpiredVideoNote -> return serialize(dto = dto)
            is MessageExpiredVoiceNote -> return serialize(dto = dto)
            is MessageLocation -> return serialize(dto = dto)
            is MessageVenue -> return serialize(dto = dto)
            is MessageContact -> return serialize(dto = dto)
            is MessageAnimatedEmoji -> return serialize(dto = dto)
            is MessageDice -> return serialize(dto = dto)
            is MessageGame -> return serialize(dto = dto)
            is MessagePoll -> return serialize(dto = dto)
            is MessageStory -> return serialize(dto = dto)
            is MessageChecklist -> return serialize(dto = dto)
            is MessageInvoice -> return serialize(dto = dto)
            is MessageCall -> return serialize(dto = dto)
            is MessageGroupCall -> return serialize(dto = dto)
            is MessageVideoChatScheduled -> return serialize(dto = dto)
            is MessageVideoChatStarted -> return serialize(dto = dto)
            is MessageVideoChatEnded -> return serialize(dto = dto)
            is MessageInviteVideoChatParticipants -> return serialize(dto = dto)
            is MessageBasicGroupChatCreate -> return serialize(dto = dto)
            is MessageSupergroupChatCreate -> return serialize(dto = dto)
            is MessageChatChangeTitle -> return serialize(dto = dto)
            is MessageChatChangePhoto -> return serialize(dto = dto)
            is MessageChatDeletePhoto -> return serialize(dto = dto)
            is MessageChatAddMembers -> return serialize(dto = dto)
            is MessageChatJoinByLink -> return serialize(dto = dto)
            is MessageChatJoinByRequest -> return serialize(dto = dto)
            is MessageChatDeleteMember -> return serialize(dto = dto)
            is MessageChatUpgradeTo -> return serialize(dto = dto)
            is MessageChatUpgradeFrom -> return serialize(dto = dto)
            is MessagePinMessage -> return serialize(dto = dto)
            is MessageScreenshotTaken -> return serialize(dto = dto)
            is MessageChatSetBackground -> return serialize(dto = dto)
            is MessageChatSetTheme -> return serialize(dto = dto)
            is MessageChatSetMessageAutoDeleteTime -> return serialize(dto = dto)
            is MessageChatBoost -> return serialize(dto = dto)
            is MessageForumTopicCreated -> return serialize(dto = dto)
            is MessageForumTopicEdited -> return serialize(dto = dto)
            is MessageForumTopicIsClosedToggled -> return serialize(dto = dto)
            is MessageForumTopicIsHiddenToggled -> return serialize(dto = dto)
            is MessageSuggestProfilePhoto -> return serialize(dto = dto)
            is MessageCustomServiceAction -> return serialize(dto = dto)
            is MessageGameScore -> return serialize(dto = dto)
            is MessagePaymentSuccessful -> return serialize(dto = dto)
            is MessagePaymentSuccessfulBot -> return serialize(dto = dto)
            is MessagePaymentRefunded -> return serialize(dto = dto)
            is MessageGiftedPremium -> return serialize(dto = dto)
            is MessagePremiumGiftCode -> return serialize(dto = dto)
            is MessageGiveawayCreated -> return serialize(dto = dto)
            is MessageGiveaway -> return serialize(dto = dto)
            is MessageGiveawayCompleted -> return serialize(dto = dto)
            is MessageGiveawayWinners -> return serialize(dto = dto)
            is MessageGiftedStars -> return serialize(dto = dto)
            is MessageGiveawayPrizeStars -> return serialize(dto = dto)
            is MessageGift -> return serialize(dto = dto)
            is MessageUpgradedGift -> return serialize(dto = dto)
            is MessageRefundedUpgradedGift -> return serialize(dto = dto)
            is MessagePaidMessagesRefunded -> return serialize(dto = dto)
            is MessagePaidMessagePriceChanged -> return serialize(dto = dto)
            is MessageDirectMessagePriceChanged -> return serialize(dto = dto)
            is MessageChecklistTasksDone -> return serialize(dto = dto)
            is MessageChecklistTasksAdded -> return serialize(dto = dto)
            is MessageContactRegistered -> return serialize(dto = dto)
            is MessageUsersShared -> return serialize(dto = dto)
            is MessageChatShared -> return serialize(dto = dto)
            is MessageBotWriteAccessAllowed -> return serialize(dto = dto)
            is MessageWebAppDataSent -> return serialize(dto = dto)
            is MessageWebAppDataReceived -> return serialize(dto = dto)
            is MessagePassportDataSent -> return serialize(dto = dto)
            is MessagePassportDataReceived -> return serialize(dto = dto)
            is MessageProximityAlertTriggered -> return serialize(dto = dto)
            is MessageUnsupported -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: TextEntityType): JsonElement {
        when(dto) {
            is TextEntityTypeMention -> return serialize(dto = dto)
            is TextEntityTypeHashtag -> return serialize(dto = dto)
            is TextEntityTypeCashtag -> return serialize(dto = dto)
            is TextEntityTypeBotCommand -> return serialize(dto = dto)
            is TextEntityTypeUrl -> return serialize(dto = dto)
            is TextEntityTypeEmailAddress -> return serialize(dto = dto)
            is TextEntityTypePhoneNumber -> return serialize(dto = dto)
            is TextEntityTypeBankCardNumber -> return serialize(dto = dto)
            is TextEntityTypeBold -> return serialize(dto = dto)
            is TextEntityTypeItalic -> return serialize(dto = dto)
            is TextEntityTypeUnderline -> return serialize(dto = dto)
            is TextEntityTypeStrikethrough -> return serialize(dto = dto)
            is TextEntityTypeSpoiler -> return serialize(dto = dto)
            is TextEntityTypeCode -> return serialize(dto = dto)
            is TextEntityTypePre -> return serialize(dto = dto)
            is TextEntityTypePreCode -> return serialize(dto = dto)
            is TextEntityTypeBlockQuote -> return serialize(dto = dto)
            is TextEntityTypeExpandableBlockQuote -> return serialize(dto = dto)
            is TextEntityTypeTextUrl -> return serialize(dto = dto)
            is TextEntityTypeMentionName -> return serialize(dto = dto)
            is TextEntityTypeCustomEmoji -> return serialize(dto = dto)
            is TextEntityTypeMediaTimestamp -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InputPaidMediaType): JsonElement {
        when(dto) {
            is InputPaidMediaTypePhoto -> return serialize(dto = dto)
            is InputPaidMediaTypeVideo -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: MessageSchedulingState): JsonElement {
        when(dto) {
            is MessageSchedulingStateSendAtDate -> return serialize(dto = dto)
            is MessageSchedulingStateSendWhenOnline -> return serialize(dto = dto)
            is MessageSchedulingStateSendWhenVideoProcessed -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: MessageSelfDestructType): JsonElement {
        when(dto) {
            is MessageSelfDestructTypeTimer -> return serialize(dto = dto)
            is MessageSelfDestructTypeImmediately -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InputMessageContent): JsonElement {
        when(dto) {
            is InputMessageText -> return serialize(dto = dto)
            is InputMessageAnimation -> return serialize(dto = dto)
            is InputMessageAudio -> return serialize(dto = dto)
            is InputMessageDocument -> return serialize(dto = dto)
            is InputMessagePaidMedia -> return serialize(dto = dto)
            is InputMessagePhoto -> return serialize(dto = dto)
            is InputMessageSticker -> return serialize(dto = dto)
            is InputMessageVideo -> return serialize(dto = dto)
            is InputMessageVideoNote -> return serialize(dto = dto)
            is InputMessageVoiceNote -> return serialize(dto = dto)
            is InputMessageLocation -> return serialize(dto = dto)
            is InputMessageVenue -> return serialize(dto = dto)
            is InputMessageContact -> return serialize(dto = dto)
            is InputMessageDice -> return serialize(dto = dto)
            is InputMessageGame -> return serialize(dto = dto)
            is InputMessageInvoice -> return serialize(dto = dto)
            is InputMessagePoll -> return serialize(dto = dto)
            is InputMessageStory -> return serialize(dto = dto)
            is InputMessageChecklist -> return serialize(dto = dto)
            is InputMessageForwarded -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: SearchMessagesFilter): JsonElement {
        when(dto) {
            is SearchMessagesFilterEmpty -> return serialize(dto = dto)
            is SearchMessagesFilterAnimation -> return serialize(dto = dto)
            is SearchMessagesFilterAudio -> return serialize(dto = dto)
            is SearchMessagesFilterDocument -> return serialize(dto = dto)
            is SearchMessagesFilterPhoto -> return serialize(dto = dto)
            is SearchMessagesFilterVideo -> return serialize(dto = dto)
            is SearchMessagesFilterVoiceNote -> return serialize(dto = dto)
            is SearchMessagesFilterPhotoAndVideo -> return serialize(dto = dto)
            is SearchMessagesFilterUrl -> return serialize(dto = dto)
            is SearchMessagesFilterChatPhoto -> return serialize(dto = dto)
            is SearchMessagesFilterVideoNote -> return serialize(dto = dto)
            is SearchMessagesFilterVoiceAndVideoNote -> return serialize(dto = dto)
            is SearchMessagesFilterMention -> return serialize(dto = dto)
            is SearchMessagesFilterUnreadMention -> return serialize(dto = dto)
            is SearchMessagesFilterUnreadReaction -> return serialize(dto = dto)
            is SearchMessagesFilterFailedToSend -> return serialize(dto = dto)
            is SearchMessagesFilterPinned -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: SearchMessagesChatTypeFilter): JsonElement {
        when(dto) {
            is SearchMessagesChatTypeFilterPrivate -> return serialize(dto = dto)
            is SearchMessagesChatTypeFilterGroup -> return serialize(dto = dto)
            is SearchMessagesChatTypeFilterChannel -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ChatAction): JsonElement {
        when(dto) {
            is ChatActionTyping -> return serialize(dto = dto)
            is ChatActionRecordingVideo -> return serialize(dto = dto)
            is ChatActionUploadingVideo -> return serialize(dto = dto)
            is ChatActionRecordingVoiceNote -> return serialize(dto = dto)
            is ChatActionUploadingVoiceNote -> return serialize(dto = dto)
            is ChatActionUploadingPhoto -> return serialize(dto = dto)
            is ChatActionUploadingDocument -> return serialize(dto = dto)
            is ChatActionChoosingSticker -> return serialize(dto = dto)
            is ChatActionChoosingLocation -> return serialize(dto = dto)
            is ChatActionChoosingContact -> return serialize(dto = dto)
            is ChatActionStartPlayingGame -> return serialize(dto = dto)
            is ChatActionRecordingVideoNote -> return serialize(dto = dto)
            is ChatActionUploadingVideoNote -> return serialize(dto = dto)
            is ChatActionWatchingAnimations -> return serialize(dto = dto)
            is ChatActionCancel -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: UserStatus): JsonElement {
        when(dto) {
            is UserStatusEmpty -> return serialize(dto = dto)
            is UserStatusOnline -> return serialize(dto = dto)
            is UserStatusOffline -> return serialize(dto = dto)
            is UserStatusRecently -> return serialize(dto = dto)
            is UserStatusLastWeek -> return serialize(dto = dto)
            is UserStatusLastMonth -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: EmojiCategorySource): JsonElement {
        when(dto) {
            is EmojiCategorySourceSearch -> return serialize(dto = dto)
            is EmojiCategorySourcePremium -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: EmojiCategoryType): JsonElement {
        when(dto) {
            is EmojiCategoryTypeDefault -> return serialize(dto = dto)
            is EmojiCategoryTypeRegularStickers -> return serialize(dto = dto)
            is EmojiCategoryTypeEmojiStatus -> return serialize(dto = dto)
            is EmojiCategoryTypeChatPhoto -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StoryAreaType): JsonElement {
        when(dto) {
            is StoryAreaTypeLocation -> return serialize(dto = dto)
            is StoryAreaTypeVenue -> return serialize(dto = dto)
            is StoryAreaTypeSuggestedReaction -> return serialize(dto = dto)
            is StoryAreaTypeMessage -> return serialize(dto = dto)
            is StoryAreaTypeLink -> return serialize(dto = dto)
            is StoryAreaTypeWeather -> return serialize(dto = dto)
            is StoryAreaTypeUpgradedGift -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InputStoryAreaType): JsonElement {
        when(dto) {
            is InputStoryAreaTypeLocation -> return serialize(dto = dto)
            is InputStoryAreaTypeFoundVenue -> return serialize(dto = dto)
            is InputStoryAreaTypePreviousVenue -> return serialize(dto = dto)
            is InputStoryAreaTypeSuggestedReaction -> return serialize(dto = dto)
            is InputStoryAreaTypeMessage -> return serialize(dto = dto)
            is InputStoryAreaTypeLink -> return serialize(dto = dto)
            is InputStoryAreaTypeWeather -> return serialize(dto = dto)
            is InputStoryAreaTypeUpgradedGift -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StoryContent): JsonElement {
        when(dto) {
            is StoryContentPhoto -> return serialize(dto = dto)
            is StoryContentVideo -> return serialize(dto = dto)
            is StoryContentUnsupported -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InputStoryContent): JsonElement {
        when(dto) {
            is InputStoryContentPhoto -> return serialize(dto = dto)
            is InputStoryContentVideo -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StoryList): JsonElement {
        when(dto) {
            is StoryListMain -> return serialize(dto = dto)
            is StoryListArchive -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StoryOrigin): JsonElement {
        when(dto) {
            is StoryOriginPublicStory -> return serialize(dto = dto)
            is StoryOriginHiddenUser -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StoryInteractionType): JsonElement {
        when(dto) {
            is StoryInteractionTypeView -> return serialize(dto = dto)
            is StoryInteractionTypeForward -> return serialize(dto = dto)
            is StoryInteractionTypeRepost -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PublicForward): JsonElement {
        when(dto) {
            is PublicForwardMessage -> return serialize(dto = dto)
            is PublicForwardStory -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ChatBoostSource): JsonElement {
        when(dto) {
            is ChatBoostSourceGiftCode -> return serialize(dto = dto)
            is ChatBoostSourceGiveaway -> return serialize(dto = dto)
            is ChatBoostSourcePremium -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ResendCodeReason): JsonElement {
        when(dto) {
            is ResendCodeReasonUserRequest -> return serialize(dto = dto)
            is ResendCodeReasonVerificationFailed -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: CallDiscardReason): JsonElement {
        when(dto) {
            is CallDiscardReasonEmpty -> return serialize(dto = dto)
            is CallDiscardReasonMissed -> return serialize(dto = dto)
            is CallDiscardReasonDeclined -> return serialize(dto = dto)
            is CallDiscardReasonDisconnected -> return serialize(dto = dto)
            is CallDiscardReasonHungUp -> return serialize(dto = dto)
            is CallDiscardReasonUpgradeToGroupCall -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: CallServerType): JsonElement {
        when(dto) {
            is CallServerTypeTelegramReflector -> return serialize(dto = dto)
            is CallServerTypeWebrtc -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: CallState): JsonElement {
        when(dto) {
            is CallStatePending -> return serialize(dto = dto)
            is CallStateExchangingKeys -> return serialize(dto = dto)
            is CallStateReady -> return serialize(dto = dto)
            is CallStateHangingUp -> return serialize(dto = dto)
            is CallStateDiscarded -> return serialize(dto = dto)
            is CallStateError -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: GroupCallVideoQuality): JsonElement {
        when(dto) {
            is GroupCallVideoQualityThumbnail -> return serialize(dto = dto)
            is GroupCallVideoQualityMedium -> return serialize(dto = dto)
            is GroupCallVideoQualityFull -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InviteGroupCallParticipantResult): JsonElement {
        when(dto) {
            is InviteGroupCallParticipantResultUserPrivacyRestricted -> return serialize(dto = dto)
            is InviteGroupCallParticipantResultUserAlreadyParticipant -> return serialize(dto = dto)
            is InviteGroupCallParticipantResultUserWasBanned -> return serialize(dto = dto)
            is InviteGroupCallParticipantResultSuccess -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: GroupCallDataChannel): JsonElement {
        when(dto) {
            is GroupCallDataChannelMain -> return serialize(dto = dto)
            is GroupCallDataChannelScreenSharing -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InputGroupCall): JsonElement {
        when(dto) {
            is InputGroupCallLink -> return serialize(dto = dto)
            is InputGroupCallMessage -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: CallProblem): JsonElement {
        when(dto) {
            is CallProblemEcho -> return serialize(dto = dto)
            is CallProblemNoise -> return serialize(dto = dto)
            is CallProblemInterruptions -> return serialize(dto = dto)
            is CallProblemDistortedSpeech -> return serialize(dto = dto)
            is CallProblemSilentLocal -> return serialize(dto = dto)
            is CallProblemSilentRemote -> return serialize(dto = dto)
            is CallProblemDropped -> return serialize(dto = dto)
            is CallProblemDistortedVideo -> return serialize(dto = dto)
            is CallProblemPixelatedVideo -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: FirebaseAuthenticationSettings): JsonElement {
        when(dto) {
            is FirebaseAuthenticationSettingsAndroid -> return serialize(dto = dto)
            is FirebaseAuthenticationSettingsIos -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ReactionUnavailabilityReason): JsonElement {
        when(dto) {
            is ReactionUnavailabilityReasonAnonymousAdministrator -> return serialize(dto = dto)
            is ReactionUnavailabilityReasonGuest -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: DiceStickers): JsonElement {
        when(dto) {
            is DiceStickersRegular -> return serialize(dto = dto)
            is DiceStickersSlotMachine -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: SpeechRecognitionResult): JsonElement {
        when(dto) {
            is SpeechRecognitionResultPending -> return serialize(dto = dto)
            is SpeechRecognitionResultText -> return serialize(dto = dto)
            is SpeechRecognitionResultError -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: BotWriteAccessAllowReason): JsonElement {
        when(dto) {
            is BotWriteAccessAllowReasonConnectedWebsite -> return serialize(dto = dto)
            is BotWriteAccessAllowReasonAddedToAttachmentMenu -> return serialize(dto = dto)
            is BotWriteAccessAllowReasonLaunchedWebApp -> return serialize(dto = dto)
            is BotWriteAccessAllowReasonAcceptedRequest -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: TargetChat): JsonElement {
        when(dto) {
            is TargetChatCurrent -> return serialize(dto = dto)
            is TargetChatChosen -> return serialize(dto = dto)
            is TargetChatInternalLink -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InputInlineQueryResult): JsonElement {
        when(dto) {
            is InputInlineQueryResultAnimation -> return serialize(dto = dto)
            is InputInlineQueryResultArticle -> return serialize(dto = dto)
            is InputInlineQueryResultAudio -> return serialize(dto = dto)
            is InputInlineQueryResultContact -> return serialize(dto = dto)
            is InputInlineQueryResultDocument -> return serialize(dto = dto)
            is InputInlineQueryResultGame -> return serialize(dto = dto)
            is InputInlineQueryResultLocation -> return serialize(dto = dto)
            is InputInlineQueryResultPhoto -> return serialize(dto = dto)
            is InputInlineQueryResultSticker -> return serialize(dto = dto)
            is InputInlineQueryResultVenue -> return serialize(dto = dto)
            is InputInlineQueryResultVideo -> return serialize(dto = dto)
            is InputInlineQueryResultVoiceNote -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InlineQueryResult): JsonElement {
        when(dto) {
            is InlineQueryResultArticle -> return serialize(dto = dto)
            is InlineQueryResultContact -> return serialize(dto = dto)
            is InlineQueryResultLocation -> return serialize(dto = dto)
            is InlineQueryResultVenue -> return serialize(dto = dto)
            is InlineQueryResultGame -> return serialize(dto = dto)
            is InlineQueryResultAnimation -> return serialize(dto = dto)
            is InlineQueryResultAudio -> return serialize(dto = dto)
            is InlineQueryResultDocument -> return serialize(dto = dto)
            is InlineQueryResultPhoto -> return serialize(dto = dto)
            is InlineQueryResultSticker -> return serialize(dto = dto)
            is InlineQueryResultVideo -> return serialize(dto = dto)
            is InlineQueryResultVoiceNote -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InlineQueryResultsButtonType): JsonElement {
        when(dto) {
            is InlineQueryResultsButtonTypeStartBot -> return serialize(dto = dto)
            is InlineQueryResultsButtonTypeWebApp -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: CallbackQueryPayload): JsonElement {
        when(dto) {
            is CallbackQueryPayloadData -> return serialize(dto = dto)
            is CallbackQueryPayloadDataWithPassword -> return serialize(dto = dto)
            is CallbackQueryPayloadGame -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ChatEventAction): JsonElement {
        when(dto) {
            is ChatEventMessageEdited -> return serialize(dto = dto)
            is ChatEventMessageDeleted -> return serialize(dto = dto)
            is ChatEventMessagePinned -> return serialize(dto = dto)
            is ChatEventMessageUnpinned -> return serialize(dto = dto)
            is ChatEventPollStopped -> return serialize(dto = dto)
            is ChatEventMemberJoined -> return serialize(dto = dto)
            is ChatEventMemberJoinedByInviteLink -> return serialize(dto = dto)
            is ChatEventMemberJoinedByRequest -> return serialize(dto = dto)
            is ChatEventMemberInvited -> return serialize(dto = dto)
            is ChatEventMemberLeft -> return serialize(dto = dto)
            is ChatEventMemberPromoted -> return serialize(dto = dto)
            is ChatEventMemberRestricted -> return serialize(dto = dto)
            is ChatEventMemberSubscriptionExtended -> return serialize(dto = dto)
            is ChatEventAvailableReactionsChanged -> return serialize(dto = dto)
            is ChatEventBackgroundChanged -> return serialize(dto = dto)
            is ChatEventDescriptionChanged -> return serialize(dto = dto)
            is ChatEventEmojiStatusChanged -> return serialize(dto = dto)
            is ChatEventLinkedChatChanged -> return serialize(dto = dto)
            is ChatEventLocationChanged -> return serialize(dto = dto)
            is ChatEventMessageAutoDeleteTimeChanged -> return serialize(dto = dto)
            is ChatEventPermissionsChanged -> return serialize(dto = dto)
            is ChatEventPhotoChanged -> return serialize(dto = dto)
            is ChatEventSlowModeDelayChanged -> return serialize(dto = dto)
            is ChatEventStickerSetChanged -> return serialize(dto = dto)
            is ChatEventCustomEmojiStickerSetChanged -> return serialize(dto = dto)
            is ChatEventTitleChanged -> return serialize(dto = dto)
            is ChatEventUsernameChanged -> return serialize(dto = dto)
            is ChatEventActiveUsernamesChanged -> return serialize(dto = dto)
            is ChatEventAccentColorChanged -> return serialize(dto = dto)
            is ChatEventProfileAccentColorChanged -> return serialize(dto = dto)
            is ChatEventHasProtectedContentToggled -> return serialize(dto = dto)
            is ChatEventInvitesToggled -> return serialize(dto = dto)
            is ChatEventIsAllHistoryAvailableToggled -> return serialize(dto = dto)
            is ChatEventHasAggressiveAntiSpamEnabledToggled -> return serialize(dto = dto)
            is ChatEventSignMessagesToggled -> return serialize(dto = dto)
            is ChatEventShowMessageSenderToggled -> return serialize(dto = dto)
            is ChatEventAutomaticTranslationToggled -> return serialize(dto = dto)
            is ChatEventInviteLinkEdited -> return serialize(dto = dto)
            is ChatEventInviteLinkRevoked -> return serialize(dto = dto)
            is ChatEventInviteLinkDeleted -> return serialize(dto = dto)
            is ChatEventVideoChatCreated -> return serialize(dto = dto)
            is ChatEventVideoChatEnded -> return serialize(dto = dto)
            is ChatEventVideoChatMuteNewParticipantsToggled -> return serialize(dto = dto)
            is ChatEventVideoChatParticipantIsMutedToggled -> return serialize(dto = dto)
            is ChatEventVideoChatParticipantVolumeLevelChanged -> return serialize(dto = dto)
            is ChatEventIsForumToggled -> return serialize(dto = dto)
            is ChatEventForumTopicCreated -> return serialize(dto = dto)
            is ChatEventForumTopicEdited -> return serialize(dto = dto)
            is ChatEventForumTopicToggleIsClosed -> return serialize(dto = dto)
            is ChatEventForumTopicToggleIsHidden -> return serialize(dto = dto)
            is ChatEventForumTopicDeleted -> return serialize(dto = dto)
            is ChatEventForumTopicPinned -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: LanguagePackStringValue): JsonElement {
        when(dto) {
            is LanguagePackStringValueOrdinary -> return serialize(dto = dto)
            is LanguagePackStringValuePluralized -> return serialize(dto = dto)
            is LanguagePackStringValueDeleted -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PremiumLimitType): JsonElement {
        when(dto) {
            is PremiumLimitTypeSupergroupCount -> return serialize(dto = dto)
            is PremiumLimitTypePinnedChatCount -> return serialize(dto = dto)
            is PremiumLimitTypeCreatedPublicChatCount -> return serialize(dto = dto)
            is PremiumLimitTypeSavedAnimationCount -> return serialize(dto = dto)
            is PremiumLimitTypeFavoriteStickerCount -> return serialize(dto = dto)
            is PremiumLimitTypeChatFolderCount -> return serialize(dto = dto)
            is PremiumLimitTypeChatFolderChosenChatCount -> return serialize(dto = dto)
            is PremiumLimitTypePinnedArchivedChatCount -> return serialize(dto = dto)
            is PremiumLimitTypePinnedSavedMessagesTopicCount -> return serialize(dto = dto)
            is PremiumLimitTypeCaptionLength -> return serialize(dto = dto)
            is PremiumLimitTypeBioLength -> return serialize(dto = dto)
            is PremiumLimitTypeChatFolderInviteLinkCount -> return serialize(dto = dto)
            is PremiumLimitTypeShareableChatFolderCount -> return serialize(dto = dto)
            is PremiumLimitTypeActiveStoryCount -> return serialize(dto = dto)
            is PremiumLimitTypeWeeklyPostedStoryCount -> return serialize(dto = dto)
            is PremiumLimitTypeMonthlyPostedStoryCount -> return serialize(dto = dto)
            is PremiumLimitTypeStoryCaptionLength -> return serialize(dto = dto)
            is PremiumLimitTypeStorySuggestedReactionAreaCount -> return serialize(dto = dto)
            is PremiumLimitTypeSimilarChatCount -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PremiumFeature): JsonElement {
        when(dto) {
            is PremiumFeatureIncreasedLimits -> return serialize(dto = dto)
            is PremiumFeatureIncreasedUploadFileSize -> return serialize(dto = dto)
            is PremiumFeatureImprovedDownloadSpeed -> return serialize(dto = dto)
            is PremiumFeatureVoiceRecognition -> return serialize(dto = dto)
            is PremiumFeatureDisabledAds -> return serialize(dto = dto)
            is PremiumFeatureUniqueReactions -> return serialize(dto = dto)
            is PremiumFeatureUniqueStickers -> return serialize(dto = dto)
            is PremiumFeatureCustomEmoji -> return serialize(dto = dto)
            is PremiumFeatureAdvancedChatManagement -> return serialize(dto = dto)
            is PremiumFeatureProfileBadge -> return serialize(dto = dto)
            is PremiumFeatureEmojiStatus -> return serialize(dto = dto)
            is PremiumFeatureAnimatedProfilePhoto -> return serialize(dto = dto)
            is PremiumFeatureForumTopicIcon -> return serialize(dto = dto)
            is PremiumFeatureAppIcons -> return serialize(dto = dto)
            is PremiumFeatureRealTimeChatTranslation -> return serialize(dto = dto)
            is PremiumFeatureUpgradedStories -> return serialize(dto = dto)
            is PremiumFeatureChatBoost -> return serialize(dto = dto)
            is PremiumFeatureAccentColor -> return serialize(dto = dto)
            is PremiumFeatureBackgroundForBoth -> return serialize(dto = dto)
            is PremiumFeatureSavedMessagesTags -> return serialize(dto = dto)
            is PremiumFeatureMessagePrivacy -> return serialize(dto = dto)
            is PremiumFeatureLastSeenTimes -> return serialize(dto = dto)
            is PremiumFeatureBusiness -> return serialize(dto = dto)
            is PremiumFeatureMessageEffects -> return serialize(dto = dto)
            is PremiumFeatureChecklists -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: BusinessFeature): JsonElement {
        when(dto) {
            is BusinessFeatureLocation -> return serialize(dto = dto)
            is BusinessFeatureOpeningHours -> return serialize(dto = dto)
            is BusinessFeatureQuickReplies -> return serialize(dto = dto)
            is BusinessFeatureGreetingMessage -> return serialize(dto = dto)
            is BusinessFeatureAwayMessage -> return serialize(dto = dto)
            is BusinessFeatureAccountLinks -> return serialize(dto = dto)
            is BusinessFeatureStartPage -> return serialize(dto = dto)
            is BusinessFeatureBots -> return serialize(dto = dto)
            is BusinessFeatureEmojiStatus -> return serialize(dto = dto)
            is BusinessFeatureChatFolderTags -> return serialize(dto = dto)
            is BusinessFeatureUpgradedStories -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PremiumStoryFeature): JsonElement {
        when(dto) {
            is PremiumStoryFeaturePriorityOrder -> return serialize(dto = dto)
            is PremiumStoryFeatureStealthMode -> return serialize(dto = dto)
            is PremiumStoryFeaturePermanentViewsHistory -> return serialize(dto = dto)
            is PremiumStoryFeatureCustomExpirationDuration -> return serialize(dto = dto)
            is PremiumStoryFeatureSaveStories -> return serialize(dto = dto)
            is PremiumStoryFeatureLinksAndFormatting -> return serialize(dto = dto)
            is PremiumStoryFeatureVideoQuality -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PremiumSource): JsonElement {
        when(dto) {
            is PremiumSourceLimitExceeded -> return serialize(dto = dto)
            is PremiumSourceFeature -> return serialize(dto = dto)
            is PremiumSourceBusinessFeature -> return serialize(dto = dto)
            is PremiumSourceStoryFeature -> return serialize(dto = dto)
            is PremiumSourceLink -> return serialize(dto = dto)
            is PremiumSourceSettings -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StorePaymentPurpose): JsonElement {
        when(dto) {
            is StorePaymentPurposePremiumSubscription -> return serialize(dto = dto)
            is StorePaymentPurposePremiumGift -> return serialize(dto = dto)
            is StorePaymentPurposePremiumGiftCodes -> return serialize(dto = dto)
            is StorePaymentPurposePremiumGiveaway -> return serialize(dto = dto)
            is StorePaymentPurposeStarGiveaway -> return serialize(dto = dto)
            is StorePaymentPurposeStars -> return serialize(dto = dto)
            is StorePaymentPurposeGiftedStars -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StoreTransaction): JsonElement {
        when(dto) {
            is StoreTransactionAppStore -> return serialize(dto = dto)
            is StoreTransactionGooglePlay -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: TelegramPaymentPurpose): JsonElement {
        when(dto) {
            is TelegramPaymentPurposePremiumGift -> return serialize(dto = dto)
            is TelegramPaymentPurposePremiumGiftCodes -> return serialize(dto = dto)
            is TelegramPaymentPurposePremiumGiveaway -> return serialize(dto = dto)
            is TelegramPaymentPurposeStars -> return serialize(dto = dto)
            is TelegramPaymentPurposeGiftedStars -> return serialize(dto = dto)
            is TelegramPaymentPurposeStarGiveaway -> return serialize(dto = dto)
            is TelegramPaymentPurposeJoinChat -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: DeviceToken): JsonElement {
        when(dto) {
            is DeviceTokenFirebaseCloudMessaging -> return serialize(dto = dto)
            is DeviceTokenApplePush -> return serialize(dto = dto)
            is DeviceTokenApplePushVoIP -> return serialize(dto = dto)
            is DeviceTokenWindowsPush -> return serialize(dto = dto)
            is DeviceTokenMicrosoftPush -> return serialize(dto = dto)
            is DeviceTokenMicrosoftPushVoIP -> return serialize(dto = dto)
            is DeviceTokenWebPush -> return serialize(dto = dto)
            is DeviceTokenSimplePush -> return serialize(dto = dto)
            is DeviceTokenUbuntuPush -> return serialize(dto = dto)
            is DeviceTokenBlackBerryPush -> return serialize(dto = dto)
            is DeviceTokenTizenPush -> return serialize(dto = dto)
            is DeviceTokenHuaweiPush -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: BackgroundFill): JsonElement {
        when(dto) {
            is BackgroundFillSolid -> return serialize(dto = dto)
            is BackgroundFillGradient -> return serialize(dto = dto)
            is BackgroundFillFreeformGradient -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: BackgroundType): JsonElement {
        when(dto) {
            is BackgroundTypeWallpaper -> return serialize(dto = dto)
            is BackgroundTypePattern -> return serialize(dto = dto)
            is BackgroundTypeFill -> return serialize(dto = dto)
            is BackgroundTypeChatTheme -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InputBackground): JsonElement {
        when(dto) {
            is InputBackgroundLocal -> return serialize(dto = dto)
            is InputBackgroundRemote -> return serialize(dto = dto)
            is InputBackgroundPrevious -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: CanPostStoryResult): JsonElement {
        when(dto) {
            is CanPostStoryResultOk -> return serialize(dto = dto)
            is CanPostStoryResultPremiumNeeded -> return serialize(dto = dto)
            is CanPostStoryResultBoostNeeded -> return serialize(dto = dto)
            is CanPostStoryResultActiveStoryLimitExceeded -> return serialize(dto = dto)
            is CanPostStoryResultWeeklyLimitExceeded -> return serialize(dto = dto)
            is CanPostStoryResultMonthlyLimitExceeded -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: CanTransferOwnershipResult): JsonElement {
        when(dto) {
            is CanTransferOwnershipResultOk -> return serialize(dto = dto)
            is CanTransferOwnershipResultPasswordNeeded -> return serialize(dto = dto)
            is CanTransferOwnershipResultPasswordTooFresh -> return serialize(dto = dto)
            is CanTransferOwnershipResultSessionTooFresh -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: CheckChatUsernameResult): JsonElement {
        when(dto) {
            is CheckChatUsernameResultOk -> return serialize(dto = dto)
            is CheckChatUsernameResultUsernameInvalid -> return serialize(dto = dto)
            is CheckChatUsernameResultUsernameOccupied -> return serialize(dto = dto)
            is CheckChatUsernameResultUsernamePurchasable -> return serialize(dto = dto)
            is CheckChatUsernameResultPublicChatsTooMany -> return serialize(dto = dto)
            is CheckChatUsernameResultPublicGroupsUnavailable -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: CheckStickerSetNameResult): JsonElement {
        when(dto) {
            is CheckStickerSetNameResultOk -> return serialize(dto = dto)
            is CheckStickerSetNameResultNameInvalid -> return serialize(dto = dto)
            is CheckStickerSetNameResultNameOccupied -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ResetPasswordResult): JsonElement {
        when(dto) {
            is ResetPasswordResultOk -> return serialize(dto = dto)
            is ResetPasswordResultPending -> return serialize(dto = dto)
            is ResetPasswordResultDeclined -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: MessageFileType): JsonElement {
        when(dto) {
            is MessageFileTypePrivate -> return serialize(dto = dto)
            is MessageFileTypeGroup -> return serialize(dto = dto)
            is MessageFileTypeUnknown -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PushMessageContent): JsonElement {
        when(dto) {
            is PushMessageContentHidden -> return serialize(dto = dto)
            is PushMessageContentAnimation -> return serialize(dto = dto)
            is PushMessageContentAudio -> return serialize(dto = dto)
            is PushMessageContentContact -> return serialize(dto = dto)
            is PushMessageContentContactRegistered -> return serialize(dto = dto)
            is PushMessageContentDocument -> return serialize(dto = dto)
            is PushMessageContentGame -> return serialize(dto = dto)
            is PushMessageContentGameScore -> return serialize(dto = dto)
            is PushMessageContentInvoice -> return serialize(dto = dto)
            is PushMessageContentLocation -> return serialize(dto = dto)
            is PushMessageContentPaidMedia -> return serialize(dto = dto)
            is PushMessageContentPhoto -> return serialize(dto = dto)
            is PushMessageContentPoll -> return serialize(dto = dto)
            is PushMessageContentPremiumGiftCode -> return serialize(dto = dto)
            is PushMessageContentGiveaway -> return serialize(dto = dto)
            is PushMessageContentGift -> return serialize(dto = dto)
            is PushMessageContentUpgradedGift -> return serialize(dto = dto)
            is PushMessageContentScreenshotTaken -> return serialize(dto = dto)
            is PushMessageContentSticker -> return serialize(dto = dto)
            is PushMessageContentStory -> return serialize(dto = dto)
            is PushMessageContentText -> return serialize(dto = dto)
            is PushMessageContentChecklist -> return serialize(dto = dto)
            is PushMessageContentVideo -> return serialize(dto = dto)
            is PushMessageContentVideoNote -> return serialize(dto = dto)
            is PushMessageContentVoiceNote -> return serialize(dto = dto)
            is PushMessageContentBasicGroupChatCreate -> return serialize(dto = dto)
            is PushMessageContentVideoChatStarted -> return serialize(dto = dto)
            is PushMessageContentVideoChatEnded -> return serialize(dto = dto)
            is PushMessageContentInviteVideoChatParticipants -> return serialize(dto = dto)
            is PushMessageContentChatAddMembers -> return serialize(dto = dto)
            is PushMessageContentChatChangePhoto -> return serialize(dto = dto)
            is PushMessageContentChatChangeTitle -> return serialize(dto = dto)
            is PushMessageContentChatSetBackground -> return serialize(dto = dto)
            is PushMessageContentChatSetTheme -> return serialize(dto = dto)
            is PushMessageContentChatDeleteMember -> return serialize(dto = dto)
            is PushMessageContentChatJoinByLink -> return serialize(dto = dto)
            is PushMessageContentChatJoinByRequest -> return serialize(dto = dto)
            is PushMessageContentRecurringPayment -> return serialize(dto = dto)
            is PushMessageContentSuggestProfilePhoto -> return serialize(dto = dto)
            is PushMessageContentProximityAlertTriggered -> return serialize(dto = dto)
            is PushMessageContentChecklistTasksAdded -> return serialize(dto = dto)
            is PushMessageContentChecklistTasksDone -> return serialize(dto = dto)
            is PushMessageContentMessageForwards -> return serialize(dto = dto)
            is PushMessageContentMediaAlbum -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: NotificationType): JsonElement {
        when(dto) {
            is NotificationTypeNewMessage -> return serialize(dto = dto)
            is NotificationTypeNewSecretChat -> return serialize(dto = dto)
            is NotificationTypeNewCall -> return serialize(dto = dto)
            is NotificationTypeNewPushMessage -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: NotificationGroupType): JsonElement {
        when(dto) {
            is NotificationGroupTypeMessages -> return serialize(dto = dto)
            is NotificationGroupTypeMentions -> return serialize(dto = dto)
            is NotificationGroupTypeSecretChat -> return serialize(dto = dto)
            is NotificationGroupTypeCalls -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: OptionValue): JsonElement {
        when(dto) {
            is OptionValueBoolean -> return serialize(dto = dto)
            is OptionValueEmpty -> return serialize(dto = dto)
            is OptionValueInteger -> return serialize(dto = dto)
            is OptionValueString -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: JsonValue): JsonElement {
        when(dto) {
            is JsonValueNull -> return serialize(dto = dto)
            is JsonValueBoolean -> return serialize(dto = dto)
            is JsonValueNumber -> return serialize(dto = dto)
            is JsonValueString -> return serialize(dto = dto)
            is JsonValueArray -> return serialize(dto = dto)
            is JsonValueObject -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StoryPrivacySettings): JsonElement {
        when(dto) {
            is StoryPrivacySettingsEveryone -> return serialize(dto = dto)
            is StoryPrivacySettingsContacts -> return serialize(dto = dto)
            is StoryPrivacySettingsCloseFriends -> return serialize(dto = dto)
            is StoryPrivacySettingsSelectedUsers -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: UserPrivacySettingRule): JsonElement {
        when(dto) {
            is UserPrivacySettingRuleAllowAll -> return serialize(dto = dto)
            is UserPrivacySettingRuleAllowContacts -> return serialize(dto = dto)
            is UserPrivacySettingRuleAllowBots -> return serialize(dto = dto)
            is UserPrivacySettingRuleAllowPremiumUsers -> return serialize(dto = dto)
            is UserPrivacySettingRuleAllowUsers -> return serialize(dto = dto)
            is UserPrivacySettingRuleAllowChatMembers -> return serialize(dto = dto)
            is UserPrivacySettingRuleRestrictAll -> return serialize(dto = dto)
            is UserPrivacySettingRuleRestrictContacts -> return serialize(dto = dto)
            is UserPrivacySettingRuleRestrictBots -> return serialize(dto = dto)
            is UserPrivacySettingRuleRestrictUsers -> return serialize(dto = dto)
            is UserPrivacySettingRuleRestrictChatMembers -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: UserPrivacySetting): JsonElement {
        when(dto) {
            is UserPrivacySettingShowStatus -> return serialize(dto = dto)
            is UserPrivacySettingShowProfilePhoto -> return serialize(dto = dto)
            is UserPrivacySettingShowLinkInForwardedMessages -> return serialize(dto = dto)
            is UserPrivacySettingShowPhoneNumber -> return serialize(dto = dto)
            is UserPrivacySettingShowBio -> return serialize(dto = dto)
            is UserPrivacySettingShowBirthdate -> return serialize(dto = dto)
            is UserPrivacySettingAllowChatInvites -> return serialize(dto = dto)
            is UserPrivacySettingAllowCalls -> return serialize(dto = dto)
            is UserPrivacySettingAllowPeerToPeerCalls -> return serialize(dto = dto)
            is UserPrivacySettingAllowFindingByPhoneNumber -> return serialize(dto = dto)
            is UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages -> return serialize(dto = dto)
            is UserPrivacySettingAutosaveGifts -> return serialize(dto = dto)
            is UserPrivacySettingAllowUnpaidMessages -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: CanSendMessageToUserResult): JsonElement {
        when(dto) {
            is CanSendMessageToUserResultOk -> return serialize(dto = dto)
            is CanSendMessageToUserResultUserHasPaidMessages -> return serialize(dto = dto)
            is CanSendMessageToUserResultUserIsDeleted -> return serialize(dto = dto)
            is CanSendMessageToUserResultUserRestrictsNewChats -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: SessionType): JsonElement {
        when(dto) {
            is SessionTypeAndroid -> return serialize(dto = dto)
            is SessionTypeApple -> return serialize(dto = dto)
            is SessionTypeBrave -> return serialize(dto = dto)
            is SessionTypeChrome -> return serialize(dto = dto)
            is SessionTypeEdge -> return serialize(dto = dto)
            is SessionTypeFirefox -> return serialize(dto = dto)
            is SessionTypeIpad -> return serialize(dto = dto)
            is SessionTypeIphone -> return serialize(dto = dto)
            is SessionTypeLinux -> return serialize(dto = dto)
            is SessionTypeMac -> return serialize(dto = dto)
            is SessionTypeOpera -> return serialize(dto = dto)
            is SessionTypeSafari -> return serialize(dto = dto)
            is SessionTypeUbuntu -> return serialize(dto = dto)
            is SessionTypeUnknown -> return serialize(dto = dto)
            is SessionTypeVivaldi -> return serialize(dto = dto)
            is SessionTypeWindows -> return serialize(dto = dto)
            is SessionTypeXbox -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ReportReason): JsonElement {
        when(dto) {
            is ReportReasonSpam -> return serialize(dto = dto)
            is ReportReasonViolence -> return serialize(dto = dto)
            is ReportReasonPornography -> return serialize(dto = dto)
            is ReportReasonChildAbuse -> return serialize(dto = dto)
            is ReportReasonCopyright -> return serialize(dto = dto)
            is ReportReasonUnrelatedLocation -> return serialize(dto = dto)
            is ReportReasonFake -> return serialize(dto = dto)
            is ReportReasonIllegalDrugs -> return serialize(dto = dto)
            is ReportReasonPersonalDetails -> return serialize(dto = dto)
            is ReportReasonCustom -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ReportChatResult): JsonElement {
        when(dto) {
            is ReportChatResultOk -> return serialize(dto = dto)
            is ReportChatResultOptionRequired -> return serialize(dto = dto)
            is ReportChatResultTextRequired -> return serialize(dto = dto)
            is ReportChatResultMessagesRequired -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ReportStoryResult): JsonElement {
        when(dto) {
            is ReportStoryResultOk -> return serialize(dto = dto)
            is ReportStoryResultOptionRequired -> return serialize(dto = dto)
            is ReportStoryResultTextRequired -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: InternalLinkType): JsonElement {
        when(dto) {
            is InternalLinkTypeActiveSessions -> return serialize(dto = dto)
            is InternalLinkTypeAttachmentMenuBot -> return serialize(dto = dto)
            is InternalLinkTypeAuthenticationCode -> return serialize(dto = dto)
            is InternalLinkTypeBackground -> return serialize(dto = dto)
            is InternalLinkTypeBotAddToChannel -> return serialize(dto = dto)
            is InternalLinkTypeBotStart -> return serialize(dto = dto)
            is InternalLinkTypeBotStartInGroup -> return serialize(dto = dto)
            is InternalLinkTypeBusinessChat -> return serialize(dto = dto)
            is InternalLinkTypeBuyStars -> return serialize(dto = dto)
            is InternalLinkTypeChangePhoneNumber -> return serialize(dto = dto)
            is InternalLinkTypeChatAffiliateProgram -> return serialize(dto = dto)
            is InternalLinkTypeChatBoost -> return serialize(dto = dto)
            is InternalLinkTypeChatFolderInvite -> return serialize(dto = dto)
            is InternalLinkTypeChatFolderSettings -> return serialize(dto = dto)
            is InternalLinkTypeChatInvite -> return serialize(dto = dto)
            is InternalLinkTypeDefaultMessageAutoDeleteTimerSettings -> return serialize(dto = dto)
            is InternalLinkTypeEditProfileSettings -> return serialize(dto = dto)
            is InternalLinkTypeGame -> return serialize(dto = dto)
            is InternalLinkTypeGroupCall -> return serialize(dto = dto)
            is InternalLinkTypeInstantView -> return serialize(dto = dto)
            is InternalLinkTypeInvoice -> return serialize(dto = dto)
            is InternalLinkTypeLanguagePack -> return serialize(dto = dto)
            is InternalLinkTypeLanguageSettings -> return serialize(dto = dto)
            is InternalLinkTypeMainWebApp -> return serialize(dto = dto)
            is InternalLinkTypeMessage -> return serialize(dto = dto)
            is InternalLinkTypeMessageDraft -> return serialize(dto = dto)
            is InternalLinkTypeMyStars -> return serialize(dto = dto)
            is InternalLinkTypePassportDataRequest -> return serialize(dto = dto)
            is InternalLinkTypePhoneNumberConfirmation -> return serialize(dto = dto)
            is InternalLinkTypePremiumFeatures -> return serialize(dto = dto)
            is InternalLinkTypePremiumGift -> return serialize(dto = dto)
            is InternalLinkTypePremiumGiftCode -> return serialize(dto = dto)
            is InternalLinkTypePrivacyAndSecuritySettings -> return serialize(dto = dto)
            is InternalLinkTypeProxy -> return serialize(dto = dto)
            is InternalLinkTypePublicChat -> return serialize(dto = dto)
            is InternalLinkTypeQrCodeAuthentication -> return serialize(dto = dto)
            is InternalLinkTypeRestorePurchases -> return serialize(dto = dto)
            is InternalLinkTypeSettings -> return serialize(dto = dto)
            is InternalLinkTypeStickerSet -> return serialize(dto = dto)
            is InternalLinkTypeStory -> return serialize(dto = dto)
            is InternalLinkTypeTheme -> return serialize(dto = dto)
            is InternalLinkTypeThemeSettings -> return serialize(dto = dto)
            is InternalLinkTypeUnknownDeepLink -> return serialize(dto = dto)
            is InternalLinkTypeUnsupportedProxy -> return serialize(dto = dto)
            is InternalLinkTypeUpgradedGift -> return serialize(dto = dto)
            is InternalLinkTypeUserPhoneNumber -> return serialize(dto = dto)
            is InternalLinkTypeUserToken -> return serialize(dto = dto)
            is InternalLinkTypeVideoChat -> return serialize(dto = dto)
            is InternalLinkTypeWebApp -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: BlockList): JsonElement {
        when(dto) {
            is BlockListMain -> return serialize(dto = dto)
            is BlockListStories -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: FileType): JsonElement {
        when(dto) {
            is FileTypeNone -> return serialize(dto = dto)
            is FileTypeAnimation -> return serialize(dto = dto)
            is FileTypeAudio -> return serialize(dto = dto)
            is FileTypeDocument -> return serialize(dto = dto)
            is FileTypeNotificationSound -> return serialize(dto = dto)
            is FileTypePhoto -> return serialize(dto = dto)
            is FileTypePhotoStory -> return serialize(dto = dto)
            is FileTypeProfilePhoto -> return serialize(dto = dto)
            is FileTypeSecret -> return serialize(dto = dto)
            is FileTypeSecretThumbnail -> return serialize(dto = dto)
            is FileTypeSecure -> return serialize(dto = dto)
            is FileTypeSelfDestructingPhoto -> return serialize(dto = dto)
            is FileTypeSelfDestructingVideo -> return serialize(dto = dto)
            is FileTypeSelfDestructingVideoNote -> return serialize(dto = dto)
            is FileTypeSelfDestructingVoiceNote -> return serialize(dto = dto)
            is FileTypeSticker -> return serialize(dto = dto)
            is FileTypeThumbnail -> return serialize(dto = dto)
            is FileTypeUnknown -> return serialize(dto = dto)
            is FileTypeVideo -> return serialize(dto = dto)
            is FileTypeVideoNote -> return serialize(dto = dto)
            is FileTypeVideoStory -> return serialize(dto = dto)
            is FileTypeVoiceNote -> return serialize(dto = dto)
            is FileTypeWallpaper -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: NetworkType): JsonElement {
        when(dto) {
            is NetworkTypeNone -> return serialize(dto = dto)
            is NetworkTypeMobile -> return serialize(dto = dto)
            is NetworkTypeMobileRoaming -> return serialize(dto = dto)
            is NetworkTypeWiFi -> return serialize(dto = dto)
            is NetworkTypeOther -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: NetworkStatisticsEntry): JsonElement {
        when(dto) {
            is NetworkStatisticsEntryFile -> return serialize(dto = dto)
            is NetworkStatisticsEntryCall -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: AutosaveSettingsScope): JsonElement {
        when(dto) {
            is AutosaveSettingsScopePrivateChats -> return serialize(dto = dto)
            is AutosaveSettingsScopeGroupChats -> return serialize(dto = dto)
            is AutosaveSettingsScopeChannelChats -> return serialize(dto = dto)
            is AutosaveSettingsScopeChat -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ConnectionState): JsonElement {
        when(dto) {
            is ConnectionStateWaitingForNetwork -> return serialize(dto = dto)
            is ConnectionStateConnectingToProxy -> return serialize(dto = dto)
            is ConnectionStateConnecting -> return serialize(dto = dto)
            is ConnectionStateUpdating -> return serialize(dto = dto)
            is ConnectionStateReady -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: TopChatCategory): JsonElement {
        when(dto) {
            is TopChatCategoryUsers -> return serialize(dto = dto)
            is TopChatCategoryBots -> return serialize(dto = dto)
            is TopChatCategoryGroups -> return serialize(dto = dto)
            is TopChatCategoryChannels -> return serialize(dto = dto)
            is TopChatCategoryInlineBots -> return serialize(dto = dto)
            is TopChatCategoryWebAppBots -> return serialize(dto = dto)
            is TopChatCategoryCalls -> return serialize(dto = dto)
            is TopChatCategoryForwardChats -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: TMeUrlType): JsonElement {
        when(dto) {
            is TMeUrlTypeUser -> return serialize(dto = dto)
            is TMeUrlTypeSupergroup -> return serialize(dto = dto)
            is TMeUrlTypeChatInvite -> return serialize(dto = dto)
            is TMeUrlTypeStickerSet -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: SuggestedAction): JsonElement {
        when(dto) {
            is SuggestedActionEnableArchiveAndMuteNewChats -> return serialize(dto = dto)
            is SuggestedActionCheckPassword -> return serialize(dto = dto)
            is SuggestedActionCheckPhoneNumber -> return serialize(dto = dto)
            is SuggestedActionViewChecksHint -> return serialize(dto = dto)
            is SuggestedActionConvertToBroadcastGroup -> return serialize(dto = dto)
            is SuggestedActionSetPassword -> return serialize(dto = dto)
            is SuggestedActionUpgradePremium -> return serialize(dto = dto)
            is SuggestedActionRestorePremium -> return serialize(dto = dto)
            is SuggestedActionSubscribeToAnnualPremium -> return serialize(dto = dto)
            is SuggestedActionGiftPremiumForChristmas -> return serialize(dto = dto)
            is SuggestedActionSetBirthdate -> return serialize(dto = dto)
            is SuggestedActionSetProfilePhoto -> return serialize(dto = dto)
            is SuggestedActionExtendPremium -> return serialize(dto = dto)
            is SuggestedActionExtendStarSubscriptions -> return serialize(dto = dto)
            is SuggestedActionCustom -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: TextParseMode): JsonElement {
        when(dto) {
            is TextParseModeMarkdown -> return serialize(dto = dto)
            is TextParseModeHTML -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ProxyType): JsonElement {
        when(dto) {
            is ProxyTypeSocks5 -> return serialize(dto = dto)
            is ProxyTypeHttp -> return serialize(dto = dto)
            is ProxyTypeMtproto -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: StatisticalGraph): JsonElement {
        when(dto) {
            is StatisticalGraphData -> return serialize(dto = dto)
            is StatisticalGraphAsync -> return serialize(dto = dto)
            is StatisticalGraphError -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ChatStatisticsObjectType): JsonElement {
        when(dto) {
            is ChatStatisticsObjectTypeMessage -> return serialize(dto = dto)
            is ChatStatisticsObjectTypeStory -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ChatStatistics): JsonElement {
        when(dto) {
            is ChatStatisticsSupergroup -> return serialize(dto = dto)
            is ChatStatisticsChannel -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: RevenueWithdrawalState): JsonElement {
        when(dto) {
            is RevenueWithdrawalStatePending -> return serialize(dto = dto)
            is RevenueWithdrawalStateSucceeded -> return serialize(dto = dto)
            is RevenueWithdrawalStateFailed -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: ChatRevenueTransactionType): JsonElement {
        when(dto) {
            is ChatRevenueTransactionTypeEarnings -> return serialize(dto = dto)
            is ChatRevenueTransactionTypeWithdrawal -> return serialize(dto = dto)
            is ChatRevenueTransactionTypeRefund -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: VectorPathCommand): JsonElement {
        when(dto) {
            is VectorPathCommandLine -> return serialize(dto = dto)
            is VectorPathCommandCubicBezierCurve -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: BotCommandScope): JsonElement {
        when(dto) {
            is BotCommandScopeDefault -> return serialize(dto = dto)
            is BotCommandScopeAllPrivateChats -> return serialize(dto = dto)
            is BotCommandScopeAllGroupChats -> return serialize(dto = dto)
            is BotCommandScopeAllChatAdministrators -> return serialize(dto = dto)
            is BotCommandScopeChat -> return serialize(dto = dto)
            is BotCommandScopeChatAdministrators -> return serialize(dto = dto)
            is BotCommandScopeChatMember -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: PhoneNumberCodeType): JsonElement {
        when(dto) {
            is PhoneNumberCodeTypeChange -> return serialize(dto = dto)
            is PhoneNumberCodeTypeVerify -> return serialize(dto = dto)
            is PhoneNumberCodeTypeConfirmOwnership -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: Update): JsonElement {
        when(dto) {
            is UpdateAuthorizationState -> return serialize(dto = dto)
            is UpdateNewMessage -> return serialize(dto = dto)
            is UpdateMessageSendAcknowledged -> return serialize(dto = dto)
            is UpdateMessageSendSucceeded -> return serialize(dto = dto)
            is UpdateMessageSendFailed -> return serialize(dto = dto)
            is UpdateMessageContent -> return serialize(dto = dto)
            is UpdateMessageEdited -> return serialize(dto = dto)
            is UpdateMessageIsPinned -> return serialize(dto = dto)
            is UpdateMessageInteractionInfo -> return serialize(dto = dto)
            is UpdateMessageContentOpened -> return serialize(dto = dto)
            is UpdateMessageMentionRead -> return serialize(dto = dto)
            is UpdateMessageUnreadReactions -> return serialize(dto = dto)
            is UpdateMessageFactCheck -> return serialize(dto = dto)
            is UpdateMessageLiveLocationViewed -> return serialize(dto = dto)
            is UpdateVideoPublished -> return serialize(dto = dto)
            is UpdateNewChat -> return serialize(dto = dto)
            is UpdateChatTitle -> return serialize(dto = dto)
            is UpdateChatPhoto -> return serialize(dto = dto)
            is UpdateChatAccentColors -> return serialize(dto = dto)
            is UpdateChatPermissions -> return serialize(dto = dto)
            is UpdateChatLastMessage -> return serialize(dto = dto)
            is UpdateChatPosition -> return serialize(dto = dto)
            is UpdateChatAddedToList -> return serialize(dto = dto)
            is UpdateChatRemovedFromList -> return serialize(dto = dto)
            is UpdateChatReadInbox -> return serialize(dto = dto)
            is UpdateChatReadOutbox -> return serialize(dto = dto)
            is UpdateChatActionBar -> return serialize(dto = dto)
            is UpdateChatBusinessBotManageBar -> return serialize(dto = dto)
            is UpdateChatAvailableReactions -> return serialize(dto = dto)
            is UpdateChatDraftMessage -> return serialize(dto = dto)
            is UpdateChatEmojiStatus -> return serialize(dto = dto)
            is UpdateChatMessageSender -> return serialize(dto = dto)
            is UpdateChatMessageAutoDeleteTime -> return serialize(dto = dto)
            is UpdateChatNotificationSettings -> return serialize(dto = dto)
            is UpdateChatPendingJoinRequests -> return serialize(dto = dto)
            is UpdateChatReplyMarkup -> return serialize(dto = dto)
            is UpdateChatBackground -> return serialize(dto = dto)
            is UpdateChatTheme -> return serialize(dto = dto)
            is UpdateChatUnreadMentionCount -> return serialize(dto = dto)
            is UpdateChatUnreadReactionCount -> return serialize(dto = dto)
            is UpdateChatVideoChat -> return serialize(dto = dto)
            is UpdateChatDefaultDisableNotification -> return serialize(dto = dto)
            is UpdateChatHasProtectedContent -> return serialize(dto = dto)
            is UpdateChatIsTranslatable -> return serialize(dto = dto)
            is UpdateChatIsMarkedAsUnread -> return serialize(dto = dto)
            is UpdateChatViewAsTopics -> return serialize(dto = dto)
            is UpdateChatBlockList -> return serialize(dto = dto)
            is UpdateChatHasScheduledMessages -> return serialize(dto = dto)
            is UpdateChatFolders -> return serialize(dto = dto)
            is UpdateChatOnlineMemberCount -> return serialize(dto = dto)
            is UpdateSavedMessagesTopic -> return serialize(dto = dto)
            is UpdateSavedMessagesTopicCount -> return serialize(dto = dto)
            is UpdateDirectMessagesChatTopic -> return serialize(dto = dto)
            is UpdateTopicMessageCount -> return serialize(dto = dto)
            is UpdateQuickReplyShortcut -> return serialize(dto = dto)
            is UpdateQuickReplyShortcutDeleted -> return serialize(dto = dto)
            is UpdateQuickReplyShortcuts -> return serialize(dto = dto)
            is UpdateQuickReplyShortcutMessages -> return serialize(dto = dto)
            is UpdateForumTopicInfo -> return serialize(dto = dto)
            is UpdateForumTopic -> return serialize(dto = dto)
            is UpdateScopeNotificationSettings -> return serialize(dto = dto)
            is UpdateReactionNotificationSettings -> return serialize(dto = dto)
            is UpdateNotification -> return serialize(dto = dto)
            is UpdateNotificationGroup -> return serialize(dto = dto)
            is UpdateActiveNotifications -> return serialize(dto = dto)
            is UpdateHavePendingNotifications -> return serialize(dto = dto)
            is UpdateDeleteMessages -> return serialize(dto = dto)
            is UpdateChatAction -> return serialize(dto = dto)
            is UpdateUserStatus -> return serialize(dto = dto)
            is UpdateUser -> return serialize(dto = dto)
            is UpdateBasicGroup -> return serialize(dto = dto)
            is UpdateSupergroup -> return serialize(dto = dto)
            is UpdateSecretChat -> return serialize(dto = dto)
            is UpdateUserFullInfo -> return serialize(dto = dto)
            is UpdateBasicGroupFullInfo -> return serialize(dto = dto)
            is UpdateSupergroupFullInfo -> return serialize(dto = dto)
            is UpdateServiceNotification -> return serialize(dto = dto)
            is UpdateFile -> return serialize(dto = dto)
            is UpdateFileGenerationStart -> return serialize(dto = dto)
            is UpdateFileGenerationStop -> return serialize(dto = dto)
            is UpdateFileDownloads -> return serialize(dto = dto)
            is UpdateFileAddedToDownloads -> return serialize(dto = dto)
            is UpdateFileDownload -> return serialize(dto = dto)
            is UpdateFileRemovedFromDownloads -> return serialize(dto = dto)
            is UpdateApplicationVerificationRequired -> return serialize(dto = dto)
            is UpdateApplicationRecaptchaVerificationRequired -> return serialize(dto = dto)
            is UpdateCall -> return serialize(dto = dto)
            is UpdateGroupCall -> return serialize(dto = dto)
            is UpdateGroupCallParticipant -> return serialize(dto = dto)
            is UpdateGroupCallParticipants -> return serialize(dto = dto)
            is UpdateGroupCallVerificationState -> return serialize(dto = dto)
            is UpdateNewCallSignalingData -> return serialize(dto = dto)
            is UpdateUserPrivacySettingRules -> return serialize(dto = dto)
            is UpdateUnreadMessageCount -> return serialize(dto = dto)
            is UpdateUnreadChatCount -> return serialize(dto = dto)
            is UpdateStory -> return serialize(dto = dto)
            is UpdateStoryDeleted -> return serialize(dto = dto)
            is UpdateStoryPostSucceeded -> return serialize(dto = dto)
            is UpdateStoryPostFailed -> return serialize(dto = dto)
            is UpdateChatActiveStories -> return serialize(dto = dto)
            is UpdateStoryListChatCount -> return serialize(dto = dto)
            is UpdateStoryStealthMode -> return serialize(dto = dto)
            is UpdateOption -> return serialize(dto = dto)
            is UpdateStickerSet -> return serialize(dto = dto)
            is UpdateInstalledStickerSets -> return serialize(dto = dto)
            is UpdateTrendingStickerSets -> return serialize(dto = dto)
            is UpdateRecentStickers -> return serialize(dto = dto)
            is UpdateFavoriteStickers -> return serialize(dto = dto)
            is UpdateSavedAnimations -> return serialize(dto = dto)
            is UpdateSavedNotificationSounds -> return serialize(dto = dto)
            is UpdateDefaultBackground -> return serialize(dto = dto)
            is UpdateChatThemes -> return serialize(dto = dto)
            is UpdateAccentColors -> return serialize(dto = dto)
            is UpdateProfileAccentColors -> return serialize(dto = dto)
            is UpdateLanguagePackStrings -> return serialize(dto = dto)
            is UpdateConnectionState -> return serialize(dto = dto)
            is UpdateFreezeState -> return serialize(dto = dto)
            is UpdateTermsOfService -> return serialize(dto = dto)
            is UpdateUnconfirmedSession -> return serialize(dto = dto)
            is UpdateAttachmentMenuBots -> return serialize(dto = dto)
            is UpdateWebAppMessageSent -> return serialize(dto = dto)
            is UpdateActiveEmojiReactions -> return serialize(dto = dto)
            is UpdateAvailableMessageEffects -> return serialize(dto = dto)
            is UpdateDefaultReactionType -> return serialize(dto = dto)
            is UpdateDefaultPaidReactionType -> return serialize(dto = dto)
            is UpdateSavedMessagesTags -> return serialize(dto = dto)
            is UpdateActiveLiveLocationMessages -> return serialize(dto = dto)
            is UpdateOwnedStarCount -> return serialize(dto = dto)
            is UpdateChatRevenueAmount -> return serialize(dto = dto)
            is UpdateStarRevenueStatus -> return serialize(dto = dto)
            is UpdateSpeechRecognitionTrial -> return serialize(dto = dto)
            is UpdateDiceEmojis -> return serialize(dto = dto)
            is UpdateAnimatedEmojiMessageClicked -> return serialize(dto = dto)
            is UpdateAnimationSearchParameters -> return serialize(dto = dto)
            is UpdateSuggestedActions -> return serialize(dto = dto)
            is UpdateSpeedLimitNotification -> return serialize(dto = dto)
            is UpdateContactCloseBirthdays -> return serialize(dto = dto)
            is UpdateAutosaveSettings -> return serialize(dto = dto)
            is UpdateBusinessConnection -> return serialize(dto = dto)
            is UpdateNewBusinessMessage -> return serialize(dto = dto)
            is UpdateBusinessMessageEdited -> return serialize(dto = dto)
            is UpdateBusinessMessagesDeleted -> return serialize(dto = dto)
            is UpdateNewInlineQuery -> return serialize(dto = dto)
            is UpdateNewChosenInlineResult -> return serialize(dto = dto)
            is UpdateNewCallbackQuery -> return serialize(dto = dto)
            is UpdateNewInlineCallbackQuery -> return serialize(dto = dto)
            is UpdateNewBusinessCallbackQuery -> return serialize(dto = dto)
            is UpdateNewShippingQuery -> return serialize(dto = dto)
            is UpdateNewPreCheckoutQuery -> return serialize(dto = dto)
            is UpdateNewCustomEvent -> return serialize(dto = dto)
            is UpdateNewCustomQuery -> return serialize(dto = dto)
            is UpdatePoll -> return serialize(dto = dto)
            is UpdatePollAnswer -> return serialize(dto = dto)
            is UpdateChatMember -> return serialize(dto = dto)
            is UpdateNewChatJoinRequest -> return serialize(dto = dto)
            is UpdateChatBoost -> return serialize(dto = dto)
            is UpdateMessageReaction -> return serialize(dto = dto)
            is UpdateMessageReactions -> return serialize(dto = dto)
            is UpdatePaidMediaPurchased -> return serialize(dto = dto)
            else -> error(message = "Unknown dto type: ${dto::class}")
        }
    }

    private fun serialize(dto: LogStream): JsonElement {
        when(dto) {
            is LogStreamDefault -> return serialize(dto = dto)
            is LogStreamFile -> return serialize(dto = dto)
            is LogStreamEmpty -> return serialize(dto = dto)
        }
    }

    private fun serialize(dto: Error): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "error")
            put(key = "code", int = dto.code)
            put(key = "message", string = dto.message)
        }
    }

    private fun serialize(dto: Ok): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "ok")
        }
    }

    private fun serialize(dto: AuthenticationCodeTypeTelegramMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authenticationCodeTypeTelegramMessage")
            put(key = "length", int = dto.length)
        }
    }

    private fun serialize(dto: AuthenticationCodeTypeSms): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authenticationCodeTypeSms")
            put(key = "length", int = dto.length)
        }
    }

    private fun serialize(dto: AuthenticationCodeTypeSmsWord): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authenticationCodeTypeSmsWord")
            put(key = "first_letter", string = dto.firstLetter)
        }
    }

    private fun serialize(dto: AuthenticationCodeTypeSmsPhrase): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authenticationCodeTypeSmsPhrase")
            put(key = "first_word", string = dto.firstWord)
        }
    }

    private fun serialize(dto: AuthenticationCodeTypeCall): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authenticationCodeTypeCall")
            put(key = "length", int = dto.length)
        }
    }

    private fun serialize(dto: AuthenticationCodeTypeFlashCall): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authenticationCodeTypeFlashCall")
            put(key = "pattern", string = dto.pattern)
        }
    }

    private fun serialize(dto: AuthenticationCodeTypeMissedCall): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authenticationCodeTypeMissedCall")
            put(key = "phone_number_prefix", string = dto.phoneNumberPrefix)
            put(key = "length", int = dto.length)
        }
    }

    private fun serialize(dto: AuthenticationCodeTypeFragment): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authenticationCodeTypeFragment")
            put(key = "url", string = dto.url)
            put(key = "length", int = dto.length)
        }
    }

    private fun serialize(dto: AuthenticationCodeTypeFirebaseAndroid): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authenticationCodeTypeFirebaseAndroid")
            put(key = "device_verification_parameters", value = dto.deviceVerificationParameters) { data -> serialize(dto = data) }
            put(key = "length", int = dto.length)
        }
    }

    private fun serialize(dto: AuthenticationCodeTypeFirebaseIos): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authenticationCodeTypeFirebaseIos")
            put(key = "receipt", string = dto.receipt)
            put(key = "push_timeout", int = dto.pushTimeout)
            put(key = "length", int = dto.length)
        }
    }

    private fun serialize(dto: AuthenticationCodeInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authenticationCodeInfo")
            put(key = "phone_number", string = dto.phoneNumber)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "next_type", value = dto.nextType) { data -> serialize(dto = data) }
            put(key = "timeout", int = dto.timeout)
        }
    }

    private fun serialize(dto: EmailAddressAuthenticationCodeInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emailAddressAuthenticationCodeInfo")
            put(key = "email_address_pattern", string = dto.emailAddressPattern)
            put(key = "length", int = dto.length)
        }
    }

    private fun serialize(dto: EmailAddressAuthenticationCode): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emailAddressAuthenticationCode")
            put(key = "code", string = dto.code)
        }
    }

    private fun serialize(dto: EmailAddressAuthenticationAppleId): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emailAddressAuthenticationAppleId")
            put(key = "token", string = dto.token)
        }
    }

    private fun serialize(dto: EmailAddressAuthenticationGoogleId): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emailAddressAuthenticationGoogleId")
            put(key = "token", string = dto.token)
        }
    }

    private fun serialize(dto: EmailAddressResetStateAvailable): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emailAddressResetStateAvailable")
            put(key = "wait_period", int = dto.waitPeriod)
        }
    }

    private fun serialize(dto: EmailAddressResetStatePending): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emailAddressResetStatePending")
            put(key = "reset_in", int = dto.resetIn)
        }
    }

    private fun serialize(dto: TextEntity): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntity")
            put(key = "offset", int = dto.offset)
            put(key = "length", int = dto.length)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: TextEntities): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntities")
            put(key = "entities", objects = dto.entities) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: FormattedText): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "formattedText")
            put(key = "text", string = dto.text)
            put(key = "entities", objects = dto.entities) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: TermsOfService): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "termsOfService")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "min_user_age", int = dto.minUserAge)
            put(key = "show_popup", boolean = dto.showPopup)
        }
    }

    private fun serialize(dto: AuthorizationStateWaitTdlibParameters): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authorizationStateWaitTdlibParameters")
        }
    }

    private fun serialize(dto: AuthorizationStateWaitPhoneNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authorizationStateWaitPhoneNumber")
        }
    }

    private fun serialize(dto: AuthorizationStateWaitPremiumPurchase): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authorizationStateWaitPremiumPurchase")
            put(key = "store_product_id", string = dto.storeProductId)
        }
    }

    private fun serialize(dto: AuthorizationStateWaitEmailAddress): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authorizationStateWaitEmailAddress")
            put(key = "allow_apple_id", boolean = dto.allowAppleId)
            put(key = "allow_google_id", boolean = dto.allowGoogleId)
        }
    }

    private fun serialize(dto: AuthorizationStateWaitEmailCode): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authorizationStateWaitEmailCode")
            put(key = "allow_apple_id", boolean = dto.allowAppleId)
            put(key = "allow_google_id", boolean = dto.allowGoogleId)
            put(key = "code_info", value = dto.codeInfo) { data -> serialize(dto = data) }
            put(key = "email_address_reset_state", value = dto.emailAddressResetState) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: AuthorizationStateWaitCode): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authorizationStateWaitCode")
            put(key = "code_info", value = dto.codeInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: AuthorizationStateWaitOtherDeviceConfirmation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authorizationStateWaitOtherDeviceConfirmation")
            put(key = "link", string = dto.link)
        }
    }

    private fun serialize(dto: AuthorizationStateWaitRegistration): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authorizationStateWaitRegistration")
            put(key = "terms_of_service", value = dto.termsOfService) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: AuthorizationStateWaitPassword): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authorizationStateWaitPassword")
            put(key = "password_hint", string = dto.passwordHint)
            put(key = "has_recovery_email_address", boolean = dto.hasRecoveryEmailAddress)
            put(key = "has_passport_data", boolean = dto.hasPassportData)
            put(key = "recovery_email_address_pattern", string = dto.recoveryEmailAddressPattern)
        }
    }

    private fun serialize(dto: AuthorizationStateReady): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authorizationStateReady")
        }
    }

    private fun serialize(dto: AuthorizationStateLoggingOut): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authorizationStateLoggingOut")
        }
    }

    private fun serialize(dto: AuthorizationStateClosing): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authorizationStateClosing")
        }
    }

    private fun serialize(dto: AuthorizationStateClosed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "authorizationStateClosed")
        }
    }

    private fun serialize(dto: FirebaseDeviceVerificationParametersSafetyNet): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "firebaseDeviceVerificationParametersSafetyNet")
            put(key = "nonce", bytes = dto.nonce)
        }
    }

    private fun serialize(dto: FirebaseDeviceVerificationParametersPlayIntegrity): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "firebaseDeviceVerificationParametersPlayIntegrity")
            put(key = "nonce", string = dto.nonce)
            put(key = "cloud_project_number", long = dto.cloudProjectNumber)
        }
    }

    private fun serialize(dto: PasswordState): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passwordState")
            put(key = "has_password", boolean = dto.hasPassword)
            put(key = "password_hint", string = dto.passwordHint)
            put(key = "has_recovery_email_address", boolean = dto.hasRecoveryEmailAddress)
            put(key = "has_passport_data", boolean = dto.hasPassportData)
            put(key = "recovery_email_address_code_info", value = dto.recoveryEmailAddressCodeInfo) { data -> serialize(dto = data) }
            put(key = "login_email_address_pattern", string = dto.loginEmailAddressPattern)
            put(key = "pending_reset_date", int = dto.pendingResetDate)
        }
    }

    private fun serialize(dto: RecoveryEmailAddress): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "recoveryEmailAddress")
            put(key = "recovery_email_address", string = dto.recoveryEmailAddress)
        }
    }

    private fun serialize(dto: TemporaryPasswordState): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "temporaryPasswordState")
            put(key = "has_password", boolean = dto.hasPassword)
            put(key = "valid_for", int = dto.validFor)
        }
    }

    private fun serialize(dto: LocalFile): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "localFile")
            put(key = "path", string = dto.path)
            put(key = "can_be_downloaded", boolean = dto.canBeDownloaded)
            put(key = "can_be_deleted", boolean = dto.canBeDeleted)
            put(key = "is_downloading_active", boolean = dto.isDownloadingActive)
            put(key = "is_downloading_completed", boolean = dto.isDownloadingCompleted)
            put(key = "download_offset", long = dto.downloadOffset)
            put(key = "downloaded_prefix_size", long = dto.downloadedPrefixSize)
            put(key = "downloaded_size", long = dto.downloadedSize)
        }
    }

    private fun serialize(dto: RemoteFile): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "remoteFile")
            put(key = "id", string = dto.id)
            put(key = "unique_id", string = dto.uniqueId)
            put(key = "is_uploading_active", boolean = dto.isUploadingActive)
            put(key = "is_uploading_completed", boolean = dto.isUploadingCompleted)
            put(key = "uploaded_size", long = dto.uploadedSize)
        }
    }

    private fun serialize(dto: File): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "file")
            put(key = "id", int = dto.id)
            put(key = "size", long = dto.size)
            put(key = "expected_size", long = dto.expectedSize)
            put(key = "local", value = dto.local) { data -> serialize(dto = data) }
            put(key = "remote", value = dto.remote) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputFileId): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputFileId")
            put(key = "id", int = dto.id)
        }
    }

    private fun serialize(dto: InputFileRemote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputFileRemote")
            put(key = "id", string = dto.id)
        }
    }

    private fun serialize(dto: InputFileLocal): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputFileLocal")
            put(key = "path", string = dto.path)
        }
    }

    private fun serialize(dto: InputFileGenerated): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputFileGenerated")
            put(key = "original_path", string = dto.originalPath)
            put(key = "conversion", string = dto.conversion)
            put(key = "expected_size", long = dto.expectedSize)
        }
    }

    private fun serialize(dto: PhotoSize): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "photoSize")
            put(key = "type", string = dto.type)
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "progressive_sizes", ints = dto.progressiveSizes)
        }
    }

    private fun serialize(dto: Minithumbnail): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "minithumbnail")
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "data", bytes = dto.data)
        }
    }

    private fun serialize(dto: ThumbnailFormatJpeg): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "thumbnailFormatJpeg")
        }
    }

    private fun serialize(dto: ThumbnailFormatGif): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "thumbnailFormatGif")
        }
    }

    private fun serialize(dto: ThumbnailFormatMpeg4): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "thumbnailFormatMpeg4")
        }
    }

    private fun serialize(dto: ThumbnailFormatPng): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "thumbnailFormatPng")
        }
    }

    private fun serialize(dto: ThumbnailFormatTgs): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "thumbnailFormatTgs")
        }
    }

    private fun serialize(dto: ThumbnailFormatWebm): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "thumbnailFormatWebm")
        }
    }

    private fun serialize(dto: ThumbnailFormatWebp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "thumbnailFormatWebp")
        }
    }

    private fun serialize(dto: Thumbnail): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "thumbnail")
            put(key = "format", value = dto.format) { data -> serialize(dto = data) }
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "file", value = dto.file) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MaskPointForehead): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "maskPointForehead")
        }
    }

    private fun serialize(dto: MaskPointEyes): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "maskPointEyes")
        }
    }

    private fun serialize(dto: MaskPointMouth): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "maskPointMouth")
        }
    }

    private fun serialize(dto: MaskPointChin): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "maskPointChin")
        }
    }

    private fun serialize(dto: MaskPosition): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "maskPosition")
            put(key = "point", value = dto.point) { data -> serialize(dto = data) }
            put(key = "x_shift", double = dto.xShift)
            put(key = "y_shift", double = dto.yShift)
            put(key = "scale", double = dto.scale)
        }
    }

    private fun serialize(dto: StickerFormatWebp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "stickerFormatWebp")
        }
    }

    private fun serialize(dto: StickerFormatTgs): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "stickerFormatTgs")
        }
    }

    private fun serialize(dto: StickerFormatWebm): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "stickerFormatWebm")
        }
    }

    private fun serialize(dto: StickerTypeRegular): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "stickerTypeRegular")
        }
    }

    private fun serialize(dto: StickerTypeMask): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "stickerTypeMask")
        }
    }

    private fun serialize(dto: StickerTypeCustomEmoji): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "stickerTypeCustomEmoji")
        }
    }

    private fun serialize(dto: StickerFullTypeRegular): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "stickerFullTypeRegular")
            put(key = "premium_animation", value = dto.premiumAnimation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StickerFullTypeMask): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "stickerFullTypeMask")
            put(key = "mask_position", value = dto.maskPosition) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StickerFullTypeCustomEmoji): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "stickerFullTypeCustomEmoji")
            put(key = "custom_emoji_id", long = dto.customEmojiId)
            put(key = "needs_repainting", boolean = dto.needsRepainting)
        }
    }

    private fun serialize(dto: ClosedVectorPath): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "closedVectorPath")
            put(key = "commands", objects = dto.commands) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Outline): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "outline")
            put(key = "paths", objects = dto.paths) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PollOption): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pollOption")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "voter_count", int = dto.voterCount)
            put(key = "vote_percentage", int = dto.votePercentage)
            put(key = "is_chosen", boolean = dto.isChosen)
            put(key = "is_being_chosen", boolean = dto.isBeingChosen)
        }
    }

    private fun serialize(dto: PollTypeRegular): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pollTypeRegular")
            put(key = "allow_multiple_answers", boolean = dto.allowMultipleAnswers)
        }
    }

    private fun serialize(dto: PollTypeQuiz): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pollTypeQuiz")
            put(key = "correct_option_id", int = dto.correctOptionId)
            put(key = "explanation", value = dto.explanation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChecklistTask): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "checklistTask")
            put(key = "id", int = dto.id)
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "completed_by_user_id", long = dto.completedByUserId)
            put(key = "completion_date", int = dto.completionDate)
        }
    }

    private fun serialize(dto: InputChecklistTask): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputChecklistTask")
            put(key = "id", int = dto.id)
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Checklist): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "checklist")
            put(key = "title", value = dto.title) { data -> serialize(dto = data) }
            put(key = "tasks", objects = dto.tasks) { data -> serialize(dto = data) }
            put(key = "others_can_add_tasks", boolean = dto.othersCanAddTasks)
            put(key = "can_add_tasks", boolean = dto.canAddTasks)
            put(key = "others_can_mark_tasks_as_done", boolean = dto.othersCanMarkTasksAsDone)
            put(key = "can_mark_tasks_as_done", boolean = dto.canMarkTasksAsDone)
        }
    }

    private fun serialize(dto: InputChecklist): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputChecklist")
            put(key = "title", value = dto.title) { data -> serialize(dto = data) }
            put(key = "tasks", objects = dto.tasks) { data -> serialize(dto = data) }
            put(key = "others_can_add_tasks", boolean = dto.othersCanAddTasks)
            put(key = "others_can_mark_tasks_as_done", boolean = dto.othersCanMarkTasksAsDone)
        }
    }

    private fun serialize(dto: Animation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "animation")
            put(key = "duration", int = dto.duration)
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "file_name", string = dto.fileName)
            put(key = "mime_type", string = dto.mimeType)
            put(key = "has_stickers", boolean = dto.hasStickers)
            put(key = "minithumbnail", value = dto.minithumbnail) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "animation", value = dto.animation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Audio): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "audio")
            put(key = "duration", int = dto.duration)
            put(key = "title", string = dto.title)
            put(key = "performer", string = dto.performer)
            put(key = "file_name", string = dto.fileName)
            put(key = "mime_type", string = dto.mimeType)
            put(key = "album_cover_minithumbnail", value = dto.albumCoverMinithumbnail) { data -> serialize(dto = data) }
            put(key = "album_cover_thumbnail", value = dto.albumCoverThumbnail) { data -> serialize(dto = data) }
            put(key = "external_album_covers", objects = dto.externalAlbumCovers) { data -> serialize(dto = data) }
            put(key = "audio", value = dto.audio) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Document): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "document")
            put(key = "file_name", string = dto.fileName)
            put(key = "mime_type", string = dto.mimeType)
            put(key = "minithumbnail", value = dto.minithumbnail) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "document", value = dto.document) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Photo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "photo")
            put(key = "has_stickers", boolean = dto.hasStickers)
            put(key = "minithumbnail", value = dto.minithumbnail) { data -> serialize(dto = data) }
            put(key = "sizes", objects = dto.sizes) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Sticker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sticker")
            put(key = "id", long = dto.id)
            put(key = "set_id", long = dto.setId)
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "emoji", string = dto.emoji)
            put(key = "format", value = dto.format) { data -> serialize(dto = data) }
            put(key = "full_type", value = dto.fullType) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Video): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "video")
            put(key = "duration", int = dto.duration)
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "file_name", string = dto.fileName)
            put(key = "mime_type", string = dto.mimeType)
            put(key = "has_stickers", boolean = dto.hasStickers)
            put(key = "supports_streaming", boolean = dto.supportsStreaming)
            put(key = "minithumbnail", value = dto.minithumbnail) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "video", value = dto.video) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: VideoNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "videoNote")
            put(key = "duration", int = dto.duration)
            put(key = "waveform", bytes = dto.waveform)
            put(key = "length", int = dto.length)
            put(key = "minithumbnail", value = dto.minithumbnail) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "speech_recognition_result", value = dto.speechRecognitionResult) { data -> serialize(dto = data) }
            put(key = "video", value = dto.video) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: VoiceNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "voiceNote")
            put(key = "duration", int = dto.duration)
            put(key = "waveform", bytes = dto.waveform)
            put(key = "mime_type", string = dto.mimeType)
            put(key = "speech_recognition_result", value = dto.speechRecognitionResult) { data -> serialize(dto = data) }
            put(key = "voice", value = dto.voice) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: AnimatedEmoji): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "animatedEmoji")
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
            put(key = "sticker_width", int = dto.stickerWidth)
            put(key = "sticker_height", int = dto.stickerHeight)
            put(key = "fitzpatrick_type", int = dto.fitzpatrickType)
            put(key = "sound", value = dto.sound) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Contact): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "contact")
            put(key = "phone_number", string = dto.phoneNumber)
            put(key = "first_name", string = dto.firstName)
            put(key = "last_name", string = dto.lastName)
            put(key = "vcard", string = dto.vcard)
            put(key = "user_id", long = dto.userId)
        }
    }

    private fun serialize(dto: Location): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "location")
            put(key = "latitude", double = dto.latitude)
            put(key = "longitude", double = dto.longitude)
            put(key = "horizontal_accuracy", double = dto.horizontalAccuracy)
        }
    }

    private fun serialize(dto: Venue): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "venue")
            put(key = "location", value = dto.location) { data -> serialize(dto = data) }
            put(key = "title", string = dto.title)
            put(key = "address", string = dto.address)
            put(key = "provider", string = dto.provider)
            put(key = "id", string = dto.id)
            put(key = "type", string = dto.type)
        }
    }

    private fun serialize(dto: Game): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "game")
            put(key = "id", long = dto.id)
            put(key = "short_name", string = dto.shortName)
            put(key = "title", string = dto.title)
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "description", string = dto.description)
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "animation", value = dto.animation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: WebApp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "webApp")
            put(key = "short_name", string = dto.shortName)
            put(key = "title", string = dto.title)
            put(key = "description", string = dto.description)
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "animation", value = dto.animation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Poll): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "poll")
            put(key = "id", long = dto.id)
            put(key = "question", value = dto.question) { data -> serialize(dto = data) }
            put(key = "options", objects = dto.options) { data -> serialize(dto = data) }
            put(key = "total_voter_count", int = dto.totalVoterCount)
            put(key = "recent_voter_ids", objects = dto.recentVoterIds) { data -> serialize(dto = data) }
            put(key = "is_anonymous", boolean = dto.isAnonymous)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "open_period", int = dto.openPeriod)
            put(key = "close_date", int = dto.closeDate)
            put(key = "is_closed", boolean = dto.isClosed)
        }
    }

    private fun serialize(dto: AlternativeVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "alternativeVideo")
            put(key = "id", long = dto.id)
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "codec", string = dto.codec)
            put(key = "hls_file", value = dto.hlsFile) { data -> serialize(dto = data) }
            put(key = "video", value = dto.video) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: VideoStoryboard): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "videoStoryboard")
            put(key = "storyboard_file", value = dto.storyboardFile) { data -> serialize(dto = data) }
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "map_file", value = dto.mapFile) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Background): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "background")
            put(key = "id", long = dto.id)
            put(key = "is_default", boolean = dto.isDefault)
            put(key = "is_dark", boolean = dto.isDark)
            put(key = "name", string = dto.name)
            put(key = "document", value = dto.document) { data -> serialize(dto = data) }
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Backgrounds): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "backgrounds")
            put(key = "backgrounds", objects = dto.backgrounds) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatBackground): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatBackground")
            put(key = "background", value = dto.background) { data -> serialize(dto = data) }
            put(key = "dark_theme_dimming", int = dto.darkThemeDimming)
        }
    }

    private fun serialize(dto: ProfilePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "profilePhoto")
            put(key = "id", long = dto.id)
            put(key = "small", value = dto.small) { data -> serialize(dto = data) }
            put(key = "big", value = dto.big) { data -> serialize(dto = data) }
            put(key = "minithumbnail", value = dto.minithumbnail) { data -> serialize(dto = data) }
            put(key = "has_animation", boolean = dto.hasAnimation)
            put(key = "is_personal", boolean = dto.isPersonal)
        }
    }

    private fun serialize(dto: ChatPhotoInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatPhotoInfo")
            put(key = "small", value = dto.small) { data -> serialize(dto = data) }
            put(key = "big", value = dto.big) { data -> serialize(dto = data) }
            put(key = "minithumbnail", value = dto.minithumbnail) { data -> serialize(dto = data) }
            put(key = "has_animation", boolean = dto.hasAnimation)
            put(key = "is_personal", boolean = dto.isPersonal)
        }
    }

    private fun serialize(dto: UserTypeRegular): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userTypeRegular")
        }
    }

    private fun serialize(dto: UserTypeDeleted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userTypeDeleted")
        }
    }

    private fun serialize(dto: UserTypeBot): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userTypeBot")
            put(key = "can_be_edited", boolean = dto.canBeEdited)
            put(key = "can_join_groups", boolean = dto.canJoinGroups)
            put(key = "can_read_all_group_messages", boolean = dto.canReadAllGroupMessages)
            put(key = "has_main_web_app", boolean = dto.hasMainWebApp)
            put(key = "is_inline", boolean = dto.isInline)
            put(key = "inline_query_placeholder", string = dto.inlineQueryPlaceholder)
            put(key = "need_location", boolean = dto.needLocation)
            put(key = "can_connect_to_business", boolean = dto.canConnectToBusiness)
            put(key = "can_be_added_to_attachment_menu", boolean = dto.canBeAddedToAttachmentMenu)
            put(key = "active_user_count", int = dto.activeUserCount)
        }
    }

    private fun serialize(dto: UserTypeUnknown): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userTypeUnknown")
        }
    }

    private fun serialize(dto: BotCommand): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botCommand")
            put(key = "command", string = dto.command)
            put(key = "description", string = dto.description)
        }
    }

    private fun serialize(dto: BotCommands): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botCommands")
            put(key = "bot_user_id", long = dto.botUserId)
            put(key = "commands", objects = dto.commands) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BotMenuButton): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botMenuButton")
            put(key = "text", string = dto.text)
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: BotVerificationParameters): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botVerificationParameters")
            put(key = "icon_custom_emoji_id", long = dto.iconCustomEmojiId)
            put(key = "organization_name", string = dto.organizationName)
            put(key = "default_custom_description", value = dto.defaultCustomDescription) { data -> serialize(dto = data) }
            put(key = "can_set_custom_description", boolean = dto.canSetCustomDescription)
        }
    }

    private fun serialize(dto: BotVerification): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botVerification")
            put(key = "bot_user_id", long = dto.botUserId)
            put(key = "icon_custom_emoji_id", long = dto.iconCustomEmojiId)
            put(key = "custom_description", value = dto.customDescription) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: VerificationStatus): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "verificationStatus")
            put(key = "is_verified", boolean = dto.isVerified)
            put(key = "is_scam", boolean = dto.isScam)
            put(key = "is_fake", boolean = dto.isFake)
            put(key = "bot_verification_icon_custom_emoji_id", long = dto.botVerificationIconCustomEmojiId)
        }
    }

    private fun serialize(dto: ChatLocation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatLocation")
            put(key = "location", value = dto.location) { data -> serialize(dto = data) }
            put(key = "address", string = dto.address)
        }
    }

    private fun serialize(dto: Birthdate): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "birthdate")
            put(key = "day", int = dto.day)
            put(key = "month", int = dto.month)
            put(key = "year", int = dto.year)
        }
    }

    private fun serialize(dto: CloseBirthdayUser): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "closeBirthdayUser")
            put(key = "user_id", long = dto.userId)
            put(key = "birthdate", value = dto.birthdate) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BusinessAwayMessageScheduleAlways): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessAwayMessageScheduleAlways")
        }
    }

    private fun serialize(dto: BusinessAwayMessageScheduleOutsideOfOpeningHours): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessAwayMessageScheduleOutsideOfOpeningHours")
        }
    }

    private fun serialize(dto: BusinessAwayMessageScheduleCustom): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessAwayMessageScheduleCustom")
            put(key = "start_date", int = dto.startDate)
            put(key = "end_date", int = dto.endDate)
        }
    }

    private fun serialize(dto: BusinessLocation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessLocation")
            put(key = "location", value = dto.location) { data -> serialize(dto = data) }
            put(key = "address", string = dto.address)
        }
    }

    private fun serialize(dto: BusinessRecipients): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessRecipients")
            put(key = "chat_ids", longs = dto.chatIds)
            put(key = "excluded_chat_ids", longs = dto.excludedChatIds)
            put(key = "select_existing_chats", boolean = dto.selectExistingChats)
            put(key = "select_new_chats", boolean = dto.selectNewChats)
            put(key = "select_contacts", boolean = dto.selectContacts)
            put(key = "select_non_contacts", boolean = dto.selectNonContacts)
            put(key = "exclude_selected", boolean = dto.excludeSelected)
        }
    }

    private fun serialize(dto: BusinessAwayMessageSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessAwayMessageSettings")
            put(key = "shortcut_id", int = dto.shortcutId)
            put(key = "recipients", value = dto.recipients) { data -> serialize(dto = data) }
            put(key = "schedule", value = dto.schedule) { data -> serialize(dto = data) }
            put(key = "offline_only", boolean = dto.offlineOnly)
        }
    }

    private fun serialize(dto: BusinessGreetingMessageSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessGreetingMessageSettings")
            put(key = "shortcut_id", int = dto.shortcutId)
            put(key = "recipients", value = dto.recipients) { data -> serialize(dto = data) }
            put(key = "inactivity_days", int = dto.inactivityDays)
        }
    }

    private fun serialize(dto: BusinessBotRights): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessBotRights")
            put(key = "can_reply", boolean = dto.canReply)
            put(key = "can_read_messages", boolean = dto.canReadMessages)
            put(key = "can_delete_sent_messages", boolean = dto.canDeleteSentMessages)
            put(key = "can_delete_all_messages", boolean = dto.canDeleteAllMessages)
            put(key = "can_edit_name", boolean = dto.canEditName)
            put(key = "can_edit_bio", boolean = dto.canEditBio)
            put(key = "can_edit_profile_photo", boolean = dto.canEditProfilePhoto)
            put(key = "can_edit_username", boolean = dto.canEditUsername)
            put(key = "can_view_gifts_and_stars", boolean = dto.canViewGiftsAndStars)
            put(key = "can_sell_gifts", boolean = dto.canSellGifts)
            put(key = "can_change_gift_settings", boolean = dto.canChangeGiftSettings)
            put(key = "can_transfer_and_upgrade_gifts", boolean = dto.canTransferAndUpgradeGifts)
            put(key = "can_transfer_stars", boolean = dto.canTransferStars)
            put(key = "can_manage_stories", boolean = dto.canManageStories)
        }
    }

    private fun serialize(dto: BusinessConnectedBot): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessConnectedBot")
            put(key = "bot_user_id", long = dto.botUserId)
            put(key = "recipients", value = dto.recipients) { data -> serialize(dto = data) }
            put(key = "rights", value = dto.rights) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BusinessStartPage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessStartPage")
            put(key = "title", string = dto.title)
            put(key = "message", string = dto.message)
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputBusinessStartPage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputBusinessStartPage")
            put(key = "title", string = dto.title)
            put(key = "message", string = dto.message)
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BusinessOpeningHoursInterval): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessOpeningHoursInterval")
            put(key = "start_minute", int = dto.startMinute)
            put(key = "end_minute", int = dto.endMinute)
        }
    }

    private fun serialize(dto: BusinessOpeningHours): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessOpeningHours")
            put(key = "time_zone_id", string = dto.timeZoneId)
            put(key = "opening_hours", objects = dto.openingHours) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BusinessInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessInfo")
            put(key = "location", value = dto.location) { data -> serialize(dto = data) }
            put(key = "opening_hours", value = dto.openingHours) { data -> serialize(dto = data) }
            put(key = "local_opening_hours", value = dto.localOpeningHours) { data -> serialize(dto = data) }
            put(key = "next_open_in", int = dto.nextOpenIn)
            put(key = "next_close_in", int = dto.nextCloseIn)
            put(key = "greeting_message_settings", value = dto.greetingMessageSettings) { data -> serialize(dto = data) }
            put(key = "away_message_settings", value = dto.awayMessageSettings) { data -> serialize(dto = data) }
            put(key = "start_page", value = dto.startPage) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BusinessChatLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessChatLink")
            put(key = "link", string = dto.link)
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "title", string = dto.title)
            put(key = "view_count", int = dto.viewCount)
        }
    }

    private fun serialize(dto: BusinessChatLinks): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessChatLinks")
            put(key = "links", objects = dto.links) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputBusinessChatLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputBusinessChatLink")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "title", string = dto.title)
        }
    }

    private fun serialize(dto: BusinessChatLinkInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessChatLinkInfo")
            put(key = "chat_id", long = dto.chatId)
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatPhotoStickerTypeRegularOrMask): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatPhotoStickerTypeRegularOrMask")
            put(key = "sticker_set_id", long = dto.stickerSetId)
            put(key = "sticker_id", long = dto.stickerId)
        }
    }

    private fun serialize(dto: ChatPhotoStickerTypeCustomEmoji): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatPhotoStickerTypeCustomEmoji")
            put(key = "custom_emoji_id", long = dto.customEmojiId)
        }
    }

    private fun serialize(dto: ChatPhotoSticker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatPhotoSticker")
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "background_fill", value = dto.backgroundFill) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: AnimatedChatPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "animatedChatPhoto")
            put(key = "length", int = dto.length)
            put(key = "file", value = dto.file) { data -> serialize(dto = data) }
            put(key = "main_frame_timestamp", double = dto.mainFrameTimestamp)
        }
    }

    private fun serialize(dto: ChatPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatPhoto")
            put(key = "id", long = dto.id)
            put(key = "added_date", int = dto.addedDate)
            put(key = "minithumbnail", value = dto.minithumbnail) { data -> serialize(dto = data) }
            put(key = "sizes", objects = dto.sizes) { data -> serialize(dto = data) }
            put(key = "animation", value = dto.animation) { data -> serialize(dto = data) }
            put(key = "small_animation", value = dto.smallAnimation) { data -> serialize(dto = data) }
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatPhotos): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatPhotos")
            put(key = "total_count", int = dto.totalCount)
            put(key = "photos", objects = dto.photos) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputChatPhotoPrevious): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputChatPhotoPrevious")
            put(key = "chat_photo_id", long = dto.chatPhotoId)
        }
    }

    private fun serialize(dto: InputChatPhotoStatic): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputChatPhotoStatic")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputChatPhotoAnimation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputChatPhotoAnimation")
            put(key = "animation", value = dto.animation) { data -> serialize(dto = data) }
            put(key = "main_frame_timestamp", double = dto.mainFrameTimestamp)
        }
    }

    private fun serialize(dto: InputChatPhotoSticker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputChatPhotoSticker")
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatPermissions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatPermissions")
            put(key = "can_send_basic_messages", boolean = dto.canSendBasicMessages)
            put(key = "can_send_audios", boolean = dto.canSendAudios)
            put(key = "can_send_documents", boolean = dto.canSendDocuments)
            put(key = "can_send_photos", boolean = dto.canSendPhotos)
            put(key = "can_send_videos", boolean = dto.canSendVideos)
            put(key = "can_send_video_notes", boolean = dto.canSendVideoNotes)
            put(key = "can_send_voice_notes", boolean = dto.canSendVoiceNotes)
            put(key = "can_send_polls", boolean = dto.canSendPolls)
            put(key = "can_send_other_messages", boolean = dto.canSendOtherMessages)
            put(key = "can_add_link_previews", boolean = dto.canAddLinkPreviews)
            put(key = "can_change_info", boolean = dto.canChangeInfo)
            put(key = "can_invite_users", boolean = dto.canInviteUsers)
            put(key = "can_pin_messages", boolean = dto.canPinMessages)
            put(key = "can_create_topics", boolean = dto.canCreateTopics)
        }
    }

    private fun serialize(dto: ChatAdministratorRights): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatAdministratorRights")
            put(key = "can_manage_chat", boolean = dto.canManageChat)
            put(key = "can_change_info", boolean = dto.canChangeInfo)
            put(key = "can_post_messages", boolean = dto.canPostMessages)
            put(key = "can_edit_messages", boolean = dto.canEditMessages)
            put(key = "can_delete_messages", boolean = dto.canDeleteMessages)
            put(key = "can_invite_users", boolean = dto.canInviteUsers)
            put(key = "can_restrict_members", boolean = dto.canRestrictMembers)
            put(key = "can_pin_messages", boolean = dto.canPinMessages)
            put(key = "can_manage_topics", boolean = dto.canManageTopics)
            put(key = "can_promote_members", boolean = dto.canPromoteMembers)
            put(key = "can_manage_video_chats", boolean = dto.canManageVideoChats)
            put(key = "can_post_stories", boolean = dto.canPostStories)
            put(key = "can_edit_stories", boolean = dto.canEditStories)
            put(key = "can_delete_stories", boolean = dto.canDeleteStories)
            put(key = "is_anonymous", boolean = dto.isAnonymous)
        }
    }

    private fun serialize(dto: StarAmount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starAmount")
            put(key = "star_count", long = dto.starCount)
            put(key = "nanostar_count", int = dto.nanostarCount)
        }
    }

    private fun serialize(dto: StarSubscriptionTypeChannel): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starSubscriptionTypeChannel")
            put(key = "can_reuse", boolean = dto.canReuse)
            put(key = "invite_link", string = dto.inviteLink)
        }
    }

    private fun serialize(dto: StarSubscriptionTypeBot): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starSubscriptionTypeBot")
            put(key = "is_canceled_by_bot", boolean = dto.isCanceledByBot)
            put(key = "title", string = dto.title)
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "invoice_link", string = dto.invoiceLink)
        }
    }

    private fun serialize(dto: StarSubscriptionPricing): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starSubscriptionPricing")
            put(key = "period", int = dto.period)
            put(key = "star_count", long = dto.starCount)
        }
    }

    private fun serialize(dto: StarSubscription): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starSubscription")
            put(key = "id", string = dto.id)
            put(key = "chat_id", long = dto.chatId)
            put(key = "expiration_date", int = dto.expirationDate)
            put(key = "is_canceled", boolean = dto.isCanceled)
            put(key = "is_expiring", boolean = dto.isExpiring)
            put(key = "pricing", value = dto.pricing) { data -> serialize(dto = data) }
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarSubscriptions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starSubscriptions")
            put(key = "star_amount", value = dto.starAmount) { data -> serialize(dto = data) }
            put(key = "subscriptions", objects = dto.subscriptions) { data -> serialize(dto = data) }
            put(key = "required_star_count", long = dto.requiredStarCount)
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: AffiliateTypeCurrentUser): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "affiliateTypeCurrentUser")
        }
    }

    private fun serialize(dto: AffiliateTypeBot): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "affiliateTypeBot")
            put(key = "user_id", long = dto.userId)
        }
    }

    private fun serialize(dto: AffiliateTypeChannel): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "affiliateTypeChannel")
            put(key = "chat_id", long = dto.chatId)
        }
    }

    private fun serialize(dto: AffiliateProgramSortOrderProfitability): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "affiliateProgramSortOrderProfitability")
        }
    }

    private fun serialize(dto: AffiliateProgramSortOrderCreationDate): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "affiliateProgramSortOrderCreationDate")
        }
    }

    private fun serialize(dto: AffiliateProgramSortOrderRevenue): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "affiliateProgramSortOrderRevenue")
        }
    }

    private fun serialize(dto: AffiliateProgramParameters): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "affiliateProgramParameters")
            put(key = "commission_per_mille", int = dto.commissionPerMille)
            put(key = "month_count", int = dto.monthCount)
        }
    }

    private fun serialize(dto: AffiliateProgramInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "affiliateProgramInfo")
            put(key = "parameters", value = dto.parameters) { data -> serialize(dto = data) }
            put(key = "end_date", int = dto.endDate)
            put(key = "daily_revenue_per_user_amount", value = dto.dailyRevenuePerUserAmount) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: AffiliateInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "affiliateInfo")
            put(key = "commission_per_mille", int = dto.commissionPerMille)
            put(key = "affiliate_chat_id", long = dto.affiliateChatId)
            put(key = "star_amount", value = dto.starAmount) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: FoundAffiliateProgram): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "foundAffiliateProgram")
            put(key = "bot_user_id", long = dto.botUserId)
            put(key = "info", value = dto.info) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: FoundAffiliatePrograms): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "foundAffiliatePrograms")
            put(key = "total_count", int = dto.totalCount)
            put(key = "programs", objects = dto.programs) { data -> serialize(dto = data) }
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: ConnectedAffiliateProgram): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "connectedAffiliateProgram")
            put(key = "url", string = dto.url)
            put(key = "bot_user_id", long = dto.botUserId)
            put(key = "parameters", value = dto.parameters) { data -> serialize(dto = data) }
            put(key = "connection_date", int = dto.connectionDate)
            put(key = "is_disconnected", boolean = dto.isDisconnected)
            put(key = "user_count", long = dto.userCount)
            put(key = "revenue_star_count", long = dto.revenueStarCount)
        }
    }

    private fun serialize(dto: ConnectedAffiliatePrograms): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "connectedAffiliatePrograms")
            put(key = "total_count", int = dto.totalCount)
            put(key = "programs", objects = dto.programs) { data -> serialize(dto = data) }
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: ProductInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "productInfo")
            put(key = "title", string = dto.title)
            put(key = "description", value = dto.description) { data -> serialize(dto = data) }
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PremiumPaymentOption): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumPaymentOption")
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "discount_percentage", int = dto.discountPercentage)
            put(key = "month_count", int = dto.monthCount)
            put(key = "store_product_id", string = dto.storeProductId)
            put(key = "payment_link", value = dto.paymentLink) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PremiumStatePaymentOption): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumStatePaymentOption")
            put(key = "payment_option", value = dto.paymentOption) { data -> serialize(dto = data) }
            put(key = "is_current", boolean = dto.isCurrent)
            put(key = "is_upgrade", boolean = dto.isUpgrade)
            put(key = "last_transaction_id", string = dto.lastTransactionId)
        }
    }

    private fun serialize(dto: PremiumGiftPaymentOption): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumGiftPaymentOption")
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "star_count", long = dto.starCount)
            put(key = "discount_percentage", int = dto.discountPercentage)
            put(key = "month_count", int = dto.monthCount)
            put(key = "store_product_id", string = dto.storeProductId)
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PremiumGiftPaymentOptions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumGiftPaymentOptions")
            put(key = "options", objects = dto.options) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PremiumGiveawayPaymentOption): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumGiveawayPaymentOption")
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "winner_count", int = dto.winnerCount)
            put(key = "month_count", int = dto.monthCount)
            put(key = "store_product_id", string = dto.storeProductId)
            put(key = "store_product_quantity", int = dto.storeProductQuantity)
        }
    }

    private fun serialize(dto: PremiumGiveawayPaymentOptions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumGiveawayPaymentOptions")
            put(key = "options", objects = dto.options) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PremiumGiftCodeInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumGiftCodeInfo")
            put(key = "creator_id", value = dto.creatorId) { data -> serialize(dto = data) }
            put(key = "creation_date", int = dto.creationDate)
            put(key = "is_from_giveaway", boolean = dto.isFromGiveaway)
            put(key = "giveaway_message_id", long = dto.giveawayMessageId)
            put(key = "month_count", int = dto.monthCount)
            put(key = "user_id", long = dto.userId)
            put(key = "use_date", int = dto.useDate)
        }
    }

    private fun serialize(dto: StarPaymentOption): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starPaymentOption")
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "star_count", long = dto.starCount)
            put(key = "store_product_id", string = dto.storeProductId)
            put(key = "is_additional", boolean = dto.isAdditional)
        }
    }

    private fun serialize(dto: StarPaymentOptions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starPaymentOptions")
            put(key = "options", objects = dto.options) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarGiveawayWinnerOption): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starGiveawayWinnerOption")
            put(key = "winner_count", int = dto.winnerCount)
            put(key = "won_star_count", long = dto.wonStarCount)
            put(key = "is_default", boolean = dto.isDefault)
        }
    }

    private fun serialize(dto: StarGiveawayPaymentOption): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starGiveawayPaymentOption")
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "star_count", long = dto.starCount)
            put(key = "store_product_id", string = dto.storeProductId)
            put(key = "yearly_boost_count", int = dto.yearlyBoostCount)
            put(key = "winner_options", objects = dto.winnerOptions) { data -> serialize(dto = data) }
            put(key = "is_default", boolean = dto.isDefault)
            put(key = "is_additional", boolean = dto.isAdditional)
        }
    }

    private fun serialize(dto: StarGiveawayPaymentOptions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starGiveawayPaymentOptions")
            put(key = "options", objects = dto.options) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: AcceptedGiftTypes): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "acceptedGiftTypes")
            put(key = "unlimited_gifts", boolean = dto.unlimitedGifts)
            put(key = "limited_gifts", boolean = dto.limitedGifts)
            put(key = "upgraded_gifts", boolean = dto.upgradedGifts)
            put(key = "premium_subscription", boolean = dto.premiumSubscription)
        }
    }

    private fun serialize(dto: GiftSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giftSettings")
            put(key = "show_gift_button", boolean = dto.showGiftButton)
            put(key = "accepted_gift_types", value = dto.acceptedGiftTypes) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpgradedGiftModel): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "upgradedGiftModel")
            put(key = "name", string = dto.name)
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
            put(key = "rarity_per_mille", int = dto.rarityPerMille)
        }
    }

    private fun serialize(dto: UpgradedGiftSymbol): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "upgradedGiftSymbol")
            put(key = "name", string = dto.name)
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
            put(key = "rarity_per_mille", int = dto.rarityPerMille)
        }
    }

    private fun serialize(dto: UpgradedGiftBackdropColors): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "upgradedGiftBackdropColors")
            put(key = "center_color", int = dto.centerColor)
            put(key = "edge_color", int = dto.edgeColor)
            put(key = "symbol_color", int = dto.symbolColor)
            put(key = "text_color", int = dto.textColor)
        }
    }

    private fun serialize(dto: UpgradedGiftBackdrop): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "upgradedGiftBackdrop")
            put(key = "id", int = dto.id)
            put(key = "name", string = dto.name)
            put(key = "colors", value = dto.colors) { data -> serialize(dto = data) }
            put(key = "rarity_per_mille", int = dto.rarityPerMille)
        }
    }

    private fun serialize(dto: UpgradedGiftOriginalDetails): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "upgradedGiftOriginalDetails")
            put(key = "sender_id", value = dto.senderId) { data -> serialize(dto = data) }
            put(key = "receiver_id", value = dto.receiverId) { data -> serialize(dto = data) }
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "date", int = dto.date)
        }
    }

    private fun serialize(dto: Gift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "gift")
            put(key = "id", long = dto.id)
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
            put(key = "star_count", long = dto.starCount)
            put(key = "default_sell_star_count", long = dto.defaultSellStarCount)
            put(key = "upgrade_star_count", long = dto.upgradeStarCount)
            put(key = "is_for_birthday", boolean = dto.isForBirthday)
            put(key = "remaining_count", int = dto.remainingCount)
            put(key = "total_count", int = dto.totalCount)
            put(key = "first_send_date", int = dto.firstSendDate)
            put(key = "last_send_date", int = dto.lastSendDate)
        }
    }

    private fun serialize(dto: UpgradedGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "upgradedGift")
            put(key = "id", long = dto.id)
            put(key = "title", string = dto.title)
            put(key = "name", string = dto.name)
            put(key = "number", int = dto.number)
            put(key = "total_upgraded_count", int = dto.totalUpgradedCount)
            put(key = "max_upgraded_count", int = dto.maxUpgradedCount)
            put(key = "owner_id", value = dto.ownerId) { data -> serialize(dto = data) }
            put(key = "owner_address", string = dto.ownerAddress)
            put(key = "owner_name", string = dto.ownerName)
            put(key = "gift_address", string = dto.giftAddress)
            put(key = "model", value = dto.model) { data -> serialize(dto = data) }
            put(key = "symbol", value = dto.symbol) { data -> serialize(dto = data) }
            put(key = "backdrop", value = dto.backdrop) { data -> serialize(dto = data) }
            put(key = "original_details", value = dto.originalDetails) { data -> serialize(dto = data) }
            put(key = "resale_star_count", long = dto.resaleStarCount)
        }
    }

    private fun serialize(dto: UpgradeGiftResult): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "upgradeGiftResult")
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
            put(key = "received_gift_id", string = dto.receivedGiftId)
            put(key = "is_saved", boolean = dto.isSaved)
            put(key = "can_be_transferred", boolean = dto.canBeTransferred)
            put(key = "transfer_star_count", long = dto.transferStarCount)
            put(key = "next_transfer_date", int = dto.nextTransferDate)
            put(key = "next_resale_date", int = dto.nextResaleDate)
            put(key = "export_date", int = dto.exportDate)
        }
    }

    private fun serialize(dto: AvailableGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "availableGift")
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
            put(key = "resale_count", int = dto.resaleCount)
            put(key = "min_resale_star_count", long = dto.minResaleStarCount)
            put(key = "title", string = dto.title)
        }
    }

    private fun serialize(dto: AvailableGifts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "availableGifts")
            put(key = "gifts", objects = dto.gifts) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpgradedGiftAttributeIdModel): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "upgradedGiftAttributeIdModel")
            put(key = "sticker_id", long = dto.stickerId)
        }
    }

    private fun serialize(dto: UpgradedGiftAttributeIdSymbol): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "upgradedGiftAttributeIdSymbol")
            put(key = "sticker_id", long = dto.stickerId)
        }
    }

    private fun serialize(dto: UpgradedGiftAttributeIdBackdrop): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "upgradedGiftAttributeIdBackdrop")
            put(key = "backdrop_id", int = dto.backdropId)
        }
    }

    private fun serialize(dto: UpgradedGiftModelCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "upgradedGiftModelCount")
            put(key = "model", value = dto.model) { data -> serialize(dto = data) }
            put(key = "total_count", int = dto.totalCount)
        }
    }

    private fun serialize(dto: UpgradedGiftSymbolCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "upgradedGiftSymbolCount")
            put(key = "symbol", value = dto.symbol) { data -> serialize(dto = data) }
            put(key = "total_count", int = dto.totalCount)
        }
    }

    private fun serialize(dto: UpgradedGiftBackdropCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "upgradedGiftBackdropCount")
            put(key = "backdrop", value = dto.backdrop) { data -> serialize(dto = data) }
            put(key = "total_count", int = dto.totalCount)
        }
    }

    private fun serialize(dto: GiftForResaleOrderPrice): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giftForResaleOrderPrice")
        }
    }

    private fun serialize(dto: GiftForResaleOrderPriceChangeDate): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giftForResaleOrderPriceChangeDate")
        }
    }

    private fun serialize(dto: GiftForResaleOrderNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giftForResaleOrderNumber")
        }
    }

    private fun serialize(dto: GiftForResale): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giftForResale")
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
            put(key = "received_gift_id", string = dto.receivedGiftId)
        }
    }

    private fun serialize(dto: GiftsForResale): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giftsForResale")
            put(key = "total_count", int = dto.totalCount)
            put(key = "gifts", objects = dto.gifts) { data -> serialize(dto = data) }
            put(key = "models", objects = dto.models) { data -> serialize(dto = data) }
            put(key = "symbols", objects = dto.symbols) { data -> serialize(dto = data) }
            put(key = "backdrops", objects = dto.backdrops) { data -> serialize(dto = data) }
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: SentGiftRegular): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sentGiftRegular")
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: SentGiftUpgraded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sentGiftUpgraded")
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ReceivedGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "receivedGift")
            put(key = "received_gift_id", string = dto.receivedGiftId)
            put(key = "sender_id", value = dto.senderId) { data -> serialize(dto = data) }
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "is_private", boolean = dto.isPrivate)
            put(key = "is_saved", boolean = dto.isSaved)
            put(key = "is_pinned", boolean = dto.isPinned)
            put(key = "can_be_upgraded", boolean = dto.canBeUpgraded)
            put(key = "can_be_transferred", boolean = dto.canBeTransferred)
            put(key = "was_refunded", boolean = dto.wasRefunded)
            put(key = "date", int = dto.date)
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
            put(key = "sell_star_count", long = dto.sellStarCount)
            put(key = "prepaid_upgrade_star_count", long = dto.prepaidUpgradeStarCount)
            put(key = "transfer_star_count", long = dto.transferStarCount)
            put(key = "next_transfer_date", int = dto.nextTransferDate)
            put(key = "next_resale_date", int = dto.nextResaleDate)
            put(key = "export_date", int = dto.exportDate)
        }
    }

    private fun serialize(dto: ReceivedGifts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "receivedGifts")
            put(key = "total_count", int = dto.totalCount)
            put(key = "gifts", objects = dto.gifts) { data -> serialize(dto = data) }
            put(key = "are_notifications_enabled", boolean = dto.areNotificationsEnabled)
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: GiftUpgradePreview): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giftUpgradePreview")
            put(key = "models", objects = dto.models) { data -> serialize(dto = data) }
            put(key = "symbols", objects = dto.symbols) { data -> serialize(dto = data) }
            put(key = "backdrops", objects = dto.backdrops) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionDirectionIncoming): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionDirectionIncoming")
        }
    }

    private fun serialize(dto: StarTransactionDirectionOutgoing): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionDirectionOutgoing")
        }
    }

    private fun serialize(dto: StarTransactionTypePremiumBotDeposit): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypePremiumBotDeposit")
        }
    }

    private fun serialize(dto: StarTransactionTypeAppStoreDeposit): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeAppStoreDeposit")
        }
    }

    private fun serialize(dto: StarTransactionTypeGooglePlayDeposit): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeGooglePlayDeposit")
        }
    }

    private fun serialize(dto: StarTransactionTypeFragmentDeposit): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeFragmentDeposit")
        }
    }

    private fun serialize(dto: StarTransactionTypeUserDeposit): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeUserDeposit")
            put(key = "user_id", long = dto.userId)
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeGiveawayDeposit): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeGiveawayDeposit")
            put(key = "chat_id", long = dto.chatId)
            put(key = "giveaway_message_id", long = dto.giveawayMessageId)
        }
    }

    private fun serialize(dto: StarTransactionTypeFragmentWithdrawal): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeFragmentWithdrawal")
            put(key = "withdrawal_state", value = dto.withdrawalState) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeTelegramAdsWithdrawal): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeTelegramAdsWithdrawal")
        }
    }

    private fun serialize(dto: StarTransactionTypeTelegramApiUsage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeTelegramApiUsage")
            put(key = "request_count", int = dto.requestCount)
        }
    }

    private fun serialize(dto: StarTransactionTypeBotPaidMediaPurchase): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeBotPaidMediaPurchase")
            put(key = "user_id", long = dto.userId)
            put(key = "media", objects = dto.media) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeBotPaidMediaSale): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeBotPaidMediaSale")
            put(key = "user_id", long = dto.userId)
            put(key = "media", objects = dto.media) { data -> serialize(dto = data) }
            put(key = "payload", string = dto.payload)
            put(key = "affiliate", value = dto.affiliate) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeChannelPaidMediaPurchase): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeChannelPaidMediaPurchase")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "media", objects = dto.media) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeChannelPaidMediaSale): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeChannelPaidMediaSale")
            put(key = "user_id", long = dto.userId)
            put(key = "message_id", long = dto.messageId)
            put(key = "media", objects = dto.media) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeBotInvoicePurchase): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeBotInvoicePurchase")
            put(key = "user_id", long = dto.userId)
            put(key = "product_info", value = dto.productInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeBotInvoiceSale): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeBotInvoiceSale")
            put(key = "user_id", long = dto.userId)
            put(key = "product_info", value = dto.productInfo) { data -> serialize(dto = data) }
            put(key = "invoice_payload", bytes = dto.invoicePayload)
            put(key = "affiliate", value = dto.affiliate) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeBotSubscriptionPurchase): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeBotSubscriptionPurchase")
            put(key = "user_id", long = dto.userId)
            put(key = "subscription_period", int = dto.subscriptionPeriod)
            put(key = "product_info", value = dto.productInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeBotSubscriptionSale): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeBotSubscriptionSale")
            put(key = "user_id", long = dto.userId)
            put(key = "subscription_period", int = dto.subscriptionPeriod)
            put(key = "product_info", value = dto.productInfo) { data -> serialize(dto = data) }
            put(key = "invoice_payload", bytes = dto.invoicePayload)
            put(key = "affiliate", value = dto.affiliate) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeChannelSubscriptionPurchase): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeChannelSubscriptionPurchase")
            put(key = "chat_id", long = dto.chatId)
            put(key = "subscription_period", int = dto.subscriptionPeriod)
        }
    }

    private fun serialize(dto: StarTransactionTypeChannelSubscriptionSale): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeChannelSubscriptionSale")
            put(key = "user_id", long = dto.userId)
            put(key = "subscription_period", int = dto.subscriptionPeriod)
        }
    }

    private fun serialize(dto: StarTransactionTypeGiftPurchase): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeGiftPurchase")
            put(key = "owner_id", value = dto.ownerId) { data -> serialize(dto = data) }
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeGiftTransfer): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeGiftTransfer")
            put(key = "owner_id", value = dto.ownerId) { data -> serialize(dto = data) }
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeGiftSale): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeGiftSale")
            put(key = "user_id", long = dto.userId)
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeGiftUpgrade): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeGiftUpgrade")
            put(key = "user_id", long = dto.userId)
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeUpgradedGiftPurchase): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeUpgradedGiftPurchase")
            put(key = "user_id", long = dto.userId)
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeUpgradedGiftSale): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeUpgradedGiftSale")
            put(key = "user_id", long = dto.userId)
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
            put(key = "affiliate", value = dto.affiliate) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeChannelPaidReactionSend): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeChannelPaidReactionSend")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
        }
    }

    private fun serialize(dto: StarTransactionTypeChannelPaidReactionReceive): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeChannelPaidReactionReceive")
            put(key = "user_id", long = dto.userId)
            put(key = "message_id", long = dto.messageId)
        }
    }

    private fun serialize(dto: StarTransactionTypeAffiliateProgramCommission): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeAffiliateProgramCommission")
            put(key = "chat_id", long = dto.chatId)
            put(key = "commission_per_mille", int = dto.commissionPerMille)
        }
    }

    private fun serialize(dto: StarTransactionTypePaidMessageSend): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypePaidMessageSend")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_count", int = dto.messageCount)
        }
    }

    private fun serialize(dto: StarTransactionTypePaidMessageReceive): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypePaidMessageReceive")
            put(key = "sender_id", value = dto.senderId) { data -> serialize(dto = data) }
            put(key = "message_count", int = dto.messageCount)
            put(key = "commission_per_mille", int = dto.commissionPerMille)
            put(key = "commission_star_amount", value = dto.commissionStarAmount) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypePremiumPurchase): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypePremiumPurchase")
            put(key = "user_id", long = dto.userId)
            put(key = "month_count", int = dto.monthCount)
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactionTypeBusinessBotTransferSend): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeBusinessBotTransferSend")
            put(key = "user_id", long = dto.userId)
        }
    }

    private fun serialize(dto: StarTransactionTypeBusinessBotTransferReceive): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeBusinessBotTransferReceive")
            put(key = "user_id", long = dto.userId)
        }
    }

    private fun serialize(dto: StarTransactionTypeUnsupported): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactionTypeUnsupported")
        }
    }

    private fun serialize(dto: StarTransaction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransaction")
            put(key = "id", string = dto.id)
            put(key = "star_amount", value = dto.starAmount) { data -> serialize(dto = data) }
            put(key = "is_refund", boolean = dto.isRefund)
            put(key = "date", int = dto.date)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarTransactions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starTransactions")
            put(key = "star_amount", value = dto.starAmount) { data -> serialize(dto = data) }
            put(key = "transactions", objects = dto.transactions) { data -> serialize(dto = data) }
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: GiveawayParticipantStatusEligible): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giveawayParticipantStatusEligible")
        }
    }

    private fun serialize(dto: GiveawayParticipantStatusParticipating): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giveawayParticipantStatusParticipating")
        }
    }

    private fun serialize(dto: GiveawayParticipantStatusAlreadyWasMember): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giveawayParticipantStatusAlreadyWasMember")
            put(key = "joined_chat_date", int = dto.joinedChatDate)
        }
    }

    private fun serialize(dto: GiveawayParticipantStatusAdministrator): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giveawayParticipantStatusAdministrator")
            put(key = "chat_id", long = dto.chatId)
        }
    }

    private fun serialize(dto: GiveawayParticipantStatusDisallowedCountry): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giveawayParticipantStatusDisallowedCountry")
            put(key = "user_country_code", string = dto.userCountryCode)
        }
    }

    private fun serialize(dto: GiveawayInfoOngoing): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giveawayInfoOngoing")
            put(key = "creation_date", int = dto.creationDate)
            put(key = "status", value = dto.status) { data -> serialize(dto = data) }
            put(key = "is_ended", boolean = dto.isEnded)
        }
    }

    private fun serialize(dto: GiveawayInfoCompleted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giveawayInfoCompleted")
            put(key = "creation_date", int = dto.creationDate)
            put(key = "actual_winners_selection_date", int = dto.actualWinnersSelectionDate)
            put(key = "was_refunded", boolean = dto.wasRefunded)
            put(key = "is_winner", boolean = dto.isWinner)
            put(key = "winner_count", int = dto.winnerCount)
            put(key = "activation_count", int = dto.activationCount)
            put(key = "gift_code", string = dto.giftCode)
            put(key = "won_star_count", long = dto.wonStarCount)
        }
    }

    private fun serialize(dto: GiveawayPrizePremium): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giveawayPrizePremium")
            put(key = "month_count", int = dto.monthCount)
        }
    }

    private fun serialize(dto: GiveawayPrizeStars): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giveawayPrizeStars")
            put(key = "star_count", long = dto.starCount)
        }
    }

    private fun serialize(dto: AccentColor): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "accentColor")
            put(key = "id", int = dto.id)
            put(key = "built_in_accent_color_id", int = dto.builtInAccentColorId)
            put(key = "light_theme_colors", ints = dto.lightThemeColors)
            put(key = "dark_theme_colors", ints = dto.darkThemeColors)
            put(key = "min_channel_chat_boost_level", int = dto.minChannelChatBoostLevel)
        }
    }

    private fun serialize(dto: ProfileAccentColors): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "profileAccentColors")
            put(key = "palette_colors", ints = dto.paletteColors)
            put(key = "background_colors", ints = dto.backgroundColors)
            put(key = "story_colors", ints = dto.storyColors)
        }
    }

    private fun serialize(dto: ProfileAccentColor): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "profileAccentColor")
            put(key = "id", int = dto.id)
            put(key = "light_theme_colors", value = dto.lightThemeColors) { data -> serialize(dto = data) }
            put(key = "dark_theme_colors", value = dto.darkThemeColors) { data -> serialize(dto = data) }
            put(key = "min_supergroup_chat_boost_level", int = dto.minSupergroupChatBoostLevel)
            put(key = "min_channel_chat_boost_level", int = dto.minChannelChatBoostLevel)
        }
    }

    private fun serialize(dto: EmojiStatusTypeCustomEmoji): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiStatusTypeCustomEmoji")
            put(key = "custom_emoji_id", long = dto.customEmojiId)
        }
    }

    private fun serialize(dto: EmojiStatusTypeUpgradedGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiStatusTypeUpgradedGift")
            put(key = "upgraded_gift_id", long = dto.upgradedGiftId)
            put(key = "gift_title", string = dto.giftTitle)
            put(key = "gift_name", string = dto.giftName)
            put(key = "model_custom_emoji_id", long = dto.modelCustomEmojiId)
            put(key = "symbol_custom_emoji_id", long = dto.symbolCustomEmojiId)
            put(key = "backdrop_colors", value = dto.backdropColors) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: EmojiStatus): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiStatus")
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "expiration_date", int = dto.expirationDate)
        }
    }

    private fun serialize(dto: EmojiStatuses): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiStatuses")
            put(key = "emoji_statuses", objects = dto.emojiStatuses) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: EmojiStatusCustomEmojis): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiStatusCustomEmojis")
            put(key = "custom_emoji_ids", longs = dto.customEmojiIds)
        }
    }

    private fun serialize(dto: Usernames): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "usernames")
            put(key = "active_usernames", strings = dto.activeUsernames)
            put(key = "disabled_usernames", strings = dto.disabledUsernames)
            put(key = "editable_username", string = dto.editableUsername)
        }
    }

    private fun serialize(dto: User): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "user")
            put(key = "id", long = dto.id)
            put(key = "first_name", string = dto.firstName)
            put(key = "last_name", string = dto.lastName)
            put(key = "usernames", value = dto.usernames) { data -> serialize(dto = data) }
            put(key = "phone_number", string = dto.phoneNumber)
            put(key = "status", value = dto.status) { data -> serialize(dto = data) }
            put(key = "profile_photo", value = dto.profilePhoto) { data -> serialize(dto = data) }
            put(key = "accent_color_id", int = dto.accentColorId)
            put(key = "background_custom_emoji_id", long = dto.backgroundCustomEmojiId)
            put(key = "profile_accent_color_id", int = dto.profileAccentColorId)
            put(key = "profile_background_custom_emoji_id", long = dto.profileBackgroundCustomEmojiId)
            put(key = "emoji_status", value = dto.emojiStatus) { data -> serialize(dto = data) }
            put(key = "is_contact", boolean = dto.isContact)
            put(key = "is_mutual_contact", boolean = dto.isMutualContact)
            put(key = "is_close_friend", boolean = dto.isCloseFriend)
            put(key = "verification_status", value = dto.verificationStatus) { data -> serialize(dto = data) }
            put(key = "is_premium", boolean = dto.isPremium)
            put(key = "is_support", boolean = dto.isSupport)
            put(key = "restriction_reason", string = dto.restrictionReason)
            put(key = "has_active_stories", boolean = dto.hasActiveStories)
            put(key = "has_unread_active_stories", boolean = dto.hasUnreadActiveStories)
            put(key = "restricts_new_chats", boolean = dto.restrictsNewChats)
            put(key = "paid_message_star_count", long = dto.paidMessageStarCount)
            put(key = "have_access", boolean = dto.haveAccess)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "language_code", string = dto.languageCode)
            put(key = "added_to_attachment_menu", boolean = dto.addedToAttachmentMenu)
        }
    }

    private fun serialize(dto: BotInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botInfo")
            put(key = "short_description", string = dto.shortDescription)
            put(key = "description", string = dto.description)
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "animation", value = dto.animation) { data -> serialize(dto = data) }
            put(key = "menu_button", value = dto.menuButton) { data -> serialize(dto = data) }
            put(key = "commands", objects = dto.commands) { data -> serialize(dto = data) }
            put(key = "privacy_policy_url", string = dto.privacyPolicyUrl)
            put(key = "default_group_administrator_rights", value = dto.defaultGroupAdministratorRights) { data -> serialize(dto = data) }
            put(key = "default_channel_administrator_rights", value = dto.defaultChannelAdministratorRights) { data -> serialize(dto = data) }
            put(key = "affiliate_program", value = dto.affiliateProgram) { data -> serialize(dto = data) }
            put(key = "web_app_background_light_color", int = dto.webAppBackgroundLightColor)
            put(key = "web_app_background_dark_color", int = dto.webAppBackgroundDarkColor)
            put(key = "web_app_header_light_color", int = dto.webAppHeaderLightColor)
            put(key = "web_app_header_dark_color", int = dto.webAppHeaderDarkColor)
            put(key = "verification_parameters", value = dto.verificationParameters) { data -> serialize(dto = data) }
            put(key = "can_get_revenue_statistics", boolean = dto.canGetRevenueStatistics)
            put(key = "can_manage_emoji_status", boolean = dto.canManageEmojiStatus)
            put(key = "has_media_previews", boolean = dto.hasMediaPreviews)
            put(key = "edit_commands_link", value = dto.editCommandsLink) { data -> serialize(dto = data) }
            put(key = "edit_description_link", value = dto.editDescriptionLink) { data -> serialize(dto = data) }
            put(key = "edit_description_media_link", value = dto.editDescriptionMediaLink) { data -> serialize(dto = data) }
            put(key = "edit_settings_link", value = dto.editSettingsLink) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UserFullInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userFullInfo")
            put(key = "personal_photo", value = dto.personalPhoto) { data -> serialize(dto = data) }
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "public_photo", value = dto.publicPhoto) { data -> serialize(dto = data) }
            put(key = "block_list", value = dto.blockList) { data -> serialize(dto = data) }
            put(key = "can_be_called", boolean = dto.canBeCalled)
            put(key = "supports_video_calls", boolean = dto.supportsVideoCalls)
            put(key = "has_private_calls", boolean = dto.hasPrivateCalls)
            put(key = "has_private_forwards", boolean = dto.hasPrivateForwards)
            put(key = "has_restricted_voice_and_video_note_messages", boolean = dto.hasRestrictedVoiceAndVideoNoteMessages)
            put(key = "has_posted_to_profile_stories", boolean = dto.hasPostedToProfileStories)
            put(key = "has_sponsored_messages_enabled", boolean = dto.hasSponsoredMessagesEnabled)
            put(key = "need_phone_number_privacy_exception", boolean = dto.needPhoneNumberPrivacyException)
            put(key = "set_chat_background", boolean = dto.setChatBackground)
            put(key = "bio", value = dto.bio) { data -> serialize(dto = data) }
            put(key = "birthdate", value = dto.birthdate) { data -> serialize(dto = data) }
            put(key = "personal_chat_id", long = dto.personalChatId)
            put(key = "gift_count", int = dto.giftCount)
            put(key = "group_in_common_count", int = dto.groupInCommonCount)
            put(key = "incoming_paid_message_star_count", long = dto.incomingPaidMessageStarCount)
            put(key = "outgoing_paid_message_star_count", long = dto.outgoingPaidMessageStarCount)
            put(key = "gift_settings", value = dto.giftSettings) { data -> serialize(dto = data) }
            put(key = "bot_verification", value = dto.botVerification) { data -> serialize(dto = data) }
            put(key = "business_info", value = dto.businessInfo) { data -> serialize(dto = data) }
            put(key = "bot_info", value = dto.botInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Users): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "users")
            put(key = "total_count", int = dto.totalCount)
            put(key = "user_ids", longs = dto.userIds)
        }
    }

    private fun serialize(dto: FoundUsers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "foundUsers")
            put(key = "user_ids", longs = dto.userIds)
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: ChatAdministrator): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatAdministrator")
            put(key = "user_id", long = dto.userId)
            put(key = "custom_title", string = dto.customTitle)
            put(key = "is_owner", boolean = dto.isOwner)
        }
    }

    private fun serialize(dto: ChatAdministrators): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatAdministrators")
            put(key = "administrators", objects = dto.administrators) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatMemberStatusCreator): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMemberStatusCreator")
            put(key = "custom_title", string = dto.customTitle)
            put(key = "is_anonymous", boolean = dto.isAnonymous)
            put(key = "is_member", boolean = dto.isMember)
        }
    }

    private fun serialize(dto: ChatMemberStatusAdministrator): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMemberStatusAdministrator")
            put(key = "custom_title", string = dto.customTitle)
            put(key = "can_be_edited", boolean = dto.canBeEdited)
            put(key = "rights", value = dto.rights) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatMemberStatusMember): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMemberStatusMember")
            put(key = "member_until_date", int = dto.memberUntilDate)
        }
    }

    private fun serialize(dto: ChatMemberStatusRestricted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMemberStatusRestricted")
            put(key = "is_member", boolean = dto.isMember)
            put(key = "restricted_until_date", int = dto.restrictedUntilDate)
            put(key = "permissions", value = dto.permissions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatMemberStatusLeft): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMemberStatusLeft")
        }
    }

    private fun serialize(dto: ChatMemberStatusBanned): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMemberStatusBanned")
            put(key = "banned_until_date", int = dto.bannedUntilDate)
        }
    }

    private fun serialize(dto: ChatMember): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMember")
            put(key = "member_id", value = dto.memberId) { data -> serialize(dto = data) }
            put(key = "inviter_user_id", long = dto.inviterUserId)
            put(key = "joined_chat_date", int = dto.joinedChatDate)
            put(key = "status", value = dto.status) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatMembers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMembers")
            put(key = "total_count", int = dto.totalCount)
            put(key = "members", objects = dto.members) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatMembersFilterContacts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMembersFilterContacts")
        }
    }

    private fun serialize(dto: ChatMembersFilterAdministrators): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMembersFilterAdministrators")
        }
    }

    private fun serialize(dto: ChatMembersFilterMembers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMembersFilterMembers")
        }
    }

    private fun serialize(dto: ChatMembersFilterMention): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMembersFilterMention")
            put(key = "message_thread_id", long = dto.messageThreadId)
        }
    }

    private fun serialize(dto: ChatMembersFilterRestricted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMembersFilterRestricted")
        }
    }

    private fun serialize(dto: ChatMembersFilterBanned): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMembersFilterBanned")
        }
    }

    private fun serialize(dto: ChatMembersFilterBots): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMembersFilterBots")
        }
    }

    private fun serialize(dto: SupergroupMembersFilterRecent): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "supergroupMembersFilterRecent")
        }
    }

    private fun serialize(dto: SupergroupMembersFilterContacts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "supergroupMembersFilterContacts")
            put(key = "query", string = dto.query)
        }
    }

    private fun serialize(dto: SupergroupMembersFilterAdministrators): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "supergroupMembersFilterAdministrators")
        }
    }

    private fun serialize(dto: SupergroupMembersFilterSearch): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "supergroupMembersFilterSearch")
            put(key = "query", string = dto.query)
        }
    }

    private fun serialize(dto: SupergroupMembersFilterRestricted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "supergroupMembersFilterRestricted")
            put(key = "query", string = dto.query)
        }
    }

    private fun serialize(dto: SupergroupMembersFilterBanned): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "supergroupMembersFilterBanned")
            put(key = "query", string = dto.query)
        }
    }

    private fun serialize(dto: SupergroupMembersFilterMention): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "supergroupMembersFilterMention")
            put(key = "query", string = dto.query)
            put(key = "message_thread_id", long = dto.messageThreadId)
        }
    }

    private fun serialize(dto: SupergroupMembersFilterBots): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "supergroupMembersFilterBots")
        }
    }

    private fun serialize(dto: ChatInviteLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatInviteLink")
            put(key = "invite_link", string = dto.inviteLink)
            put(key = "name", string = dto.name)
            put(key = "creator_user_id", long = dto.creatorUserId)
            put(key = "date", int = dto.date)
            put(key = "edit_date", int = dto.editDate)
            put(key = "expiration_date", int = dto.expirationDate)
            put(key = "subscription_pricing", value = dto.subscriptionPricing) { data -> serialize(dto = data) }
            put(key = "member_limit", int = dto.memberLimit)
            put(key = "member_count", int = dto.memberCount)
            put(key = "expired_member_count", int = dto.expiredMemberCount)
            put(key = "pending_join_request_count", int = dto.pendingJoinRequestCount)
            put(key = "creates_join_request", boolean = dto.createsJoinRequest)
            put(key = "is_primary", boolean = dto.isPrimary)
            put(key = "is_revoked", boolean = dto.isRevoked)
        }
    }

    private fun serialize(dto: ChatInviteLinks): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatInviteLinks")
            put(key = "total_count", int = dto.totalCount)
            put(key = "invite_links", objects = dto.inviteLinks) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatInviteLinkCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatInviteLinkCount")
            put(key = "user_id", long = dto.userId)
            put(key = "invite_link_count", int = dto.inviteLinkCount)
            put(key = "revoked_invite_link_count", int = dto.revokedInviteLinkCount)
        }
    }

    private fun serialize(dto: ChatInviteLinkCounts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatInviteLinkCounts")
            put(key = "invite_link_counts", objects = dto.inviteLinkCounts) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatInviteLinkMember): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatInviteLinkMember")
            put(key = "user_id", long = dto.userId)
            put(key = "joined_chat_date", int = dto.joinedChatDate)
            put(key = "via_chat_folder_invite_link", boolean = dto.viaChatFolderInviteLink)
            put(key = "approver_user_id", long = dto.approverUserId)
        }
    }

    private fun serialize(dto: ChatInviteLinkMembers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatInviteLinkMembers")
            put(key = "total_count", int = dto.totalCount)
            put(key = "members", objects = dto.members) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InviteLinkChatTypeBasicGroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inviteLinkChatTypeBasicGroup")
        }
    }

    private fun serialize(dto: InviteLinkChatTypeSupergroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inviteLinkChatTypeSupergroup")
        }
    }

    private fun serialize(dto: InviteLinkChatTypeChannel): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inviteLinkChatTypeChannel")
        }
    }

    private fun serialize(dto: ChatInviteLinkSubscriptionInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatInviteLinkSubscriptionInfo")
            put(key = "pricing", value = dto.pricing) { data -> serialize(dto = data) }
            put(key = "can_reuse", boolean = dto.canReuse)
            put(key = "form_id", long = dto.formId)
        }
    }

    private fun serialize(dto: ChatInviteLinkInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatInviteLinkInfo")
            put(key = "chat_id", long = dto.chatId)
            put(key = "accessible_for", int = dto.accessibleFor)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "title", string = dto.title)
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "accent_color_id", int = dto.accentColorId)
            put(key = "description", string = dto.description)
            put(key = "member_count", int = dto.memberCount)
            put(key = "member_user_ids", longs = dto.memberUserIds)
            put(key = "subscription_info", value = dto.subscriptionInfo) { data -> serialize(dto = data) }
            put(key = "creates_join_request", boolean = dto.createsJoinRequest)
            put(key = "is_public", boolean = dto.isPublic)
            put(key = "verification_status", value = dto.verificationStatus) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatJoinRequest): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatJoinRequest")
            put(key = "user_id", long = dto.userId)
            put(key = "date", int = dto.date)
            put(key = "bio", string = dto.bio)
        }
    }

    private fun serialize(dto: ChatJoinRequests): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatJoinRequests")
            put(key = "total_count", int = dto.totalCount)
            put(key = "requests", objects = dto.requests) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatJoinRequestsInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatJoinRequestsInfo")
            put(key = "total_count", int = dto.totalCount)
            put(key = "user_ids", longs = dto.userIds)
        }
    }

    private fun serialize(dto: BasicGroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "basicGroup")
            put(key = "id", long = dto.id)
            put(key = "member_count", int = dto.memberCount)
            put(key = "status", value = dto.status) { data -> serialize(dto = data) }
            put(key = "is_active", boolean = dto.isActive)
            put(key = "upgraded_to_supergroup_id", long = dto.upgradedToSupergroupId)
        }
    }

    private fun serialize(dto: BasicGroupFullInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "basicGroupFullInfo")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "description", string = dto.description)
            put(key = "creator_user_id", long = dto.creatorUserId)
            put(key = "members", objects = dto.members) { data -> serialize(dto = data) }
            put(key = "can_hide_members", boolean = dto.canHideMembers)
            put(key = "can_toggle_aggressive_anti_spam", boolean = dto.canToggleAggressiveAntiSpam)
            put(key = "invite_link", value = dto.inviteLink) { data -> serialize(dto = data) }
            put(key = "bot_commands", objects = dto.botCommands) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Supergroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "supergroup")
            put(key = "id", long = dto.id)
            put(key = "usernames", value = dto.usernames) { data -> serialize(dto = data) }
            put(key = "date", int = dto.date)
            put(key = "status", value = dto.status) { data -> serialize(dto = data) }
            put(key = "member_count", int = dto.memberCount)
            put(key = "boost_level", int = dto.boostLevel)
            put(key = "has_automatic_translation", boolean = dto.hasAutomaticTranslation)
            put(key = "has_linked_chat", boolean = dto.hasLinkedChat)
            put(key = "has_location", boolean = dto.hasLocation)
            put(key = "sign_messages", boolean = dto.signMessages)
            put(key = "show_message_sender", boolean = dto.showMessageSender)
            put(key = "join_to_send_messages", boolean = dto.joinToSendMessages)
            put(key = "join_by_request", boolean = dto.joinByRequest)
            put(key = "is_slow_mode_enabled", boolean = dto.isSlowModeEnabled)
            put(key = "is_channel", boolean = dto.isChannel)
            put(key = "is_broadcast_group", boolean = dto.isBroadcastGroup)
            put(key = "is_forum", boolean = dto.isForum)
            put(key = "is_direct_messages_group", boolean = dto.isDirectMessagesGroup)
            put(key = "is_administered_direct_messages_group", boolean = dto.isAdministeredDirectMessagesGroup)
            put(key = "verification_status", value = dto.verificationStatus) { data -> serialize(dto = data) }
            put(key = "has_direct_messages_group", boolean = dto.hasDirectMessagesGroup)
            put(key = "has_forum_tabs", boolean = dto.hasForumTabs)
            put(key = "has_sensitive_content", boolean = dto.hasSensitiveContent)
            put(key = "restriction_reason", string = dto.restrictionReason)
            put(key = "paid_message_star_count", long = dto.paidMessageStarCount)
            put(key = "has_active_stories", boolean = dto.hasActiveStories)
            put(key = "has_unread_active_stories", boolean = dto.hasUnreadActiveStories)
        }
    }

    private fun serialize(dto: SupergroupFullInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "supergroupFullInfo")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "description", string = dto.description)
            put(key = "member_count", int = dto.memberCount)
            put(key = "administrator_count", int = dto.administratorCount)
            put(key = "restricted_count", int = dto.restrictedCount)
            put(key = "banned_count", int = dto.bannedCount)
            put(key = "linked_chat_id", long = dto.linkedChatId)
            put(key = "direct_messages_chat_id", long = dto.directMessagesChatId)
            put(key = "slow_mode_delay", int = dto.slowModeDelay)
            put(key = "slow_mode_delay_expires_in", double = dto.slowModeDelayExpiresIn)
            put(key = "can_enable_paid_messages", boolean = dto.canEnablePaidMessages)
            put(key = "can_enable_paid_reaction", boolean = dto.canEnablePaidReaction)
            put(key = "can_get_members", boolean = dto.canGetMembers)
            put(key = "has_hidden_members", boolean = dto.hasHiddenMembers)
            put(key = "can_hide_members", boolean = dto.canHideMembers)
            put(key = "can_set_sticker_set", boolean = dto.canSetStickerSet)
            put(key = "can_set_location", boolean = dto.canSetLocation)
            put(key = "can_get_statistics", boolean = dto.canGetStatistics)
            put(key = "can_get_revenue_statistics", boolean = dto.canGetRevenueStatistics)
            put(key = "can_get_star_revenue_statistics", boolean = dto.canGetStarRevenueStatistics)
            put(key = "can_send_gift", boolean = dto.canSendGift)
            put(key = "can_toggle_aggressive_anti_spam", boolean = dto.canToggleAggressiveAntiSpam)
            put(key = "is_all_history_available", boolean = dto.isAllHistoryAvailable)
            put(key = "can_have_sponsored_messages", boolean = dto.canHaveSponsoredMessages)
            put(key = "has_aggressive_anti_spam_enabled", boolean = dto.hasAggressiveAntiSpamEnabled)
            put(key = "has_paid_media_allowed", boolean = dto.hasPaidMediaAllowed)
            put(key = "has_pinned_stories", boolean = dto.hasPinnedStories)
            put(key = "gift_count", int = dto.giftCount)
            put(key = "my_boost_count", int = dto.myBoostCount)
            put(key = "unrestrict_boost_count", int = dto.unrestrictBoostCount)
            put(key = "outgoing_paid_message_star_count", long = dto.outgoingPaidMessageStarCount)
            put(key = "sticker_set_id", long = dto.stickerSetId)
            put(key = "custom_emoji_sticker_set_id", long = dto.customEmojiStickerSetId)
            put(key = "location", value = dto.location) { data -> serialize(dto = data) }
            put(key = "invite_link", value = dto.inviteLink) { data -> serialize(dto = data) }
            put(key = "bot_commands", objects = dto.botCommands) { data -> serialize(dto = data) }
            put(key = "bot_verification", value = dto.botVerification) { data -> serialize(dto = data) }
            put(key = "upgraded_from_basic_group_id", long = dto.upgradedFromBasicGroupId)
            put(key = "upgraded_from_max_message_id", long = dto.upgradedFromMaxMessageId)
        }
    }

    private fun serialize(dto: SecretChatStatePending): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "secretChatStatePending")
        }
    }

    private fun serialize(dto: SecretChatStateReady): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "secretChatStateReady")
        }
    }

    private fun serialize(dto: SecretChatStateClosed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "secretChatStateClosed")
        }
    }

    private fun serialize(dto: SecretChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "secretChat")
            put(key = "id", int = dto.id)
            put(key = "user_id", long = dto.userId)
            put(key = "state", value = dto.state) { data -> serialize(dto = data) }
            put(key = "is_outbound", boolean = dto.isOutbound)
            put(key = "key_hash", bytes = dto.keyHash)
            put(key = "layer", int = dto.layer)
        }
    }

    private fun serialize(dto: MessageSenderUser): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSenderUser")
            put(key = "user_id", long = dto.userId)
        }
    }

    private fun serialize(dto: MessageSenderChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSenderChat")
            put(key = "chat_id", long = dto.chatId)
        }
    }

    private fun serialize(dto: MessageSenders): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSenders")
            put(key = "total_count", int = dto.totalCount)
            put(key = "senders", objects = dto.senders) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatMessageSender): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMessageSender")
            put(key = "sender", value = dto.sender) { data -> serialize(dto = data) }
            put(key = "needs_premium", boolean = dto.needsPremium)
        }
    }

    private fun serialize(dto: ChatMessageSenders): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatMessageSenders")
            put(key = "senders", objects = dto.senders) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageReadDateRead): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageReadDateRead")
            put(key = "read_date", int = dto.readDate)
        }
    }

    private fun serialize(dto: MessageReadDateUnread): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageReadDateUnread")
        }
    }

    private fun serialize(dto: MessageReadDateTooOld): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageReadDateTooOld")
        }
    }

    private fun serialize(dto: MessageReadDateUserPrivacyRestricted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageReadDateUserPrivacyRestricted")
        }
    }

    private fun serialize(dto: MessageReadDateMyPrivacyRestricted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageReadDateMyPrivacyRestricted")
        }
    }

    private fun serialize(dto: MessageViewer): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageViewer")
            put(key = "user_id", long = dto.userId)
            put(key = "view_date", int = dto.viewDate)
        }
    }

    private fun serialize(dto: MessageViewers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageViewers")
            put(key = "viewers", objects = dto.viewers) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageOriginUser): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageOriginUser")
            put(key = "sender_user_id", long = dto.senderUserId)
        }
    }

    private fun serialize(dto: MessageOriginHiddenUser): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageOriginHiddenUser")
            put(key = "sender_name", string = dto.senderName)
        }
    }

    private fun serialize(dto: MessageOriginChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageOriginChat")
            put(key = "sender_chat_id", long = dto.senderChatId)
            put(key = "author_signature", string = dto.authorSignature)
        }
    }

    private fun serialize(dto: MessageOriginChannel): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageOriginChannel")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "author_signature", string = dto.authorSignature)
        }
    }

    private fun serialize(dto: ForwardSource): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "forwardSource")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "sender_id", value = dto.senderId) { data -> serialize(dto = data) }
            put(key = "sender_name", string = dto.senderName)
            put(key = "date", int = dto.date)
            put(key = "is_outgoing", boolean = dto.isOutgoing)
        }
    }

    private fun serialize(dto: ReactionTypeEmoji): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reactionTypeEmoji")
            put(key = "emoji", string = dto.emoji)
        }
    }

    private fun serialize(dto: ReactionTypeCustomEmoji): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reactionTypeCustomEmoji")
            put(key = "custom_emoji_id", long = dto.customEmojiId)
        }
    }

    private fun serialize(dto: ReactionTypePaid): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reactionTypePaid")
        }
    }

    private fun serialize(dto: PaidReactionTypeRegular): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paidReactionTypeRegular")
        }
    }

    private fun serialize(dto: PaidReactionTypeAnonymous): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paidReactionTypeAnonymous")
        }
    }

    private fun serialize(dto: PaidReactionTypeChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paidReactionTypeChat")
            put(key = "chat_id", long = dto.chatId)
        }
    }

    private fun serialize(dto: PaidReactor): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paidReactor")
            put(key = "sender_id", value = dto.senderId) { data -> serialize(dto = data) }
            put(key = "star_count", int = dto.starCount)
            put(key = "is_top", boolean = dto.isTop)
            put(key = "is_me", boolean = dto.isMe)
            put(key = "is_anonymous", boolean = dto.isAnonymous)
        }
    }

    private fun serialize(dto: MessageForwardInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageForwardInfo")
            put(key = "origin", value = dto.origin) { data -> serialize(dto = data) }
            put(key = "date", int = dto.date)
            put(key = "source", value = dto.source) { data -> serialize(dto = data) }
            put(key = "public_service_announcement_type", string = dto.publicServiceAnnouncementType)
        }
    }

    private fun serialize(dto: MessageImportInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageImportInfo")
            put(key = "sender_name", string = dto.senderName)
            put(key = "date", int = dto.date)
        }
    }

    private fun serialize(dto: MessageReplyInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageReplyInfo")
            put(key = "reply_count", int = dto.replyCount)
            put(key = "recent_replier_ids", objects = dto.recentReplierIds) { data -> serialize(dto = data) }
            put(key = "last_read_inbox_message_id", long = dto.lastReadInboxMessageId)
            put(key = "last_read_outbox_message_id", long = dto.lastReadOutboxMessageId)
            put(key = "last_message_id", long = dto.lastMessageId)
        }
    }

    private fun serialize(dto: MessageReaction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageReaction")
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "total_count", int = dto.totalCount)
            put(key = "is_chosen", boolean = dto.isChosen)
            put(key = "used_sender_id", value = dto.usedSenderId) { data -> serialize(dto = data) }
            put(key = "recent_sender_ids", objects = dto.recentSenderIds) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageReactions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageReactions")
            put(key = "reactions", objects = dto.reactions) { data -> serialize(dto = data) }
            put(key = "are_tags", boolean = dto.areTags)
            put(key = "paid_reactors", objects = dto.paidReactors) { data -> serialize(dto = data) }
            put(key = "can_get_added_reactions", boolean = dto.canGetAddedReactions)
        }
    }

    private fun serialize(dto: MessageInteractionInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageInteractionInfo")
            put(key = "view_count", int = dto.viewCount)
            put(key = "forward_count", int = dto.forwardCount)
            put(key = "reply_info", value = dto.replyInfo) { data -> serialize(dto = data) }
            put(key = "reactions", value = dto.reactions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UnreadReaction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "unreadReaction")
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "sender_id", value = dto.senderId) { data -> serialize(dto = data) }
            put(key = "is_big", boolean = dto.isBig)
        }
    }

    private fun serialize(dto: MessageTopicForum): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageTopicForum")
            put(key = "forum_topic_id", long = dto.forumTopicId)
        }
    }

    private fun serialize(dto: MessageTopicDirectMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageTopicDirectMessages")
            put(key = "direct_messages_chat_topic_id", long = dto.directMessagesChatTopicId)
        }
    }

    private fun serialize(dto: MessageTopicSavedMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageTopicSavedMessages")
            put(key = "saved_messages_topic_id", long = dto.savedMessagesTopicId)
        }
    }

    private fun serialize(dto: MessageEffectTypeEmojiReaction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageEffectTypeEmojiReaction")
            put(key = "select_animation", value = dto.selectAnimation) { data -> serialize(dto = data) }
            put(key = "effect_animation", value = dto.effectAnimation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageEffectTypePremiumSticker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageEffectTypePremiumSticker")
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageEffect): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageEffect")
            put(key = "id", long = dto.id)
            put(key = "static_icon", value = dto.staticIcon) { data -> serialize(dto = data) }
            put(key = "emoji", string = dto.emoji)
            put(key = "is_premium", boolean = dto.isPremium)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageSendingStatePending): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSendingStatePending")
            put(key = "sending_id", int = dto.sendingId)
        }
    }

    private fun serialize(dto: MessageSendingStateFailed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSendingStateFailed")
            put(key = "error", value = dto.error) { data -> serialize(dto = data) }
            put(key = "can_retry", boolean = dto.canRetry)
            put(key = "need_another_sender", boolean = dto.needAnotherSender)
            put(key = "need_another_reply_quote", boolean = dto.needAnotherReplyQuote)
            put(key = "need_drop_reply", boolean = dto.needDropReply)
            put(key = "required_paid_message_star_count", long = dto.requiredPaidMessageStarCount)
            put(key = "retry_after", double = dto.retryAfter)
        }
    }

    private fun serialize(dto: TextQuote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textQuote")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "position", int = dto.position)
            put(key = "is_manual", boolean = dto.isManual)
        }
    }

    private fun serialize(dto: InputTextQuote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputTextQuote")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "position", int = dto.position)
        }
    }

    private fun serialize(dto: MessageReplyToMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageReplyToMessage")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "quote", value = dto.quote) { data -> serialize(dto = data) }
            put(key = "origin", value = dto.origin) { data -> serialize(dto = data) }
            put(key = "origin_send_date", int = dto.originSendDate)
            put(key = "content", value = dto.content) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageReplyToStory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageReplyToStory")
            put(key = "story_poster_chat_id", long = dto.storyPosterChatId)
            put(key = "story_id", int = dto.storyId)
        }
    }

    private fun serialize(dto: InputMessageReplyToMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageReplyToMessage")
            put(key = "message_id", long = dto.messageId)
            put(key = "quote", value = dto.quote) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputMessageReplyToExternalMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageReplyToExternalMessage")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "quote", value = dto.quote) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputMessageReplyToStory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageReplyToStory")
            put(key = "story_poster_chat_id", long = dto.storyPosterChatId)
            put(key = "story_id", int = dto.storyId)
        }
    }

    private fun serialize(dto: FactCheck): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "factCheck")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "country_code", string = dto.countryCode)
        }
    }

    private fun serialize(dto: Message): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "message")
            put(key = "id", long = dto.id)
            put(key = "sender_id", value = dto.senderId) { data -> serialize(dto = data) }
            put(key = "chat_id", long = dto.chatId)
            put(key = "sending_state", value = dto.sendingState) { data -> serialize(dto = data) }
            put(key = "scheduling_state", value = dto.schedulingState) { data -> serialize(dto = data) }
            put(key = "is_outgoing", boolean = dto.isOutgoing)
            put(key = "is_pinned", boolean = dto.isPinned)
            put(key = "is_from_offline", boolean = dto.isFromOffline)
            put(key = "can_be_saved", boolean = dto.canBeSaved)
            put(key = "has_timestamped_media", boolean = dto.hasTimestampedMedia)
            put(key = "is_channel_post", boolean = dto.isChannelPost)
            put(key = "contains_unread_mention", boolean = dto.containsUnreadMention)
            put(key = "date", int = dto.date)
            put(key = "edit_date", int = dto.editDate)
            put(key = "forward_info", value = dto.forwardInfo) { data -> serialize(dto = data) }
            put(key = "import_info", value = dto.importInfo) { data -> serialize(dto = data) }
            put(key = "interaction_info", value = dto.interactionInfo) { data -> serialize(dto = data) }
            put(key = "unread_reactions", objects = dto.unreadReactions) { data -> serialize(dto = data) }
            put(key = "fact_check", value = dto.factCheck) { data -> serialize(dto = data) }
            put(key = "reply_to", value = dto.replyTo) { data -> serialize(dto = data) }
            put(key = "message_thread_id", long = dto.messageThreadId)
            put(key = "topic_id", value = dto.topicId) { data -> serialize(dto = data) }
            put(key = "self_destruct_type", value = dto.selfDestructType) { data -> serialize(dto = data) }
            put(key = "self_destruct_in", double = dto.selfDestructIn)
            put(key = "auto_delete_in", double = dto.autoDeleteIn)
            put(key = "via_bot_user_id", long = dto.viaBotUserId)
            put(key = "sender_business_bot_user_id", long = dto.senderBusinessBotUserId)
            put(key = "sender_boost_count", int = dto.senderBoostCount)
            put(key = "paid_message_star_count", long = dto.paidMessageStarCount)
            put(key = "author_signature", string = dto.authorSignature)
            put(key = "media_album_id", long = dto.mediaAlbumId)
            put(key = "effect_id", long = dto.effectId)
            put(key = "has_sensitive_content", boolean = dto.hasSensitiveContent)
            put(key = "restriction_reason", string = dto.restrictionReason)
            put(key = "content", value = dto.content) { data -> serialize(dto = data) }
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Messages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messages")
            put(key = "total_count", int = dto.totalCount)
            put(key = "messages", objects = dto.messages) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: FoundMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "foundMessages")
            put(key = "total_count", int = dto.totalCount)
            put(key = "messages", objects = dto.messages) { data -> serialize(dto = data) }
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: FoundChatMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "foundChatMessages")
            put(key = "total_count", int = dto.totalCount)
            put(key = "messages", objects = dto.messages) { data -> serialize(dto = data) }
            put(key = "next_from_message_id", long = dto.nextFromMessageId)
        }
    }

    private fun serialize(dto: MessagePosition): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messagePosition")
            put(key = "position", int = dto.position)
            put(key = "message_id", long = dto.messageId)
            put(key = "date", int = dto.date)
        }
    }

    private fun serialize(dto: MessagePositions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messagePositions")
            put(key = "total_count", int = dto.totalCount)
            put(key = "positions", objects = dto.positions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageCalendarDay): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageCalendarDay")
            put(key = "total_count", int = dto.totalCount)
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageCalendar): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageCalendar")
            put(key = "total_count", int = dto.totalCount)
            put(key = "days", objects = dto.days) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BusinessMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessMessage")
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
            put(key = "reply_to_message", value = dto.replyToMessage) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BusinessMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessMessages")
            put(key = "messages", objects = dto.messages) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageSourceChatHistory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSourceChatHistory")
        }
    }

    private fun serialize(dto: MessageSourceMessageThreadHistory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSourceMessageThreadHistory")
        }
    }

    private fun serialize(dto: MessageSourceForumTopicHistory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSourceForumTopicHistory")
        }
    }

    private fun serialize(dto: MessageSourceDirectMessagesChatTopicHistory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSourceDirectMessagesChatTopicHistory")
        }
    }

    private fun serialize(dto: MessageSourceHistoryPreview): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSourceHistoryPreview")
        }
    }

    private fun serialize(dto: MessageSourceChatList): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSourceChatList")
        }
    }

    private fun serialize(dto: MessageSourceSearch): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSourceSearch")
        }
    }

    private fun serialize(dto: MessageSourceChatEventLog): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSourceChatEventLog")
        }
    }

    private fun serialize(dto: MessageSourceNotification): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSourceNotification")
        }
    }

    private fun serialize(dto: MessageSourceScreenshot): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSourceScreenshot")
        }
    }

    private fun serialize(dto: MessageSourceOther): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSourceOther")
        }
    }

    private fun serialize(dto: AdvertisementSponsor): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "advertisementSponsor")
            put(key = "url", string = dto.url)
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "info", string = dto.info)
        }
    }

    private fun serialize(dto: SponsoredMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sponsoredMessage")
            put(key = "message_id", long = dto.messageId)
            put(key = "is_recommended", boolean = dto.isRecommended)
            put(key = "can_be_reported", boolean = dto.canBeReported)
            put(key = "content", value = dto.content) { data -> serialize(dto = data) }
            put(key = "sponsor", value = dto.sponsor) { data -> serialize(dto = data) }
            put(key = "title", string = dto.title)
            put(key = "button_text", string = dto.buttonText)
            put(key = "accent_color_id", int = dto.accentColorId)
            put(key = "background_custom_emoji_id", long = dto.backgroundCustomEmojiId)
            put(key = "additional_info", string = dto.additionalInfo)
        }
    }

    private fun serialize(dto: SponsoredMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sponsoredMessages")
            put(key = "messages", objects = dto.messages) { data -> serialize(dto = data) }
            put(key = "messages_between", int = dto.messagesBetween)
        }
    }

    private fun serialize(dto: SponsoredChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sponsoredChat")
            put(key = "unique_id", long = dto.uniqueId)
            put(key = "chat_id", long = dto.chatId)
            put(key = "sponsor_info", string = dto.sponsorInfo)
            put(key = "additional_info", string = dto.additionalInfo)
        }
    }

    private fun serialize(dto: SponsoredChats): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sponsoredChats")
            put(key = "chats", objects = dto.chats) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: VideoMessageAdvertisement): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "videoMessageAdvertisement")
            put(key = "unique_id", long = dto.uniqueId)
            put(key = "text", string = dto.text)
            put(key = "min_display_duration", int = dto.minDisplayDuration)
            put(key = "max_display_duration", int = dto.maxDisplayDuration)
            put(key = "can_be_reported", boolean = dto.canBeReported)
            put(key = "sponsor", value = dto.sponsor) { data -> serialize(dto = data) }
            put(key = "title", string = dto.title)
            put(key = "additional_info", string = dto.additionalInfo)
        }
    }

    private fun serialize(dto: VideoMessageAdvertisements): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "videoMessageAdvertisements")
            put(key = "advertisements", objects = dto.advertisements) { data -> serialize(dto = data) }
            put(key = "start_delay", int = dto.startDelay)
            put(key = "between_delay", int = dto.betweenDelay)
        }
    }

    private fun serialize(dto: ReportOption): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportOption")
            put(key = "id", bytes = dto.id)
            put(key = "text", string = dto.text)
        }
    }

    private fun serialize(dto: ReportSponsoredResultOk): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportSponsoredResultOk")
        }
    }

    private fun serialize(dto: ReportSponsoredResultFailed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportSponsoredResultFailed")
        }
    }

    private fun serialize(dto: ReportSponsoredResultOptionRequired): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportSponsoredResultOptionRequired")
            put(key = "title", string = dto.title)
            put(key = "options", objects = dto.options) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ReportSponsoredResultAdsHidden): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportSponsoredResultAdsHidden")
        }
    }

    private fun serialize(dto: ReportSponsoredResultPremiumRequired): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportSponsoredResultPremiumRequired")
        }
    }

    private fun serialize(dto: FileDownload): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileDownload")
            put(key = "file_id", int = dto.fileId)
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
            put(key = "add_date", int = dto.addDate)
            put(key = "complete_date", int = dto.completeDate)
            put(key = "is_paused", boolean = dto.isPaused)
        }
    }

    private fun serialize(dto: DownloadedFileCounts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "downloadedFileCounts")
            put(key = "active_count", int = dto.activeCount)
            put(key = "paused_count", int = dto.pausedCount)
            put(key = "completed_count", int = dto.completedCount)
        }
    }

    private fun serialize(dto: FoundFileDownloads): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "foundFileDownloads")
            put(key = "total_counts", value = dto.totalCounts) { data -> serialize(dto = data) }
            put(key = "files", objects = dto.files) { data -> serialize(dto = data) }
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: NotificationSettingsScopePrivateChats): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notificationSettingsScopePrivateChats")
        }
    }

    private fun serialize(dto: NotificationSettingsScopeGroupChats): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notificationSettingsScopeGroupChats")
        }
    }

    private fun serialize(dto: NotificationSettingsScopeChannelChats): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notificationSettingsScopeChannelChats")
        }
    }

    private fun serialize(dto: ChatNotificationSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatNotificationSettings")
            put(key = "use_default_mute_for", boolean = dto.useDefaultMuteFor)
            put(key = "mute_for", int = dto.muteFor)
            put(key = "use_default_sound", boolean = dto.useDefaultSound)
            put(key = "sound_id", long = dto.soundId)
            put(key = "use_default_show_preview", boolean = dto.useDefaultShowPreview)
            put(key = "show_preview", boolean = dto.showPreview)
            put(key = "use_default_mute_stories", boolean = dto.useDefaultMuteStories)
            put(key = "mute_stories", boolean = dto.muteStories)
            put(key = "use_default_story_sound", boolean = dto.useDefaultStorySound)
            put(key = "story_sound_id", long = dto.storySoundId)
            put(key = "use_default_show_story_poster", boolean = dto.useDefaultShowStoryPoster)
            put(key = "show_story_poster", boolean = dto.showStoryPoster)
            put(key = "use_default_disable_pinned_message_notifications", boolean = dto.useDefaultDisablePinnedMessageNotifications)
            put(key = "disable_pinned_message_notifications", boolean = dto.disablePinnedMessageNotifications)
            put(key = "use_default_disable_mention_notifications", boolean = dto.useDefaultDisableMentionNotifications)
            put(key = "disable_mention_notifications", boolean = dto.disableMentionNotifications)
        }
    }

    private fun serialize(dto: ScopeNotificationSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "scopeNotificationSettings")
            put(key = "mute_for", int = dto.muteFor)
            put(key = "sound_id", long = dto.soundId)
            put(key = "show_preview", boolean = dto.showPreview)
            put(key = "use_default_mute_stories", boolean = dto.useDefaultMuteStories)
            put(key = "mute_stories", boolean = dto.muteStories)
            put(key = "story_sound_id", long = dto.storySoundId)
            put(key = "show_story_poster", boolean = dto.showStoryPoster)
            put(key = "disable_pinned_message_notifications", boolean = dto.disablePinnedMessageNotifications)
            put(key = "disable_mention_notifications", boolean = dto.disableMentionNotifications)
        }
    }

    private fun serialize(dto: ReactionNotificationSourceNone): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reactionNotificationSourceNone")
        }
    }

    private fun serialize(dto: ReactionNotificationSourceContacts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reactionNotificationSourceContacts")
        }
    }

    private fun serialize(dto: ReactionNotificationSourceAll): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reactionNotificationSourceAll")
        }
    }

    private fun serialize(dto: ReactionNotificationSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reactionNotificationSettings")
            put(key = "message_reaction_source", value = dto.messageReactionSource) { data -> serialize(dto = data) }
            put(key = "story_reaction_source", value = dto.storyReactionSource) { data -> serialize(dto = data) }
            put(key = "sound_id", long = dto.soundId)
            put(key = "show_preview", boolean = dto.showPreview)
        }
    }

    private fun serialize(dto: DraftMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "draftMessage")
            put(key = "reply_to", value = dto.replyTo) { data -> serialize(dto = data) }
            put(key = "date", int = dto.date)
            put(key = "input_message_text", value = dto.inputMessageText) { data -> serialize(dto = data) }
            put(key = "effect_id", long = dto.effectId)
        }
    }

    private fun serialize(dto: ChatTypePrivate): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatTypePrivate")
            put(key = "user_id", long = dto.userId)
        }
    }

    private fun serialize(dto: ChatTypeBasicGroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatTypeBasicGroup")
            put(key = "basic_group_id", long = dto.basicGroupId)
        }
    }

    private fun serialize(dto: ChatTypeSupergroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatTypeSupergroup")
            put(key = "supergroup_id", long = dto.supergroupId)
            put(key = "is_channel", boolean = dto.isChannel)
        }
    }

    private fun serialize(dto: ChatTypeSecret): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatTypeSecret")
            put(key = "secret_chat_id", int = dto.secretChatId)
            put(key = "user_id", long = dto.userId)
        }
    }

    private fun serialize(dto: ChatFolderIcon): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatFolderIcon")
            put(key = "name", string = dto.name)
        }
    }

    private fun serialize(dto: ChatFolderName): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatFolderName")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "animate_custom_emoji", boolean = dto.animateCustomEmoji)
        }
    }

    private fun serialize(dto: ChatFolder): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatFolder")
            put(key = "name", value = dto.name) { data -> serialize(dto = data) }
            put(key = "icon", value = dto.icon) { data -> serialize(dto = data) }
            put(key = "color_id", int = dto.colorId)
            put(key = "is_shareable", boolean = dto.isShareable)
            put(key = "pinned_chat_ids", longs = dto.pinnedChatIds)
            put(key = "included_chat_ids", longs = dto.includedChatIds)
            put(key = "excluded_chat_ids", longs = dto.excludedChatIds)
            put(key = "exclude_muted", boolean = dto.excludeMuted)
            put(key = "exclude_read", boolean = dto.excludeRead)
            put(key = "exclude_archived", boolean = dto.excludeArchived)
            put(key = "include_contacts", boolean = dto.includeContacts)
            put(key = "include_non_contacts", boolean = dto.includeNonContacts)
            put(key = "include_bots", boolean = dto.includeBots)
            put(key = "include_groups", boolean = dto.includeGroups)
            put(key = "include_channels", boolean = dto.includeChannels)
        }
    }

    private fun serialize(dto: ChatFolderInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatFolderInfo")
            put(key = "id", int = dto.id)
            put(key = "name", value = dto.name) { data -> serialize(dto = data) }
            put(key = "icon", value = dto.icon) { data -> serialize(dto = data) }
            put(key = "color_id", int = dto.colorId)
            put(key = "is_shareable", boolean = dto.isShareable)
            put(key = "has_my_invite_links", boolean = dto.hasMyInviteLinks)
        }
    }

    private fun serialize(dto: ChatFolderInviteLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatFolderInviteLink")
            put(key = "invite_link", string = dto.inviteLink)
            put(key = "name", string = dto.name)
            put(key = "chat_ids", longs = dto.chatIds)
        }
    }

    private fun serialize(dto: ChatFolderInviteLinks): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatFolderInviteLinks")
            put(key = "invite_links", objects = dto.inviteLinks) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatFolderInviteLinkInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatFolderInviteLinkInfo")
            put(key = "chat_folder_info", value = dto.chatFolderInfo) { data -> serialize(dto = data) }
            put(key = "missing_chat_ids", longs = dto.missingChatIds)
            put(key = "added_chat_ids", longs = dto.addedChatIds)
        }
    }

    private fun serialize(dto: RecommendedChatFolder): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "recommendedChatFolder")
            put(key = "folder", value = dto.folder) { data -> serialize(dto = data) }
            put(key = "description", string = dto.description)
        }
    }

    private fun serialize(dto: RecommendedChatFolders): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "recommendedChatFolders")
            put(key = "chat_folders", objects = dto.chatFolders) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ArchiveChatListSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "archiveChatListSettings")
            put(key = "archive_and_mute_new_chats_from_unknown_users", boolean = dto.archiveAndMuteNewChatsFromUnknownUsers)
            put(key = "keep_unmuted_chats_archived", boolean = dto.keepUnmutedChatsArchived)
            put(key = "keep_chats_from_folders_archived", boolean = dto.keepChatsFromFoldersArchived)
        }
    }

    private fun serialize(dto: ChatListMain): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatListMain")
        }
    }

    private fun serialize(dto: ChatListArchive): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatListArchive")
        }
    }

    private fun serialize(dto: ChatListFolder): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatListFolder")
            put(key = "chat_folder_id", int = dto.chatFolderId)
        }
    }

    private fun serialize(dto: ChatLists): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatLists")
            put(key = "chat_lists", objects = dto.chatLists) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatSourceMtprotoProxy): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatSourceMtprotoProxy")
        }
    }

    private fun serialize(dto: ChatSourcePublicServiceAnnouncement): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatSourcePublicServiceAnnouncement")
            put(key = "type", string = dto.type)
            put(key = "text", string = dto.text)
        }
    }

    private fun serialize(dto: ChatPosition): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatPosition")
            put(key = "list", value = dto.list) { data -> serialize(dto = data) }
            put(key = "order", long = dto.order)
            put(key = "is_pinned", boolean = dto.isPinned)
            put(key = "source", value = dto.source) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatAvailableReactionsAll): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatAvailableReactionsAll")
            put(key = "max_reaction_count", int = dto.maxReactionCount)
        }
    }

    private fun serialize(dto: ChatAvailableReactionsSome): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatAvailableReactionsSome")
            put(key = "reactions", objects = dto.reactions) { data -> serialize(dto = data) }
            put(key = "max_reaction_count", int = dto.maxReactionCount)
        }
    }

    private fun serialize(dto: SavedMessagesTag): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "savedMessagesTag")
            put(key = "tag", value = dto.tag) { data -> serialize(dto = data) }
            put(key = "label", string = dto.label)
            put(key = "count", int = dto.count)
        }
    }

    private fun serialize(dto: SavedMessagesTags): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "savedMessagesTags")
            put(key = "tags", objects = dto.tags) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BusinessBotManageBar): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessBotManageBar")
            put(key = "bot_user_id", long = dto.botUserId)
            put(key = "manage_url", string = dto.manageUrl)
            put(key = "is_bot_paused", boolean = dto.isBotPaused)
            put(key = "can_bot_reply", boolean = dto.canBotReply)
        }
    }

    private fun serialize(dto: VideoChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "videoChat")
            put(key = "group_call_id", int = dto.groupCallId)
            put(key = "has_participants", boolean = dto.hasParticipants)
            put(key = "default_participant_id", value = dto.defaultParticipantId) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Chat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chat")
            put(key = "id", long = dto.id)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "title", string = dto.title)
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "accent_color_id", int = dto.accentColorId)
            put(key = "background_custom_emoji_id", long = dto.backgroundCustomEmojiId)
            put(key = "profile_accent_color_id", int = dto.profileAccentColorId)
            put(key = "profile_background_custom_emoji_id", long = dto.profileBackgroundCustomEmojiId)
            put(key = "permissions", value = dto.permissions) { data -> serialize(dto = data) }
            put(key = "last_message", value = dto.lastMessage) { data -> serialize(dto = data) }
            put(key = "positions", objects = dto.positions) { data -> serialize(dto = data) }
            put(key = "chat_lists", objects = dto.chatLists) { data -> serialize(dto = data) }
            put(key = "message_sender_id", value = dto.messageSenderId) { data -> serialize(dto = data) }
            put(key = "block_list", value = dto.blockList) { data -> serialize(dto = data) }
            put(key = "has_protected_content", boolean = dto.hasProtectedContent)
            put(key = "is_translatable", boolean = dto.isTranslatable)
            put(key = "is_marked_as_unread", boolean = dto.isMarkedAsUnread)
            put(key = "view_as_topics", boolean = dto.viewAsTopics)
            put(key = "has_scheduled_messages", boolean = dto.hasScheduledMessages)
            put(key = "can_be_deleted_only_for_self", boolean = dto.canBeDeletedOnlyForSelf)
            put(key = "can_be_deleted_for_all_users", boolean = dto.canBeDeletedForAllUsers)
            put(key = "can_be_reported", boolean = dto.canBeReported)
            put(key = "default_disable_notification", boolean = dto.defaultDisableNotification)
            put(key = "unread_count", int = dto.unreadCount)
            put(key = "last_read_inbox_message_id", long = dto.lastReadInboxMessageId)
            put(key = "last_read_outbox_message_id", long = dto.lastReadOutboxMessageId)
            put(key = "unread_mention_count", int = dto.unreadMentionCount)
            put(key = "unread_reaction_count", int = dto.unreadReactionCount)
            put(key = "notification_settings", value = dto.notificationSettings) { data -> serialize(dto = data) }
            put(key = "available_reactions", value = dto.availableReactions) { data -> serialize(dto = data) }
            put(key = "message_auto_delete_time", int = dto.messageAutoDeleteTime)
            put(key = "emoji_status", value = dto.emojiStatus) { data -> serialize(dto = data) }
            put(key = "background", value = dto.background) { data -> serialize(dto = data) }
            put(key = "theme_name", string = dto.themeName)
            put(key = "action_bar", value = dto.actionBar) { data -> serialize(dto = data) }
            put(key = "business_bot_manage_bar", value = dto.businessBotManageBar) { data -> serialize(dto = data) }
            put(key = "video_chat", value = dto.videoChat) { data -> serialize(dto = data) }
            put(key = "pending_join_requests", value = dto.pendingJoinRequests) { data -> serialize(dto = data) }
            put(key = "reply_markup_message_id", long = dto.replyMarkupMessageId)
            put(key = "draft_message", value = dto.draftMessage) { data -> serialize(dto = data) }
            put(key = "client_data", string = dto.clientData)
        }
    }

    private fun serialize(dto: Chats): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chats")
            put(key = "total_count", int = dto.totalCount)
            put(key = "chat_ids", longs = dto.chatIds)
        }
    }

    private fun serialize(dto: FailedToAddMember): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "failedToAddMember")
            put(key = "user_id", long = dto.userId)
            put(key = "premium_would_allow_invite", boolean = dto.premiumWouldAllowInvite)
            put(key = "premium_required_to_send_messages", boolean = dto.premiumRequiredToSendMessages)
        }
    }

    private fun serialize(dto: FailedToAddMembers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "failedToAddMembers")
            put(key = "failed_to_add_members", objects = dto.failedToAddMembers) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: CreatedBasicGroupChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "createdBasicGroupChat")
            put(key = "chat_id", long = dto.chatId)
            put(key = "failed_to_add_members", value = dto.failedToAddMembers) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PublicChatTypeHasUsername): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "publicChatTypeHasUsername")
        }
    }

    private fun serialize(dto: PublicChatTypeIsLocationBased): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "publicChatTypeIsLocationBased")
        }
    }

    private fun serialize(dto: AccountInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "accountInfo")
            put(key = "registration_month", int = dto.registrationMonth)
            put(key = "registration_year", int = dto.registrationYear)
            put(key = "phone_number_country_code", string = dto.phoneNumberCountryCode)
            put(key = "last_name_change_date", int = dto.lastNameChangeDate)
            put(key = "last_photo_change_date", int = dto.lastPhotoChangeDate)
        }
    }

    private fun serialize(dto: ChatActionBarReportSpam): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionBarReportSpam")
            put(key = "can_unarchive", boolean = dto.canUnarchive)
        }
    }

    private fun serialize(dto: ChatActionBarInviteMembers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionBarInviteMembers")
        }
    }

    private fun serialize(dto: ChatActionBarReportAddBlock): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionBarReportAddBlock")
            put(key = "can_unarchive", boolean = dto.canUnarchive)
            put(key = "account_info", value = dto.accountInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatActionBarAddContact): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionBarAddContact")
        }
    }

    private fun serialize(dto: ChatActionBarSharePhoneNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionBarSharePhoneNumber")
        }
    }

    private fun serialize(dto: ChatActionBarJoinRequest): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionBarJoinRequest")
            put(key = "title", string = dto.title)
            put(key = "is_channel", boolean = dto.isChannel)
            put(key = "request_date", int = dto.requestDate)
        }
    }

    private fun serialize(dto: KeyboardButtonTypeText): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "keyboardButtonTypeText")
        }
    }

    private fun serialize(dto: KeyboardButtonTypeRequestPhoneNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "keyboardButtonTypeRequestPhoneNumber")
        }
    }

    private fun serialize(dto: KeyboardButtonTypeRequestLocation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "keyboardButtonTypeRequestLocation")
        }
    }

    private fun serialize(dto: KeyboardButtonTypeRequestPoll): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "keyboardButtonTypeRequestPoll")
            put(key = "force_regular", boolean = dto.forceRegular)
            put(key = "force_quiz", boolean = dto.forceQuiz)
        }
    }

    private fun serialize(dto: KeyboardButtonTypeRequestUsers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "keyboardButtonTypeRequestUsers")
            put(key = "id", int = dto.id)
            put(key = "restrict_user_is_bot", boolean = dto.restrictUserIsBot)
            put(key = "user_is_bot", boolean = dto.userIsBot)
            put(key = "restrict_user_is_premium", boolean = dto.restrictUserIsPremium)
            put(key = "user_is_premium", boolean = dto.userIsPremium)
            put(key = "max_quantity", int = dto.maxQuantity)
            put(key = "request_name", boolean = dto.requestName)
            put(key = "request_username", boolean = dto.requestUsername)
            put(key = "request_photo", boolean = dto.requestPhoto)
        }
    }

    private fun serialize(dto: KeyboardButtonTypeRequestChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "keyboardButtonTypeRequestChat")
            put(key = "id", int = dto.id)
            put(key = "chat_is_channel", boolean = dto.chatIsChannel)
            put(key = "restrict_chat_is_forum", boolean = dto.restrictChatIsForum)
            put(key = "chat_is_forum", boolean = dto.chatIsForum)
            put(key = "restrict_chat_has_username", boolean = dto.restrictChatHasUsername)
            put(key = "chat_has_username", boolean = dto.chatHasUsername)
            put(key = "chat_is_created", boolean = dto.chatIsCreated)
            put(key = "user_administrator_rights", value = dto.userAdministratorRights) { data -> serialize(dto = data) }
            put(key = "bot_administrator_rights", value = dto.botAdministratorRights) { data -> serialize(dto = data) }
            put(key = "bot_is_member", boolean = dto.botIsMember)
            put(key = "request_title", boolean = dto.requestTitle)
            put(key = "request_username", boolean = dto.requestUsername)
            put(key = "request_photo", boolean = dto.requestPhoto)
        }
    }

    private fun serialize(dto: KeyboardButtonTypeWebApp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "keyboardButtonTypeWebApp")
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: KeyboardButton): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "keyboardButton")
            put(key = "text", string = dto.text)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InlineKeyboardButtonTypeUrl): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineKeyboardButtonTypeUrl")
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: InlineKeyboardButtonTypeLoginUrl): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineKeyboardButtonTypeLoginUrl")
            put(key = "url", string = dto.url)
            put(key = "id", long = dto.id)
            put(key = "forward_text", string = dto.forwardText)
        }
    }

    private fun serialize(dto: InlineKeyboardButtonTypeWebApp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineKeyboardButtonTypeWebApp")
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: InlineKeyboardButtonTypeCallback): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineKeyboardButtonTypeCallback")
            put(key = "data", bytes = dto.data)
        }
    }

    private fun serialize(dto: InlineKeyboardButtonTypeCallbackWithPassword): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineKeyboardButtonTypeCallbackWithPassword")
            put(key = "data", bytes = dto.data)
        }
    }

    private fun serialize(dto: InlineKeyboardButtonTypeCallbackGame): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineKeyboardButtonTypeCallbackGame")
        }
    }

    private fun serialize(dto: InlineKeyboardButtonTypeSwitchInline): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineKeyboardButtonTypeSwitchInline")
            put(key = "query", string = dto.query)
            put(key = "target_chat", value = dto.targetChat) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InlineKeyboardButtonTypeBuy): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineKeyboardButtonTypeBuy")
        }
    }

    private fun serialize(dto: InlineKeyboardButtonTypeUser): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineKeyboardButtonTypeUser")
            put(key = "user_id", long = dto.userId)
        }
    }

    private fun serialize(dto: InlineKeyboardButtonTypeCopyText): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineKeyboardButtonTypeCopyText")
            put(key = "text", string = dto.text)
        }
    }

    private fun serialize(dto: InlineKeyboardButton): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineKeyboardButton")
            put(key = "text", string = dto.text)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ReplyMarkupRemoveKeyboard): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "replyMarkupRemoveKeyboard")
            put(key = "is_personal", boolean = dto.isPersonal)
        }
    }

    private fun serialize(dto: ReplyMarkupForceReply): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "replyMarkupForceReply")
            put(key = "is_personal", boolean = dto.isPersonal)
            put(key = "input_field_placeholder", string = dto.inputFieldPlaceholder)
        }
    }

    private fun serialize(dto: ReplyMarkupShowKeyboard): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "replyMarkupShowKeyboard")
            put(key = "rows", objectArrays = dto.rows) { data -> serialize(dto = data) }
            put(key = "is_persistent", boolean = dto.isPersistent)
            put(key = "resize_keyboard", boolean = dto.resizeKeyboard)
            put(key = "one_time", boolean = dto.oneTime)
            put(key = "is_personal", boolean = dto.isPersonal)
            put(key = "input_field_placeholder", string = dto.inputFieldPlaceholder)
        }
    }

    private fun serialize(dto: ReplyMarkupInlineKeyboard): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "replyMarkupInlineKeyboard")
            put(key = "rows", objectArrays = dto.rows) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LoginUrlInfoOpen): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "loginUrlInfoOpen")
            put(key = "url", string = dto.url)
            put(key = "skip_confirmation", boolean = dto.skipConfirmation)
        }
    }

    private fun serialize(dto: LoginUrlInfoRequestConfirmation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "loginUrlInfoRequestConfirmation")
            put(key = "url", string = dto.url)
            put(key = "domain", string = dto.domain)
            put(key = "bot_user_id", long = dto.botUserId)
            put(key = "request_write_access", boolean = dto.requestWriteAccess)
        }
    }

    private fun serialize(dto: ThemeParameters): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "themeParameters")
            put(key = "background_color", int = dto.backgroundColor)
            put(key = "secondary_background_color", int = dto.secondaryBackgroundColor)
            put(key = "header_background_color", int = dto.headerBackgroundColor)
            put(key = "bottom_bar_background_color", int = dto.bottomBarBackgroundColor)
            put(key = "section_background_color", int = dto.sectionBackgroundColor)
            put(key = "section_separator_color", int = dto.sectionSeparatorColor)
            put(key = "text_color", int = dto.textColor)
            put(key = "accent_text_color", int = dto.accentTextColor)
            put(key = "section_header_text_color", int = dto.sectionHeaderTextColor)
            put(key = "subtitle_text_color", int = dto.subtitleTextColor)
            put(key = "destructive_text_color", int = dto.destructiveTextColor)
            put(key = "hint_color", int = dto.hintColor)
            put(key = "link_color", int = dto.linkColor)
            put(key = "button_color", int = dto.buttonColor)
            put(key = "button_text_color", int = dto.buttonTextColor)
        }
    }

    private fun serialize(dto: WebAppOpenModeCompact): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "webAppOpenModeCompact")
        }
    }

    private fun serialize(dto: WebAppOpenModeFullSize): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "webAppOpenModeFullSize")
        }
    }

    private fun serialize(dto: WebAppOpenModeFullScreen): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "webAppOpenModeFullScreen")
        }
    }

    private fun serialize(dto: FoundWebApp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "foundWebApp")
            put(key = "web_app", value = dto.webApp) { data -> serialize(dto = data) }
            put(key = "request_write_access", boolean = dto.requestWriteAccess)
            put(key = "skip_confirmation", boolean = dto.skipConfirmation)
        }
    }

    private fun serialize(dto: WebAppInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "webAppInfo")
            put(key = "launch_id", long = dto.launchId)
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: MainWebApp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "mainWebApp")
            put(key = "url", string = dto.url)
            put(key = "mode", value = dto.mode) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: WebAppOpenParameters): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "webAppOpenParameters")
            put(key = "theme", value = dto.theme) { data -> serialize(dto = data) }
            put(key = "application_name", string = dto.applicationName)
            put(key = "mode", value = dto.mode) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageThreadInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageThreadInfo")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_thread_id", long = dto.messageThreadId)
            put(key = "reply_info", value = dto.replyInfo) { data -> serialize(dto = data) }
            put(key = "unread_message_count", int = dto.unreadMessageCount)
            put(key = "messages", objects = dto.messages) { data -> serialize(dto = data) }
            put(key = "draft_message", value = dto.draftMessage) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: SavedMessagesTopicTypeMyNotes): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "savedMessagesTopicTypeMyNotes")
        }
    }

    private fun serialize(dto: SavedMessagesTopicTypeAuthorHidden): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "savedMessagesTopicTypeAuthorHidden")
        }
    }

    private fun serialize(dto: SavedMessagesTopicTypeSavedFromChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "savedMessagesTopicTypeSavedFromChat")
            put(key = "chat_id", long = dto.chatId)
        }
    }

    private fun serialize(dto: SavedMessagesTopic): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "savedMessagesTopic")
            put(key = "id", long = dto.id)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "is_pinned", boolean = dto.isPinned)
            put(key = "order", long = dto.order)
            put(key = "last_message", value = dto.lastMessage) { data -> serialize(dto = data) }
            put(key = "draft_message", value = dto.draftMessage) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: DirectMessagesChatTopic): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "directMessagesChatTopic")
            put(key = "chat_id", long = dto.chatId)
            put(key = "id", long = dto.id)
            put(key = "sender_id", value = dto.senderId) { data -> serialize(dto = data) }
            put(key = "order", long = dto.order)
            put(key = "can_send_unpaid_messages", boolean = dto.canSendUnpaidMessages)
            put(key = "is_marked_as_unread", boolean = dto.isMarkedAsUnread)
            put(key = "unread_count", long = dto.unreadCount)
            put(key = "last_read_inbox_message_id", long = dto.lastReadInboxMessageId)
            put(key = "last_read_outbox_message_id", long = dto.lastReadOutboxMessageId)
            put(key = "unread_reaction_count", long = dto.unreadReactionCount)
            put(key = "last_message", value = dto.lastMessage) { data -> serialize(dto = data) }
            put(key = "draft_message", value = dto.draftMessage) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ForumTopicIcon): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "forumTopicIcon")
            put(key = "color", int = dto.color)
            put(key = "custom_emoji_id", long = dto.customEmojiId)
        }
    }

    private fun serialize(dto: ForumTopicInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "forumTopicInfo")
            put(key = "chat_id", long = dto.chatId)
            put(key = "forum_topic_id", long = dto.forumTopicId)
            put(key = "message_thread_id", long = dto.messageThreadId)
            put(key = "name", string = dto.name)
            put(key = "icon", value = dto.icon) { data -> serialize(dto = data) }
            put(key = "creation_date", int = dto.creationDate)
            put(key = "creator_id", value = dto.creatorId) { data -> serialize(dto = data) }
            put(key = "is_general", boolean = dto.isGeneral)
            put(key = "is_outgoing", boolean = dto.isOutgoing)
            put(key = "is_closed", boolean = dto.isClosed)
            put(key = "is_hidden", boolean = dto.isHidden)
        }
    }

    private fun serialize(dto: ForumTopic): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "forumTopic")
            put(key = "info", value = dto.info) { data -> serialize(dto = data) }
            put(key = "last_message", value = dto.lastMessage) { data -> serialize(dto = data) }
            put(key = "order", long = dto.order)
            put(key = "is_pinned", boolean = dto.isPinned)
            put(key = "unread_count", int = dto.unreadCount)
            put(key = "last_read_inbox_message_id", long = dto.lastReadInboxMessageId)
            put(key = "last_read_outbox_message_id", long = dto.lastReadOutboxMessageId)
            put(key = "unread_mention_count", int = dto.unreadMentionCount)
            put(key = "unread_reaction_count", int = dto.unreadReactionCount)
            put(key = "notification_settings", value = dto.notificationSettings) { data -> serialize(dto = data) }
            put(key = "draft_message", value = dto.draftMessage) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ForumTopics): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "forumTopics")
            put(key = "total_count", int = dto.totalCount)
            put(key = "topics", objects = dto.topics) { data -> serialize(dto = data) }
            put(key = "next_offset_date", int = dto.nextOffsetDate)
            put(key = "next_offset_message_id", long = dto.nextOffsetMessageId)
            put(key = "next_offset_message_thread_id", long = dto.nextOffsetMessageThreadId)
        }
    }

    private fun serialize(dto: LinkPreviewOptions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewOptions")
            put(key = "is_disabled", boolean = dto.isDisabled)
            put(key = "url", string = dto.url)
            put(key = "force_small_media", boolean = dto.forceSmallMedia)
            put(key = "force_large_media", boolean = dto.forceLargeMedia)
            put(key = "show_above_text", boolean = dto.showAboveText)
        }
    }

    private fun serialize(dto: SharedUser): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sharedUser")
            put(key = "user_id", long = dto.userId)
            put(key = "first_name", string = dto.firstName)
            put(key = "last_name", string = dto.lastName)
            put(key = "username", string = dto.username)
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: SharedChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sharedChat")
            put(key = "chat_id", long = dto.chatId)
            put(key = "title", string = dto.title)
            put(key = "username", string = dto.username)
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ThemeSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "themeSettings")
            put(key = "accent_color", int = dto.accentColor)
            put(key = "background", value = dto.background) { data -> serialize(dto = data) }
            put(key = "outgoing_message_fill", value = dto.outgoingMessageFill) { data -> serialize(dto = data) }
            put(key = "animate_outgoing_message_fill", boolean = dto.animateOutgoingMessageFill)
            put(key = "outgoing_message_accent_color", int = dto.outgoingMessageAccentColor)
        }
    }

    private fun serialize(dto: RichTextPlain): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextPlain")
            put(key = "text", string = dto.text)
        }
    }

    private fun serialize(dto: RichTextBold): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextBold")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: RichTextItalic): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextItalic")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: RichTextUnderline): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextUnderline")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: RichTextStrikethrough): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextStrikethrough")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: RichTextFixed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextFixed")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: RichTextUrl): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextUrl")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "url", string = dto.url)
            put(key = "is_cached", boolean = dto.isCached)
        }
    }

    private fun serialize(dto: RichTextEmailAddress): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextEmailAddress")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "email_address", string = dto.emailAddress)
        }
    }

    private fun serialize(dto: RichTextSubscript): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextSubscript")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: RichTextSuperscript): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextSuperscript")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: RichTextMarked): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextMarked")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: RichTextPhoneNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextPhoneNumber")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "phone_number", string = dto.phoneNumber)
        }
    }

    private fun serialize(dto: RichTextIcon): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextIcon")
            put(key = "document", value = dto.document) { data -> serialize(dto = data) }
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
        }
    }

    private fun serialize(dto: RichTextReference): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextReference")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "anchor_name", string = dto.anchorName)
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: RichTextAnchor): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextAnchor")
            put(key = "name", string = dto.name)
        }
    }

    private fun serialize(dto: RichTextAnchorLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTextAnchorLink")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "anchor_name", string = dto.anchorName)
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: RichTexts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "richTexts")
            put(key = "texts", objects = dto.texts) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockCaption): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockCaption")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "credit", value = dto.credit) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockListItem): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockListItem")
            put(key = "label", string = dto.label)
            put(key = "page_blocks", objects = dto.pageBlocks) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockHorizontalAlignmentLeft): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockHorizontalAlignmentLeft")
        }
    }

    private fun serialize(dto: PageBlockHorizontalAlignmentCenter): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockHorizontalAlignmentCenter")
        }
    }

    private fun serialize(dto: PageBlockHorizontalAlignmentRight): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockHorizontalAlignmentRight")
        }
    }

    private fun serialize(dto: PageBlockVerticalAlignmentTop): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockVerticalAlignmentTop")
        }
    }

    private fun serialize(dto: PageBlockVerticalAlignmentMiddle): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockVerticalAlignmentMiddle")
        }
    }

    private fun serialize(dto: PageBlockVerticalAlignmentBottom): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockVerticalAlignmentBottom")
        }
    }

    private fun serialize(dto: PageBlockTableCell): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockTableCell")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "is_header", boolean = dto.isHeader)
            put(key = "colspan", int = dto.colspan)
            put(key = "rowspan", int = dto.rowspan)
            put(key = "align", value = dto.align) { data -> serialize(dto = data) }
            put(key = "valign", value = dto.valign) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockRelatedArticle): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockRelatedArticle")
            put(key = "url", string = dto.url)
            put(key = "title", string = dto.title)
            put(key = "description", string = dto.description)
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "author", string = dto.author)
            put(key = "publish_date", int = dto.publishDate)
        }
    }

    private fun serialize(dto: PageBlockTitle): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockTitle")
            put(key = "title", value = dto.title) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockSubtitle): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockSubtitle")
            put(key = "subtitle", value = dto.subtitle) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockAuthorDate): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockAuthorDate")
            put(key = "author", value = dto.author) { data -> serialize(dto = data) }
            put(key = "publish_date", int = dto.publishDate)
        }
    }

    private fun serialize(dto: PageBlockHeader): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockHeader")
            put(key = "header", value = dto.header) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockSubheader): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockSubheader")
            put(key = "subheader", value = dto.subheader) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockKicker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockKicker")
            put(key = "kicker", value = dto.kicker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockParagraph): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockParagraph")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockPreformatted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockPreformatted")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "language", string = dto.language)
        }
    }

    private fun serialize(dto: PageBlockFooter): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockFooter")
            put(key = "footer", value = dto.footer) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockDivider): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockDivider")
        }
    }

    private fun serialize(dto: PageBlockAnchor): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockAnchor")
            put(key = "name", string = dto.name)
        }
    }

    private fun serialize(dto: PageBlockList): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockList")
            put(key = "items", objects = dto.items) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockBlockQuote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockBlockQuote")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "credit", value = dto.credit) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockPullQuote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockPullQuote")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "credit", value = dto.credit) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockAnimation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockAnimation")
            put(key = "animation", value = dto.animation) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "need_autoplay", boolean = dto.needAutoplay)
        }
    }

    private fun serialize(dto: PageBlockAudio): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockAudio")
            put(key = "audio", value = dto.audio) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockPhoto")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: PageBlockVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockVideo")
            put(key = "video", value = dto.video) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "need_autoplay", boolean = dto.needAutoplay)
            put(key = "is_looped", boolean = dto.isLooped)
        }
    }

    private fun serialize(dto: PageBlockVoiceNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockVoiceNote")
            put(key = "voice_note", value = dto.voiceNote) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockCover): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockCover")
            put(key = "cover", value = dto.cover) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockEmbedded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockEmbedded")
            put(key = "url", string = dto.url)
            put(key = "html", string = dto.html)
            put(key = "poster_photo", value = dto.posterPhoto) { data -> serialize(dto = data) }
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "is_full_width", boolean = dto.isFullWidth)
            put(key = "allow_scrolling", boolean = dto.allowScrolling)
        }
    }

    private fun serialize(dto: PageBlockEmbeddedPost): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockEmbeddedPost")
            put(key = "url", string = dto.url)
            put(key = "author", string = dto.author)
            put(key = "author_photo", value = dto.authorPhoto) { data -> serialize(dto = data) }
            put(key = "date", int = dto.date)
            put(key = "page_blocks", objects = dto.pageBlocks) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockCollage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockCollage")
            put(key = "page_blocks", objects = dto.pageBlocks) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockSlideshow): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockSlideshow")
            put(key = "page_blocks", objects = dto.pageBlocks) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockChatLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockChatLink")
            put(key = "title", string = dto.title)
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "accent_color_id", int = dto.accentColorId)
            put(key = "username", string = dto.username)
        }
    }

    private fun serialize(dto: PageBlockTable): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockTable")
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "cells", objectArrays = dto.cells) { data -> serialize(dto = data) }
            put(key = "is_bordered", boolean = dto.isBordered)
            put(key = "is_striped", boolean = dto.isStriped)
        }
    }

    private fun serialize(dto: PageBlockDetails): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockDetails")
            put(key = "header", value = dto.header) { data -> serialize(dto = data) }
            put(key = "page_blocks", objects = dto.pageBlocks) { data -> serialize(dto = data) }
            put(key = "is_open", boolean = dto.isOpen)
        }
    }

    private fun serialize(dto: PageBlockRelatedArticles): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockRelatedArticles")
            put(key = "header", value = dto.header) { data -> serialize(dto = data) }
            put(key = "articles", objects = dto.articles) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PageBlockMap): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pageBlockMap")
            put(key = "location", value = dto.location) { data -> serialize(dto = data) }
            put(key = "zoom", int = dto.zoom)
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: WebPageInstantView): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "webPageInstantView")
            put(key = "page_blocks", objects = dto.pageBlocks) { data -> serialize(dto = data) }
            put(key = "view_count", int = dto.viewCount)
            put(key = "version", int = dto.version)
            put(key = "is_rtl", boolean = dto.isRtl)
            put(key = "is_full", boolean = dto.isFull)
            put(key = "feedback_link", value = dto.feedbackLink) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewAlbumMediaPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewAlbumMediaPhoto")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewAlbumMediaVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewAlbumMediaVideo")
            put(key = "video", value = dto.video) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeAlbum): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeAlbum")
            put(key = "media", objects = dto.media) { data -> serialize(dto = data) }
            put(key = "caption", string = dto.caption)
        }
    }

    private fun serialize(dto: LinkPreviewTypeAnimation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeAnimation")
            put(key = "animation", value = dto.animation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeApp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeApp")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeArticle): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeArticle")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeAudio): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeAudio")
            put(key = "audio", value = dto.audio) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeBackground): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeBackground")
            put(key = "document", value = dto.document) { data -> serialize(dto = data) }
            put(key = "background_type", value = dto.backgroundType) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeChannelBoost): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeChannelBoost")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeChat")
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "creates_join_request", boolean = dto.createsJoinRequest)
        }
    }

    private fun serialize(dto: LinkPreviewTypeDocument): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeDocument")
            put(key = "document", value = dto.document) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeEmbeddedAnimationPlayer): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeEmbeddedAnimationPlayer")
            put(key = "url", string = dto.url)
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "duration", int = dto.duration)
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
        }
    }

    private fun serialize(dto: LinkPreviewTypeEmbeddedAudioPlayer): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeEmbeddedAudioPlayer")
            put(key = "url", string = dto.url)
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "duration", int = dto.duration)
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
        }
    }

    private fun serialize(dto: LinkPreviewTypeEmbeddedVideoPlayer): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeEmbeddedVideoPlayer")
            put(key = "url", string = dto.url)
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "duration", int = dto.duration)
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
        }
    }

    private fun serialize(dto: LinkPreviewTypeExternalAudio): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeExternalAudio")
            put(key = "url", string = dto.url)
            put(key = "mime_type", string = dto.mimeType)
            put(key = "duration", int = dto.duration)
        }
    }

    private fun serialize(dto: LinkPreviewTypeExternalVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeExternalVideo")
            put(key = "url", string = dto.url)
            put(key = "mime_type", string = dto.mimeType)
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "duration", int = dto.duration)
        }
    }

    private fun serialize(dto: LinkPreviewTypeGroupCall): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeGroupCall")
        }
    }

    private fun serialize(dto: LinkPreviewTypeInvoice): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeInvoice")
        }
    }

    private fun serialize(dto: LinkPreviewTypeMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeMessage")
        }
    }

    private fun serialize(dto: LinkPreviewTypePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypePhoto")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypePremiumGiftCode): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypePremiumGiftCode")
        }
    }

    private fun serialize(dto: LinkPreviewTypeShareableChatFolder): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeShareableChatFolder")
        }
    }

    private fun serialize(dto: LinkPreviewTypeSticker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeSticker")
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeStickerSet): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeStickerSet")
            put(key = "stickers", objects = dto.stickers) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeStory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeStory")
            put(key = "story_poster_chat_id", long = dto.storyPosterChatId)
            put(key = "story_id", int = dto.storyId)
        }
    }

    private fun serialize(dto: LinkPreviewTypeSupergroupBoost): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeSupergroupBoost")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeTheme): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeTheme")
            put(key = "documents", objects = dto.documents) { data -> serialize(dto = data) }
            put(key = "settings", value = dto.settings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeUnsupported): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeUnsupported")
        }
    }

    private fun serialize(dto: LinkPreviewTypeUpgradedGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeUpgradedGift")
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeUser): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeUser")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "is_bot", boolean = dto.isBot)
        }
    }

    private fun serialize(dto: LinkPreviewTypeVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeVideo")
            put(key = "video", value = dto.video) { data -> serialize(dto = data) }
            put(key = "cover", value = dto.cover) { data -> serialize(dto = data) }
            put(key = "start_timestamp", int = dto.startTimestamp)
        }
    }

    private fun serialize(dto: LinkPreviewTypeVideoChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeVideoChat")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "is_live_stream", boolean = dto.isLiveStream)
        }
    }

    private fun serialize(dto: LinkPreviewTypeVideoNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeVideoNote")
            put(key = "video_note", value = dto.videoNote) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeVoiceNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeVoiceNote")
            put(key = "voice_note", value = dto.voiceNote) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreviewTypeWebApp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreviewTypeWebApp")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LinkPreview): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "linkPreview")
            put(key = "url", string = dto.url)
            put(key = "display_url", string = dto.displayUrl)
            put(key = "site_name", string = dto.siteName)
            put(key = "title", string = dto.title)
            put(key = "description", value = dto.description) { data -> serialize(dto = data) }
            put(key = "author", string = dto.author)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "has_large_media", boolean = dto.hasLargeMedia)
            put(key = "show_large_media", boolean = dto.showLargeMedia)
            put(key = "show_media_above_description", boolean = dto.showMediaAboveDescription)
            put(key = "skip_confirmation", boolean = dto.skipConfirmation)
            put(key = "show_above_text", boolean = dto.showAboveText)
            put(key = "instant_view_version", int = dto.instantViewVersion)
        }
    }

    private fun serialize(dto: CountryInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "countryInfo")
            put(key = "country_code", string = dto.countryCode)
            put(key = "name", string = dto.name)
            put(key = "english_name", string = dto.englishName)
            put(key = "is_hidden", boolean = dto.isHidden)
            put(key = "calling_codes", strings = dto.callingCodes)
        }
    }

    private fun serialize(dto: Countries): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "countries")
            put(key = "countries", objects = dto.countries) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PhoneNumberInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "phoneNumberInfo")
            put(key = "country", value = dto.country) { data -> serialize(dto = data) }
            put(key = "country_calling_code", string = dto.countryCallingCode)
            put(key = "formatted_phone_number", string = dto.formattedPhoneNumber)
            put(key = "is_anonymous", boolean = dto.isAnonymous)
        }
    }

    private fun serialize(dto: CollectibleItemTypeUsername): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "collectibleItemTypeUsername")
            put(key = "username", string = dto.username)
        }
    }

    private fun serialize(dto: CollectibleItemTypePhoneNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "collectibleItemTypePhoneNumber")
            put(key = "phone_number", string = dto.phoneNumber)
        }
    }

    private fun serialize(dto: CollectibleItemInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "collectibleItemInfo")
            put(key = "purchase_date", int = dto.purchaseDate)
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "cryptocurrency", string = dto.cryptocurrency)
            put(key = "cryptocurrency_amount", long = dto.cryptocurrencyAmount)
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: BankCardActionOpenUrl): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "bankCardActionOpenUrl")
            put(key = "text", string = dto.text)
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: BankCardInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "bankCardInfo")
            put(key = "title", string = dto.title)
            put(key = "actions", objects = dto.actions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Address): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "address")
            put(key = "country_code", string = dto.countryCode)
            put(key = "state", string = dto.state)
            put(key = "city", string = dto.city)
            put(key = "street_line1", string = dto.streetLine1)
            put(key = "street_line2", string = dto.streetLine2)
            put(key = "postal_code", string = dto.postalCode)
        }
    }

    private fun serialize(dto: LocationAddress): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "locationAddress")
            put(key = "country_code", string = dto.countryCode)
            put(key = "state", string = dto.state)
            put(key = "city", string = dto.city)
            put(key = "street", string = dto.street)
        }
    }

    private fun serialize(dto: LabeledPricePart): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "labeledPricePart")
            put(key = "label", string = dto.label)
            put(key = "amount", long = dto.amount)
        }
    }

    private fun serialize(dto: Invoice): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "invoice")
            put(key = "currency", string = dto.currency)
            put(key = "price_parts", objects = dto.priceParts) { data -> serialize(dto = data) }
            put(key = "subscription_period", int = dto.subscriptionPeriod)
            put(key = "max_tip_amount", long = dto.maxTipAmount)
            put(key = "suggested_tip_amounts", longs = dto.suggestedTipAmounts)
            put(key = "recurring_payment_terms_of_service_url", string = dto.recurringPaymentTermsOfServiceUrl)
            put(key = "terms_of_service_url", string = dto.termsOfServiceUrl)
            put(key = "is_test", boolean = dto.isTest)
            put(key = "need_name", boolean = dto.needName)
            put(key = "need_phone_number", boolean = dto.needPhoneNumber)
            put(key = "need_email_address", boolean = dto.needEmailAddress)
            put(key = "need_shipping_address", boolean = dto.needShippingAddress)
            put(key = "send_phone_number_to_provider", boolean = dto.sendPhoneNumberToProvider)
            put(key = "send_email_address_to_provider", boolean = dto.sendEmailAddressToProvider)
            put(key = "is_flexible", boolean = dto.isFlexible)
        }
    }

    private fun serialize(dto: OrderInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "orderInfo")
            put(key = "name", string = dto.name)
            put(key = "phone_number", string = dto.phoneNumber)
            put(key = "email_address", string = dto.emailAddress)
            put(key = "shipping_address", value = dto.shippingAddress) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ShippingOption): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "shippingOption")
            put(key = "id", string = dto.id)
            put(key = "title", string = dto.title)
            put(key = "price_parts", objects = dto.priceParts) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: SavedCredentials): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "savedCredentials")
            put(key = "id", string = dto.id)
            put(key = "title", string = dto.title)
        }
    }

    private fun serialize(dto: InputCredentialsSaved): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputCredentialsSaved")
            put(key = "saved_credentials_id", string = dto.savedCredentialsId)
        }
    }

    private fun serialize(dto: InputCredentialsNew): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputCredentialsNew")
            put(key = "data", string = dto.data)
            put(key = "allow_save", boolean = dto.allowSave)
        }
    }

    private fun serialize(dto: InputCredentialsApplePay): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputCredentialsApplePay")
            put(key = "data", string = dto.data)
        }
    }

    private fun serialize(dto: InputCredentialsGooglePay): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputCredentialsGooglePay")
            put(key = "data", string = dto.data)
        }
    }

    private fun serialize(dto: PaymentProviderSmartGlocal): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paymentProviderSmartGlocal")
            put(key = "public_token", string = dto.publicToken)
            put(key = "tokenize_url", string = dto.tokenizeUrl)
        }
    }

    private fun serialize(dto: PaymentProviderStripe): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paymentProviderStripe")
            put(key = "publishable_key", string = dto.publishableKey)
            put(key = "need_country", boolean = dto.needCountry)
            put(key = "need_postal_code", boolean = dto.needPostalCode)
            put(key = "need_cardholder_name", boolean = dto.needCardholderName)
        }
    }

    private fun serialize(dto: PaymentProviderOther): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paymentProviderOther")
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: PaymentOption): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paymentOption")
            put(key = "title", string = dto.title)
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: PaymentFormTypeRegular): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paymentFormTypeRegular")
            put(key = "invoice", value = dto.invoice) { data -> serialize(dto = data) }
            put(key = "payment_provider_user_id", long = dto.paymentProviderUserId)
            put(key = "payment_provider", value = dto.paymentProvider) { data -> serialize(dto = data) }
            put(key = "additional_payment_options", objects = dto.additionalPaymentOptions) { data -> serialize(dto = data) }
            put(key = "saved_order_info", value = dto.savedOrderInfo) { data -> serialize(dto = data) }
            put(key = "saved_credentials", objects = dto.savedCredentials) { data -> serialize(dto = data) }
            put(key = "can_save_credentials", boolean = dto.canSaveCredentials)
            put(key = "need_password", boolean = dto.needPassword)
        }
    }

    private fun serialize(dto: PaymentFormTypeStars): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paymentFormTypeStars")
            put(key = "star_count", long = dto.starCount)
        }
    }

    private fun serialize(dto: PaymentFormTypeStarSubscription): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paymentFormTypeStarSubscription")
            put(key = "pricing", value = dto.pricing) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PaymentForm): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paymentForm")
            put(key = "id", long = dto.id)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "seller_bot_user_id", long = dto.sellerBotUserId)
            put(key = "product_info", value = dto.productInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ValidatedOrderInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "validatedOrderInfo")
            put(key = "order_info_id", string = dto.orderInfoId)
            put(key = "shipping_options", objects = dto.shippingOptions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PaymentResult): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paymentResult")
            put(key = "success", boolean = dto.success)
            put(key = "verification_url", string = dto.verificationUrl)
        }
    }

    private fun serialize(dto: PaymentReceiptTypeRegular): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paymentReceiptTypeRegular")
            put(key = "payment_provider_user_id", long = dto.paymentProviderUserId)
            put(key = "invoice", value = dto.invoice) { data -> serialize(dto = data) }
            put(key = "order_info", value = dto.orderInfo) { data -> serialize(dto = data) }
            put(key = "shipping_option", value = dto.shippingOption) { data -> serialize(dto = data) }
            put(key = "credentials_title", string = dto.credentialsTitle)
            put(key = "tip_amount", long = dto.tipAmount)
        }
    }

    private fun serialize(dto: PaymentReceiptTypeStars): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paymentReceiptTypeStars")
            put(key = "star_count", long = dto.starCount)
            put(key = "transaction_id", string = dto.transactionId)
        }
    }

    private fun serialize(dto: PaymentReceipt): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paymentReceipt")
            put(key = "product_info", value = dto.productInfo) { data -> serialize(dto = data) }
            put(key = "date", int = dto.date)
            put(key = "seller_bot_user_id", long = dto.sellerBotUserId)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputInvoiceMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInvoiceMessage")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
        }
    }

    private fun serialize(dto: InputInvoiceName): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInvoiceName")
            put(key = "name", string = dto.name)
        }
    }

    private fun serialize(dto: InputInvoiceTelegram): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInvoiceTelegram")
            put(key = "purpose", value = dto.purpose) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PaidMediaPreview): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paidMediaPreview")
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "duration", int = dto.duration)
            put(key = "minithumbnail", value = dto.minithumbnail) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PaidMediaPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paidMediaPhoto")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PaidMediaVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paidMediaVideo")
            put(key = "video", value = dto.video) { data -> serialize(dto = data) }
            put(key = "cover", value = dto.cover) { data -> serialize(dto = data) }
            put(key = "start_timestamp", int = dto.startTimestamp)
        }
    }

    private fun serialize(dto: PaidMediaUnsupported): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "paidMediaUnsupported")
        }
    }

    private fun serialize(dto: GiveawayParameters): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "giveawayParameters")
            put(key = "boosted_chat_id", long = dto.boostedChatId)
            put(key = "additional_chat_ids", longs = dto.additionalChatIds)
            put(key = "winners_selection_date", int = dto.winnersSelectionDate)
            put(key = "only_new_members", boolean = dto.onlyNewMembers)
            put(key = "has_public_winners", boolean = dto.hasPublicWinners)
            put(key = "country_codes", strings = dto.countryCodes)
            put(key = "prize_description", string = dto.prizeDescription)
        }
    }

    private fun serialize(dto: DatedFile): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "datedFile")
            put(key = "file", value = dto.file) { data -> serialize(dto = data) }
            put(key = "date", int = dto.date)
        }
    }

    private fun serialize(dto: PassportElementTypePersonalDetails): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementTypePersonalDetails")
        }
    }

    private fun serialize(dto: PassportElementTypePassport): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementTypePassport")
        }
    }

    private fun serialize(dto: PassportElementTypeDriverLicense): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementTypeDriverLicense")
        }
    }

    private fun serialize(dto: PassportElementTypeIdentityCard): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementTypeIdentityCard")
        }
    }

    private fun serialize(dto: PassportElementTypeInternalPassport): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementTypeInternalPassport")
        }
    }

    private fun serialize(dto: PassportElementTypeAddress): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementTypeAddress")
        }
    }

    private fun serialize(dto: PassportElementTypeUtilityBill): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementTypeUtilityBill")
        }
    }

    private fun serialize(dto: PassportElementTypeBankStatement): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementTypeBankStatement")
        }
    }

    private fun serialize(dto: PassportElementTypeRentalAgreement): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementTypeRentalAgreement")
        }
    }

    private fun serialize(dto: PassportElementTypePassportRegistration): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementTypePassportRegistration")
        }
    }

    private fun serialize(dto: PassportElementTypeTemporaryRegistration): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementTypeTemporaryRegistration")
        }
    }

    private fun serialize(dto: PassportElementTypePhoneNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementTypePhoneNumber")
        }
    }

    private fun serialize(dto: PassportElementTypeEmailAddress): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementTypeEmailAddress")
        }
    }

    private fun serialize(dto: Date): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "date")
            put(key = "day", int = dto.day)
            put(key = "month", int = dto.month)
            put(key = "year", int = dto.year)
        }
    }

    private fun serialize(dto: PersonalDetails): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "personalDetails")
            put(key = "first_name", string = dto.firstName)
            put(key = "middle_name", string = dto.middleName)
            put(key = "last_name", string = dto.lastName)
            put(key = "native_first_name", string = dto.nativeFirstName)
            put(key = "native_middle_name", string = dto.nativeMiddleName)
            put(key = "native_last_name", string = dto.nativeLastName)
            put(key = "birthdate", value = dto.birthdate) { data -> serialize(dto = data) }
            put(key = "gender", string = dto.gender)
            put(key = "country_code", string = dto.countryCode)
            put(key = "residence_country_code", string = dto.residenceCountryCode)
        }
    }

    private fun serialize(dto: IdentityDocument): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "identityDocument")
            put(key = "number", string = dto.number)
            put(key = "expiration_date", value = dto.expirationDate) { data -> serialize(dto = data) }
            put(key = "front_side", value = dto.frontSide) { data -> serialize(dto = data) }
            put(key = "reverse_side", value = dto.reverseSide) { data -> serialize(dto = data) }
            put(key = "selfie", value = dto.selfie) { data -> serialize(dto = data) }
            put(key = "translation", objects = dto.translation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputIdentityDocument): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputIdentityDocument")
            put(key = "number", string = dto.number)
            put(key = "expiration_date", value = dto.expirationDate) { data -> serialize(dto = data) }
            put(key = "front_side", value = dto.frontSide) { data -> serialize(dto = data) }
            put(key = "reverse_side", value = dto.reverseSide) { data -> serialize(dto = data) }
            put(key = "selfie", value = dto.selfie) { data -> serialize(dto = data) }
            put(key = "translation", objects = dto.translation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PersonalDocument): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "personalDocument")
            put(key = "files", objects = dto.files) { data -> serialize(dto = data) }
            put(key = "translation", objects = dto.translation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputPersonalDocument): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPersonalDocument")
            put(key = "files", objects = dto.files) { data -> serialize(dto = data) }
            put(key = "translation", objects = dto.translation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportElementPersonalDetails): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementPersonalDetails")
            put(key = "personal_details", value = dto.personalDetails) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportElementPassport): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementPassport")
            put(key = "passport", value = dto.passport) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportElementDriverLicense): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementDriverLicense")
            put(key = "driver_license", value = dto.driverLicense) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportElementIdentityCard): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementIdentityCard")
            put(key = "identity_card", value = dto.identityCard) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportElementInternalPassport): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementInternalPassport")
            put(key = "internal_passport", value = dto.internalPassport) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportElementAddress): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementAddress")
            put(key = "address", value = dto.address) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportElementUtilityBill): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementUtilityBill")
            put(key = "utility_bill", value = dto.utilityBill) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportElementBankStatement): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementBankStatement")
            put(key = "bank_statement", value = dto.bankStatement) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportElementRentalAgreement): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementRentalAgreement")
            put(key = "rental_agreement", value = dto.rentalAgreement) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportElementPassportRegistration): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementPassportRegistration")
            put(key = "passport_registration", value = dto.passportRegistration) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportElementTemporaryRegistration): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementTemporaryRegistration")
            put(key = "temporary_registration", value = dto.temporaryRegistration) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportElementPhoneNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementPhoneNumber")
            put(key = "phone_number", string = dto.phoneNumber)
        }
    }

    private fun serialize(dto: PassportElementEmailAddress): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementEmailAddress")
            put(key = "email_address", string = dto.emailAddress)
        }
    }

    private fun serialize(dto: InputPassportElementPersonalDetails): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementPersonalDetails")
            put(key = "personal_details", value = dto.personalDetails) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputPassportElementPassport): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementPassport")
            put(key = "passport", value = dto.passport) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputPassportElementDriverLicense): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementDriverLicense")
            put(key = "driver_license", value = dto.driverLicense) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputPassportElementIdentityCard): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementIdentityCard")
            put(key = "identity_card", value = dto.identityCard) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputPassportElementInternalPassport): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementInternalPassport")
            put(key = "internal_passport", value = dto.internalPassport) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputPassportElementAddress): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementAddress")
            put(key = "address", value = dto.address) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputPassportElementUtilityBill): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementUtilityBill")
            put(key = "utility_bill", value = dto.utilityBill) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputPassportElementBankStatement): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementBankStatement")
            put(key = "bank_statement", value = dto.bankStatement) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputPassportElementRentalAgreement): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementRentalAgreement")
            put(key = "rental_agreement", value = dto.rentalAgreement) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputPassportElementPassportRegistration): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementPassportRegistration")
            put(key = "passport_registration", value = dto.passportRegistration) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputPassportElementTemporaryRegistration): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementTemporaryRegistration")
            put(key = "temporary_registration", value = dto.temporaryRegistration) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputPassportElementPhoneNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementPhoneNumber")
            put(key = "phone_number", string = dto.phoneNumber)
        }
    }

    private fun serialize(dto: InputPassportElementEmailAddress): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementEmailAddress")
            put(key = "email_address", string = dto.emailAddress)
        }
    }

    private fun serialize(dto: PassportElements): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElements")
            put(key = "elements", objects = dto.elements) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportElementErrorSourceUnspecified): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementErrorSourceUnspecified")
        }
    }

    private fun serialize(dto: PassportElementErrorSourceDataField): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementErrorSourceDataField")
            put(key = "field_name", string = dto.fieldName)
        }
    }

    private fun serialize(dto: PassportElementErrorSourceFrontSide): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementErrorSourceFrontSide")
        }
    }

    private fun serialize(dto: PassportElementErrorSourceReverseSide): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementErrorSourceReverseSide")
        }
    }

    private fun serialize(dto: PassportElementErrorSourceSelfie): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementErrorSourceSelfie")
        }
    }

    private fun serialize(dto: PassportElementErrorSourceTranslationFile): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementErrorSourceTranslationFile")
            put(key = "file_index", int = dto.fileIndex)
        }
    }

    private fun serialize(dto: PassportElementErrorSourceTranslationFiles): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementErrorSourceTranslationFiles")
        }
    }

    private fun serialize(dto: PassportElementErrorSourceFile): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementErrorSourceFile")
            put(key = "file_index", int = dto.fileIndex)
        }
    }

    private fun serialize(dto: PassportElementErrorSourceFiles): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementErrorSourceFiles")
        }
    }

    private fun serialize(dto: PassportElementError): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementError")
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "message", string = dto.message)
            put(key = "source", value = dto.source) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportSuitableElement): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportSuitableElement")
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "is_selfie_required", boolean = dto.isSelfieRequired)
            put(key = "is_translation_required", boolean = dto.isTranslationRequired)
            put(key = "is_native_name_required", boolean = dto.isNativeNameRequired)
        }
    }

    private fun serialize(dto: PassportRequiredElement): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportRequiredElement")
            put(key = "suitable_elements", objects = dto.suitableElements) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PassportAuthorizationForm): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportAuthorizationForm")
            put(key = "id", int = dto.id)
            put(key = "required_elements", objects = dto.requiredElements) { data -> serialize(dto = data) }
            put(key = "privacy_policy_url", string = dto.privacyPolicyUrl)
        }
    }

    private fun serialize(dto: PassportElementsWithErrors): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "passportElementsWithErrors")
            put(key = "elements", objects = dto.elements) { data -> serialize(dto = data) }
            put(key = "errors", objects = dto.errors) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: EncryptedCredentials): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "encryptedCredentials")
            put(key = "data", bytes = dto.data)
            put(key = "hash", bytes = dto.hash)
            put(key = "secret", bytes = dto.secret)
        }
    }

    private fun serialize(dto: EncryptedPassportElement): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "encryptedPassportElement")
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "data", bytes = dto.data)
            put(key = "front_side", value = dto.frontSide) { data -> serialize(dto = data) }
            put(key = "reverse_side", value = dto.reverseSide) { data -> serialize(dto = data) }
            put(key = "selfie", value = dto.selfie) { data -> serialize(dto = data) }
            put(key = "translation", objects = dto.translation) { data -> serialize(dto = data) }
            put(key = "files", objects = dto.files) { data -> serialize(dto = data) }
            put(key = "value", string = dto.value)
            put(key = "hash", string = dto.hash)
        }
    }

    private fun serialize(dto: InputPassportElementErrorSourceUnspecified): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementErrorSourceUnspecified")
            put(key = "element_hash", bytes = dto.elementHash)
        }
    }

    private fun serialize(dto: InputPassportElementErrorSourceDataField): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementErrorSourceDataField")
            put(key = "field_name", string = dto.fieldName)
            put(key = "data_hash", bytes = dto.dataHash)
        }
    }

    private fun serialize(dto: InputPassportElementErrorSourceFrontSide): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementErrorSourceFrontSide")
            put(key = "file_hash", bytes = dto.fileHash)
        }
    }

    private fun serialize(dto: InputPassportElementErrorSourceReverseSide): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementErrorSourceReverseSide")
            put(key = "file_hash", bytes = dto.fileHash)
        }
    }

    private fun serialize(dto: InputPassportElementErrorSourceSelfie): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementErrorSourceSelfie")
            put(key = "file_hash", bytes = dto.fileHash)
        }
    }

    private fun serialize(dto: InputPassportElementErrorSourceTranslationFile): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementErrorSourceTranslationFile")
            put(key = "file_hash", bytes = dto.fileHash)
        }
    }

    private fun serialize(dto: InputPassportElementErrorSourceTranslationFiles): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementErrorSourceTranslationFiles")
            put(key = "file_hashes", bytes = dto.fileHashes)
        }
    }

    private fun serialize(dto: InputPassportElementErrorSourceFile): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementErrorSourceFile")
            put(key = "file_hash", bytes = dto.fileHash)
        }
    }

    private fun serialize(dto: InputPassportElementErrorSourceFiles): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementErrorSourceFiles")
            put(key = "file_hashes", bytes = dto.fileHashes)
        }
    }

    private fun serialize(dto: InputPassportElementError): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPassportElementError")
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "message", string = dto.message)
            put(key = "source", value = dto.source) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageText): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageText")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "link_preview", value = dto.linkPreview) { data -> serialize(dto = data) }
            put(key = "link_preview_options", value = dto.linkPreviewOptions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageAnimation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageAnimation")
            put(key = "animation", value = dto.animation) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "show_caption_above_media", boolean = dto.showCaptionAboveMedia)
            put(key = "has_spoiler", boolean = dto.hasSpoiler)
            put(key = "is_secret", boolean = dto.isSecret)
        }
    }

    private fun serialize(dto: MessageAudio): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageAudio")
            put(key = "audio", value = dto.audio) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageDocument): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageDocument")
            put(key = "document", value = dto.document) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessagePaidMedia): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messagePaidMedia")
            put(key = "star_count", long = dto.starCount)
            put(key = "media", objects = dto.media) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "show_caption_above_media", boolean = dto.showCaptionAboveMedia)
        }
    }

    private fun serialize(dto: MessagePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messagePhoto")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "show_caption_above_media", boolean = dto.showCaptionAboveMedia)
            put(key = "has_spoiler", boolean = dto.hasSpoiler)
            put(key = "is_secret", boolean = dto.isSecret)
        }
    }

    private fun serialize(dto: MessageSticker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSticker")
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
            put(key = "is_premium", boolean = dto.isPremium)
        }
    }

    private fun serialize(dto: MessageVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageVideo")
            put(key = "video", value = dto.video) { data -> serialize(dto = data) }
            put(key = "alternative_videos", objects = dto.alternativeVideos) { data -> serialize(dto = data) }
            put(key = "storyboards", objects = dto.storyboards) { data -> serialize(dto = data) }
            put(key = "cover", value = dto.cover) { data -> serialize(dto = data) }
            put(key = "start_timestamp", int = dto.startTimestamp)
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "show_caption_above_media", boolean = dto.showCaptionAboveMedia)
            put(key = "has_spoiler", boolean = dto.hasSpoiler)
            put(key = "is_secret", boolean = dto.isSecret)
        }
    }

    private fun serialize(dto: MessageVideoNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageVideoNote")
            put(key = "video_note", value = dto.videoNote) { data -> serialize(dto = data) }
            put(key = "is_viewed", boolean = dto.isViewed)
            put(key = "is_secret", boolean = dto.isSecret)
        }
    }

    private fun serialize(dto: MessageVoiceNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageVoiceNote")
            put(key = "voice_note", value = dto.voiceNote) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "is_listened", boolean = dto.isListened)
        }
    }

    private fun serialize(dto: MessageExpiredPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageExpiredPhoto")
        }
    }

    private fun serialize(dto: MessageExpiredVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageExpiredVideo")
        }
    }

    private fun serialize(dto: MessageExpiredVideoNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageExpiredVideoNote")
        }
    }

    private fun serialize(dto: MessageExpiredVoiceNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageExpiredVoiceNote")
        }
    }

    private fun serialize(dto: MessageLocation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageLocation")
            put(key = "location", value = dto.location) { data -> serialize(dto = data) }
            put(key = "live_period", int = dto.livePeriod)
            put(key = "expires_in", int = dto.expiresIn)
            put(key = "heading", int = dto.heading)
            put(key = "proximity_alert_radius", int = dto.proximityAlertRadius)
        }
    }

    private fun serialize(dto: MessageVenue): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageVenue")
            put(key = "venue", value = dto.venue) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageContact): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageContact")
            put(key = "contact", value = dto.contact) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageAnimatedEmoji): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageAnimatedEmoji")
            put(key = "animated_emoji", value = dto.animatedEmoji) { data -> serialize(dto = data) }
            put(key = "emoji", string = dto.emoji)
        }
    }

    private fun serialize(dto: MessageDice): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageDice")
            put(key = "initial_state", value = dto.initialState) { data -> serialize(dto = data) }
            put(key = "final_state", value = dto.finalState) { data -> serialize(dto = data) }
            put(key = "emoji", string = dto.emoji)
            put(key = "value", int = dto.value)
            put(key = "success_animation_frame_number", int = dto.successAnimationFrameNumber)
        }
    }

    private fun serialize(dto: MessageGame): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageGame")
            put(key = "game", value = dto.game) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessagePoll): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messagePoll")
            put(key = "poll", value = dto.poll) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageStory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageStory")
            put(key = "story_poster_chat_id", long = dto.storyPosterChatId)
            put(key = "story_id", int = dto.storyId)
            put(key = "via_mention", boolean = dto.viaMention)
        }
    }

    private fun serialize(dto: MessageChecklist): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChecklist")
            put(key = "list", value = dto.list) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageInvoice): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageInvoice")
            put(key = "product_info", value = dto.productInfo) { data -> serialize(dto = data) }
            put(key = "currency", string = dto.currency)
            put(key = "total_amount", long = dto.totalAmount)
            put(key = "start_parameter", string = dto.startParameter)
            put(key = "is_test", boolean = dto.isTest)
            put(key = "need_shipping_address", boolean = dto.needShippingAddress)
            put(key = "receipt_message_id", long = dto.receiptMessageId)
            put(key = "paid_media", value = dto.paidMedia) { data -> serialize(dto = data) }
            put(key = "paid_media_caption", value = dto.paidMediaCaption) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageCall): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageCall")
            put(key = "is_video", boolean = dto.isVideo)
            put(key = "discard_reason", value = dto.discardReason) { data -> serialize(dto = data) }
            put(key = "duration", int = dto.duration)
        }
    }

    private fun serialize(dto: MessageGroupCall): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageGroupCall")
            put(key = "is_active", boolean = dto.isActive)
            put(key = "was_missed", boolean = dto.wasMissed)
            put(key = "is_video", boolean = dto.isVideo)
            put(key = "duration", int = dto.duration)
            put(key = "other_participant_ids", objects = dto.otherParticipantIds) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageVideoChatScheduled): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageVideoChatScheduled")
            put(key = "group_call_id", int = dto.groupCallId)
            put(key = "start_date", int = dto.startDate)
        }
    }

    private fun serialize(dto: MessageVideoChatStarted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageVideoChatStarted")
            put(key = "group_call_id", int = dto.groupCallId)
        }
    }

    private fun serialize(dto: MessageVideoChatEnded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageVideoChatEnded")
            put(key = "duration", int = dto.duration)
        }
    }

    private fun serialize(dto: MessageInviteVideoChatParticipants): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageInviteVideoChatParticipants")
            put(key = "group_call_id", int = dto.groupCallId)
            put(key = "user_ids", longs = dto.userIds)
        }
    }

    private fun serialize(dto: MessageBasicGroupChatCreate): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageBasicGroupChatCreate")
            put(key = "title", string = dto.title)
            put(key = "member_user_ids", longs = dto.memberUserIds)
        }
    }

    private fun serialize(dto: MessageSupergroupChatCreate): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSupergroupChatCreate")
            put(key = "title", string = dto.title)
        }
    }

    private fun serialize(dto: MessageChatChangeTitle): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChatChangeTitle")
            put(key = "title", string = dto.title)
        }
    }

    private fun serialize(dto: MessageChatChangePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChatChangePhoto")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageChatDeletePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChatDeletePhoto")
        }
    }

    private fun serialize(dto: MessageChatAddMembers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChatAddMembers")
            put(key = "member_user_ids", longs = dto.memberUserIds)
        }
    }

    private fun serialize(dto: MessageChatJoinByLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChatJoinByLink")
        }
    }

    private fun serialize(dto: MessageChatJoinByRequest): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChatJoinByRequest")
        }
    }

    private fun serialize(dto: MessageChatDeleteMember): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChatDeleteMember")
            put(key = "user_id", long = dto.userId)
        }
    }

    private fun serialize(dto: MessageChatUpgradeTo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChatUpgradeTo")
            put(key = "supergroup_id", long = dto.supergroupId)
        }
    }

    private fun serialize(dto: MessageChatUpgradeFrom): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChatUpgradeFrom")
            put(key = "title", string = dto.title)
            put(key = "basic_group_id", long = dto.basicGroupId)
        }
    }

    private fun serialize(dto: MessagePinMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messagePinMessage")
            put(key = "message_id", long = dto.messageId)
        }
    }

    private fun serialize(dto: MessageScreenshotTaken): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageScreenshotTaken")
        }
    }

    private fun serialize(dto: MessageChatSetBackground): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChatSetBackground")
            put(key = "old_background_message_id", long = dto.oldBackgroundMessageId)
            put(key = "background", value = dto.background) { data -> serialize(dto = data) }
            put(key = "only_for_self", boolean = dto.onlyForSelf)
        }
    }

    private fun serialize(dto: MessageChatSetTheme): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChatSetTheme")
            put(key = "theme_name", string = dto.themeName)
        }
    }

    private fun serialize(dto: MessageChatSetMessageAutoDeleteTime): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChatSetMessageAutoDeleteTime")
            put(key = "message_auto_delete_time", int = dto.messageAutoDeleteTime)
            put(key = "from_user_id", long = dto.fromUserId)
        }
    }

    private fun serialize(dto: MessageChatBoost): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChatBoost")
            put(key = "boost_count", int = dto.boostCount)
        }
    }

    private fun serialize(dto: MessageForumTopicCreated): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageForumTopicCreated")
            put(key = "name", string = dto.name)
            put(key = "icon", value = dto.icon) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageForumTopicEdited): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageForumTopicEdited")
            put(key = "name", string = dto.name)
            put(key = "edit_icon_custom_emoji_id", boolean = dto.editIconCustomEmojiId)
            put(key = "icon_custom_emoji_id", long = dto.iconCustomEmojiId)
        }
    }

    private fun serialize(dto: MessageForumTopicIsClosedToggled): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageForumTopicIsClosedToggled")
            put(key = "is_closed", boolean = dto.isClosed)
        }
    }

    private fun serialize(dto: MessageForumTopicIsHiddenToggled): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageForumTopicIsHiddenToggled")
            put(key = "is_hidden", boolean = dto.isHidden)
        }
    }

    private fun serialize(dto: MessageSuggestProfilePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSuggestProfilePhoto")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageCustomServiceAction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageCustomServiceAction")
            put(key = "text", string = dto.text)
        }
    }

    private fun serialize(dto: MessageGameScore): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageGameScore")
            put(key = "game_message_id", long = dto.gameMessageId)
            put(key = "game_id", long = dto.gameId)
            put(key = "score", int = dto.score)
        }
    }

    private fun serialize(dto: MessagePaymentSuccessful): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messagePaymentSuccessful")
            put(key = "invoice_chat_id", long = dto.invoiceChatId)
            put(key = "invoice_message_id", long = dto.invoiceMessageId)
            put(key = "currency", string = dto.currency)
            put(key = "total_amount", long = dto.totalAmount)
            put(key = "subscription_until_date", int = dto.subscriptionUntilDate)
            put(key = "is_recurring", boolean = dto.isRecurring)
            put(key = "is_first_recurring", boolean = dto.isFirstRecurring)
            put(key = "invoice_name", string = dto.invoiceName)
        }
    }

    private fun serialize(dto: MessagePaymentSuccessfulBot): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messagePaymentSuccessfulBot")
            put(key = "currency", string = dto.currency)
            put(key = "total_amount", long = dto.totalAmount)
            put(key = "subscription_until_date", int = dto.subscriptionUntilDate)
            put(key = "is_recurring", boolean = dto.isRecurring)
            put(key = "is_first_recurring", boolean = dto.isFirstRecurring)
            put(key = "invoice_payload", bytes = dto.invoicePayload)
            put(key = "shipping_option_id", string = dto.shippingOptionId)
            put(key = "order_info", value = dto.orderInfo) { data -> serialize(dto = data) }
            put(key = "telegram_payment_charge_id", string = dto.telegramPaymentChargeId)
            put(key = "provider_payment_charge_id", string = dto.providerPaymentChargeId)
        }
    }

    private fun serialize(dto: MessagePaymentRefunded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messagePaymentRefunded")
            put(key = "owner_id", value = dto.ownerId) { data -> serialize(dto = data) }
            put(key = "currency", string = dto.currency)
            put(key = "total_amount", long = dto.totalAmount)
            put(key = "invoice_payload", bytes = dto.invoicePayload)
            put(key = "telegram_payment_charge_id", string = dto.telegramPaymentChargeId)
            put(key = "provider_payment_charge_id", string = dto.providerPaymentChargeId)
        }
    }

    private fun serialize(dto: MessageGiftedPremium): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageGiftedPremium")
            put(key = "gifter_user_id", long = dto.gifterUserId)
            put(key = "receiver_user_id", long = dto.receiverUserId)
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "cryptocurrency", string = dto.cryptocurrency)
            put(key = "cryptocurrency_amount", long = dto.cryptocurrencyAmount)
            put(key = "month_count", int = dto.monthCount)
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessagePremiumGiftCode): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messagePremiumGiftCode")
            put(key = "creator_id", value = dto.creatorId) { data -> serialize(dto = data) }
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "is_from_giveaway", boolean = dto.isFromGiveaway)
            put(key = "is_unclaimed", boolean = dto.isUnclaimed)
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "cryptocurrency", string = dto.cryptocurrency)
            put(key = "cryptocurrency_amount", long = dto.cryptocurrencyAmount)
            put(key = "month_count", int = dto.monthCount)
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
            put(key = "code", string = dto.code)
        }
    }

    private fun serialize(dto: MessageGiveawayCreated): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageGiveawayCreated")
            put(key = "star_count", long = dto.starCount)
        }
    }

    private fun serialize(dto: MessageGiveaway): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageGiveaway")
            put(key = "parameters", value = dto.parameters) { data -> serialize(dto = data) }
            put(key = "winner_count", int = dto.winnerCount)
            put(key = "prize", value = dto.prize) { data -> serialize(dto = data) }
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageGiveawayCompleted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageGiveawayCompleted")
            put(key = "giveaway_message_id", long = dto.giveawayMessageId)
            put(key = "winner_count", int = dto.winnerCount)
            put(key = "is_star_giveaway", boolean = dto.isStarGiveaway)
            put(key = "unclaimed_prize_count", int = dto.unclaimedPrizeCount)
        }
    }

    private fun serialize(dto: MessageGiveawayWinners): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageGiveawayWinners")
            put(key = "boosted_chat_id", long = dto.boostedChatId)
            put(key = "giveaway_message_id", long = dto.giveawayMessageId)
            put(key = "additional_chat_count", int = dto.additionalChatCount)
            put(key = "actual_winners_selection_date", int = dto.actualWinnersSelectionDate)
            put(key = "only_new_members", boolean = dto.onlyNewMembers)
            put(key = "was_refunded", boolean = dto.wasRefunded)
            put(key = "prize", value = dto.prize) { data -> serialize(dto = data) }
            put(key = "prize_description", string = dto.prizeDescription)
            put(key = "winner_count", int = dto.winnerCount)
            put(key = "winner_user_ids", longs = dto.winnerUserIds)
            put(key = "unclaimed_prize_count", int = dto.unclaimedPrizeCount)
        }
    }

    private fun serialize(dto: MessageGiftedStars): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageGiftedStars")
            put(key = "gifter_user_id", long = dto.gifterUserId)
            put(key = "receiver_user_id", long = dto.receiverUserId)
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "cryptocurrency", string = dto.cryptocurrency)
            put(key = "cryptocurrency_amount", long = dto.cryptocurrencyAmount)
            put(key = "star_count", long = dto.starCount)
            put(key = "transaction_id", string = dto.transactionId)
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageGiveawayPrizeStars): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageGiveawayPrizeStars")
            put(key = "star_count", long = dto.starCount)
            put(key = "transaction_id", string = dto.transactionId)
            put(key = "boosted_chat_id", long = dto.boostedChatId)
            put(key = "giveaway_message_id", long = dto.giveawayMessageId)
            put(key = "is_unclaimed", boolean = dto.isUnclaimed)
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageGift")
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
            put(key = "sender_id", value = dto.senderId) { data -> serialize(dto = data) }
            put(key = "receiver_id", value = dto.receiverId) { data -> serialize(dto = data) }
            put(key = "received_gift_id", string = dto.receivedGiftId)
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "sell_star_count", long = dto.sellStarCount)
            put(key = "prepaid_upgrade_star_count", long = dto.prepaidUpgradeStarCount)
            put(key = "is_private", boolean = dto.isPrivate)
            put(key = "is_saved", boolean = dto.isSaved)
            put(key = "can_be_upgraded", boolean = dto.canBeUpgraded)
            put(key = "was_converted", boolean = dto.wasConverted)
            put(key = "was_upgraded", boolean = dto.wasUpgraded)
            put(key = "was_refunded", boolean = dto.wasRefunded)
            put(key = "upgraded_received_gift_id", string = dto.upgradedReceivedGiftId)
        }
    }

    private fun serialize(dto: MessageUpgradedGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageUpgradedGift")
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
            put(key = "sender_id", value = dto.senderId) { data -> serialize(dto = data) }
            put(key = "receiver_id", value = dto.receiverId) { data -> serialize(dto = data) }
            put(key = "received_gift_id", string = dto.receivedGiftId)
            put(key = "is_upgrade", boolean = dto.isUpgrade)
            put(key = "is_saved", boolean = dto.isSaved)
            put(key = "can_be_transferred", boolean = dto.canBeTransferred)
            put(key = "was_transferred", boolean = dto.wasTransferred)
            put(key = "last_resale_star_count", long = dto.lastResaleStarCount)
            put(key = "transfer_star_count", long = dto.transferStarCount)
            put(key = "next_transfer_date", int = dto.nextTransferDate)
            put(key = "next_resale_date", int = dto.nextResaleDate)
            put(key = "export_date", int = dto.exportDate)
        }
    }

    private fun serialize(dto: MessageRefundedUpgradedGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageRefundedUpgradedGift")
            put(key = "gift", value = dto.gift) { data -> serialize(dto = data) }
            put(key = "sender_id", value = dto.senderId) { data -> serialize(dto = data) }
            put(key = "receiver_id", value = dto.receiverId) { data -> serialize(dto = data) }
            put(key = "is_upgrade", boolean = dto.isUpgrade)
        }
    }

    private fun serialize(dto: MessagePaidMessagesRefunded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messagePaidMessagesRefunded")
            put(key = "message_count", int = dto.messageCount)
            put(key = "star_count", long = dto.starCount)
        }
    }

    private fun serialize(dto: MessagePaidMessagePriceChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messagePaidMessagePriceChanged")
            put(key = "paid_message_star_count", long = dto.paidMessageStarCount)
        }
    }

    private fun serialize(dto: MessageDirectMessagePriceChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageDirectMessagePriceChanged")
            put(key = "is_enabled", boolean = dto.isEnabled)
            put(key = "paid_message_star_count", long = dto.paidMessageStarCount)
        }
    }

    private fun serialize(dto: MessageChecklistTasksDone): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChecklistTasksDone")
            put(key = "checklist_message_id", long = dto.checklistMessageId)
            put(key = "marked_as_done_task_ids", ints = dto.markedAsDoneTaskIds)
            put(key = "marked_as_not_done_task_ids", ints = dto.markedAsNotDoneTaskIds)
        }
    }

    private fun serialize(dto: MessageChecklistTasksAdded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChecklistTasksAdded")
            put(key = "checklist_message_id", long = dto.checklistMessageId)
            put(key = "tasks", objects = dto.tasks) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageContactRegistered): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageContactRegistered")
        }
    }

    private fun serialize(dto: MessageUsersShared): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageUsersShared")
            put(key = "users", objects = dto.users) { data -> serialize(dto = data) }
            put(key = "button_id", int = dto.buttonId)
        }
    }

    private fun serialize(dto: MessageChatShared): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageChatShared")
            put(key = "chat", value = dto.chat) { data -> serialize(dto = data) }
            put(key = "button_id", int = dto.buttonId)
        }
    }

    private fun serialize(dto: MessageBotWriteAccessAllowed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageBotWriteAccessAllowed")
            put(key = "reason", value = dto.reason) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageWebAppDataSent): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageWebAppDataSent")
            put(key = "button_text", string = dto.buttonText)
        }
    }

    private fun serialize(dto: MessageWebAppDataReceived): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageWebAppDataReceived")
            put(key = "button_text", string = dto.buttonText)
            put(key = "data", string = dto.data)
        }
    }

    private fun serialize(dto: MessagePassportDataSent): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messagePassportDataSent")
            put(key = "types", objects = dto.types) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessagePassportDataReceived): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messagePassportDataReceived")
            put(key = "elements", objects = dto.elements) { data -> serialize(dto = data) }
            put(key = "credentials", value = dto.credentials) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageProximityAlertTriggered): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageProximityAlertTriggered")
            put(key = "traveler_id", value = dto.travelerId) { data -> serialize(dto = data) }
            put(key = "watcher_id", value = dto.watcherId) { data -> serialize(dto = data) }
            put(key = "distance", int = dto.distance)
        }
    }

    private fun serialize(dto: MessageUnsupported): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageUnsupported")
        }
    }

    private fun serialize(dto: TextEntityTypeMention): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeMention")
        }
    }

    private fun serialize(dto: TextEntityTypeHashtag): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeHashtag")
        }
    }

    private fun serialize(dto: TextEntityTypeCashtag): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeCashtag")
        }
    }

    private fun serialize(dto: TextEntityTypeBotCommand): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeBotCommand")
        }
    }

    private fun serialize(dto: TextEntityTypeUrl): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeUrl")
        }
    }

    private fun serialize(dto: TextEntityTypeEmailAddress): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeEmailAddress")
        }
    }

    private fun serialize(dto: TextEntityTypePhoneNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypePhoneNumber")
        }
    }

    private fun serialize(dto: TextEntityTypeBankCardNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeBankCardNumber")
        }
    }

    private fun serialize(dto: TextEntityTypeBold): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeBold")
        }
    }

    private fun serialize(dto: TextEntityTypeItalic): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeItalic")
        }
    }

    private fun serialize(dto: TextEntityTypeUnderline): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeUnderline")
        }
    }

    private fun serialize(dto: TextEntityTypeStrikethrough): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeStrikethrough")
        }
    }

    private fun serialize(dto: TextEntityTypeSpoiler): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeSpoiler")
        }
    }

    private fun serialize(dto: TextEntityTypeCode): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeCode")
        }
    }

    private fun serialize(dto: TextEntityTypePre): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypePre")
        }
    }

    private fun serialize(dto: TextEntityTypePreCode): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypePreCode")
            put(key = "language", string = dto.language)
        }
    }

    private fun serialize(dto: TextEntityTypeBlockQuote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeBlockQuote")
        }
    }

    private fun serialize(dto: TextEntityTypeExpandableBlockQuote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeExpandableBlockQuote")
        }
    }

    private fun serialize(dto: TextEntityTypeTextUrl): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeTextUrl")
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: TextEntityTypeMentionName): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeMentionName")
            put(key = "user_id", long = dto.userId)
        }
    }

    private fun serialize(dto: TextEntityTypeCustomEmoji): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeCustomEmoji")
            put(key = "custom_emoji_id", long = dto.customEmojiId)
        }
    }

    private fun serialize(dto: TextEntityTypeMediaTimestamp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textEntityTypeMediaTimestamp")
            put(key = "media_timestamp", int = dto.mediaTimestamp)
        }
    }

    private fun serialize(dto: InputThumbnail): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputThumbnail")
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
        }
    }

    private fun serialize(dto: InputPaidMediaTypePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPaidMediaTypePhoto")
        }
    }

    private fun serialize(dto: InputPaidMediaTypeVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPaidMediaTypeVideo")
            put(key = "cover", value = dto.cover) { data -> serialize(dto = data) }
            put(key = "start_timestamp", int = dto.startTimestamp)
            put(key = "duration", int = dto.duration)
            put(key = "supports_streaming", boolean = dto.supportsStreaming)
        }
    }

    private fun serialize(dto: InputPaidMedia): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputPaidMedia")
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "media", value = dto.media) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "added_sticker_file_ids", ints = dto.addedStickerFileIds)
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
        }
    }

    private fun serialize(dto: MessageSchedulingStateSendAtDate): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSchedulingStateSendAtDate")
            put(key = "send_date", int = dto.sendDate)
        }
    }

    private fun serialize(dto: MessageSchedulingStateSendWhenOnline): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSchedulingStateSendWhenOnline")
        }
    }

    private fun serialize(dto: MessageSchedulingStateSendWhenVideoProcessed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSchedulingStateSendWhenVideoProcessed")
            put(key = "send_date", int = dto.sendDate)
        }
    }

    private fun serialize(dto: MessageSelfDestructTypeTimer): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSelfDestructTypeTimer")
            put(key = "self_destruct_time", int = dto.selfDestructTime)
        }
    }

    private fun serialize(dto: MessageSelfDestructTypeImmediately): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSelfDestructTypeImmediately")
        }
    }

    private fun serialize(dto: MessageSendOptions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageSendOptions")
            put(key = "direct_messages_chat_topic_id", long = dto.directMessagesChatTopicId)
            put(key = "disable_notification", boolean = dto.disableNotification)
            put(key = "from_background", boolean = dto.fromBackground)
            put(key = "protect_content", boolean = dto.protectContent)
            put(key = "allow_paid_broadcast", boolean = dto.allowPaidBroadcast)
            put(key = "paid_message_star_count", long = dto.paidMessageStarCount)
            put(key = "update_order_of_installed_sticker_sets", boolean = dto.updateOrderOfInstalledStickerSets)
            put(key = "scheduling_state", value = dto.schedulingState) { data -> serialize(dto = data) }
            put(key = "effect_id", long = dto.effectId)
            put(key = "sending_id", int = dto.sendingId)
            put(key = "only_preview", boolean = dto.onlyPreview)
        }
    }

    private fun serialize(dto: MessageCopyOptions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageCopyOptions")
            put(key = "send_copy", boolean = dto.sendCopy)
            put(key = "replace_caption", boolean = dto.replaceCaption)
            put(key = "new_caption", value = dto.newCaption) { data -> serialize(dto = data) }
            put(key = "new_show_caption_above_media", boolean = dto.newShowCaptionAboveMedia)
        }
    }

    private fun serialize(dto: InputMessageText): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageText")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "link_preview_options", value = dto.linkPreviewOptions) { data -> serialize(dto = data) }
            put(key = "clear_draft", boolean = dto.clearDraft)
        }
    }

    private fun serialize(dto: InputMessageAnimation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageAnimation")
            put(key = "animation", value = dto.animation) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "added_sticker_file_ids", ints = dto.addedStickerFileIds)
            put(key = "duration", int = dto.duration)
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "show_caption_above_media", boolean = dto.showCaptionAboveMedia)
            put(key = "has_spoiler", boolean = dto.hasSpoiler)
        }
    }

    private fun serialize(dto: InputMessageAudio): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageAudio")
            put(key = "audio", value = dto.audio) { data -> serialize(dto = data) }
            put(key = "album_cover_thumbnail", value = dto.albumCoverThumbnail) { data -> serialize(dto = data) }
            put(key = "duration", int = dto.duration)
            put(key = "title", string = dto.title)
            put(key = "performer", string = dto.performer)
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputMessageDocument): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageDocument")
            put(key = "document", value = dto.document) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "disable_content_type_detection", boolean = dto.disableContentTypeDetection)
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputMessagePaidMedia): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessagePaidMedia")
            put(key = "star_count", long = dto.starCount)
            put(key = "paid_media", objects = dto.paidMedia) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "show_caption_above_media", boolean = dto.showCaptionAboveMedia)
            put(key = "payload", string = dto.payload)
        }
    }

    private fun serialize(dto: InputMessagePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessagePhoto")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "added_sticker_file_ids", ints = dto.addedStickerFileIds)
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "show_caption_above_media", boolean = dto.showCaptionAboveMedia)
            put(key = "self_destruct_type", value = dto.selfDestructType) { data -> serialize(dto = data) }
            put(key = "has_spoiler", boolean = dto.hasSpoiler)
        }
    }

    private fun serialize(dto: InputMessageSticker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageSticker")
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "emoji", string = dto.emoji)
        }
    }

    private fun serialize(dto: InputMessageVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageVideo")
            put(key = "video", value = dto.video) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "cover", value = dto.cover) { data -> serialize(dto = data) }
            put(key = "start_timestamp", int = dto.startTimestamp)
            put(key = "added_sticker_file_ids", ints = dto.addedStickerFileIds)
            put(key = "duration", int = dto.duration)
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "supports_streaming", boolean = dto.supportsStreaming)
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "show_caption_above_media", boolean = dto.showCaptionAboveMedia)
            put(key = "self_destruct_type", value = dto.selfDestructType) { data -> serialize(dto = data) }
            put(key = "has_spoiler", boolean = dto.hasSpoiler)
        }
    }

    private fun serialize(dto: InputMessageVideoNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageVideoNote")
            put(key = "video_note", value = dto.videoNote) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "duration", int = dto.duration)
            put(key = "length", int = dto.length)
            put(key = "self_destruct_type", value = dto.selfDestructType) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputMessageVoiceNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageVoiceNote")
            put(key = "voice_note", value = dto.voiceNote) { data -> serialize(dto = data) }
            put(key = "duration", int = dto.duration)
            put(key = "waveform", bytes = dto.waveform)
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
            put(key = "self_destruct_type", value = dto.selfDestructType) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputMessageLocation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageLocation")
            put(key = "location", value = dto.location) { data -> serialize(dto = data) }
            put(key = "live_period", int = dto.livePeriod)
            put(key = "heading", int = dto.heading)
            put(key = "proximity_alert_radius", int = dto.proximityAlertRadius)
        }
    }

    private fun serialize(dto: InputMessageVenue): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageVenue")
            put(key = "venue", value = dto.venue) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputMessageContact): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageContact")
            put(key = "contact", value = dto.contact) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputMessageDice): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageDice")
            put(key = "emoji", string = dto.emoji)
            put(key = "clear_draft", boolean = dto.clearDraft)
        }
    }

    private fun serialize(dto: InputMessageGame): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageGame")
            put(key = "bot_user_id", long = dto.botUserId)
            put(key = "game_short_name", string = dto.gameShortName)
        }
    }

    private fun serialize(dto: InputMessageInvoice): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageInvoice")
            put(key = "invoice", value = dto.invoice) { data -> serialize(dto = data) }
            put(key = "title", string = dto.title)
            put(key = "description", string = dto.description)
            put(key = "photo_url", string = dto.photoUrl)
            put(key = "photo_size", int = dto.photoSize)
            put(key = "photo_width", int = dto.photoWidth)
            put(key = "photo_height", int = dto.photoHeight)
            put(key = "payload", bytes = dto.payload)
            put(key = "provider_token", string = dto.providerToken)
            put(key = "provider_data", string = dto.providerData)
            put(key = "start_parameter", string = dto.startParameter)
            put(key = "paid_media", value = dto.paidMedia) { data -> serialize(dto = data) }
            put(key = "paid_media_caption", value = dto.paidMediaCaption) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputMessagePoll): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessagePoll")
            put(key = "question", value = dto.question) { data -> serialize(dto = data) }
            put(key = "options", objects = dto.options) { data -> serialize(dto = data) }
            put(key = "is_anonymous", boolean = dto.isAnonymous)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "open_period", int = dto.openPeriod)
            put(key = "close_date", int = dto.closeDate)
            put(key = "is_closed", boolean = dto.isClosed)
        }
    }

    private fun serialize(dto: InputMessageStory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageStory")
            put(key = "story_poster_chat_id", long = dto.storyPosterChatId)
            put(key = "story_id", int = dto.storyId)
        }
    }

    private fun serialize(dto: InputMessageChecklist): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageChecklist")
            put(key = "checklist", value = dto.checklist) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputMessageForwarded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputMessageForwarded")
            put(key = "from_chat_id", long = dto.fromChatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "in_game_share", boolean = dto.inGameShare)
            put(key = "replace_video_start_timestamp", boolean = dto.replaceVideoStartTimestamp)
            put(key = "new_video_start_timestamp", int = dto.newVideoStartTimestamp)
            put(key = "copy_options", value = dto.copyOptions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageProperties): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageProperties")
            put(key = "can_add_tasks", boolean = dto.canAddTasks)
            put(key = "can_be_copied", boolean = dto.canBeCopied)
            put(key = "can_be_copied_to_secret_chat", boolean = dto.canBeCopiedToSecretChat)
            put(key = "can_be_deleted_only_for_self", boolean = dto.canBeDeletedOnlyForSelf)
            put(key = "can_be_deleted_for_all_users", boolean = dto.canBeDeletedForAllUsers)
            put(key = "can_be_edited", boolean = dto.canBeEdited)
            put(key = "can_be_forwarded", boolean = dto.canBeForwarded)
            put(key = "can_be_paid", boolean = dto.canBePaid)
            put(key = "can_be_pinned", boolean = dto.canBePinned)
            put(key = "can_be_replied", boolean = dto.canBeReplied)
            put(key = "can_be_replied_in_another_chat", boolean = dto.canBeRepliedInAnotherChat)
            put(key = "can_be_saved", boolean = dto.canBeSaved)
            put(key = "can_be_shared_in_story", boolean = dto.canBeSharedInStory)
            put(key = "can_edit_media", boolean = dto.canEditMedia)
            put(key = "can_edit_scheduling_state", boolean = dto.canEditSchedulingState)
            put(key = "can_get_author", boolean = dto.canGetAuthor)
            put(key = "can_get_embedding_code", boolean = dto.canGetEmbeddingCode)
            put(key = "can_get_link", boolean = dto.canGetLink)
            put(key = "can_get_media_timestamp_links", boolean = dto.canGetMediaTimestampLinks)
            put(key = "can_get_message_thread", boolean = dto.canGetMessageThread)
            put(key = "can_get_read_date", boolean = dto.canGetReadDate)
            put(key = "can_get_statistics", boolean = dto.canGetStatistics)
            put(key = "can_get_video_advertisements", boolean = dto.canGetVideoAdvertisements)
            put(key = "can_get_viewers", boolean = dto.canGetViewers)
            put(key = "can_mark_tasks_as_done", boolean = dto.canMarkTasksAsDone)
            put(key = "can_recognize_speech", boolean = dto.canRecognizeSpeech)
            put(key = "can_report_chat", boolean = dto.canReportChat)
            put(key = "can_report_reactions", boolean = dto.canReportReactions)
            put(key = "can_report_supergroup_spam", boolean = dto.canReportSupergroupSpam)
            put(key = "can_set_fact_check", boolean = dto.canSetFactCheck)
            put(key = "need_show_statistics", boolean = dto.needShowStatistics)
        }
    }

    private fun serialize(dto: SearchMessagesFilterEmpty): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterEmpty")
        }
    }

    private fun serialize(dto: SearchMessagesFilterAnimation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterAnimation")
        }
    }

    private fun serialize(dto: SearchMessagesFilterAudio): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterAudio")
        }
    }

    private fun serialize(dto: SearchMessagesFilterDocument): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterDocument")
        }
    }

    private fun serialize(dto: SearchMessagesFilterPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterPhoto")
        }
    }

    private fun serialize(dto: SearchMessagesFilterVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterVideo")
        }
    }

    private fun serialize(dto: SearchMessagesFilterVoiceNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterVoiceNote")
        }
    }

    private fun serialize(dto: SearchMessagesFilterPhotoAndVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterPhotoAndVideo")
        }
    }

    private fun serialize(dto: SearchMessagesFilterUrl): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterUrl")
        }
    }

    private fun serialize(dto: SearchMessagesFilterChatPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterChatPhoto")
        }
    }

    private fun serialize(dto: SearchMessagesFilterVideoNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterVideoNote")
        }
    }

    private fun serialize(dto: SearchMessagesFilterVoiceAndVideoNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterVoiceAndVideoNote")
        }
    }

    private fun serialize(dto: SearchMessagesFilterMention): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterMention")
        }
    }

    private fun serialize(dto: SearchMessagesFilterUnreadMention): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterUnreadMention")
        }
    }

    private fun serialize(dto: SearchMessagesFilterUnreadReaction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterUnreadReaction")
        }
    }

    private fun serialize(dto: SearchMessagesFilterFailedToSend): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterFailedToSend")
        }
    }

    private fun serialize(dto: SearchMessagesFilterPinned): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesFilterPinned")
        }
    }

    private fun serialize(dto: SearchMessagesChatTypeFilterPrivate): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesChatTypeFilterPrivate")
        }
    }

    private fun serialize(dto: SearchMessagesChatTypeFilterGroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesChatTypeFilterGroup")
        }
    }

    private fun serialize(dto: SearchMessagesChatTypeFilterChannel): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "searchMessagesChatTypeFilterChannel")
        }
    }

    private fun serialize(dto: ChatActionTyping): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionTyping")
        }
    }

    private fun serialize(dto: ChatActionRecordingVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionRecordingVideo")
        }
    }

    private fun serialize(dto: ChatActionUploadingVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionUploadingVideo")
            put(key = "progress", int = dto.progress)
        }
    }

    private fun serialize(dto: ChatActionRecordingVoiceNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionRecordingVoiceNote")
        }
    }

    private fun serialize(dto: ChatActionUploadingVoiceNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionUploadingVoiceNote")
            put(key = "progress", int = dto.progress)
        }
    }

    private fun serialize(dto: ChatActionUploadingPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionUploadingPhoto")
            put(key = "progress", int = dto.progress)
        }
    }

    private fun serialize(dto: ChatActionUploadingDocument): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionUploadingDocument")
            put(key = "progress", int = dto.progress)
        }
    }

    private fun serialize(dto: ChatActionChoosingSticker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionChoosingSticker")
        }
    }

    private fun serialize(dto: ChatActionChoosingLocation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionChoosingLocation")
        }
    }

    private fun serialize(dto: ChatActionChoosingContact): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionChoosingContact")
        }
    }

    private fun serialize(dto: ChatActionStartPlayingGame): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionStartPlayingGame")
        }
    }

    private fun serialize(dto: ChatActionRecordingVideoNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionRecordingVideoNote")
        }
    }

    private fun serialize(dto: ChatActionUploadingVideoNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionUploadingVideoNote")
            put(key = "progress", int = dto.progress)
        }
    }

    private fun serialize(dto: ChatActionWatchingAnimations): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionWatchingAnimations")
            put(key = "emoji", string = dto.emoji)
        }
    }

    private fun serialize(dto: ChatActionCancel): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActionCancel")
        }
    }

    private fun serialize(dto: UserStatusEmpty): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userStatusEmpty")
        }
    }

    private fun serialize(dto: UserStatusOnline): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userStatusOnline")
            put(key = "expires", int = dto.expires)
        }
    }

    private fun serialize(dto: UserStatusOffline): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userStatusOffline")
            put(key = "was_online", int = dto.wasOnline)
        }
    }

    private fun serialize(dto: UserStatusRecently): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userStatusRecently")
            put(key = "by_my_privacy_settings", boolean = dto.byMyPrivacySettings)
        }
    }

    private fun serialize(dto: UserStatusLastWeek): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userStatusLastWeek")
            put(key = "by_my_privacy_settings", boolean = dto.byMyPrivacySettings)
        }
    }

    private fun serialize(dto: UserStatusLastMonth): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userStatusLastMonth")
            put(key = "by_my_privacy_settings", boolean = dto.byMyPrivacySettings)
        }
    }

    private fun serialize(dto: EmojiKeyword): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiKeyword")
            put(key = "emoji", string = dto.emoji)
            put(key = "keyword", string = dto.keyword)
        }
    }

    private fun serialize(dto: EmojiKeywords): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiKeywords")
            put(key = "emoji_keywords", objects = dto.emojiKeywords) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Stickers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "stickers")
            put(key = "stickers", objects = dto.stickers) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Emojis): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojis")
            put(key = "emojis", strings = dto.emojis)
        }
    }

    private fun serialize(dto: StickerSet): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "stickerSet")
            put(key = "id", long = dto.id)
            put(key = "title", string = dto.title)
            put(key = "name", string = dto.name)
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "thumbnail_outline", value = dto.thumbnailOutline) { data -> serialize(dto = data) }
            put(key = "is_owned", boolean = dto.isOwned)
            put(key = "is_installed", boolean = dto.isInstalled)
            put(key = "is_archived", boolean = dto.isArchived)
            put(key = "is_official", boolean = dto.isOfficial)
            put(key = "sticker_type", value = dto.stickerType) { data -> serialize(dto = data) }
            put(key = "needs_repainting", boolean = dto.needsRepainting)
            put(key = "is_allowed_as_chat_emoji_status", boolean = dto.isAllowedAsChatEmojiStatus)
            put(key = "is_viewed", boolean = dto.isViewed)
            put(key = "stickers", objects = dto.stickers) { data -> serialize(dto = data) }
            put(key = "emojis", objects = dto.emojis) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StickerSetInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "stickerSetInfo")
            put(key = "id", long = dto.id)
            put(key = "title", string = dto.title)
            put(key = "name", string = dto.name)
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "thumbnail_outline", value = dto.thumbnailOutline) { data -> serialize(dto = data) }
            put(key = "is_owned", boolean = dto.isOwned)
            put(key = "is_installed", boolean = dto.isInstalled)
            put(key = "is_archived", boolean = dto.isArchived)
            put(key = "is_official", boolean = dto.isOfficial)
            put(key = "sticker_type", value = dto.stickerType) { data -> serialize(dto = data) }
            put(key = "needs_repainting", boolean = dto.needsRepainting)
            put(key = "is_allowed_as_chat_emoji_status", boolean = dto.isAllowedAsChatEmojiStatus)
            put(key = "is_viewed", boolean = dto.isViewed)
            put(key = "size", int = dto.size)
            put(key = "covers", objects = dto.covers) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StickerSets): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "stickerSets")
            put(key = "total_count", int = dto.totalCount)
            put(key = "sets", objects = dto.sets) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: TrendingStickerSets): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "trendingStickerSets")
            put(key = "total_count", int = dto.totalCount)
            put(key = "sets", objects = dto.sets) { data -> serialize(dto = data) }
            put(key = "is_premium", boolean = dto.isPremium)
        }
    }

    private fun serialize(dto: EmojiCategorySourceSearch): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiCategorySourceSearch")
            put(key = "emojis", strings = dto.emojis)
        }
    }

    private fun serialize(dto: EmojiCategorySourcePremium): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiCategorySourcePremium")
        }
    }

    private fun serialize(dto: EmojiCategory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiCategory")
            put(key = "name", string = dto.name)
            put(key = "icon", value = dto.icon) { data -> serialize(dto = data) }
            put(key = "source", value = dto.source) { data -> serialize(dto = data) }
            put(key = "is_greeting", boolean = dto.isGreeting)
        }
    }

    private fun serialize(dto: EmojiCategories): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiCategories")
            put(key = "categories", objects = dto.categories) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: EmojiCategoryTypeDefault): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiCategoryTypeDefault")
        }
    }

    private fun serialize(dto: EmojiCategoryTypeRegularStickers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiCategoryTypeRegularStickers")
        }
    }

    private fun serialize(dto: EmojiCategoryTypeEmojiStatus): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiCategoryTypeEmojiStatus")
        }
    }

    private fun serialize(dto: EmojiCategoryTypeChatPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiCategoryTypeChatPhoto")
        }
    }

    private fun serialize(dto: CurrentWeather): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "currentWeather")
            put(key = "temperature", double = dto.temperature)
            put(key = "emoji", string = dto.emoji)
        }
    }

    private fun serialize(dto: StoryAreaPosition): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyAreaPosition")
            put(key = "x_percentage", double = dto.xPercentage)
            put(key = "y_percentage", double = dto.yPercentage)
            put(key = "width_percentage", double = dto.widthPercentage)
            put(key = "height_percentage", double = dto.heightPercentage)
            put(key = "rotation_angle", double = dto.rotationAngle)
            put(key = "corner_radius_percentage", double = dto.cornerRadiusPercentage)
        }
    }

    private fun serialize(dto: StoryAreaTypeLocation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyAreaTypeLocation")
            put(key = "location", value = dto.location) { data -> serialize(dto = data) }
            put(key = "address", value = dto.address) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StoryAreaTypeVenue): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyAreaTypeVenue")
            put(key = "venue", value = dto.venue) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StoryAreaTypeSuggestedReaction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyAreaTypeSuggestedReaction")
            put(key = "reaction_type", value = dto.reactionType) { data -> serialize(dto = data) }
            put(key = "total_count", int = dto.totalCount)
            put(key = "is_dark", boolean = dto.isDark)
            put(key = "is_flipped", boolean = dto.isFlipped)
        }
    }

    private fun serialize(dto: StoryAreaTypeMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyAreaTypeMessage")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
        }
    }

    private fun serialize(dto: StoryAreaTypeLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyAreaTypeLink")
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: StoryAreaTypeWeather): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyAreaTypeWeather")
            put(key = "temperature", double = dto.temperature)
            put(key = "emoji", string = dto.emoji)
            put(key = "background_color", int = dto.backgroundColor)
        }
    }

    private fun serialize(dto: StoryAreaTypeUpgradedGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyAreaTypeUpgradedGift")
            put(key = "gift_name", string = dto.giftName)
        }
    }

    private fun serialize(dto: StoryArea): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyArea")
            put(key = "position", value = dto.position) { data -> serialize(dto = data) }
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputStoryAreaTypeLocation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputStoryAreaTypeLocation")
            put(key = "location", value = dto.location) { data -> serialize(dto = data) }
            put(key = "address", value = dto.address) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputStoryAreaTypeFoundVenue): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputStoryAreaTypeFoundVenue")
            put(key = "query_id", long = dto.queryId)
            put(key = "result_id", string = dto.resultId)
        }
    }

    private fun serialize(dto: InputStoryAreaTypePreviousVenue): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputStoryAreaTypePreviousVenue")
            put(key = "venue_provider", string = dto.venueProvider)
            put(key = "venue_id", string = dto.venueId)
        }
    }

    private fun serialize(dto: InputStoryAreaTypeSuggestedReaction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputStoryAreaTypeSuggestedReaction")
            put(key = "reaction_type", value = dto.reactionType) { data -> serialize(dto = data) }
            put(key = "is_dark", boolean = dto.isDark)
            put(key = "is_flipped", boolean = dto.isFlipped)
        }
    }

    private fun serialize(dto: InputStoryAreaTypeMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputStoryAreaTypeMessage")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
        }
    }

    private fun serialize(dto: InputStoryAreaTypeLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputStoryAreaTypeLink")
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: InputStoryAreaTypeWeather): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputStoryAreaTypeWeather")
            put(key = "temperature", double = dto.temperature)
            put(key = "emoji", string = dto.emoji)
            put(key = "background_color", int = dto.backgroundColor)
        }
    }

    private fun serialize(dto: InputStoryAreaTypeUpgradedGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputStoryAreaTypeUpgradedGift")
            put(key = "gift_name", string = dto.giftName)
        }
    }

    private fun serialize(dto: InputStoryArea): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputStoryArea")
            put(key = "position", value = dto.position) { data -> serialize(dto = data) }
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputStoryAreas): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputStoryAreas")
            put(key = "areas", objects = dto.areas) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StoryVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyVideo")
            put(key = "duration", double = dto.duration)
            put(key = "width", int = dto.width)
            put(key = "height", int = dto.height)
            put(key = "has_stickers", boolean = dto.hasStickers)
            put(key = "is_animation", boolean = dto.isAnimation)
            put(key = "minithumbnail", value = dto.minithumbnail) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
            put(key = "preload_prefix_size", int = dto.preloadPrefixSize)
            put(key = "cover_frame_timestamp", double = dto.coverFrameTimestamp)
            put(key = "video", value = dto.video) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StoryContentPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyContentPhoto")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StoryContentVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyContentVideo")
            put(key = "video", value = dto.video) { data -> serialize(dto = data) }
            put(key = "alternative_video", value = dto.alternativeVideo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StoryContentUnsupported): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyContentUnsupported")
        }
    }

    private fun serialize(dto: InputStoryContentPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputStoryContentPhoto")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "added_sticker_file_ids", ints = dto.addedStickerFileIds)
        }
    }

    private fun serialize(dto: InputStoryContentVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputStoryContentVideo")
            put(key = "video", value = dto.video) { data -> serialize(dto = data) }
            put(key = "added_sticker_file_ids", ints = dto.addedStickerFileIds)
            put(key = "duration", double = dto.duration)
            put(key = "cover_frame_timestamp", double = dto.coverFrameTimestamp)
            put(key = "is_animation", boolean = dto.isAnimation)
        }
    }

    private fun serialize(dto: StoryListMain): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyListMain")
        }
    }

    private fun serialize(dto: StoryListArchive): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyListArchive")
        }
    }

    private fun serialize(dto: StoryOriginPublicStory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyOriginPublicStory")
            put(key = "chat_id", long = dto.chatId)
            put(key = "story_id", int = dto.storyId)
        }
    }

    private fun serialize(dto: StoryOriginHiddenUser): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyOriginHiddenUser")
            put(key = "poster_name", string = dto.posterName)
        }
    }

    private fun serialize(dto: StoryRepostInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyRepostInfo")
            put(key = "origin", value = dto.origin) { data -> serialize(dto = data) }
            put(key = "is_content_modified", boolean = dto.isContentModified)
        }
    }

    private fun serialize(dto: StoryInteractionInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyInteractionInfo")
            put(key = "view_count", int = dto.viewCount)
            put(key = "forward_count", int = dto.forwardCount)
            put(key = "reaction_count", int = dto.reactionCount)
            put(key = "recent_viewer_user_ids", longs = dto.recentViewerUserIds)
        }
    }

    private fun serialize(dto: Story): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "story")
            put(key = "id", int = dto.id)
            put(key = "poster_chat_id", long = dto.posterChatId)
            put(key = "poster_id", value = dto.posterId) { data -> serialize(dto = data) }
            put(key = "date", int = dto.date)
            put(key = "is_being_posted", boolean = dto.isBeingPosted)
            put(key = "is_being_edited", boolean = dto.isBeingEdited)
            put(key = "is_edited", boolean = dto.isEdited)
            put(key = "is_posted_to_chat_page", boolean = dto.isPostedToChatPage)
            put(key = "is_visible_only_for_self", boolean = dto.isVisibleOnlyForSelf)
            put(key = "can_be_deleted", boolean = dto.canBeDeleted)
            put(key = "can_be_edited", boolean = dto.canBeEdited)
            put(key = "can_be_forwarded", boolean = dto.canBeForwarded)
            put(key = "can_be_replied", boolean = dto.canBeReplied)
            put(key = "can_toggle_is_posted_to_chat_page", boolean = dto.canToggleIsPostedToChatPage)
            put(key = "can_get_statistics", boolean = dto.canGetStatistics)
            put(key = "can_get_interactions", boolean = dto.canGetInteractions)
            put(key = "has_expired_viewers", boolean = dto.hasExpiredViewers)
            put(key = "repost_info", value = dto.repostInfo) { data -> serialize(dto = data) }
            put(key = "interaction_info", value = dto.interactionInfo) { data -> serialize(dto = data) }
            put(key = "chosen_reaction_type", value = dto.chosenReactionType) { data -> serialize(dto = data) }
            put(key = "privacy_settings", value = dto.privacySettings) { data -> serialize(dto = data) }
            put(key = "content", value = dto.content) { data -> serialize(dto = data) }
            put(key = "areas", objects = dto.areas) { data -> serialize(dto = data) }
            put(key = "caption", value = dto.caption) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Stories): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "stories")
            put(key = "total_count", int = dto.totalCount)
            put(key = "stories", objects = dto.stories) { data -> serialize(dto = data) }
            put(key = "pinned_story_ids", ints = dto.pinnedStoryIds)
        }
    }

    private fun serialize(dto: FoundStories): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "foundStories")
            put(key = "total_count", int = dto.totalCount)
            put(key = "stories", objects = dto.stories) { data -> serialize(dto = data) }
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: StoryFullId): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyFullId")
            put(key = "poster_chat_id", long = dto.posterChatId)
            put(key = "story_id", int = dto.storyId)
        }
    }

    private fun serialize(dto: StoryInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyInfo")
            put(key = "story_id", int = dto.storyId)
            put(key = "date", int = dto.date)
            put(key = "is_for_close_friends", boolean = dto.isForCloseFriends)
        }
    }

    private fun serialize(dto: ChatActiveStories): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatActiveStories")
            put(key = "chat_id", long = dto.chatId)
            put(key = "list", value = dto.list) { data -> serialize(dto = data) }
            put(key = "order", long = dto.order)
            put(key = "max_read_story_id", int = dto.maxReadStoryId)
            put(key = "stories", objects = dto.stories) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StoryInteractionTypeView): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyInteractionTypeView")
            put(key = "chosen_reaction_type", value = dto.chosenReactionType) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StoryInteractionTypeForward): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyInteractionTypeForward")
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StoryInteractionTypeRepost): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyInteractionTypeRepost")
            put(key = "story", value = dto.story) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StoryInteraction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyInteraction")
            put(key = "actor_id", value = dto.actorId) { data -> serialize(dto = data) }
            put(key = "interaction_date", int = dto.interactionDate)
            put(key = "block_list", value = dto.blockList) { data -> serialize(dto = data) }
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StoryInteractions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyInteractions")
            put(key = "total_count", int = dto.totalCount)
            put(key = "total_forward_count", int = dto.totalForwardCount)
            put(key = "total_reaction_count", int = dto.totalReactionCount)
            put(key = "interactions", objects = dto.interactions) { data -> serialize(dto = data) }
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: QuickReplyMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "quickReplyMessage")
            put(key = "id", long = dto.id)
            put(key = "sending_state", value = dto.sendingState) { data -> serialize(dto = data) }
            put(key = "can_be_edited", boolean = dto.canBeEdited)
            put(key = "reply_to_message_id", long = dto.replyToMessageId)
            put(key = "via_bot_user_id", long = dto.viaBotUserId)
            put(key = "media_album_id", long = dto.mediaAlbumId)
            put(key = "content", value = dto.content) { data -> serialize(dto = data) }
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: QuickReplyMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "quickReplyMessages")
            put(key = "messages", objects = dto.messages) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: QuickReplyShortcut): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "quickReplyShortcut")
            put(key = "id", int = dto.id)
            put(key = "name", string = dto.name)
            put(key = "first_message", value = dto.firstMessage) { data -> serialize(dto = data) }
            put(key = "message_count", int = dto.messageCount)
        }
    }

    private fun serialize(dto: PublicForwardMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "publicForwardMessage")
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PublicForwardStory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "publicForwardStory")
            put(key = "story", value = dto.story) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PublicForwards): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "publicForwards")
            put(key = "total_count", int = dto.totalCount)
            put(key = "forwards", objects = dto.forwards) { data -> serialize(dto = data) }
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: BotMediaPreview): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botMediaPreview")
            put(key = "date", int = dto.date)
            put(key = "content", value = dto.content) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BotMediaPreviews): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botMediaPreviews")
            put(key = "previews", objects = dto.previews) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BotMediaPreviewInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botMediaPreviewInfo")
            put(key = "previews", objects = dto.previews) { data -> serialize(dto = data) }
            put(key = "language_codes", strings = dto.languageCodes)
        }
    }

    private fun serialize(dto: ChatBoostLevelFeatures): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatBoostLevelFeatures")
            put(key = "level", int = dto.level)
            put(key = "story_per_day_count", int = dto.storyPerDayCount)
            put(key = "custom_emoji_reaction_count", int = dto.customEmojiReactionCount)
            put(key = "title_color_count", int = dto.titleColorCount)
            put(key = "profile_accent_color_count", int = dto.profileAccentColorCount)
            put(key = "can_set_profile_background_custom_emoji", boolean = dto.canSetProfileBackgroundCustomEmoji)
            put(key = "accent_color_count", int = dto.accentColorCount)
            put(key = "can_set_background_custom_emoji", boolean = dto.canSetBackgroundCustomEmoji)
            put(key = "can_set_emoji_status", boolean = dto.canSetEmojiStatus)
            put(key = "chat_theme_background_count", int = dto.chatThemeBackgroundCount)
            put(key = "can_set_custom_background", boolean = dto.canSetCustomBackground)
            put(key = "can_set_custom_emoji_sticker_set", boolean = dto.canSetCustomEmojiStickerSet)
            put(key = "can_enable_automatic_translation", boolean = dto.canEnableAutomaticTranslation)
            put(key = "can_recognize_speech", boolean = dto.canRecognizeSpeech)
            put(key = "can_disable_sponsored_messages", boolean = dto.canDisableSponsoredMessages)
        }
    }

    private fun serialize(dto: ChatBoostFeatures): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatBoostFeatures")
            put(key = "features", objects = dto.features) { data -> serialize(dto = data) }
            put(key = "min_profile_background_custom_emoji_boost_level", int = dto.minProfileBackgroundCustomEmojiBoostLevel)
            put(key = "min_background_custom_emoji_boost_level", int = dto.minBackgroundCustomEmojiBoostLevel)
            put(key = "min_emoji_status_boost_level", int = dto.minEmojiStatusBoostLevel)
            put(key = "min_chat_theme_background_boost_level", int = dto.minChatThemeBackgroundBoostLevel)
            put(key = "min_custom_background_boost_level", int = dto.minCustomBackgroundBoostLevel)
            put(key = "min_custom_emoji_sticker_set_boost_level", int = dto.minCustomEmojiStickerSetBoostLevel)
            put(key = "min_automatic_translation_boost_level", int = dto.minAutomaticTranslationBoostLevel)
            put(key = "min_speech_recognition_boost_level", int = dto.minSpeechRecognitionBoostLevel)
            put(key = "min_sponsored_message_disable_boost_level", int = dto.minSponsoredMessageDisableBoostLevel)
        }
    }

    private fun serialize(dto: ChatBoostSourceGiftCode): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatBoostSourceGiftCode")
            put(key = "user_id", long = dto.userId)
            put(key = "gift_code", string = dto.giftCode)
        }
    }

    private fun serialize(dto: ChatBoostSourceGiveaway): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatBoostSourceGiveaway")
            put(key = "user_id", long = dto.userId)
            put(key = "gift_code", string = dto.giftCode)
            put(key = "star_count", long = dto.starCount)
            put(key = "giveaway_message_id", long = dto.giveawayMessageId)
            put(key = "is_unclaimed", boolean = dto.isUnclaimed)
        }
    }

    private fun serialize(dto: ChatBoostSourcePremium): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatBoostSourcePremium")
            put(key = "user_id", long = dto.userId)
        }
    }

    private fun serialize(dto: PrepaidGiveaway): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "prepaidGiveaway")
            put(key = "id", long = dto.id)
            put(key = "winner_count", int = dto.winnerCount)
            put(key = "prize", value = dto.prize) { data -> serialize(dto = data) }
            put(key = "boost_count", int = dto.boostCount)
            put(key = "payment_date", int = dto.paymentDate)
        }
    }

    private fun serialize(dto: ChatBoostStatus): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatBoostStatus")
            put(key = "boost_url", string = dto.boostUrl)
            put(key = "applied_slot_ids", ints = dto.appliedSlotIds)
            put(key = "level", int = dto.level)
            put(key = "gift_code_boost_count", int = dto.giftCodeBoostCount)
            put(key = "boost_count", int = dto.boostCount)
            put(key = "current_level_boost_count", int = dto.currentLevelBoostCount)
            put(key = "next_level_boost_count", int = dto.nextLevelBoostCount)
            put(key = "premium_member_count", int = dto.premiumMemberCount)
            put(key = "premium_member_percentage", double = dto.premiumMemberPercentage)
            put(key = "prepaid_giveaways", objects = dto.prepaidGiveaways) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatBoost): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatBoost")
            put(key = "id", string = dto.id)
            put(key = "count", int = dto.count)
            put(key = "source", value = dto.source) { data -> serialize(dto = data) }
            put(key = "start_date", int = dto.startDate)
            put(key = "expiration_date", int = dto.expirationDate)
        }
    }

    private fun serialize(dto: FoundChatBoosts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "foundChatBoosts")
            put(key = "total_count", int = dto.totalCount)
            put(key = "boosts", objects = dto.boosts) { data -> serialize(dto = data) }
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: ChatBoostSlot): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatBoostSlot")
            put(key = "slot_id", int = dto.slotId)
            put(key = "currently_boosted_chat_id", long = dto.currentlyBoostedChatId)
            put(key = "start_date", int = dto.startDate)
            put(key = "expiration_date", int = dto.expirationDate)
            put(key = "cooldown_until_date", int = dto.cooldownUntilDate)
        }
    }

    private fun serialize(dto: ChatBoostSlots): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatBoostSlots")
            put(key = "slots", objects = dto.slots) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ResendCodeReasonUserRequest): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "resendCodeReasonUserRequest")
        }
    }

    private fun serialize(dto: ResendCodeReasonVerificationFailed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "resendCodeReasonVerificationFailed")
            put(key = "error_message", string = dto.errorMessage)
        }
    }

    private fun serialize(dto: CallDiscardReasonEmpty): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callDiscardReasonEmpty")
        }
    }

    private fun serialize(dto: CallDiscardReasonMissed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callDiscardReasonMissed")
        }
    }

    private fun serialize(dto: CallDiscardReasonDeclined): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callDiscardReasonDeclined")
        }
    }

    private fun serialize(dto: CallDiscardReasonDisconnected): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callDiscardReasonDisconnected")
        }
    }

    private fun serialize(dto: CallDiscardReasonHungUp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callDiscardReasonHungUp")
        }
    }

    private fun serialize(dto: CallDiscardReasonUpgradeToGroupCall): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callDiscardReasonUpgradeToGroupCall")
            put(key = "invite_link", string = dto.inviteLink)
        }
    }

    private fun serialize(dto: CallProtocol): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callProtocol")
            put(key = "udp_p2p", boolean = dto.udpP2p)
            put(key = "udp_reflector", boolean = dto.udpReflector)
            put(key = "min_layer", int = dto.minLayer)
            put(key = "max_layer", int = dto.maxLayer)
            put(key = "library_versions", strings = dto.libraryVersions)
        }
    }

    private fun serialize(dto: CallServerTypeTelegramReflector): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callServerTypeTelegramReflector")
            put(key = "peer_tag", bytes = dto.peerTag)
            put(key = "is_tcp", boolean = dto.isTcp)
        }
    }

    private fun serialize(dto: CallServerTypeWebrtc): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callServerTypeWebrtc")
            put(key = "username", string = dto.username)
            put(key = "password", string = dto.password)
            put(key = "supports_turn", boolean = dto.supportsTurn)
            put(key = "supports_stun", boolean = dto.supportsStun)
        }
    }

    private fun serialize(dto: CallServer): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callServer")
            put(key = "id", long = dto.id)
            put(key = "ip_address", string = dto.ipAddress)
            put(key = "ipv6_address", string = dto.ipv6Address)
            put(key = "port", int = dto.port)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: CallId): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callId")
            put(key = "id", int = dto.id)
        }
    }

    private fun serialize(dto: GroupCallId): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "groupCallId")
            put(key = "id", int = dto.id)
        }
    }

    private fun serialize(dto: CallStatePending): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callStatePending")
            put(key = "is_created", boolean = dto.isCreated)
            put(key = "is_received", boolean = dto.isReceived)
        }
    }

    private fun serialize(dto: CallStateExchangingKeys): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callStateExchangingKeys")
        }
    }

    private fun serialize(dto: CallStateReady): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callStateReady")
            put(key = "protocol", value = dto.protocol) { data -> serialize(dto = data) }
            put(key = "servers", objects = dto.servers) { data -> serialize(dto = data) }
            put(key = "config", string = dto.config)
            put(key = "encryption_key", bytes = dto.encryptionKey)
            put(key = "emojis", strings = dto.emojis)
            put(key = "allow_p2p", boolean = dto.allowP2p)
            put(key = "is_group_call_supported", boolean = dto.isGroupCallSupported)
            put(key = "custom_parameters", string = dto.customParameters)
        }
    }

    private fun serialize(dto: CallStateHangingUp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callStateHangingUp")
        }
    }

    private fun serialize(dto: CallStateDiscarded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callStateDiscarded")
            put(key = "reason", value = dto.reason) { data -> serialize(dto = data) }
            put(key = "need_rating", boolean = dto.needRating)
            put(key = "need_debug_information", boolean = dto.needDebugInformation)
            put(key = "need_log", boolean = dto.needLog)
        }
    }

    private fun serialize(dto: CallStateError): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callStateError")
            put(key = "error", value = dto.error) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: GroupCallJoinParameters): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "groupCallJoinParameters")
            put(key = "audio_source_id", int = dto.audioSourceId)
            put(key = "payload", string = dto.payload)
            put(key = "is_muted", boolean = dto.isMuted)
            put(key = "is_my_video_enabled", boolean = dto.isMyVideoEnabled)
        }
    }

    private fun serialize(dto: GroupCallVideoQualityThumbnail): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "groupCallVideoQualityThumbnail")
        }
    }

    private fun serialize(dto: GroupCallVideoQualityMedium): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "groupCallVideoQualityMedium")
        }
    }

    private fun serialize(dto: GroupCallVideoQualityFull): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "groupCallVideoQualityFull")
        }
    }

    private fun serialize(dto: VideoChatStream): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "videoChatStream")
            put(key = "channel_id", int = dto.channelId)
            put(key = "scale", int = dto.scale)
            put(key = "time_offset", long = dto.timeOffset)
        }
    }

    private fun serialize(dto: VideoChatStreams): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "videoChatStreams")
            put(key = "streams", objects = dto.streams) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: RtmpUrl): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "rtmpUrl")
            put(key = "url", string = dto.url)
            put(key = "stream_key", string = dto.streamKey)
        }
    }

    private fun serialize(dto: GroupCallRecentSpeaker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "groupCallRecentSpeaker")
            put(key = "participant_id", value = dto.participantId) { data -> serialize(dto = data) }
            put(key = "is_speaking", boolean = dto.isSpeaking)
        }
    }

    private fun serialize(dto: GroupCall): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "groupCall")
            put(key = "id", int = dto.id)
            put(key = "title", string = dto.title)
            put(key = "invite_link", string = dto.inviteLink)
            put(key = "scheduled_start_date", int = dto.scheduledStartDate)
            put(key = "enabled_start_notification", boolean = dto.enabledStartNotification)
            put(key = "is_active", boolean = dto.isActive)
            put(key = "is_video_chat", boolean = dto.isVideoChat)
            put(key = "is_rtmp_stream", boolean = dto.isRtmpStream)
            put(key = "is_joined", boolean = dto.isJoined)
            put(key = "need_rejoin", boolean = dto.needRejoin)
            put(key = "is_owned", boolean = dto.isOwned)
            put(key = "can_be_managed", boolean = dto.canBeManaged)
            put(key = "participant_count", int = dto.participantCount)
            put(key = "has_hidden_listeners", boolean = dto.hasHiddenListeners)
            put(key = "loaded_all_participants", boolean = dto.loadedAllParticipants)
            put(key = "recent_speakers", objects = dto.recentSpeakers) { data -> serialize(dto = data) }
            put(key = "is_my_video_enabled", boolean = dto.isMyVideoEnabled)
            put(key = "is_my_video_paused", boolean = dto.isMyVideoPaused)
            put(key = "can_enable_video", boolean = dto.canEnableVideo)
            put(key = "mute_new_participants", boolean = dto.muteNewParticipants)
            put(key = "can_toggle_mute_new_participants", boolean = dto.canToggleMuteNewParticipants)
            put(key = "record_duration", int = dto.recordDuration)
            put(key = "is_video_recorded", boolean = dto.isVideoRecorded)
            put(key = "duration", int = dto.duration)
        }
    }

    private fun serialize(dto: GroupCallVideoSourceGroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "groupCallVideoSourceGroup")
            put(key = "semantics", string = dto.semantics)
            put(key = "source_ids", ints = dto.sourceIds)
        }
    }

    private fun serialize(dto: GroupCallParticipantVideoInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "groupCallParticipantVideoInfo")
            put(key = "source_groups", objects = dto.sourceGroups) { data -> serialize(dto = data) }
            put(key = "endpoint_id", string = dto.endpointId)
            put(key = "is_paused", boolean = dto.isPaused)
        }
    }

    private fun serialize(dto: GroupCallParticipant): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "groupCallParticipant")
            put(key = "participant_id", value = dto.participantId) { data -> serialize(dto = data) }
            put(key = "audio_source_id", int = dto.audioSourceId)
            put(key = "screen_sharing_audio_source_id", int = dto.screenSharingAudioSourceId)
            put(key = "video_info", value = dto.videoInfo) { data -> serialize(dto = data) }
            put(key = "screen_sharing_video_info", value = dto.screenSharingVideoInfo) { data -> serialize(dto = data) }
            put(key = "bio", string = dto.bio)
            put(key = "is_current_user", boolean = dto.isCurrentUser)
            put(key = "is_speaking", boolean = dto.isSpeaking)
            put(key = "is_hand_raised", boolean = dto.isHandRaised)
            put(key = "can_be_muted_for_all_users", boolean = dto.canBeMutedForAllUsers)
            put(key = "can_be_unmuted_for_all_users", boolean = dto.canBeUnmutedForAllUsers)
            put(key = "can_be_muted_for_current_user", boolean = dto.canBeMutedForCurrentUser)
            put(key = "can_be_unmuted_for_current_user", boolean = dto.canBeUnmutedForCurrentUser)
            put(key = "is_muted_for_all_users", boolean = dto.isMutedForAllUsers)
            put(key = "is_muted_for_current_user", boolean = dto.isMutedForCurrentUser)
            put(key = "can_unmute_self", boolean = dto.canUnmuteSelf)
            put(key = "volume_level", int = dto.volumeLevel)
            put(key = "order", string = dto.order)
        }
    }

    private fun serialize(dto: GroupCallParticipants): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "groupCallParticipants")
            put(key = "total_count", int = dto.totalCount)
            put(key = "participant_ids", objects = dto.participantIds) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: GroupCallInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "groupCallInfo")
            put(key = "group_call_id", int = dto.groupCallId)
            put(key = "join_payload", string = dto.joinPayload)
        }
    }

    private fun serialize(dto: InviteGroupCallParticipantResultUserPrivacyRestricted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inviteGroupCallParticipantResultUserPrivacyRestricted")
        }
    }

    private fun serialize(dto: InviteGroupCallParticipantResultUserAlreadyParticipant): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inviteGroupCallParticipantResultUserAlreadyParticipant")
        }
    }

    private fun serialize(dto: InviteGroupCallParticipantResultUserWasBanned): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inviteGroupCallParticipantResultUserWasBanned")
        }
    }

    private fun serialize(dto: InviteGroupCallParticipantResultSuccess): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inviteGroupCallParticipantResultSuccess")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
        }
    }

    private fun serialize(dto: GroupCallDataChannelMain): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "groupCallDataChannelMain")
        }
    }

    private fun serialize(dto: GroupCallDataChannelScreenSharing): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "groupCallDataChannelScreenSharing")
        }
    }

    private fun serialize(dto: InputGroupCallLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputGroupCallLink")
            put(key = "link", string = dto.link)
        }
    }

    private fun serialize(dto: InputGroupCallMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputGroupCallMessage")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
        }
    }

    private fun serialize(dto: CallProblemEcho): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callProblemEcho")
        }
    }

    private fun serialize(dto: CallProblemNoise): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callProblemNoise")
        }
    }

    private fun serialize(dto: CallProblemInterruptions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callProblemInterruptions")
        }
    }

    private fun serialize(dto: CallProblemDistortedSpeech): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callProblemDistortedSpeech")
        }
    }

    private fun serialize(dto: CallProblemSilentLocal): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callProblemSilentLocal")
        }
    }

    private fun serialize(dto: CallProblemSilentRemote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callProblemSilentRemote")
        }
    }

    private fun serialize(dto: CallProblemDropped): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callProblemDropped")
        }
    }

    private fun serialize(dto: CallProblemDistortedVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callProblemDistortedVideo")
        }
    }

    private fun serialize(dto: CallProblemPixelatedVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callProblemPixelatedVideo")
        }
    }

    private fun serialize(dto: Call): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "call")
            put(key = "id", int = dto.id)
            put(key = "user_id", long = dto.userId)
            put(key = "is_outgoing", boolean = dto.isOutgoing)
            put(key = "is_video", boolean = dto.isVideo)
            put(key = "state", value = dto.state) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: FirebaseAuthenticationSettingsAndroid): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "firebaseAuthenticationSettingsAndroid")
        }
    }

    private fun serialize(dto: FirebaseAuthenticationSettingsIos): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "firebaseAuthenticationSettingsIos")
            put(key = "device_token", string = dto.deviceToken)
            put(key = "is_app_sandbox", boolean = dto.isAppSandbox)
        }
    }

    private fun serialize(dto: PhoneNumberAuthenticationSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "phoneNumberAuthenticationSettings")
            put(key = "allow_flash_call", boolean = dto.allowFlashCall)
            put(key = "allow_missed_call", boolean = dto.allowMissedCall)
            put(key = "is_current_phone_number", boolean = dto.isCurrentPhoneNumber)
            put(key = "has_unknown_phone_number", boolean = dto.hasUnknownPhoneNumber)
            put(key = "allow_sms_retriever_api", boolean = dto.allowSmsRetrieverApi)
            put(key = "firebase_authentication_settings", value = dto.firebaseAuthenticationSettings) { data -> serialize(dto = data) }
            put(key = "authentication_tokens", strings = dto.authenticationTokens)
        }
    }

    private fun serialize(dto: AddedReaction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "addedReaction")
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "sender_id", value = dto.senderId) { data -> serialize(dto = data) }
            put(key = "is_outgoing", boolean = dto.isOutgoing)
            put(key = "date", int = dto.date)
        }
    }

    private fun serialize(dto: AddedReactions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "addedReactions")
            put(key = "total_count", int = dto.totalCount)
            put(key = "reactions", objects = dto.reactions) { data -> serialize(dto = data) }
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: AvailableReaction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "availableReaction")
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "needs_premium", boolean = dto.needsPremium)
        }
    }

    private fun serialize(dto: AvailableReactions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "availableReactions")
            put(key = "top_reactions", objects = dto.topReactions) { data -> serialize(dto = data) }
            put(key = "recent_reactions", objects = dto.recentReactions) { data -> serialize(dto = data) }
            put(key = "popular_reactions", objects = dto.popularReactions) { data -> serialize(dto = data) }
            put(key = "allow_custom_emoji", boolean = dto.allowCustomEmoji)
            put(key = "are_tags", boolean = dto.areTags)
            put(key = "unavailability_reason", value = dto.unavailabilityReason) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: EmojiReaction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "emojiReaction")
            put(key = "emoji", string = dto.emoji)
            put(key = "title", string = dto.title)
            put(key = "is_active", boolean = dto.isActive)
            put(key = "static_icon", value = dto.staticIcon) { data -> serialize(dto = data) }
            put(key = "appear_animation", value = dto.appearAnimation) { data -> serialize(dto = data) }
            put(key = "select_animation", value = dto.selectAnimation) { data -> serialize(dto = data) }
            put(key = "activate_animation", value = dto.activateAnimation) { data -> serialize(dto = data) }
            put(key = "effect_animation", value = dto.effectAnimation) { data -> serialize(dto = data) }
            put(key = "around_animation", value = dto.aroundAnimation) { data -> serialize(dto = data) }
            put(key = "center_animation", value = dto.centerAnimation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ReactionUnavailabilityReasonAnonymousAdministrator): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reactionUnavailabilityReasonAnonymousAdministrator")
        }
    }

    private fun serialize(dto: ReactionUnavailabilityReasonGuest): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reactionUnavailabilityReasonGuest")
        }
    }

    private fun serialize(dto: Animations): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "animations")
            put(key = "animations", objects = dto.animations) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: DiceStickersRegular): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "diceStickersRegular")
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: DiceStickersSlotMachine): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "diceStickersSlotMachine")
            put(key = "background", value = dto.background) { data -> serialize(dto = data) }
            put(key = "lever", value = dto.lever) { data -> serialize(dto = data) }
            put(key = "left_reel", value = dto.leftReel) { data -> serialize(dto = data) }
            put(key = "center_reel", value = dto.centerReel) { data -> serialize(dto = data) }
            put(key = "right_reel", value = dto.rightReel) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ImportedContacts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "importedContacts")
            put(key = "user_ids", longs = dto.userIds)
            put(key = "importer_count", ints = dto.importerCount)
        }
    }

    private fun serialize(dto: SpeechRecognitionResultPending): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "speechRecognitionResultPending")
            put(key = "partial_text", string = dto.partialText)
        }
    }

    private fun serialize(dto: SpeechRecognitionResultText): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "speechRecognitionResultText")
            put(key = "text", string = dto.text)
        }
    }

    private fun serialize(dto: SpeechRecognitionResultError): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "speechRecognitionResultError")
            put(key = "error", value = dto.error) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BusinessConnection): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessConnection")
            put(key = "id", string = dto.id)
            put(key = "user_id", long = dto.userId)
            put(key = "user_chat_id", long = dto.userChatId)
            put(key = "date", int = dto.date)
            put(key = "rights", value = dto.rights) { data -> serialize(dto = data) }
            put(key = "is_enabled", boolean = dto.isEnabled)
        }
    }

    private fun serialize(dto: AttachmentMenuBotColor): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "attachmentMenuBotColor")
            put(key = "light_color", int = dto.lightColor)
            put(key = "dark_color", int = dto.darkColor)
        }
    }

    private fun serialize(dto: AttachmentMenuBot): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "attachmentMenuBot")
            put(key = "bot_user_id", long = dto.botUserId)
            put(key = "supports_self_chat", boolean = dto.supportsSelfChat)
            put(key = "supports_user_chats", boolean = dto.supportsUserChats)
            put(key = "supports_bot_chats", boolean = dto.supportsBotChats)
            put(key = "supports_group_chats", boolean = dto.supportsGroupChats)
            put(key = "supports_channel_chats", boolean = dto.supportsChannelChats)
            put(key = "request_write_access", boolean = dto.requestWriteAccess)
            put(key = "is_added", boolean = dto.isAdded)
            put(key = "show_in_attachment_menu", boolean = dto.showInAttachmentMenu)
            put(key = "show_in_side_menu", boolean = dto.showInSideMenu)
            put(key = "show_disclaimer_in_side_menu", boolean = dto.showDisclaimerInSideMenu)
            put(key = "name", string = dto.name)
            put(key = "name_color", value = dto.nameColor) { data -> serialize(dto = data) }
            put(key = "default_icon", value = dto.defaultIcon) { data -> serialize(dto = data) }
            put(key = "ios_static_icon", value = dto.iosStaticIcon) { data -> serialize(dto = data) }
            put(key = "ios_animated_icon", value = dto.iosAnimatedIcon) { data -> serialize(dto = data) }
            put(key = "ios_side_menu_icon", value = dto.iosSideMenuIcon) { data -> serialize(dto = data) }
            put(key = "android_icon", value = dto.androidIcon) { data -> serialize(dto = data) }
            put(key = "android_side_menu_icon", value = dto.androidSideMenuIcon) { data -> serialize(dto = data) }
            put(key = "macos_icon", value = dto.macosIcon) { data -> serialize(dto = data) }
            put(key = "macos_side_menu_icon", value = dto.macosSideMenuIcon) { data -> serialize(dto = data) }
            put(key = "icon_color", value = dto.iconColor) { data -> serialize(dto = data) }
            put(key = "web_app_placeholder", value = dto.webAppPlaceholder) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: SentWebAppMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sentWebAppMessage")
            put(key = "inline_message_id", string = dto.inlineMessageId)
        }
    }

    private fun serialize(dto: BotWriteAccessAllowReasonConnectedWebsite): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botWriteAccessAllowReasonConnectedWebsite")
            put(key = "domain_name", string = dto.domainName)
        }
    }

    private fun serialize(dto: BotWriteAccessAllowReasonAddedToAttachmentMenu): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botWriteAccessAllowReasonAddedToAttachmentMenu")
        }
    }

    private fun serialize(dto: BotWriteAccessAllowReasonLaunchedWebApp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botWriteAccessAllowReasonLaunchedWebApp")
            put(key = "web_app", value = dto.webApp) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BotWriteAccessAllowReasonAcceptedRequest): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botWriteAccessAllowReasonAcceptedRequest")
        }
    }

    private fun serialize(dto: HttpUrl): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "httpUrl")
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: UserLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userLink")
            put(key = "url", string = dto.url)
            put(key = "expires_in", int = dto.expiresIn)
        }
    }

    private fun serialize(dto: TargetChatTypes): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "targetChatTypes")
            put(key = "allow_user_chats", boolean = dto.allowUserChats)
            put(key = "allow_bot_chats", boolean = dto.allowBotChats)
            put(key = "allow_group_chats", boolean = dto.allowGroupChats)
            put(key = "allow_channel_chats", boolean = dto.allowChannelChats)
        }
    }

    private fun serialize(dto: TargetChatCurrent): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "targetChatCurrent")
        }
    }

    private fun serialize(dto: TargetChatChosen): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "targetChatChosen")
            put(key = "types", value = dto.types) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: TargetChatInternalLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "targetChatInternalLink")
            put(key = "link", value = dto.link) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputInlineQueryResultAnimation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInlineQueryResultAnimation")
            put(key = "id", string = dto.id)
            put(key = "title", string = dto.title)
            put(key = "thumbnail_url", string = dto.thumbnailUrl)
            put(key = "thumbnail_mime_type", string = dto.thumbnailMimeType)
            put(key = "video_url", string = dto.videoUrl)
            put(key = "video_mime_type", string = dto.videoMimeType)
            put(key = "video_duration", int = dto.videoDuration)
            put(key = "video_width", int = dto.videoWidth)
            put(key = "video_height", int = dto.videoHeight)
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = dto.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputInlineQueryResultArticle): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInlineQueryResultArticle")
            put(key = "id", string = dto.id)
            put(key = "url", string = dto.url)
            put(key = "title", string = dto.title)
            put(key = "description", string = dto.description)
            put(key = "thumbnail_url", string = dto.thumbnailUrl)
            put(key = "thumbnail_width", int = dto.thumbnailWidth)
            put(key = "thumbnail_height", int = dto.thumbnailHeight)
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = dto.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputInlineQueryResultAudio): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInlineQueryResultAudio")
            put(key = "id", string = dto.id)
            put(key = "title", string = dto.title)
            put(key = "performer", string = dto.performer)
            put(key = "audio_url", string = dto.audioUrl)
            put(key = "audio_duration", int = dto.audioDuration)
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = dto.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputInlineQueryResultContact): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInlineQueryResultContact")
            put(key = "id", string = dto.id)
            put(key = "contact", value = dto.contact) { data -> serialize(dto = data) }
            put(key = "thumbnail_url", string = dto.thumbnailUrl)
            put(key = "thumbnail_width", int = dto.thumbnailWidth)
            put(key = "thumbnail_height", int = dto.thumbnailHeight)
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = dto.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputInlineQueryResultDocument): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInlineQueryResultDocument")
            put(key = "id", string = dto.id)
            put(key = "title", string = dto.title)
            put(key = "description", string = dto.description)
            put(key = "document_url", string = dto.documentUrl)
            put(key = "mime_type", string = dto.mimeType)
            put(key = "thumbnail_url", string = dto.thumbnailUrl)
            put(key = "thumbnail_width", int = dto.thumbnailWidth)
            put(key = "thumbnail_height", int = dto.thumbnailHeight)
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = dto.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputInlineQueryResultGame): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInlineQueryResultGame")
            put(key = "id", string = dto.id)
            put(key = "game_short_name", string = dto.gameShortName)
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputInlineQueryResultLocation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInlineQueryResultLocation")
            put(key = "id", string = dto.id)
            put(key = "location", value = dto.location) { data -> serialize(dto = data) }
            put(key = "live_period", int = dto.livePeriod)
            put(key = "title", string = dto.title)
            put(key = "thumbnail_url", string = dto.thumbnailUrl)
            put(key = "thumbnail_width", int = dto.thumbnailWidth)
            put(key = "thumbnail_height", int = dto.thumbnailHeight)
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = dto.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputInlineQueryResultPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInlineQueryResultPhoto")
            put(key = "id", string = dto.id)
            put(key = "title", string = dto.title)
            put(key = "description", string = dto.description)
            put(key = "thumbnail_url", string = dto.thumbnailUrl)
            put(key = "photo_url", string = dto.photoUrl)
            put(key = "photo_width", int = dto.photoWidth)
            put(key = "photo_height", int = dto.photoHeight)
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = dto.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputInlineQueryResultSticker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInlineQueryResultSticker")
            put(key = "id", string = dto.id)
            put(key = "thumbnail_url", string = dto.thumbnailUrl)
            put(key = "sticker_url", string = dto.stickerUrl)
            put(key = "sticker_width", int = dto.stickerWidth)
            put(key = "sticker_height", int = dto.stickerHeight)
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = dto.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputInlineQueryResultVenue): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInlineQueryResultVenue")
            put(key = "id", string = dto.id)
            put(key = "venue", value = dto.venue) { data -> serialize(dto = data) }
            put(key = "thumbnail_url", string = dto.thumbnailUrl)
            put(key = "thumbnail_width", int = dto.thumbnailWidth)
            put(key = "thumbnail_height", int = dto.thumbnailHeight)
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = dto.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputInlineQueryResultVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInlineQueryResultVideo")
            put(key = "id", string = dto.id)
            put(key = "title", string = dto.title)
            put(key = "description", string = dto.description)
            put(key = "thumbnail_url", string = dto.thumbnailUrl)
            put(key = "video_url", string = dto.videoUrl)
            put(key = "mime_type", string = dto.mimeType)
            put(key = "video_width", int = dto.videoWidth)
            put(key = "video_height", int = dto.videoHeight)
            put(key = "video_duration", int = dto.videoDuration)
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = dto.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputInlineQueryResultVoiceNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputInlineQueryResultVoiceNote")
            put(key = "id", string = dto.id)
            put(key = "title", string = dto.title)
            put(key = "voice_note_url", string = dto.voiceNoteUrl)
            put(key = "voice_note_duration", int = dto.voiceNoteDuration)
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
            put(key = "input_message_content", value = dto.inputMessageContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InlineQueryResultArticle): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultArticle")
            put(key = "id", string = dto.id)
            put(key = "url", string = dto.url)
            put(key = "title", string = dto.title)
            put(key = "description", string = dto.description)
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InlineQueryResultContact): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultContact")
            put(key = "id", string = dto.id)
            put(key = "contact", value = dto.contact) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InlineQueryResultLocation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultLocation")
            put(key = "id", string = dto.id)
            put(key = "location", value = dto.location) { data -> serialize(dto = data) }
            put(key = "title", string = dto.title)
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InlineQueryResultVenue): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultVenue")
            put(key = "id", string = dto.id)
            put(key = "venue", value = dto.venue) { data -> serialize(dto = data) }
            put(key = "thumbnail", value = dto.thumbnail) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InlineQueryResultGame): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultGame")
            put(key = "id", string = dto.id)
            put(key = "game", value = dto.game) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InlineQueryResultAnimation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultAnimation")
            put(key = "id", string = dto.id)
            put(key = "animation", value = dto.animation) { data -> serialize(dto = data) }
            put(key = "title", string = dto.title)
        }
    }

    private fun serialize(dto: InlineQueryResultAudio): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultAudio")
            put(key = "id", string = dto.id)
            put(key = "audio", value = dto.audio) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InlineQueryResultDocument): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultDocument")
            put(key = "id", string = dto.id)
            put(key = "document", value = dto.document) { data -> serialize(dto = data) }
            put(key = "title", string = dto.title)
            put(key = "description", string = dto.description)
        }
    }

    private fun serialize(dto: InlineQueryResultPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultPhoto")
            put(key = "id", string = dto.id)
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "title", string = dto.title)
            put(key = "description", string = dto.description)
        }
    }

    private fun serialize(dto: InlineQueryResultSticker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultSticker")
            put(key = "id", string = dto.id)
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InlineQueryResultVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultVideo")
            put(key = "id", string = dto.id)
            put(key = "video", value = dto.video) { data -> serialize(dto = data) }
            put(key = "title", string = dto.title)
            put(key = "description", string = dto.description)
        }
    }

    private fun serialize(dto: InlineQueryResultVoiceNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultVoiceNote")
            put(key = "id", string = dto.id)
            put(key = "voice_note", value = dto.voiceNote) { data -> serialize(dto = data) }
            put(key = "title", string = dto.title)
        }
    }

    private fun serialize(dto: InlineQueryResultsButtonTypeStartBot): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultsButtonTypeStartBot")
            put(key = "parameter", string = dto.parameter)
        }
    }

    private fun serialize(dto: InlineQueryResultsButtonTypeWebApp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultsButtonTypeWebApp")
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: InlineQueryResultsButton): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResultsButton")
            put(key = "text", string = dto.text)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InlineQueryResults): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inlineQueryResults")
            put(key = "inline_query_id", long = dto.inlineQueryId)
            put(key = "button", value = dto.button) { data -> serialize(dto = data) }
            put(key = "results", objects = dto.results) { data -> serialize(dto = data) }
            put(key = "next_offset", string = dto.nextOffset)
        }
    }

    private fun serialize(dto: PreparedInlineMessageId): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "preparedInlineMessageId")
            put(key = "id", string = dto.id)
            put(key = "expiration_date", int = dto.expirationDate)
        }
    }

    private fun serialize(dto: PreparedInlineMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "preparedInlineMessage")
            put(key = "inline_query_id", long = dto.inlineQueryId)
            put(key = "result", value = dto.result) { data -> serialize(dto = data) }
            put(key = "chat_types", value = dto.chatTypes) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: CallbackQueryPayloadData): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callbackQueryPayloadData")
            put(key = "data", bytes = dto.data)
        }
    }

    private fun serialize(dto: CallbackQueryPayloadDataWithPassword): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callbackQueryPayloadDataWithPassword")
            put(key = "password", string = dto.password)
            put(key = "data", bytes = dto.data)
        }
    }

    private fun serialize(dto: CallbackQueryPayloadGame): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callbackQueryPayloadGame")
            put(key = "game_short_name", string = dto.gameShortName)
        }
    }

    private fun serialize(dto: CallbackQueryAnswer): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "callbackQueryAnswer")
            put(key = "text", string = dto.text)
            put(key = "show_alert", boolean = dto.showAlert)
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: CustomRequestResult): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "customRequestResult")
            put(key = "result", string = dto.result)
        }
    }

    private fun serialize(dto: GameHighScore): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "gameHighScore")
            put(key = "position", int = dto.position)
            put(key = "user_id", long = dto.userId)
            put(key = "score", int = dto.score)
        }
    }

    private fun serialize(dto: GameHighScores): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "gameHighScores")
            put(key = "scores", objects = dto.scores) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventMessageEdited): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventMessageEdited")
            put(key = "old_message", value = dto.oldMessage) { data -> serialize(dto = data) }
            put(key = "new_message", value = dto.newMessage) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventMessageDeleted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventMessageDeleted")
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
            put(key = "can_report_anti_spam_false_positive", boolean = dto.canReportAntiSpamFalsePositive)
        }
    }

    private fun serialize(dto: ChatEventMessagePinned): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventMessagePinned")
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventMessageUnpinned): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventMessageUnpinned")
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventPollStopped): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventPollStopped")
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventMemberJoined): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventMemberJoined")
        }
    }

    private fun serialize(dto: ChatEventMemberJoinedByInviteLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventMemberJoinedByInviteLink")
            put(key = "invite_link", value = dto.inviteLink) { data -> serialize(dto = data) }
            put(key = "via_chat_folder_invite_link", boolean = dto.viaChatFolderInviteLink)
        }
    }

    private fun serialize(dto: ChatEventMemberJoinedByRequest): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventMemberJoinedByRequest")
            put(key = "approver_user_id", long = dto.approverUserId)
            put(key = "invite_link", value = dto.inviteLink) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventMemberInvited): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventMemberInvited")
            put(key = "user_id", long = dto.userId)
            put(key = "status", value = dto.status) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventMemberLeft): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventMemberLeft")
        }
    }

    private fun serialize(dto: ChatEventMemberPromoted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventMemberPromoted")
            put(key = "user_id", long = dto.userId)
            put(key = "old_status", value = dto.oldStatus) { data -> serialize(dto = data) }
            put(key = "new_status", value = dto.newStatus) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventMemberRestricted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventMemberRestricted")
            put(key = "member_id", value = dto.memberId) { data -> serialize(dto = data) }
            put(key = "old_status", value = dto.oldStatus) { data -> serialize(dto = data) }
            put(key = "new_status", value = dto.newStatus) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventMemberSubscriptionExtended): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventMemberSubscriptionExtended")
            put(key = "user_id", long = dto.userId)
            put(key = "old_status", value = dto.oldStatus) { data -> serialize(dto = data) }
            put(key = "new_status", value = dto.newStatus) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventAvailableReactionsChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventAvailableReactionsChanged")
            put(key = "old_available_reactions", value = dto.oldAvailableReactions) { data -> serialize(dto = data) }
            put(key = "new_available_reactions", value = dto.newAvailableReactions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventBackgroundChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventBackgroundChanged")
            put(key = "old_background", value = dto.oldBackground) { data -> serialize(dto = data) }
            put(key = "new_background", value = dto.newBackground) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventDescriptionChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventDescriptionChanged")
            put(key = "old_description", string = dto.oldDescription)
            put(key = "new_description", string = dto.newDescription)
        }
    }

    private fun serialize(dto: ChatEventEmojiStatusChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventEmojiStatusChanged")
            put(key = "old_emoji_status", value = dto.oldEmojiStatus) { data -> serialize(dto = data) }
            put(key = "new_emoji_status", value = dto.newEmojiStatus) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventLinkedChatChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventLinkedChatChanged")
            put(key = "old_linked_chat_id", long = dto.oldLinkedChatId)
            put(key = "new_linked_chat_id", long = dto.newLinkedChatId)
        }
    }

    private fun serialize(dto: ChatEventLocationChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventLocationChanged")
            put(key = "old_location", value = dto.oldLocation) { data -> serialize(dto = data) }
            put(key = "new_location", value = dto.newLocation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventMessageAutoDeleteTimeChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventMessageAutoDeleteTimeChanged")
            put(key = "old_message_auto_delete_time", int = dto.oldMessageAutoDeleteTime)
            put(key = "new_message_auto_delete_time", int = dto.newMessageAutoDeleteTime)
        }
    }

    private fun serialize(dto: ChatEventPermissionsChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventPermissionsChanged")
            put(key = "old_permissions", value = dto.oldPermissions) { data -> serialize(dto = data) }
            put(key = "new_permissions", value = dto.newPermissions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventPhotoChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventPhotoChanged")
            put(key = "old_photo", value = dto.oldPhoto) { data -> serialize(dto = data) }
            put(key = "new_photo", value = dto.newPhoto) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventSlowModeDelayChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventSlowModeDelayChanged")
            put(key = "old_slow_mode_delay", int = dto.oldSlowModeDelay)
            put(key = "new_slow_mode_delay", int = dto.newSlowModeDelay)
        }
    }

    private fun serialize(dto: ChatEventStickerSetChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventStickerSetChanged")
            put(key = "old_sticker_set_id", long = dto.oldStickerSetId)
            put(key = "new_sticker_set_id", long = dto.newStickerSetId)
        }
    }

    private fun serialize(dto: ChatEventCustomEmojiStickerSetChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventCustomEmojiStickerSetChanged")
            put(key = "old_sticker_set_id", long = dto.oldStickerSetId)
            put(key = "new_sticker_set_id", long = dto.newStickerSetId)
        }
    }

    private fun serialize(dto: ChatEventTitleChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventTitleChanged")
            put(key = "old_title", string = dto.oldTitle)
            put(key = "new_title", string = dto.newTitle)
        }
    }

    private fun serialize(dto: ChatEventUsernameChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventUsernameChanged")
            put(key = "old_username", string = dto.oldUsername)
            put(key = "new_username", string = dto.newUsername)
        }
    }

    private fun serialize(dto: ChatEventActiveUsernamesChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventActiveUsernamesChanged")
            put(key = "old_usernames", strings = dto.oldUsernames)
            put(key = "new_usernames", strings = dto.newUsernames)
        }
    }

    private fun serialize(dto: ChatEventAccentColorChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventAccentColorChanged")
            put(key = "old_accent_color_id", int = dto.oldAccentColorId)
            put(key = "old_background_custom_emoji_id", long = dto.oldBackgroundCustomEmojiId)
            put(key = "new_accent_color_id", int = dto.newAccentColorId)
            put(key = "new_background_custom_emoji_id", long = dto.newBackgroundCustomEmojiId)
        }
    }

    private fun serialize(dto: ChatEventProfileAccentColorChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventProfileAccentColorChanged")
            put(key = "old_profile_accent_color_id", int = dto.oldProfileAccentColorId)
            put(key = "old_profile_background_custom_emoji_id", long = dto.oldProfileBackgroundCustomEmojiId)
            put(key = "new_profile_accent_color_id", int = dto.newProfileAccentColorId)
            put(key = "new_profile_background_custom_emoji_id", long = dto.newProfileBackgroundCustomEmojiId)
        }
    }

    private fun serialize(dto: ChatEventHasProtectedContentToggled): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventHasProtectedContentToggled")
            put(key = "has_protected_content", boolean = dto.hasProtectedContent)
        }
    }

    private fun serialize(dto: ChatEventInvitesToggled): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventInvitesToggled")
            put(key = "can_invite_users", boolean = dto.canInviteUsers)
        }
    }

    private fun serialize(dto: ChatEventIsAllHistoryAvailableToggled): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventIsAllHistoryAvailableToggled")
            put(key = "is_all_history_available", boolean = dto.isAllHistoryAvailable)
        }
    }

    private fun serialize(dto: ChatEventHasAggressiveAntiSpamEnabledToggled): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventHasAggressiveAntiSpamEnabledToggled")
            put(key = "has_aggressive_anti_spam_enabled", boolean = dto.hasAggressiveAntiSpamEnabled)
        }
    }

    private fun serialize(dto: ChatEventSignMessagesToggled): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventSignMessagesToggled")
            put(key = "sign_messages", boolean = dto.signMessages)
        }
    }

    private fun serialize(dto: ChatEventShowMessageSenderToggled): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventShowMessageSenderToggled")
            put(key = "show_message_sender", boolean = dto.showMessageSender)
        }
    }

    private fun serialize(dto: ChatEventAutomaticTranslationToggled): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventAutomaticTranslationToggled")
            put(key = "has_automatic_translation", boolean = dto.hasAutomaticTranslation)
        }
    }

    private fun serialize(dto: ChatEventInviteLinkEdited): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventInviteLinkEdited")
            put(key = "old_invite_link", value = dto.oldInviteLink) { data -> serialize(dto = data) }
            put(key = "new_invite_link", value = dto.newInviteLink) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventInviteLinkRevoked): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventInviteLinkRevoked")
            put(key = "invite_link", value = dto.inviteLink) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventInviteLinkDeleted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventInviteLinkDeleted")
            put(key = "invite_link", value = dto.inviteLink) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventVideoChatCreated): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventVideoChatCreated")
            put(key = "group_call_id", int = dto.groupCallId)
        }
    }

    private fun serialize(dto: ChatEventVideoChatEnded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventVideoChatEnded")
            put(key = "group_call_id", int = dto.groupCallId)
        }
    }

    private fun serialize(dto: ChatEventVideoChatMuteNewParticipantsToggled): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventVideoChatMuteNewParticipantsToggled")
            put(key = "mute_new_participants", boolean = dto.muteNewParticipants)
        }
    }

    private fun serialize(dto: ChatEventVideoChatParticipantIsMutedToggled): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventVideoChatParticipantIsMutedToggled")
            put(key = "participant_id", value = dto.participantId) { data -> serialize(dto = data) }
            put(key = "is_muted", boolean = dto.isMuted)
        }
    }

    private fun serialize(dto: ChatEventVideoChatParticipantVolumeLevelChanged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventVideoChatParticipantVolumeLevelChanged")
            put(key = "participant_id", value = dto.participantId) { data -> serialize(dto = data) }
            put(key = "volume_level", int = dto.volumeLevel)
        }
    }

    private fun serialize(dto: ChatEventIsForumToggled): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventIsForumToggled")
            put(key = "is_forum", boolean = dto.isForum)
        }
    }

    private fun serialize(dto: ChatEventForumTopicCreated): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventForumTopicCreated")
            put(key = "topic_info", value = dto.topicInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventForumTopicEdited): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventForumTopicEdited")
            put(key = "old_topic_info", value = dto.oldTopicInfo) { data -> serialize(dto = data) }
            put(key = "new_topic_info", value = dto.newTopicInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventForumTopicToggleIsClosed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventForumTopicToggleIsClosed")
            put(key = "topic_info", value = dto.topicInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventForumTopicToggleIsHidden): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventForumTopicToggleIsHidden")
            put(key = "topic_info", value = dto.topicInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventForumTopicDeleted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventForumTopicDeleted")
            put(key = "topic_info", value = dto.topicInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventForumTopicPinned): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventForumTopicPinned")
            put(key = "old_topic_info", value = dto.oldTopicInfo) { data -> serialize(dto = data) }
            put(key = "new_topic_info", value = dto.newTopicInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEvent): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEvent")
            put(key = "id", long = dto.id)
            put(key = "date", int = dto.date)
            put(key = "member_id", value = dto.memberId) { data -> serialize(dto = data) }
            put(key = "action", value = dto.action) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEvents): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEvents")
            put(key = "events", objects = dto.events) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatEventLogFilters): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatEventLogFilters")
            put(key = "message_edits", boolean = dto.messageEdits)
            put(key = "message_deletions", boolean = dto.messageDeletions)
            put(key = "message_pins", boolean = dto.messagePins)
            put(key = "member_joins", boolean = dto.memberJoins)
            put(key = "member_leaves", boolean = dto.memberLeaves)
            put(key = "member_invites", boolean = dto.memberInvites)
            put(key = "member_promotions", boolean = dto.memberPromotions)
            put(key = "member_restrictions", boolean = dto.memberRestrictions)
            put(key = "info_changes", boolean = dto.infoChanges)
            put(key = "setting_changes", boolean = dto.settingChanges)
            put(key = "invite_link_changes", boolean = dto.inviteLinkChanges)
            put(key = "video_chat_changes", boolean = dto.videoChatChanges)
            put(key = "forum_changes", boolean = dto.forumChanges)
            put(key = "subscription_extensions", boolean = dto.subscriptionExtensions)
        }
    }

    private fun serialize(dto: LanguagePackStringValueOrdinary): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "languagePackStringValueOrdinary")
            put(key = "value", string = dto.value)
        }
    }

    private fun serialize(dto: LanguagePackStringValuePluralized): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "languagePackStringValuePluralized")
            put(key = "zero_value", string = dto.zeroValue)
            put(key = "one_value", string = dto.oneValue)
            put(key = "two_value", string = dto.twoValue)
            put(key = "few_value", string = dto.fewValue)
            put(key = "many_value", string = dto.manyValue)
            put(key = "other_value", string = dto.otherValue)
        }
    }

    private fun serialize(dto: LanguagePackStringValueDeleted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "languagePackStringValueDeleted")
        }
    }

    private fun serialize(dto: LanguagePackString): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "languagePackString")
            put(key = "key", string = dto.key)
            put(key = "value", value = dto.value) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LanguagePackStrings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "languagePackStrings")
            put(key = "strings", objects = dto.strings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LanguagePackInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "languagePackInfo")
            put(key = "id", string = dto.id)
            put(key = "base_language_pack_id", string = dto.baseLanguagePackId)
            put(key = "name", string = dto.name)
            put(key = "native_name", string = dto.nativeName)
            put(key = "plural_code", string = dto.pluralCode)
            put(key = "is_official", boolean = dto.isOfficial)
            put(key = "is_rtl", boolean = dto.isRtl)
            put(key = "is_beta", boolean = dto.isBeta)
            put(key = "is_installed", boolean = dto.isInstalled)
            put(key = "total_string_count", int = dto.totalStringCount)
            put(key = "translated_string_count", int = dto.translatedStringCount)
            put(key = "local_string_count", int = dto.localStringCount)
            put(key = "translation_url", string = dto.translationUrl)
        }
    }

    private fun serialize(dto: LocalizationTargetInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "localizationTargetInfo")
            put(key = "language_packs", objects = dto.languagePacks) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PremiumLimitTypeSupergroupCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeSupergroupCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypePinnedChatCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypePinnedChatCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypeCreatedPublicChatCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeCreatedPublicChatCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypeSavedAnimationCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeSavedAnimationCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypeFavoriteStickerCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeFavoriteStickerCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypeChatFolderCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeChatFolderCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypeChatFolderChosenChatCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeChatFolderChosenChatCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypePinnedArchivedChatCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypePinnedArchivedChatCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypePinnedSavedMessagesTopicCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypePinnedSavedMessagesTopicCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypeCaptionLength): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeCaptionLength")
        }
    }

    private fun serialize(dto: PremiumLimitTypeBioLength): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeBioLength")
        }
    }

    private fun serialize(dto: PremiumLimitTypeChatFolderInviteLinkCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeChatFolderInviteLinkCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypeShareableChatFolderCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeShareableChatFolderCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypeActiveStoryCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeActiveStoryCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypeWeeklyPostedStoryCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeWeeklyPostedStoryCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypeMonthlyPostedStoryCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeMonthlyPostedStoryCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypeStoryCaptionLength): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeStoryCaptionLength")
        }
    }

    private fun serialize(dto: PremiumLimitTypeStorySuggestedReactionAreaCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeStorySuggestedReactionAreaCount")
        }
    }

    private fun serialize(dto: PremiumLimitTypeSimilarChatCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimitTypeSimilarChatCount")
        }
    }

    private fun serialize(dto: PremiumFeatureIncreasedLimits): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureIncreasedLimits")
        }
    }

    private fun serialize(dto: PremiumFeatureIncreasedUploadFileSize): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureIncreasedUploadFileSize")
        }
    }

    private fun serialize(dto: PremiumFeatureImprovedDownloadSpeed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureImprovedDownloadSpeed")
        }
    }

    private fun serialize(dto: PremiumFeatureVoiceRecognition): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureVoiceRecognition")
        }
    }

    private fun serialize(dto: PremiumFeatureDisabledAds): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureDisabledAds")
        }
    }

    private fun serialize(dto: PremiumFeatureUniqueReactions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureUniqueReactions")
        }
    }

    private fun serialize(dto: PremiumFeatureUniqueStickers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureUniqueStickers")
        }
    }

    private fun serialize(dto: PremiumFeatureCustomEmoji): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureCustomEmoji")
        }
    }

    private fun serialize(dto: PremiumFeatureAdvancedChatManagement): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureAdvancedChatManagement")
        }
    }

    private fun serialize(dto: PremiumFeatureProfileBadge): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureProfileBadge")
        }
    }

    private fun serialize(dto: PremiumFeatureEmojiStatus): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureEmojiStatus")
        }
    }

    private fun serialize(dto: PremiumFeatureAnimatedProfilePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureAnimatedProfilePhoto")
        }
    }

    private fun serialize(dto: PremiumFeatureForumTopicIcon): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureForumTopicIcon")
        }
    }

    private fun serialize(dto: PremiumFeatureAppIcons): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureAppIcons")
        }
    }

    private fun serialize(dto: PremiumFeatureRealTimeChatTranslation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureRealTimeChatTranslation")
        }
    }

    private fun serialize(dto: PremiumFeatureUpgradedStories): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureUpgradedStories")
        }
    }

    private fun serialize(dto: PremiumFeatureChatBoost): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureChatBoost")
        }
    }

    private fun serialize(dto: PremiumFeatureAccentColor): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureAccentColor")
        }
    }

    private fun serialize(dto: PremiumFeatureBackgroundForBoth): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureBackgroundForBoth")
        }
    }

    private fun serialize(dto: PremiumFeatureSavedMessagesTags): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureSavedMessagesTags")
        }
    }

    private fun serialize(dto: PremiumFeatureMessagePrivacy): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureMessagePrivacy")
        }
    }

    private fun serialize(dto: PremiumFeatureLastSeenTimes): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureLastSeenTimes")
        }
    }

    private fun serialize(dto: PremiumFeatureBusiness): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureBusiness")
        }
    }

    private fun serialize(dto: PremiumFeatureMessageEffects): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureMessageEffects")
        }
    }

    private fun serialize(dto: PremiumFeatureChecklists): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatureChecklists")
        }
    }

    private fun serialize(dto: BusinessFeatureLocation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessFeatureLocation")
        }
    }

    private fun serialize(dto: BusinessFeatureOpeningHours): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessFeatureOpeningHours")
        }
    }

    private fun serialize(dto: BusinessFeatureQuickReplies): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessFeatureQuickReplies")
        }
    }

    private fun serialize(dto: BusinessFeatureGreetingMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessFeatureGreetingMessage")
        }
    }

    private fun serialize(dto: BusinessFeatureAwayMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessFeatureAwayMessage")
        }
    }

    private fun serialize(dto: BusinessFeatureAccountLinks): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessFeatureAccountLinks")
        }
    }

    private fun serialize(dto: BusinessFeatureStartPage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessFeatureStartPage")
        }
    }

    private fun serialize(dto: BusinessFeatureBots): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessFeatureBots")
        }
    }

    private fun serialize(dto: BusinessFeatureEmojiStatus): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessFeatureEmojiStatus")
        }
    }

    private fun serialize(dto: BusinessFeatureChatFolderTags): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessFeatureChatFolderTags")
        }
    }

    private fun serialize(dto: BusinessFeatureUpgradedStories): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessFeatureUpgradedStories")
        }
    }

    private fun serialize(dto: PremiumStoryFeaturePriorityOrder): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumStoryFeaturePriorityOrder")
        }
    }

    private fun serialize(dto: PremiumStoryFeatureStealthMode): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumStoryFeatureStealthMode")
        }
    }

    private fun serialize(dto: PremiumStoryFeaturePermanentViewsHistory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumStoryFeaturePermanentViewsHistory")
        }
    }

    private fun serialize(dto: PremiumStoryFeatureCustomExpirationDuration): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumStoryFeatureCustomExpirationDuration")
        }
    }

    private fun serialize(dto: PremiumStoryFeatureSaveStories): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumStoryFeatureSaveStories")
        }
    }

    private fun serialize(dto: PremiumStoryFeatureLinksAndFormatting): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumStoryFeatureLinksAndFormatting")
        }
    }

    private fun serialize(dto: PremiumStoryFeatureVideoQuality): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumStoryFeatureVideoQuality")
        }
    }

    private fun serialize(dto: PremiumLimit): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumLimit")
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "default_value", int = dto.defaultValue)
            put(key = "premium_value", int = dto.premiumValue)
        }
    }

    private fun serialize(dto: PremiumFeatures): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeatures")
            put(key = "features", objects = dto.features) { data -> serialize(dto = data) }
            put(key = "limits", objects = dto.limits) { data -> serialize(dto = data) }
            put(key = "payment_link", value = dto.paymentLink) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BusinessFeatures): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessFeatures")
            put(key = "features", objects = dto.features) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PremiumSourceLimitExceeded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumSourceLimitExceeded")
            put(key = "limit_type", value = dto.limitType) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PremiumSourceFeature): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumSourceFeature")
            put(key = "feature", value = dto.feature) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PremiumSourceBusinessFeature): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumSourceBusinessFeature")
            put(key = "feature", value = dto.feature) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PremiumSourceStoryFeature): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumSourceStoryFeature")
            put(key = "feature", value = dto.feature) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PremiumSourceLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumSourceLink")
            put(key = "referrer", string = dto.referrer)
        }
    }

    private fun serialize(dto: PremiumSourceSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumSourceSettings")
        }
    }

    private fun serialize(dto: PremiumFeaturePromotionAnimation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumFeaturePromotionAnimation")
            put(key = "feature", value = dto.feature) { data -> serialize(dto = data) }
            put(key = "animation", value = dto.animation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BusinessFeaturePromotionAnimation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "businessFeaturePromotionAnimation")
            put(key = "feature", value = dto.feature) { data -> serialize(dto = data) }
            put(key = "animation", value = dto.animation) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: PremiumState): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "premiumState")
            put(key = "state", value = dto.state) { data -> serialize(dto = data) }
            put(key = "payment_options", objects = dto.paymentOptions) { data -> serialize(dto = data) }
            put(key = "animations", objects = dto.animations) { data -> serialize(dto = data) }
            put(key = "business_animations", objects = dto.businessAnimations) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StorePaymentPurposePremiumSubscription): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storePaymentPurposePremiumSubscription")
            put(key = "is_restore", boolean = dto.isRestore)
            put(key = "is_upgrade", boolean = dto.isUpgrade)
        }
    }

    private fun serialize(dto: StorePaymentPurposePremiumGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storePaymentPurposePremiumGift")
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "user_id", long = dto.userId)
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StorePaymentPurposePremiumGiftCodes): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storePaymentPurposePremiumGiftCodes")
            put(key = "boosted_chat_id", long = dto.boostedChatId)
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "user_ids", longs = dto.userIds)
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StorePaymentPurposePremiumGiveaway): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storePaymentPurposePremiumGiveaway")
            put(key = "parameters", value = dto.parameters) { data -> serialize(dto = data) }
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
        }
    }

    private fun serialize(dto: StorePaymentPurposeStarGiveaway): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storePaymentPurposeStarGiveaway")
            put(key = "parameters", value = dto.parameters) { data -> serialize(dto = data) }
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "winner_count", int = dto.winnerCount)
            put(key = "star_count", long = dto.starCount)
        }
    }

    private fun serialize(dto: StorePaymentPurposeStars): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storePaymentPurposeStars")
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "star_count", long = dto.starCount)
        }
    }

    private fun serialize(dto: StorePaymentPurposeGiftedStars): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storePaymentPurposeGiftedStars")
            put(key = "user_id", long = dto.userId)
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "star_count", long = dto.starCount)
        }
    }

    private fun serialize(dto: StoreTransactionAppStore): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storeTransactionAppStore")
            put(key = "receipt", bytes = dto.receipt)
        }
    }

    private fun serialize(dto: StoreTransactionGooglePlay): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storeTransactionGooglePlay")
            put(key = "package_name", string = dto.packageName)
            put(key = "store_product_id", string = dto.storeProductId)
            put(key = "purchase_token", string = dto.purchaseToken)
        }
    }

    private fun serialize(dto: TelegramPaymentPurposePremiumGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "telegramPaymentPurposePremiumGift")
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "user_id", long = dto.userId)
            put(key = "month_count", int = dto.monthCount)
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: TelegramPaymentPurposePremiumGiftCodes): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "telegramPaymentPurposePremiumGiftCodes")
            put(key = "boosted_chat_id", long = dto.boostedChatId)
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "user_ids", longs = dto.userIds)
            put(key = "month_count", int = dto.monthCount)
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: TelegramPaymentPurposePremiumGiveaway): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "telegramPaymentPurposePremiumGiveaway")
            put(key = "parameters", value = dto.parameters) { data -> serialize(dto = data) }
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "winner_count", int = dto.winnerCount)
            put(key = "month_count", int = dto.monthCount)
        }
    }

    private fun serialize(dto: TelegramPaymentPurposeStars): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "telegramPaymentPurposeStars")
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "star_count", long = dto.starCount)
        }
    }

    private fun serialize(dto: TelegramPaymentPurposeGiftedStars): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "telegramPaymentPurposeGiftedStars")
            put(key = "user_id", long = dto.userId)
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "star_count", long = dto.starCount)
        }
    }

    private fun serialize(dto: TelegramPaymentPurposeStarGiveaway): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "telegramPaymentPurposeStarGiveaway")
            put(key = "parameters", value = dto.parameters) { data -> serialize(dto = data) }
            put(key = "currency", string = dto.currency)
            put(key = "amount", long = dto.amount)
            put(key = "winner_count", int = dto.winnerCount)
            put(key = "star_count", long = dto.starCount)
        }
    }

    private fun serialize(dto: TelegramPaymentPurposeJoinChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "telegramPaymentPurposeJoinChat")
            put(key = "invite_link", string = dto.inviteLink)
        }
    }

    private fun serialize(dto: DeviceTokenFirebaseCloudMessaging): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "deviceTokenFirebaseCloudMessaging")
            put(key = "token", string = dto.token)
            put(key = "encrypt", boolean = dto.encrypt)
        }
    }

    private fun serialize(dto: DeviceTokenApplePush): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "deviceTokenApplePush")
            put(key = "device_token", string = dto.deviceToken)
            put(key = "is_app_sandbox", boolean = dto.isAppSandbox)
        }
    }

    private fun serialize(dto: DeviceTokenApplePushVoIP): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "deviceTokenApplePushVoIP")
            put(key = "device_token", string = dto.deviceToken)
            put(key = "is_app_sandbox", boolean = dto.isAppSandbox)
            put(key = "encrypt", boolean = dto.encrypt)
        }
    }

    private fun serialize(dto: DeviceTokenWindowsPush): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "deviceTokenWindowsPush")
            put(key = "access_token", string = dto.accessToken)
        }
    }

    private fun serialize(dto: DeviceTokenMicrosoftPush): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "deviceTokenMicrosoftPush")
            put(key = "channel_uri", string = dto.channelUri)
        }
    }

    private fun serialize(dto: DeviceTokenMicrosoftPushVoIP): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "deviceTokenMicrosoftPushVoIP")
            put(key = "channel_uri", string = dto.channelUri)
        }
    }

    private fun serialize(dto: DeviceTokenWebPush): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "deviceTokenWebPush")
            put(key = "endpoint", string = dto.endpoint)
            put(key = "p256dh_base64url", string = dto.p256dhBase64url)
            put(key = "auth_base64url", string = dto.authBase64url)
        }
    }

    private fun serialize(dto: DeviceTokenSimplePush): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "deviceTokenSimplePush")
            put(key = "endpoint", string = dto.endpoint)
        }
    }

    private fun serialize(dto: DeviceTokenUbuntuPush): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "deviceTokenUbuntuPush")
            put(key = "token", string = dto.token)
        }
    }

    private fun serialize(dto: DeviceTokenBlackBerryPush): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "deviceTokenBlackBerryPush")
            put(key = "token", string = dto.token)
        }
    }

    private fun serialize(dto: DeviceTokenTizenPush): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "deviceTokenTizenPush")
            put(key = "reg_id", string = dto.regId)
        }
    }

    private fun serialize(dto: DeviceTokenHuaweiPush): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "deviceTokenHuaweiPush")
            put(key = "token", string = dto.token)
            put(key = "encrypt", boolean = dto.encrypt)
        }
    }

    private fun serialize(dto: PushReceiverId): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushReceiverId")
            put(key = "id", long = dto.id)
        }
    }

    private fun serialize(dto: BackgroundFillSolid): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "backgroundFillSolid")
            put(key = "color", int = dto.color)
        }
    }

    private fun serialize(dto: BackgroundFillGradient): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "backgroundFillGradient")
            put(key = "top_color", int = dto.topColor)
            put(key = "bottom_color", int = dto.bottomColor)
            put(key = "rotation_angle", int = dto.rotationAngle)
        }
    }

    private fun serialize(dto: BackgroundFillFreeformGradient): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "backgroundFillFreeformGradient")
            put(key = "colors", ints = dto.colors)
        }
    }

    private fun serialize(dto: BackgroundTypeWallpaper): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "backgroundTypeWallpaper")
            put(key = "is_blurred", boolean = dto.isBlurred)
            put(key = "is_moving", boolean = dto.isMoving)
        }
    }

    private fun serialize(dto: BackgroundTypePattern): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "backgroundTypePattern")
            put(key = "fill", value = dto.fill) { data -> serialize(dto = data) }
            put(key = "intensity", int = dto.intensity)
            put(key = "is_inverted", boolean = dto.isInverted)
            put(key = "is_moving", boolean = dto.isMoving)
        }
    }

    private fun serialize(dto: BackgroundTypeFill): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "backgroundTypeFill")
            put(key = "fill", value = dto.fill) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BackgroundTypeChatTheme): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "backgroundTypeChatTheme")
            put(key = "theme_name", string = dto.themeName)
        }
    }

    private fun serialize(dto: InputBackgroundLocal): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputBackgroundLocal")
            put(key = "background", value = dto.background) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputBackgroundRemote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputBackgroundRemote")
            put(key = "background_id", long = dto.backgroundId)
        }
    }

    private fun serialize(dto: InputBackgroundPrevious): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputBackgroundPrevious")
            put(key = "message_id", long = dto.messageId)
        }
    }

    private fun serialize(dto: ChatTheme): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatTheme")
            put(key = "name", string = dto.name)
            put(key = "light_settings", value = dto.lightSettings) { data -> serialize(dto = data) }
            put(key = "dark_settings", value = dto.darkSettings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: TimeZone): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "timeZone")
            put(key = "id", string = dto.id)
            put(key = "name", string = dto.name)
            put(key = "utc_time_offset", int = dto.utcTimeOffset)
        }
    }

    private fun serialize(dto: TimeZones): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "timeZones")
            put(key = "time_zones", objects = dto.timeZones) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Hashtags): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "hashtags")
            put(key = "hashtags", strings = dto.hashtags)
        }
    }

    private fun serialize(dto: CanPostStoryResultOk): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "canPostStoryResultOk")
            put(key = "story_count", int = dto.storyCount)
        }
    }

    private fun serialize(dto: CanPostStoryResultPremiumNeeded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "canPostStoryResultPremiumNeeded")
        }
    }

    private fun serialize(dto: CanPostStoryResultBoostNeeded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "canPostStoryResultBoostNeeded")
        }
    }

    private fun serialize(dto: CanPostStoryResultActiveStoryLimitExceeded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "canPostStoryResultActiveStoryLimitExceeded")
        }
    }

    private fun serialize(dto: CanPostStoryResultWeeklyLimitExceeded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "canPostStoryResultWeeklyLimitExceeded")
            put(key = "retry_after", int = dto.retryAfter)
        }
    }

    private fun serialize(dto: CanPostStoryResultMonthlyLimitExceeded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "canPostStoryResultMonthlyLimitExceeded")
            put(key = "retry_after", int = dto.retryAfter)
        }
    }

    private fun serialize(dto: CanTransferOwnershipResultOk): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "canTransferOwnershipResultOk")
        }
    }

    private fun serialize(dto: CanTransferOwnershipResultPasswordNeeded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "canTransferOwnershipResultPasswordNeeded")
        }
    }

    private fun serialize(dto: CanTransferOwnershipResultPasswordTooFresh): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "canTransferOwnershipResultPasswordTooFresh")
            put(key = "retry_after", int = dto.retryAfter)
        }
    }

    private fun serialize(dto: CanTransferOwnershipResultSessionTooFresh): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "canTransferOwnershipResultSessionTooFresh")
            put(key = "retry_after", int = dto.retryAfter)
        }
    }

    private fun serialize(dto: CheckChatUsernameResultOk): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "checkChatUsernameResultOk")
        }
    }

    private fun serialize(dto: CheckChatUsernameResultUsernameInvalid): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "checkChatUsernameResultUsernameInvalid")
        }
    }

    private fun serialize(dto: CheckChatUsernameResultUsernameOccupied): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "checkChatUsernameResultUsernameOccupied")
        }
    }

    private fun serialize(dto: CheckChatUsernameResultUsernamePurchasable): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "checkChatUsernameResultUsernamePurchasable")
        }
    }

    private fun serialize(dto: CheckChatUsernameResultPublicChatsTooMany): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "checkChatUsernameResultPublicChatsTooMany")
        }
    }

    private fun serialize(dto: CheckChatUsernameResultPublicGroupsUnavailable): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "checkChatUsernameResultPublicGroupsUnavailable")
        }
    }

    private fun serialize(dto: CheckStickerSetNameResultOk): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "checkStickerSetNameResultOk")
        }
    }

    private fun serialize(dto: CheckStickerSetNameResultNameInvalid): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "checkStickerSetNameResultNameInvalid")
        }
    }

    private fun serialize(dto: CheckStickerSetNameResultNameOccupied): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "checkStickerSetNameResultNameOccupied")
        }
    }

    private fun serialize(dto: ResetPasswordResultOk): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "resetPasswordResultOk")
        }
    }

    private fun serialize(dto: ResetPasswordResultPending): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "resetPasswordResultPending")
            put(key = "pending_reset_date", int = dto.pendingResetDate)
        }
    }

    private fun serialize(dto: ResetPasswordResultDeclined): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "resetPasswordResultDeclined")
            put(key = "retry_date", int = dto.retryDate)
        }
    }

    private fun serialize(dto: MessageFileTypePrivate): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageFileTypePrivate")
            put(key = "name", string = dto.name)
        }
    }

    private fun serialize(dto: MessageFileTypeGroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageFileTypeGroup")
            put(key = "title", string = dto.title)
        }
    }

    private fun serialize(dto: MessageFileTypeUnknown): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageFileTypeUnknown")
        }
    }

    private fun serialize(dto: PushMessageContentHidden): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentHidden")
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentAnimation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentAnimation")
            put(key = "animation", value = dto.animation) { data -> serialize(dto = data) }
            put(key = "caption", string = dto.caption)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentAudio): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentAudio")
            put(key = "audio", value = dto.audio) { data -> serialize(dto = data) }
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentContact): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentContact")
            put(key = "name", string = dto.name)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentContactRegistered): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentContactRegistered")
        }
    }

    private fun serialize(dto: PushMessageContentDocument): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentDocument")
            put(key = "document", value = dto.document) { data -> serialize(dto = data) }
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentGame): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentGame")
            put(key = "title", string = dto.title)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentGameScore): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentGameScore")
            put(key = "title", string = dto.title)
            put(key = "score", int = dto.score)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentInvoice): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentInvoice")
            put(key = "price", string = dto.price)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentLocation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentLocation")
            put(key = "is_live", boolean = dto.isLive)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentPaidMedia): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentPaidMedia")
            put(key = "star_count", long = dto.starCount)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentPhoto")
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
            put(key = "caption", string = dto.caption)
            put(key = "is_secret", boolean = dto.isSecret)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentPoll): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentPoll")
            put(key = "question", string = dto.question)
            put(key = "is_regular", boolean = dto.isRegular)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentPremiumGiftCode): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentPremiumGiftCode")
            put(key = "month_count", int = dto.monthCount)
        }
    }

    private fun serialize(dto: PushMessageContentGiveaway): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentGiveaway")
            put(key = "winner_count", int = dto.winnerCount)
            put(key = "prize", value = dto.prize) { data -> serialize(dto = data) }
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentGift")
            put(key = "star_count", long = dto.starCount)
        }
    }

    private fun serialize(dto: PushMessageContentUpgradedGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentUpgradedGift")
            put(key = "is_upgrade", boolean = dto.isUpgrade)
        }
    }

    private fun serialize(dto: PushMessageContentScreenshotTaken): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentScreenshotTaken")
        }
    }

    private fun serialize(dto: PushMessageContentSticker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentSticker")
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
            put(key = "emoji", string = dto.emoji)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentStory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentStory")
            put(key = "is_mention", boolean = dto.isMention)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentText): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentText")
            put(key = "text", string = dto.text)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentChecklist): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentChecklist")
            put(key = "title", string = dto.title)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentVideo")
            put(key = "video", value = dto.video) { data -> serialize(dto = data) }
            put(key = "caption", string = dto.caption)
            put(key = "is_secret", boolean = dto.isSecret)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentVideoNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentVideoNote")
            put(key = "video_note", value = dto.videoNote) { data -> serialize(dto = data) }
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentVoiceNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentVoiceNote")
            put(key = "voice_note", value = dto.voiceNote) { data -> serialize(dto = data) }
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: PushMessageContentBasicGroupChatCreate): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentBasicGroupChatCreate")
        }
    }

    private fun serialize(dto: PushMessageContentVideoChatStarted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentVideoChatStarted")
        }
    }

    private fun serialize(dto: PushMessageContentVideoChatEnded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentVideoChatEnded")
        }
    }

    private fun serialize(dto: PushMessageContentInviteVideoChatParticipants): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentInviteVideoChatParticipants")
            put(key = "is_current_user", boolean = dto.isCurrentUser)
        }
    }

    private fun serialize(dto: PushMessageContentChatAddMembers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentChatAddMembers")
            put(key = "member_name", string = dto.memberName)
            put(key = "is_current_user", boolean = dto.isCurrentUser)
            put(key = "is_returned", boolean = dto.isReturned)
        }
    }

    private fun serialize(dto: PushMessageContentChatChangePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentChatChangePhoto")
        }
    }

    private fun serialize(dto: PushMessageContentChatChangeTitle): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentChatChangeTitle")
            put(key = "title", string = dto.title)
        }
    }

    private fun serialize(dto: PushMessageContentChatSetBackground): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentChatSetBackground")
            put(key = "is_same", boolean = dto.isSame)
        }
    }

    private fun serialize(dto: PushMessageContentChatSetTheme): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentChatSetTheme")
            put(key = "theme_name", string = dto.themeName)
        }
    }

    private fun serialize(dto: PushMessageContentChatDeleteMember): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentChatDeleteMember")
            put(key = "member_name", string = dto.memberName)
            put(key = "is_current_user", boolean = dto.isCurrentUser)
            put(key = "is_left", boolean = dto.isLeft)
        }
    }

    private fun serialize(dto: PushMessageContentChatJoinByLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentChatJoinByLink")
        }
    }

    private fun serialize(dto: PushMessageContentChatJoinByRequest): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentChatJoinByRequest")
        }
    }

    private fun serialize(dto: PushMessageContentRecurringPayment): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentRecurringPayment")
            put(key = "amount", string = dto.amount)
        }
    }

    private fun serialize(dto: PushMessageContentSuggestProfilePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentSuggestProfilePhoto")
        }
    }

    private fun serialize(dto: PushMessageContentProximityAlertTriggered): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentProximityAlertTriggered")
            put(key = "distance", int = dto.distance)
        }
    }

    private fun serialize(dto: PushMessageContentChecklistTasksAdded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentChecklistTasksAdded")
            put(key = "task_count", int = dto.taskCount)
        }
    }

    private fun serialize(dto: PushMessageContentChecklistTasksDone): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentChecklistTasksDone")
            put(key = "task_count", int = dto.taskCount)
        }
    }

    private fun serialize(dto: PushMessageContentMessageForwards): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentMessageForwards")
            put(key = "total_count", int = dto.totalCount)
        }
    }

    private fun serialize(dto: PushMessageContentMediaAlbum): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "pushMessageContentMediaAlbum")
            put(key = "total_count", int = dto.totalCount)
            put(key = "has_photos", boolean = dto.hasPhotos)
            put(key = "has_videos", boolean = dto.hasVideos)
            put(key = "has_audios", boolean = dto.hasAudios)
            put(key = "has_documents", boolean = dto.hasDocuments)
        }
    }

    private fun serialize(dto: NotificationTypeNewMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notificationTypeNewMessage")
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
            put(key = "show_preview", boolean = dto.showPreview)
        }
    }

    private fun serialize(dto: NotificationTypeNewSecretChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notificationTypeNewSecretChat")
        }
    }

    private fun serialize(dto: NotificationTypeNewCall): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notificationTypeNewCall")
            put(key = "call_id", int = dto.callId)
        }
    }

    private fun serialize(dto: NotificationTypeNewPushMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notificationTypeNewPushMessage")
            put(key = "message_id", long = dto.messageId)
            put(key = "sender_id", value = dto.senderId) { data -> serialize(dto = data) }
            put(key = "sender_name", string = dto.senderName)
            put(key = "is_outgoing", boolean = dto.isOutgoing)
            put(key = "content", value = dto.content) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: NotificationGroupTypeMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notificationGroupTypeMessages")
        }
    }

    private fun serialize(dto: NotificationGroupTypeMentions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notificationGroupTypeMentions")
        }
    }

    private fun serialize(dto: NotificationGroupTypeSecretChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notificationGroupTypeSecretChat")
        }
    }

    private fun serialize(dto: NotificationGroupTypeCalls): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notificationGroupTypeCalls")
        }
    }

    private fun serialize(dto: NotificationSound): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notificationSound")
            put(key = "id", long = dto.id)
            put(key = "duration", int = dto.duration)
            put(key = "date", int = dto.date)
            put(key = "title", string = dto.title)
            put(key = "data", string = dto.data)
            put(key = "sound", value = dto.sound) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: NotificationSounds): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notificationSounds")
            put(key = "notification_sounds", objects = dto.notificationSounds) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Notification): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notification")
            put(key = "id", int = dto.id)
            put(key = "date", int = dto.date)
            put(key = "is_silent", boolean = dto.isSilent)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: NotificationGroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "notificationGroup")
            put(key = "id", int = dto.id)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "chat_id", long = dto.chatId)
            put(key = "total_count", int = dto.totalCount)
            put(key = "notifications", objects = dto.notifications) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: OptionValueBoolean): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "optionValueBoolean")
            put(key = "value", boolean = dto.value)
        }
    }

    private fun serialize(dto: OptionValueEmpty): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "optionValueEmpty")
        }
    }

    private fun serialize(dto: OptionValueInteger): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "optionValueInteger")
            put(key = "value", long = dto.value)
        }
    }

    private fun serialize(dto: OptionValueString): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "optionValueString")
            put(key = "value", string = dto.value)
        }
    }

    private fun serialize(dto: JsonObjectMember): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "jsonObjectMember")
            put(key = "key", string = dto.key)
            put(key = "value", value = dto.value) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: JsonValueNull): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "jsonValueNull")
        }
    }

    private fun serialize(dto: JsonValueBoolean): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "jsonValueBoolean")
            put(key = "value", boolean = dto.value)
        }
    }

    private fun serialize(dto: JsonValueNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "jsonValueNumber")
            put(key = "value", double = dto.value)
        }
    }

    private fun serialize(dto: JsonValueString): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "jsonValueString")
            put(key = "value", string = dto.value)
        }
    }

    private fun serialize(dto: JsonValueArray): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "jsonValueArray")
            put(key = "values", objects = dto.values) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: JsonValueObject): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "jsonValueObject")
            put(key = "members", objects = dto.members) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StoryPrivacySettingsEveryone): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyPrivacySettingsEveryone")
            put(key = "except_user_ids", longs = dto.exceptUserIds)
        }
    }

    private fun serialize(dto: StoryPrivacySettingsContacts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyPrivacySettingsContacts")
            put(key = "except_user_ids", longs = dto.exceptUserIds)
        }
    }

    private fun serialize(dto: StoryPrivacySettingsCloseFriends): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyPrivacySettingsCloseFriends")
        }
    }

    private fun serialize(dto: StoryPrivacySettingsSelectedUsers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyPrivacySettingsSelectedUsers")
            put(key = "user_ids", longs = dto.userIds)
        }
    }

    private fun serialize(dto: UserPrivacySettingRuleAllowAll): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingRuleAllowAll")
        }
    }

    private fun serialize(dto: UserPrivacySettingRuleAllowContacts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingRuleAllowContacts")
        }
    }

    private fun serialize(dto: UserPrivacySettingRuleAllowBots): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingRuleAllowBots")
        }
    }

    private fun serialize(dto: UserPrivacySettingRuleAllowPremiumUsers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingRuleAllowPremiumUsers")
        }
    }

    private fun serialize(dto: UserPrivacySettingRuleAllowUsers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingRuleAllowUsers")
            put(key = "user_ids", longs = dto.userIds)
        }
    }

    private fun serialize(dto: UserPrivacySettingRuleAllowChatMembers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingRuleAllowChatMembers")
            put(key = "chat_ids", longs = dto.chatIds)
        }
    }

    private fun serialize(dto: UserPrivacySettingRuleRestrictAll): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingRuleRestrictAll")
        }
    }

    private fun serialize(dto: UserPrivacySettingRuleRestrictContacts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingRuleRestrictContacts")
        }
    }

    private fun serialize(dto: UserPrivacySettingRuleRestrictBots): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingRuleRestrictBots")
        }
    }

    private fun serialize(dto: UserPrivacySettingRuleRestrictUsers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingRuleRestrictUsers")
            put(key = "user_ids", longs = dto.userIds)
        }
    }

    private fun serialize(dto: UserPrivacySettingRuleRestrictChatMembers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingRuleRestrictChatMembers")
            put(key = "chat_ids", longs = dto.chatIds)
        }
    }

    private fun serialize(dto: UserPrivacySettingRules): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingRules")
            put(key = "rules", objects = dto.rules) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UserPrivacySettingShowStatus): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingShowStatus")
        }
    }

    private fun serialize(dto: UserPrivacySettingShowProfilePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingShowProfilePhoto")
        }
    }

    private fun serialize(dto: UserPrivacySettingShowLinkInForwardedMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingShowLinkInForwardedMessages")
        }
    }

    private fun serialize(dto: UserPrivacySettingShowPhoneNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingShowPhoneNumber")
        }
    }

    private fun serialize(dto: UserPrivacySettingShowBio): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingShowBio")
        }
    }

    private fun serialize(dto: UserPrivacySettingShowBirthdate): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingShowBirthdate")
        }
    }

    private fun serialize(dto: UserPrivacySettingAllowChatInvites): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingAllowChatInvites")
        }
    }

    private fun serialize(dto: UserPrivacySettingAllowCalls): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingAllowCalls")
        }
    }

    private fun serialize(dto: UserPrivacySettingAllowPeerToPeerCalls): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingAllowPeerToPeerCalls")
        }
    }

    private fun serialize(dto: UserPrivacySettingAllowFindingByPhoneNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingAllowFindingByPhoneNumber")
        }
    }

    private fun serialize(dto: UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingAllowPrivateVoiceAndVideoNoteMessages")
        }
    }

    private fun serialize(dto: UserPrivacySettingAutosaveGifts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingAutosaveGifts")
        }
    }

    private fun serialize(dto: UserPrivacySettingAllowUnpaidMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userPrivacySettingAllowUnpaidMessages")
        }
    }

    private fun serialize(dto: ReadDatePrivacySettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "readDatePrivacySettings")
            put(key = "show_read_date", boolean = dto.showReadDate)
        }
    }

    private fun serialize(dto: NewChatPrivacySettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "newChatPrivacySettings")
            put(key = "allow_new_chats_from_unknown_users", boolean = dto.allowNewChatsFromUnknownUsers)
            put(key = "incoming_paid_message_star_count", long = dto.incomingPaidMessageStarCount)
        }
    }

    private fun serialize(dto: CanSendMessageToUserResultOk): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "canSendMessageToUserResultOk")
        }
    }

    private fun serialize(dto: CanSendMessageToUserResultUserHasPaidMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "canSendMessageToUserResultUserHasPaidMessages")
            put(key = "outgoing_paid_message_star_count", long = dto.outgoingPaidMessageStarCount)
        }
    }

    private fun serialize(dto: CanSendMessageToUserResultUserIsDeleted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "canSendMessageToUserResultUserIsDeleted")
        }
    }

    private fun serialize(dto: CanSendMessageToUserResultUserRestrictsNewChats): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "canSendMessageToUserResultUserRestrictsNewChats")
        }
    }

    private fun serialize(dto: AccountTtl): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "accountTtl")
            put(key = "days", int = dto.days)
        }
    }

    private fun serialize(dto: MessageAutoDeleteTime): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageAutoDeleteTime")
            put(key = "time", int = dto.time)
        }
    }

    private fun serialize(dto: SessionTypeAndroid): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeAndroid")
        }
    }

    private fun serialize(dto: SessionTypeApple): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeApple")
        }
    }

    private fun serialize(dto: SessionTypeBrave): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeBrave")
        }
    }

    private fun serialize(dto: SessionTypeChrome): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeChrome")
        }
    }

    private fun serialize(dto: SessionTypeEdge): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeEdge")
        }
    }

    private fun serialize(dto: SessionTypeFirefox): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeFirefox")
        }
    }

    private fun serialize(dto: SessionTypeIpad): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeIpad")
        }
    }

    private fun serialize(dto: SessionTypeIphone): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeIphone")
        }
    }

    private fun serialize(dto: SessionTypeLinux): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeLinux")
        }
    }

    private fun serialize(dto: SessionTypeMac): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeMac")
        }
    }

    private fun serialize(dto: SessionTypeOpera): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeOpera")
        }
    }

    private fun serialize(dto: SessionTypeSafari): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeSafari")
        }
    }

    private fun serialize(dto: SessionTypeUbuntu): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeUbuntu")
        }
    }

    private fun serialize(dto: SessionTypeUnknown): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeUnknown")
        }
    }

    private fun serialize(dto: SessionTypeVivaldi): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeVivaldi")
        }
    }

    private fun serialize(dto: SessionTypeWindows): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeWindows")
        }
    }

    private fun serialize(dto: SessionTypeXbox): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessionTypeXbox")
        }
    }

    private fun serialize(dto: Session): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "session")
            put(key = "id", long = dto.id)
            put(key = "is_current", boolean = dto.isCurrent)
            put(key = "is_password_pending", boolean = dto.isPasswordPending)
            put(key = "is_unconfirmed", boolean = dto.isUnconfirmed)
            put(key = "can_accept_secret_chats", boolean = dto.canAcceptSecretChats)
            put(key = "can_accept_calls", boolean = dto.canAcceptCalls)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "api_id", int = dto.apiId)
            put(key = "application_name", string = dto.applicationName)
            put(key = "application_version", string = dto.applicationVersion)
            put(key = "is_official_application", boolean = dto.isOfficialApplication)
            put(key = "device_model", string = dto.deviceModel)
            put(key = "platform", string = dto.platform)
            put(key = "system_version", string = dto.systemVersion)
            put(key = "log_in_date", int = dto.logInDate)
            put(key = "last_active_date", int = dto.lastActiveDate)
            put(key = "ip_address", string = dto.ipAddress)
            put(key = "location", string = dto.location)
        }
    }

    private fun serialize(dto: Sessions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "sessions")
            put(key = "sessions", objects = dto.sessions) { data -> serialize(dto = data) }
            put(key = "inactive_session_ttl_days", int = dto.inactiveSessionTtlDays)
        }
    }

    private fun serialize(dto: UnconfirmedSession): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "unconfirmedSession")
            put(key = "id", long = dto.id)
            put(key = "log_in_date", int = dto.logInDate)
            put(key = "device_model", string = dto.deviceModel)
            put(key = "location", string = dto.location)
        }
    }

    private fun serialize(dto: ConnectedWebsite): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "connectedWebsite")
            put(key = "id", long = dto.id)
            put(key = "domain_name", string = dto.domainName)
            put(key = "bot_user_id", long = dto.botUserId)
            put(key = "browser", string = dto.browser)
            put(key = "platform", string = dto.platform)
            put(key = "log_in_date", int = dto.logInDate)
            put(key = "last_active_date", int = dto.lastActiveDate)
            put(key = "ip_address", string = dto.ipAddress)
            put(key = "location", string = dto.location)
        }
    }

    private fun serialize(dto: ConnectedWebsites): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "connectedWebsites")
            put(key = "websites", objects = dto.websites) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ReportReasonSpam): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportReasonSpam")
        }
    }

    private fun serialize(dto: ReportReasonViolence): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportReasonViolence")
        }
    }

    private fun serialize(dto: ReportReasonPornography): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportReasonPornography")
        }
    }

    private fun serialize(dto: ReportReasonChildAbuse): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportReasonChildAbuse")
        }
    }

    private fun serialize(dto: ReportReasonCopyright): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportReasonCopyright")
        }
    }

    private fun serialize(dto: ReportReasonUnrelatedLocation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportReasonUnrelatedLocation")
        }
    }

    private fun serialize(dto: ReportReasonFake): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportReasonFake")
        }
    }

    private fun serialize(dto: ReportReasonIllegalDrugs): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportReasonIllegalDrugs")
        }
    }

    private fun serialize(dto: ReportReasonPersonalDetails): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportReasonPersonalDetails")
        }
    }

    private fun serialize(dto: ReportReasonCustom): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportReasonCustom")
        }
    }

    private fun serialize(dto: ReportChatResultOk): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportChatResultOk")
        }
    }

    private fun serialize(dto: ReportChatResultOptionRequired): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportChatResultOptionRequired")
            put(key = "title", string = dto.title)
            put(key = "options", objects = dto.options) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ReportChatResultTextRequired): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportChatResultTextRequired")
            put(key = "option_id", bytes = dto.optionId)
            put(key = "is_optional", boolean = dto.isOptional)
        }
    }

    private fun serialize(dto: ReportChatResultMessagesRequired): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportChatResultMessagesRequired")
        }
    }

    private fun serialize(dto: ReportStoryResultOk): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportStoryResultOk")
        }
    }

    private fun serialize(dto: ReportStoryResultOptionRequired): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportStoryResultOptionRequired")
            put(key = "title", string = dto.title)
            put(key = "options", objects = dto.options) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ReportStoryResultTextRequired): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "reportStoryResultTextRequired")
            put(key = "option_id", bytes = dto.optionId)
            put(key = "is_optional", boolean = dto.isOptional)
        }
    }

    private fun serialize(dto: InternalLinkTypeActiveSessions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeActiveSessions")
        }
    }

    private fun serialize(dto: InternalLinkTypeAttachmentMenuBot): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeAttachmentMenuBot")
            put(key = "target_chat", value = dto.targetChat) { data -> serialize(dto = data) }
            put(key = "bot_username", string = dto.botUsername)
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: InternalLinkTypeAuthenticationCode): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeAuthenticationCode")
            put(key = "code", string = dto.code)
        }
    }

    private fun serialize(dto: InternalLinkTypeBackground): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeBackground")
            put(key = "background_name", string = dto.backgroundName)
        }
    }

    private fun serialize(dto: InternalLinkTypeBotAddToChannel): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeBotAddToChannel")
            put(key = "bot_username", string = dto.botUsername)
            put(key = "administrator_rights", value = dto.administratorRights) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InternalLinkTypeBotStart): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeBotStart")
            put(key = "bot_username", string = dto.botUsername)
            put(key = "start_parameter", string = dto.startParameter)
            put(key = "autostart", boolean = dto.autostart)
        }
    }

    private fun serialize(dto: InternalLinkTypeBotStartInGroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeBotStartInGroup")
            put(key = "bot_username", string = dto.botUsername)
            put(key = "start_parameter", string = dto.startParameter)
            put(key = "administrator_rights", value = dto.administratorRights) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InternalLinkTypeBusinessChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeBusinessChat")
            put(key = "link_name", string = dto.linkName)
        }
    }

    private fun serialize(dto: InternalLinkTypeBuyStars): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeBuyStars")
            put(key = "star_count", long = dto.starCount)
            put(key = "purpose", string = dto.purpose)
        }
    }

    private fun serialize(dto: InternalLinkTypeChangePhoneNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeChangePhoneNumber")
        }
    }

    private fun serialize(dto: InternalLinkTypeChatAffiliateProgram): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeChatAffiliateProgram")
            put(key = "username", string = dto.username)
            put(key = "referrer", string = dto.referrer)
        }
    }

    private fun serialize(dto: InternalLinkTypeChatBoost): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeChatBoost")
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: InternalLinkTypeChatFolderInvite): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeChatFolderInvite")
            put(key = "invite_link", string = dto.inviteLink)
        }
    }

    private fun serialize(dto: InternalLinkTypeChatFolderSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeChatFolderSettings")
        }
    }

    private fun serialize(dto: InternalLinkTypeChatInvite): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeChatInvite")
            put(key = "invite_link", string = dto.inviteLink)
        }
    }

    private fun serialize(dto: InternalLinkTypeDefaultMessageAutoDeleteTimerSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeDefaultMessageAutoDeleteTimerSettings")
        }
    }

    private fun serialize(dto: InternalLinkTypeEditProfileSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeEditProfileSettings")
        }
    }

    private fun serialize(dto: InternalLinkTypeGame): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeGame")
            put(key = "bot_username", string = dto.botUsername)
            put(key = "game_short_name", string = dto.gameShortName)
        }
    }

    private fun serialize(dto: InternalLinkTypeGroupCall): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeGroupCall")
            put(key = "invite_link", string = dto.inviteLink)
        }
    }

    private fun serialize(dto: InternalLinkTypeInstantView): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeInstantView")
            put(key = "url", string = dto.url)
            put(key = "fallback_url", string = dto.fallbackUrl)
        }
    }

    private fun serialize(dto: InternalLinkTypeInvoice): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeInvoice")
            put(key = "invoice_name", string = dto.invoiceName)
        }
    }

    private fun serialize(dto: InternalLinkTypeLanguagePack): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeLanguagePack")
            put(key = "language_pack_id", string = dto.languagePackId)
        }
    }

    private fun serialize(dto: InternalLinkTypeLanguageSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeLanguageSettings")
        }
    }

    private fun serialize(dto: InternalLinkTypeMainWebApp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeMainWebApp")
            put(key = "bot_username", string = dto.botUsername)
            put(key = "start_parameter", string = dto.startParameter)
            put(key = "mode", value = dto.mode) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InternalLinkTypeMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeMessage")
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: InternalLinkTypeMessageDraft): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeMessageDraft")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "contains_link", boolean = dto.containsLink)
        }
    }

    private fun serialize(dto: InternalLinkTypeMyStars): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeMyStars")
        }
    }

    private fun serialize(dto: InternalLinkTypePassportDataRequest): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypePassportDataRequest")
            put(key = "bot_user_id", long = dto.botUserId)
            put(key = "scope", string = dto.scope)
            put(key = "public_key", string = dto.publicKey)
            put(key = "nonce", string = dto.nonce)
            put(key = "callback_url", string = dto.callbackUrl)
        }
    }

    private fun serialize(dto: InternalLinkTypePhoneNumberConfirmation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypePhoneNumberConfirmation")
            put(key = "hash", string = dto.hash)
            put(key = "phone_number", string = dto.phoneNumber)
        }
    }

    private fun serialize(dto: InternalLinkTypePremiumFeatures): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypePremiumFeatures")
            put(key = "referrer", string = dto.referrer)
        }
    }

    private fun serialize(dto: InternalLinkTypePremiumGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypePremiumGift")
            put(key = "referrer", string = dto.referrer)
        }
    }

    private fun serialize(dto: InternalLinkTypePremiumGiftCode): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypePremiumGiftCode")
            put(key = "code", string = dto.code)
        }
    }

    private fun serialize(dto: InternalLinkTypePrivacyAndSecuritySettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypePrivacyAndSecuritySettings")
        }
    }

    private fun serialize(dto: InternalLinkTypeProxy): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeProxy")
            put(key = "server", string = dto.server)
            put(key = "port", int = dto.port)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InternalLinkTypePublicChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypePublicChat")
            put(key = "chat_username", string = dto.chatUsername)
            put(key = "draft_text", string = dto.draftText)
            put(key = "open_profile", boolean = dto.openProfile)
        }
    }

    private fun serialize(dto: InternalLinkTypeQrCodeAuthentication): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeQrCodeAuthentication")
        }
    }

    private fun serialize(dto: InternalLinkTypeRestorePurchases): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeRestorePurchases")
        }
    }

    private fun serialize(dto: InternalLinkTypeSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeSettings")
        }
    }

    private fun serialize(dto: InternalLinkTypeStickerSet): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeStickerSet")
            put(key = "sticker_set_name", string = dto.stickerSetName)
            put(key = "expect_custom_emoji", boolean = dto.expectCustomEmoji)
        }
    }

    private fun serialize(dto: InternalLinkTypeStory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeStory")
            put(key = "story_poster_username", string = dto.storyPosterUsername)
            put(key = "story_id", int = dto.storyId)
        }
    }

    private fun serialize(dto: InternalLinkTypeTheme): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeTheme")
            put(key = "theme_name", string = dto.themeName)
        }
    }

    private fun serialize(dto: InternalLinkTypeThemeSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeThemeSettings")
        }
    }

    private fun serialize(dto: InternalLinkTypeUnknownDeepLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeUnknownDeepLink")
            put(key = "link", string = dto.link)
        }
    }

    private fun serialize(dto: InternalLinkTypeUnsupportedProxy): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeUnsupportedProxy")
        }
    }

    private fun serialize(dto: InternalLinkTypeUpgradedGift): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeUpgradedGift")
            put(key = "name", string = dto.name)
        }
    }

    private fun serialize(dto: InternalLinkTypeUserPhoneNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeUserPhoneNumber")
            put(key = "phone_number", string = dto.phoneNumber)
            put(key = "draft_text", string = dto.draftText)
            put(key = "open_profile", boolean = dto.openProfile)
        }
    }

    private fun serialize(dto: InternalLinkTypeUserToken): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeUserToken")
            put(key = "token", string = dto.token)
        }
    }

    private fun serialize(dto: InternalLinkTypeVideoChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeVideoChat")
            put(key = "chat_username", string = dto.chatUsername)
            put(key = "invite_hash", string = dto.inviteHash)
            put(key = "is_live_stream", boolean = dto.isLiveStream)
        }
    }

    private fun serialize(dto: InternalLinkTypeWebApp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "internalLinkTypeWebApp")
            put(key = "bot_username", string = dto.botUsername)
            put(key = "web_app_short_name", string = dto.webAppShortName)
            put(key = "start_parameter", string = dto.startParameter)
            put(key = "mode", value = dto.mode) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: MessageLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageLink")
            put(key = "link", string = dto.link)
            put(key = "is_public", boolean = dto.isPublic)
        }
    }

    private fun serialize(dto: MessageLinkInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageLinkInfo")
            put(key = "is_public", boolean = dto.isPublic)
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_thread_id", long = dto.messageThreadId)
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
            put(key = "media_timestamp", int = dto.mediaTimestamp)
            put(key = "for_album", boolean = dto.forAlbum)
        }
    }

    private fun serialize(dto: ChatBoostLink): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatBoostLink")
            put(key = "link", string = dto.link)
            put(key = "is_public", boolean = dto.isPublic)
        }
    }

    private fun serialize(dto: ChatBoostLinkInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatBoostLinkInfo")
            put(key = "is_public", boolean = dto.isPublic)
            put(key = "chat_id", long = dto.chatId)
        }
    }

    private fun serialize(dto: BlockListMain): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "blockListMain")
        }
    }

    private fun serialize(dto: BlockListStories): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "blockListStories")
        }
    }

    private fun serialize(dto: FileTypeNone): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeNone")
        }
    }

    private fun serialize(dto: FileTypeAnimation): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeAnimation")
        }
    }

    private fun serialize(dto: FileTypeAudio): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeAudio")
        }
    }

    private fun serialize(dto: FileTypeDocument): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeDocument")
        }
    }

    private fun serialize(dto: FileTypeNotificationSound): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeNotificationSound")
        }
    }

    private fun serialize(dto: FileTypePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypePhoto")
        }
    }

    private fun serialize(dto: FileTypePhotoStory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypePhotoStory")
        }
    }

    private fun serialize(dto: FileTypeProfilePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeProfilePhoto")
        }
    }

    private fun serialize(dto: FileTypeSecret): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeSecret")
        }
    }

    private fun serialize(dto: FileTypeSecretThumbnail): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeSecretThumbnail")
        }
    }

    private fun serialize(dto: FileTypeSecure): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeSecure")
        }
    }

    private fun serialize(dto: FileTypeSelfDestructingPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeSelfDestructingPhoto")
        }
    }

    private fun serialize(dto: FileTypeSelfDestructingVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeSelfDestructingVideo")
        }
    }

    private fun serialize(dto: FileTypeSelfDestructingVideoNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeSelfDestructingVideoNote")
        }
    }

    private fun serialize(dto: FileTypeSelfDestructingVoiceNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeSelfDestructingVoiceNote")
        }
    }

    private fun serialize(dto: FileTypeSticker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeSticker")
        }
    }

    private fun serialize(dto: FileTypeThumbnail): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeThumbnail")
        }
    }

    private fun serialize(dto: FileTypeUnknown): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeUnknown")
        }
    }

    private fun serialize(dto: FileTypeVideo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeVideo")
        }
    }

    private fun serialize(dto: FileTypeVideoNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeVideoNote")
        }
    }

    private fun serialize(dto: FileTypeVideoStory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeVideoStory")
        }
    }

    private fun serialize(dto: FileTypeVoiceNote): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeVoiceNote")
        }
    }

    private fun serialize(dto: FileTypeWallpaper): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileTypeWallpaper")
        }
    }

    private fun serialize(dto: StorageStatisticsByFileType): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storageStatisticsByFileType")
            put(key = "file_type", value = dto.fileType) { data -> serialize(dto = data) }
            put(key = "size", long = dto.size)
            put(key = "count", int = dto.count)
        }
    }

    private fun serialize(dto: StorageStatisticsByChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storageStatisticsByChat")
            put(key = "chat_id", long = dto.chatId)
            put(key = "size", long = dto.size)
            put(key = "count", int = dto.count)
            put(key = "by_file_type", objects = dto.byFileType) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StorageStatistics): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storageStatistics")
            put(key = "size", long = dto.size)
            put(key = "count", int = dto.count)
            put(key = "by_chat", objects = dto.byChat) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StorageStatisticsFast): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storageStatisticsFast")
            put(key = "files_size", long = dto.filesSize)
            put(key = "file_count", int = dto.fileCount)
            put(key = "database_size", long = dto.databaseSize)
            put(key = "language_pack_database_size", long = dto.languagePackDatabaseSize)
            put(key = "log_size", long = dto.logSize)
        }
    }

    private fun serialize(dto: DatabaseStatistics): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "databaseStatistics")
            put(key = "statistics", string = dto.statistics)
        }
    }

    private fun serialize(dto: NetworkTypeNone): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "networkTypeNone")
        }
    }

    private fun serialize(dto: NetworkTypeMobile): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "networkTypeMobile")
        }
    }

    private fun serialize(dto: NetworkTypeMobileRoaming): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "networkTypeMobileRoaming")
        }
    }

    private fun serialize(dto: NetworkTypeWiFi): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "networkTypeWiFi")
        }
    }

    private fun serialize(dto: NetworkTypeOther): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "networkTypeOther")
        }
    }

    private fun serialize(dto: NetworkStatisticsEntryFile): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "networkStatisticsEntryFile")
            put(key = "file_type", value = dto.fileType) { data -> serialize(dto = data) }
            put(key = "network_type", value = dto.networkType) { data -> serialize(dto = data) }
            put(key = "sent_bytes", long = dto.sentBytes)
            put(key = "received_bytes", long = dto.receivedBytes)
        }
    }

    private fun serialize(dto: NetworkStatisticsEntryCall): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "networkStatisticsEntryCall")
            put(key = "network_type", value = dto.networkType) { data -> serialize(dto = data) }
            put(key = "sent_bytes", long = dto.sentBytes)
            put(key = "received_bytes", long = dto.receivedBytes)
            put(key = "duration", double = dto.duration)
        }
    }

    private fun serialize(dto: NetworkStatistics): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "networkStatistics")
            put(key = "since_date", int = dto.sinceDate)
            put(key = "entries", objects = dto.entries) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: AutoDownloadSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "autoDownloadSettings")
            put(key = "is_auto_download_enabled", boolean = dto.isAutoDownloadEnabled)
            put(key = "max_photo_file_size", int = dto.maxPhotoFileSize)
            put(key = "max_video_file_size", long = dto.maxVideoFileSize)
            put(key = "max_other_file_size", long = dto.maxOtherFileSize)
            put(key = "video_upload_bitrate", int = dto.videoUploadBitrate)
            put(key = "preload_large_videos", boolean = dto.preloadLargeVideos)
            put(key = "preload_next_audio", boolean = dto.preloadNextAudio)
            put(key = "preload_stories", boolean = dto.preloadStories)
            put(key = "use_less_data_for_calls", boolean = dto.useLessDataForCalls)
        }
    }

    private fun serialize(dto: AutoDownloadSettingsPresets): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "autoDownloadSettingsPresets")
            put(key = "low", value = dto.low) { data -> serialize(dto = data) }
            put(key = "medium", value = dto.medium) { data -> serialize(dto = data) }
            put(key = "high", value = dto.high) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: AutosaveSettingsScopePrivateChats): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "autosaveSettingsScopePrivateChats")
        }
    }

    private fun serialize(dto: AutosaveSettingsScopeGroupChats): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "autosaveSettingsScopeGroupChats")
        }
    }

    private fun serialize(dto: AutosaveSettingsScopeChannelChats): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "autosaveSettingsScopeChannelChats")
        }
    }

    private fun serialize(dto: AutosaveSettingsScopeChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "autosaveSettingsScopeChat")
            put(key = "chat_id", long = dto.chatId)
        }
    }

    private fun serialize(dto: ScopeAutosaveSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "scopeAutosaveSettings")
            put(key = "autosave_photos", boolean = dto.autosavePhotos)
            put(key = "autosave_videos", boolean = dto.autosaveVideos)
            put(key = "max_video_file_size", long = dto.maxVideoFileSize)
        }
    }

    private fun serialize(dto: AutosaveSettingsException): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "autosaveSettingsException")
            put(key = "chat_id", long = dto.chatId)
            put(key = "settings", value = dto.settings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: AutosaveSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "autosaveSettings")
            put(key = "private_chat_settings", value = dto.privateChatSettings) { data -> serialize(dto = data) }
            put(key = "group_settings", value = dto.groupSettings) { data -> serialize(dto = data) }
            put(key = "channel_settings", value = dto.channelSettings) { data -> serialize(dto = data) }
            put(key = "exceptions", objects = dto.exceptions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ConnectionStateWaitingForNetwork): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "connectionStateWaitingForNetwork")
        }
    }

    private fun serialize(dto: ConnectionStateConnectingToProxy): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "connectionStateConnectingToProxy")
        }
    }

    private fun serialize(dto: ConnectionStateConnecting): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "connectionStateConnecting")
        }
    }

    private fun serialize(dto: ConnectionStateUpdating): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "connectionStateUpdating")
        }
    }

    private fun serialize(dto: ConnectionStateReady): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "connectionStateReady")
        }
    }

    private fun serialize(dto: TopChatCategoryUsers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "topChatCategoryUsers")
        }
    }

    private fun serialize(dto: TopChatCategoryBots): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "topChatCategoryBots")
        }
    }

    private fun serialize(dto: TopChatCategoryGroups): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "topChatCategoryGroups")
        }
    }

    private fun serialize(dto: TopChatCategoryChannels): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "topChatCategoryChannels")
        }
    }

    private fun serialize(dto: TopChatCategoryInlineBots): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "topChatCategoryInlineBots")
        }
    }

    private fun serialize(dto: TopChatCategoryWebAppBots): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "topChatCategoryWebAppBots")
        }
    }

    private fun serialize(dto: TopChatCategoryCalls): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "topChatCategoryCalls")
        }
    }

    private fun serialize(dto: TopChatCategoryForwardChats): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "topChatCategoryForwardChats")
        }
    }

    private fun serialize(dto: FoundPosition): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "foundPosition")
            put(key = "position", int = dto.position)
        }
    }

    private fun serialize(dto: FoundPositions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "foundPositions")
            put(key = "total_count", int = dto.totalCount)
            put(key = "positions", ints = dto.positions)
        }
    }

    private fun serialize(dto: TMeUrlTypeUser): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "tMeUrlTypeUser")
            put(key = "user_id", long = dto.userId)
        }
    }

    private fun serialize(dto: TMeUrlTypeSupergroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "tMeUrlTypeSupergroup")
            put(key = "supergroup_id", long = dto.supergroupId)
        }
    }

    private fun serialize(dto: TMeUrlTypeChatInvite): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "tMeUrlTypeChatInvite")
            put(key = "info", value = dto.info) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: TMeUrlTypeStickerSet): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "tMeUrlTypeStickerSet")
            put(key = "sticker_set_id", long = dto.stickerSetId)
        }
    }

    private fun serialize(dto: TMeUrl): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "tMeUrl")
            put(key = "url", string = dto.url)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: TMeUrls): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "tMeUrls")
            put(key = "urls", objects = dto.urls) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: SuggestedActionEnableArchiveAndMuteNewChats): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionEnableArchiveAndMuteNewChats")
        }
    }

    private fun serialize(dto: SuggestedActionCheckPassword): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionCheckPassword")
        }
    }

    private fun serialize(dto: SuggestedActionCheckPhoneNumber): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionCheckPhoneNumber")
        }
    }

    private fun serialize(dto: SuggestedActionViewChecksHint): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionViewChecksHint")
        }
    }

    private fun serialize(dto: SuggestedActionConvertToBroadcastGroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionConvertToBroadcastGroup")
            put(key = "supergroup_id", long = dto.supergroupId)
        }
    }

    private fun serialize(dto: SuggestedActionSetPassword): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionSetPassword")
            put(key = "authorization_delay", int = dto.authorizationDelay)
        }
    }

    private fun serialize(dto: SuggestedActionUpgradePremium): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionUpgradePremium")
        }
    }

    private fun serialize(dto: SuggestedActionRestorePremium): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionRestorePremium")
        }
    }

    private fun serialize(dto: SuggestedActionSubscribeToAnnualPremium): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionSubscribeToAnnualPremium")
        }
    }

    private fun serialize(dto: SuggestedActionGiftPremiumForChristmas): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionGiftPremiumForChristmas")
        }
    }

    private fun serialize(dto: SuggestedActionSetBirthdate): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionSetBirthdate")
        }
    }

    private fun serialize(dto: SuggestedActionSetProfilePhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionSetProfilePhoto")
        }
    }

    private fun serialize(dto: SuggestedActionExtendPremium): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionExtendPremium")
            put(key = "manage_premium_subscription_url", string = dto.managePremiumSubscriptionUrl)
        }
    }

    private fun serialize(dto: SuggestedActionExtendStarSubscriptions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionExtendStarSubscriptions")
        }
    }

    private fun serialize(dto: SuggestedActionCustom): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "suggestedActionCustom")
            put(key = "name", string = dto.name)
            put(key = "title", value = dto.title) { data -> serialize(dto = data) }
            put(key = "description", value = dto.description) { data -> serialize(dto = data) }
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: Count): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "count")
            put(key = "count", int = dto.count)
        }
    }

    private fun serialize(dto: Text): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "text")
            put(key = "text", string = dto.text)
        }
    }

    private fun serialize(dto: Data): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "data")
            put(key = "data", bytes = dto.data)
        }
    }

    private fun serialize(dto: Seconds): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "seconds")
            put(key = "seconds", double = dto.seconds)
        }
    }

    private fun serialize(dto: FileDownloadedPrefixSize): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "fileDownloadedPrefixSize")
            put(key = "size", long = dto.size)
        }
    }

    private fun serialize(dto: StarCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starCount")
            put(key = "star_count", long = dto.starCount)
        }
    }

    private fun serialize(dto: DeepLinkInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "deepLinkInfo")
            put(key = "text", value = dto.text) { data -> serialize(dto = data) }
            put(key = "need_update_application", boolean = dto.needUpdateApplication)
        }
    }

    private fun serialize(dto: TextParseModeMarkdown): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textParseModeMarkdown")
            put(key = "version", int = dto.version)
        }
    }

    private fun serialize(dto: TextParseModeHTML): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "textParseModeHTML")
        }
    }

    private fun serialize(dto: ProxyTypeSocks5): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "proxyTypeSocks5")
            put(key = "username", string = dto.username)
            put(key = "password", string = dto.password)
        }
    }

    private fun serialize(dto: ProxyTypeHttp): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "proxyTypeHttp")
            put(key = "username", string = dto.username)
            put(key = "password", string = dto.password)
            put(key = "http_only", boolean = dto.httpOnly)
        }
    }

    private fun serialize(dto: ProxyTypeMtproto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "proxyTypeMtproto")
            put(key = "secret", string = dto.secret)
        }
    }

    private fun serialize(dto: Proxy): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "proxy")
            put(key = "id", int = dto.id)
            put(key = "server", string = dto.server)
            put(key = "port", int = dto.port)
            put(key = "last_used_date", int = dto.lastUsedDate)
            put(key = "is_enabled", boolean = dto.isEnabled)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: Proxies): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "proxies")
            put(key = "proxies", objects = dto.proxies) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: InputSticker): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "inputSticker")
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
            put(key = "format", value = dto.format) { data -> serialize(dto = data) }
            put(key = "emojis", string = dto.emojis)
            put(key = "mask_position", value = dto.maskPosition) { data -> serialize(dto = data) }
            put(key = "keywords", strings = dto.keywords)
        }
    }

    private fun serialize(dto: DateRange): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "dateRange")
            put(key = "start_date", int = dto.startDate)
            put(key = "end_date", int = dto.endDate)
        }
    }

    private fun serialize(dto: StatisticalValue): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "statisticalValue")
            put(key = "value", double = dto.value)
            put(key = "previous_value", double = dto.previousValue)
            put(key = "growth_rate_percentage", double = dto.growthRatePercentage)
        }
    }

    private fun serialize(dto: StatisticalGraphData): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "statisticalGraphData")
            put(key = "json_data", string = dto.jsonData)
            put(key = "zoom_token", string = dto.zoomToken)
        }
    }

    private fun serialize(dto: StatisticalGraphAsync): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "statisticalGraphAsync")
            put(key = "token", string = dto.token)
        }
    }

    private fun serialize(dto: StatisticalGraphError): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "statisticalGraphError")
            put(key = "error_message", string = dto.errorMessage)
        }
    }

    private fun serialize(dto: ChatStatisticsObjectTypeMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatStatisticsObjectTypeMessage")
            put(key = "message_id", long = dto.messageId)
        }
    }

    private fun serialize(dto: ChatStatisticsObjectTypeStory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatStatisticsObjectTypeStory")
            put(key = "story_id", int = dto.storyId)
        }
    }

    private fun serialize(dto: ChatStatisticsInteractionInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatStatisticsInteractionInfo")
            put(key = "object_type", value = dto.objectType) { data -> serialize(dto = data) }
            put(key = "view_count", int = dto.viewCount)
            put(key = "forward_count", int = dto.forwardCount)
            put(key = "reaction_count", int = dto.reactionCount)
        }
    }

    private fun serialize(dto: ChatStatisticsMessageSenderInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatStatisticsMessageSenderInfo")
            put(key = "user_id", long = dto.userId)
            put(key = "sent_message_count", int = dto.sentMessageCount)
            put(key = "average_character_count", int = dto.averageCharacterCount)
        }
    }

    private fun serialize(dto: ChatStatisticsAdministratorActionsInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatStatisticsAdministratorActionsInfo")
            put(key = "user_id", long = dto.userId)
            put(key = "deleted_message_count", int = dto.deletedMessageCount)
            put(key = "banned_user_count", int = dto.bannedUserCount)
            put(key = "restricted_user_count", int = dto.restrictedUserCount)
        }
    }

    private fun serialize(dto: ChatStatisticsInviterInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatStatisticsInviterInfo")
            put(key = "user_id", long = dto.userId)
            put(key = "added_member_count", int = dto.addedMemberCount)
        }
    }

    private fun serialize(dto: ChatStatisticsSupergroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatStatisticsSupergroup")
            put(key = "period", value = dto.period) { data -> serialize(dto = data) }
            put(key = "member_count", value = dto.memberCount) { data -> serialize(dto = data) }
            put(key = "message_count", value = dto.messageCount) { data -> serialize(dto = data) }
            put(key = "viewer_count", value = dto.viewerCount) { data -> serialize(dto = data) }
            put(key = "sender_count", value = dto.senderCount) { data -> serialize(dto = data) }
            put(key = "member_count_graph", value = dto.memberCountGraph) { data -> serialize(dto = data) }
            put(key = "join_graph", value = dto.joinGraph) { data -> serialize(dto = data) }
            put(key = "join_by_source_graph", value = dto.joinBySourceGraph) { data -> serialize(dto = data) }
            put(key = "language_graph", value = dto.languageGraph) { data -> serialize(dto = data) }
            put(key = "message_content_graph", value = dto.messageContentGraph) { data -> serialize(dto = data) }
            put(key = "action_graph", value = dto.actionGraph) { data -> serialize(dto = data) }
            put(key = "day_graph", value = dto.dayGraph) { data -> serialize(dto = data) }
            put(key = "week_graph", value = dto.weekGraph) { data -> serialize(dto = data) }
            put(key = "top_senders", objects = dto.topSenders) { data -> serialize(dto = data) }
            put(key = "top_administrators", objects = dto.topAdministrators) { data -> serialize(dto = data) }
            put(key = "top_inviters", objects = dto.topInviters) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatStatisticsChannel): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatStatisticsChannel")
            put(key = "period", value = dto.period) { data -> serialize(dto = data) }
            put(key = "member_count", value = dto.memberCount) { data -> serialize(dto = data) }
            put(key = "mean_message_view_count", value = dto.meanMessageViewCount) { data -> serialize(dto = data) }
            put(key = "mean_message_share_count", value = dto.meanMessageShareCount) { data -> serialize(dto = data) }
            put(key = "mean_message_reaction_count", value = dto.meanMessageReactionCount) { data -> serialize(dto = data) }
            put(key = "mean_story_view_count", value = dto.meanStoryViewCount) { data -> serialize(dto = data) }
            put(key = "mean_story_share_count", value = dto.meanStoryShareCount) { data -> serialize(dto = data) }
            put(key = "mean_story_reaction_count", value = dto.meanStoryReactionCount) { data -> serialize(dto = data) }
            put(key = "enabled_notifications_percentage", double = dto.enabledNotificationsPercentage)
            put(key = "member_count_graph", value = dto.memberCountGraph) { data -> serialize(dto = data) }
            put(key = "join_graph", value = dto.joinGraph) { data -> serialize(dto = data) }
            put(key = "mute_graph", value = dto.muteGraph) { data -> serialize(dto = data) }
            put(key = "view_count_by_hour_graph", value = dto.viewCountByHourGraph) { data -> serialize(dto = data) }
            put(key = "view_count_by_source_graph", value = dto.viewCountBySourceGraph) { data -> serialize(dto = data) }
            put(key = "join_by_source_graph", value = dto.joinBySourceGraph) { data -> serialize(dto = data) }
            put(key = "language_graph", value = dto.languageGraph) { data -> serialize(dto = data) }
            put(key = "message_interaction_graph", value = dto.messageInteractionGraph) { data -> serialize(dto = data) }
            put(key = "message_reaction_graph", value = dto.messageReactionGraph) { data -> serialize(dto = data) }
            put(key = "story_interaction_graph", value = dto.storyInteractionGraph) { data -> serialize(dto = data) }
            put(key = "story_reaction_graph", value = dto.storyReactionGraph) { data -> serialize(dto = data) }
            put(key = "instant_view_interaction_graph", value = dto.instantViewInteractionGraph) { data -> serialize(dto = data) }
            put(key = "recent_interactions", objects = dto.recentInteractions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatRevenueAmount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatRevenueAmount")
            put(key = "cryptocurrency", string = dto.cryptocurrency)
            put(key = "total_amount", long = dto.totalAmount)
            put(key = "balance_amount", long = dto.balanceAmount)
            put(key = "available_amount", long = dto.availableAmount)
            put(key = "withdrawal_enabled", boolean = dto.withdrawalEnabled)
        }
    }

    private fun serialize(dto: ChatRevenueStatistics): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatRevenueStatistics")
            put(key = "revenue_by_hour_graph", value = dto.revenueByHourGraph) { data -> serialize(dto = data) }
            put(key = "revenue_graph", value = dto.revenueGraph) { data -> serialize(dto = data) }
            put(key = "revenue_amount", value = dto.revenueAmount) { data -> serialize(dto = data) }
            put(key = "usd_rate", double = dto.usdRate)
        }
    }

    private fun serialize(dto: MessageStatistics): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "messageStatistics")
            put(key = "message_interaction_graph", value = dto.messageInteractionGraph) { data -> serialize(dto = data) }
            put(key = "message_reaction_graph", value = dto.messageReactionGraph) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StoryStatistics): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "storyStatistics")
            put(key = "story_interaction_graph", value = dto.storyInteractionGraph) { data -> serialize(dto = data) }
            put(key = "story_reaction_graph", value = dto.storyReactionGraph) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: RevenueWithdrawalStatePending): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "revenueWithdrawalStatePending")
        }
    }

    private fun serialize(dto: RevenueWithdrawalStateSucceeded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "revenueWithdrawalStateSucceeded")
            put(key = "date", int = dto.date)
            put(key = "url", string = dto.url)
        }
    }

    private fun serialize(dto: RevenueWithdrawalStateFailed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "revenueWithdrawalStateFailed")
        }
    }

    private fun serialize(dto: ChatRevenueTransactionTypeEarnings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatRevenueTransactionTypeEarnings")
            put(key = "start_date", int = dto.startDate)
            put(key = "end_date", int = dto.endDate)
        }
    }

    private fun serialize(dto: ChatRevenueTransactionTypeWithdrawal): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatRevenueTransactionTypeWithdrawal")
            put(key = "withdrawal_date", int = dto.withdrawalDate)
            put(key = "provider", string = dto.provider)
            put(key = "state", value = dto.state) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatRevenueTransactionTypeRefund): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatRevenueTransactionTypeRefund")
            put(key = "refund_date", int = dto.refundDate)
            put(key = "provider", string = dto.provider)
        }
    }

    private fun serialize(dto: ChatRevenueTransaction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatRevenueTransaction")
            put(key = "cryptocurrency", string = dto.cryptocurrency)
            put(key = "cryptocurrency_amount", long = dto.cryptocurrencyAmount)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: ChatRevenueTransactions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "chatRevenueTransactions")
            put(key = "total_count", int = dto.totalCount)
            put(key = "transactions", objects = dto.transactions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: StarRevenueStatus): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starRevenueStatus")
            put(key = "total_amount", value = dto.totalAmount) { data -> serialize(dto = data) }
            put(key = "current_amount", value = dto.currentAmount) { data -> serialize(dto = data) }
            put(key = "available_amount", value = dto.availableAmount) { data -> serialize(dto = data) }
            put(key = "withdrawal_enabled", boolean = dto.withdrawalEnabled)
            put(key = "next_withdrawal_in", int = dto.nextWithdrawalIn)
        }
    }

    private fun serialize(dto: StarRevenueStatistics): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "starRevenueStatistics")
            put(key = "revenue_by_day_graph", value = dto.revenueByDayGraph) { data -> serialize(dto = data) }
            put(key = "status", value = dto.status) { data -> serialize(dto = data) }
            put(key = "usd_rate", double = dto.usdRate)
        }
    }

    private fun serialize(dto: Point): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "point")
            put(key = "x", double = dto.x)
            put(key = "y", double = dto.y)
        }
    }

    private fun serialize(dto: VectorPathCommandLine): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "vectorPathCommandLine")
            put(key = "end_point", value = dto.endPoint) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: VectorPathCommandCubicBezierCurve): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "vectorPathCommandCubicBezierCurve")
            put(key = "start_control_point", value = dto.startControlPoint) { data -> serialize(dto = data) }
            put(key = "end_control_point", value = dto.endControlPoint) { data -> serialize(dto = data) }
            put(key = "end_point", value = dto.endPoint) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: BotCommandScopeDefault): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botCommandScopeDefault")
        }
    }

    private fun serialize(dto: BotCommandScopeAllPrivateChats): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botCommandScopeAllPrivateChats")
        }
    }

    private fun serialize(dto: BotCommandScopeAllGroupChats): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botCommandScopeAllGroupChats")
        }
    }

    private fun serialize(dto: BotCommandScopeAllChatAdministrators): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botCommandScopeAllChatAdministrators")
        }
    }

    private fun serialize(dto: BotCommandScopeChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botCommandScopeChat")
            put(key = "chat_id", long = dto.chatId)
        }
    }

    private fun serialize(dto: BotCommandScopeChatAdministrators): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botCommandScopeChatAdministrators")
            put(key = "chat_id", long = dto.chatId)
        }
    }

    private fun serialize(dto: BotCommandScopeChatMember): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "botCommandScopeChatMember")
            put(key = "chat_id", long = dto.chatId)
            put(key = "user_id", long = dto.userId)
        }
    }

    private fun serialize(dto: PhoneNumberCodeTypeChange): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "phoneNumberCodeTypeChange")
        }
    }

    private fun serialize(dto: PhoneNumberCodeTypeVerify): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "phoneNumberCodeTypeVerify")
        }
    }

    private fun serialize(dto: PhoneNumberCodeTypeConfirmOwnership): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "phoneNumberCodeTypeConfirmOwnership")
            put(key = "hash", string = dto.hash)
        }
    }

    private fun serialize(dto: UpdateAuthorizationState): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateAuthorizationState")
            put(key = "authorization_state", value = dto.authorizationState) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateNewMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNewMessage")
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateMessageSendAcknowledged): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateMessageSendAcknowledged")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
        }
    }

    private fun serialize(dto: UpdateMessageSendSucceeded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateMessageSendSucceeded")
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
            put(key = "old_message_id", long = dto.oldMessageId)
        }
    }

    private fun serialize(dto: UpdateMessageSendFailed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateMessageSendFailed")
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
            put(key = "old_message_id", long = dto.oldMessageId)
            put(key = "error", value = dto.error) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateMessageContent): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateMessageContent")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "new_content", value = dto.newContent) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateMessageEdited): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateMessageEdited")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "edit_date", int = dto.editDate)
            put(key = "reply_markup", value = dto.replyMarkup) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateMessageIsPinned): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateMessageIsPinned")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "is_pinned", boolean = dto.isPinned)
        }
    }

    private fun serialize(dto: UpdateMessageInteractionInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateMessageInteractionInfo")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "interaction_info", value = dto.interactionInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateMessageContentOpened): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateMessageContentOpened")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
        }
    }

    private fun serialize(dto: UpdateMessageMentionRead): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateMessageMentionRead")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "unread_mention_count", int = dto.unreadMentionCount)
        }
    }

    private fun serialize(dto: UpdateMessageUnreadReactions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateMessageUnreadReactions")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "unread_reactions", objects = dto.unreadReactions) { data -> serialize(dto = data) }
            put(key = "unread_reaction_count", int = dto.unreadReactionCount)
        }
    }

    private fun serialize(dto: UpdateMessageFactCheck): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateMessageFactCheck")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "fact_check", value = dto.factCheck) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateMessageLiveLocationViewed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateMessageLiveLocationViewed")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
        }
    }

    private fun serialize(dto: UpdateVideoPublished): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateVideoPublished")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
        }
    }

    private fun serialize(dto: UpdateNewChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNewChat")
            put(key = "chat", value = dto.chat) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatTitle): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatTitle")
            put(key = "chat_id", long = dto.chatId)
            put(key = "title", string = dto.title)
        }
    }

    private fun serialize(dto: UpdateChatPhoto): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatPhoto")
            put(key = "chat_id", long = dto.chatId)
            put(key = "photo", value = dto.photo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatAccentColors): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatAccentColors")
            put(key = "chat_id", long = dto.chatId)
            put(key = "accent_color_id", int = dto.accentColorId)
            put(key = "background_custom_emoji_id", long = dto.backgroundCustomEmojiId)
            put(key = "profile_accent_color_id", int = dto.profileAccentColorId)
            put(key = "profile_background_custom_emoji_id", long = dto.profileBackgroundCustomEmojiId)
        }
    }

    private fun serialize(dto: UpdateChatPermissions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatPermissions")
            put(key = "chat_id", long = dto.chatId)
            put(key = "permissions", value = dto.permissions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatLastMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatLastMessage")
            put(key = "chat_id", long = dto.chatId)
            put(key = "last_message", value = dto.lastMessage) { data -> serialize(dto = data) }
            put(key = "positions", objects = dto.positions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatPosition): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatPosition")
            put(key = "chat_id", long = dto.chatId)
            put(key = "position", value = dto.position) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatAddedToList): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatAddedToList")
            put(key = "chat_id", long = dto.chatId)
            put(key = "chat_list", value = dto.chatList) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatRemovedFromList): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatRemovedFromList")
            put(key = "chat_id", long = dto.chatId)
            put(key = "chat_list", value = dto.chatList) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatReadInbox): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatReadInbox")
            put(key = "chat_id", long = dto.chatId)
            put(key = "last_read_inbox_message_id", long = dto.lastReadInboxMessageId)
            put(key = "unread_count", int = dto.unreadCount)
        }
    }

    private fun serialize(dto: UpdateChatReadOutbox): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatReadOutbox")
            put(key = "chat_id", long = dto.chatId)
            put(key = "last_read_outbox_message_id", long = dto.lastReadOutboxMessageId)
        }
    }

    private fun serialize(dto: UpdateChatActionBar): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatActionBar")
            put(key = "chat_id", long = dto.chatId)
            put(key = "action_bar", value = dto.actionBar) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatBusinessBotManageBar): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatBusinessBotManageBar")
            put(key = "chat_id", long = dto.chatId)
            put(key = "business_bot_manage_bar", value = dto.businessBotManageBar) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatAvailableReactions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatAvailableReactions")
            put(key = "chat_id", long = dto.chatId)
            put(key = "available_reactions", value = dto.availableReactions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatDraftMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatDraftMessage")
            put(key = "chat_id", long = dto.chatId)
            put(key = "draft_message", value = dto.draftMessage) { data -> serialize(dto = data) }
            put(key = "positions", objects = dto.positions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatEmojiStatus): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatEmojiStatus")
            put(key = "chat_id", long = dto.chatId)
            put(key = "emoji_status", value = dto.emojiStatus) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatMessageSender): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatMessageSender")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_sender_id", value = dto.messageSenderId) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatMessageAutoDeleteTime): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatMessageAutoDeleteTime")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_auto_delete_time", int = dto.messageAutoDeleteTime)
        }
    }

    private fun serialize(dto: UpdateChatNotificationSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatNotificationSettings")
            put(key = "chat_id", long = dto.chatId)
            put(key = "notification_settings", value = dto.notificationSettings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatPendingJoinRequests): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatPendingJoinRequests")
            put(key = "chat_id", long = dto.chatId)
            put(key = "pending_join_requests", value = dto.pendingJoinRequests) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatReplyMarkup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatReplyMarkup")
            put(key = "chat_id", long = dto.chatId)
            put(key = "reply_markup_message_id", long = dto.replyMarkupMessageId)
        }
    }

    private fun serialize(dto: UpdateChatBackground): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatBackground")
            put(key = "chat_id", long = dto.chatId)
            put(key = "background", value = dto.background) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatTheme): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatTheme")
            put(key = "chat_id", long = dto.chatId)
            put(key = "theme_name", string = dto.themeName)
        }
    }

    private fun serialize(dto: UpdateChatUnreadMentionCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatUnreadMentionCount")
            put(key = "chat_id", long = dto.chatId)
            put(key = "unread_mention_count", int = dto.unreadMentionCount)
        }
    }

    private fun serialize(dto: UpdateChatUnreadReactionCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatUnreadReactionCount")
            put(key = "chat_id", long = dto.chatId)
            put(key = "unread_reaction_count", int = dto.unreadReactionCount)
        }
    }

    private fun serialize(dto: UpdateChatVideoChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatVideoChat")
            put(key = "chat_id", long = dto.chatId)
            put(key = "video_chat", value = dto.videoChat) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatDefaultDisableNotification): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatDefaultDisableNotification")
            put(key = "chat_id", long = dto.chatId)
            put(key = "default_disable_notification", boolean = dto.defaultDisableNotification)
        }
    }

    private fun serialize(dto: UpdateChatHasProtectedContent): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatHasProtectedContent")
            put(key = "chat_id", long = dto.chatId)
            put(key = "has_protected_content", boolean = dto.hasProtectedContent)
        }
    }

    private fun serialize(dto: UpdateChatIsTranslatable): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatIsTranslatable")
            put(key = "chat_id", long = dto.chatId)
            put(key = "is_translatable", boolean = dto.isTranslatable)
        }
    }

    private fun serialize(dto: UpdateChatIsMarkedAsUnread): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatIsMarkedAsUnread")
            put(key = "chat_id", long = dto.chatId)
            put(key = "is_marked_as_unread", boolean = dto.isMarkedAsUnread)
        }
    }

    private fun serialize(dto: UpdateChatViewAsTopics): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatViewAsTopics")
            put(key = "chat_id", long = dto.chatId)
            put(key = "view_as_topics", boolean = dto.viewAsTopics)
        }
    }

    private fun serialize(dto: UpdateChatBlockList): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatBlockList")
            put(key = "chat_id", long = dto.chatId)
            put(key = "block_list", value = dto.blockList) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatHasScheduledMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatHasScheduledMessages")
            put(key = "chat_id", long = dto.chatId)
            put(key = "has_scheduled_messages", boolean = dto.hasScheduledMessages)
        }
    }

    private fun serialize(dto: UpdateChatFolders): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatFolders")
            put(key = "chat_folders", objects = dto.chatFolders) { data -> serialize(dto = data) }
            put(key = "main_chat_list_position", int = dto.mainChatListPosition)
            put(key = "are_tags_enabled", boolean = dto.areTagsEnabled)
        }
    }

    private fun serialize(dto: UpdateChatOnlineMemberCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatOnlineMemberCount")
            put(key = "chat_id", long = dto.chatId)
            put(key = "online_member_count", int = dto.onlineMemberCount)
        }
    }

    private fun serialize(dto: UpdateSavedMessagesTopic): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateSavedMessagesTopic")
            put(key = "topic", value = dto.topic) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateSavedMessagesTopicCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateSavedMessagesTopicCount")
            put(key = "topic_count", int = dto.topicCount)
        }
    }

    private fun serialize(dto: UpdateDirectMessagesChatTopic): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateDirectMessagesChatTopic")
            put(key = "topic", value = dto.topic) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateTopicMessageCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateTopicMessageCount")
            put(key = "chat_id", long = dto.chatId)
            put(key = "topic_id", value = dto.topicId) { data -> serialize(dto = data) }
            put(key = "message_count", int = dto.messageCount)
        }
    }

    private fun serialize(dto: UpdateQuickReplyShortcut): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateQuickReplyShortcut")
            put(key = "shortcut", value = dto.shortcut) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateQuickReplyShortcutDeleted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateQuickReplyShortcutDeleted")
            put(key = "shortcut_id", int = dto.shortcutId)
        }
    }

    private fun serialize(dto: UpdateQuickReplyShortcuts): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateQuickReplyShortcuts")
            put(key = "shortcut_ids", ints = dto.shortcutIds)
        }
    }

    private fun serialize(dto: UpdateQuickReplyShortcutMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateQuickReplyShortcutMessages")
            put(key = "shortcut_id", int = dto.shortcutId)
            put(key = "messages", objects = dto.messages) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateForumTopicInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateForumTopicInfo")
            put(key = "info", value = dto.info) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateForumTopic): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateForumTopic")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_thread_id", long = dto.messageThreadId)
            put(key = "is_pinned", boolean = dto.isPinned)
            put(key = "last_read_inbox_message_id", long = dto.lastReadInboxMessageId)
            put(key = "last_read_outbox_message_id", long = dto.lastReadOutboxMessageId)
            put(key = "unread_mention_count", int = dto.unreadMentionCount)
            put(key = "unread_reaction_count", int = dto.unreadReactionCount)
            put(key = "notification_settings", value = dto.notificationSettings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateScopeNotificationSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateScopeNotificationSettings")
            put(key = "scope", value = dto.scope) { data -> serialize(dto = data) }
            put(key = "notification_settings", value = dto.notificationSettings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateReactionNotificationSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateReactionNotificationSettings")
            put(key = "notification_settings", value = dto.notificationSettings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateNotification): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNotification")
            put(key = "notification_group_id", int = dto.notificationGroupId)
            put(key = "notification", value = dto.notification) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateNotificationGroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNotificationGroup")
            put(key = "notification_group_id", int = dto.notificationGroupId)
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
            put(key = "chat_id", long = dto.chatId)
            put(key = "notification_settings_chat_id", long = dto.notificationSettingsChatId)
            put(key = "notification_sound_id", long = dto.notificationSoundId)
            put(key = "total_count", int = dto.totalCount)
            put(key = "added_notifications", objects = dto.addedNotifications) { data -> serialize(dto = data) }
            put(key = "removed_notification_ids", ints = dto.removedNotificationIds)
        }
    }

    private fun serialize(dto: UpdateActiveNotifications): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateActiveNotifications")
            put(key = "groups", objects = dto.groups) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateHavePendingNotifications): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateHavePendingNotifications")
            put(key = "have_delayed_notifications", boolean = dto.haveDelayedNotifications)
            put(key = "have_unreceived_notifications", boolean = dto.haveUnreceivedNotifications)
        }
    }

    private fun serialize(dto: UpdateDeleteMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateDeleteMessages")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_ids", longs = dto.messageIds)
            put(key = "is_permanent", boolean = dto.isPermanent)
            put(key = "from_cache", boolean = dto.fromCache)
        }
    }

    private fun serialize(dto: UpdateChatAction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatAction")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_thread_id", long = dto.messageThreadId)
            put(key = "sender_id", value = dto.senderId) { data -> serialize(dto = data) }
            put(key = "action", value = dto.action) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateUserStatus): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateUserStatus")
            put(key = "user_id", long = dto.userId)
            put(key = "status", value = dto.status) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateUser): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateUser")
            put(key = "user", value = dto.user) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateBasicGroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateBasicGroup")
            put(key = "basic_group", value = dto.basicGroup) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateSupergroup): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateSupergroup")
            put(key = "supergroup", value = dto.supergroup) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateSecretChat): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateSecretChat")
            put(key = "secret_chat", value = dto.secretChat) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateUserFullInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateUserFullInfo")
            put(key = "user_id", long = dto.userId)
            put(key = "user_full_info", value = dto.userFullInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateBasicGroupFullInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateBasicGroupFullInfo")
            put(key = "basic_group_id", long = dto.basicGroupId)
            put(key = "basic_group_full_info", value = dto.basicGroupFullInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateSupergroupFullInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateSupergroupFullInfo")
            put(key = "supergroup_id", long = dto.supergroupId)
            put(key = "supergroup_full_info", value = dto.supergroupFullInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateServiceNotification): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateServiceNotification")
            put(key = "type", string = dto.type)
            put(key = "content", value = dto.content) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateFile): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateFile")
            put(key = "file", value = dto.file) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateFileGenerationStart): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateFileGenerationStart")
            put(key = "generation_id", long = dto.generationId)
            put(key = "original_path", string = dto.originalPath)
            put(key = "destination_path", string = dto.destinationPath)
            put(key = "conversion", string = dto.conversion)
        }
    }

    private fun serialize(dto: UpdateFileGenerationStop): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateFileGenerationStop")
            put(key = "generation_id", long = dto.generationId)
        }
    }

    private fun serialize(dto: UpdateFileDownloads): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateFileDownloads")
            put(key = "total_size", long = dto.totalSize)
            put(key = "total_count", int = dto.totalCount)
            put(key = "downloaded_size", long = dto.downloadedSize)
        }
    }

    private fun serialize(dto: UpdateFileAddedToDownloads): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateFileAddedToDownloads")
            put(key = "file_download", value = dto.fileDownload) { data -> serialize(dto = data) }
            put(key = "counts", value = dto.counts) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateFileDownload): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateFileDownload")
            put(key = "file_id", int = dto.fileId)
            put(key = "complete_date", int = dto.completeDate)
            put(key = "is_paused", boolean = dto.isPaused)
            put(key = "counts", value = dto.counts) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateFileRemovedFromDownloads): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateFileRemovedFromDownloads")
            put(key = "file_id", int = dto.fileId)
            put(key = "counts", value = dto.counts) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateApplicationVerificationRequired): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateApplicationVerificationRequired")
            put(key = "verification_id", long = dto.verificationId)
            put(key = "nonce", string = dto.nonce)
            put(key = "cloud_project_number", long = dto.cloudProjectNumber)
        }
    }

    private fun serialize(dto: UpdateApplicationRecaptchaVerificationRequired): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateApplicationRecaptchaVerificationRequired")
            put(key = "verification_id", long = dto.verificationId)
            put(key = "action", string = dto.action)
            put(key = "recaptcha_key_id", string = dto.recaptchaKeyId)
        }
    }

    private fun serialize(dto: UpdateCall): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateCall")
            put(key = "call", value = dto.call) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateGroupCall): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateGroupCall")
            put(key = "group_call", value = dto.groupCall) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateGroupCallParticipant): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateGroupCallParticipant")
            put(key = "group_call_id", int = dto.groupCallId)
            put(key = "participant", value = dto.participant) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateGroupCallParticipants): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateGroupCallParticipants")
            put(key = "group_call_id", int = dto.groupCallId)
            put(key = "participant_user_ids", longs = dto.participantUserIds)
        }
    }

    private fun serialize(dto: UpdateGroupCallVerificationState): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateGroupCallVerificationState")
            put(key = "group_call_id", int = dto.groupCallId)
            put(key = "generation", int = dto.generation)
            put(key = "emojis", strings = dto.emojis)
        }
    }

    private fun serialize(dto: UpdateNewCallSignalingData): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNewCallSignalingData")
            put(key = "call_id", int = dto.callId)
            put(key = "data", bytes = dto.data)
        }
    }

    private fun serialize(dto: UpdateUserPrivacySettingRules): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateUserPrivacySettingRules")
            put(key = "setting", value = dto.setting) { data -> serialize(dto = data) }
            put(key = "rules", value = dto.rules) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateUnreadMessageCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateUnreadMessageCount")
            put(key = "chat_list", value = dto.chatList) { data -> serialize(dto = data) }
            put(key = "unread_count", int = dto.unreadCount)
            put(key = "unread_unmuted_count", int = dto.unreadUnmutedCount)
        }
    }

    private fun serialize(dto: UpdateUnreadChatCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateUnreadChatCount")
            put(key = "chat_list", value = dto.chatList) { data -> serialize(dto = data) }
            put(key = "total_count", int = dto.totalCount)
            put(key = "unread_count", int = dto.unreadCount)
            put(key = "unread_unmuted_count", int = dto.unreadUnmutedCount)
            put(key = "marked_as_unread_count", int = dto.markedAsUnreadCount)
            put(key = "marked_as_unread_unmuted_count", int = dto.markedAsUnreadUnmutedCount)
        }
    }

    private fun serialize(dto: UpdateStory): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateStory")
            put(key = "story", value = dto.story) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateStoryDeleted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateStoryDeleted")
            put(key = "story_poster_chat_id", long = dto.storyPosterChatId)
            put(key = "story_id", int = dto.storyId)
        }
    }

    private fun serialize(dto: UpdateStoryPostSucceeded): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateStoryPostSucceeded")
            put(key = "story", value = dto.story) { data -> serialize(dto = data) }
            put(key = "old_story_id", int = dto.oldStoryId)
        }
    }

    private fun serialize(dto: UpdateStoryPostFailed): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateStoryPostFailed")
            put(key = "story", value = dto.story) { data -> serialize(dto = data) }
            put(key = "error", value = dto.error) { data -> serialize(dto = data) }
            put(key = "error_type", value = dto.errorType) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatActiveStories): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatActiveStories")
            put(key = "active_stories", value = dto.activeStories) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateStoryListChatCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateStoryListChatCount")
            put(key = "story_list", value = dto.storyList) { data -> serialize(dto = data) }
            put(key = "chat_count", int = dto.chatCount)
        }
    }

    private fun serialize(dto: UpdateStoryStealthMode): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateStoryStealthMode")
            put(key = "active_until_date", int = dto.activeUntilDate)
            put(key = "cooldown_until_date", int = dto.cooldownUntilDate)
        }
    }

    private fun serialize(dto: UpdateOption): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateOption")
            put(key = "name", string = dto.name)
            put(key = "value", value = dto.value) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateStickerSet): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateStickerSet")
            put(key = "sticker_set", value = dto.stickerSet) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateInstalledStickerSets): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateInstalledStickerSets")
            put(key = "sticker_type", value = dto.stickerType) { data -> serialize(dto = data) }
            put(key = "sticker_set_ids", longs = dto.stickerSetIds)
        }
    }

    private fun serialize(dto: UpdateTrendingStickerSets): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateTrendingStickerSets")
            put(key = "sticker_type", value = dto.stickerType) { data -> serialize(dto = data) }
            put(key = "sticker_sets", value = dto.stickerSets) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateRecentStickers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateRecentStickers")
            put(key = "is_attached", boolean = dto.isAttached)
            put(key = "sticker_ids", ints = dto.stickerIds)
        }
    }

    private fun serialize(dto: UpdateFavoriteStickers): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateFavoriteStickers")
            put(key = "sticker_ids", ints = dto.stickerIds)
        }
    }

    private fun serialize(dto: UpdateSavedAnimations): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateSavedAnimations")
            put(key = "animation_ids", ints = dto.animationIds)
        }
    }

    private fun serialize(dto: UpdateSavedNotificationSounds): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateSavedNotificationSounds")
            put(key = "notification_sound_ids", longs = dto.notificationSoundIds)
        }
    }

    private fun serialize(dto: UpdateDefaultBackground): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateDefaultBackground")
            put(key = "for_dark_theme", boolean = dto.forDarkTheme)
            put(key = "background", value = dto.background) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatThemes): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatThemes")
            put(key = "chat_themes", objects = dto.chatThemes) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateAccentColors): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateAccentColors")
            put(key = "colors", objects = dto.colors) { data -> serialize(dto = data) }
            put(key = "available_accent_color_ids", ints = dto.availableAccentColorIds)
        }
    }

    private fun serialize(dto: UpdateProfileAccentColors): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateProfileAccentColors")
            put(key = "colors", objects = dto.colors) { data -> serialize(dto = data) }
            put(key = "available_accent_color_ids", ints = dto.availableAccentColorIds)
        }
    }

    private fun serialize(dto: UpdateLanguagePackStrings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateLanguagePackStrings")
            put(key = "localization_target", string = dto.localizationTarget)
            put(key = "language_pack_id", string = dto.languagePackId)
            put(key = "strings", objects = dto.strings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateConnectionState): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateConnectionState")
            put(key = "state", value = dto.state) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateFreezeState): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateFreezeState")
            put(key = "is_frozen", boolean = dto.isFrozen)
            put(key = "freezing_date", int = dto.freezingDate)
            put(key = "deletion_date", int = dto.deletionDate)
            put(key = "appeal_link", string = dto.appealLink)
        }
    }

    private fun serialize(dto: UpdateTermsOfService): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateTermsOfService")
            put(key = "terms_of_service_id", string = dto.termsOfServiceId)
            put(key = "terms_of_service", value = dto.termsOfService) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateUnconfirmedSession): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateUnconfirmedSession")
            put(key = "session", value = dto.session) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateAttachmentMenuBots): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateAttachmentMenuBots")
            put(key = "bots", objects = dto.bots) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateWebAppMessageSent): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateWebAppMessageSent")
            put(key = "web_app_launch_id", long = dto.webAppLaunchId)
        }
    }

    private fun serialize(dto: UpdateActiveEmojiReactions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateActiveEmojiReactions")
            put(key = "emojis", strings = dto.emojis)
        }
    }

    private fun serialize(dto: UpdateAvailableMessageEffects): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateAvailableMessageEffects")
            put(key = "reaction_effect_ids", longs = dto.reactionEffectIds)
            put(key = "sticker_effect_ids", longs = dto.stickerEffectIds)
        }
    }

    private fun serialize(dto: UpdateDefaultReactionType): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateDefaultReactionType")
            put(key = "reaction_type", value = dto.reactionType) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateDefaultPaidReactionType): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateDefaultPaidReactionType")
            put(key = "type", value = dto.type) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateSavedMessagesTags): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateSavedMessagesTags")
            put(key = "saved_messages_topic_id", long = dto.savedMessagesTopicId)
            put(key = "tags", value = dto.tags) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateActiveLiveLocationMessages): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateActiveLiveLocationMessages")
            put(key = "messages", objects = dto.messages) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateOwnedStarCount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateOwnedStarCount")
            put(key = "star_amount", value = dto.starAmount) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatRevenueAmount): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatRevenueAmount")
            put(key = "chat_id", long = dto.chatId)
            put(key = "revenue_amount", value = dto.revenueAmount) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateStarRevenueStatus): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateStarRevenueStatus")
            put(key = "owner_id", value = dto.ownerId) { data -> serialize(dto = data) }
            put(key = "status", value = dto.status) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateSpeechRecognitionTrial): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateSpeechRecognitionTrial")
            put(key = "max_media_duration", int = dto.maxMediaDuration)
            put(key = "weekly_count", int = dto.weeklyCount)
            put(key = "left_count", int = dto.leftCount)
            put(key = "next_reset_date", int = dto.nextResetDate)
        }
    }

    private fun serialize(dto: UpdateDiceEmojis): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateDiceEmojis")
            put(key = "emojis", strings = dto.emojis)
        }
    }

    private fun serialize(dto: UpdateAnimatedEmojiMessageClicked): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateAnimatedEmojiMessageClicked")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "sticker", value = dto.sticker) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateAnimationSearchParameters): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateAnimationSearchParameters")
            put(key = "provider", string = dto.provider)
            put(key = "emojis", strings = dto.emojis)
        }
    }

    private fun serialize(dto: UpdateSuggestedActions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateSuggestedActions")
            put(key = "added_actions", objects = dto.addedActions) { data -> serialize(dto = data) }
            put(key = "removed_actions", objects = dto.removedActions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateSpeedLimitNotification): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateSpeedLimitNotification")
            put(key = "is_upload", boolean = dto.isUpload)
        }
    }

    private fun serialize(dto: UpdateContactCloseBirthdays): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateContactCloseBirthdays")
            put(key = "close_birthday_users", objects = dto.closeBirthdayUsers) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateAutosaveSettings): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateAutosaveSettings")
            put(key = "scope", value = dto.scope) { data -> serialize(dto = data) }
            put(key = "settings", value = dto.settings) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateBusinessConnection): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateBusinessConnection")
            put(key = "connection", value = dto.connection) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateNewBusinessMessage): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNewBusinessMessage")
            put(key = "connection_id", string = dto.connectionId)
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateBusinessMessageEdited): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateBusinessMessageEdited")
            put(key = "connection_id", string = dto.connectionId)
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateBusinessMessagesDeleted): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateBusinessMessagesDeleted")
            put(key = "connection_id", string = dto.connectionId)
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_ids", longs = dto.messageIds)
        }
    }

    private fun serialize(dto: UpdateNewInlineQuery): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNewInlineQuery")
            put(key = "id", long = dto.id)
            put(key = "sender_user_id", long = dto.senderUserId)
            put(key = "user_location", value = dto.userLocation) { data -> serialize(dto = data) }
            put(key = "chat_type", value = dto.chatType) { data -> serialize(dto = data) }
            put(key = "query", string = dto.query)
            put(key = "offset", string = dto.offset)
        }
    }

    private fun serialize(dto: UpdateNewChosenInlineResult): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNewChosenInlineResult")
            put(key = "sender_user_id", long = dto.senderUserId)
            put(key = "user_location", value = dto.userLocation) { data -> serialize(dto = data) }
            put(key = "query", string = dto.query)
            put(key = "result_id", string = dto.resultId)
            put(key = "inline_message_id", string = dto.inlineMessageId)
        }
    }

    private fun serialize(dto: UpdateNewCallbackQuery): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNewCallbackQuery")
            put(key = "id", long = dto.id)
            put(key = "sender_user_id", long = dto.senderUserId)
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "chat_instance", long = dto.chatInstance)
            put(key = "payload", value = dto.payload) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateNewInlineCallbackQuery): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNewInlineCallbackQuery")
            put(key = "id", long = dto.id)
            put(key = "sender_user_id", long = dto.senderUserId)
            put(key = "inline_message_id", string = dto.inlineMessageId)
            put(key = "chat_instance", long = dto.chatInstance)
            put(key = "payload", value = dto.payload) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateNewBusinessCallbackQuery): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNewBusinessCallbackQuery")
            put(key = "id", long = dto.id)
            put(key = "sender_user_id", long = dto.senderUserId)
            put(key = "connection_id", string = dto.connectionId)
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
            put(key = "chat_instance", long = dto.chatInstance)
            put(key = "payload", value = dto.payload) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateNewShippingQuery): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNewShippingQuery")
            put(key = "id", long = dto.id)
            put(key = "sender_user_id", long = dto.senderUserId)
            put(key = "invoice_payload", string = dto.invoicePayload)
            put(key = "shipping_address", value = dto.shippingAddress) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateNewPreCheckoutQuery): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNewPreCheckoutQuery")
            put(key = "id", long = dto.id)
            put(key = "sender_user_id", long = dto.senderUserId)
            put(key = "currency", string = dto.currency)
            put(key = "total_amount", long = dto.totalAmount)
            put(key = "invoice_payload", bytes = dto.invoicePayload)
            put(key = "shipping_option_id", string = dto.shippingOptionId)
            put(key = "order_info", value = dto.orderInfo) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateNewCustomEvent): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNewCustomEvent")
            put(key = "event", string = dto.event)
        }
    }

    private fun serialize(dto: UpdateNewCustomQuery): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNewCustomQuery")
            put(key = "id", long = dto.id)
            put(key = "data", string = dto.data)
            put(key = "timeout", int = dto.timeout)
        }
    }

    private fun serialize(dto: UpdatePoll): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updatePoll")
            put(key = "poll", value = dto.poll) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdatePollAnswer): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updatePollAnswer")
            put(key = "poll_id", long = dto.pollId)
            put(key = "voter_id", value = dto.voterId) { data -> serialize(dto = data) }
            put(key = "option_ids", ints = dto.optionIds)
        }
    }

    private fun serialize(dto: UpdateChatMember): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatMember")
            put(key = "chat_id", long = dto.chatId)
            put(key = "actor_user_id", long = dto.actorUserId)
            put(key = "date", int = dto.date)
            put(key = "invite_link", value = dto.inviteLink) { data -> serialize(dto = data) }
            put(key = "via_join_request", boolean = dto.viaJoinRequest)
            put(key = "via_chat_folder_invite_link", boolean = dto.viaChatFolderInviteLink)
            put(key = "old_chat_member", value = dto.oldChatMember) { data -> serialize(dto = data) }
            put(key = "new_chat_member", value = dto.newChatMember) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateNewChatJoinRequest): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateNewChatJoinRequest")
            put(key = "chat_id", long = dto.chatId)
            put(key = "request", value = dto.request) { data -> serialize(dto = data) }
            put(key = "user_chat_id", long = dto.userChatId)
            put(key = "invite_link", value = dto.inviteLink) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateChatBoost): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateChatBoost")
            put(key = "chat_id", long = dto.chatId)
            put(key = "boost", value = dto.boost) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateMessageReaction): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateMessageReaction")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "actor_id", value = dto.actorId) { data -> serialize(dto = data) }
            put(key = "date", int = dto.date)
            put(key = "old_reaction_types", objects = dto.oldReactionTypes) { data -> serialize(dto = data) }
            put(key = "new_reaction_types", objects = dto.newReactionTypes) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdateMessageReactions): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updateMessageReactions")
            put(key = "chat_id", long = dto.chatId)
            put(key = "message_id", long = dto.messageId)
            put(key = "date", int = dto.date)
            put(key = "reactions", objects = dto.reactions) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: UpdatePaidMediaPurchased): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updatePaidMediaPurchased")
            put(key = "user_id", long = dto.userId)
            put(key = "payload", string = dto.payload)
        }
    }

    private fun serialize(dto: Updates): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "updates")
            put(key = "updates", objects = dto.updates) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: LogStreamDefault): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "logStreamDefault")
        }
    }

    private fun serialize(dto: LogStreamFile): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "logStreamFile")
            put(key = "path", string = dto.path)
            put(key = "max_file_size", long = dto.maxFileSize)
            put(key = "redirect_stderr", boolean = dto.redirectStderr)
        }
    }

    private fun serialize(dto: LogStreamEmpty): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "logStreamEmpty")
        }
    }

    private fun serialize(dto: LogVerbosityLevel): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "logVerbosityLevel")
            put(key = "verbosity_level", int = dto.verbosityLevel)
        }
    }

    private fun serialize(dto: LogTags): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "logTags")
            put(key = "tags", strings = dto.tags)
        }
    }

    private fun serialize(dto: UserSupportInfo): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "userSupportInfo")
            put(key = "message", value = dto.message) { data -> serialize(dto = data) }
            put(key = "author", string = dto.author)
            put(key = "date", int = dto.date)
        }
    }

    private fun serialize(dto: TestInt): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "testInt")
            put(key = "value", int = dto.value)
        }
    }

    private fun serialize(dto: TestString): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "testString")
            put(key = "value", string = dto.value)
        }
    }

    private fun serialize(dto: TestBytes): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "testBytes")
            put(key = "value", bytes = dto.value)
        }
    }

    private fun serialize(dto: TestVectorInt): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "testVectorInt")
            put(key = "value", ints = dto.value)
        }
    }

    private fun serialize(dto: TestVectorIntObject): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "testVectorIntObject")
            put(key = "value", objects = dto.value) { data -> serialize(dto = data) }
        }
    }

    private fun serialize(dto: TestVectorString): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "testVectorString")
            put(key = "value", strings = dto.value)
        }
    }

    private fun serialize(dto: TestVectorStringObject): JsonElement {
        return buildJsonObject {
            put(key = "@type", string = "testVectorStringObject")
            put(key = "value", objects = dto.value) { data -> serialize(dto = data) }
        }
    }
}
