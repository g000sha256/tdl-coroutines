/*
 * Copyright 2025 Georgii Ippolitov (g000sha256)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dev.g000sha256.tdl

import dev.g000sha256.tdl.dto.AccentColor
import dev.g000sha256.tdl.dto.AcceptedGiftTypes
import dev.g000sha256.tdl.dto.AccountInfo
import dev.g000sha256.tdl.dto.AccountTtl
import dev.g000sha256.tdl.dto.AddedReaction
import dev.g000sha256.tdl.dto.AddedReactions
import dev.g000sha256.tdl.dto.Address
import dev.g000sha256.tdl.dto.AdvertisementSponsor
import dev.g000sha256.tdl.dto.AffiliateInfo
import dev.g000sha256.tdl.dto.AffiliateProgramInfo
import dev.g000sha256.tdl.dto.AffiliateProgramParameters
import dev.g000sha256.tdl.dto.AffiliateProgramSortOrder
import dev.g000sha256.tdl.dto.AffiliateProgramSortOrderCreationDate
import dev.g000sha256.tdl.dto.AffiliateProgramSortOrderProfitability
import dev.g000sha256.tdl.dto.AffiliateProgramSortOrderRevenue
import dev.g000sha256.tdl.dto.AffiliateType
import dev.g000sha256.tdl.dto.AffiliateTypeBot
import dev.g000sha256.tdl.dto.AffiliateTypeChannel
import dev.g000sha256.tdl.dto.AffiliateTypeCurrentUser
import dev.g000sha256.tdl.dto.AlternativeVideo
import dev.g000sha256.tdl.dto.AnimatedChatPhoto
import dev.g000sha256.tdl.dto.AnimatedEmoji
import dev.g000sha256.tdl.dto.Animation
import dev.g000sha256.tdl.dto.Animations
import dev.g000sha256.tdl.dto.ArchiveChatListSettings
import dev.g000sha256.tdl.dto.AttachmentMenuBot
import dev.g000sha256.tdl.dto.AttachmentMenuBotColor
import dev.g000sha256.tdl.dto.Audio
import dev.g000sha256.tdl.dto.AuthenticationCodeInfo
import dev.g000sha256.tdl.dto.AuthenticationCodeType
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeCall
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeFirebaseAndroid
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeFirebaseIos
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeFlashCall
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeFragment
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeMissedCall
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeSms
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeSmsPhrase
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeSmsWord
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeTelegramMessage
import dev.g000sha256.tdl.dto.AuthorizationState
import dev.g000sha256.tdl.dto.AuthorizationStateClosed
import dev.g000sha256.tdl.dto.AuthorizationStateClosing
import dev.g000sha256.tdl.dto.AuthorizationStateLoggingOut
import dev.g000sha256.tdl.dto.AuthorizationStateReady
import dev.g000sha256.tdl.dto.AuthorizationStateWaitCode
import dev.g000sha256.tdl.dto.AuthorizationStateWaitEmailAddress
import dev.g000sha256.tdl.dto.AuthorizationStateWaitEmailCode
import dev.g000sha256.tdl.dto.AuthorizationStateWaitOtherDeviceConfirmation
import dev.g000sha256.tdl.dto.AuthorizationStateWaitPassword
import dev.g000sha256.tdl.dto.AuthorizationStateWaitPhoneNumber
import dev.g000sha256.tdl.dto.AuthorizationStateWaitPremiumPurchase
import dev.g000sha256.tdl.dto.AuthorizationStateWaitRegistration
import dev.g000sha256.tdl.dto.AuthorizationStateWaitTdlibParameters
import dev.g000sha256.tdl.dto.AutoDownloadSettings
import dev.g000sha256.tdl.dto.AutoDownloadSettingsPresets
import dev.g000sha256.tdl.dto.AutosaveSettings
import dev.g000sha256.tdl.dto.AutosaveSettingsException
import dev.g000sha256.tdl.dto.AutosaveSettingsScope
import dev.g000sha256.tdl.dto.AutosaveSettingsScopeChannelChats
import dev.g000sha256.tdl.dto.AutosaveSettingsScopeChat
import dev.g000sha256.tdl.dto.AutosaveSettingsScopeGroupChats
import dev.g000sha256.tdl.dto.AutosaveSettingsScopePrivateChats
import dev.g000sha256.tdl.dto.AvailableGift
import dev.g000sha256.tdl.dto.AvailableGifts
import dev.g000sha256.tdl.dto.AvailableReaction
import dev.g000sha256.tdl.dto.AvailableReactions
import dev.g000sha256.tdl.dto.Background
import dev.g000sha256.tdl.dto.BackgroundFill
import dev.g000sha256.tdl.dto.BackgroundFillFreeformGradient
import dev.g000sha256.tdl.dto.BackgroundFillGradient
import dev.g000sha256.tdl.dto.BackgroundFillSolid
import dev.g000sha256.tdl.dto.BackgroundType
import dev.g000sha256.tdl.dto.BackgroundTypeChatTheme
import dev.g000sha256.tdl.dto.BackgroundTypeFill
import dev.g000sha256.tdl.dto.BackgroundTypePattern
import dev.g000sha256.tdl.dto.BackgroundTypeWallpaper
import dev.g000sha256.tdl.dto.Backgrounds
import dev.g000sha256.tdl.dto.BankCardActionOpenUrl
import dev.g000sha256.tdl.dto.BankCardInfo
import dev.g000sha256.tdl.dto.BasicGroup
import dev.g000sha256.tdl.dto.BasicGroupFullInfo
import dev.g000sha256.tdl.dto.Birthdate
import dev.g000sha256.tdl.dto.BlockList
import dev.g000sha256.tdl.dto.BlockListMain
import dev.g000sha256.tdl.dto.BlockListStories
import dev.g000sha256.tdl.dto.BotCommand
import dev.g000sha256.tdl.dto.BotCommandScope
import dev.g000sha256.tdl.dto.BotCommandScopeAllChatAdministrators
import dev.g000sha256.tdl.dto.BotCommandScopeAllGroupChats
import dev.g000sha256.tdl.dto.BotCommandScopeAllPrivateChats
import dev.g000sha256.tdl.dto.BotCommandScopeChat
import dev.g000sha256.tdl.dto.BotCommandScopeChatAdministrators
import dev.g000sha256.tdl.dto.BotCommandScopeChatMember
import dev.g000sha256.tdl.dto.BotCommandScopeDefault
import dev.g000sha256.tdl.dto.BotCommands
import dev.g000sha256.tdl.dto.BotInfo
import dev.g000sha256.tdl.dto.BotMediaPreview
import dev.g000sha256.tdl.dto.BotMediaPreviewInfo
import dev.g000sha256.tdl.dto.BotMediaPreviews
import dev.g000sha256.tdl.dto.BotMenuButton
import dev.g000sha256.tdl.dto.BotVerification
import dev.g000sha256.tdl.dto.BotVerificationParameters
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReason
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReasonAcceptedRequest
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReasonAddedToAttachmentMenu
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReasonConnectedWebsite
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReasonLaunchedWebApp
import dev.g000sha256.tdl.dto.BusinessAwayMessageSchedule
import dev.g000sha256.tdl.dto.BusinessAwayMessageScheduleAlways
import dev.g000sha256.tdl.dto.BusinessAwayMessageScheduleCustom
import dev.g000sha256.tdl.dto.BusinessAwayMessageScheduleOutsideOfOpeningHours
import dev.g000sha256.tdl.dto.BusinessAwayMessageSettings
import dev.g000sha256.tdl.dto.BusinessBotManageBar
import dev.g000sha256.tdl.dto.BusinessBotRights
import dev.g000sha256.tdl.dto.BusinessChatLink
import dev.g000sha256.tdl.dto.BusinessChatLinkInfo
import dev.g000sha256.tdl.dto.BusinessChatLinks
import dev.g000sha256.tdl.dto.BusinessConnectedBot
import dev.g000sha256.tdl.dto.BusinessConnection
import dev.g000sha256.tdl.dto.BusinessFeature
import dev.g000sha256.tdl.dto.BusinessFeatureAccountLinks
import dev.g000sha256.tdl.dto.BusinessFeatureAwayMessage
import dev.g000sha256.tdl.dto.BusinessFeatureBots
import dev.g000sha256.tdl.dto.BusinessFeatureChatFolderTags
import dev.g000sha256.tdl.dto.BusinessFeatureEmojiStatus
import dev.g000sha256.tdl.dto.BusinessFeatureGreetingMessage
import dev.g000sha256.tdl.dto.BusinessFeatureLocation
import dev.g000sha256.tdl.dto.BusinessFeatureOpeningHours
import dev.g000sha256.tdl.dto.BusinessFeaturePromotionAnimation
import dev.g000sha256.tdl.dto.BusinessFeatureQuickReplies
import dev.g000sha256.tdl.dto.BusinessFeatureStartPage
import dev.g000sha256.tdl.dto.BusinessFeatureUpgradedStories
import dev.g000sha256.tdl.dto.BusinessFeatures
import dev.g000sha256.tdl.dto.BusinessGreetingMessageSettings
import dev.g000sha256.tdl.dto.BusinessInfo
import dev.g000sha256.tdl.dto.BusinessLocation
import dev.g000sha256.tdl.dto.BusinessMessage
import dev.g000sha256.tdl.dto.BusinessMessages
import dev.g000sha256.tdl.dto.BusinessOpeningHours
import dev.g000sha256.tdl.dto.BusinessOpeningHoursInterval
import dev.g000sha256.tdl.dto.BusinessRecipients
import dev.g000sha256.tdl.dto.BusinessStartPage
import dev.g000sha256.tdl.dto.Call
import dev.g000sha256.tdl.dto.CallDiscardReason
import dev.g000sha256.tdl.dto.CallDiscardReasonDeclined
import dev.g000sha256.tdl.dto.CallDiscardReasonDisconnected
import dev.g000sha256.tdl.dto.CallDiscardReasonEmpty
import dev.g000sha256.tdl.dto.CallDiscardReasonHungUp
import dev.g000sha256.tdl.dto.CallDiscardReasonMissed
import dev.g000sha256.tdl.dto.CallDiscardReasonUpgradeToGroupCall
import dev.g000sha256.tdl.dto.CallId
import dev.g000sha256.tdl.dto.CallProblem
import dev.g000sha256.tdl.dto.CallProblemDistortedSpeech
import dev.g000sha256.tdl.dto.CallProblemDistortedVideo
import dev.g000sha256.tdl.dto.CallProblemDropped
import dev.g000sha256.tdl.dto.CallProblemEcho
import dev.g000sha256.tdl.dto.CallProblemInterruptions
import dev.g000sha256.tdl.dto.CallProblemNoise
import dev.g000sha256.tdl.dto.CallProblemPixelatedVideo
import dev.g000sha256.tdl.dto.CallProblemSilentLocal
import dev.g000sha256.tdl.dto.CallProblemSilentRemote
import dev.g000sha256.tdl.dto.CallProtocol
import dev.g000sha256.tdl.dto.CallServer
import dev.g000sha256.tdl.dto.CallServerType
import dev.g000sha256.tdl.dto.CallServerTypeTelegramReflector
import dev.g000sha256.tdl.dto.CallServerTypeWebrtc
import dev.g000sha256.tdl.dto.CallState
import dev.g000sha256.tdl.dto.CallStateDiscarded
import dev.g000sha256.tdl.dto.CallStateError
import dev.g000sha256.tdl.dto.CallStateExchangingKeys
import dev.g000sha256.tdl.dto.CallStateHangingUp
import dev.g000sha256.tdl.dto.CallStatePending
import dev.g000sha256.tdl.dto.CallStateReady
import dev.g000sha256.tdl.dto.CallbackQueryAnswer
import dev.g000sha256.tdl.dto.CallbackQueryPayload
import dev.g000sha256.tdl.dto.CallbackQueryPayloadData
import dev.g000sha256.tdl.dto.CallbackQueryPayloadDataWithPassword
import dev.g000sha256.tdl.dto.CallbackQueryPayloadGame
import dev.g000sha256.tdl.dto.CanPostStoryResult
import dev.g000sha256.tdl.dto.CanPostStoryResultActiveStoryLimitExceeded
import dev.g000sha256.tdl.dto.CanPostStoryResultBoostNeeded
import dev.g000sha256.tdl.dto.CanPostStoryResultMonthlyLimitExceeded
import dev.g000sha256.tdl.dto.CanPostStoryResultOk
import dev.g000sha256.tdl.dto.CanPostStoryResultPremiumNeeded
import dev.g000sha256.tdl.dto.CanPostStoryResultWeeklyLimitExceeded
import dev.g000sha256.tdl.dto.CanSendMessageToUserResult
import dev.g000sha256.tdl.dto.CanSendMessageToUserResultOk
import dev.g000sha256.tdl.dto.CanSendMessageToUserResultUserHasPaidMessages
import dev.g000sha256.tdl.dto.CanSendMessageToUserResultUserIsDeleted
import dev.g000sha256.tdl.dto.CanSendMessageToUserResultUserRestrictsNewChats
import dev.g000sha256.tdl.dto.CanTransferOwnershipResult
import dev.g000sha256.tdl.dto.CanTransferOwnershipResultOk
import dev.g000sha256.tdl.dto.CanTransferOwnershipResultPasswordNeeded
import dev.g000sha256.tdl.dto.CanTransferOwnershipResultPasswordTooFresh
import dev.g000sha256.tdl.dto.CanTransferOwnershipResultSessionTooFresh
import dev.g000sha256.tdl.dto.Chat
import dev.g000sha256.tdl.dto.ChatAction
import dev.g000sha256.tdl.dto.ChatActionBar
import dev.g000sha256.tdl.dto.ChatActionBarAddContact
import dev.g000sha256.tdl.dto.ChatActionBarInviteMembers
import dev.g000sha256.tdl.dto.ChatActionBarJoinRequest
import dev.g000sha256.tdl.dto.ChatActionBarReportAddBlock
import dev.g000sha256.tdl.dto.ChatActionBarReportSpam
import dev.g000sha256.tdl.dto.ChatActionBarSharePhoneNumber
import dev.g000sha256.tdl.dto.ChatActionCancel
import dev.g000sha256.tdl.dto.ChatActionChoosingContact
import dev.g000sha256.tdl.dto.ChatActionChoosingLocation
import dev.g000sha256.tdl.dto.ChatActionChoosingSticker
import dev.g000sha256.tdl.dto.ChatActionRecordingVideo
import dev.g000sha256.tdl.dto.ChatActionRecordingVideoNote
import dev.g000sha256.tdl.dto.ChatActionRecordingVoiceNote
import dev.g000sha256.tdl.dto.ChatActionStartPlayingGame
import dev.g000sha256.tdl.dto.ChatActionTyping
import dev.g000sha256.tdl.dto.ChatActionUploadingDocument
import dev.g000sha256.tdl.dto.ChatActionUploadingPhoto
import dev.g000sha256.tdl.dto.ChatActionUploadingVideo
import dev.g000sha256.tdl.dto.ChatActionUploadingVideoNote
import dev.g000sha256.tdl.dto.ChatActionUploadingVoiceNote
import dev.g000sha256.tdl.dto.ChatActionWatchingAnimations
import dev.g000sha256.tdl.dto.ChatActiveStories
import dev.g000sha256.tdl.dto.ChatAdministrator
import dev.g000sha256.tdl.dto.ChatAdministratorRights
import dev.g000sha256.tdl.dto.ChatAdministrators
import dev.g000sha256.tdl.dto.ChatAvailableReactions
import dev.g000sha256.tdl.dto.ChatAvailableReactionsAll
import dev.g000sha256.tdl.dto.ChatAvailableReactionsSome
import dev.g000sha256.tdl.dto.ChatBackground
import dev.g000sha256.tdl.dto.ChatBoost
import dev.g000sha256.tdl.dto.ChatBoostFeatures
import dev.g000sha256.tdl.dto.ChatBoostLevelFeatures
import dev.g000sha256.tdl.dto.ChatBoostLink
import dev.g000sha256.tdl.dto.ChatBoostLinkInfo
import dev.g000sha256.tdl.dto.ChatBoostSlot
import dev.g000sha256.tdl.dto.ChatBoostSlots
import dev.g000sha256.tdl.dto.ChatBoostSource
import dev.g000sha256.tdl.dto.ChatBoostSourceGiftCode
import dev.g000sha256.tdl.dto.ChatBoostSourceGiveaway
import dev.g000sha256.tdl.dto.ChatBoostSourcePremium
import dev.g000sha256.tdl.dto.ChatBoostStatus
import dev.g000sha256.tdl.dto.ChatEvent
import dev.g000sha256.tdl.dto.ChatEventAccentColorChanged
import dev.g000sha256.tdl.dto.ChatEventAction
import dev.g000sha256.tdl.dto.ChatEventActiveUsernamesChanged
import dev.g000sha256.tdl.dto.ChatEventAutomaticTranslationToggled
import dev.g000sha256.tdl.dto.ChatEventAvailableReactionsChanged
import dev.g000sha256.tdl.dto.ChatEventBackgroundChanged
import dev.g000sha256.tdl.dto.ChatEventCustomEmojiStickerSetChanged
import dev.g000sha256.tdl.dto.ChatEventDescriptionChanged
import dev.g000sha256.tdl.dto.ChatEventEmojiStatusChanged
import dev.g000sha256.tdl.dto.ChatEventForumTopicCreated
import dev.g000sha256.tdl.dto.ChatEventForumTopicDeleted
import dev.g000sha256.tdl.dto.ChatEventForumTopicEdited
import dev.g000sha256.tdl.dto.ChatEventForumTopicPinned
import dev.g000sha256.tdl.dto.ChatEventForumTopicToggleIsClosed
import dev.g000sha256.tdl.dto.ChatEventForumTopicToggleIsHidden
import dev.g000sha256.tdl.dto.ChatEventHasAggressiveAntiSpamEnabledToggled
import dev.g000sha256.tdl.dto.ChatEventHasProtectedContentToggled
import dev.g000sha256.tdl.dto.ChatEventInviteLinkDeleted
import dev.g000sha256.tdl.dto.ChatEventInviteLinkEdited
import dev.g000sha256.tdl.dto.ChatEventInviteLinkRevoked
import dev.g000sha256.tdl.dto.ChatEventInvitesToggled
import dev.g000sha256.tdl.dto.ChatEventIsAllHistoryAvailableToggled
import dev.g000sha256.tdl.dto.ChatEventIsForumToggled
import dev.g000sha256.tdl.dto.ChatEventLinkedChatChanged
import dev.g000sha256.tdl.dto.ChatEventLocationChanged
import dev.g000sha256.tdl.dto.ChatEventLogFilters
import dev.g000sha256.tdl.dto.ChatEventMemberInvited
import dev.g000sha256.tdl.dto.ChatEventMemberJoined
import dev.g000sha256.tdl.dto.ChatEventMemberJoinedByInviteLink
import dev.g000sha256.tdl.dto.ChatEventMemberJoinedByRequest
import dev.g000sha256.tdl.dto.ChatEventMemberLeft
import dev.g000sha256.tdl.dto.ChatEventMemberPromoted
import dev.g000sha256.tdl.dto.ChatEventMemberRestricted
import dev.g000sha256.tdl.dto.ChatEventMemberSubscriptionExtended
import dev.g000sha256.tdl.dto.ChatEventMessageAutoDeleteTimeChanged
import dev.g000sha256.tdl.dto.ChatEventMessageDeleted
import dev.g000sha256.tdl.dto.ChatEventMessageEdited
import dev.g000sha256.tdl.dto.ChatEventMessagePinned
import dev.g000sha256.tdl.dto.ChatEventMessageUnpinned
import dev.g000sha256.tdl.dto.ChatEventPermissionsChanged
import dev.g000sha256.tdl.dto.ChatEventPhotoChanged
import dev.g000sha256.tdl.dto.ChatEventPollStopped
import dev.g000sha256.tdl.dto.ChatEventProfileAccentColorChanged
import dev.g000sha256.tdl.dto.ChatEventShowMessageSenderToggled
import dev.g000sha256.tdl.dto.ChatEventSignMessagesToggled
import dev.g000sha256.tdl.dto.ChatEventSlowModeDelayChanged
import dev.g000sha256.tdl.dto.ChatEventStickerSetChanged
import dev.g000sha256.tdl.dto.ChatEventTitleChanged
import dev.g000sha256.tdl.dto.ChatEventUsernameChanged
import dev.g000sha256.tdl.dto.ChatEventVideoChatCreated
import dev.g000sha256.tdl.dto.ChatEventVideoChatEnded
import dev.g000sha256.tdl.dto.ChatEventVideoChatMuteNewParticipantsToggled
import dev.g000sha256.tdl.dto.ChatEventVideoChatParticipantIsMutedToggled
import dev.g000sha256.tdl.dto.ChatEventVideoChatParticipantVolumeLevelChanged
import dev.g000sha256.tdl.dto.ChatEvents
import dev.g000sha256.tdl.dto.ChatFolder
import dev.g000sha256.tdl.dto.ChatFolderIcon
import dev.g000sha256.tdl.dto.ChatFolderInfo
import dev.g000sha256.tdl.dto.ChatFolderInviteLink
import dev.g000sha256.tdl.dto.ChatFolderInviteLinkInfo
import dev.g000sha256.tdl.dto.ChatFolderInviteLinks
import dev.g000sha256.tdl.dto.ChatFolderName
import dev.g000sha256.tdl.dto.ChatInviteLink
import dev.g000sha256.tdl.dto.ChatInviteLinkCount
import dev.g000sha256.tdl.dto.ChatInviteLinkCounts
import dev.g000sha256.tdl.dto.ChatInviteLinkInfo
import dev.g000sha256.tdl.dto.ChatInviteLinkMember
import dev.g000sha256.tdl.dto.ChatInviteLinkMembers
import dev.g000sha256.tdl.dto.ChatInviteLinkSubscriptionInfo
import dev.g000sha256.tdl.dto.ChatInviteLinks
import dev.g000sha256.tdl.dto.ChatJoinRequest
import dev.g000sha256.tdl.dto.ChatJoinRequests
import dev.g000sha256.tdl.dto.ChatJoinRequestsInfo
import dev.g000sha256.tdl.dto.ChatList
import dev.g000sha256.tdl.dto.ChatListArchive
import dev.g000sha256.tdl.dto.ChatListFolder
import dev.g000sha256.tdl.dto.ChatListMain
import dev.g000sha256.tdl.dto.ChatLists
import dev.g000sha256.tdl.dto.ChatLocation
import dev.g000sha256.tdl.dto.ChatMember
import dev.g000sha256.tdl.dto.ChatMemberStatus
import dev.g000sha256.tdl.dto.ChatMemberStatusAdministrator
import dev.g000sha256.tdl.dto.ChatMemberStatusBanned
import dev.g000sha256.tdl.dto.ChatMemberStatusCreator
import dev.g000sha256.tdl.dto.ChatMemberStatusLeft
import dev.g000sha256.tdl.dto.ChatMemberStatusMember
import dev.g000sha256.tdl.dto.ChatMemberStatusRestricted
import dev.g000sha256.tdl.dto.ChatMembers
import dev.g000sha256.tdl.dto.ChatMembersFilter
import dev.g000sha256.tdl.dto.ChatMembersFilterAdministrators
import dev.g000sha256.tdl.dto.ChatMembersFilterBanned
import dev.g000sha256.tdl.dto.ChatMembersFilterBots
import dev.g000sha256.tdl.dto.ChatMembersFilterContacts
import dev.g000sha256.tdl.dto.ChatMembersFilterMembers
import dev.g000sha256.tdl.dto.ChatMembersFilterMention
import dev.g000sha256.tdl.dto.ChatMembersFilterRestricted
import dev.g000sha256.tdl.dto.ChatMessageSender
import dev.g000sha256.tdl.dto.ChatMessageSenders
import dev.g000sha256.tdl.dto.ChatNotificationSettings
import dev.g000sha256.tdl.dto.ChatPermissions
import dev.g000sha256.tdl.dto.ChatPhoto
import dev.g000sha256.tdl.dto.ChatPhotoInfo
import dev.g000sha256.tdl.dto.ChatPhotoSticker
import dev.g000sha256.tdl.dto.ChatPhotoStickerType
import dev.g000sha256.tdl.dto.ChatPhotoStickerTypeCustomEmoji
import dev.g000sha256.tdl.dto.ChatPhotoStickerTypeRegularOrMask
import dev.g000sha256.tdl.dto.ChatPhotos
import dev.g000sha256.tdl.dto.ChatPosition
import dev.g000sha256.tdl.dto.ChatRevenueAmount
import dev.g000sha256.tdl.dto.ChatRevenueStatistics
import dev.g000sha256.tdl.dto.ChatRevenueTransaction
import dev.g000sha256.tdl.dto.ChatRevenueTransactionType
import dev.g000sha256.tdl.dto.ChatRevenueTransactionTypeEarnings
import dev.g000sha256.tdl.dto.ChatRevenueTransactionTypeRefund
import dev.g000sha256.tdl.dto.ChatRevenueTransactionTypeWithdrawal
import dev.g000sha256.tdl.dto.ChatRevenueTransactions
import dev.g000sha256.tdl.dto.ChatSource
import dev.g000sha256.tdl.dto.ChatSourceMtprotoProxy
import dev.g000sha256.tdl.dto.ChatSourcePublicServiceAnnouncement
import dev.g000sha256.tdl.dto.ChatStatistics
import dev.g000sha256.tdl.dto.ChatStatisticsAdministratorActionsInfo
import dev.g000sha256.tdl.dto.ChatStatisticsChannel
import dev.g000sha256.tdl.dto.ChatStatisticsInteractionInfo
import dev.g000sha256.tdl.dto.ChatStatisticsInviterInfo
import dev.g000sha256.tdl.dto.ChatStatisticsMessageSenderInfo
import dev.g000sha256.tdl.dto.ChatStatisticsObjectType
import dev.g000sha256.tdl.dto.ChatStatisticsObjectTypeMessage
import dev.g000sha256.tdl.dto.ChatStatisticsObjectTypeStory
import dev.g000sha256.tdl.dto.ChatStatisticsSupergroup
import dev.g000sha256.tdl.dto.ChatTheme
import dev.g000sha256.tdl.dto.ChatType
import dev.g000sha256.tdl.dto.ChatTypeBasicGroup
import dev.g000sha256.tdl.dto.ChatTypePrivate
import dev.g000sha256.tdl.dto.ChatTypeSecret
import dev.g000sha256.tdl.dto.ChatTypeSupergroup
import dev.g000sha256.tdl.dto.Chats
import dev.g000sha256.tdl.dto.CheckChatUsernameResult
import dev.g000sha256.tdl.dto.CheckChatUsernameResultOk
import dev.g000sha256.tdl.dto.CheckChatUsernameResultPublicChatsTooMany
import dev.g000sha256.tdl.dto.CheckChatUsernameResultPublicGroupsUnavailable
import dev.g000sha256.tdl.dto.CheckChatUsernameResultUsernameInvalid
import dev.g000sha256.tdl.dto.CheckChatUsernameResultUsernameOccupied
import dev.g000sha256.tdl.dto.CheckChatUsernameResultUsernamePurchasable
import dev.g000sha256.tdl.dto.CheckStickerSetNameResult
import dev.g000sha256.tdl.dto.CheckStickerSetNameResultNameInvalid
import dev.g000sha256.tdl.dto.CheckStickerSetNameResultNameOccupied
import dev.g000sha256.tdl.dto.CheckStickerSetNameResultOk
import dev.g000sha256.tdl.dto.Checklist
import dev.g000sha256.tdl.dto.ChecklistTask
import dev.g000sha256.tdl.dto.CloseBirthdayUser
import dev.g000sha256.tdl.dto.ClosedVectorPath
import dev.g000sha256.tdl.dto.CollectibleItemInfo
import dev.g000sha256.tdl.dto.CollectibleItemType
import dev.g000sha256.tdl.dto.CollectibleItemTypePhoneNumber
import dev.g000sha256.tdl.dto.CollectibleItemTypeUsername
import dev.g000sha256.tdl.dto.ConnectedAffiliateProgram
import dev.g000sha256.tdl.dto.ConnectedAffiliatePrograms
import dev.g000sha256.tdl.dto.ConnectedWebsite
import dev.g000sha256.tdl.dto.ConnectedWebsites
import dev.g000sha256.tdl.dto.ConnectionState
import dev.g000sha256.tdl.dto.ConnectionStateConnecting
import dev.g000sha256.tdl.dto.ConnectionStateConnectingToProxy
import dev.g000sha256.tdl.dto.ConnectionStateReady
import dev.g000sha256.tdl.dto.ConnectionStateUpdating
import dev.g000sha256.tdl.dto.ConnectionStateWaitingForNetwork
import dev.g000sha256.tdl.dto.Contact
import dev.g000sha256.tdl.dto.Count
import dev.g000sha256.tdl.dto.Countries
import dev.g000sha256.tdl.dto.CountryInfo
import dev.g000sha256.tdl.dto.CreatedBasicGroupChat
import dev.g000sha256.tdl.dto.CurrentWeather
import dev.g000sha256.tdl.dto.CustomRequestResult
import dev.g000sha256.tdl.dto.Data
import dev.g000sha256.tdl.dto.DatabaseStatistics
import dev.g000sha256.tdl.dto.Date
import dev.g000sha256.tdl.dto.DateRange
import dev.g000sha256.tdl.dto.DatedFile
import dev.g000sha256.tdl.dto.DeepLinkInfo
import dev.g000sha256.tdl.dto.DeviceToken
import dev.g000sha256.tdl.dto.DeviceTokenApplePush
import dev.g000sha256.tdl.dto.DeviceTokenApplePushVoIP
import dev.g000sha256.tdl.dto.DeviceTokenBlackBerryPush
import dev.g000sha256.tdl.dto.DeviceTokenFirebaseCloudMessaging
import dev.g000sha256.tdl.dto.DeviceTokenHuaweiPush
import dev.g000sha256.tdl.dto.DeviceTokenMicrosoftPush
import dev.g000sha256.tdl.dto.DeviceTokenMicrosoftPushVoIP
import dev.g000sha256.tdl.dto.DeviceTokenSimplePush
import dev.g000sha256.tdl.dto.DeviceTokenTizenPush
import dev.g000sha256.tdl.dto.DeviceTokenUbuntuPush
import dev.g000sha256.tdl.dto.DeviceTokenWebPush
import dev.g000sha256.tdl.dto.DeviceTokenWindowsPush
import dev.g000sha256.tdl.dto.DiceStickers
import dev.g000sha256.tdl.dto.DiceStickersRegular
import dev.g000sha256.tdl.dto.DiceStickersSlotMachine
import dev.g000sha256.tdl.dto.DirectMessagesChatTopic
import dev.g000sha256.tdl.dto.Document
import dev.g000sha256.tdl.dto.DownloadedFileCounts
import dev.g000sha256.tdl.dto.DraftMessage
import dev.g000sha256.tdl.dto.EmailAddressAuthentication
import dev.g000sha256.tdl.dto.EmailAddressAuthenticationAppleId
import dev.g000sha256.tdl.dto.EmailAddressAuthenticationCode
import dev.g000sha256.tdl.dto.EmailAddressAuthenticationCodeInfo
import dev.g000sha256.tdl.dto.EmailAddressAuthenticationGoogleId
import dev.g000sha256.tdl.dto.EmailAddressResetState
import dev.g000sha256.tdl.dto.EmailAddressResetStateAvailable
import dev.g000sha256.tdl.dto.EmailAddressResetStatePending
import dev.g000sha256.tdl.dto.EmojiCategories
import dev.g000sha256.tdl.dto.EmojiCategory
import dev.g000sha256.tdl.dto.EmojiCategorySource
import dev.g000sha256.tdl.dto.EmojiCategorySourcePremium
import dev.g000sha256.tdl.dto.EmojiCategorySourceSearch
import dev.g000sha256.tdl.dto.EmojiCategoryType
import dev.g000sha256.tdl.dto.EmojiCategoryTypeChatPhoto
import dev.g000sha256.tdl.dto.EmojiCategoryTypeDefault
import dev.g000sha256.tdl.dto.EmojiCategoryTypeEmojiStatus
import dev.g000sha256.tdl.dto.EmojiCategoryTypeRegularStickers
import dev.g000sha256.tdl.dto.EmojiKeyword
import dev.g000sha256.tdl.dto.EmojiKeywords
import dev.g000sha256.tdl.dto.EmojiReaction
import dev.g000sha256.tdl.dto.EmojiStatus
import dev.g000sha256.tdl.dto.EmojiStatusCustomEmojis
import dev.g000sha256.tdl.dto.EmojiStatusType
import dev.g000sha256.tdl.dto.EmojiStatusTypeCustomEmoji
import dev.g000sha256.tdl.dto.EmojiStatusTypeUpgradedGift
import dev.g000sha256.tdl.dto.EmojiStatuses
import dev.g000sha256.tdl.dto.Emojis
import dev.g000sha256.tdl.dto.EncryptedCredentials
import dev.g000sha256.tdl.dto.EncryptedPassportElement
import dev.g000sha256.tdl.dto.Error
import dev.g000sha256.tdl.dto.FactCheck
import dev.g000sha256.tdl.dto.FailedToAddMember
import dev.g000sha256.tdl.dto.FailedToAddMembers
import dev.g000sha256.tdl.dto.File
import dev.g000sha256.tdl.dto.FileDownload
import dev.g000sha256.tdl.dto.FileDownloadedPrefixSize
import dev.g000sha256.tdl.dto.FileType
import dev.g000sha256.tdl.dto.FileTypeAnimation
import dev.g000sha256.tdl.dto.FileTypeAudio
import dev.g000sha256.tdl.dto.FileTypeDocument
import dev.g000sha256.tdl.dto.FileTypeNone
import dev.g000sha256.tdl.dto.FileTypeNotificationSound
import dev.g000sha256.tdl.dto.FileTypePhoto
import dev.g000sha256.tdl.dto.FileTypePhotoStory
import dev.g000sha256.tdl.dto.FileTypeProfilePhoto
import dev.g000sha256.tdl.dto.FileTypeSecret
import dev.g000sha256.tdl.dto.FileTypeSecretThumbnail
import dev.g000sha256.tdl.dto.FileTypeSecure
import dev.g000sha256.tdl.dto.FileTypeSelfDestructingPhoto
import dev.g000sha256.tdl.dto.FileTypeSelfDestructingVideo
import dev.g000sha256.tdl.dto.FileTypeSelfDestructingVideoNote
import dev.g000sha256.tdl.dto.FileTypeSelfDestructingVoiceNote
import dev.g000sha256.tdl.dto.FileTypeSticker
import dev.g000sha256.tdl.dto.FileTypeThumbnail
import dev.g000sha256.tdl.dto.FileTypeUnknown
import dev.g000sha256.tdl.dto.FileTypeVideo
import dev.g000sha256.tdl.dto.FileTypeVideoNote
import dev.g000sha256.tdl.dto.FileTypeVideoStory
import dev.g000sha256.tdl.dto.FileTypeVoiceNote
import dev.g000sha256.tdl.dto.FileTypeWallpaper
import dev.g000sha256.tdl.dto.FirebaseAuthenticationSettings
import dev.g000sha256.tdl.dto.FirebaseAuthenticationSettingsAndroid
import dev.g000sha256.tdl.dto.FirebaseAuthenticationSettingsIos
import dev.g000sha256.tdl.dto.FirebaseDeviceVerificationParameters
import dev.g000sha256.tdl.dto.FirebaseDeviceVerificationParametersPlayIntegrity
import dev.g000sha256.tdl.dto.FirebaseDeviceVerificationParametersSafetyNet
import dev.g000sha256.tdl.dto.FormattedText
import dev.g000sha256.tdl.dto.ForumTopic
import dev.g000sha256.tdl.dto.ForumTopicIcon
import dev.g000sha256.tdl.dto.ForumTopicInfo
import dev.g000sha256.tdl.dto.ForumTopics
import dev.g000sha256.tdl.dto.ForwardSource
import dev.g000sha256.tdl.dto.FoundAffiliateProgram
import dev.g000sha256.tdl.dto.FoundAffiliatePrograms
import dev.g000sha256.tdl.dto.FoundChatBoosts
import dev.g000sha256.tdl.dto.FoundChatMessages
import dev.g000sha256.tdl.dto.FoundFileDownloads
import dev.g000sha256.tdl.dto.FoundMessages
import dev.g000sha256.tdl.dto.FoundPosition
import dev.g000sha256.tdl.dto.FoundPositions
import dev.g000sha256.tdl.dto.FoundStories
import dev.g000sha256.tdl.dto.FoundUsers
import dev.g000sha256.tdl.dto.FoundWebApp
import dev.g000sha256.tdl.dto.Game
import dev.g000sha256.tdl.dto.GameHighScore
import dev.g000sha256.tdl.dto.GameHighScores
import dev.g000sha256.tdl.dto.Gift
import dev.g000sha256.tdl.dto.GiftForResale
import dev.g000sha256.tdl.dto.GiftForResaleOrder
import dev.g000sha256.tdl.dto.GiftForResaleOrderNumber
import dev.g000sha256.tdl.dto.GiftForResaleOrderPrice
import dev.g000sha256.tdl.dto.GiftForResaleOrderPriceChangeDate
import dev.g000sha256.tdl.dto.GiftSettings
import dev.g000sha256.tdl.dto.GiftUpgradePreview
import dev.g000sha256.tdl.dto.GiftsForResale
import dev.g000sha256.tdl.dto.GiveawayInfo
import dev.g000sha256.tdl.dto.GiveawayInfoCompleted
import dev.g000sha256.tdl.dto.GiveawayInfoOngoing
import dev.g000sha256.tdl.dto.GiveawayParameters
import dev.g000sha256.tdl.dto.GiveawayParticipantStatus
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusAdministrator
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusAlreadyWasMember
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusDisallowedCountry
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusEligible
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusParticipating
import dev.g000sha256.tdl.dto.GiveawayPrize
import dev.g000sha256.tdl.dto.GiveawayPrizePremium
import dev.g000sha256.tdl.dto.GiveawayPrizeStars
import dev.g000sha256.tdl.dto.GroupCall
import dev.g000sha256.tdl.dto.GroupCallDataChannel
import dev.g000sha256.tdl.dto.GroupCallDataChannelMain
import dev.g000sha256.tdl.dto.GroupCallDataChannelScreenSharing
import dev.g000sha256.tdl.dto.GroupCallId
import dev.g000sha256.tdl.dto.GroupCallInfo
import dev.g000sha256.tdl.dto.GroupCallJoinParameters
import dev.g000sha256.tdl.dto.GroupCallParticipant
import dev.g000sha256.tdl.dto.GroupCallParticipantVideoInfo
import dev.g000sha256.tdl.dto.GroupCallParticipants
import dev.g000sha256.tdl.dto.GroupCallRecentSpeaker
import dev.g000sha256.tdl.dto.GroupCallVideoQuality
import dev.g000sha256.tdl.dto.GroupCallVideoQualityFull
import dev.g000sha256.tdl.dto.GroupCallVideoQualityMedium
import dev.g000sha256.tdl.dto.GroupCallVideoQualityThumbnail
import dev.g000sha256.tdl.dto.GroupCallVideoSourceGroup
import dev.g000sha256.tdl.dto.Hashtags
import dev.g000sha256.tdl.dto.HttpUrl
import dev.g000sha256.tdl.dto.IdentityDocument
import dev.g000sha256.tdl.dto.ImportedContacts
import dev.g000sha256.tdl.dto.InlineKeyboardButton
import dev.g000sha256.tdl.dto.InlineKeyboardButtonType
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeBuy
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeCallback
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeCallbackGame
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeCallbackWithPassword
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeCopyText
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeLoginUrl
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeSwitchInline
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeUrl
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeUser
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeWebApp
import dev.g000sha256.tdl.dto.InlineQueryResult
import dev.g000sha256.tdl.dto.InlineQueryResultAnimation
import dev.g000sha256.tdl.dto.InlineQueryResultArticle
import dev.g000sha256.tdl.dto.InlineQueryResultAudio
import dev.g000sha256.tdl.dto.InlineQueryResultContact
import dev.g000sha256.tdl.dto.InlineQueryResultDocument
import dev.g000sha256.tdl.dto.InlineQueryResultGame
import dev.g000sha256.tdl.dto.InlineQueryResultLocation
import dev.g000sha256.tdl.dto.InlineQueryResultPhoto
import dev.g000sha256.tdl.dto.InlineQueryResultSticker
import dev.g000sha256.tdl.dto.InlineQueryResultVenue
import dev.g000sha256.tdl.dto.InlineQueryResultVideo
import dev.g000sha256.tdl.dto.InlineQueryResultVoiceNote
import dev.g000sha256.tdl.dto.InlineQueryResults
import dev.g000sha256.tdl.dto.InlineQueryResultsButton
import dev.g000sha256.tdl.dto.InlineQueryResultsButtonType
import dev.g000sha256.tdl.dto.InlineQueryResultsButtonTypeStartBot
import dev.g000sha256.tdl.dto.InlineQueryResultsButtonTypeWebApp
import dev.g000sha256.tdl.dto.InputBackground
import dev.g000sha256.tdl.dto.InputBackgroundLocal
import dev.g000sha256.tdl.dto.InputBackgroundPrevious
import dev.g000sha256.tdl.dto.InputBackgroundRemote
import dev.g000sha256.tdl.dto.InputBusinessChatLink
import dev.g000sha256.tdl.dto.InputBusinessStartPage
import dev.g000sha256.tdl.dto.InputChatPhoto
import dev.g000sha256.tdl.dto.InputChatPhotoAnimation
import dev.g000sha256.tdl.dto.InputChatPhotoPrevious
import dev.g000sha256.tdl.dto.InputChatPhotoStatic
import dev.g000sha256.tdl.dto.InputChatPhotoSticker
import dev.g000sha256.tdl.dto.InputChecklist
import dev.g000sha256.tdl.dto.InputChecklistTask
import dev.g000sha256.tdl.dto.InputCredentials
import dev.g000sha256.tdl.dto.InputCredentialsApplePay
import dev.g000sha256.tdl.dto.InputCredentialsGooglePay
import dev.g000sha256.tdl.dto.InputCredentialsNew
import dev.g000sha256.tdl.dto.InputCredentialsSaved
import dev.g000sha256.tdl.dto.InputFile
import dev.g000sha256.tdl.dto.InputFileGenerated
import dev.g000sha256.tdl.dto.InputFileId
import dev.g000sha256.tdl.dto.InputFileLocal
import dev.g000sha256.tdl.dto.InputFileRemote
import dev.g000sha256.tdl.dto.InputGroupCall
import dev.g000sha256.tdl.dto.InputGroupCallLink
import dev.g000sha256.tdl.dto.InputGroupCallMessage
import dev.g000sha256.tdl.dto.InputIdentityDocument
import dev.g000sha256.tdl.dto.InputInlineQueryResult
import dev.g000sha256.tdl.dto.InputInlineQueryResultAnimation
import dev.g000sha256.tdl.dto.InputInlineQueryResultArticle
import dev.g000sha256.tdl.dto.InputInlineQueryResultAudio
import dev.g000sha256.tdl.dto.InputInlineQueryResultContact
import dev.g000sha256.tdl.dto.InputInlineQueryResultDocument
import dev.g000sha256.tdl.dto.InputInlineQueryResultGame
import dev.g000sha256.tdl.dto.InputInlineQueryResultLocation
import dev.g000sha256.tdl.dto.InputInlineQueryResultPhoto
import dev.g000sha256.tdl.dto.InputInlineQueryResultSticker
import dev.g000sha256.tdl.dto.InputInlineQueryResultVenue
import dev.g000sha256.tdl.dto.InputInlineQueryResultVideo
import dev.g000sha256.tdl.dto.InputInlineQueryResultVoiceNote
import dev.g000sha256.tdl.dto.InputInvoice
import dev.g000sha256.tdl.dto.InputInvoiceMessage
import dev.g000sha256.tdl.dto.InputInvoiceName
import dev.g000sha256.tdl.dto.InputInvoiceTelegram
import dev.g000sha256.tdl.dto.InputMessageAnimation
import dev.g000sha256.tdl.dto.InputMessageAudio
import dev.g000sha256.tdl.dto.InputMessageChecklist
import dev.g000sha256.tdl.dto.InputMessageContact
import dev.g000sha256.tdl.dto.InputMessageContent
import dev.g000sha256.tdl.dto.InputMessageDice
import dev.g000sha256.tdl.dto.InputMessageDocument
import dev.g000sha256.tdl.dto.InputMessageForwarded
import dev.g000sha256.tdl.dto.InputMessageGame
import dev.g000sha256.tdl.dto.InputMessageInvoice
import dev.g000sha256.tdl.dto.InputMessageLocation
import dev.g000sha256.tdl.dto.InputMessagePaidMedia
import dev.g000sha256.tdl.dto.InputMessagePhoto
import dev.g000sha256.tdl.dto.InputMessagePoll
import dev.g000sha256.tdl.dto.InputMessageReplyTo
import dev.g000sha256.tdl.dto.InputMessageReplyToExternalMessage
import dev.g000sha256.tdl.dto.InputMessageReplyToMessage
import dev.g000sha256.tdl.dto.InputMessageReplyToStory
import dev.g000sha256.tdl.dto.InputMessageSticker
import dev.g000sha256.tdl.dto.InputMessageStory
import dev.g000sha256.tdl.dto.InputMessageText
import dev.g000sha256.tdl.dto.InputMessageVenue
import dev.g000sha256.tdl.dto.InputMessageVideo
import dev.g000sha256.tdl.dto.InputMessageVideoNote
import dev.g000sha256.tdl.dto.InputMessageVoiceNote
import dev.g000sha256.tdl.dto.InputPaidMedia
import dev.g000sha256.tdl.dto.InputPaidMediaType
import dev.g000sha256.tdl.dto.InputPaidMediaTypePhoto
import dev.g000sha256.tdl.dto.InputPaidMediaTypeVideo
import dev.g000sha256.tdl.dto.InputPassportElement
import dev.g000sha256.tdl.dto.InputPassportElementAddress
import dev.g000sha256.tdl.dto.InputPassportElementBankStatement
import dev.g000sha256.tdl.dto.InputPassportElementDriverLicense
import dev.g000sha256.tdl.dto.InputPassportElementEmailAddress
import dev.g000sha256.tdl.dto.InputPassportElementError
import dev.g000sha256.tdl.dto.InputPassportElementErrorSource
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceDataField
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceFile
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceFiles
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceFrontSide
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceReverseSide
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceSelfie
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceTranslationFile
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceTranslationFiles
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceUnspecified
import dev.g000sha256.tdl.dto.InputPassportElementIdentityCard
import dev.g000sha256.tdl.dto.InputPassportElementInternalPassport
import dev.g000sha256.tdl.dto.InputPassportElementPassport
import dev.g000sha256.tdl.dto.InputPassportElementPassportRegistration
import dev.g000sha256.tdl.dto.InputPassportElementPersonalDetails
import dev.g000sha256.tdl.dto.InputPassportElementPhoneNumber
import dev.g000sha256.tdl.dto.InputPassportElementRentalAgreement
import dev.g000sha256.tdl.dto.InputPassportElementTemporaryRegistration
import dev.g000sha256.tdl.dto.InputPassportElementUtilityBill
import dev.g000sha256.tdl.dto.InputPersonalDocument
import dev.g000sha256.tdl.dto.InputSticker
import dev.g000sha256.tdl.dto.InputStoryArea
import dev.g000sha256.tdl.dto.InputStoryAreaType
import dev.g000sha256.tdl.dto.InputStoryAreaTypeFoundVenue
import dev.g000sha256.tdl.dto.InputStoryAreaTypeLink
import dev.g000sha256.tdl.dto.InputStoryAreaTypeLocation
import dev.g000sha256.tdl.dto.InputStoryAreaTypeMessage
import dev.g000sha256.tdl.dto.InputStoryAreaTypePreviousVenue
import dev.g000sha256.tdl.dto.InputStoryAreaTypeSuggestedReaction
import dev.g000sha256.tdl.dto.InputStoryAreaTypeUpgradedGift
import dev.g000sha256.tdl.dto.InputStoryAreaTypeWeather
import dev.g000sha256.tdl.dto.InputStoryAreas
import dev.g000sha256.tdl.dto.InputStoryContent
import dev.g000sha256.tdl.dto.InputStoryContentPhoto
import dev.g000sha256.tdl.dto.InputStoryContentVideo
import dev.g000sha256.tdl.dto.InputTextQuote
import dev.g000sha256.tdl.dto.InputThumbnail
import dev.g000sha256.tdl.dto.InternalLinkType
import dev.g000sha256.tdl.dto.InternalLinkTypeActiveSessions
import dev.g000sha256.tdl.dto.InternalLinkTypeAttachmentMenuBot
import dev.g000sha256.tdl.dto.InternalLinkTypeAuthenticationCode
import dev.g000sha256.tdl.dto.InternalLinkTypeBackground
import dev.g000sha256.tdl.dto.InternalLinkTypeBotAddToChannel
import dev.g000sha256.tdl.dto.InternalLinkTypeBotStart
import dev.g000sha256.tdl.dto.InternalLinkTypeBotStartInGroup
import dev.g000sha256.tdl.dto.InternalLinkTypeBusinessChat
import dev.g000sha256.tdl.dto.InternalLinkTypeBuyStars
import dev.g000sha256.tdl.dto.InternalLinkTypeChangePhoneNumber
import dev.g000sha256.tdl.dto.InternalLinkTypeChatAffiliateProgram
import dev.g000sha256.tdl.dto.InternalLinkTypeChatBoost
import dev.g000sha256.tdl.dto.InternalLinkTypeChatFolderInvite
import dev.g000sha256.tdl.dto.InternalLinkTypeChatFolderSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeChatInvite
import dev.g000sha256.tdl.dto.InternalLinkTypeDefaultMessageAutoDeleteTimerSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeEditProfileSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeGame
import dev.g000sha256.tdl.dto.InternalLinkTypeGroupCall
import dev.g000sha256.tdl.dto.InternalLinkTypeInstantView
import dev.g000sha256.tdl.dto.InternalLinkTypeInvoice
import dev.g000sha256.tdl.dto.InternalLinkTypeLanguagePack
import dev.g000sha256.tdl.dto.InternalLinkTypeLanguageSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeMainWebApp
import dev.g000sha256.tdl.dto.InternalLinkTypeMessage
import dev.g000sha256.tdl.dto.InternalLinkTypeMessageDraft
import dev.g000sha256.tdl.dto.InternalLinkTypeMyStars
import dev.g000sha256.tdl.dto.InternalLinkTypePassportDataRequest
import dev.g000sha256.tdl.dto.InternalLinkTypePhoneNumberConfirmation
import dev.g000sha256.tdl.dto.InternalLinkTypePremiumFeatures
import dev.g000sha256.tdl.dto.InternalLinkTypePremiumGift
import dev.g000sha256.tdl.dto.InternalLinkTypePremiumGiftCode
import dev.g000sha256.tdl.dto.InternalLinkTypePrivacyAndSecuritySettings
import dev.g000sha256.tdl.dto.InternalLinkTypeProxy
import dev.g000sha256.tdl.dto.InternalLinkTypePublicChat
import dev.g000sha256.tdl.dto.InternalLinkTypeQrCodeAuthentication
import dev.g000sha256.tdl.dto.InternalLinkTypeRestorePurchases
import dev.g000sha256.tdl.dto.InternalLinkTypeSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeStickerSet
import dev.g000sha256.tdl.dto.InternalLinkTypeStory
import dev.g000sha256.tdl.dto.InternalLinkTypeTheme
import dev.g000sha256.tdl.dto.InternalLinkTypeThemeSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeUnknownDeepLink
import dev.g000sha256.tdl.dto.InternalLinkTypeUnsupportedProxy
import dev.g000sha256.tdl.dto.InternalLinkTypeUpgradedGift
import dev.g000sha256.tdl.dto.InternalLinkTypeUserPhoneNumber
import dev.g000sha256.tdl.dto.InternalLinkTypeUserToken
import dev.g000sha256.tdl.dto.InternalLinkTypeVideoChat
import dev.g000sha256.tdl.dto.InternalLinkTypeWebApp
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResult
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResultSuccess
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResultUserAlreadyParticipant
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResultUserPrivacyRestricted
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResultUserWasBanned
import dev.g000sha256.tdl.dto.InviteLinkChatType
import dev.g000sha256.tdl.dto.InviteLinkChatTypeBasicGroup
import dev.g000sha256.tdl.dto.InviteLinkChatTypeChannel
import dev.g000sha256.tdl.dto.InviteLinkChatTypeSupergroup
import dev.g000sha256.tdl.dto.Invoice
import dev.g000sha256.tdl.dto.JsonObjectMember
import dev.g000sha256.tdl.dto.JsonValue
import dev.g000sha256.tdl.dto.JsonValueArray
import dev.g000sha256.tdl.dto.JsonValueBoolean
import dev.g000sha256.tdl.dto.JsonValueNull
import dev.g000sha256.tdl.dto.JsonValueNumber
import dev.g000sha256.tdl.dto.JsonValueObject
import dev.g000sha256.tdl.dto.JsonValueString
import dev.g000sha256.tdl.dto.KeyboardButton
import dev.g000sha256.tdl.dto.KeyboardButtonType
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestChat
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestLocation
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestPhoneNumber
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestPoll
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestUsers
import dev.g000sha256.tdl.dto.KeyboardButtonTypeText
import dev.g000sha256.tdl.dto.KeyboardButtonTypeWebApp
import dev.g000sha256.tdl.dto.LabeledPricePart
import dev.g000sha256.tdl.dto.LanguagePackInfo
import dev.g000sha256.tdl.dto.LanguagePackString
import dev.g000sha256.tdl.dto.LanguagePackStringValue
import dev.g000sha256.tdl.dto.LanguagePackStringValueDeleted
import dev.g000sha256.tdl.dto.LanguagePackStringValueOrdinary
import dev.g000sha256.tdl.dto.LanguagePackStringValuePluralized
import dev.g000sha256.tdl.dto.LanguagePackStrings
import dev.g000sha256.tdl.dto.LinkPreview
import dev.g000sha256.tdl.dto.LinkPreviewAlbumMedia
import dev.g000sha256.tdl.dto.LinkPreviewAlbumMediaPhoto
import dev.g000sha256.tdl.dto.LinkPreviewAlbumMediaVideo
import dev.g000sha256.tdl.dto.LinkPreviewOptions
import dev.g000sha256.tdl.dto.LinkPreviewType
import dev.g000sha256.tdl.dto.LinkPreviewTypeAlbum
import dev.g000sha256.tdl.dto.LinkPreviewTypeAnimation
import dev.g000sha256.tdl.dto.LinkPreviewTypeApp
import dev.g000sha256.tdl.dto.LinkPreviewTypeArticle
import dev.g000sha256.tdl.dto.LinkPreviewTypeAudio
import dev.g000sha256.tdl.dto.LinkPreviewTypeBackground
import dev.g000sha256.tdl.dto.LinkPreviewTypeChannelBoost
import dev.g000sha256.tdl.dto.LinkPreviewTypeChat
import dev.g000sha256.tdl.dto.LinkPreviewTypeDocument
import dev.g000sha256.tdl.dto.LinkPreviewTypeEmbeddedAnimationPlayer
import dev.g000sha256.tdl.dto.LinkPreviewTypeEmbeddedAudioPlayer
import dev.g000sha256.tdl.dto.LinkPreviewTypeEmbeddedVideoPlayer
import dev.g000sha256.tdl.dto.LinkPreviewTypeExternalAudio
import dev.g000sha256.tdl.dto.LinkPreviewTypeExternalVideo
import dev.g000sha256.tdl.dto.LinkPreviewTypeGroupCall
import dev.g000sha256.tdl.dto.LinkPreviewTypeInvoice
import dev.g000sha256.tdl.dto.LinkPreviewTypeMessage
import dev.g000sha256.tdl.dto.LinkPreviewTypePhoto
import dev.g000sha256.tdl.dto.LinkPreviewTypePremiumGiftCode
import dev.g000sha256.tdl.dto.LinkPreviewTypeShareableChatFolder
import dev.g000sha256.tdl.dto.LinkPreviewTypeSticker
import dev.g000sha256.tdl.dto.LinkPreviewTypeStickerSet
import dev.g000sha256.tdl.dto.LinkPreviewTypeStory
import dev.g000sha256.tdl.dto.LinkPreviewTypeSupergroupBoost
import dev.g000sha256.tdl.dto.LinkPreviewTypeTheme
import dev.g000sha256.tdl.dto.LinkPreviewTypeUnsupported
import dev.g000sha256.tdl.dto.LinkPreviewTypeUpgradedGift
import dev.g000sha256.tdl.dto.LinkPreviewTypeUser
import dev.g000sha256.tdl.dto.LinkPreviewTypeVideo
import dev.g000sha256.tdl.dto.LinkPreviewTypeVideoChat
import dev.g000sha256.tdl.dto.LinkPreviewTypeVideoNote
import dev.g000sha256.tdl.dto.LinkPreviewTypeVoiceNote
import dev.g000sha256.tdl.dto.LinkPreviewTypeWebApp
import dev.g000sha256.tdl.dto.LocalFile
import dev.g000sha256.tdl.dto.LocalizationTargetInfo
import dev.g000sha256.tdl.dto.Location
import dev.g000sha256.tdl.dto.LocationAddress
import dev.g000sha256.tdl.dto.LogStream
import dev.g000sha256.tdl.dto.LogStreamDefault
import dev.g000sha256.tdl.dto.LogStreamEmpty
import dev.g000sha256.tdl.dto.LogStreamFile
import dev.g000sha256.tdl.dto.LogTags
import dev.g000sha256.tdl.dto.LogVerbosityLevel
import dev.g000sha256.tdl.dto.LoginUrlInfo
import dev.g000sha256.tdl.dto.LoginUrlInfoOpen
import dev.g000sha256.tdl.dto.LoginUrlInfoRequestConfirmation
import dev.g000sha256.tdl.dto.MainWebApp
import dev.g000sha256.tdl.dto.MaskPoint
import dev.g000sha256.tdl.dto.MaskPointChin
import dev.g000sha256.tdl.dto.MaskPointEyes
import dev.g000sha256.tdl.dto.MaskPointForehead
import dev.g000sha256.tdl.dto.MaskPointMouth
import dev.g000sha256.tdl.dto.MaskPosition
import dev.g000sha256.tdl.dto.Message
import dev.g000sha256.tdl.dto.MessageAnimatedEmoji
import dev.g000sha256.tdl.dto.MessageAnimation
import dev.g000sha256.tdl.dto.MessageAudio
import dev.g000sha256.tdl.dto.MessageAutoDeleteTime
import dev.g000sha256.tdl.dto.MessageBasicGroupChatCreate
import dev.g000sha256.tdl.dto.MessageBotWriteAccessAllowed
import dev.g000sha256.tdl.dto.MessageCalendar
import dev.g000sha256.tdl.dto.MessageCalendarDay
import dev.g000sha256.tdl.dto.MessageCall
import dev.g000sha256.tdl.dto.MessageChatAddMembers
import dev.g000sha256.tdl.dto.MessageChatBoost
import dev.g000sha256.tdl.dto.MessageChatChangePhoto
import dev.g000sha256.tdl.dto.MessageChatChangeTitle
import dev.g000sha256.tdl.dto.MessageChatDeleteMember
import dev.g000sha256.tdl.dto.MessageChatDeletePhoto
import dev.g000sha256.tdl.dto.MessageChatJoinByLink
import dev.g000sha256.tdl.dto.MessageChatJoinByRequest
import dev.g000sha256.tdl.dto.MessageChatSetBackground
import dev.g000sha256.tdl.dto.MessageChatSetMessageAutoDeleteTime
import dev.g000sha256.tdl.dto.MessageChatSetTheme
import dev.g000sha256.tdl.dto.MessageChatShared
import dev.g000sha256.tdl.dto.MessageChatUpgradeFrom
import dev.g000sha256.tdl.dto.MessageChatUpgradeTo
import dev.g000sha256.tdl.dto.MessageChecklist
import dev.g000sha256.tdl.dto.MessageChecklistTasksAdded
import dev.g000sha256.tdl.dto.MessageChecklistTasksDone
import dev.g000sha256.tdl.dto.MessageContact
import dev.g000sha256.tdl.dto.MessageContactRegistered
import dev.g000sha256.tdl.dto.MessageContent
import dev.g000sha256.tdl.dto.MessageCopyOptions
import dev.g000sha256.tdl.dto.MessageCustomServiceAction
import dev.g000sha256.tdl.dto.MessageDice
import dev.g000sha256.tdl.dto.MessageDirectMessagePriceChanged
import dev.g000sha256.tdl.dto.MessageDocument
import dev.g000sha256.tdl.dto.MessageEffect
import dev.g000sha256.tdl.dto.MessageEffectType
import dev.g000sha256.tdl.dto.MessageEffectTypeEmojiReaction
import dev.g000sha256.tdl.dto.MessageEffectTypePremiumSticker
import dev.g000sha256.tdl.dto.MessageExpiredPhoto
import dev.g000sha256.tdl.dto.MessageExpiredVideo
import dev.g000sha256.tdl.dto.MessageExpiredVideoNote
import dev.g000sha256.tdl.dto.MessageExpiredVoiceNote
import dev.g000sha256.tdl.dto.MessageFileType
import dev.g000sha256.tdl.dto.MessageFileTypeGroup
import dev.g000sha256.tdl.dto.MessageFileTypePrivate
import dev.g000sha256.tdl.dto.MessageFileTypeUnknown
import dev.g000sha256.tdl.dto.MessageForumTopicCreated
import dev.g000sha256.tdl.dto.MessageForumTopicEdited
import dev.g000sha256.tdl.dto.MessageForumTopicIsClosedToggled
import dev.g000sha256.tdl.dto.MessageForumTopicIsHiddenToggled
import dev.g000sha256.tdl.dto.MessageForwardInfo
import dev.g000sha256.tdl.dto.MessageGame
import dev.g000sha256.tdl.dto.MessageGameScore
import dev.g000sha256.tdl.dto.MessageGift
import dev.g000sha256.tdl.dto.MessageGiftedPremium
import dev.g000sha256.tdl.dto.MessageGiftedStars
import dev.g000sha256.tdl.dto.MessageGiveaway
import dev.g000sha256.tdl.dto.MessageGiveawayCompleted
import dev.g000sha256.tdl.dto.MessageGiveawayCreated
import dev.g000sha256.tdl.dto.MessageGiveawayPrizeStars
import dev.g000sha256.tdl.dto.MessageGiveawayWinners
import dev.g000sha256.tdl.dto.MessageGroupCall
import dev.g000sha256.tdl.dto.MessageImportInfo
import dev.g000sha256.tdl.dto.MessageInteractionInfo
import dev.g000sha256.tdl.dto.MessageInviteVideoChatParticipants
import dev.g000sha256.tdl.dto.MessageInvoice
import dev.g000sha256.tdl.dto.MessageLink
import dev.g000sha256.tdl.dto.MessageLinkInfo
import dev.g000sha256.tdl.dto.MessageLocation
import dev.g000sha256.tdl.dto.MessageOrigin
import dev.g000sha256.tdl.dto.MessageOriginChannel
import dev.g000sha256.tdl.dto.MessageOriginChat
import dev.g000sha256.tdl.dto.MessageOriginHiddenUser
import dev.g000sha256.tdl.dto.MessageOriginUser
import dev.g000sha256.tdl.dto.MessagePaidMedia
import dev.g000sha256.tdl.dto.MessagePaidMessagePriceChanged
import dev.g000sha256.tdl.dto.MessagePaidMessagesRefunded
import dev.g000sha256.tdl.dto.MessagePassportDataReceived
import dev.g000sha256.tdl.dto.MessagePassportDataSent
import dev.g000sha256.tdl.dto.MessagePaymentRefunded
import dev.g000sha256.tdl.dto.MessagePaymentSuccessful
import dev.g000sha256.tdl.dto.MessagePaymentSuccessfulBot
import dev.g000sha256.tdl.dto.MessagePhoto
import dev.g000sha256.tdl.dto.MessagePinMessage
import dev.g000sha256.tdl.dto.MessagePoll
import dev.g000sha256.tdl.dto.MessagePosition
import dev.g000sha256.tdl.dto.MessagePositions
import dev.g000sha256.tdl.dto.MessagePremiumGiftCode
import dev.g000sha256.tdl.dto.MessageProperties
import dev.g000sha256.tdl.dto.MessageProximityAlertTriggered
import dev.g000sha256.tdl.dto.MessageReaction
import dev.g000sha256.tdl.dto.MessageReactions
import dev.g000sha256.tdl.dto.MessageReadDate
import dev.g000sha256.tdl.dto.MessageReadDateMyPrivacyRestricted
import dev.g000sha256.tdl.dto.MessageReadDateRead
import dev.g000sha256.tdl.dto.MessageReadDateTooOld
import dev.g000sha256.tdl.dto.MessageReadDateUnread
import dev.g000sha256.tdl.dto.MessageReadDateUserPrivacyRestricted
import dev.g000sha256.tdl.dto.MessageRefundedUpgradedGift
import dev.g000sha256.tdl.dto.MessageReplyInfo
import dev.g000sha256.tdl.dto.MessageReplyTo
import dev.g000sha256.tdl.dto.MessageReplyToMessage
import dev.g000sha256.tdl.dto.MessageReplyToStory
import dev.g000sha256.tdl.dto.MessageSchedulingState
import dev.g000sha256.tdl.dto.MessageSchedulingStateSendAtDate
import dev.g000sha256.tdl.dto.MessageSchedulingStateSendWhenOnline
import dev.g000sha256.tdl.dto.MessageSchedulingStateSendWhenVideoProcessed
import dev.g000sha256.tdl.dto.MessageScreenshotTaken
import dev.g000sha256.tdl.dto.MessageSelfDestructType
import dev.g000sha256.tdl.dto.MessageSelfDestructTypeImmediately
import dev.g000sha256.tdl.dto.MessageSelfDestructTypeTimer
import dev.g000sha256.tdl.dto.MessageSendOptions
import dev.g000sha256.tdl.dto.MessageSender
import dev.g000sha256.tdl.dto.MessageSenderChat
import dev.g000sha256.tdl.dto.MessageSenderUser
import dev.g000sha256.tdl.dto.MessageSenders
import dev.g000sha256.tdl.dto.MessageSendingState
import dev.g000sha256.tdl.dto.MessageSendingStateFailed
import dev.g000sha256.tdl.dto.MessageSendingStatePending
import dev.g000sha256.tdl.dto.MessageSource
import dev.g000sha256.tdl.dto.MessageSourceChatEventLog
import dev.g000sha256.tdl.dto.MessageSourceChatHistory
import dev.g000sha256.tdl.dto.MessageSourceChatList
import dev.g000sha256.tdl.dto.MessageSourceDirectMessagesChatTopicHistory
import dev.g000sha256.tdl.dto.MessageSourceForumTopicHistory
import dev.g000sha256.tdl.dto.MessageSourceHistoryPreview
import dev.g000sha256.tdl.dto.MessageSourceMessageThreadHistory
import dev.g000sha256.tdl.dto.MessageSourceNotification
import dev.g000sha256.tdl.dto.MessageSourceOther
import dev.g000sha256.tdl.dto.MessageSourceScreenshot
import dev.g000sha256.tdl.dto.MessageSourceSearch
import dev.g000sha256.tdl.dto.MessageStatistics
import dev.g000sha256.tdl.dto.MessageSticker
import dev.g000sha256.tdl.dto.MessageStory
import dev.g000sha256.tdl.dto.MessageSuggestProfilePhoto
import dev.g000sha256.tdl.dto.MessageSupergroupChatCreate
import dev.g000sha256.tdl.dto.MessageText
import dev.g000sha256.tdl.dto.MessageThreadInfo
import dev.g000sha256.tdl.dto.MessageTopic
import dev.g000sha256.tdl.dto.MessageTopicDirectMessages
import dev.g000sha256.tdl.dto.MessageTopicForum
import dev.g000sha256.tdl.dto.MessageTopicSavedMessages
import dev.g000sha256.tdl.dto.MessageUnsupported
import dev.g000sha256.tdl.dto.MessageUpgradedGift
import dev.g000sha256.tdl.dto.MessageUsersShared
import dev.g000sha256.tdl.dto.MessageVenue
import dev.g000sha256.tdl.dto.MessageVideo
import dev.g000sha256.tdl.dto.MessageVideoChatEnded
import dev.g000sha256.tdl.dto.MessageVideoChatScheduled
import dev.g000sha256.tdl.dto.MessageVideoChatStarted
import dev.g000sha256.tdl.dto.MessageVideoNote
import dev.g000sha256.tdl.dto.MessageViewer
import dev.g000sha256.tdl.dto.MessageViewers
import dev.g000sha256.tdl.dto.MessageVoiceNote
import dev.g000sha256.tdl.dto.MessageWebAppDataReceived
import dev.g000sha256.tdl.dto.MessageWebAppDataSent
import dev.g000sha256.tdl.dto.Messages
import dev.g000sha256.tdl.dto.Minithumbnail
import dev.g000sha256.tdl.dto.NetworkStatistics
import dev.g000sha256.tdl.dto.NetworkStatisticsEntry
import dev.g000sha256.tdl.dto.NetworkStatisticsEntryCall
import dev.g000sha256.tdl.dto.NetworkStatisticsEntryFile
import dev.g000sha256.tdl.dto.NetworkType
import dev.g000sha256.tdl.dto.NetworkTypeMobile
import dev.g000sha256.tdl.dto.NetworkTypeMobileRoaming
import dev.g000sha256.tdl.dto.NetworkTypeNone
import dev.g000sha256.tdl.dto.NetworkTypeOther
import dev.g000sha256.tdl.dto.NetworkTypeWiFi
import dev.g000sha256.tdl.dto.NewChatPrivacySettings
import dev.g000sha256.tdl.dto.Notification
import dev.g000sha256.tdl.dto.NotificationGroup
import dev.g000sha256.tdl.dto.NotificationGroupType
import dev.g000sha256.tdl.dto.NotificationGroupTypeCalls
import dev.g000sha256.tdl.dto.NotificationGroupTypeMentions
import dev.g000sha256.tdl.dto.NotificationGroupTypeMessages
import dev.g000sha256.tdl.dto.NotificationGroupTypeSecretChat
import dev.g000sha256.tdl.dto.NotificationSettingsScope
import dev.g000sha256.tdl.dto.NotificationSettingsScopeChannelChats
import dev.g000sha256.tdl.dto.NotificationSettingsScopeGroupChats
import dev.g000sha256.tdl.dto.NotificationSettingsScopePrivateChats
import dev.g000sha256.tdl.dto.NotificationSound
import dev.g000sha256.tdl.dto.NotificationSounds
import dev.g000sha256.tdl.dto.NotificationType
import dev.g000sha256.tdl.dto.NotificationTypeNewCall
import dev.g000sha256.tdl.dto.NotificationTypeNewMessage
import dev.g000sha256.tdl.dto.NotificationTypeNewPushMessage
import dev.g000sha256.tdl.dto.NotificationTypeNewSecretChat
import dev.g000sha256.tdl.dto.Ok
import dev.g000sha256.tdl.dto.OptionValue
import dev.g000sha256.tdl.dto.OptionValueBoolean
import dev.g000sha256.tdl.dto.OptionValueEmpty
import dev.g000sha256.tdl.dto.OptionValueInteger
import dev.g000sha256.tdl.dto.OptionValueString
import dev.g000sha256.tdl.dto.OrderInfo
import dev.g000sha256.tdl.dto.Outline
import dev.g000sha256.tdl.dto.PageBlock
import dev.g000sha256.tdl.dto.PageBlockAnchor
import dev.g000sha256.tdl.dto.PageBlockAnimation
import dev.g000sha256.tdl.dto.PageBlockAudio
import dev.g000sha256.tdl.dto.PageBlockAuthorDate
import dev.g000sha256.tdl.dto.PageBlockBlockQuote
import dev.g000sha256.tdl.dto.PageBlockCaption
import dev.g000sha256.tdl.dto.PageBlockChatLink
import dev.g000sha256.tdl.dto.PageBlockCollage
import dev.g000sha256.tdl.dto.PageBlockCover
import dev.g000sha256.tdl.dto.PageBlockDetails
import dev.g000sha256.tdl.dto.PageBlockDivider
import dev.g000sha256.tdl.dto.PageBlockEmbedded
import dev.g000sha256.tdl.dto.PageBlockEmbeddedPost
import dev.g000sha256.tdl.dto.PageBlockFooter
import dev.g000sha256.tdl.dto.PageBlockHeader
import dev.g000sha256.tdl.dto.PageBlockHorizontalAlignment
import dev.g000sha256.tdl.dto.PageBlockHorizontalAlignmentCenter
import dev.g000sha256.tdl.dto.PageBlockHorizontalAlignmentLeft
import dev.g000sha256.tdl.dto.PageBlockHorizontalAlignmentRight
import dev.g000sha256.tdl.dto.PageBlockKicker
import dev.g000sha256.tdl.dto.PageBlockList
import dev.g000sha256.tdl.dto.PageBlockListItem
import dev.g000sha256.tdl.dto.PageBlockMap
import dev.g000sha256.tdl.dto.PageBlockParagraph
import dev.g000sha256.tdl.dto.PageBlockPhoto
import dev.g000sha256.tdl.dto.PageBlockPreformatted
import dev.g000sha256.tdl.dto.PageBlockPullQuote
import dev.g000sha256.tdl.dto.PageBlockRelatedArticle
import dev.g000sha256.tdl.dto.PageBlockRelatedArticles
import dev.g000sha256.tdl.dto.PageBlockSlideshow
import dev.g000sha256.tdl.dto.PageBlockSubheader
import dev.g000sha256.tdl.dto.PageBlockSubtitle
import dev.g000sha256.tdl.dto.PageBlockTable
import dev.g000sha256.tdl.dto.PageBlockTableCell
import dev.g000sha256.tdl.dto.PageBlockTitle
import dev.g000sha256.tdl.dto.PageBlockVerticalAlignment
import dev.g000sha256.tdl.dto.PageBlockVerticalAlignmentBottom
import dev.g000sha256.tdl.dto.PageBlockVerticalAlignmentMiddle
import dev.g000sha256.tdl.dto.PageBlockVerticalAlignmentTop
import dev.g000sha256.tdl.dto.PageBlockVideo
import dev.g000sha256.tdl.dto.PageBlockVoiceNote
import dev.g000sha256.tdl.dto.PaidMedia
import dev.g000sha256.tdl.dto.PaidMediaPhoto
import dev.g000sha256.tdl.dto.PaidMediaPreview
import dev.g000sha256.tdl.dto.PaidMediaUnsupported
import dev.g000sha256.tdl.dto.PaidMediaVideo
import dev.g000sha256.tdl.dto.PaidReactionType
import dev.g000sha256.tdl.dto.PaidReactionTypeAnonymous
import dev.g000sha256.tdl.dto.PaidReactionTypeChat
import dev.g000sha256.tdl.dto.PaidReactionTypeRegular
import dev.g000sha256.tdl.dto.PaidReactor
import dev.g000sha256.tdl.dto.PassportAuthorizationForm
import dev.g000sha256.tdl.dto.PassportElement
import dev.g000sha256.tdl.dto.PassportElementAddress
import dev.g000sha256.tdl.dto.PassportElementBankStatement
import dev.g000sha256.tdl.dto.PassportElementDriverLicense
import dev.g000sha256.tdl.dto.PassportElementEmailAddress
import dev.g000sha256.tdl.dto.PassportElementError
import dev.g000sha256.tdl.dto.PassportElementErrorSource
import dev.g000sha256.tdl.dto.PassportElementErrorSourceDataField
import dev.g000sha256.tdl.dto.PassportElementErrorSourceFile
import dev.g000sha256.tdl.dto.PassportElementErrorSourceFiles
import dev.g000sha256.tdl.dto.PassportElementErrorSourceFrontSide
import dev.g000sha256.tdl.dto.PassportElementErrorSourceReverseSide
import dev.g000sha256.tdl.dto.PassportElementErrorSourceSelfie
import dev.g000sha256.tdl.dto.PassportElementErrorSourceTranslationFile
import dev.g000sha256.tdl.dto.PassportElementErrorSourceTranslationFiles
import dev.g000sha256.tdl.dto.PassportElementErrorSourceUnspecified
import dev.g000sha256.tdl.dto.PassportElementIdentityCard
import dev.g000sha256.tdl.dto.PassportElementInternalPassport
import dev.g000sha256.tdl.dto.PassportElementPassport
import dev.g000sha256.tdl.dto.PassportElementPassportRegistration
import dev.g000sha256.tdl.dto.PassportElementPersonalDetails
import dev.g000sha256.tdl.dto.PassportElementPhoneNumber
import dev.g000sha256.tdl.dto.PassportElementRentalAgreement
import dev.g000sha256.tdl.dto.PassportElementTemporaryRegistration
import dev.g000sha256.tdl.dto.PassportElementType
import dev.g000sha256.tdl.dto.PassportElementTypeAddress
import dev.g000sha256.tdl.dto.PassportElementTypeBankStatement
import dev.g000sha256.tdl.dto.PassportElementTypeDriverLicense
import dev.g000sha256.tdl.dto.PassportElementTypeEmailAddress
import dev.g000sha256.tdl.dto.PassportElementTypeIdentityCard
import dev.g000sha256.tdl.dto.PassportElementTypeInternalPassport
import dev.g000sha256.tdl.dto.PassportElementTypePassport
import dev.g000sha256.tdl.dto.PassportElementTypePassportRegistration
import dev.g000sha256.tdl.dto.PassportElementTypePersonalDetails
import dev.g000sha256.tdl.dto.PassportElementTypePhoneNumber
import dev.g000sha256.tdl.dto.PassportElementTypeRentalAgreement
import dev.g000sha256.tdl.dto.PassportElementTypeTemporaryRegistration
import dev.g000sha256.tdl.dto.PassportElementTypeUtilityBill
import dev.g000sha256.tdl.dto.PassportElementUtilityBill
import dev.g000sha256.tdl.dto.PassportElements
import dev.g000sha256.tdl.dto.PassportElementsWithErrors
import dev.g000sha256.tdl.dto.PassportRequiredElement
import dev.g000sha256.tdl.dto.PassportSuitableElement
import dev.g000sha256.tdl.dto.PasswordState
import dev.g000sha256.tdl.dto.PaymentForm
import dev.g000sha256.tdl.dto.PaymentFormType
import dev.g000sha256.tdl.dto.PaymentFormTypeRegular
import dev.g000sha256.tdl.dto.PaymentFormTypeStarSubscription
import dev.g000sha256.tdl.dto.PaymentFormTypeStars
import dev.g000sha256.tdl.dto.PaymentOption
import dev.g000sha256.tdl.dto.PaymentProvider
import dev.g000sha256.tdl.dto.PaymentProviderOther
import dev.g000sha256.tdl.dto.PaymentProviderSmartGlocal
import dev.g000sha256.tdl.dto.PaymentProviderStripe
import dev.g000sha256.tdl.dto.PaymentReceipt
import dev.g000sha256.tdl.dto.PaymentReceiptType
import dev.g000sha256.tdl.dto.PaymentReceiptTypeRegular
import dev.g000sha256.tdl.dto.PaymentReceiptTypeStars
import dev.g000sha256.tdl.dto.PaymentResult
import dev.g000sha256.tdl.dto.PersonalDetails
import dev.g000sha256.tdl.dto.PersonalDocument
import dev.g000sha256.tdl.dto.PhoneNumberAuthenticationSettings
import dev.g000sha256.tdl.dto.PhoneNumberCodeType
import dev.g000sha256.tdl.dto.PhoneNumberCodeTypeChange
import dev.g000sha256.tdl.dto.PhoneNumberCodeTypeConfirmOwnership
import dev.g000sha256.tdl.dto.PhoneNumberCodeTypeVerify
import dev.g000sha256.tdl.dto.PhoneNumberInfo
import dev.g000sha256.tdl.dto.Photo
import dev.g000sha256.tdl.dto.PhotoSize
import dev.g000sha256.tdl.dto.Point
import dev.g000sha256.tdl.dto.Poll
import dev.g000sha256.tdl.dto.PollOption
import dev.g000sha256.tdl.dto.PollType
import dev.g000sha256.tdl.dto.PollTypeQuiz
import dev.g000sha256.tdl.dto.PollTypeRegular
import dev.g000sha256.tdl.dto.PremiumFeature
import dev.g000sha256.tdl.dto.PremiumFeatureAccentColor
import dev.g000sha256.tdl.dto.PremiumFeatureAdvancedChatManagement
import dev.g000sha256.tdl.dto.PremiumFeatureAnimatedProfilePhoto
import dev.g000sha256.tdl.dto.PremiumFeatureAppIcons
import dev.g000sha256.tdl.dto.PremiumFeatureBackgroundForBoth
import dev.g000sha256.tdl.dto.PremiumFeatureBusiness
import dev.g000sha256.tdl.dto.PremiumFeatureChatBoost
import dev.g000sha256.tdl.dto.PremiumFeatureChecklists
import dev.g000sha256.tdl.dto.PremiumFeatureCustomEmoji
import dev.g000sha256.tdl.dto.PremiumFeatureDisabledAds
import dev.g000sha256.tdl.dto.PremiumFeatureEmojiStatus
import dev.g000sha256.tdl.dto.PremiumFeatureForumTopicIcon
import dev.g000sha256.tdl.dto.PremiumFeatureImprovedDownloadSpeed
import dev.g000sha256.tdl.dto.PremiumFeatureIncreasedLimits
import dev.g000sha256.tdl.dto.PremiumFeatureIncreasedUploadFileSize
import dev.g000sha256.tdl.dto.PremiumFeatureLastSeenTimes
import dev.g000sha256.tdl.dto.PremiumFeatureMessageEffects
import dev.g000sha256.tdl.dto.PremiumFeatureMessagePrivacy
import dev.g000sha256.tdl.dto.PremiumFeatureProfileBadge
import dev.g000sha256.tdl.dto.PremiumFeaturePromotionAnimation
import dev.g000sha256.tdl.dto.PremiumFeatureRealTimeChatTranslation
import dev.g000sha256.tdl.dto.PremiumFeatureSavedMessagesTags
import dev.g000sha256.tdl.dto.PremiumFeatureUniqueReactions
import dev.g000sha256.tdl.dto.PremiumFeatureUniqueStickers
import dev.g000sha256.tdl.dto.PremiumFeatureUpgradedStories
import dev.g000sha256.tdl.dto.PremiumFeatureVoiceRecognition
import dev.g000sha256.tdl.dto.PremiumFeatures
import dev.g000sha256.tdl.dto.PremiumGiftCodeInfo
import dev.g000sha256.tdl.dto.PremiumGiftPaymentOption
import dev.g000sha256.tdl.dto.PremiumGiftPaymentOptions
import dev.g000sha256.tdl.dto.PremiumGiveawayPaymentOption
import dev.g000sha256.tdl.dto.PremiumGiveawayPaymentOptions
import dev.g000sha256.tdl.dto.PremiumLimit
import dev.g000sha256.tdl.dto.PremiumLimitType
import dev.g000sha256.tdl.dto.PremiumLimitTypeActiveStoryCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeBioLength
import dev.g000sha256.tdl.dto.PremiumLimitTypeCaptionLength
import dev.g000sha256.tdl.dto.PremiumLimitTypeChatFolderChosenChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeChatFolderCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeChatFolderInviteLinkCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeCreatedPublicChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeFavoriteStickerCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeMonthlyPostedStoryCount
import dev.g000sha256.tdl.dto.PremiumLimitTypePinnedArchivedChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypePinnedChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypePinnedSavedMessagesTopicCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeSavedAnimationCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeShareableChatFolderCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeSimilarChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeStoryCaptionLength
import dev.g000sha256.tdl.dto.PremiumLimitTypeStorySuggestedReactionAreaCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeSupergroupCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeWeeklyPostedStoryCount
import dev.g000sha256.tdl.dto.PremiumPaymentOption
import dev.g000sha256.tdl.dto.PremiumSource
import dev.g000sha256.tdl.dto.PremiumSourceBusinessFeature
import dev.g000sha256.tdl.dto.PremiumSourceFeature
import dev.g000sha256.tdl.dto.PremiumSourceLimitExceeded
import dev.g000sha256.tdl.dto.PremiumSourceLink
import dev.g000sha256.tdl.dto.PremiumSourceSettings
import dev.g000sha256.tdl.dto.PremiumSourceStoryFeature
import dev.g000sha256.tdl.dto.PremiumState
import dev.g000sha256.tdl.dto.PremiumStatePaymentOption
import dev.g000sha256.tdl.dto.PremiumStoryFeature
import dev.g000sha256.tdl.dto.PremiumStoryFeatureCustomExpirationDuration
import dev.g000sha256.tdl.dto.PremiumStoryFeatureLinksAndFormatting
import dev.g000sha256.tdl.dto.PremiumStoryFeaturePermanentViewsHistory
import dev.g000sha256.tdl.dto.PremiumStoryFeaturePriorityOrder
import dev.g000sha256.tdl.dto.PremiumStoryFeatureSaveStories
import dev.g000sha256.tdl.dto.PremiumStoryFeatureStealthMode
import dev.g000sha256.tdl.dto.PremiumStoryFeatureVideoQuality
import dev.g000sha256.tdl.dto.PrepaidGiveaway
import dev.g000sha256.tdl.dto.PreparedInlineMessage
import dev.g000sha256.tdl.dto.PreparedInlineMessageId
import dev.g000sha256.tdl.dto.ProductInfo
import dev.g000sha256.tdl.dto.ProfileAccentColor
import dev.g000sha256.tdl.dto.ProfileAccentColors
import dev.g000sha256.tdl.dto.ProfilePhoto
import dev.g000sha256.tdl.dto.Proxies
import dev.g000sha256.tdl.dto.Proxy
import dev.g000sha256.tdl.dto.ProxyType
import dev.g000sha256.tdl.dto.ProxyTypeHttp
import dev.g000sha256.tdl.dto.ProxyTypeMtproto
import dev.g000sha256.tdl.dto.ProxyTypeSocks5
import dev.g000sha256.tdl.dto.PublicChatType
import dev.g000sha256.tdl.dto.PublicChatTypeHasUsername
import dev.g000sha256.tdl.dto.PublicChatTypeIsLocationBased
import dev.g000sha256.tdl.dto.PublicForward
import dev.g000sha256.tdl.dto.PublicForwardMessage
import dev.g000sha256.tdl.dto.PublicForwardStory
import dev.g000sha256.tdl.dto.PublicForwards
import dev.g000sha256.tdl.dto.PushMessageContent
import dev.g000sha256.tdl.dto.PushMessageContentAnimation
import dev.g000sha256.tdl.dto.PushMessageContentAudio
import dev.g000sha256.tdl.dto.PushMessageContentBasicGroupChatCreate
import dev.g000sha256.tdl.dto.PushMessageContentChatAddMembers
import dev.g000sha256.tdl.dto.PushMessageContentChatChangePhoto
import dev.g000sha256.tdl.dto.PushMessageContentChatChangeTitle
import dev.g000sha256.tdl.dto.PushMessageContentChatDeleteMember
import dev.g000sha256.tdl.dto.PushMessageContentChatJoinByLink
import dev.g000sha256.tdl.dto.PushMessageContentChatJoinByRequest
import dev.g000sha256.tdl.dto.PushMessageContentChatSetBackground
import dev.g000sha256.tdl.dto.PushMessageContentChatSetTheme
import dev.g000sha256.tdl.dto.PushMessageContentChecklist
import dev.g000sha256.tdl.dto.PushMessageContentChecklistTasksAdded
import dev.g000sha256.tdl.dto.PushMessageContentChecklistTasksDone
import dev.g000sha256.tdl.dto.PushMessageContentContact
import dev.g000sha256.tdl.dto.PushMessageContentContactRegistered
import dev.g000sha256.tdl.dto.PushMessageContentDocument
import dev.g000sha256.tdl.dto.PushMessageContentGame
import dev.g000sha256.tdl.dto.PushMessageContentGameScore
import dev.g000sha256.tdl.dto.PushMessageContentGift
import dev.g000sha256.tdl.dto.PushMessageContentGiveaway
import dev.g000sha256.tdl.dto.PushMessageContentHidden
import dev.g000sha256.tdl.dto.PushMessageContentInviteVideoChatParticipants
import dev.g000sha256.tdl.dto.PushMessageContentInvoice
import dev.g000sha256.tdl.dto.PushMessageContentLocation
import dev.g000sha256.tdl.dto.PushMessageContentMediaAlbum
import dev.g000sha256.tdl.dto.PushMessageContentMessageForwards
import dev.g000sha256.tdl.dto.PushMessageContentPaidMedia
import dev.g000sha256.tdl.dto.PushMessageContentPhoto
import dev.g000sha256.tdl.dto.PushMessageContentPoll
import dev.g000sha256.tdl.dto.PushMessageContentPremiumGiftCode
import dev.g000sha256.tdl.dto.PushMessageContentProximityAlertTriggered
import dev.g000sha256.tdl.dto.PushMessageContentRecurringPayment
import dev.g000sha256.tdl.dto.PushMessageContentScreenshotTaken
import dev.g000sha256.tdl.dto.PushMessageContentSticker
import dev.g000sha256.tdl.dto.PushMessageContentStory
import dev.g000sha256.tdl.dto.PushMessageContentSuggestProfilePhoto
import dev.g000sha256.tdl.dto.PushMessageContentText
import dev.g000sha256.tdl.dto.PushMessageContentUpgradedGift
import dev.g000sha256.tdl.dto.PushMessageContentVideo
import dev.g000sha256.tdl.dto.PushMessageContentVideoChatEnded
import dev.g000sha256.tdl.dto.PushMessageContentVideoChatStarted
import dev.g000sha256.tdl.dto.PushMessageContentVideoNote
import dev.g000sha256.tdl.dto.PushMessageContentVoiceNote
import dev.g000sha256.tdl.dto.PushReceiverId
import dev.g000sha256.tdl.dto.QuickReplyMessage
import dev.g000sha256.tdl.dto.QuickReplyMessages
import dev.g000sha256.tdl.dto.QuickReplyShortcut
import dev.g000sha256.tdl.dto.ReactionNotificationSettings
import dev.g000sha256.tdl.dto.ReactionNotificationSource
import dev.g000sha256.tdl.dto.ReactionNotificationSourceAll
import dev.g000sha256.tdl.dto.ReactionNotificationSourceContacts
import dev.g000sha256.tdl.dto.ReactionNotificationSourceNone
import dev.g000sha256.tdl.dto.ReactionType
import dev.g000sha256.tdl.dto.ReactionTypeCustomEmoji
import dev.g000sha256.tdl.dto.ReactionTypeEmoji
import dev.g000sha256.tdl.dto.ReactionTypePaid
import dev.g000sha256.tdl.dto.ReactionUnavailabilityReason
import dev.g000sha256.tdl.dto.ReactionUnavailabilityReasonAnonymousAdministrator
import dev.g000sha256.tdl.dto.ReactionUnavailabilityReasonGuest
import dev.g000sha256.tdl.dto.ReadDatePrivacySettings
import dev.g000sha256.tdl.dto.ReceivedGift
import dev.g000sha256.tdl.dto.ReceivedGifts
import dev.g000sha256.tdl.dto.RecommendedChatFolder
import dev.g000sha256.tdl.dto.RecommendedChatFolders
import dev.g000sha256.tdl.dto.RecoveryEmailAddress
import dev.g000sha256.tdl.dto.RemoteFile
import dev.g000sha256.tdl.dto.ReplyMarkup
import dev.g000sha256.tdl.dto.ReplyMarkupForceReply
import dev.g000sha256.tdl.dto.ReplyMarkupInlineKeyboard
import dev.g000sha256.tdl.dto.ReplyMarkupRemoveKeyboard
import dev.g000sha256.tdl.dto.ReplyMarkupShowKeyboard
import dev.g000sha256.tdl.dto.ReportChatResult
import dev.g000sha256.tdl.dto.ReportChatResultMessagesRequired
import dev.g000sha256.tdl.dto.ReportChatResultOk
import dev.g000sha256.tdl.dto.ReportChatResultOptionRequired
import dev.g000sha256.tdl.dto.ReportChatResultTextRequired
import dev.g000sha256.tdl.dto.ReportOption
import dev.g000sha256.tdl.dto.ReportReason
import dev.g000sha256.tdl.dto.ReportReasonChildAbuse
import dev.g000sha256.tdl.dto.ReportReasonCopyright
import dev.g000sha256.tdl.dto.ReportReasonCustom
import dev.g000sha256.tdl.dto.ReportReasonFake
import dev.g000sha256.tdl.dto.ReportReasonIllegalDrugs
import dev.g000sha256.tdl.dto.ReportReasonPersonalDetails
import dev.g000sha256.tdl.dto.ReportReasonPornography
import dev.g000sha256.tdl.dto.ReportReasonSpam
import dev.g000sha256.tdl.dto.ReportReasonUnrelatedLocation
import dev.g000sha256.tdl.dto.ReportReasonViolence
import dev.g000sha256.tdl.dto.ReportSponsoredResult
import dev.g000sha256.tdl.dto.ReportSponsoredResultAdsHidden
import dev.g000sha256.tdl.dto.ReportSponsoredResultFailed
import dev.g000sha256.tdl.dto.ReportSponsoredResultOk
import dev.g000sha256.tdl.dto.ReportSponsoredResultOptionRequired
import dev.g000sha256.tdl.dto.ReportSponsoredResultPremiumRequired
import dev.g000sha256.tdl.dto.ReportStoryResult
import dev.g000sha256.tdl.dto.ReportStoryResultOk
import dev.g000sha256.tdl.dto.ReportStoryResultOptionRequired
import dev.g000sha256.tdl.dto.ReportStoryResultTextRequired
import dev.g000sha256.tdl.dto.ResendCodeReason
import dev.g000sha256.tdl.dto.ResendCodeReasonUserRequest
import dev.g000sha256.tdl.dto.ResendCodeReasonVerificationFailed
import dev.g000sha256.tdl.dto.ResetPasswordResult
import dev.g000sha256.tdl.dto.ResetPasswordResultDeclined
import dev.g000sha256.tdl.dto.ResetPasswordResultOk
import dev.g000sha256.tdl.dto.ResetPasswordResultPending
import dev.g000sha256.tdl.dto.RevenueWithdrawalState
import dev.g000sha256.tdl.dto.RevenueWithdrawalStateFailed
import dev.g000sha256.tdl.dto.RevenueWithdrawalStatePending
import dev.g000sha256.tdl.dto.RevenueWithdrawalStateSucceeded
import dev.g000sha256.tdl.dto.RichText
import dev.g000sha256.tdl.dto.RichTextAnchor
import dev.g000sha256.tdl.dto.RichTextAnchorLink
import dev.g000sha256.tdl.dto.RichTextBold
import dev.g000sha256.tdl.dto.RichTextEmailAddress
import dev.g000sha256.tdl.dto.RichTextFixed
import dev.g000sha256.tdl.dto.RichTextIcon
import dev.g000sha256.tdl.dto.RichTextItalic
import dev.g000sha256.tdl.dto.RichTextMarked
import dev.g000sha256.tdl.dto.RichTextPhoneNumber
import dev.g000sha256.tdl.dto.RichTextPlain
import dev.g000sha256.tdl.dto.RichTextReference
import dev.g000sha256.tdl.dto.RichTextStrikethrough
import dev.g000sha256.tdl.dto.RichTextSubscript
import dev.g000sha256.tdl.dto.RichTextSuperscript
import dev.g000sha256.tdl.dto.RichTextUnderline
import dev.g000sha256.tdl.dto.RichTextUrl
import dev.g000sha256.tdl.dto.RichTexts
import dev.g000sha256.tdl.dto.RtmpUrl
import dev.g000sha256.tdl.dto.SavedCredentials
import dev.g000sha256.tdl.dto.SavedMessagesTag
import dev.g000sha256.tdl.dto.SavedMessagesTags
import dev.g000sha256.tdl.dto.SavedMessagesTopic
import dev.g000sha256.tdl.dto.SavedMessagesTopicType
import dev.g000sha256.tdl.dto.SavedMessagesTopicTypeAuthorHidden
import dev.g000sha256.tdl.dto.SavedMessagesTopicTypeMyNotes
import dev.g000sha256.tdl.dto.SavedMessagesTopicTypeSavedFromChat
import dev.g000sha256.tdl.dto.ScopeAutosaveSettings
import dev.g000sha256.tdl.dto.ScopeNotificationSettings
import dev.g000sha256.tdl.dto.SearchMessagesChatTypeFilter
import dev.g000sha256.tdl.dto.SearchMessagesChatTypeFilterChannel
import dev.g000sha256.tdl.dto.SearchMessagesChatTypeFilterGroup
import dev.g000sha256.tdl.dto.SearchMessagesChatTypeFilterPrivate
import dev.g000sha256.tdl.dto.SearchMessagesFilter
import dev.g000sha256.tdl.dto.SearchMessagesFilterAnimation
import dev.g000sha256.tdl.dto.SearchMessagesFilterAudio
import dev.g000sha256.tdl.dto.SearchMessagesFilterChatPhoto
import dev.g000sha256.tdl.dto.SearchMessagesFilterDocument
import dev.g000sha256.tdl.dto.SearchMessagesFilterEmpty
import dev.g000sha256.tdl.dto.SearchMessagesFilterFailedToSend
import dev.g000sha256.tdl.dto.SearchMessagesFilterMention
import dev.g000sha256.tdl.dto.SearchMessagesFilterPhoto
import dev.g000sha256.tdl.dto.SearchMessagesFilterPhotoAndVideo
import dev.g000sha256.tdl.dto.SearchMessagesFilterPinned
import dev.g000sha256.tdl.dto.SearchMessagesFilterUnreadMention
import dev.g000sha256.tdl.dto.SearchMessagesFilterUnreadReaction
import dev.g000sha256.tdl.dto.SearchMessagesFilterUrl
import dev.g000sha256.tdl.dto.SearchMessagesFilterVideo
import dev.g000sha256.tdl.dto.SearchMessagesFilterVideoNote
import dev.g000sha256.tdl.dto.SearchMessagesFilterVoiceAndVideoNote
import dev.g000sha256.tdl.dto.SearchMessagesFilterVoiceNote
import dev.g000sha256.tdl.dto.Seconds
import dev.g000sha256.tdl.dto.SecretChat
import dev.g000sha256.tdl.dto.SecretChatState
import dev.g000sha256.tdl.dto.SecretChatStateClosed
import dev.g000sha256.tdl.dto.SecretChatStatePending
import dev.g000sha256.tdl.dto.SecretChatStateReady
import dev.g000sha256.tdl.dto.SentGift
import dev.g000sha256.tdl.dto.SentGiftRegular
import dev.g000sha256.tdl.dto.SentGiftUpgraded
import dev.g000sha256.tdl.dto.SentWebAppMessage
import dev.g000sha256.tdl.dto.Session
import dev.g000sha256.tdl.dto.SessionType
import dev.g000sha256.tdl.dto.SessionTypeAndroid
import dev.g000sha256.tdl.dto.SessionTypeApple
import dev.g000sha256.tdl.dto.SessionTypeBrave
import dev.g000sha256.tdl.dto.SessionTypeChrome
import dev.g000sha256.tdl.dto.SessionTypeEdge
import dev.g000sha256.tdl.dto.SessionTypeFirefox
import dev.g000sha256.tdl.dto.SessionTypeIpad
import dev.g000sha256.tdl.dto.SessionTypeIphone
import dev.g000sha256.tdl.dto.SessionTypeLinux
import dev.g000sha256.tdl.dto.SessionTypeMac
import dev.g000sha256.tdl.dto.SessionTypeOpera
import dev.g000sha256.tdl.dto.SessionTypeSafari
import dev.g000sha256.tdl.dto.SessionTypeUbuntu
import dev.g000sha256.tdl.dto.SessionTypeUnknown
import dev.g000sha256.tdl.dto.SessionTypeVivaldi
import dev.g000sha256.tdl.dto.SessionTypeWindows
import dev.g000sha256.tdl.dto.SessionTypeXbox
import dev.g000sha256.tdl.dto.Sessions
import dev.g000sha256.tdl.dto.SharedChat
import dev.g000sha256.tdl.dto.SharedUser
import dev.g000sha256.tdl.dto.ShippingOption
import dev.g000sha256.tdl.dto.SpeechRecognitionResult
import dev.g000sha256.tdl.dto.SpeechRecognitionResultError
import dev.g000sha256.tdl.dto.SpeechRecognitionResultPending
import dev.g000sha256.tdl.dto.SpeechRecognitionResultText
import dev.g000sha256.tdl.dto.SponsoredChat
import dev.g000sha256.tdl.dto.SponsoredChats
import dev.g000sha256.tdl.dto.SponsoredMessage
import dev.g000sha256.tdl.dto.SponsoredMessages
import dev.g000sha256.tdl.dto.StarAmount
import dev.g000sha256.tdl.dto.StarCount
import dev.g000sha256.tdl.dto.StarGiveawayPaymentOption
import dev.g000sha256.tdl.dto.StarGiveawayPaymentOptions
import dev.g000sha256.tdl.dto.StarGiveawayWinnerOption
import dev.g000sha256.tdl.dto.StarPaymentOption
import dev.g000sha256.tdl.dto.StarPaymentOptions
import dev.g000sha256.tdl.dto.StarRevenueStatistics
import dev.g000sha256.tdl.dto.StarRevenueStatus
import dev.g000sha256.tdl.dto.StarSubscription
import dev.g000sha256.tdl.dto.StarSubscriptionPricing
import dev.g000sha256.tdl.dto.StarSubscriptionType
import dev.g000sha256.tdl.dto.StarSubscriptionTypeBot
import dev.g000sha256.tdl.dto.StarSubscriptionTypeChannel
import dev.g000sha256.tdl.dto.StarSubscriptions
import dev.g000sha256.tdl.dto.StarTransaction
import dev.g000sha256.tdl.dto.StarTransactionDirection
import dev.g000sha256.tdl.dto.StarTransactionDirectionIncoming
import dev.g000sha256.tdl.dto.StarTransactionDirectionOutgoing
import dev.g000sha256.tdl.dto.StarTransactionType
import dev.g000sha256.tdl.dto.StarTransactionTypeAffiliateProgramCommission
import dev.g000sha256.tdl.dto.StarTransactionTypeAppStoreDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypeBotInvoicePurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeBotInvoiceSale
import dev.g000sha256.tdl.dto.StarTransactionTypeBotPaidMediaPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeBotPaidMediaSale
import dev.g000sha256.tdl.dto.StarTransactionTypeBotSubscriptionPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeBotSubscriptionSale
import dev.g000sha256.tdl.dto.StarTransactionTypeBusinessBotTransferReceive
import dev.g000sha256.tdl.dto.StarTransactionTypeBusinessBotTransferSend
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelPaidMediaPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelPaidMediaSale
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelPaidReactionReceive
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelPaidReactionSend
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelSubscriptionPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelSubscriptionSale
import dev.g000sha256.tdl.dto.StarTransactionTypeFragmentDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypeFragmentWithdrawal
import dev.g000sha256.tdl.dto.StarTransactionTypeGiftPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeGiftSale
import dev.g000sha256.tdl.dto.StarTransactionTypeGiftTransfer
import dev.g000sha256.tdl.dto.StarTransactionTypeGiftUpgrade
import dev.g000sha256.tdl.dto.StarTransactionTypeGiveawayDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypeGooglePlayDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypePaidMessageReceive
import dev.g000sha256.tdl.dto.StarTransactionTypePaidMessageSend
import dev.g000sha256.tdl.dto.StarTransactionTypePremiumBotDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypePremiumPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeTelegramAdsWithdrawal
import dev.g000sha256.tdl.dto.StarTransactionTypeTelegramApiUsage
import dev.g000sha256.tdl.dto.StarTransactionTypeUnsupported
import dev.g000sha256.tdl.dto.StarTransactionTypeUpgradedGiftPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeUpgradedGiftSale
import dev.g000sha256.tdl.dto.StarTransactionTypeUserDeposit
import dev.g000sha256.tdl.dto.StarTransactions
import dev.g000sha256.tdl.dto.StatisticalGraph
import dev.g000sha256.tdl.dto.StatisticalGraphAsync
import dev.g000sha256.tdl.dto.StatisticalGraphData
import dev.g000sha256.tdl.dto.StatisticalGraphError
import dev.g000sha256.tdl.dto.StatisticalValue
import dev.g000sha256.tdl.dto.Sticker
import dev.g000sha256.tdl.dto.StickerFormat
import dev.g000sha256.tdl.dto.StickerFormatTgs
import dev.g000sha256.tdl.dto.StickerFormatWebm
import dev.g000sha256.tdl.dto.StickerFormatWebp
import dev.g000sha256.tdl.dto.StickerFullType
import dev.g000sha256.tdl.dto.StickerFullTypeCustomEmoji
import dev.g000sha256.tdl.dto.StickerFullTypeMask
import dev.g000sha256.tdl.dto.StickerFullTypeRegular
import dev.g000sha256.tdl.dto.StickerSet
import dev.g000sha256.tdl.dto.StickerSetInfo
import dev.g000sha256.tdl.dto.StickerSets
import dev.g000sha256.tdl.dto.StickerType
import dev.g000sha256.tdl.dto.StickerTypeCustomEmoji
import dev.g000sha256.tdl.dto.StickerTypeMask
import dev.g000sha256.tdl.dto.StickerTypeRegular
import dev.g000sha256.tdl.dto.Stickers
import dev.g000sha256.tdl.dto.StorageStatistics
import dev.g000sha256.tdl.dto.StorageStatisticsByChat
import dev.g000sha256.tdl.dto.StorageStatisticsByFileType
import dev.g000sha256.tdl.dto.StorageStatisticsFast
import dev.g000sha256.tdl.dto.StorePaymentPurpose
import dev.g000sha256.tdl.dto.StorePaymentPurposeGiftedStars
import dev.g000sha256.tdl.dto.StorePaymentPurposePremiumGift
import dev.g000sha256.tdl.dto.StorePaymentPurposePremiumGiftCodes
import dev.g000sha256.tdl.dto.StorePaymentPurposePremiumGiveaway
import dev.g000sha256.tdl.dto.StorePaymentPurposePremiumSubscription
import dev.g000sha256.tdl.dto.StorePaymentPurposeStarGiveaway
import dev.g000sha256.tdl.dto.StorePaymentPurposeStars
import dev.g000sha256.tdl.dto.StoreTransaction
import dev.g000sha256.tdl.dto.StoreTransactionAppStore
import dev.g000sha256.tdl.dto.StoreTransactionGooglePlay
import dev.g000sha256.tdl.dto.Stories
import dev.g000sha256.tdl.dto.Story
import dev.g000sha256.tdl.dto.StoryArea
import dev.g000sha256.tdl.dto.StoryAreaPosition
import dev.g000sha256.tdl.dto.StoryAreaType
import dev.g000sha256.tdl.dto.StoryAreaTypeLink
import dev.g000sha256.tdl.dto.StoryAreaTypeLocation
import dev.g000sha256.tdl.dto.StoryAreaTypeMessage
import dev.g000sha256.tdl.dto.StoryAreaTypeSuggestedReaction
import dev.g000sha256.tdl.dto.StoryAreaTypeUpgradedGift
import dev.g000sha256.tdl.dto.StoryAreaTypeVenue
import dev.g000sha256.tdl.dto.StoryAreaTypeWeather
import dev.g000sha256.tdl.dto.StoryContent
import dev.g000sha256.tdl.dto.StoryContentPhoto
import dev.g000sha256.tdl.dto.StoryContentUnsupported
import dev.g000sha256.tdl.dto.StoryContentVideo
import dev.g000sha256.tdl.dto.StoryFullId
import dev.g000sha256.tdl.dto.StoryInfo
import dev.g000sha256.tdl.dto.StoryInteraction
import dev.g000sha256.tdl.dto.StoryInteractionInfo
import dev.g000sha256.tdl.dto.StoryInteractionType
import dev.g000sha256.tdl.dto.StoryInteractionTypeForward
import dev.g000sha256.tdl.dto.StoryInteractionTypeRepost
import dev.g000sha256.tdl.dto.StoryInteractionTypeView
import dev.g000sha256.tdl.dto.StoryInteractions
import dev.g000sha256.tdl.dto.StoryList
import dev.g000sha256.tdl.dto.StoryListArchive
import dev.g000sha256.tdl.dto.StoryListMain
import dev.g000sha256.tdl.dto.StoryOrigin
import dev.g000sha256.tdl.dto.StoryOriginHiddenUser
import dev.g000sha256.tdl.dto.StoryOriginPublicStory
import dev.g000sha256.tdl.dto.StoryPrivacySettings
import dev.g000sha256.tdl.dto.StoryPrivacySettingsCloseFriends
import dev.g000sha256.tdl.dto.StoryPrivacySettingsContacts
import dev.g000sha256.tdl.dto.StoryPrivacySettingsEveryone
import dev.g000sha256.tdl.dto.StoryPrivacySettingsSelectedUsers
import dev.g000sha256.tdl.dto.StoryRepostInfo
import dev.g000sha256.tdl.dto.StoryStatistics
import dev.g000sha256.tdl.dto.StoryVideo
import dev.g000sha256.tdl.dto.SuggestedAction
import dev.g000sha256.tdl.dto.SuggestedActionCheckPassword
import dev.g000sha256.tdl.dto.SuggestedActionCheckPhoneNumber
import dev.g000sha256.tdl.dto.SuggestedActionConvertToBroadcastGroup
import dev.g000sha256.tdl.dto.SuggestedActionCustom
import dev.g000sha256.tdl.dto.SuggestedActionEnableArchiveAndMuteNewChats
import dev.g000sha256.tdl.dto.SuggestedActionExtendPremium
import dev.g000sha256.tdl.dto.SuggestedActionExtendStarSubscriptions
import dev.g000sha256.tdl.dto.SuggestedActionGiftPremiumForChristmas
import dev.g000sha256.tdl.dto.SuggestedActionRestorePremium
import dev.g000sha256.tdl.dto.SuggestedActionSetBirthdate
import dev.g000sha256.tdl.dto.SuggestedActionSetPassword
import dev.g000sha256.tdl.dto.SuggestedActionSetProfilePhoto
import dev.g000sha256.tdl.dto.SuggestedActionSubscribeToAnnualPremium
import dev.g000sha256.tdl.dto.SuggestedActionUpgradePremium
import dev.g000sha256.tdl.dto.SuggestedActionViewChecksHint
import dev.g000sha256.tdl.dto.Supergroup
import dev.g000sha256.tdl.dto.SupergroupFullInfo
import dev.g000sha256.tdl.dto.SupergroupMembersFilter
import dev.g000sha256.tdl.dto.SupergroupMembersFilterAdministrators
import dev.g000sha256.tdl.dto.SupergroupMembersFilterBanned
import dev.g000sha256.tdl.dto.SupergroupMembersFilterBots
import dev.g000sha256.tdl.dto.SupergroupMembersFilterContacts
import dev.g000sha256.tdl.dto.SupergroupMembersFilterMention
import dev.g000sha256.tdl.dto.SupergroupMembersFilterRecent
import dev.g000sha256.tdl.dto.SupergroupMembersFilterRestricted
import dev.g000sha256.tdl.dto.SupergroupMembersFilterSearch
import dev.g000sha256.tdl.dto.TMeUrl
import dev.g000sha256.tdl.dto.TMeUrlType
import dev.g000sha256.tdl.dto.TMeUrlTypeChatInvite
import dev.g000sha256.tdl.dto.TMeUrlTypeStickerSet
import dev.g000sha256.tdl.dto.TMeUrlTypeSupergroup
import dev.g000sha256.tdl.dto.TMeUrlTypeUser
import dev.g000sha256.tdl.dto.TMeUrls
import dev.g000sha256.tdl.dto.TargetChat
import dev.g000sha256.tdl.dto.TargetChatChosen
import dev.g000sha256.tdl.dto.TargetChatCurrent
import dev.g000sha256.tdl.dto.TargetChatInternalLink
import dev.g000sha256.tdl.dto.TargetChatTypes
import dev.g000sha256.tdl.dto.TelegramPaymentPurpose
import dev.g000sha256.tdl.dto.TelegramPaymentPurposeGiftedStars
import dev.g000sha256.tdl.dto.TelegramPaymentPurposeJoinChat
import dev.g000sha256.tdl.dto.TelegramPaymentPurposePremiumGift
import dev.g000sha256.tdl.dto.TelegramPaymentPurposePremiumGiftCodes
import dev.g000sha256.tdl.dto.TelegramPaymentPurposePremiumGiveaway
import dev.g000sha256.tdl.dto.TelegramPaymentPurposeStarGiveaway
import dev.g000sha256.tdl.dto.TelegramPaymentPurposeStars
import dev.g000sha256.tdl.dto.TemporaryPasswordState
import dev.g000sha256.tdl.dto.TermsOfService
import dev.g000sha256.tdl.dto.TestBytes
import dev.g000sha256.tdl.dto.TestInt
import dev.g000sha256.tdl.dto.TestString
import dev.g000sha256.tdl.dto.TestVectorInt
import dev.g000sha256.tdl.dto.TestVectorIntObject
import dev.g000sha256.tdl.dto.TestVectorString
import dev.g000sha256.tdl.dto.TestVectorStringObject
import dev.g000sha256.tdl.dto.Text
import dev.g000sha256.tdl.dto.TextEntities
import dev.g000sha256.tdl.dto.TextEntity
import dev.g000sha256.tdl.dto.TextEntityType
import dev.g000sha256.tdl.dto.TextEntityTypeBankCardNumber
import dev.g000sha256.tdl.dto.TextEntityTypeBlockQuote
import dev.g000sha256.tdl.dto.TextEntityTypeBold
import dev.g000sha256.tdl.dto.TextEntityTypeBotCommand
import dev.g000sha256.tdl.dto.TextEntityTypeCashtag
import dev.g000sha256.tdl.dto.TextEntityTypeCode
import dev.g000sha256.tdl.dto.TextEntityTypeCustomEmoji
import dev.g000sha256.tdl.dto.TextEntityTypeEmailAddress
import dev.g000sha256.tdl.dto.TextEntityTypeExpandableBlockQuote
import dev.g000sha256.tdl.dto.TextEntityTypeHashtag
import dev.g000sha256.tdl.dto.TextEntityTypeItalic
import dev.g000sha256.tdl.dto.TextEntityTypeMediaTimestamp
import dev.g000sha256.tdl.dto.TextEntityTypeMention
import dev.g000sha256.tdl.dto.TextEntityTypeMentionName
import dev.g000sha256.tdl.dto.TextEntityTypePhoneNumber
import dev.g000sha256.tdl.dto.TextEntityTypePre
import dev.g000sha256.tdl.dto.TextEntityTypePreCode
import dev.g000sha256.tdl.dto.TextEntityTypeSpoiler
import dev.g000sha256.tdl.dto.TextEntityTypeStrikethrough
import dev.g000sha256.tdl.dto.TextEntityTypeTextUrl
import dev.g000sha256.tdl.dto.TextEntityTypeUnderline
import dev.g000sha256.tdl.dto.TextEntityTypeUrl
import dev.g000sha256.tdl.dto.TextParseMode
import dev.g000sha256.tdl.dto.TextParseModeHTML
import dev.g000sha256.tdl.dto.TextParseModeMarkdown
import dev.g000sha256.tdl.dto.TextQuote
import dev.g000sha256.tdl.dto.ThemeParameters
import dev.g000sha256.tdl.dto.ThemeSettings
import dev.g000sha256.tdl.dto.Thumbnail
import dev.g000sha256.tdl.dto.ThumbnailFormat
import dev.g000sha256.tdl.dto.ThumbnailFormatGif
import dev.g000sha256.tdl.dto.ThumbnailFormatJpeg
import dev.g000sha256.tdl.dto.ThumbnailFormatMpeg4
import dev.g000sha256.tdl.dto.ThumbnailFormatPng
import dev.g000sha256.tdl.dto.ThumbnailFormatTgs
import dev.g000sha256.tdl.dto.ThumbnailFormatWebm
import dev.g000sha256.tdl.dto.ThumbnailFormatWebp
import dev.g000sha256.tdl.dto.TimeZone
import dev.g000sha256.tdl.dto.TimeZones
import dev.g000sha256.tdl.dto.TopChatCategory
import dev.g000sha256.tdl.dto.TopChatCategoryBots
import dev.g000sha256.tdl.dto.TopChatCategoryCalls
import dev.g000sha256.tdl.dto.TopChatCategoryChannels
import dev.g000sha256.tdl.dto.TopChatCategoryForwardChats
import dev.g000sha256.tdl.dto.TopChatCategoryGroups
import dev.g000sha256.tdl.dto.TopChatCategoryInlineBots
import dev.g000sha256.tdl.dto.TopChatCategoryUsers
import dev.g000sha256.tdl.dto.TopChatCategoryWebAppBots
import dev.g000sha256.tdl.dto.TrendingStickerSets
import dev.g000sha256.tdl.dto.UnconfirmedSession
import dev.g000sha256.tdl.dto.UnreadReaction
import dev.g000sha256.tdl.dto.Update
import dev.g000sha256.tdl.dto.UpdateAccentColors
import dev.g000sha256.tdl.dto.UpdateActiveEmojiReactions
import dev.g000sha256.tdl.dto.UpdateActiveLiveLocationMessages
import dev.g000sha256.tdl.dto.UpdateActiveNotifications
import dev.g000sha256.tdl.dto.UpdateAnimatedEmojiMessageClicked
import dev.g000sha256.tdl.dto.UpdateAnimationSearchParameters
import dev.g000sha256.tdl.dto.UpdateApplicationRecaptchaVerificationRequired
import dev.g000sha256.tdl.dto.UpdateApplicationVerificationRequired
import dev.g000sha256.tdl.dto.UpdateAttachmentMenuBots
import dev.g000sha256.tdl.dto.UpdateAuthorizationState
import dev.g000sha256.tdl.dto.UpdateAutosaveSettings
import dev.g000sha256.tdl.dto.UpdateAvailableMessageEffects
import dev.g000sha256.tdl.dto.UpdateBasicGroup
import dev.g000sha256.tdl.dto.UpdateBasicGroupFullInfo
import dev.g000sha256.tdl.dto.UpdateBusinessConnection
import dev.g000sha256.tdl.dto.UpdateBusinessMessageEdited
import dev.g000sha256.tdl.dto.UpdateBusinessMessagesDeleted
import dev.g000sha256.tdl.dto.UpdateCall
import dev.g000sha256.tdl.dto.UpdateChatAccentColors
import dev.g000sha256.tdl.dto.UpdateChatAction
import dev.g000sha256.tdl.dto.UpdateChatActionBar
import dev.g000sha256.tdl.dto.UpdateChatActiveStories
import dev.g000sha256.tdl.dto.UpdateChatAddedToList
import dev.g000sha256.tdl.dto.UpdateChatAvailableReactions
import dev.g000sha256.tdl.dto.UpdateChatBackground
import dev.g000sha256.tdl.dto.UpdateChatBlockList
import dev.g000sha256.tdl.dto.UpdateChatBoost
import dev.g000sha256.tdl.dto.UpdateChatBusinessBotManageBar
import dev.g000sha256.tdl.dto.UpdateChatDefaultDisableNotification
import dev.g000sha256.tdl.dto.UpdateChatDraftMessage
import dev.g000sha256.tdl.dto.UpdateChatEmojiStatus
import dev.g000sha256.tdl.dto.UpdateChatFolders
import dev.g000sha256.tdl.dto.UpdateChatHasProtectedContent
import dev.g000sha256.tdl.dto.UpdateChatHasScheduledMessages
import dev.g000sha256.tdl.dto.UpdateChatIsMarkedAsUnread
import dev.g000sha256.tdl.dto.UpdateChatIsTranslatable
import dev.g000sha256.tdl.dto.UpdateChatLastMessage
import dev.g000sha256.tdl.dto.UpdateChatMember
import dev.g000sha256.tdl.dto.UpdateChatMessageAutoDeleteTime
import dev.g000sha256.tdl.dto.UpdateChatMessageSender
import dev.g000sha256.tdl.dto.UpdateChatNotificationSettings
import dev.g000sha256.tdl.dto.UpdateChatOnlineMemberCount
import dev.g000sha256.tdl.dto.UpdateChatPendingJoinRequests
import dev.g000sha256.tdl.dto.UpdateChatPermissions
import dev.g000sha256.tdl.dto.UpdateChatPhoto
import dev.g000sha256.tdl.dto.UpdateChatPosition
import dev.g000sha256.tdl.dto.UpdateChatReadInbox
import dev.g000sha256.tdl.dto.UpdateChatReadOutbox
import dev.g000sha256.tdl.dto.UpdateChatRemovedFromList
import dev.g000sha256.tdl.dto.UpdateChatReplyMarkup
import dev.g000sha256.tdl.dto.UpdateChatRevenueAmount
import dev.g000sha256.tdl.dto.UpdateChatTheme
import dev.g000sha256.tdl.dto.UpdateChatThemes
import dev.g000sha256.tdl.dto.UpdateChatTitle
import dev.g000sha256.tdl.dto.UpdateChatUnreadMentionCount
import dev.g000sha256.tdl.dto.UpdateChatUnreadReactionCount
import dev.g000sha256.tdl.dto.UpdateChatVideoChat
import dev.g000sha256.tdl.dto.UpdateChatViewAsTopics
import dev.g000sha256.tdl.dto.UpdateConnectionState
import dev.g000sha256.tdl.dto.UpdateContactCloseBirthdays
import dev.g000sha256.tdl.dto.UpdateDefaultBackground
import dev.g000sha256.tdl.dto.UpdateDefaultPaidReactionType
import dev.g000sha256.tdl.dto.UpdateDefaultReactionType
import dev.g000sha256.tdl.dto.UpdateDeleteMessages
import dev.g000sha256.tdl.dto.UpdateDiceEmojis
import dev.g000sha256.tdl.dto.UpdateDirectMessagesChatTopic
import dev.g000sha256.tdl.dto.UpdateFavoriteStickers
import dev.g000sha256.tdl.dto.UpdateFile
import dev.g000sha256.tdl.dto.UpdateFileAddedToDownloads
import dev.g000sha256.tdl.dto.UpdateFileDownload
import dev.g000sha256.tdl.dto.UpdateFileDownloads
import dev.g000sha256.tdl.dto.UpdateFileGenerationStart
import dev.g000sha256.tdl.dto.UpdateFileGenerationStop
import dev.g000sha256.tdl.dto.UpdateFileRemovedFromDownloads
import dev.g000sha256.tdl.dto.UpdateForumTopic
import dev.g000sha256.tdl.dto.UpdateForumTopicInfo
import dev.g000sha256.tdl.dto.UpdateFreezeState
import dev.g000sha256.tdl.dto.UpdateGroupCall
import dev.g000sha256.tdl.dto.UpdateGroupCallParticipant
import dev.g000sha256.tdl.dto.UpdateGroupCallParticipants
import dev.g000sha256.tdl.dto.UpdateGroupCallVerificationState
import dev.g000sha256.tdl.dto.UpdateHavePendingNotifications
import dev.g000sha256.tdl.dto.UpdateInstalledStickerSets
import dev.g000sha256.tdl.dto.UpdateLanguagePackStrings
import dev.g000sha256.tdl.dto.UpdateMessageContent
import dev.g000sha256.tdl.dto.UpdateMessageContentOpened
import dev.g000sha256.tdl.dto.UpdateMessageEdited
import dev.g000sha256.tdl.dto.UpdateMessageFactCheck
import dev.g000sha256.tdl.dto.UpdateMessageInteractionInfo
import dev.g000sha256.tdl.dto.UpdateMessageIsPinned
import dev.g000sha256.tdl.dto.UpdateMessageLiveLocationViewed
import dev.g000sha256.tdl.dto.UpdateMessageMentionRead
import dev.g000sha256.tdl.dto.UpdateMessageReaction
import dev.g000sha256.tdl.dto.UpdateMessageReactions
import dev.g000sha256.tdl.dto.UpdateMessageSendAcknowledged
import dev.g000sha256.tdl.dto.UpdateMessageSendFailed
import dev.g000sha256.tdl.dto.UpdateMessageSendSucceeded
import dev.g000sha256.tdl.dto.UpdateMessageUnreadReactions
import dev.g000sha256.tdl.dto.UpdateNewBusinessCallbackQuery
import dev.g000sha256.tdl.dto.UpdateNewBusinessMessage
import dev.g000sha256.tdl.dto.UpdateNewCallSignalingData
import dev.g000sha256.tdl.dto.UpdateNewCallbackQuery
import dev.g000sha256.tdl.dto.UpdateNewChat
import dev.g000sha256.tdl.dto.UpdateNewChatJoinRequest
import dev.g000sha256.tdl.dto.UpdateNewChosenInlineResult
import dev.g000sha256.tdl.dto.UpdateNewCustomEvent
import dev.g000sha256.tdl.dto.UpdateNewCustomQuery
import dev.g000sha256.tdl.dto.UpdateNewInlineCallbackQuery
import dev.g000sha256.tdl.dto.UpdateNewInlineQuery
import dev.g000sha256.tdl.dto.UpdateNewMessage
import dev.g000sha256.tdl.dto.UpdateNewPreCheckoutQuery
import dev.g000sha256.tdl.dto.UpdateNewShippingQuery
import dev.g000sha256.tdl.dto.UpdateNotification
import dev.g000sha256.tdl.dto.UpdateNotificationGroup
import dev.g000sha256.tdl.dto.UpdateOption
import dev.g000sha256.tdl.dto.UpdateOwnedStarCount
import dev.g000sha256.tdl.dto.UpdatePaidMediaPurchased
import dev.g000sha256.tdl.dto.UpdatePoll
import dev.g000sha256.tdl.dto.UpdatePollAnswer
import dev.g000sha256.tdl.dto.UpdateProfileAccentColors
import dev.g000sha256.tdl.dto.UpdateQuickReplyShortcut
import dev.g000sha256.tdl.dto.UpdateQuickReplyShortcutDeleted
import dev.g000sha256.tdl.dto.UpdateQuickReplyShortcutMessages
import dev.g000sha256.tdl.dto.UpdateQuickReplyShortcuts
import dev.g000sha256.tdl.dto.UpdateReactionNotificationSettings
import dev.g000sha256.tdl.dto.UpdateRecentStickers
import dev.g000sha256.tdl.dto.UpdateSavedAnimations
import dev.g000sha256.tdl.dto.UpdateSavedMessagesTags
import dev.g000sha256.tdl.dto.UpdateSavedMessagesTopic
import dev.g000sha256.tdl.dto.UpdateSavedMessagesTopicCount
import dev.g000sha256.tdl.dto.UpdateSavedNotificationSounds
import dev.g000sha256.tdl.dto.UpdateScopeNotificationSettings
import dev.g000sha256.tdl.dto.UpdateSecretChat
import dev.g000sha256.tdl.dto.UpdateServiceNotification
import dev.g000sha256.tdl.dto.UpdateSpeechRecognitionTrial
import dev.g000sha256.tdl.dto.UpdateSpeedLimitNotification
import dev.g000sha256.tdl.dto.UpdateStarRevenueStatus
import dev.g000sha256.tdl.dto.UpdateStickerSet
import dev.g000sha256.tdl.dto.UpdateStory
import dev.g000sha256.tdl.dto.UpdateStoryDeleted
import dev.g000sha256.tdl.dto.UpdateStoryListChatCount
import dev.g000sha256.tdl.dto.UpdateStoryPostFailed
import dev.g000sha256.tdl.dto.UpdateStoryPostSucceeded
import dev.g000sha256.tdl.dto.UpdateStoryStealthMode
import dev.g000sha256.tdl.dto.UpdateSuggestedActions
import dev.g000sha256.tdl.dto.UpdateSupergroup
import dev.g000sha256.tdl.dto.UpdateSupergroupFullInfo
import dev.g000sha256.tdl.dto.UpdateTermsOfService
import dev.g000sha256.tdl.dto.UpdateTopicMessageCount
import dev.g000sha256.tdl.dto.UpdateTrendingStickerSets
import dev.g000sha256.tdl.dto.UpdateUnconfirmedSession
import dev.g000sha256.tdl.dto.UpdateUnreadChatCount
import dev.g000sha256.tdl.dto.UpdateUnreadMessageCount
import dev.g000sha256.tdl.dto.UpdateUser
import dev.g000sha256.tdl.dto.UpdateUserFullInfo
import dev.g000sha256.tdl.dto.UpdateUserPrivacySettingRules
import dev.g000sha256.tdl.dto.UpdateUserStatus
import dev.g000sha256.tdl.dto.UpdateVideoPublished
import dev.g000sha256.tdl.dto.UpdateWebAppMessageSent
import dev.g000sha256.tdl.dto.Updates
import dev.g000sha256.tdl.dto.UpgradeGiftResult
import dev.g000sha256.tdl.dto.UpgradedGift
import dev.g000sha256.tdl.dto.UpgradedGiftAttributeId
import dev.g000sha256.tdl.dto.UpgradedGiftAttributeIdBackdrop
import dev.g000sha256.tdl.dto.UpgradedGiftAttributeIdModel
import dev.g000sha256.tdl.dto.UpgradedGiftAttributeIdSymbol
import dev.g000sha256.tdl.dto.UpgradedGiftBackdrop
import dev.g000sha256.tdl.dto.UpgradedGiftBackdropColors
import dev.g000sha256.tdl.dto.UpgradedGiftBackdropCount
import dev.g000sha256.tdl.dto.UpgradedGiftModel
import dev.g000sha256.tdl.dto.UpgradedGiftModelCount
import dev.g000sha256.tdl.dto.UpgradedGiftOriginalDetails
import dev.g000sha256.tdl.dto.UpgradedGiftSymbol
import dev.g000sha256.tdl.dto.UpgradedGiftSymbolCount
import dev.g000sha256.tdl.dto.User
import dev.g000sha256.tdl.dto.UserFullInfo
import dev.g000sha256.tdl.dto.UserLink
import dev.g000sha256.tdl.dto.UserPrivacySetting
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowCalls
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowChatInvites
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowFindingByPhoneNumber
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowPeerToPeerCalls
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowUnpaidMessages
import dev.g000sha256.tdl.dto.UserPrivacySettingAutosaveGifts
import dev.g000sha256.tdl.dto.UserPrivacySettingRule
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowAll
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowBots
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowChatMembers
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowContacts
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowPremiumUsers
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowUsers
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictAll
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictBots
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictChatMembers
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictContacts
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictUsers
import dev.g000sha256.tdl.dto.UserPrivacySettingRules
import dev.g000sha256.tdl.dto.UserPrivacySettingShowBio
import dev.g000sha256.tdl.dto.UserPrivacySettingShowBirthdate
import dev.g000sha256.tdl.dto.UserPrivacySettingShowLinkInForwardedMessages
import dev.g000sha256.tdl.dto.UserPrivacySettingShowPhoneNumber
import dev.g000sha256.tdl.dto.UserPrivacySettingShowProfilePhoto
import dev.g000sha256.tdl.dto.UserPrivacySettingShowStatus
import dev.g000sha256.tdl.dto.UserStatus
import dev.g000sha256.tdl.dto.UserStatusEmpty
import dev.g000sha256.tdl.dto.UserStatusLastMonth
import dev.g000sha256.tdl.dto.UserStatusLastWeek
import dev.g000sha256.tdl.dto.UserStatusOffline
import dev.g000sha256.tdl.dto.UserStatusOnline
import dev.g000sha256.tdl.dto.UserStatusRecently
import dev.g000sha256.tdl.dto.UserSupportInfo
import dev.g000sha256.tdl.dto.UserType
import dev.g000sha256.tdl.dto.UserTypeBot
import dev.g000sha256.tdl.dto.UserTypeDeleted
import dev.g000sha256.tdl.dto.UserTypeRegular
import dev.g000sha256.tdl.dto.UserTypeUnknown
import dev.g000sha256.tdl.dto.Usernames
import dev.g000sha256.tdl.dto.Users
import dev.g000sha256.tdl.dto.ValidatedOrderInfo
import dev.g000sha256.tdl.dto.VectorPathCommand
import dev.g000sha256.tdl.dto.VectorPathCommandCubicBezierCurve
import dev.g000sha256.tdl.dto.VectorPathCommandLine
import dev.g000sha256.tdl.dto.Venue
import dev.g000sha256.tdl.dto.VerificationStatus
import dev.g000sha256.tdl.dto.Video
import dev.g000sha256.tdl.dto.VideoChat
import dev.g000sha256.tdl.dto.VideoChatStream
import dev.g000sha256.tdl.dto.VideoChatStreams
import dev.g000sha256.tdl.dto.VideoMessageAdvertisement
import dev.g000sha256.tdl.dto.VideoMessageAdvertisements
import dev.g000sha256.tdl.dto.VideoNote
import dev.g000sha256.tdl.dto.VideoStoryboard
import dev.g000sha256.tdl.dto.VoiceNote
import dev.g000sha256.tdl.dto.WebApp
import dev.g000sha256.tdl.dto.WebAppInfo
import dev.g000sha256.tdl.dto.WebAppOpenMode
import dev.g000sha256.tdl.dto.WebAppOpenModeCompact
import dev.g000sha256.tdl.dto.WebAppOpenModeFullScreen
import dev.g000sha256.tdl.dto.WebAppOpenModeFullSize
import dev.g000sha256.tdl.dto.WebAppOpenParameters
import dev.g000sha256.tdl.dto.WebPageInstantView
import dev.g000sha256.tdl.util.getBoolean
import dev.g000sha256.tdl.util.getBytes
import dev.g000sha256.tdl.util.getBytesArray
import dev.g000sha256.tdl.util.getDouble
import dev.g000sha256.tdl.util.getInt
import dev.g000sha256.tdl.util.getInts
import dev.g000sha256.tdl.util.getLong
import dev.g000sha256.tdl.util.getLongs
import dev.g000sha256.tdl.util.getObject
import dev.g000sha256.tdl.util.getObjectNullable
import dev.g000sha256.tdl.util.getObjects
import dev.g000sha256.tdl.util.getObjectsArray
import dev.g000sha256.tdl.util.getString
import dev.g000sha256.tdl.util.getStrings
import dev.g000sha256.tdl.util.parseJsonObject
import kotlin.Any
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Triple
import kotlinx.serialization.json.JsonObject

@Suppress("UNUSED_PARAMETER")
internal class TdlDeserializer internal constructor() {
    internal fun deserialize(json: String): Triple<Int, Long, Any> {
        val jsonObject = parseJsonObject(json = json)
        val type = jsonObject.getString(key = "@type")
        val clientId = jsonObject.getInt(key = "@client_id")
        val requestId = jsonObject.getLong(key = "@extra")
        val dto = deserialize(type = type, jsonObject = jsonObject)
        return Triple(first = clientId, second = requestId, third = dto)
    }

    private fun deserialize(type: String, jsonObject: JsonObject): Any {
        when(type) {
            "accentColor" -> return deserializeAccentColor(jsonObject = jsonObject)
            "acceptedGiftTypes" -> return deserializeAcceptedGiftTypes(jsonObject = jsonObject)
            "accountInfo" -> return deserializeAccountInfo(jsonObject = jsonObject)
            "accountTtl" -> return deserializeAccountTtl(jsonObject = jsonObject)
            "addedReaction" -> return deserializeAddedReaction(jsonObject = jsonObject)
            "addedReactions" -> return deserializeAddedReactions(jsonObject = jsonObject)
            "address" -> return deserializeAddress(jsonObject = jsonObject)
            "advertisementSponsor" -> return deserializeAdvertisementSponsor(jsonObject = jsonObject)
            "affiliateInfo" -> return deserializeAffiliateInfo(jsonObject = jsonObject)
            "affiliateProgramInfo" -> return deserializeAffiliateProgramInfo(jsonObject = jsonObject)
            "affiliateProgramParameters" -> return deserializeAffiliateProgramParameters(jsonObject = jsonObject)
            "affiliateProgramSortOrderCreationDate" -> return deserializeAffiliateProgramSortOrderCreationDate(jsonObject = jsonObject)
            "affiliateProgramSortOrderProfitability" -> return deserializeAffiliateProgramSortOrderProfitability(jsonObject = jsonObject)
            "affiliateProgramSortOrderRevenue" -> return deserializeAffiliateProgramSortOrderRevenue(jsonObject = jsonObject)
            "affiliateTypeBot" -> return deserializeAffiliateTypeBot(jsonObject = jsonObject)
            "affiliateTypeChannel" -> return deserializeAffiliateTypeChannel(jsonObject = jsonObject)
            "affiliateTypeCurrentUser" -> return deserializeAffiliateTypeCurrentUser(jsonObject = jsonObject)
            "alternativeVideo" -> return deserializeAlternativeVideo(jsonObject = jsonObject)
            "animatedChatPhoto" -> return deserializeAnimatedChatPhoto(jsonObject = jsonObject)
            "animatedEmoji" -> return deserializeAnimatedEmoji(jsonObject = jsonObject)
            "animation" -> return deserializeAnimation(jsonObject = jsonObject)
            "animations" -> return deserializeAnimations(jsonObject = jsonObject)
            "archiveChatListSettings" -> return deserializeArchiveChatListSettings(jsonObject = jsonObject)
            "attachmentMenuBot" -> return deserializeAttachmentMenuBot(jsonObject = jsonObject)
            "attachmentMenuBotColor" -> return deserializeAttachmentMenuBotColor(jsonObject = jsonObject)
            "audio" -> return deserializeAudio(jsonObject = jsonObject)
            "authenticationCodeInfo" -> return deserializeAuthenticationCodeInfo(jsonObject = jsonObject)
            "authenticationCodeTypeCall" -> return deserializeAuthenticationCodeTypeCall(jsonObject = jsonObject)
            "authenticationCodeTypeFirebaseAndroid" -> return deserializeAuthenticationCodeTypeFirebaseAndroid(jsonObject = jsonObject)
            "authenticationCodeTypeFirebaseIos" -> return deserializeAuthenticationCodeTypeFirebaseIos(jsonObject = jsonObject)
            "authenticationCodeTypeFlashCall" -> return deserializeAuthenticationCodeTypeFlashCall(jsonObject = jsonObject)
            "authenticationCodeTypeFragment" -> return deserializeAuthenticationCodeTypeFragment(jsonObject = jsonObject)
            "authenticationCodeTypeMissedCall" -> return deserializeAuthenticationCodeTypeMissedCall(jsonObject = jsonObject)
            "authenticationCodeTypeSms" -> return deserializeAuthenticationCodeTypeSms(jsonObject = jsonObject)
            "authenticationCodeTypeSmsPhrase" -> return deserializeAuthenticationCodeTypeSmsPhrase(jsonObject = jsonObject)
            "authenticationCodeTypeSmsWord" -> return deserializeAuthenticationCodeTypeSmsWord(jsonObject = jsonObject)
            "authenticationCodeTypeTelegramMessage" -> return deserializeAuthenticationCodeTypeTelegramMessage(jsonObject = jsonObject)
            "authorizationStateClosed" -> return deserializeAuthorizationStateClosed(jsonObject = jsonObject)
            "authorizationStateClosing" -> return deserializeAuthorizationStateClosing(jsonObject = jsonObject)
            "authorizationStateLoggingOut" -> return deserializeAuthorizationStateLoggingOut(jsonObject = jsonObject)
            "authorizationStateReady" -> return deserializeAuthorizationStateReady(jsonObject = jsonObject)
            "authorizationStateWaitCode" -> return deserializeAuthorizationStateWaitCode(jsonObject = jsonObject)
            "authorizationStateWaitEmailAddress" -> return deserializeAuthorizationStateWaitEmailAddress(jsonObject = jsonObject)
            "authorizationStateWaitEmailCode" -> return deserializeAuthorizationStateWaitEmailCode(jsonObject = jsonObject)
            "authorizationStateWaitOtherDeviceConfirmation" -> return deserializeAuthorizationStateWaitOtherDeviceConfirmation(jsonObject = jsonObject)
            "authorizationStateWaitPassword" -> return deserializeAuthorizationStateWaitPassword(jsonObject = jsonObject)
            "authorizationStateWaitPhoneNumber" -> return deserializeAuthorizationStateWaitPhoneNumber(jsonObject = jsonObject)
            "authorizationStateWaitPremiumPurchase" -> return deserializeAuthorizationStateWaitPremiumPurchase(jsonObject = jsonObject)
            "authorizationStateWaitRegistration" -> return deserializeAuthorizationStateWaitRegistration(jsonObject = jsonObject)
            "authorizationStateWaitTdlibParameters" -> return deserializeAuthorizationStateWaitTdlibParameters(jsonObject = jsonObject)
            "autoDownloadSettings" -> return deserializeAutoDownloadSettings(jsonObject = jsonObject)
            "autoDownloadSettingsPresets" -> return deserializeAutoDownloadSettingsPresets(jsonObject = jsonObject)
            "autosaveSettings" -> return deserializeAutosaveSettings(jsonObject = jsonObject)
            "autosaveSettingsException" -> return deserializeAutosaveSettingsException(jsonObject = jsonObject)
            "autosaveSettingsScopeChannelChats" -> return deserializeAutosaveSettingsScopeChannelChats(jsonObject = jsonObject)
            "autosaveSettingsScopeChat" -> return deserializeAutosaveSettingsScopeChat(jsonObject = jsonObject)
            "autosaveSettingsScopeGroupChats" -> return deserializeAutosaveSettingsScopeGroupChats(jsonObject = jsonObject)
            "autosaveSettingsScopePrivateChats" -> return deserializeAutosaveSettingsScopePrivateChats(jsonObject = jsonObject)
            "availableGift" -> return deserializeAvailableGift(jsonObject = jsonObject)
            "availableGifts" -> return deserializeAvailableGifts(jsonObject = jsonObject)
            "availableReaction" -> return deserializeAvailableReaction(jsonObject = jsonObject)
            "availableReactions" -> return deserializeAvailableReactions(jsonObject = jsonObject)
            "background" -> return deserializeBackground(jsonObject = jsonObject)
            "backgroundFillFreeformGradient" -> return deserializeBackgroundFillFreeformGradient(jsonObject = jsonObject)
            "backgroundFillGradient" -> return deserializeBackgroundFillGradient(jsonObject = jsonObject)
            "backgroundFillSolid" -> return deserializeBackgroundFillSolid(jsonObject = jsonObject)
            "backgroundTypeChatTheme" -> return deserializeBackgroundTypeChatTheme(jsonObject = jsonObject)
            "backgroundTypeFill" -> return deserializeBackgroundTypeFill(jsonObject = jsonObject)
            "backgroundTypePattern" -> return deserializeBackgroundTypePattern(jsonObject = jsonObject)
            "backgroundTypeWallpaper" -> return deserializeBackgroundTypeWallpaper(jsonObject = jsonObject)
            "backgrounds" -> return deserializeBackgrounds(jsonObject = jsonObject)
            "bankCardActionOpenUrl" -> return deserializeBankCardActionOpenUrl(jsonObject = jsonObject)
            "bankCardInfo" -> return deserializeBankCardInfo(jsonObject = jsonObject)
            "basicGroup" -> return deserializeBasicGroup(jsonObject = jsonObject)
            "basicGroupFullInfo" -> return deserializeBasicGroupFullInfo(jsonObject = jsonObject)
            "birthdate" -> return deserializeBirthdate(jsonObject = jsonObject)
            "blockListMain" -> return deserializeBlockListMain(jsonObject = jsonObject)
            "blockListStories" -> return deserializeBlockListStories(jsonObject = jsonObject)
            "botCommand" -> return deserializeBotCommand(jsonObject = jsonObject)
            "botCommandScopeAllChatAdministrators" -> return deserializeBotCommandScopeAllChatAdministrators(jsonObject = jsonObject)
            "botCommandScopeAllGroupChats" -> return deserializeBotCommandScopeAllGroupChats(jsonObject = jsonObject)
            "botCommandScopeAllPrivateChats" -> return deserializeBotCommandScopeAllPrivateChats(jsonObject = jsonObject)
            "botCommandScopeChat" -> return deserializeBotCommandScopeChat(jsonObject = jsonObject)
            "botCommandScopeChatAdministrators" -> return deserializeBotCommandScopeChatAdministrators(jsonObject = jsonObject)
            "botCommandScopeChatMember" -> return deserializeBotCommandScopeChatMember(jsonObject = jsonObject)
            "botCommandScopeDefault" -> return deserializeBotCommandScopeDefault(jsonObject = jsonObject)
            "botCommands" -> return deserializeBotCommands(jsonObject = jsonObject)
            "botInfo" -> return deserializeBotInfo(jsonObject = jsonObject)
            "botMediaPreview" -> return deserializeBotMediaPreview(jsonObject = jsonObject)
            "botMediaPreviewInfo" -> return deserializeBotMediaPreviewInfo(jsonObject = jsonObject)
            "botMediaPreviews" -> return deserializeBotMediaPreviews(jsonObject = jsonObject)
            "botMenuButton" -> return deserializeBotMenuButton(jsonObject = jsonObject)
            "botVerification" -> return deserializeBotVerification(jsonObject = jsonObject)
            "botVerificationParameters" -> return deserializeBotVerificationParameters(jsonObject = jsonObject)
            "botWriteAccessAllowReasonAcceptedRequest" -> return deserializeBotWriteAccessAllowReasonAcceptedRequest(jsonObject = jsonObject)
            "botWriteAccessAllowReasonAddedToAttachmentMenu" -> return deserializeBotWriteAccessAllowReasonAddedToAttachmentMenu(jsonObject = jsonObject)
            "botWriteAccessAllowReasonConnectedWebsite" -> return deserializeBotWriteAccessAllowReasonConnectedWebsite(jsonObject = jsonObject)
            "botWriteAccessAllowReasonLaunchedWebApp" -> return deserializeBotWriteAccessAllowReasonLaunchedWebApp(jsonObject = jsonObject)
            "businessAwayMessageScheduleAlways" -> return deserializeBusinessAwayMessageScheduleAlways(jsonObject = jsonObject)
            "businessAwayMessageScheduleCustom" -> return deserializeBusinessAwayMessageScheduleCustom(jsonObject = jsonObject)
            "businessAwayMessageScheduleOutsideOfOpeningHours" -> return deserializeBusinessAwayMessageScheduleOutsideOfOpeningHours(jsonObject = jsonObject)
            "businessAwayMessageSettings" -> return deserializeBusinessAwayMessageSettings(jsonObject = jsonObject)
            "businessBotManageBar" -> return deserializeBusinessBotManageBar(jsonObject = jsonObject)
            "businessBotRights" -> return deserializeBusinessBotRights(jsonObject = jsonObject)
            "businessChatLink" -> return deserializeBusinessChatLink(jsonObject = jsonObject)
            "businessChatLinkInfo" -> return deserializeBusinessChatLinkInfo(jsonObject = jsonObject)
            "businessChatLinks" -> return deserializeBusinessChatLinks(jsonObject = jsonObject)
            "businessConnectedBot" -> return deserializeBusinessConnectedBot(jsonObject = jsonObject)
            "businessConnection" -> return deserializeBusinessConnection(jsonObject = jsonObject)
            "businessFeatureAccountLinks" -> return deserializeBusinessFeatureAccountLinks(jsonObject = jsonObject)
            "businessFeatureAwayMessage" -> return deserializeBusinessFeatureAwayMessage(jsonObject = jsonObject)
            "businessFeatureBots" -> return deserializeBusinessFeatureBots(jsonObject = jsonObject)
            "businessFeatureChatFolderTags" -> return deserializeBusinessFeatureChatFolderTags(jsonObject = jsonObject)
            "businessFeatureEmojiStatus" -> return deserializeBusinessFeatureEmojiStatus(jsonObject = jsonObject)
            "businessFeatureGreetingMessage" -> return deserializeBusinessFeatureGreetingMessage(jsonObject = jsonObject)
            "businessFeatureLocation" -> return deserializeBusinessFeatureLocation(jsonObject = jsonObject)
            "businessFeatureOpeningHours" -> return deserializeBusinessFeatureOpeningHours(jsonObject = jsonObject)
            "businessFeaturePromotionAnimation" -> return deserializeBusinessFeaturePromotionAnimation(jsonObject = jsonObject)
            "businessFeatureQuickReplies" -> return deserializeBusinessFeatureQuickReplies(jsonObject = jsonObject)
            "businessFeatureStartPage" -> return deserializeBusinessFeatureStartPage(jsonObject = jsonObject)
            "businessFeatureUpgradedStories" -> return deserializeBusinessFeatureUpgradedStories(jsonObject = jsonObject)
            "businessFeatures" -> return deserializeBusinessFeatures(jsonObject = jsonObject)
            "businessGreetingMessageSettings" -> return deserializeBusinessGreetingMessageSettings(jsonObject = jsonObject)
            "businessInfo" -> return deserializeBusinessInfo(jsonObject = jsonObject)
            "businessLocation" -> return deserializeBusinessLocation(jsonObject = jsonObject)
            "businessMessage" -> return deserializeBusinessMessage(jsonObject = jsonObject)
            "businessMessages" -> return deserializeBusinessMessages(jsonObject = jsonObject)
            "businessOpeningHours" -> return deserializeBusinessOpeningHours(jsonObject = jsonObject)
            "businessOpeningHoursInterval" -> return deserializeBusinessOpeningHoursInterval(jsonObject = jsonObject)
            "businessRecipients" -> return deserializeBusinessRecipients(jsonObject = jsonObject)
            "businessStartPage" -> return deserializeBusinessStartPage(jsonObject = jsonObject)
            "call" -> return deserializeCall(jsonObject = jsonObject)
            "callDiscardReasonDeclined" -> return deserializeCallDiscardReasonDeclined(jsonObject = jsonObject)
            "callDiscardReasonDisconnected" -> return deserializeCallDiscardReasonDisconnected(jsonObject = jsonObject)
            "callDiscardReasonEmpty" -> return deserializeCallDiscardReasonEmpty(jsonObject = jsonObject)
            "callDiscardReasonHungUp" -> return deserializeCallDiscardReasonHungUp(jsonObject = jsonObject)
            "callDiscardReasonMissed" -> return deserializeCallDiscardReasonMissed(jsonObject = jsonObject)
            "callDiscardReasonUpgradeToGroupCall" -> return deserializeCallDiscardReasonUpgradeToGroupCall(jsonObject = jsonObject)
            "callId" -> return deserializeCallId(jsonObject = jsonObject)
            "callProblemDistortedSpeech" -> return deserializeCallProblemDistortedSpeech(jsonObject = jsonObject)
            "callProblemDistortedVideo" -> return deserializeCallProblemDistortedVideo(jsonObject = jsonObject)
            "callProblemDropped" -> return deserializeCallProblemDropped(jsonObject = jsonObject)
            "callProblemEcho" -> return deserializeCallProblemEcho(jsonObject = jsonObject)
            "callProblemInterruptions" -> return deserializeCallProblemInterruptions(jsonObject = jsonObject)
            "callProblemNoise" -> return deserializeCallProblemNoise(jsonObject = jsonObject)
            "callProblemPixelatedVideo" -> return deserializeCallProblemPixelatedVideo(jsonObject = jsonObject)
            "callProblemSilentLocal" -> return deserializeCallProblemSilentLocal(jsonObject = jsonObject)
            "callProblemSilentRemote" -> return deserializeCallProblemSilentRemote(jsonObject = jsonObject)
            "callProtocol" -> return deserializeCallProtocol(jsonObject = jsonObject)
            "callServer" -> return deserializeCallServer(jsonObject = jsonObject)
            "callServerTypeTelegramReflector" -> return deserializeCallServerTypeTelegramReflector(jsonObject = jsonObject)
            "callServerTypeWebrtc" -> return deserializeCallServerTypeWebrtc(jsonObject = jsonObject)
            "callStateDiscarded" -> return deserializeCallStateDiscarded(jsonObject = jsonObject)
            "callStateError" -> return deserializeCallStateError(jsonObject = jsonObject)
            "callStateExchangingKeys" -> return deserializeCallStateExchangingKeys(jsonObject = jsonObject)
            "callStateHangingUp" -> return deserializeCallStateHangingUp(jsonObject = jsonObject)
            "callStatePending" -> return deserializeCallStatePending(jsonObject = jsonObject)
            "callStateReady" -> return deserializeCallStateReady(jsonObject = jsonObject)
            "callbackQueryAnswer" -> return deserializeCallbackQueryAnswer(jsonObject = jsonObject)
            "callbackQueryPayloadData" -> return deserializeCallbackQueryPayloadData(jsonObject = jsonObject)
            "callbackQueryPayloadDataWithPassword" -> return deserializeCallbackQueryPayloadDataWithPassword(jsonObject = jsonObject)
            "callbackQueryPayloadGame" -> return deserializeCallbackQueryPayloadGame(jsonObject = jsonObject)
            "canPostStoryResultActiveStoryLimitExceeded" -> return deserializeCanPostStoryResultActiveStoryLimitExceeded(jsonObject = jsonObject)
            "canPostStoryResultBoostNeeded" -> return deserializeCanPostStoryResultBoostNeeded(jsonObject = jsonObject)
            "canPostStoryResultMonthlyLimitExceeded" -> return deserializeCanPostStoryResultMonthlyLimitExceeded(jsonObject = jsonObject)
            "canPostStoryResultOk" -> return deserializeCanPostStoryResultOk(jsonObject = jsonObject)
            "canPostStoryResultPremiumNeeded" -> return deserializeCanPostStoryResultPremiumNeeded(jsonObject = jsonObject)
            "canPostStoryResultWeeklyLimitExceeded" -> return deserializeCanPostStoryResultWeeklyLimitExceeded(jsonObject = jsonObject)
            "canSendMessageToUserResultOk" -> return deserializeCanSendMessageToUserResultOk(jsonObject = jsonObject)
            "canSendMessageToUserResultUserHasPaidMessages" -> return deserializeCanSendMessageToUserResultUserHasPaidMessages(jsonObject = jsonObject)
            "canSendMessageToUserResultUserIsDeleted" -> return deserializeCanSendMessageToUserResultUserIsDeleted(jsonObject = jsonObject)
            "canSendMessageToUserResultUserRestrictsNewChats" -> return deserializeCanSendMessageToUserResultUserRestrictsNewChats(jsonObject = jsonObject)
            "canTransferOwnershipResultOk" -> return deserializeCanTransferOwnershipResultOk(jsonObject = jsonObject)
            "canTransferOwnershipResultPasswordNeeded" -> return deserializeCanTransferOwnershipResultPasswordNeeded(jsonObject = jsonObject)
            "canTransferOwnershipResultPasswordTooFresh" -> return deserializeCanTransferOwnershipResultPasswordTooFresh(jsonObject = jsonObject)
            "canTransferOwnershipResultSessionTooFresh" -> return deserializeCanTransferOwnershipResultSessionTooFresh(jsonObject = jsonObject)
            "chat" -> return deserializeChat(jsonObject = jsonObject)
            "chatActionBarAddContact" -> return deserializeChatActionBarAddContact(jsonObject = jsonObject)
            "chatActionBarInviteMembers" -> return deserializeChatActionBarInviteMembers(jsonObject = jsonObject)
            "chatActionBarJoinRequest" -> return deserializeChatActionBarJoinRequest(jsonObject = jsonObject)
            "chatActionBarReportAddBlock" -> return deserializeChatActionBarReportAddBlock(jsonObject = jsonObject)
            "chatActionBarReportSpam" -> return deserializeChatActionBarReportSpam(jsonObject = jsonObject)
            "chatActionBarSharePhoneNumber" -> return deserializeChatActionBarSharePhoneNumber(jsonObject = jsonObject)
            "chatActionCancel" -> return deserializeChatActionCancel(jsonObject = jsonObject)
            "chatActionChoosingContact" -> return deserializeChatActionChoosingContact(jsonObject = jsonObject)
            "chatActionChoosingLocation" -> return deserializeChatActionChoosingLocation(jsonObject = jsonObject)
            "chatActionChoosingSticker" -> return deserializeChatActionChoosingSticker(jsonObject = jsonObject)
            "chatActionRecordingVideo" -> return deserializeChatActionRecordingVideo(jsonObject = jsonObject)
            "chatActionRecordingVideoNote" -> return deserializeChatActionRecordingVideoNote(jsonObject = jsonObject)
            "chatActionRecordingVoiceNote" -> return deserializeChatActionRecordingVoiceNote(jsonObject = jsonObject)
            "chatActionStartPlayingGame" -> return deserializeChatActionStartPlayingGame(jsonObject = jsonObject)
            "chatActionTyping" -> return deserializeChatActionTyping(jsonObject = jsonObject)
            "chatActionUploadingDocument" -> return deserializeChatActionUploadingDocument(jsonObject = jsonObject)
            "chatActionUploadingPhoto" -> return deserializeChatActionUploadingPhoto(jsonObject = jsonObject)
            "chatActionUploadingVideo" -> return deserializeChatActionUploadingVideo(jsonObject = jsonObject)
            "chatActionUploadingVideoNote" -> return deserializeChatActionUploadingVideoNote(jsonObject = jsonObject)
            "chatActionUploadingVoiceNote" -> return deserializeChatActionUploadingVoiceNote(jsonObject = jsonObject)
            "chatActionWatchingAnimations" -> return deserializeChatActionWatchingAnimations(jsonObject = jsonObject)
            "chatActiveStories" -> return deserializeChatActiveStories(jsonObject = jsonObject)
            "chatAdministrator" -> return deserializeChatAdministrator(jsonObject = jsonObject)
            "chatAdministratorRights" -> return deserializeChatAdministratorRights(jsonObject = jsonObject)
            "chatAdministrators" -> return deserializeChatAdministrators(jsonObject = jsonObject)
            "chatAvailableReactionsAll" -> return deserializeChatAvailableReactionsAll(jsonObject = jsonObject)
            "chatAvailableReactionsSome" -> return deserializeChatAvailableReactionsSome(jsonObject = jsonObject)
            "chatBackground" -> return deserializeChatBackground(jsonObject = jsonObject)
            "chatBoost" -> return deserializeChatBoost(jsonObject = jsonObject)
            "chatBoostFeatures" -> return deserializeChatBoostFeatures(jsonObject = jsonObject)
            "chatBoostLevelFeatures" -> return deserializeChatBoostLevelFeatures(jsonObject = jsonObject)
            "chatBoostLink" -> return deserializeChatBoostLink(jsonObject = jsonObject)
            "chatBoostLinkInfo" -> return deserializeChatBoostLinkInfo(jsonObject = jsonObject)
            "chatBoostSlot" -> return deserializeChatBoostSlot(jsonObject = jsonObject)
            "chatBoostSlots" -> return deserializeChatBoostSlots(jsonObject = jsonObject)
            "chatBoostSourceGiftCode" -> return deserializeChatBoostSourceGiftCode(jsonObject = jsonObject)
            "chatBoostSourceGiveaway" -> return deserializeChatBoostSourceGiveaway(jsonObject = jsonObject)
            "chatBoostSourcePremium" -> return deserializeChatBoostSourcePremium(jsonObject = jsonObject)
            "chatBoostStatus" -> return deserializeChatBoostStatus(jsonObject = jsonObject)
            "chatEvent" -> return deserializeChatEvent(jsonObject = jsonObject)
            "chatEventAccentColorChanged" -> return deserializeChatEventAccentColorChanged(jsonObject = jsonObject)
            "chatEventActiveUsernamesChanged" -> return deserializeChatEventActiveUsernamesChanged(jsonObject = jsonObject)
            "chatEventAutomaticTranslationToggled" -> return deserializeChatEventAutomaticTranslationToggled(jsonObject = jsonObject)
            "chatEventAvailableReactionsChanged" -> return deserializeChatEventAvailableReactionsChanged(jsonObject = jsonObject)
            "chatEventBackgroundChanged" -> return deserializeChatEventBackgroundChanged(jsonObject = jsonObject)
            "chatEventCustomEmojiStickerSetChanged" -> return deserializeChatEventCustomEmojiStickerSetChanged(jsonObject = jsonObject)
            "chatEventDescriptionChanged" -> return deserializeChatEventDescriptionChanged(jsonObject = jsonObject)
            "chatEventEmojiStatusChanged" -> return deserializeChatEventEmojiStatusChanged(jsonObject = jsonObject)
            "chatEventForumTopicCreated" -> return deserializeChatEventForumTopicCreated(jsonObject = jsonObject)
            "chatEventForumTopicDeleted" -> return deserializeChatEventForumTopicDeleted(jsonObject = jsonObject)
            "chatEventForumTopicEdited" -> return deserializeChatEventForumTopicEdited(jsonObject = jsonObject)
            "chatEventForumTopicPinned" -> return deserializeChatEventForumTopicPinned(jsonObject = jsonObject)
            "chatEventForumTopicToggleIsClosed" -> return deserializeChatEventForumTopicToggleIsClosed(jsonObject = jsonObject)
            "chatEventForumTopicToggleIsHidden" -> return deserializeChatEventForumTopicToggleIsHidden(jsonObject = jsonObject)
            "chatEventHasAggressiveAntiSpamEnabledToggled" -> return deserializeChatEventHasAggressiveAntiSpamEnabledToggled(jsonObject = jsonObject)
            "chatEventHasProtectedContentToggled" -> return deserializeChatEventHasProtectedContentToggled(jsonObject = jsonObject)
            "chatEventInviteLinkDeleted" -> return deserializeChatEventInviteLinkDeleted(jsonObject = jsonObject)
            "chatEventInviteLinkEdited" -> return deserializeChatEventInviteLinkEdited(jsonObject = jsonObject)
            "chatEventInviteLinkRevoked" -> return deserializeChatEventInviteLinkRevoked(jsonObject = jsonObject)
            "chatEventInvitesToggled" -> return deserializeChatEventInvitesToggled(jsonObject = jsonObject)
            "chatEventIsAllHistoryAvailableToggled" -> return deserializeChatEventIsAllHistoryAvailableToggled(jsonObject = jsonObject)
            "chatEventIsForumToggled" -> return deserializeChatEventIsForumToggled(jsonObject = jsonObject)
            "chatEventLinkedChatChanged" -> return deserializeChatEventLinkedChatChanged(jsonObject = jsonObject)
            "chatEventLocationChanged" -> return deserializeChatEventLocationChanged(jsonObject = jsonObject)
            "chatEventLogFilters" -> return deserializeChatEventLogFilters(jsonObject = jsonObject)
            "chatEventMemberInvited" -> return deserializeChatEventMemberInvited(jsonObject = jsonObject)
            "chatEventMemberJoined" -> return deserializeChatEventMemberJoined(jsonObject = jsonObject)
            "chatEventMemberJoinedByInviteLink" -> return deserializeChatEventMemberJoinedByInviteLink(jsonObject = jsonObject)
            "chatEventMemberJoinedByRequest" -> return deserializeChatEventMemberJoinedByRequest(jsonObject = jsonObject)
            "chatEventMemberLeft" -> return deserializeChatEventMemberLeft(jsonObject = jsonObject)
            "chatEventMemberPromoted" -> return deserializeChatEventMemberPromoted(jsonObject = jsonObject)
            "chatEventMemberRestricted" -> return deserializeChatEventMemberRestricted(jsonObject = jsonObject)
            "chatEventMemberSubscriptionExtended" -> return deserializeChatEventMemberSubscriptionExtended(jsonObject = jsonObject)
            "chatEventMessageAutoDeleteTimeChanged" -> return deserializeChatEventMessageAutoDeleteTimeChanged(jsonObject = jsonObject)
            "chatEventMessageDeleted" -> return deserializeChatEventMessageDeleted(jsonObject = jsonObject)
            "chatEventMessageEdited" -> return deserializeChatEventMessageEdited(jsonObject = jsonObject)
            "chatEventMessagePinned" -> return deserializeChatEventMessagePinned(jsonObject = jsonObject)
            "chatEventMessageUnpinned" -> return deserializeChatEventMessageUnpinned(jsonObject = jsonObject)
            "chatEventPermissionsChanged" -> return deserializeChatEventPermissionsChanged(jsonObject = jsonObject)
            "chatEventPhotoChanged" -> return deserializeChatEventPhotoChanged(jsonObject = jsonObject)
            "chatEventPollStopped" -> return deserializeChatEventPollStopped(jsonObject = jsonObject)
            "chatEventProfileAccentColorChanged" -> return deserializeChatEventProfileAccentColorChanged(jsonObject = jsonObject)
            "chatEventShowMessageSenderToggled" -> return deserializeChatEventShowMessageSenderToggled(jsonObject = jsonObject)
            "chatEventSignMessagesToggled" -> return deserializeChatEventSignMessagesToggled(jsonObject = jsonObject)
            "chatEventSlowModeDelayChanged" -> return deserializeChatEventSlowModeDelayChanged(jsonObject = jsonObject)
            "chatEventStickerSetChanged" -> return deserializeChatEventStickerSetChanged(jsonObject = jsonObject)
            "chatEventTitleChanged" -> return deserializeChatEventTitleChanged(jsonObject = jsonObject)
            "chatEventUsernameChanged" -> return deserializeChatEventUsernameChanged(jsonObject = jsonObject)
            "chatEventVideoChatCreated" -> return deserializeChatEventVideoChatCreated(jsonObject = jsonObject)
            "chatEventVideoChatEnded" -> return deserializeChatEventVideoChatEnded(jsonObject = jsonObject)
            "chatEventVideoChatMuteNewParticipantsToggled" -> return deserializeChatEventVideoChatMuteNewParticipantsToggled(jsonObject = jsonObject)
            "chatEventVideoChatParticipantIsMutedToggled" -> return deserializeChatEventVideoChatParticipantIsMutedToggled(jsonObject = jsonObject)
            "chatEventVideoChatParticipantVolumeLevelChanged" -> return deserializeChatEventVideoChatParticipantVolumeLevelChanged(jsonObject = jsonObject)
            "chatEvents" -> return deserializeChatEvents(jsonObject = jsonObject)
            "chatFolder" -> return deserializeChatFolder(jsonObject = jsonObject)
            "chatFolderIcon" -> return deserializeChatFolderIcon(jsonObject = jsonObject)
            "chatFolderInfo" -> return deserializeChatFolderInfo(jsonObject = jsonObject)
            "chatFolderInviteLink" -> return deserializeChatFolderInviteLink(jsonObject = jsonObject)
            "chatFolderInviteLinkInfo" -> return deserializeChatFolderInviteLinkInfo(jsonObject = jsonObject)
            "chatFolderInviteLinks" -> return deserializeChatFolderInviteLinks(jsonObject = jsonObject)
            "chatFolderName" -> return deserializeChatFolderName(jsonObject = jsonObject)
            "chatInviteLink" -> return deserializeChatInviteLink(jsonObject = jsonObject)
            "chatInviteLinkCount" -> return deserializeChatInviteLinkCount(jsonObject = jsonObject)
            "chatInviteLinkCounts" -> return deserializeChatInviteLinkCounts(jsonObject = jsonObject)
            "chatInviteLinkInfo" -> return deserializeChatInviteLinkInfo(jsonObject = jsonObject)
            "chatInviteLinkMember" -> return deserializeChatInviteLinkMember(jsonObject = jsonObject)
            "chatInviteLinkMembers" -> return deserializeChatInviteLinkMembers(jsonObject = jsonObject)
            "chatInviteLinkSubscriptionInfo" -> return deserializeChatInviteLinkSubscriptionInfo(jsonObject = jsonObject)
            "chatInviteLinks" -> return deserializeChatInviteLinks(jsonObject = jsonObject)
            "chatJoinRequest" -> return deserializeChatJoinRequest(jsonObject = jsonObject)
            "chatJoinRequests" -> return deserializeChatJoinRequests(jsonObject = jsonObject)
            "chatJoinRequestsInfo" -> return deserializeChatJoinRequestsInfo(jsonObject = jsonObject)
            "chatListArchive" -> return deserializeChatListArchive(jsonObject = jsonObject)
            "chatListFolder" -> return deserializeChatListFolder(jsonObject = jsonObject)
            "chatListMain" -> return deserializeChatListMain(jsonObject = jsonObject)
            "chatLists" -> return deserializeChatLists(jsonObject = jsonObject)
            "chatLocation" -> return deserializeChatLocation(jsonObject = jsonObject)
            "chatMember" -> return deserializeChatMember(jsonObject = jsonObject)
            "chatMemberStatusAdministrator" -> return deserializeChatMemberStatusAdministrator(jsonObject = jsonObject)
            "chatMemberStatusBanned" -> return deserializeChatMemberStatusBanned(jsonObject = jsonObject)
            "chatMemberStatusCreator" -> return deserializeChatMemberStatusCreator(jsonObject = jsonObject)
            "chatMemberStatusLeft" -> return deserializeChatMemberStatusLeft(jsonObject = jsonObject)
            "chatMemberStatusMember" -> return deserializeChatMemberStatusMember(jsonObject = jsonObject)
            "chatMemberStatusRestricted" -> return deserializeChatMemberStatusRestricted(jsonObject = jsonObject)
            "chatMembers" -> return deserializeChatMembers(jsonObject = jsonObject)
            "chatMembersFilterAdministrators" -> return deserializeChatMembersFilterAdministrators(jsonObject = jsonObject)
            "chatMembersFilterBanned" -> return deserializeChatMembersFilterBanned(jsonObject = jsonObject)
            "chatMembersFilterBots" -> return deserializeChatMembersFilterBots(jsonObject = jsonObject)
            "chatMembersFilterContacts" -> return deserializeChatMembersFilterContacts(jsonObject = jsonObject)
            "chatMembersFilterMembers" -> return deserializeChatMembersFilterMembers(jsonObject = jsonObject)
            "chatMembersFilterMention" -> return deserializeChatMembersFilterMention(jsonObject = jsonObject)
            "chatMembersFilterRestricted" -> return deserializeChatMembersFilterRestricted(jsonObject = jsonObject)
            "chatMessageSender" -> return deserializeChatMessageSender(jsonObject = jsonObject)
            "chatMessageSenders" -> return deserializeChatMessageSenders(jsonObject = jsonObject)
            "chatNotificationSettings" -> return deserializeChatNotificationSettings(jsonObject = jsonObject)
            "chatPermissions" -> return deserializeChatPermissions(jsonObject = jsonObject)
            "chatPhoto" -> return deserializeChatPhoto(jsonObject = jsonObject)
            "chatPhotoInfo" -> return deserializeChatPhotoInfo(jsonObject = jsonObject)
            "chatPhotoSticker" -> return deserializeChatPhotoSticker(jsonObject = jsonObject)
            "chatPhotoStickerTypeCustomEmoji" -> return deserializeChatPhotoStickerTypeCustomEmoji(jsonObject = jsonObject)
            "chatPhotoStickerTypeRegularOrMask" -> return deserializeChatPhotoStickerTypeRegularOrMask(jsonObject = jsonObject)
            "chatPhotos" -> return deserializeChatPhotos(jsonObject = jsonObject)
            "chatPosition" -> return deserializeChatPosition(jsonObject = jsonObject)
            "chatRevenueAmount" -> return deserializeChatRevenueAmount(jsonObject = jsonObject)
            "chatRevenueStatistics" -> return deserializeChatRevenueStatistics(jsonObject = jsonObject)
            "chatRevenueTransaction" -> return deserializeChatRevenueTransaction(jsonObject = jsonObject)
            "chatRevenueTransactionTypeEarnings" -> return deserializeChatRevenueTransactionTypeEarnings(jsonObject = jsonObject)
            "chatRevenueTransactionTypeRefund" -> return deserializeChatRevenueTransactionTypeRefund(jsonObject = jsonObject)
            "chatRevenueTransactionTypeWithdrawal" -> return deserializeChatRevenueTransactionTypeWithdrawal(jsonObject = jsonObject)
            "chatRevenueTransactions" -> return deserializeChatRevenueTransactions(jsonObject = jsonObject)
            "chatSourceMtprotoProxy" -> return deserializeChatSourceMtprotoProxy(jsonObject = jsonObject)
            "chatSourcePublicServiceAnnouncement" -> return deserializeChatSourcePublicServiceAnnouncement(jsonObject = jsonObject)
            "chatStatisticsAdministratorActionsInfo" -> return deserializeChatStatisticsAdministratorActionsInfo(jsonObject = jsonObject)
            "chatStatisticsChannel" -> return deserializeChatStatisticsChannel(jsonObject = jsonObject)
            "chatStatisticsInteractionInfo" -> return deserializeChatStatisticsInteractionInfo(jsonObject = jsonObject)
            "chatStatisticsInviterInfo" -> return deserializeChatStatisticsInviterInfo(jsonObject = jsonObject)
            "chatStatisticsMessageSenderInfo" -> return deserializeChatStatisticsMessageSenderInfo(jsonObject = jsonObject)
            "chatStatisticsObjectTypeMessage" -> return deserializeChatStatisticsObjectTypeMessage(jsonObject = jsonObject)
            "chatStatisticsObjectTypeStory" -> return deserializeChatStatisticsObjectTypeStory(jsonObject = jsonObject)
            "chatStatisticsSupergroup" -> return deserializeChatStatisticsSupergroup(jsonObject = jsonObject)
            "chatTheme" -> return deserializeChatTheme(jsonObject = jsonObject)
            "chatTypeBasicGroup" -> return deserializeChatTypeBasicGroup(jsonObject = jsonObject)
            "chatTypePrivate" -> return deserializeChatTypePrivate(jsonObject = jsonObject)
            "chatTypeSecret" -> return deserializeChatTypeSecret(jsonObject = jsonObject)
            "chatTypeSupergroup" -> return deserializeChatTypeSupergroup(jsonObject = jsonObject)
            "chats" -> return deserializeChats(jsonObject = jsonObject)
            "checkChatUsernameResultOk" -> return deserializeCheckChatUsernameResultOk(jsonObject = jsonObject)
            "checkChatUsernameResultPublicChatsTooMany" -> return deserializeCheckChatUsernameResultPublicChatsTooMany(jsonObject = jsonObject)
            "checkChatUsernameResultPublicGroupsUnavailable" -> return deserializeCheckChatUsernameResultPublicGroupsUnavailable(jsonObject = jsonObject)
            "checkChatUsernameResultUsernameInvalid" -> return deserializeCheckChatUsernameResultUsernameInvalid(jsonObject = jsonObject)
            "checkChatUsernameResultUsernameOccupied" -> return deserializeCheckChatUsernameResultUsernameOccupied(jsonObject = jsonObject)
            "checkChatUsernameResultUsernamePurchasable" -> return deserializeCheckChatUsernameResultUsernamePurchasable(jsonObject = jsonObject)
            "checkStickerSetNameResultNameInvalid" -> return deserializeCheckStickerSetNameResultNameInvalid(jsonObject = jsonObject)
            "checkStickerSetNameResultNameOccupied" -> return deserializeCheckStickerSetNameResultNameOccupied(jsonObject = jsonObject)
            "checkStickerSetNameResultOk" -> return deserializeCheckStickerSetNameResultOk(jsonObject = jsonObject)
            "checklist" -> return deserializeChecklist(jsonObject = jsonObject)
            "checklistTask" -> return deserializeChecklistTask(jsonObject = jsonObject)
            "closeBirthdayUser" -> return deserializeCloseBirthdayUser(jsonObject = jsonObject)
            "closedVectorPath" -> return deserializeClosedVectorPath(jsonObject = jsonObject)
            "collectibleItemInfo" -> return deserializeCollectibleItemInfo(jsonObject = jsonObject)
            "collectibleItemTypePhoneNumber" -> return deserializeCollectibleItemTypePhoneNumber(jsonObject = jsonObject)
            "collectibleItemTypeUsername" -> return deserializeCollectibleItemTypeUsername(jsonObject = jsonObject)
            "connectedAffiliateProgram" -> return deserializeConnectedAffiliateProgram(jsonObject = jsonObject)
            "connectedAffiliatePrograms" -> return deserializeConnectedAffiliatePrograms(jsonObject = jsonObject)
            "connectedWebsite" -> return deserializeConnectedWebsite(jsonObject = jsonObject)
            "connectedWebsites" -> return deserializeConnectedWebsites(jsonObject = jsonObject)
            "connectionStateConnecting" -> return deserializeConnectionStateConnecting(jsonObject = jsonObject)
            "connectionStateConnectingToProxy" -> return deserializeConnectionStateConnectingToProxy(jsonObject = jsonObject)
            "connectionStateReady" -> return deserializeConnectionStateReady(jsonObject = jsonObject)
            "connectionStateUpdating" -> return deserializeConnectionStateUpdating(jsonObject = jsonObject)
            "connectionStateWaitingForNetwork" -> return deserializeConnectionStateWaitingForNetwork(jsonObject = jsonObject)
            "contact" -> return deserializeContact(jsonObject = jsonObject)
            "count" -> return deserializeCount(jsonObject = jsonObject)
            "countries" -> return deserializeCountries(jsonObject = jsonObject)
            "countryInfo" -> return deserializeCountryInfo(jsonObject = jsonObject)
            "createdBasicGroupChat" -> return deserializeCreatedBasicGroupChat(jsonObject = jsonObject)
            "currentWeather" -> return deserializeCurrentWeather(jsonObject = jsonObject)
            "customRequestResult" -> return deserializeCustomRequestResult(jsonObject = jsonObject)
            "data" -> return deserializeData(jsonObject = jsonObject)
            "databaseStatistics" -> return deserializeDatabaseStatistics(jsonObject = jsonObject)
            "date" -> return deserializeDate(jsonObject = jsonObject)
            "dateRange" -> return deserializeDateRange(jsonObject = jsonObject)
            "datedFile" -> return deserializeDatedFile(jsonObject = jsonObject)
            "deepLinkInfo" -> return deserializeDeepLinkInfo(jsonObject = jsonObject)
            "deviceTokenApplePush" -> return deserializeDeviceTokenApplePush(jsonObject = jsonObject)
            "deviceTokenApplePushVoIP" -> return deserializeDeviceTokenApplePushVoIP(jsonObject = jsonObject)
            "deviceTokenBlackBerryPush" -> return deserializeDeviceTokenBlackBerryPush(jsonObject = jsonObject)
            "deviceTokenFirebaseCloudMessaging" -> return deserializeDeviceTokenFirebaseCloudMessaging(jsonObject = jsonObject)
            "deviceTokenHuaweiPush" -> return deserializeDeviceTokenHuaweiPush(jsonObject = jsonObject)
            "deviceTokenMicrosoftPush" -> return deserializeDeviceTokenMicrosoftPush(jsonObject = jsonObject)
            "deviceTokenMicrosoftPushVoIP" -> return deserializeDeviceTokenMicrosoftPushVoIP(jsonObject = jsonObject)
            "deviceTokenSimplePush" -> return deserializeDeviceTokenSimplePush(jsonObject = jsonObject)
            "deviceTokenTizenPush" -> return deserializeDeviceTokenTizenPush(jsonObject = jsonObject)
            "deviceTokenUbuntuPush" -> return deserializeDeviceTokenUbuntuPush(jsonObject = jsonObject)
            "deviceTokenWebPush" -> return deserializeDeviceTokenWebPush(jsonObject = jsonObject)
            "deviceTokenWindowsPush" -> return deserializeDeviceTokenWindowsPush(jsonObject = jsonObject)
            "diceStickersRegular" -> return deserializeDiceStickersRegular(jsonObject = jsonObject)
            "diceStickersSlotMachine" -> return deserializeDiceStickersSlotMachine(jsonObject = jsonObject)
            "directMessagesChatTopic" -> return deserializeDirectMessagesChatTopic(jsonObject = jsonObject)
            "document" -> return deserializeDocument(jsonObject = jsonObject)
            "downloadedFileCounts" -> return deserializeDownloadedFileCounts(jsonObject = jsonObject)
            "draftMessage" -> return deserializeDraftMessage(jsonObject = jsonObject)
            "emailAddressAuthenticationAppleId" -> return deserializeEmailAddressAuthenticationAppleId(jsonObject = jsonObject)
            "emailAddressAuthenticationCode" -> return deserializeEmailAddressAuthenticationCode(jsonObject = jsonObject)
            "emailAddressAuthenticationCodeInfo" -> return deserializeEmailAddressAuthenticationCodeInfo(jsonObject = jsonObject)
            "emailAddressAuthenticationGoogleId" -> return deserializeEmailAddressAuthenticationGoogleId(jsonObject = jsonObject)
            "emailAddressResetStateAvailable" -> return deserializeEmailAddressResetStateAvailable(jsonObject = jsonObject)
            "emailAddressResetStatePending" -> return deserializeEmailAddressResetStatePending(jsonObject = jsonObject)
            "emojiCategories" -> return deserializeEmojiCategories(jsonObject = jsonObject)
            "emojiCategory" -> return deserializeEmojiCategory(jsonObject = jsonObject)
            "emojiCategorySourcePremium" -> return deserializeEmojiCategorySourcePremium(jsonObject = jsonObject)
            "emojiCategorySourceSearch" -> return deserializeEmojiCategorySourceSearch(jsonObject = jsonObject)
            "emojiCategoryTypeChatPhoto" -> return deserializeEmojiCategoryTypeChatPhoto(jsonObject = jsonObject)
            "emojiCategoryTypeDefault" -> return deserializeEmojiCategoryTypeDefault(jsonObject = jsonObject)
            "emojiCategoryTypeEmojiStatus" -> return deserializeEmojiCategoryTypeEmojiStatus(jsonObject = jsonObject)
            "emojiCategoryTypeRegularStickers" -> return deserializeEmojiCategoryTypeRegularStickers(jsonObject = jsonObject)
            "emojiKeyword" -> return deserializeEmojiKeyword(jsonObject = jsonObject)
            "emojiKeywords" -> return deserializeEmojiKeywords(jsonObject = jsonObject)
            "emojiReaction" -> return deserializeEmojiReaction(jsonObject = jsonObject)
            "emojiStatus" -> return deserializeEmojiStatus(jsonObject = jsonObject)
            "emojiStatusCustomEmojis" -> return deserializeEmojiStatusCustomEmojis(jsonObject = jsonObject)
            "emojiStatusTypeCustomEmoji" -> return deserializeEmojiStatusTypeCustomEmoji(jsonObject = jsonObject)
            "emojiStatusTypeUpgradedGift" -> return deserializeEmojiStatusTypeUpgradedGift(jsonObject = jsonObject)
            "emojiStatuses" -> return deserializeEmojiStatuses(jsonObject = jsonObject)
            "emojis" -> return deserializeEmojis(jsonObject = jsonObject)
            "encryptedCredentials" -> return deserializeEncryptedCredentials(jsonObject = jsonObject)
            "encryptedPassportElement" -> return deserializeEncryptedPassportElement(jsonObject = jsonObject)
            "error" -> return deserializeError(jsonObject = jsonObject)
            "factCheck" -> return deserializeFactCheck(jsonObject = jsonObject)
            "failedToAddMember" -> return deserializeFailedToAddMember(jsonObject = jsonObject)
            "failedToAddMembers" -> return deserializeFailedToAddMembers(jsonObject = jsonObject)
            "file" -> return deserializeFile(jsonObject = jsonObject)
            "fileDownload" -> return deserializeFileDownload(jsonObject = jsonObject)
            "fileDownloadedPrefixSize" -> return deserializeFileDownloadedPrefixSize(jsonObject = jsonObject)
            "fileTypeAnimation" -> return deserializeFileTypeAnimation(jsonObject = jsonObject)
            "fileTypeAudio" -> return deserializeFileTypeAudio(jsonObject = jsonObject)
            "fileTypeDocument" -> return deserializeFileTypeDocument(jsonObject = jsonObject)
            "fileTypeNone" -> return deserializeFileTypeNone(jsonObject = jsonObject)
            "fileTypeNotificationSound" -> return deserializeFileTypeNotificationSound(jsonObject = jsonObject)
            "fileTypePhoto" -> return deserializeFileTypePhoto(jsonObject = jsonObject)
            "fileTypePhotoStory" -> return deserializeFileTypePhotoStory(jsonObject = jsonObject)
            "fileTypeProfilePhoto" -> return deserializeFileTypeProfilePhoto(jsonObject = jsonObject)
            "fileTypeSecret" -> return deserializeFileTypeSecret(jsonObject = jsonObject)
            "fileTypeSecretThumbnail" -> return deserializeFileTypeSecretThumbnail(jsonObject = jsonObject)
            "fileTypeSecure" -> return deserializeFileTypeSecure(jsonObject = jsonObject)
            "fileTypeSelfDestructingPhoto" -> return deserializeFileTypeSelfDestructingPhoto(jsonObject = jsonObject)
            "fileTypeSelfDestructingVideo" -> return deserializeFileTypeSelfDestructingVideo(jsonObject = jsonObject)
            "fileTypeSelfDestructingVideoNote" -> return deserializeFileTypeSelfDestructingVideoNote(jsonObject = jsonObject)
            "fileTypeSelfDestructingVoiceNote" -> return deserializeFileTypeSelfDestructingVoiceNote(jsonObject = jsonObject)
            "fileTypeSticker" -> return deserializeFileTypeSticker(jsonObject = jsonObject)
            "fileTypeThumbnail" -> return deserializeFileTypeThumbnail(jsonObject = jsonObject)
            "fileTypeUnknown" -> return deserializeFileTypeUnknown(jsonObject = jsonObject)
            "fileTypeVideo" -> return deserializeFileTypeVideo(jsonObject = jsonObject)
            "fileTypeVideoNote" -> return deserializeFileTypeVideoNote(jsonObject = jsonObject)
            "fileTypeVideoStory" -> return deserializeFileTypeVideoStory(jsonObject = jsonObject)
            "fileTypeVoiceNote" -> return deserializeFileTypeVoiceNote(jsonObject = jsonObject)
            "fileTypeWallpaper" -> return deserializeFileTypeWallpaper(jsonObject = jsonObject)
            "firebaseAuthenticationSettingsAndroid" -> return deserializeFirebaseAuthenticationSettingsAndroid(jsonObject = jsonObject)
            "firebaseAuthenticationSettingsIos" -> return deserializeFirebaseAuthenticationSettingsIos(jsonObject = jsonObject)
            "firebaseDeviceVerificationParametersPlayIntegrity" -> return deserializeFirebaseDeviceVerificationParametersPlayIntegrity(jsonObject = jsonObject)
            "firebaseDeviceVerificationParametersSafetyNet" -> return deserializeFirebaseDeviceVerificationParametersSafetyNet(jsonObject = jsonObject)
            "formattedText" -> return deserializeFormattedText(jsonObject = jsonObject)
            "forumTopic" -> return deserializeForumTopic(jsonObject = jsonObject)
            "forumTopicIcon" -> return deserializeForumTopicIcon(jsonObject = jsonObject)
            "forumTopicInfo" -> return deserializeForumTopicInfo(jsonObject = jsonObject)
            "forumTopics" -> return deserializeForumTopics(jsonObject = jsonObject)
            "forwardSource" -> return deserializeForwardSource(jsonObject = jsonObject)
            "foundAffiliateProgram" -> return deserializeFoundAffiliateProgram(jsonObject = jsonObject)
            "foundAffiliatePrograms" -> return deserializeFoundAffiliatePrograms(jsonObject = jsonObject)
            "foundChatBoosts" -> return deserializeFoundChatBoosts(jsonObject = jsonObject)
            "foundChatMessages" -> return deserializeFoundChatMessages(jsonObject = jsonObject)
            "foundFileDownloads" -> return deserializeFoundFileDownloads(jsonObject = jsonObject)
            "foundMessages" -> return deserializeFoundMessages(jsonObject = jsonObject)
            "foundPosition" -> return deserializeFoundPosition(jsonObject = jsonObject)
            "foundPositions" -> return deserializeFoundPositions(jsonObject = jsonObject)
            "foundStories" -> return deserializeFoundStories(jsonObject = jsonObject)
            "foundUsers" -> return deserializeFoundUsers(jsonObject = jsonObject)
            "foundWebApp" -> return deserializeFoundWebApp(jsonObject = jsonObject)
            "game" -> return deserializeGame(jsonObject = jsonObject)
            "gameHighScore" -> return deserializeGameHighScore(jsonObject = jsonObject)
            "gameHighScores" -> return deserializeGameHighScores(jsonObject = jsonObject)
            "gift" -> return deserializeGift(jsonObject = jsonObject)
            "giftForResale" -> return deserializeGiftForResale(jsonObject = jsonObject)
            "giftForResaleOrderNumber" -> return deserializeGiftForResaleOrderNumber(jsonObject = jsonObject)
            "giftForResaleOrderPrice" -> return deserializeGiftForResaleOrderPrice(jsonObject = jsonObject)
            "giftForResaleOrderPriceChangeDate" -> return deserializeGiftForResaleOrderPriceChangeDate(jsonObject = jsonObject)
            "giftSettings" -> return deserializeGiftSettings(jsonObject = jsonObject)
            "giftUpgradePreview" -> return deserializeGiftUpgradePreview(jsonObject = jsonObject)
            "giftsForResale" -> return deserializeGiftsForResale(jsonObject = jsonObject)
            "giveawayInfoCompleted" -> return deserializeGiveawayInfoCompleted(jsonObject = jsonObject)
            "giveawayInfoOngoing" -> return deserializeGiveawayInfoOngoing(jsonObject = jsonObject)
            "giveawayParameters" -> return deserializeGiveawayParameters(jsonObject = jsonObject)
            "giveawayParticipantStatusAdministrator" -> return deserializeGiveawayParticipantStatusAdministrator(jsonObject = jsonObject)
            "giveawayParticipantStatusAlreadyWasMember" -> return deserializeGiveawayParticipantStatusAlreadyWasMember(jsonObject = jsonObject)
            "giveawayParticipantStatusDisallowedCountry" -> return deserializeGiveawayParticipantStatusDisallowedCountry(jsonObject = jsonObject)
            "giveawayParticipantStatusEligible" -> return deserializeGiveawayParticipantStatusEligible(jsonObject = jsonObject)
            "giveawayParticipantStatusParticipating" -> return deserializeGiveawayParticipantStatusParticipating(jsonObject = jsonObject)
            "giveawayPrizePremium" -> return deserializeGiveawayPrizePremium(jsonObject = jsonObject)
            "giveawayPrizeStars" -> return deserializeGiveawayPrizeStars(jsonObject = jsonObject)
            "groupCall" -> return deserializeGroupCall(jsonObject = jsonObject)
            "groupCallDataChannelMain" -> return deserializeGroupCallDataChannelMain(jsonObject = jsonObject)
            "groupCallDataChannelScreenSharing" -> return deserializeGroupCallDataChannelScreenSharing(jsonObject = jsonObject)
            "groupCallId" -> return deserializeGroupCallId(jsonObject = jsonObject)
            "groupCallInfo" -> return deserializeGroupCallInfo(jsonObject = jsonObject)
            "groupCallJoinParameters" -> return deserializeGroupCallJoinParameters(jsonObject = jsonObject)
            "groupCallParticipant" -> return deserializeGroupCallParticipant(jsonObject = jsonObject)
            "groupCallParticipantVideoInfo" -> return deserializeGroupCallParticipantVideoInfo(jsonObject = jsonObject)
            "groupCallParticipants" -> return deserializeGroupCallParticipants(jsonObject = jsonObject)
            "groupCallRecentSpeaker" -> return deserializeGroupCallRecentSpeaker(jsonObject = jsonObject)
            "groupCallVideoQualityFull" -> return deserializeGroupCallVideoQualityFull(jsonObject = jsonObject)
            "groupCallVideoQualityMedium" -> return deserializeGroupCallVideoQualityMedium(jsonObject = jsonObject)
            "groupCallVideoQualityThumbnail" -> return deserializeGroupCallVideoQualityThumbnail(jsonObject = jsonObject)
            "groupCallVideoSourceGroup" -> return deserializeGroupCallVideoSourceGroup(jsonObject = jsonObject)
            "hashtags" -> return deserializeHashtags(jsonObject = jsonObject)
            "httpUrl" -> return deserializeHttpUrl(jsonObject = jsonObject)
            "identityDocument" -> return deserializeIdentityDocument(jsonObject = jsonObject)
            "importedContacts" -> return deserializeImportedContacts(jsonObject = jsonObject)
            "inlineKeyboardButton" -> return deserializeInlineKeyboardButton(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeBuy" -> return deserializeInlineKeyboardButtonTypeBuy(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeCallback" -> return deserializeInlineKeyboardButtonTypeCallback(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeCallbackGame" -> return deserializeInlineKeyboardButtonTypeCallbackGame(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeCallbackWithPassword" -> return deserializeInlineKeyboardButtonTypeCallbackWithPassword(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeCopyText" -> return deserializeInlineKeyboardButtonTypeCopyText(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeLoginUrl" -> return deserializeInlineKeyboardButtonTypeLoginUrl(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeSwitchInline" -> return deserializeInlineKeyboardButtonTypeSwitchInline(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeUrl" -> return deserializeInlineKeyboardButtonTypeUrl(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeUser" -> return deserializeInlineKeyboardButtonTypeUser(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeWebApp" -> return deserializeInlineKeyboardButtonTypeWebApp(jsonObject = jsonObject)
            "inlineQueryResultAnimation" -> return deserializeInlineQueryResultAnimation(jsonObject = jsonObject)
            "inlineQueryResultArticle" -> return deserializeInlineQueryResultArticle(jsonObject = jsonObject)
            "inlineQueryResultAudio" -> return deserializeInlineQueryResultAudio(jsonObject = jsonObject)
            "inlineQueryResultContact" -> return deserializeInlineQueryResultContact(jsonObject = jsonObject)
            "inlineQueryResultDocument" -> return deserializeInlineQueryResultDocument(jsonObject = jsonObject)
            "inlineQueryResultGame" -> return deserializeInlineQueryResultGame(jsonObject = jsonObject)
            "inlineQueryResultLocation" -> return deserializeInlineQueryResultLocation(jsonObject = jsonObject)
            "inlineQueryResultPhoto" -> return deserializeInlineQueryResultPhoto(jsonObject = jsonObject)
            "inlineQueryResultSticker" -> return deserializeInlineQueryResultSticker(jsonObject = jsonObject)
            "inlineQueryResultVenue" -> return deserializeInlineQueryResultVenue(jsonObject = jsonObject)
            "inlineQueryResultVideo" -> return deserializeInlineQueryResultVideo(jsonObject = jsonObject)
            "inlineQueryResultVoiceNote" -> return deserializeInlineQueryResultVoiceNote(jsonObject = jsonObject)
            "inlineQueryResults" -> return deserializeInlineQueryResults(jsonObject = jsonObject)
            "inlineQueryResultsButton" -> return deserializeInlineQueryResultsButton(jsonObject = jsonObject)
            "inlineQueryResultsButtonTypeStartBot" -> return deserializeInlineQueryResultsButtonTypeStartBot(jsonObject = jsonObject)
            "inlineQueryResultsButtonTypeWebApp" -> return deserializeInlineQueryResultsButtonTypeWebApp(jsonObject = jsonObject)
            "inputBackgroundLocal" -> return deserializeInputBackgroundLocal(jsonObject = jsonObject)
            "inputBackgroundPrevious" -> return deserializeInputBackgroundPrevious(jsonObject = jsonObject)
            "inputBackgroundRemote" -> return deserializeInputBackgroundRemote(jsonObject = jsonObject)
            "inputBusinessChatLink" -> return deserializeInputBusinessChatLink(jsonObject = jsonObject)
            "inputBusinessStartPage" -> return deserializeInputBusinessStartPage(jsonObject = jsonObject)
            "inputChatPhotoAnimation" -> return deserializeInputChatPhotoAnimation(jsonObject = jsonObject)
            "inputChatPhotoPrevious" -> return deserializeInputChatPhotoPrevious(jsonObject = jsonObject)
            "inputChatPhotoStatic" -> return deserializeInputChatPhotoStatic(jsonObject = jsonObject)
            "inputChatPhotoSticker" -> return deserializeInputChatPhotoSticker(jsonObject = jsonObject)
            "inputChecklist" -> return deserializeInputChecklist(jsonObject = jsonObject)
            "inputChecklistTask" -> return deserializeInputChecklistTask(jsonObject = jsonObject)
            "inputCredentialsApplePay" -> return deserializeInputCredentialsApplePay(jsonObject = jsonObject)
            "inputCredentialsGooglePay" -> return deserializeInputCredentialsGooglePay(jsonObject = jsonObject)
            "inputCredentialsNew" -> return deserializeInputCredentialsNew(jsonObject = jsonObject)
            "inputCredentialsSaved" -> return deserializeInputCredentialsSaved(jsonObject = jsonObject)
            "inputFileGenerated" -> return deserializeInputFileGenerated(jsonObject = jsonObject)
            "inputFileId" -> return deserializeInputFileId(jsonObject = jsonObject)
            "inputFileLocal" -> return deserializeInputFileLocal(jsonObject = jsonObject)
            "inputFileRemote" -> return deserializeInputFileRemote(jsonObject = jsonObject)
            "inputGroupCallLink" -> return deserializeInputGroupCallLink(jsonObject = jsonObject)
            "inputGroupCallMessage" -> return deserializeInputGroupCallMessage(jsonObject = jsonObject)
            "inputIdentityDocument" -> return deserializeInputIdentityDocument(jsonObject = jsonObject)
            "inputInlineQueryResultAnimation" -> return deserializeInputInlineQueryResultAnimation(jsonObject = jsonObject)
            "inputInlineQueryResultArticle" -> return deserializeInputInlineQueryResultArticle(jsonObject = jsonObject)
            "inputInlineQueryResultAudio" -> return deserializeInputInlineQueryResultAudio(jsonObject = jsonObject)
            "inputInlineQueryResultContact" -> return deserializeInputInlineQueryResultContact(jsonObject = jsonObject)
            "inputInlineQueryResultDocument" -> return deserializeInputInlineQueryResultDocument(jsonObject = jsonObject)
            "inputInlineQueryResultGame" -> return deserializeInputInlineQueryResultGame(jsonObject = jsonObject)
            "inputInlineQueryResultLocation" -> return deserializeInputInlineQueryResultLocation(jsonObject = jsonObject)
            "inputInlineQueryResultPhoto" -> return deserializeInputInlineQueryResultPhoto(jsonObject = jsonObject)
            "inputInlineQueryResultSticker" -> return deserializeInputInlineQueryResultSticker(jsonObject = jsonObject)
            "inputInlineQueryResultVenue" -> return deserializeInputInlineQueryResultVenue(jsonObject = jsonObject)
            "inputInlineQueryResultVideo" -> return deserializeInputInlineQueryResultVideo(jsonObject = jsonObject)
            "inputInlineQueryResultVoiceNote" -> return deserializeInputInlineQueryResultVoiceNote(jsonObject = jsonObject)
            "inputInvoiceMessage" -> return deserializeInputInvoiceMessage(jsonObject = jsonObject)
            "inputInvoiceName" -> return deserializeInputInvoiceName(jsonObject = jsonObject)
            "inputInvoiceTelegram" -> return deserializeInputInvoiceTelegram(jsonObject = jsonObject)
            "inputMessageAnimation" -> return deserializeInputMessageAnimation(jsonObject = jsonObject)
            "inputMessageAudio" -> return deserializeInputMessageAudio(jsonObject = jsonObject)
            "inputMessageChecklist" -> return deserializeInputMessageChecklist(jsonObject = jsonObject)
            "inputMessageContact" -> return deserializeInputMessageContact(jsonObject = jsonObject)
            "inputMessageDice" -> return deserializeInputMessageDice(jsonObject = jsonObject)
            "inputMessageDocument" -> return deserializeInputMessageDocument(jsonObject = jsonObject)
            "inputMessageForwarded" -> return deserializeInputMessageForwarded(jsonObject = jsonObject)
            "inputMessageGame" -> return deserializeInputMessageGame(jsonObject = jsonObject)
            "inputMessageInvoice" -> return deserializeInputMessageInvoice(jsonObject = jsonObject)
            "inputMessageLocation" -> return deserializeInputMessageLocation(jsonObject = jsonObject)
            "inputMessagePaidMedia" -> return deserializeInputMessagePaidMedia(jsonObject = jsonObject)
            "inputMessagePhoto" -> return deserializeInputMessagePhoto(jsonObject = jsonObject)
            "inputMessagePoll" -> return deserializeInputMessagePoll(jsonObject = jsonObject)
            "inputMessageReplyToExternalMessage" -> return deserializeInputMessageReplyToExternalMessage(jsonObject = jsonObject)
            "inputMessageReplyToMessage" -> return deserializeInputMessageReplyToMessage(jsonObject = jsonObject)
            "inputMessageReplyToStory" -> return deserializeInputMessageReplyToStory(jsonObject = jsonObject)
            "inputMessageSticker" -> return deserializeInputMessageSticker(jsonObject = jsonObject)
            "inputMessageStory" -> return deserializeInputMessageStory(jsonObject = jsonObject)
            "inputMessageText" -> return deserializeInputMessageText(jsonObject = jsonObject)
            "inputMessageVenue" -> return deserializeInputMessageVenue(jsonObject = jsonObject)
            "inputMessageVideo" -> return deserializeInputMessageVideo(jsonObject = jsonObject)
            "inputMessageVideoNote" -> return deserializeInputMessageVideoNote(jsonObject = jsonObject)
            "inputMessageVoiceNote" -> return deserializeInputMessageVoiceNote(jsonObject = jsonObject)
            "inputPaidMedia" -> return deserializeInputPaidMedia(jsonObject = jsonObject)
            "inputPaidMediaTypePhoto" -> return deserializeInputPaidMediaTypePhoto(jsonObject = jsonObject)
            "inputPaidMediaTypeVideo" -> return deserializeInputPaidMediaTypeVideo(jsonObject = jsonObject)
            "inputPassportElementAddress" -> return deserializeInputPassportElementAddress(jsonObject = jsonObject)
            "inputPassportElementBankStatement" -> return deserializeInputPassportElementBankStatement(jsonObject = jsonObject)
            "inputPassportElementDriverLicense" -> return deserializeInputPassportElementDriverLicense(jsonObject = jsonObject)
            "inputPassportElementEmailAddress" -> return deserializeInputPassportElementEmailAddress(jsonObject = jsonObject)
            "inputPassportElementError" -> return deserializeInputPassportElementError(jsonObject = jsonObject)
            "inputPassportElementErrorSourceDataField" -> return deserializeInputPassportElementErrorSourceDataField(jsonObject = jsonObject)
            "inputPassportElementErrorSourceFile" -> return deserializeInputPassportElementErrorSourceFile(jsonObject = jsonObject)
            "inputPassportElementErrorSourceFiles" -> return deserializeInputPassportElementErrorSourceFiles(jsonObject = jsonObject)
            "inputPassportElementErrorSourceFrontSide" -> return deserializeInputPassportElementErrorSourceFrontSide(jsonObject = jsonObject)
            "inputPassportElementErrorSourceReverseSide" -> return deserializeInputPassportElementErrorSourceReverseSide(jsonObject = jsonObject)
            "inputPassportElementErrorSourceSelfie" -> return deserializeInputPassportElementErrorSourceSelfie(jsonObject = jsonObject)
            "inputPassportElementErrorSourceTranslationFile" -> return deserializeInputPassportElementErrorSourceTranslationFile(jsonObject = jsonObject)
            "inputPassportElementErrorSourceTranslationFiles" -> return deserializeInputPassportElementErrorSourceTranslationFiles(jsonObject = jsonObject)
            "inputPassportElementErrorSourceUnspecified" -> return deserializeInputPassportElementErrorSourceUnspecified(jsonObject = jsonObject)
            "inputPassportElementIdentityCard" -> return deserializeInputPassportElementIdentityCard(jsonObject = jsonObject)
            "inputPassportElementInternalPassport" -> return deserializeInputPassportElementInternalPassport(jsonObject = jsonObject)
            "inputPassportElementPassport" -> return deserializeInputPassportElementPassport(jsonObject = jsonObject)
            "inputPassportElementPassportRegistration" -> return deserializeInputPassportElementPassportRegistration(jsonObject = jsonObject)
            "inputPassportElementPersonalDetails" -> return deserializeInputPassportElementPersonalDetails(jsonObject = jsonObject)
            "inputPassportElementPhoneNumber" -> return deserializeInputPassportElementPhoneNumber(jsonObject = jsonObject)
            "inputPassportElementRentalAgreement" -> return deserializeInputPassportElementRentalAgreement(jsonObject = jsonObject)
            "inputPassportElementTemporaryRegistration" -> return deserializeInputPassportElementTemporaryRegistration(jsonObject = jsonObject)
            "inputPassportElementUtilityBill" -> return deserializeInputPassportElementUtilityBill(jsonObject = jsonObject)
            "inputPersonalDocument" -> return deserializeInputPersonalDocument(jsonObject = jsonObject)
            "inputSticker" -> return deserializeInputSticker(jsonObject = jsonObject)
            "inputStoryArea" -> return deserializeInputStoryArea(jsonObject = jsonObject)
            "inputStoryAreaTypeFoundVenue" -> return deserializeInputStoryAreaTypeFoundVenue(jsonObject = jsonObject)
            "inputStoryAreaTypeLink" -> return deserializeInputStoryAreaTypeLink(jsonObject = jsonObject)
            "inputStoryAreaTypeLocation" -> return deserializeInputStoryAreaTypeLocation(jsonObject = jsonObject)
            "inputStoryAreaTypeMessage" -> return deserializeInputStoryAreaTypeMessage(jsonObject = jsonObject)
            "inputStoryAreaTypePreviousVenue" -> return deserializeInputStoryAreaTypePreviousVenue(jsonObject = jsonObject)
            "inputStoryAreaTypeSuggestedReaction" -> return deserializeInputStoryAreaTypeSuggestedReaction(jsonObject = jsonObject)
            "inputStoryAreaTypeUpgradedGift" -> return deserializeInputStoryAreaTypeUpgradedGift(jsonObject = jsonObject)
            "inputStoryAreaTypeWeather" -> return deserializeInputStoryAreaTypeWeather(jsonObject = jsonObject)
            "inputStoryAreas" -> return deserializeInputStoryAreas(jsonObject = jsonObject)
            "inputStoryContentPhoto" -> return deserializeInputStoryContentPhoto(jsonObject = jsonObject)
            "inputStoryContentVideo" -> return deserializeInputStoryContentVideo(jsonObject = jsonObject)
            "inputTextQuote" -> return deserializeInputTextQuote(jsonObject = jsonObject)
            "inputThumbnail" -> return deserializeInputThumbnail(jsonObject = jsonObject)
            "internalLinkTypeActiveSessions" -> return deserializeInternalLinkTypeActiveSessions(jsonObject = jsonObject)
            "internalLinkTypeAttachmentMenuBot" -> return deserializeInternalLinkTypeAttachmentMenuBot(jsonObject = jsonObject)
            "internalLinkTypeAuthenticationCode" -> return deserializeInternalLinkTypeAuthenticationCode(jsonObject = jsonObject)
            "internalLinkTypeBackground" -> return deserializeInternalLinkTypeBackground(jsonObject = jsonObject)
            "internalLinkTypeBotAddToChannel" -> return deserializeInternalLinkTypeBotAddToChannel(jsonObject = jsonObject)
            "internalLinkTypeBotStart" -> return deserializeInternalLinkTypeBotStart(jsonObject = jsonObject)
            "internalLinkTypeBotStartInGroup" -> return deserializeInternalLinkTypeBotStartInGroup(jsonObject = jsonObject)
            "internalLinkTypeBusinessChat" -> return deserializeInternalLinkTypeBusinessChat(jsonObject = jsonObject)
            "internalLinkTypeBuyStars" -> return deserializeInternalLinkTypeBuyStars(jsonObject = jsonObject)
            "internalLinkTypeChangePhoneNumber" -> return deserializeInternalLinkTypeChangePhoneNumber(jsonObject = jsonObject)
            "internalLinkTypeChatAffiliateProgram" -> return deserializeInternalLinkTypeChatAffiliateProgram(jsonObject = jsonObject)
            "internalLinkTypeChatBoost" -> return deserializeInternalLinkTypeChatBoost(jsonObject = jsonObject)
            "internalLinkTypeChatFolderInvite" -> return deserializeInternalLinkTypeChatFolderInvite(jsonObject = jsonObject)
            "internalLinkTypeChatFolderSettings" -> return deserializeInternalLinkTypeChatFolderSettings(jsonObject = jsonObject)
            "internalLinkTypeChatInvite" -> return deserializeInternalLinkTypeChatInvite(jsonObject = jsonObject)
            "internalLinkTypeDefaultMessageAutoDeleteTimerSettings" -> return deserializeInternalLinkTypeDefaultMessageAutoDeleteTimerSettings(jsonObject = jsonObject)
            "internalLinkTypeEditProfileSettings" -> return deserializeInternalLinkTypeEditProfileSettings(jsonObject = jsonObject)
            "internalLinkTypeGame" -> return deserializeInternalLinkTypeGame(jsonObject = jsonObject)
            "internalLinkTypeGroupCall" -> return deserializeInternalLinkTypeGroupCall(jsonObject = jsonObject)
            "internalLinkTypeInstantView" -> return deserializeInternalLinkTypeInstantView(jsonObject = jsonObject)
            "internalLinkTypeInvoice" -> return deserializeInternalLinkTypeInvoice(jsonObject = jsonObject)
            "internalLinkTypeLanguagePack" -> return deserializeInternalLinkTypeLanguagePack(jsonObject = jsonObject)
            "internalLinkTypeLanguageSettings" -> return deserializeInternalLinkTypeLanguageSettings(jsonObject = jsonObject)
            "internalLinkTypeMainWebApp" -> return deserializeInternalLinkTypeMainWebApp(jsonObject = jsonObject)
            "internalLinkTypeMessage" -> return deserializeInternalLinkTypeMessage(jsonObject = jsonObject)
            "internalLinkTypeMessageDraft" -> return deserializeInternalLinkTypeMessageDraft(jsonObject = jsonObject)
            "internalLinkTypeMyStars" -> return deserializeInternalLinkTypeMyStars(jsonObject = jsonObject)
            "internalLinkTypePassportDataRequest" -> return deserializeInternalLinkTypePassportDataRequest(jsonObject = jsonObject)
            "internalLinkTypePhoneNumberConfirmation" -> return deserializeInternalLinkTypePhoneNumberConfirmation(jsonObject = jsonObject)
            "internalLinkTypePremiumFeatures" -> return deserializeInternalLinkTypePremiumFeatures(jsonObject = jsonObject)
            "internalLinkTypePremiumGift" -> return deserializeInternalLinkTypePremiumGift(jsonObject = jsonObject)
            "internalLinkTypePremiumGiftCode" -> return deserializeInternalLinkTypePremiumGiftCode(jsonObject = jsonObject)
            "internalLinkTypePrivacyAndSecuritySettings" -> return deserializeInternalLinkTypePrivacyAndSecuritySettings(jsonObject = jsonObject)
            "internalLinkTypeProxy" -> return deserializeInternalLinkTypeProxy(jsonObject = jsonObject)
            "internalLinkTypePublicChat" -> return deserializeInternalLinkTypePublicChat(jsonObject = jsonObject)
            "internalLinkTypeQrCodeAuthentication" -> return deserializeInternalLinkTypeQrCodeAuthentication(jsonObject = jsonObject)
            "internalLinkTypeRestorePurchases" -> return deserializeInternalLinkTypeRestorePurchases(jsonObject = jsonObject)
            "internalLinkTypeSettings" -> return deserializeInternalLinkTypeSettings(jsonObject = jsonObject)
            "internalLinkTypeStickerSet" -> return deserializeInternalLinkTypeStickerSet(jsonObject = jsonObject)
            "internalLinkTypeStory" -> return deserializeInternalLinkTypeStory(jsonObject = jsonObject)
            "internalLinkTypeTheme" -> return deserializeInternalLinkTypeTheme(jsonObject = jsonObject)
            "internalLinkTypeThemeSettings" -> return deserializeInternalLinkTypeThemeSettings(jsonObject = jsonObject)
            "internalLinkTypeUnknownDeepLink" -> return deserializeInternalLinkTypeUnknownDeepLink(jsonObject = jsonObject)
            "internalLinkTypeUnsupportedProxy" -> return deserializeInternalLinkTypeUnsupportedProxy(jsonObject = jsonObject)
            "internalLinkTypeUpgradedGift" -> return deserializeInternalLinkTypeUpgradedGift(jsonObject = jsonObject)
            "internalLinkTypeUserPhoneNumber" -> return deserializeInternalLinkTypeUserPhoneNumber(jsonObject = jsonObject)
            "internalLinkTypeUserToken" -> return deserializeInternalLinkTypeUserToken(jsonObject = jsonObject)
            "internalLinkTypeVideoChat" -> return deserializeInternalLinkTypeVideoChat(jsonObject = jsonObject)
            "internalLinkTypeWebApp" -> return deserializeInternalLinkTypeWebApp(jsonObject = jsonObject)
            "inviteGroupCallParticipantResultSuccess" -> return deserializeInviteGroupCallParticipantResultSuccess(jsonObject = jsonObject)
            "inviteGroupCallParticipantResultUserAlreadyParticipant" -> return deserializeInviteGroupCallParticipantResultUserAlreadyParticipant(jsonObject = jsonObject)
            "inviteGroupCallParticipantResultUserPrivacyRestricted" -> return deserializeInviteGroupCallParticipantResultUserPrivacyRestricted(jsonObject = jsonObject)
            "inviteGroupCallParticipantResultUserWasBanned" -> return deserializeInviteGroupCallParticipantResultUserWasBanned(jsonObject = jsonObject)
            "inviteLinkChatTypeBasicGroup" -> return deserializeInviteLinkChatTypeBasicGroup(jsonObject = jsonObject)
            "inviteLinkChatTypeChannel" -> return deserializeInviteLinkChatTypeChannel(jsonObject = jsonObject)
            "inviteLinkChatTypeSupergroup" -> return deserializeInviteLinkChatTypeSupergroup(jsonObject = jsonObject)
            "invoice" -> return deserializeInvoice(jsonObject = jsonObject)
            "jsonObjectMember" -> return deserializeJsonObjectMember(jsonObject = jsonObject)
            "jsonValueArray" -> return deserializeJsonValueArray(jsonObject = jsonObject)
            "jsonValueBoolean" -> return deserializeJsonValueBoolean(jsonObject = jsonObject)
            "jsonValueNull" -> return deserializeJsonValueNull(jsonObject = jsonObject)
            "jsonValueNumber" -> return deserializeJsonValueNumber(jsonObject = jsonObject)
            "jsonValueObject" -> return deserializeJsonValueObject(jsonObject = jsonObject)
            "jsonValueString" -> return deserializeJsonValueString(jsonObject = jsonObject)
            "keyboardButton" -> return deserializeKeyboardButton(jsonObject = jsonObject)
            "keyboardButtonTypeRequestChat" -> return deserializeKeyboardButtonTypeRequestChat(jsonObject = jsonObject)
            "keyboardButtonTypeRequestLocation" -> return deserializeKeyboardButtonTypeRequestLocation(jsonObject = jsonObject)
            "keyboardButtonTypeRequestPhoneNumber" -> return deserializeKeyboardButtonTypeRequestPhoneNumber(jsonObject = jsonObject)
            "keyboardButtonTypeRequestPoll" -> return deserializeKeyboardButtonTypeRequestPoll(jsonObject = jsonObject)
            "keyboardButtonTypeRequestUsers" -> return deserializeKeyboardButtonTypeRequestUsers(jsonObject = jsonObject)
            "keyboardButtonTypeText" -> return deserializeKeyboardButtonTypeText(jsonObject = jsonObject)
            "keyboardButtonTypeWebApp" -> return deserializeKeyboardButtonTypeWebApp(jsonObject = jsonObject)
            "labeledPricePart" -> return deserializeLabeledPricePart(jsonObject = jsonObject)
            "languagePackInfo" -> return deserializeLanguagePackInfo(jsonObject = jsonObject)
            "languagePackString" -> return deserializeLanguagePackString(jsonObject = jsonObject)
            "languagePackStringValueDeleted" -> return deserializeLanguagePackStringValueDeleted(jsonObject = jsonObject)
            "languagePackStringValueOrdinary" -> return deserializeLanguagePackStringValueOrdinary(jsonObject = jsonObject)
            "languagePackStringValuePluralized" -> return deserializeLanguagePackStringValuePluralized(jsonObject = jsonObject)
            "languagePackStrings" -> return deserializeLanguagePackStrings(jsonObject = jsonObject)
            "linkPreview" -> return deserializeLinkPreview(jsonObject = jsonObject)
            "linkPreviewAlbumMediaPhoto" -> return deserializeLinkPreviewAlbumMediaPhoto(jsonObject = jsonObject)
            "linkPreviewAlbumMediaVideo" -> return deserializeLinkPreviewAlbumMediaVideo(jsonObject = jsonObject)
            "linkPreviewOptions" -> return deserializeLinkPreviewOptions(jsonObject = jsonObject)
            "linkPreviewTypeAlbum" -> return deserializeLinkPreviewTypeAlbum(jsonObject = jsonObject)
            "linkPreviewTypeAnimation" -> return deserializeLinkPreviewTypeAnimation(jsonObject = jsonObject)
            "linkPreviewTypeApp" -> return deserializeLinkPreviewTypeApp(jsonObject = jsonObject)
            "linkPreviewTypeArticle" -> return deserializeLinkPreviewTypeArticle(jsonObject = jsonObject)
            "linkPreviewTypeAudio" -> return deserializeLinkPreviewTypeAudio(jsonObject = jsonObject)
            "linkPreviewTypeBackground" -> return deserializeLinkPreviewTypeBackground(jsonObject = jsonObject)
            "linkPreviewTypeChannelBoost" -> return deserializeLinkPreviewTypeChannelBoost(jsonObject = jsonObject)
            "linkPreviewTypeChat" -> return deserializeLinkPreviewTypeChat(jsonObject = jsonObject)
            "linkPreviewTypeDocument" -> return deserializeLinkPreviewTypeDocument(jsonObject = jsonObject)
            "linkPreviewTypeEmbeddedAnimationPlayer" -> return deserializeLinkPreviewTypeEmbeddedAnimationPlayer(jsonObject = jsonObject)
            "linkPreviewTypeEmbeddedAudioPlayer" -> return deserializeLinkPreviewTypeEmbeddedAudioPlayer(jsonObject = jsonObject)
            "linkPreviewTypeEmbeddedVideoPlayer" -> return deserializeLinkPreviewTypeEmbeddedVideoPlayer(jsonObject = jsonObject)
            "linkPreviewTypeExternalAudio" -> return deserializeLinkPreviewTypeExternalAudio(jsonObject = jsonObject)
            "linkPreviewTypeExternalVideo" -> return deserializeLinkPreviewTypeExternalVideo(jsonObject = jsonObject)
            "linkPreviewTypeGroupCall" -> return deserializeLinkPreviewTypeGroupCall(jsonObject = jsonObject)
            "linkPreviewTypeInvoice" -> return deserializeLinkPreviewTypeInvoice(jsonObject = jsonObject)
            "linkPreviewTypeMessage" -> return deserializeLinkPreviewTypeMessage(jsonObject = jsonObject)
            "linkPreviewTypePhoto" -> return deserializeLinkPreviewTypePhoto(jsonObject = jsonObject)
            "linkPreviewTypePremiumGiftCode" -> return deserializeLinkPreviewTypePremiumGiftCode(jsonObject = jsonObject)
            "linkPreviewTypeShareableChatFolder" -> return deserializeLinkPreviewTypeShareableChatFolder(jsonObject = jsonObject)
            "linkPreviewTypeSticker" -> return deserializeLinkPreviewTypeSticker(jsonObject = jsonObject)
            "linkPreviewTypeStickerSet" -> return deserializeLinkPreviewTypeStickerSet(jsonObject = jsonObject)
            "linkPreviewTypeStory" -> return deserializeLinkPreviewTypeStory(jsonObject = jsonObject)
            "linkPreviewTypeSupergroupBoost" -> return deserializeLinkPreviewTypeSupergroupBoost(jsonObject = jsonObject)
            "linkPreviewTypeTheme" -> return deserializeLinkPreviewTypeTheme(jsonObject = jsonObject)
            "linkPreviewTypeUnsupported" -> return deserializeLinkPreviewTypeUnsupported(jsonObject = jsonObject)
            "linkPreviewTypeUpgradedGift" -> return deserializeLinkPreviewTypeUpgradedGift(jsonObject = jsonObject)
            "linkPreviewTypeUser" -> return deserializeLinkPreviewTypeUser(jsonObject = jsonObject)
            "linkPreviewTypeVideo" -> return deserializeLinkPreviewTypeVideo(jsonObject = jsonObject)
            "linkPreviewTypeVideoChat" -> return deserializeLinkPreviewTypeVideoChat(jsonObject = jsonObject)
            "linkPreviewTypeVideoNote" -> return deserializeLinkPreviewTypeVideoNote(jsonObject = jsonObject)
            "linkPreviewTypeVoiceNote" -> return deserializeLinkPreviewTypeVoiceNote(jsonObject = jsonObject)
            "linkPreviewTypeWebApp" -> return deserializeLinkPreviewTypeWebApp(jsonObject = jsonObject)
            "localFile" -> return deserializeLocalFile(jsonObject = jsonObject)
            "localizationTargetInfo" -> return deserializeLocalizationTargetInfo(jsonObject = jsonObject)
            "location" -> return deserializeLocation(jsonObject = jsonObject)
            "locationAddress" -> return deserializeLocationAddress(jsonObject = jsonObject)
            "logStreamDefault" -> return deserializeLogStreamDefault(jsonObject = jsonObject)
            "logStreamEmpty" -> return deserializeLogStreamEmpty(jsonObject = jsonObject)
            "logStreamFile" -> return deserializeLogStreamFile(jsonObject = jsonObject)
            "logTags" -> return deserializeLogTags(jsonObject = jsonObject)
            "logVerbosityLevel" -> return deserializeLogVerbosityLevel(jsonObject = jsonObject)
            "loginUrlInfoOpen" -> return deserializeLoginUrlInfoOpen(jsonObject = jsonObject)
            "loginUrlInfoRequestConfirmation" -> return deserializeLoginUrlInfoRequestConfirmation(jsonObject = jsonObject)
            "mainWebApp" -> return deserializeMainWebApp(jsonObject = jsonObject)
            "maskPointChin" -> return deserializeMaskPointChin(jsonObject = jsonObject)
            "maskPointEyes" -> return deserializeMaskPointEyes(jsonObject = jsonObject)
            "maskPointForehead" -> return deserializeMaskPointForehead(jsonObject = jsonObject)
            "maskPointMouth" -> return deserializeMaskPointMouth(jsonObject = jsonObject)
            "maskPosition" -> return deserializeMaskPosition(jsonObject = jsonObject)
            "message" -> return deserializeMessage(jsonObject = jsonObject)
            "messageAnimatedEmoji" -> return deserializeMessageAnimatedEmoji(jsonObject = jsonObject)
            "messageAnimation" -> return deserializeMessageAnimation(jsonObject = jsonObject)
            "messageAudio" -> return deserializeMessageAudio(jsonObject = jsonObject)
            "messageAutoDeleteTime" -> return deserializeMessageAutoDeleteTime(jsonObject = jsonObject)
            "messageBasicGroupChatCreate" -> return deserializeMessageBasicGroupChatCreate(jsonObject = jsonObject)
            "messageBotWriteAccessAllowed" -> return deserializeMessageBotWriteAccessAllowed(jsonObject = jsonObject)
            "messageCalendar" -> return deserializeMessageCalendar(jsonObject = jsonObject)
            "messageCalendarDay" -> return deserializeMessageCalendarDay(jsonObject = jsonObject)
            "messageCall" -> return deserializeMessageCall(jsonObject = jsonObject)
            "messageChatAddMembers" -> return deserializeMessageChatAddMembers(jsonObject = jsonObject)
            "messageChatBoost" -> return deserializeMessageChatBoost(jsonObject = jsonObject)
            "messageChatChangePhoto" -> return deserializeMessageChatChangePhoto(jsonObject = jsonObject)
            "messageChatChangeTitle" -> return deserializeMessageChatChangeTitle(jsonObject = jsonObject)
            "messageChatDeleteMember" -> return deserializeMessageChatDeleteMember(jsonObject = jsonObject)
            "messageChatDeletePhoto" -> return deserializeMessageChatDeletePhoto(jsonObject = jsonObject)
            "messageChatJoinByLink" -> return deserializeMessageChatJoinByLink(jsonObject = jsonObject)
            "messageChatJoinByRequest" -> return deserializeMessageChatJoinByRequest(jsonObject = jsonObject)
            "messageChatSetBackground" -> return deserializeMessageChatSetBackground(jsonObject = jsonObject)
            "messageChatSetMessageAutoDeleteTime" -> return deserializeMessageChatSetMessageAutoDeleteTime(jsonObject = jsonObject)
            "messageChatSetTheme" -> return deserializeMessageChatSetTheme(jsonObject = jsonObject)
            "messageChatShared" -> return deserializeMessageChatShared(jsonObject = jsonObject)
            "messageChatUpgradeFrom" -> return deserializeMessageChatUpgradeFrom(jsonObject = jsonObject)
            "messageChatUpgradeTo" -> return deserializeMessageChatUpgradeTo(jsonObject = jsonObject)
            "messageChecklist" -> return deserializeMessageChecklist(jsonObject = jsonObject)
            "messageChecklistTasksAdded" -> return deserializeMessageChecklistTasksAdded(jsonObject = jsonObject)
            "messageChecklistTasksDone" -> return deserializeMessageChecklistTasksDone(jsonObject = jsonObject)
            "messageContact" -> return deserializeMessageContact(jsonObject = jsonObject)
            "messageContactRegistered" -> return deserializeMessageContactRegistered(jsonObject = jsonObject)
            "messageCopyOptions" -> return deserializeMessageCopyOptions(jsonObject = jsonObject)
            "messageCustomServiceAction" -> return deserializeMessageCustomServiceAction(jsonObject = jsonObject)
            "messageDice" -> return deserializeMessageDice(jsonObject = jsonObject)
            "messageDirectMessagePriceChanged" -> return deserializeMessageDirectMessagePriceChanged(jsonObject = jsonObject)
            "messageDocument" -> return deserializeMessageDocument(jsonObject = jsonObject)
            "messageEffect" -> return deserializeMessageEffect(jsonObject = jsonObject)
            "messageEffectTypeEmojiReaction" -> return deserializeMessageEffectTypeEmojiReaction(jsonObject = jsonObject)
            "messageEffectTypePremiumSticker" -> return deserializeMessageEffectTypePremiumSticker(jsonObject = jsonObject)
            "messageExpiredPhoto" -> return deserializeMessageExpiredPhoto(jsonObject = jsonObject)
            "messageExpiredVideo" -> return deserializeMessageExpiredVideo(jsonObject = jsonObject)
            "messageExpiredVideoNote" -> return deserializeMessageExpiredVideoNote(jsonObject = jsonObject)
            "messageExpiredVoiceNote" -> return deserializeMessageExpiredVoiceNote(jsonObject = jsonObject)
            "messageFileTypeGroup" -> return deserializeMessageFileTypeGroup(jsonObject = jsonObject)
            "messageFileTypePrivate" -> return deserializeMessageFileTypePrivate(jsonObject = jsonObject)
            "messageFileTypeUnknown" -> return deserializeMessageFileTypeUnknown(jsonObject = jsonObject)
            "messageForumTopicCreated" -> return deserializeMessageForumTopicCreated(jsonObject = jsonObject)
            "messageForumTopicEdited" -> return deserializeMessageForumTopicEdited(jsonObject = jsonObject)
            "messageForumTopicIsClosedToggled" -> return deserializeMessageForumTopicIsClosedToggled(jsonObject = jsonObject)
            "messageForumTopicIsHiddenToggled" -> return deserializeMessageForumTopicIsHiddenToggled(jsonObject = jsonObject)
            "messageForwardInfo" -> return deserializeMessageForwardInfo(jsonObject = jsonObject)
            "messageGame" -> return deserializeMessageGame(jsonObject = jsonObject)
            "messageGameScore" -> return deserializeMessageGameScore(jsonObject = jsonObject)
            "messageGift" -> return deserializeMessageGift(jsonObject = jsonObject)
            "messageGiftedPremium" -> return deserializeMessageGiftedPremium(jsonObject = jsonObject)
            "messageGiftedStars" -> return deserializeMessageGiftedStars(jsonObject = jsonObject)
            "messageGiveaway" -> return deserializeMessageGiveaway(jsonObject = jsonObject)
            "messageGiveawayCompleted" -> return deserializeMessageGiveawayCompleted(jsonObject = jsonObject)
            "messageGiveawayCreated" -> return deserializeMessageGiveawayCreated(jsonObject = jsonObject)
            "messageGiveawayPrizeStars" -> return deserializeMessageGiveawayPrizeStars(jsonObject = jsonObject)
            "messageGiveawayWinners" -> return deserializeMessageGiveawayWinners(jsonObject = jsonObject)
            "messageGroupCall" -> return deserializeMessageGroupCall(jsonObject = jsonObject)
            "messageImportInfo" -> return deserializeMessageImportInfo(jsonObject = jsonObject)
            "messageInteractionInfo" -> return deserializeMessageInteractionInfo(jsonObject = jsonObject)
            "messageInviteVideoChatParticipants" -> return deserializeMessageInviteVideoChatParticipants(jsonObject = jsonObject)
            "messageInvoice" -> return deserializeMessageInvoice(jsonObject = jsonObject)
            "messageLink" -> return deserializeMessageLink(jsonObject = jsonObject)
            "messageLinkInfo" -> return deserializeMessageLinkInfo(jsonObject = jsonObject)
            "messageLocation" -> return deserializeMessageLocation(jsonObject = jsonObject)
            "messageOriginChannel" -> return deserializeMessageOriginChannel(jsonObject = jsonObject)
            "messageOriginChat" -> return deserializeMessageOriginChat(jsonObject = jsonObject)
            "messageOriginHiddenUser" -> return deserializeMessageOriginHiddenUser(jsonObject = jsonObject)
            "messageOriginUser" -> return deserializeMessageOriginUser(jsonObject = jsonObject)
            "messagePaidMedia" -> return deserializeMessagePaidMedia(jsonObject = jsonObject)
            "messagePaidMessagePriceChanged" -> return deserializeMessagePaidMessagePriceChanged(jsonObject = jsonObject)
            "messagePaidMessagesRefunded" -> return deserializeMessagePaidMessagesRefunded(jsonObject = jsonObject)
            "messagePassportDataReceived" -> return deserializeMessagePassportDataReceived(jsonObject = jsonObject)
            "messagePassportDataSent" -> return deserializeMessagePassportDataSent(jsonObject = jsonObject)
            "messagePaymentRefunded" -> return deserializeMessagePaymentRefunded(jsonObject = jsonObject)
            "messagePaymentSuccessful" -> return deserializeMessagePaymentSuccessful(jsonObject = jsonObject)
            "messagePaymentSuccessfulBot" -> return deserializeMessagePaymentSuccessfulBot(jsonObject = jsonObject)
            "messagePhoto" -> return deserializeMessagePhoto(jsonObject = jsonObject)
            "messagePinMessage" -> return deserializeMessagePinMessage(jsonObject = jsonObject)
            "messagePoll" -> return deserializeMessagePoll(jsonObject = jsonObject)
            "messagePosition" -> return deserializeMessagePosition(jsonObject = jsonObject)
            "messagePositions" -> return deserializeMessagePositions(jsonObject = jsonObject)
            "messagePremiumGiftCode" -> return deserializeMessagePremiumGiftCode(jsonObject = jsonObject)
            "messageProperties" -> return deserializeMessageProperties(jsonObject = jsonObject)
            "messageProximityAlertTriggered" -> return deserializeMessageProximityAlertTriggered(jsonObject = jsonObject)
            "messageReaction" -> return deserializeMessageReaction(jsonObject = jsonObject)
            "messageReactions" -> return deserializeMessageReactions(jsonObject = jsonObject)
            "messageReadDateMyPrivacyRestricted" -> return deserializeMessageReadDateMyPrivacyRestricted(jsonObject = jsonObject)
            "messageReadDateRead" -> return deserializeMessageReadDateRead(jsonObject = jsonObject)
            "messageReadDateTooOld" -> return deserializeMessageReadDateTooOld(jsonObject = jsonObject)
            "messageReadDateUnread" -> return deserializeMessageReadDateUnread(jsonObject = jsonObject)
            "messageReadDateUserPrivacyRestricted" -> return deserializeMessageReadDateUserPrivacyRestricted(jsonObject = jsonObject)
            "messageRefundedUpgradedGift" -> return deserializeMessageRefundedUpgradedGift(jsonObject = jsonObject)
            "messageReplyInfo" -> return deserializeMessageReplyInfo(jsonObject = jsonObject)
            "messageReplyToMessage" -> return deserializeMessageReplyToMessage(jsonObject = jsonObject)
            "messageReplyToStory" -> return deserializeMessageReplyToStory(jsonObject = jsonObject)
            "messageSchedulingStateSendAtDate" -> return deserializeMessageSchedulingStateSendAtDate(jsonObject = jsonObject)
            "messageSchedulingStateSendWhenOnline" -> return deserializeMessageSchedulingStateSendWhenOnline(jsonObject = jsonObject)
            "messageSchedulingStateSendWhenVideoProcessed" -> return deserializeMessageSchedulingStateSendWhenVideoProcessed(jsonObject = jsonObject)
            "messageScreenshotTaken" -> return deserializeMessageScreenshotTaken(jsonObject = jsonObject)
            "messageSelfDestructTypeImmediately" -> return deserializeMessageSelfDestructTypeImmediately(jsonObject = jsonObject)
            "messageSelfDestructTypeTimer" -> return deserializeMessageSelfDestructTypeTimer(jsonObject = jsonObject)
            "messageSendOptions" -> return deserializeMessageSendOptions(jsonObject = jsonObject)
            "messageSenderChat" -> return deserializeMessageSenderChat(jsonObject = jsonObject)
            "messageSenderUser" -> return deserializeMessageSenderUser(jsonObject = jsonObject)
            "messageSenders" -> return deserializeMessageSenders(jsonObject = jsonObject)
            "messageSendingStateFailed" -> return deserializeMessageSendingStateFailed(jsonObject = jsonObject)
            "messageSendingStatePending" -> return deserializeMessageSendingStatePending(jsonObject = jsonObject)
            "messageSourceChatEventLog" -> return deserializeMessageSourceChatEventLog(jsonObject = jsonObject)
            "messageSourceChatHistory" -> return deserializeMessageSourceChatHistory(jsonObject = jsonObject)
            "messageSourceChatList" -> return deserializeMessageSourceChatList(jsonObject = jsonObject)
            "messageSourceDirectMessagesChatTopicHistory" -> return deserializeMessageSourceDirectMessagesChatTopicHistory(jsonObject = jsonObject)
            "messageSourceForumTopicHistory" -> return deserializeMessageSourceForumTopicHistory(jsonObject = jsonObject)
            "messageSourceHistoryPreview" -> return deserializeMessageSourceHistoryPreview(jsonObject = jsonObject)
            "messageSourceMessageThreadHistory" -> return deserializeMessageSourceMessageThreadHistory(jsonObject = jsonObject)
            "messageSourceNotification" -> return deserializeMessageSourceNotification(jsonObject = jsonObject)
            "messageSourceOther" -> return deserializeMessageSourceOther(jsonObject = jsonObject)
            "messageSourceScreenshot" -> return deserializeMessageSourceScreenshot(jsonObject = jsonObject)
            "messageSourceSearch" -> return deserializeMessageSourceSearch(jsonObject = jsonObject)
            "messageStatistics" -> return deserializeMessageStatistics(jsonObject = jsonObject)
            "messageSticker" -> return deserializeMessageSticker(jsonObject = jsonObject)
            "messageStory" -> return deserializeMessageStory(jsonObject = jsonObject)
            "messageSuggestProfilePhoto" -> return deserializeMessageSuggestProfilePhoto(jsonObject = jsonObject)
            "messageSupergroupChatCreate" -> return deserializeMessageSupergroupChatCreate(jsonObject = jsonObject)
            "messageText" -> return deserializeMessageText(jsonObject = jsonObject)
            "messageThreadInfo" -> return deserializeMessageThreadInfo(jsonObject = jsonObject)
            "messageTopicDirectMessages" -> return deserializeMessageTopicDirectMessages(jsonObject = jsonObject)
            "messageTopicForum" -> return deserializeMessageTopicForum(jsonObject = jsonObject)
            "messageTopicSavedMessages" -> return deserializeMessageTopicSavedMessages(jsonObject = jsonObject)
            "messageUnsupported" -> return deserializeMessageUnsupported(jsonObject = jsonObject)
            "messageUpgradedGift" -> return deserializeMessageUpgradedGift(jsonObject = jsonObject)
            "messageUsersShared" -> return deserializeMessageUsersShared(jsonObject = jsonObject)
            "messageVenue" -> return deserializeMessageVenue(jsonObject = jsonObject)
            "messageVideo" -> return deserializeMessageVideo(jsonObject = jsonObject)
            "messageVideoChatEnded" -> return deserializeMessageVideoChatEnded(jsonObject = jsonObject)
            "messageVideoChatScheduled" -> return deserializeMessageVideoChatScheduled(jsonObject = jsonObject)
            "messageVideoChatStarted" -> return deserializeMessageVideoChatStarted(jsonObject = jsonObject)
            "messageVideoNote" -> return deserializeMessageVideoNote(jsonObject = jsonObject)
            "messageViewer" -> return deserializeMessageViewer(jsonObject = jsonObject)
            "messageViewers" -> return deserializeMessageViewers(jsonObject = jsonObject)
            "messageVoiceNote" -> return deserializeMessageVoiceNote(jsonObject = jsonObject)
            "messageWebAppDataReceived" -> return deserializeMessageWebAppDataReceived(jsonObject = jsonObject)
            "messageWebAppDataSent" -> return deserializeMessageWebAppDataSent(jsonObject = jsonObject)
            "messages" -> return deserializeMessages(jsonObject = jsonObject)
            "minithumbnail" -> return deserializeMinithumbnail(jsonObject = jsonObject)
            "networkStatistics" -> return deserializeNetworkStatistics(jsonObject = jsonObject)
            "networkStatisticsEntryCall" -> return deserializeNetworkStatisticsEntryCall(jsonObject = jsonObject)
            "networkStatisticsEntryFile" -> return deserializeNetworkStatisticsEntryFile(jsonObject = jsonObject)
            "networkTypeMobile" -> return deserializeNetworkTypeMobile(jsonObject = jsonObject)
            "networkTypeMobileRoaming" -> return deserializeNetworkTypeMobileRoaming(jsonObject = jsonObject)
            "networkTypeNone" -> return deserializeNetworkTypeNone(jsonObject = jsonObject)
            "networkTypeOther" -> return deserializeNetworkTypeOther(jsonObject = jsonObject)
            "networkTypeWiFi" -> return deserializeNetworkTypeWiFi(jsonObject = jsonObject)
            "newChatPrivacySettings" -> return deserializeNewChatPrivacySettings(jsonObject = jsonObject)
            "notification" -> return deserializeNotification(jsonObject = jsonObject)
            "notificationGroup" -> return deserializeNotificationGroup(jsonObject = jsonObject)
            "notificationGroupTypeCalls" -> return deserializeNotificationGroupTypeCalls(jsonObject = jsonObject)
            "notificationGroupTypeMentions" -> return deserializeNotificationGroupTypeMentions(jsonObject = jsonObject)
            "notificationGroupTypeMessages" -> return deserializeNotificationGroupTypeMessages(jsonObject = jsonObject)
            "notificationGroupTypeSecretChat" -> return deserializeNotificationGroupTypeSecretChat(jsonObject = jsonObject)
            "notificationSettingsScopeChannelChats" -> return deserializeNotificationSettingsScopeChannelChats(jsonObject = jsonObject)
            "notificationSettingsScopeGroupChats" -> return deserializeNotificationSettingsScopeGroupChats(jsonObject = jsonObject)
            "notificationSettingsScopePrivateChats" -> return deserializeNotificationSettingsScopePrivateChats(jsonObject = jsonObject)
            "notificationSound" -> return deserializeNotificationSound(jsonObject = jsonObject)
            "notificationSounds" -> return deserializeNotificationSounds(jsonObject = jsonObject)
            "notificationTypeNewCall" -> return deserializeNotificationTypeNewCall(jsonObject = jsonObject)
            "notificationTypeNewMessage" -> return deserializeNotificationTypeNewMessage(jsonObject = jsonObject)
            "notificationTypeNewPushMessage" -> return deserializeNotificationTypeNewPushMessage(jsonObject = jsonObject)
            "notificationTypeNewSecretChat" -> return deserializeNotificationTypeNewSecretChat(jsonObject = jsonObject)
            "ok" -> return deserializeOk(jsonObject = jsonObject)
            "optionValueBoolean" -> return deserializeOptionValueBoolean(jsonObject = jsonObject)
            "optionValueEmpty" -> return deserializeOptionValueEmpty(jsonObject = jsonObject)
            "optionValueInteger" -> return deserializeOptionValueInteger(jsonObject = jsonObject)
            "optionValueString" -> return deserializeOptionValueString(jsonObject = jsonObject)
            "orderInfo" -> return deserializeOrderInfo(jsonObject = jsonObject)
            "outline" -> return deserializeOutline(jsonObject = jsonObject)
            "pageBlockAnchor" -> return deserializePageBlockAnchor(jsonObject = jsonObject)
            "pageBlockAnimation" -> return deserializePageBlockAnimation(jsonObject = jsonObject)
            "pageBlockAudio" -> return deserializePageBlockAudio(jsonObject = jsonObject)
            "pageBlockAuthorDate" -> return deserializePageBlockAuthorDate(jsonObject = jsonObject)
            "pageBlockBlockQuote" -> return deserializePageBlockBlockQuote(jsonObject = jsonObject)
            "pageBlockCaption" -> return deserializePageBlockCaption(jsonObject = jsonObject)
            "pageBlockChatLink" -> return deserializePageBlockChatLink(jsonObject = jsonObject)
            "pageBlockCollage" -> return deserializePageBlockCollage(jsonObject = jsonObject)
            "pageBlockCover" -> return deserializePageBlockCover(jsonObject = jsonObject)
            "pageBlockDetails" -> return deserializePageBlockDetails(jsonObject = jsonObject)
            "pageBlockDivider" -> return deserializePageBlockDivider(jsonObject = jsonObject)
            "pageBlockEmbedded" -> return deserializePageBlockEmbedded(jsonObject = jsonObject)
            "pageBlockEmbeddedPost" -> return deserializePageBlockEmbeddedPost(jsonObject = jsonObject)
            "pageBlockFooter" -> return deserializePageBlockFooter(jsonObject = jsonObject)
            "pageBlockHeader" -> return deserializePageBlockHeader(jsonObject = jsonObject)
            "pageBlockHorizontalAlignmentCenter" -> return deserializePageBlockHorizontalAlignmentCenter(jsonObject = jsonObject)
            "pageBlockHorizontalAlignmentLeft" -> return deserializePageBlockHorizontalAlignmentLeft(jsonObject = jsonObject)
            "pageBlockHorizontalAlignmentRight" -> return deserializePageBlockHorizontalAlignmentRight(jsonObject = jsonObject)
            "pageBlockKicker" -> return deserializePageBlockKicker(jsonObject = jsonObject)
            "pageBlockList" -> return deserializePageBlockList(jsonObject = jsonObject)
            "pageBlockListItem" -> return deserializePageBlockListItem(jsonObject = jsonObject)
            "pageBlockMap" -> return deserializePageBlockMap(jsonObject = jsonObject)
            "pageBlockParagraph" -> return deserializePageBlockParagraph(jsonObject = jsonObject)
            "pageBlockPhoto" -> return deserializePageBlockPhoto(jsonObject = jsonObject)
            "pageBlockPreformatted" -> return deserializePageBlockPreformatted(jsonObject = jsonObject)
            "pageBlockPullQuote" -> return deserializePageBlockPullQuote(jsonObject = jsonObject)
            "pageBlockRelatedArticle" -> return deserializePageBlockRelatedArticle(jsonObject = jsonObject)
            "pageBlockRelatedArticles" -> return deserializePageBlockRelatedArticles(jsonObject = jsonObject)
            "pageBlockSlideshow" -> return deserializePageBlockSlideshow(jsonObject = jsonObject)
            "pageBlockSubheader" -> return deserializePageBlockSubheader(jsonObject = jsonObject)
            "pageBlockSubtitle" -> return deserializePageBlockSubtitle(jsonObject = jsonObject)
            "pageBlockTable" -> return deserializePageBlockTable(jsonObject = jsonObject)
            "pageBlockTableCell" -> return deserializePageBlockTableCell(jsonObject = jsonObject)
            "pageBlockTitle" -> return deserializePageBlockTitle(jsonObject = jsonObject)
            "pageBlockVerticalAlignmentBottom" -> return deserializePageBlockVerticalAlignmentBottom(jsonObject = jsonObject)
            "pageBlockVerticalAlignmentMiddle" -> return deserializePageBlockVerticalAlignmentMiddle(jsonObject = jsonObject)
            "pageBlockVerticalAlignmentTop" -> return deserializePageBlockVerticalAlignmentTop(jsonObject = jsonObject)
            "pageBlockVideo" -> return deserializePageBlockVideo(jsonObject = jsonObject)
            "pageBlockVoiceNote" -> return deserializePageBlockVoiceNote(jsonObject = jsonObject)
            "paidMediaPhoto" -> return deserializePaidMediaPhoto(jsonObject = jsonObject)
            "paidMediaPreview" -> return deserializePaidMediaPreview(jsonObject = jsonObject)
            "paidMediaUnsupported" -> return deserializePaidMediaUnsupported(jsonObject = jsonObject)
            "paidMediaVideo" -> return deserializePaidMediaVideo(jsonObject = jsonObject)
            "paidReactionTypeAnonymous" -> return deserializePaidReactionTypeAnonymous(jsonObject = jsonObject)
            "paidReactionTypeChat" -> return deserializePaidReactionTypeChat(jsonObject = jsonObject)
            "paidReactionTypeRegular" -> return deserializePaidReactionTypeRegular(jsonObject = jsonObject)
            "paidReactor" -> return deserializePaidReactor(jsonObject = jsonObject)
            "passportAuthorizationForm" -> return deserializePassportAuthorizationForm(jsonObject = jsonObject)
            "passportElementAddress" -> return deserializePassportElementAddress(jsonObject = jsonObject)
            "passportElementBankStatement" -> return deserializePassportElementBankStatement(jsonObject = jsonObject)
            "passportElementDriverLicense" -> return deserializePassportElementDriverLicense(jsonObject = jsonObject)
            "passportElementEmailAddress" -> return deserializePassportElementEmailAddress(jsonObject = jsonObject)
            "passportElementError" -> return deserializePassportElementError(jsonObject = jsonObject)
            "passportElementErrorSourceDataField" -> return deserializePassportElementErrorSourceDataField(jsonObject = jsonObject)
            "passportElementErrorSourceFile" -> return deserializePassportElementErrorSourceFile(jsonObject = jsonObject)
            "passportElementErrorSourceFiles" -> return deserializePassportElementErrorSourceFiles(jsonObject = jsonObject)
            "passportElementErrorSourceFrontSide" -> return deserializePassportElementErrorSourceFrontSide(jsonObject = jsonObject)
            "passportElementErrorSourceReverseSide" -> return deserializePassportElementErrorSourceReverseSide(jsonObject = jsonObject)
            "passportElementErrorSourceSelfie" -> return deserializePassportElementErrorSourceSelfie(jsonObject = jsonObject)
            "passportElementErrorSourceTranslationFile" -> return deserializePassportElementErrorSourceTranslationFile(jsonObject = jsonObject)
            "passportElementErrorSourceTranslationFiles" -> return deserializePassportElementErrorSourceTranslationFiles(jsonObject = jsonObject)
            "passportElementErrorSourceUnspecified" -> return deserializePassportElementErrorSourceUnspecified(jsonObject = jsonObject)
            "passportElementIdentityCard" -> return deserializePassportElementIdentityCard(jsonObject = jsonObject)
            "passportElementInternalPassport" -> return deserializePassportElementInternalPassport(jsonObject = jsonObject)
            "passportElementPassport" -> return deserializePassportElementPassport(jsonObject = jsonObject)
            "passportElementPassportRegistration" -> return deserializePassportElementPassportRegistration(jsonObject = jsonObject)
            "passportElementPersonalDetails" -> return deserializePassportElementPersonalDetails(jsonObject = jsonObject)
            "passportElementPhoneNumber" -> return deserializePassportElementPhoneNumber(jsonObject = jsonObject)
            "passportElementRentalAgreement" -> return deserializePassportElementRentalAgreement(jsonObject = jsonObject)
            "passportElementTemporaryRegistration" -> return deserializePassportElementTemporaryRegistration(jsonObject = jsonObject)
            "passportElementTypeAddress" -> return deserializePassportElementTypeAddress(jsonObject = jsonObject)
            "passportElementTypeBankStatement" -> return deserializePassportElementTypeBankStatement(jsonObject = jsonObject)
            "passportElementTypeDriverLicense" -> return deserializePassportElementTypeDriverLicense(jsonObject = jsonObject)
            "passportElementTypeEmailAddress" -> return deserializePassportElementTypeEmailAddress(jsonObject = jsonObject)
            "passportElementTypeIdentityCard" -> return deserializePassportElementTypeIdentityCard(jsonObject = jsonObject)
            "passportElementTypeInternalPassport" -> return deserializePassportElementTypeInternalPassport(jsonObject = jsonObject)
            "passportElementTypePassport" -> return deserializePassportElementTypePassport(jsonObject = jsonObject)
            "passportElementTypePassportRegistration" -> return deserializePassportElementTypePassportRegistration(jsonObject = jsonObject)
            "passportElementTypePersonalDetails" -> return deserializePassportElementTypePersonalDetails(jsonObject = jsonObject)
            "passportElementTypePhoneNumber" -> return deserializePassportElementTypePhoneNumber(jsonObject = jsonObject)
            "passportElementTypeRentalAgreement" -> return deserializePassportElementTypeRentalAgreement(jsonObject = jsonObject)
            "passportElementTypeTemporaryRegistration" -> return deserializePassportElementTypeTemporaryRegistration(jsonObject = jsonObject)
            "passportElementTypeUtilityBill" -> return deserializePassportElementTypeUtilityBill(jsonObject = jsonObject)
            "passportElementUtilityBill" -> return deserializePassportElementUtilityBill(jsonObject = jsonObject)
            "passportElements" -> return deserializePassportElements(jsonObject = jsonObject)
            "passportElementsWithErrors" -> return deserializePassportElementsWithErrors(jsonObject = jsonObject)
            "passportRequiredElement" -> return deserializePassportRequiredElement(jsonObject = jsonObject)
            "passportSuitableElement" -> return deserializePassportSuitableElement(jsonObject = jsonObject)
            "passwordState" -> return deserializePasswordState(jsonObject = jsonObject)
            "paymentForm" -> return deserializePaymentForm(jsonObject = jsonObject)
            "paymentFormTypeRegular" -> return deserializePaymentFormTypeRegular(jsonObject = jsonObject)
            "paymentFormTypeStarSubscription" -> return deserializePaymentFormTypeStarSubscription(jsonObject = jsonObject)
            "paymentFormTypeStars" -> return deserializePaymentFormTypeStars(jsonObject = jsonObject)
            "paymentOption" -> return deserializePaymentOption(jsonObject = jsonObject)
            "paymentProviderOther" -> return deserializePaymentProviderOther(jsonObject = jsonObject)
            "paymentProviderSmartGlocal" -> return deserializePaymentProviderSmartGlocal(jsonObject = jsonObject)
            "paymentProviderStripe" -> return deserializePaymentProviderStripe(jsonObject = jsonObject)
            "paymentReceipt" -> return deserializePaymentReceipt(jsonObject = jsonObject)
            "paymentReceiptTypeRegular" -> return deserializePaymentReceiptTypeRegular(jsonObject = jsonObject)
            "paymentReceiptTypeStars" -> return deserializePaymentReceiptTypeStars(jsonObject = jsonObject)
            "paymentResult" -> return deserializePaymentResult(jsonObject = jsonObject)
            "personalDetails" -> return deserializePersonalDetails(jsonObject = jsonObject)
            "personalDocument" -> return deserializePersonalDocument(jsonObject = jsonObject)
            "phoneNumberAuthenticationSettings" -> return deserializePhoneNumberAuthenticationSettings(jsonObject = jsonObject)
            "phoneNumberCodeTypeChange" -> return deserializePhoneNumberCodeTypeChange(jsonObject = jsonObject)
            "phoneNumberCodeTypeConfirmOwnership" -> return deserializePhoneNumberCodeTypeConfirmOwnership(jsonObject = jsonObject)
            "phoneNumberCodeTypeVerify" -> return deserializePhoneNumberCodeTypeVerify(jsonObject = jsonObject)
            "phoneNumberInfo" -> return deserializePhoneNumberInfo(jsonObject = jsonObject)
            "photo" -> return deserializePhoto(jsonObject = jsonObject)
            "photoSize" -> return deserializePhotoSize(jsonObject = jsonObject)
            "point" -> return deserializePoint(jsonObject = jsonObject)
            "poll" -> return deserializePoll(jsonObject = jsonObject)
            "pollOption" -> return deserializePollOption(jsonObject = jsonObject)
            "pollTypeQuiz" -> return deserializePollTypeQuiz(jsonObject = jsonObject)
            "pollTypeRegular" -> return deserializePollTypeRegular(jsonObject = jsonObject)
            "premiumFeatureAccentColor" -> return deserializePremiumFeatureAccentColor(jsonObject = jsonObject)
            "premiumFeatureAdvancedChatManagement" -> return deserializePremiumFeatureAdvancedChatManagement(jsonObject = jsonObject)
            "premiumFeatureAnimatedProfilePhoto" -> return deserializePremiumFeatureAnimatedProfilePhoto(jsonObject = jsonObject)
            "premiumFeatureAppIcons" -> return deserializePremiumFeatureAppIcons(jsonObject = jsonObject)
            "premiumFeatureBackgroundForBoth" -> return deserializePremiumFeatureBackgroundForBoth(jsonObject = jsonObject)
            "premiumFeatureBusiness" -> return deserializePremiumFeatureBusiness(jsonObject = jsonObject)
            "premiumFeatureChatBoost" -> return deserializePremiumFeatureChatBoost(jsonObject = jsonObject)
            "premiumFeatureChecklists" -> return deserializePremiumFeatureChecklists(jsonObject = jsonObject)
            "premiumFeatureCustomEmoji" -> return deserializePremiumFeatureCustomEmoji(jsonObject = jsonObject)
            "premiumFeatureDisabledAds" -> return deserializePremiumFeatureDisabledAds(jsonObject = jsonObject)
            "premiumFeatureEmojiStatus" -> return deserializePremiumFeatureEmojiStatus(jsonObject = jsonObject)
            "premiumFeatureForumTopicIcon" -> return deserializePremiumFeatureForumTopicIcon(jsonObject = jsonObject)
            "premiumFeatureImprovedDownloadSpeed" -> return deserializePremiumFeatureImprovedDownloadSpeed(jsonObject = jsonObject)
            "premiumFeatureIncreasedLimits" -> return deserializePremiumFeatureIncreasedLimits(jsonObject = jsonObject)
            "premiumFeatureIncreasedUploadFileSize" -> return deserializePremiumFeatureIncreasedUploadFileSize(jsonObject = jsonObject)
            "premiumFeatureLastSeenTimes" -> return deserializePremiumFeatureLastSeenTimes(jsonObject = jsonObject)
            "premiumFeatureMessageEffects" -> return deserializePremiumFeatureMessageEffects(jsonObject = jsonObject)
            "premiumFeatureMessagePrivacy" -> return deserializePremiumFeatureMessagePrivacy(jsonObject = jsonObject)
            "premiumFeatureProfileBadge" -> return deserializePremiumFeatureProfileBadge(jsonObject = jsonObject)
            "premiumFeaturePromotionAnimation" -> return deserializePremiumFeaturePromotionAnimation(jsonObject = jsonObject)
            "premiumFeatureRealTimeChatTranslation" -> return deserializePremiumFeatureRealTimeChatTranslation(jsonObject = jsonObject)
            "premiumFeatureSavedMessagesTags" -> return deserializePremiumFeatureSavedMessagesTags(jsonObject = jsonObject)
            "premiumFeatureUniqueReactions" -> return deserializePremiumFeatureUniqueReactions(jsonObject = jsonObject)
            "premiumFeatureUniqueStickers" -> return deserializePremiumFeatureUniqueStickers(jsonObject = jsonObject)
            "premiumFeatureUpgradedStories" -> return deserializePremiumFeatureUpgradedStories(jsonObject = jsonObject)
            "premiumFeatureVoiceRecognition" -> return deserializePremiumFeatureVoiceRecognition(jsonObject = jsonObject)
            "premiumFeatures" -> return deserializePremiumFeatures(jsonObject = jsonObject)
            "premiumGiftCodeInfo" -> return deserializePremiumGiftCodeInfo(jsonObject = jsonObject)
            "premiumGiftPaymentOption" -> return deserializePremiumGiftPaymentOption(jsonObject = jsonObject)
            "premiumGiftPaymentOptions" -> return deserializePremiumGiftPaymentOptions(jsonObject = jsonObject)
            "premiumGiveawayPaymentOption" -> return deserializePremiumGiveawayPaymentOption(jsonObject = jsonObject)
            "premiumGiveawayPaymentOptions" -> return deserializePremiumGiveawayPaymentOptions(jsonObject = jsonObject)
            "premiumLimit" -> return deserializePremiumLimit(jsonObject = jsonObject)
            "premiumLimitTypeActiveStoryCount" -> return deserializePremiumLimitTypeActiveStoryCount(jsonObject = jsonObject)
            "premiumLimitTypeBioLength" -> return deserializePremiumLimitTypeBioLength(jsonObject = jsonObject)
            "premiumLimitTypeCaptionLength" -> return deserializePremiumLimitTypeCaptionLength(jsonObject = jsonObject)
            "premiumLimitTypeChatFolderChosenChatCount" -> return deserializePremiumLimitTypeChatFolderChosenChatCount(jsonObject = jsonObject)
            "premiumLimitTypeChatFolderCount" -> return deserializePremiumLimitTypeChatFolderCount(jsonObject = jsonObject)
            "premiumLimitTypeChatFolderInviteLinkCount" -> return deserializePremiumLimitTypeChatFolderInviteLinkCount(jsonObject = jsonObject)
            "premiumLimitTypeCreatedPublicChatCount" -> return deserializePremiumLimitTypeCreatedPublicChatCount(jsonObject = jsonObject)
            "premiumLimitTypeFavoriteStickerCount" -> return deserializePremiumLimitTypeFavoriteStickerCount(jsonObject = jsonObject)
            "premiumLimitTypeMonthlyPostedStoryCount" -> return deserializePremiumLimitTypeMonthlyPostedStoryCount(jsonObject = jsonObject)
            "premiumLimitTypePinnedArchivedChatCount" -> return deserializePremiumLimitTypePinnedArchivedChatCount(jsonObject = jsonObject)
            "premiumLimitTypePinnedChatCount" -> return deserializePremiumLimitTypePinnedChatCount(jsonObject = jsonObject)
            "premiumLimitTypePinnedSavedMessagesTopicCount" -> return deserializePremiumLimitTypePinnedSavedMessagesTopicCount(jsonObject = jsonObject)
            "premiumLimitTypeSavedAnimationCount" -> return deserializePremiumLimitTypeSavedAnimationCount(jsonObject = jsonObject)
            "premiumLimitTypeShareableChatFolderCount" -> return deserializePremiumLimitTypeShareableChatFolderCount(jsonObject = jsonObject)
            "premiumLimitTypeSimilarChatCount" -> return deserializePremiumLimitTypeSimilarChatCount(jsonObject = jsonObject)
            "premiumLimitTypeStoryCaptionLength" -> return deserializePremiumLimitTypeStoryCaptionLength(jsonObject = jsonObject)
            "premiumLimitTypeStorySuggestedReactionAreaCount" -> return deserializePremiumLimitTypeStorySuggestedReactionAreaCount(jsonObject = jsonObject)
            "premiumLimitTypeSupergroupCount" -> return deserializePremiumLimitTypeSupergroupCount(jsonObject = jsonObject)
            "premiumLimitTypeWeeklyPostedStoryCount" -> return deserializePremiumLimitTypeWeeklyPostedStoryCount(jsonObject = jsonObject)
            "premiumPaymentOption" -> return deserializePremiumPaymentOption(jsonObject = jsonObject)
            "premiumSourceBusinessFeature" -> return deserializePremiumSourceBusinessFeature(jsonObject = jsonObject)
            "premiumSourceFeature" -> return deserializePremiumSourceFeature(jsonObject = jsonObject)
            "premiumSourceLimitExceeded" -> return deserializePremiumSourceLimitExceeded(jsonObject = jsonObject)
            "premiumSourceLink" -> return deserializePremiumSourceLink(jsonObject = jsonObject)
            "premiumSourceSettings" -> return deserializePremiumSourceSettings(jsonObject = jsonObject)
            "premiumSourceStoryFeature" -> return deserializePremiumSourceStoryFeature(jsonObject = jsonObject)
            "premiumState" -> return deserializePremiumState(jsonObject = jsonObject)
            "premiumStatePaymentOption" -> return deserializePremiumStatePaymentOption(jsonObject = jsonObject)
            "premiumStoryFeatureCustomExpirationDuration" -> return deserializePremiumStoryFeatureCustomExpirationDuration(jsonObject = jsonObject)
            "premiumStoryFeatureLinksAndFormatting" -> return deserializePremiumStoryFeatureLinksAndFormatting(jsonObject = jsonObject)
            "premiumStoryFeaturePermanentViewsHistory" -> return deserializePremiumStoryFeaturePermanentViewsHistory(jsonObject = jsonObject)
            "premiumStoryFeaturePriorityOrder" -> return deserializePremiumStoryFeaturePriorityOrder(jsonObject = jsonObject)
            "premiumStoryFeatureSaveStories" -> return deserializePremiumStoryFeatureSaveStories(jsonObject = jsonObject)
            "premiumStoryFeatureStealthMode" -> return deserializePremiumStoryFeatureStealthMode(jsonObject = jsonObject)
            "premiumStoryFeatureVideoQuality" -> return deserializePremiumStoryFeatureVideoQuality(jsonObject = jsonObject)
            "prepaidGiveaway" -> return deserializePrepaidGiveaway(jsonObject = jsonObject)
            "preparedInlineMessage" -> return deserializePreparedInlineMessage(jsonObject = jsonObject)
            "preparedInlineMessageId" -> return deserializePreparedInlineMessageId(jsonObject = jsonObject)
            "productInfo" -> return deserializeProductInfo(jsonObject = jsonObject)
            "profileAccentColor" -> return deserializeProfileAccentColor(jsonObject = jsonObject)
            "profileAccentColors" -> return deserializeProfileAccentColors(jsonObject = jsonObject)
            "profilePhoto" -> return deserializeProfilePhoto(jsonObject = jsonObject)
            "proxies" -> return deserializeProxies(jsonObject = jsonObject)
            "proxy" -> return deserializeProxy(jsonObject = jsonObject)
            "proxyTypeHttp" -> return deserializeProxyTypeHttp(jsonObject = jsonObject)
            "proxyTypeMtproto" -> return deserializeProxyTypeMtproto(jsonObject = jsonObject)
            "proxyTypeSocks5" -> return deserializeProxyTypeSocks5(jsonObject = jsonObject)
            "publicChatTypeHasUsername" -> return deserializePublicChatTypeHasUsername(jsonObject = jsonObject)
            "publicChatTypeIsLocationBased" -> return deserializePublicChatTypeIsLocationBased(jsonObject = jsonObject)
            "publicForwardMessage" -> return deserializePublicForwardMessage(jsonObject = jsonObject)
            "publicForwardStory" -> return deserializePublicForwardStory(jsonObject = jsonObject)
            "publicForwards" -> return deserializePublicForwards(jsonObject = jsonObject)
            "pushMessageContentAnimation" -> return deserializePushMessageContentAnimation(jsonObject = jsonObject)
            "pushMessageContentAudio" -> return deserializePushMessageContentAudio(jsonObject = jsonObject)
            "pushMessageContentBasicGroupChatCreate" -> return deserializePushMessageContentBasicGroupChatCreate(jsonObject = jsonObject)
            "pushMessageContentChatAddMembers" -> return deserializePushMessageContentChatAddMembers(jsonObject = jsonObject)
            "pushMessageContentChatChangePhoto" -> return deserializePushMessageContentChatChangePhoto(jsonObject = jsonObject)
            "pushMessageContentChatChangeTitle" -> return deserializePushMessageContentChatChangeTitle(jsonObject = jsonObject)
            "pushMessageContentChatDeleteMember" -> return deserializePushMessageContentChatDeleteMember(jsonObject = jsonObject)
            "pushMessageContentChatJoinByLink" -> return deserializePushMessageContentChatJoinByLink(jsonObject = jsonObject)
            "pushMessageContentChatJoinByRequest" -> return deserializePushMessageContentChatJoinByRequest(jsonObject = jsonObject)
            "pushMessageContentChatSetBackground" -> return deserializePushMessageContentChatSetBackground(jsonObject = jsonObject)
            "pushMessageContentChatSetTheme" -> return deserializePushMessageContentChatSetTheme(jsonObject = jsonObject)
            "pushMessageContentChecklist" -> return deserializePushMessageContentChecklist(jsonObject = jsonObject)
            "pushMessageContentChecklistTasksAdded" -> return deserializePushMessageContentChecklistTasksAdded(jsonObject = jsonObject)
            "pushMessageContentChecklistTasksDone" -> return deserializePushMessageContentChecklistTasksDone(jsonObject = jsonObject)
            "pushMessageContentContact" -> return deserializePushMessageContentContact(jsonObject = jsonObject)
            "pushMessageContentContactRegistered" -> return deserializePushMessageContentContactRegistered(jsonObject = jsonObject)
            "pushMessageContentDocument" -> return deserializePushMessageContentDocument(jsonObject = jsonObject)
            "pushMessageContentGame" -> return deserializePushMessageContentGame(jsonObject = jsonObject)
            "pushMessageContentGameScore" -> return deserializePushMessageContentGameScore(jsonObject = jsonObject)
            "pushMessageContentGift" -> return deserializePushMessageContentGift(jsonObject = jsonObject)
            "pushMessageContentGiveaway" -> return deserializePushMessageContentGiveaway(jsonObject = jsonObject)
            "pushMessageContentHidden" -> return deserializePushMessageContentHidden(jsonObject = jsonObject)
            "pushMessageContentInviteVideoChatParticipants" -> return deserializePushMessageContentInviteVideoChatParticipants(jsonObject = jsonObject)
            "pushMessageContentInvoice" -> return deserializePushMessageContentInvoice(jsonObject = jsonObject)
            "pushMessageContentLocation" -> return deserializePushMessageContentLocation(jsonObject = jsonObject)
            "pushMessageContentMediaAlbum" -> return deserializePushMessageContentMediaAlbum(jsonObject = jsonObject)
            "pushMessageContentMessageForwards" -> return deserializePushMessageContentMessageForwards(jsonObject = jsonObject)
            "pushMessageContentPaidMedia" -> return deserializePushMessageContentPaidMedia(jsonObject = jsonObject)
            "pushMessageContentPhoto" -> return deserializePushMessageContentPhoto(jsonObject = jsonObject)
            "pushMessageContentPoll" -> return deserializePushMessageContentPoll(jsonObject = jsonObject)
            "pushMessageContentPremiumGiftCode" -> return deserializePushMessageContentPremiumGiftCode(jsonObject = jsonObject)
            "pushMessageContentProximityAlertTriggered" -> return deserializePushMessageContentProximityAlertTriggered(jsonObject = jsonObject)
            "pushMessageContentRecurringPayment" -> return deserializePushMessageContentRecurringPayment(jsonObject = jsonObject)
            "pushMessageContentScreenshotTaken" -> return deserializePushMessageContentScreenshotTaken(jsonObject = jsonObject)
            "pushMessageContentSticker" -> return deserializePushMessageContentSticker(jsonObject = jsonObject)
            "pushMessageContentStory" -> return deserializePushMessageContentStory(jsonObject = jsonObject)
            "pushMessageContentSuggestProfilePhoto" -> return deserializePushMessageContentSuggestProfilePhoto(jsonObject = jsonObject)
            "pushMessageContentText" -> return deserializePushMessageContentText(jsonObject = jsonObject)
            "pushMessageContentUpgradedGift" -> return deserializePushMessageContentUpgradedGift(jsonObject = jsonObject)
            "pushMessageContentVideo" -> return deserializePushMessageContentVideo(jsonObject = jsonObject)
            "pushMessageContentVideoChatEnded" -> return deserializePushMessageContentVideoChatEnded(jsonObject = jsonObject)
            "pushMessageContentVideoChatStarted" -> return deserializePushMessageContentVideoChatStarted(jsonObject = jsonObject)
            "pushMessageContentVideoNote" -> return deserializePushMessageContentVideoNote(jsonObject = jsonObject)
            "pushMessageContentVoiceNote" -> return deserializePushMessageContentVoiceNote(jsonObject = jsonObject)
            "pushReceiverId" -> return deserializePushReceiverId(jsonObject = jsonObject)
            "quickReplyMessage" -> return deserializeQuickReplyMessage(jsonObject = jsonObject)
            "quickReplyMessages" -> return deserializeQuickReplyMessages(jsonObject = jsonObject)
            "quickReplyShortcut" -> return deserializeQuickReplyShortcut(jsonObject = jsonObject)
            "reactionNotificationSettings" -> return deserializeReactionNotificationSettings(jsonObject = jsonObject)
            "reactionNotificationSourceAll" -> return deserializeReactionNotificationSourceAll(jsonObject = jsonObject)
            "reactionNotificationSourceContacts" -> return deserializeReactionNotificationSourceContacts(jsonObject = jsonObject)
            "reactionNotificationSourceNone" -> return deserializeReactionNotificationSourceNone(jsonObject = jsonObject)
            "reactionTypeCustomEmoji" -> return deserializeReactionTypeCustomEmoji(jsonObject = jsonObject)
            "reactionTypeEmoji" -> return deserializeReactionTypeEmoji(jsonObject = jsonObject)
            "reactionTypePaid" -> return deserializeReactionTypePaid(jsonObject = jsonObject)
            "reactionUnavailabilityReasonAnonymousAdministrator" -> return deserializeReactionUnavailabilityReasonAnonymousAdministrator(jsonObject = jsonObject)
            "reactionUnavailabilityReasonGuest" -> return deserializeReactionUnavailabilityReasonGuest(jsonObject = jsonObject)
            "readDatePrivacySettings" -> return deserializeReadDatePrivacySettings(jsonObject = jsonObject)
            "receivedGift" -> return deserializeReceivedGift(jsonObject = jsonObject)
            "receivedGifts" -> return deserializeReceivedGifts(jsonObject = jsonObject)
            "recommendedChatFolder" -> return deserializeRecommendedChatFolder(jsonObject = jsonObject)
            "recommendedChatFolders" -> return deserializeRecommendedChatFolders(jsonObject = jsonObject)
            "recoveryEmailAddress" -> return deserializeRecoveryEmailAddress(jsonObject = jsonObject)
            "remoteFile" -> return deserializeRemoteFile(jsonObject = jsonObject)
            "replyMarkupForceReply" -> return deserializeReplyMarkupForceReply(jsonObject = jsonObject)
            "replyMarkupInlineKeyboard" -> return deserializeReplyMarkupInlineKeyboard(jsonObject = jsonObject)
            "replyMarkupRemoveKeyboard" -> return deserializeReplyMarkupRemoveKeyboard(jsonObject = jsonObject)
            "replyMarkupShowKeyboard" -> return deserializeReplyMarkupShowKeyboard(jsonObject = jsonObject)
            "reportChatResultMessagesRequired" -> return deserializeReportChatResultMessagesRequired(jsonObject = jsonObject)
            "reportChatResultOk" -> return deserializeReportChatResultOk(jsonObject = jsonObject)
            "reportChatResultOptionRequired" -> return deserializeReportChatResultOptionRequired(jsonObject = jsonObject)
            "reportChatResultTextRequired" -> return deserializeReportChatResultTextRequired(jsonObject = jsonObject)
            "reportOption" -> return deserializeReportOption(jsonObject = jsonObject)
            "reportReasonChildAbuse" -> return deserializeReportReasonChildAbuse(jsonObject = jsonObject)
            "reportReasonCopyright" -> return deserializeReportReasonCopyright(jsonObject = jsonObject)
            "reportReasonCustom" -> return deserializeReportReasonCustom(jsonObject = jsonObject)
            "reportReasonFake" -> return deserializeReportReasonFake(jsonObject = jsonObject)
            "reportReasonIllegalDrugs" -> return deserializeReportReasonIllegalDrugs(jsonObject = jsonObject)
            "reportReasonPersonalDetails" -> return deserializeReportReasonPersonalDetails(jsonObject = jsonObject)
            "reportReasonPornography" -> return deserializeReportReasonPornography(jsonObject = jsonObject)
            "reportReasonSpam" -> return deserializeReportReasonSpam(jsonObject = jsonObject)
            "reportReasonUnrelatedLocation" -> return deserializeReportReasonUnrelatedLocation(jsonObject = jsonObject)
            "reportReasonViolence" -> return deserializeReportReasonViolence(jsonObject = jsonObject)
            "reportSponsoredResultAdsHidden" -> return deserializeReportSponsoredResultAdsHidden(jsonObject = jsonObject)
            "reportSponsoredResultFailed" -> return deserializeReportSponsoredResultFailed(jsonObject = jsonObject)
            "reportSponsoredResultOk" -> return deserializeReportSponsoredResultOk(jsonObject = jsonObject)
            "reportSponsoredResultOptionRequired" -> return deserializeReportSponsoredResultOptionRequired(jsonObject = jsonObject)
            "reportSponsoredResultPremiumRequired" -> return deserializeReportSponsoredResultPremiumRequired(jsonObject = jsonObject)
            "reportStoryResultOk" -> return deserializeReportStoryResultOk(jsonObject = jsonObject)
            "reportStoryResultOptionRequired" -> return deserializeReportStoryResultOptionRequired(jsonObject = jsonObject)
            "reportStoryResultTextRequired" -> return deserializeReportStoryResultTextRequired(jsonObject = jsonObject)
            "resendCodeReasonUserRequest" -> return deserializeResendCodeReasonUserRequest(jsonObject = jsonObject)
            "resendCodeReasonVerificationFailed" -> return deserializeResendCodeReasonVerificationFailed(jsonObject = jsonObject)
            "resetPasswordResultDeclined" -> return deserializeResetPasswordResultDeclined(jsonObject = jsonObject)
            "resetPasswordResultOk" -> return deserializeResetPasswordResultOk(jsonObject = jsonObject)
            "resetPasswordResultPending" -> return deserializeResetPasswordResultPending(jsonObject = jsonObject)
            "revenueWithdrawalStateFailed" -> return deserializeRevenueWithdrawalStateFailed(jsonObject = jsonObject)
            "revenueWithdrawalStatePending" -> return deserializeRevenueWithdrawalStatePending(jsonObject = jsonObject)
            "revenueWithdrawalStateSucceeded" -> return deserializeRevenueWithdrawalStateSucceeded(jsonObject = jsonObject)
            "richTextAnchor" -> return deserializeRichTextAnchor(jsonObject = jsonObject)
            "richTextAnchorLink" -> return deserializeRichTextAnchorLink(jsonObject = jsonObject)
            "richTextBold" -> return deserializeRichTextBold(jsonObject = jsonObject)
            "richTextEmailAddress" -> return deserializeRichTextEmailAddress(jsonObject = jsonObject)
            "richTextFixed" -> return deserializeRichTextFixed(jsonObject = jsonObject)
            "richTextIcon" -> return deserializeRichTextIcon(jsonObject = jsonObject)
            "richTextItalic" -> return deserializeRichTextItalic(jsonObject = jsonObject)
            "richTextMarked" -> return deserializeRichTextMarked(jsonObject = jsonObject)
            "richTextPhoneNumber" -> return deserializeRichTextPhoneNumber(jsonObject = jsonObject)
            "richTextPlain" -> return deserializeRichTextPlain(jsonObject = jsonObject)
            "richTextReference" -> return deserializeRichTextReference(jsonObject = jsonObject)
            "richTextStrikethrough" -> return deserializeRichTextStrikethrough(jsonObject = jsonObject)
            "richTextSubscript" -> return deserializeRichTextSubscript(jsonObject = jsonObject)
            "richTextSuperscript" -> return deserializeRichTextSuperscript(jsonObject = jsonObject)
            "richTextUnderline" -> return deserializeRichTextUnderline(jsonObject = jsonObject)
            "richTextUrl" -> return deserializeRichTextUrl(jsonObject = jsonObject)
            "richTexts" -> return deserializeRichTexts(jsonObject = jsonObject)
            "rtmpUrl" -> return deserializeRtmpUrl(jsonObject = jsonObject)
            "savedCredentials" -> return deserializeSavedCredentials(jsonObject = jsonObject)
            "savedMessagesTag" -> return deserializeSavedMessagesTag(jsonObject = jsonObject)
            "savedMessagesTags" -> return deserializeSavedMessagesTags(jsonObject = jsonObject)
            "savedMessagesTopic" -> return deserializeSavedMessagesTopic(jsonObject = jsonObject)
            "savedMessagesTopicTypeAuthorHidden" -> return deserializeSavedMessagesTopicTypeAuthorHidden(jsonObject = jsonObject)
            "savedMessagesTopicTypeMyNotes" -> return deserializeSavedMessagesTopicTypeMyNotes(jsonObject = jsonObject)
            "savedMessagesTopicTypeSavedFromChat" -> return deserializeSavedMessagesTopicTypeSavedFromChat(jsonObject = jsonObject)
            "scopeAutosaveSettings" -> return deserializeScopeAutosaveSettings(jsonObject = jsonObject)
            "scopeNotificationSettings" -> return deserializeScopeNotificationSettings(jsonObject = jsonObject)
            "searchMessagesChatTypeFilterChannel" -> return deserializeSearchMessagesChatTypeFilterChannel(jsonObject = jsonObject)
            "searchMessagesChatTypeFilterGroup" -> return deserializeSearchMessagesChatTypeFilterGroup(jsonObject = jsonObject)
            "searchMessagesChatTypeFilterPrivate" -> return deserializeSearchMessagesChatTypeFilterPrivate(jsonObject = jsonObject)
            "searchMessagesFilterAnimation" -> return deserializeSearchMessagesFilterAnimation(jsonObject = jsonObject)
            "searchMessagesFilterAudio" -> return deserializeSearchMessagesFilterAudio(jsonObject = jsonObject)
            "searchMessagesFilterChatPhoto" -> return deserializeSearchMessagesFilterChatPhoto(jsonObject = jsonObject)
            "searchMessagesFilterDocument" -> return deserializeSearchMessagesFilterDocument(jsonObject = jsonObject)
            "searchMessagesFilterEmpty" -> return deserializeSearchMessagesFilterEmpty(jsonObject = jsonObject)
            "searchMessagesFilterFailedToSend" -> return deserializeSearchMessagesFilterFailedToSend(jsonObject = jsonObject)
            "searchMessagesFilterMention" -> return deserializeSearchMessagesFilterMention(jsonObject = jsonObject)
            "searchMessagesFilterPhoto" -> return deserializeSearchMessagesFilterPhoto(jsonObject = jsonObject)
            "searchMessagesFilterPhotoAndVideo" -> return deserializeSearchMessagesFilterPhotoAndVideo(jsonObject = jsonObject)
            "searchMessagesFilterPinned" -> return deserializeSearchMessagesFilterPinned(jsonObject = jsonObject)
            "searchMessagesFilterUnreadMention" -> return deserializeSearchMessagesFilterUnreadMention(jsonObject = jsonObject)
            "searchMessagesFilterUnreadReaction" -> return deserializeSearchMessagesFilterUnreadReaction(jsonObject = jsonObject)
            "searchMessagesFilterUrl" -> return deserializeSearchMessagesFilterUrl(jsonObject = jsonObject)
            "searchMessagesFilterVideo" -> return deserializeSearchMessagesFilterVideo(jsonObject = jsonObject)
            "searchMessagesFilterVideoNote" -> return deserializeSearchMessagesFilterVideoNote(jsonObject = jsonObject)
            "searchMessagesFilterVoiceAndVideoNote" -> return deserializeSearchMessagesFilterVoiceAndVideoNote(jsonObject = jsonObject)
            "searchMessagesFilterVoiceNote" -> return deserializeSearchMessagesFilterVoiceNote(jsonObject = jsonObject)
            "seconds" -> return deserializeSeconds(jsonObject = jsonObject)
            "secretChat" -> return deserializeSecretChat(jsonObject = jsonObject)
            "secretChatStateClosed" -> return deserializeSecretChatStateClosed(jsonObject = jsonObject)
            "secretChatStatePending" -> return deserializeSecretChatStatePending(jsonObject = jsonObject)
            "secretChatStateReady" -> return deserializeSecretChatStateReady(jsonObject = jsonObject)
            "sentGiftRegular" -> return deserializeSentGiftRegular(jsonObject = jsonObject)
            "sentGiftUpgraded" -> return deserializeSentGiftUpgraded(jsonObject = jsonObject)
            "sentWebAppMessage" -> return deserializeSentWebAppMessage(jsonObject = jsonObject)
            "session" -> return deserializeSession(jsonObject = jsonObject)
            "sessionTypeAndroid" -> return deserializeSessionTypeAndroid(jsonObject = jsonObject)
            "sessionTypeApple" -> return deserializeSessionTypeApple(jsonObject = jsonObject)
            "sessionTypeBrave" -> return deserializeSessionTypeBrave(jsonObject = jsonObject)
            "sessionTypeChrome" -> return deserializeSessionTypeChrome(jsonObject = jsonObject)
            "sessionTypeEdge" -> return deserializeSessionTypeEdge(jsonObject = jsonObject)
            "sessionTypeFirefox" -> return deserializeSessionTypeFirefox(jsonObject = jsonObject)
            "sessionTypeIpad" -> return deserializeSessionTypeIpad(jsonObject = jsonObject)
            "sessionTypeIphone" -> return deserializeSessionTypeIphone(jsonObject = jsonObject)
            "sessionTypeLinux" -> return deserializeSessionTypeLinux(jsonObject = jsonObject)
            "sessionTypeMac" -> return deserializeSessionTypeMac(jsonObject = jsonObject)
            "sessionTypeOpera" -> return deserializeSessionTypeOpera(jsonObject = jsonObject)
            "sessionTypeSafari" -> return deserializeSessionTypeSafari(jsonObject = jsonObject)
            "sessionTypeUbuntu" -> return deserializeSessionTypeUbuntu(jsonObject = jsonObject)
            "sessionTypeUnknown" -> return deserializeSessionTypeUnknown(jsonObject = jsonObject)
            "sessionTypeVivaldi" -> return deserializeSessionTypeVivaldi(jsonObject = jsonObject)
            "sessionTypeWindows" -> return deserializeSessionTypeWindows(jsonObject = jsonObject)
            "sessionTypeXbox" -> return deserializeSessionTypeXbox(jsonObject = jsonObject)
            "sessions" -> return deserializeSessions(jsonObject = jsonObject)
            "sharedChat" -> return deserializeSharedChat(jsonObject = jsonObject)
            "sharedUser" -> return deserializeSharedUser(jsonObject = jsonObject)
            "shippingOption" -> return deserializeShippingOption(jsonObject = jsonObject)
            "speechRecognitionResultError" -> return deserializeSpeechRecognitionResultError(jsonObject = jsonObject)
            "speechRecognitionResultPending" -> return deserializeSpeechRecognitionResultPending(jsonObject = jsonObject)
            "speechRecognitionResultText" -> return deserializeSpeechRecognitionResultText(jsonObject = jsonObject)
            "sponsoredChat" -> return deserializeSponsoredChat(jsonObject = jsonObject)
            "sponsoredChats" -> return deserializeSponsoredChats(jsonObject = jsonObject)
            "sponsoredMessage" -> return deserializeSponsoredMessage(jsonObject = jsonObject)
            "sponsoredMessages" -> return deserializeSponsoredMessages(jsonObject = jsonObject)
            "starAmount" -> return deserializeStarAmount(jsonObject = jsonObject)
            "starCount" -> return deserializeStarCount(jsonObject = jsonObject)
            "starGiveawayPaymentOption" -> return deserializeStarGiveawayPaymentOption(jsonObject = jsonObject)
            "starGiveawayPaymentOptions" -> return deserializeStarGiveawayPaymentOptions(jsonObject = jsonObject)
            "starGiveawayWinnerOption" -> return deserializeStarGiveawayWinnerOption(jsonObject = jsonObject)
            "starPaymentOption" -> return deserializeStarPaymentOption(jsonObject = jsonObject)
            "starPaymentOptions" -> return deserializeStarPaymentOptions(jsonObject = jsonObject)
            "starRevenueStatistics" -> return deserializeStarRevenueStatistics(jsonObject = jsonObject)
            "starRevenueStatus" -> return deserializeStarRevenueStatus(jsonObject = jsonObject)
            "starSubscription" -> return deserializeStarSubscription(jsonObject = jsonObject)
            "starSubscriptionPricing" -> return deserializeStarSubscriptionPricing(jsonObject = jsonObject)
            "starSubscriptionTypeBot" -> return deserializeStarSubscriptionTypeBot(jsonObject = jsonObject)
            "starSubscriptionTypeChannel" -> return deserializeStarSubscriptionTypeChannel(jsonObject = jsonObject)
            "starSubscriptions" -> return deserializeStarSubscriptions(jsonObject = jsonObject)
            "starTransaction" -> return deserializeStarTransaction(jsonObject = jsonObject)
            "starTransactionDirectionIncoming" -> return deserializeStarTransactionDirectionIncoming(jsonObject = jsonObject)
            "starTransactionDirectionOutgoing" -> return deserializeStarTransactionDirectionOutgoing(jsonObject = jsonObject)
            "starTransactionTypeAffiliateProgramCommission" -> return deserializeStarTransactionTypeAffiliateProgramCommission(jsonObject = jsonObject)
            "starTransactionTypeAppStoreDeposit" -> return deserializeStarTransactionTypeAppStoreDeposit(jsonObject = jsonObject)
            "starTransactionTypeBotInvoicePurchase" -> return deserializeStarTransactionTypeBotInvoicePurchase(jsonObject = jsonObject)
            "starTransactionTypeBotInvoiceSale" -> return deserializeStarTransactionTypeBotInvoiceSale(jsonObject = jsonObject)
            "starTransactionTypeBotPaidMediaPurchase" -> return deserializeStarTransactionTypeBotPaidMediaPurchase(jsonObject = jsonObject)
            "starTransactionTypeBotPaidMediaSale" -> return deserializeStarTransactionTypeBotPaidMediaSale(jsonObject = jsonObject)
            "starTransactionTypeBotSubscriptionPurchase" -> return deserializeStarTransactionTypeBotSubscriptionPurchase(jsonObject = jsonObject)
            "starTransactionTypeBotSubscriptionSale" -> return deserializeStarTransactionTypeBotSubscriptionSale(jsonObject = jsonObject)
            "starTransactionTypeBusinessBotTransferReceive" -> return deserializeStarTransactionTypeBusinessBotTransferReceive(jsonObject = jsonObject)
            "starTransactionTypeBusinessBotTransferSend" -> return deserializeStarTransactionTypeBusinessBotTransferSend(jsonObject = jsonObject)
            "starTransactionTypeChannelPaidMediaPurchase" -> return deserializeStarTransactionTypeChannelPaidMediaPurchase(jsonObject = jsonObject)
            "starTransactionTypeChannelPaidMediaSale" -> return deserializeStarTransactionTypeChannelPaidMediaSale(jsonObject = jsonObject)
            "starTransactionTypeChannelPaidReactionReceive" -> return deserializeStarTransactionTypeChannelPaidReactionReceive(jsonObject = jsonObject)
            "starTransactionTypeChannelPaidReactionSend" -> return deserializeStarTransactionTypeChannelPaidReactionSend(jsonObject = jsonObject)
            "starTransactionTypeChannelSubscriptionPurchase" -> return deserializeStarTransactionTypeChannelSubscriptionPurchase(jsonObject = jsonObject)
            "starTransactionTypeChannelSubscriptionSale" -> return deserializeStarTransactionTypeChannelSubscriptionSale(jsonObject = jsonObject)
            "starTransactionTypeFragmentDeposit" -> return deserializeStarTransactionTypeFragmentDeposit(jsonObject = jsonObject)
            "starTransactionTypeFragmentWithdrawal" -> return deserializeStarTransactionTypeFragmentWithdrawal(jsonObject = jsonObject)
            "starTransactionTypeGiftPurchase" -> return deserializeStarTransactionTypeGiftPurchase(jsonObject = jsonObject)
            "starTransactionTypeGiftSale" -> return deserializeStarTransactionTypeGiftSale(jsonObject = jsonObject)
            "starTransactionTypeGiftTransfer" -> return deserializeStarTransactionTypeGiftTransfer(jsonObject = jsonObject)
            "starTransactionTypeGiftUpgrade" -> return deserializeStarTransactionTypeGiftUpgrade(jsonObject = jsonObject)
            "starTransactionTypeGiveawayDeposit" -> return deserializeStarTransactionTypeGiveawayDeposit(jsonObject = jsonObject)
            "starTransactionTypeGooglePlayDeposit" -> return deserializeStarTransactionTypeGooglePlayDeposit(jsonObject = jsonObject)
            "starTransactionTypePaidMessageReceive" -> return deserializeStarTransactionTypePaidMessageReceive(jsonObject = jsonObject)
            "starTransactionTypePaidMessageSend" -> return deserializeStarTransactionTypePaidMessageSend(jsonObject = jsonObject)
            "starTransactionTypePremiumBotDeposit" -> return deserializeStarTransactionTypePremiumBotDeposit(jsonObject = jsonObject)
            "starTransactionTypePremiumPurchase" -> return deserializeStarTransactionTypePremiumPurchase(jsonObject = jsonObject)
            "starTransactionTypeTelegramAdsWithdrawal" -> return deserializeStarTransactionTypeTelegramAdsWithdrawal(jsonObject = jsonObject)
            "starTransactionTypeTelegramApiUsage" -> return deserializeStarTransactionTypeTelegramApiUsage(jsonObject = jsonObject)
            "starTransactionTypeUnsupported" -> return deserializeStarTransactionTypeUnsupported(jsonObject = jsonObject)
            "starTransactionTypeUpgradedGiftPurchase" -> return deserializeStarTransactionTypeUpgradedGiftPurchase(jsonObject = jsonObject)
            "starTransactionTypeUpgradedGiftSale" -> return deserializeStarTransactionTypeUpgradedGiftSale(jsonObject = jsonObject)
            "starTransactionTypeUserDeposit" -> return deserializeStarTransactionTypeUserDeposit(jsonObject = jsonObject)
            "starTransactions" -> return deserializeStarTransactions(jsonObject = jsonObject)
            "statisticalGraphAsync" -> return deserializeStatisticalGraphAsync(jsonObject = jsonObject)
            "statisticalGraphData" -> return deserializeStatisticalGraphData(jsonObject = jsonObject)
            "statisticalGraphError" -> return deserializeStatisticalGraphError(jsonObject = jsonObject)
            "statisticalValue" -> return deserializeStatisticalValue(jsonObject = jsonObject)
            "sticker" -> return deserializeSticker(jsonObject = jsonObject)
            "stickerFormatTgs" -> return deserializeStickerFormatTgs(jsonObject = jsonObject)
            "stickerFormatWebm" -> return deserializeStickerFormatWebm(jsonObject = jsonObject)
            "stickerFormatWebp" -> return deserializeStickerFormatWebp(jsonObject = jsonObject)
            "stickerFullTypeCustomEmoji" -> return deserializeStickerFullTypeCustomEmoji(jsonObject = jsonObject)
            "stickerFullTypeMask" -> return deserializeStickerFullTypeMask(jsonObject = jsonObject)
            "stickerFullTypeRegular" -> return deserializeStickerFullTypeRegular(jsonObject = jsonObject)
            "stickerSet" -> return deserializeStickerSet(jsonObject = jsonObject)
            "stickerSetInfo" -> return deserializeStickerSetInfo(jsonObject = jsonObject)
            "stickerSets" -> return deserializeStickerSets(jsonObject = jsonObject)
            "stickerTypeCustomEmoji" -> return deserializeStickerTypeCustomEmoji(jsonObject = jsonObject)
            "stickerTypeMask" -> return deserializeStickerTypeMask(jsonObject = jsonObject)
            "stickerTypeRegular" -> return deserializeStickerTypeRegular(jsonObject = jsonObject)
            "stickers" -> return deserializeStickers(jsonObject = jsonObject)
            "storageStatistics" -> return deserializeStorageStatistics(jsonObject = jsonObject)
            "storageStatisticsByChat" -> return deserializeStorageStatisticsByChat(jsonObject = jsonObject)
            "storageStatisticsByFileType" -> return deserializeStorageStatisticsByFileType(jsonObject = jsonObject)
            "storageStatisticsFast" -> return deserializeStorageStatisticsFast(jsonObject = jsonObject)
            "storePaymentPurposeGiftedStars" -> return deserializeStorePaymentPurposeGiftedStars(jsonObject = jsonObject)
            "storePaymentPurposePremiumGift" -> return deserializeStorePaymentPurposePremiumGift(jsonObject = jsonObject)
            "storePaymentPurposePremiumGiftCodes" -> return deserializeStorePaymentPurposePremiumGiftCodes(jsonObject = jsonObject)
            "storePaymentPurposePremiumGiveaway" -> return deserializeStorePaymentPurposePremiumGiveaway(jsonObject = jsonObject)
            "storePaymentPurposePremiumSubscription" -> return deserializeStorePaymentPurposePremiumSubscription(jsonObject = jsonObject)
            "storePaymentPurposeStarGiveaway" -> return deserializeStorePaymentPurposeStarGiveaway(jsonObject = jsonObject)
            "storePaymentPurposeStars" -> return deserializeStorePaymentPurposeStars(jsonObject = jsonObject)
            "storeTransactionAppStore" -> return deserializeStoreTransactionAppStore(jsonObject = jsonObject)
            "storeTransactionGooglePlay" -> return deserializeStoreTransactionGooglePlay(jsonObject = jsonObject)
            "stories" -> return deserializeStories(jsonObject = jsonObject)
            "story" -> return deserializeStory(jsonObject = jsonObject)
            "storyArea" -> return deserializeStoryArea(jsonObject = jsonObject)
            "storyAreaPosition" -> return deserializeStoryAreaPosition(jsonObject = jsonObject)
            "storyAreaTypeLink" -> return deserializeStoryAreaTypeLink(jsonObject = jsonObject)
            "storyAreaTypeLocation" -> return deserializeStoryAreaTypeLocation(jsonObject = jsonObject)
            "storyAreaTypeMessage" -> return deserializeStoryAreaTypeMessage(jsonObject = jsonObject)
            "storyAreaTypeSuggestedReaction" -> return deserializeStoryAreaTypeSuggestedReaction(jsonObject = jsonObject)
            "storyAreaTypeUpgradedGift" -> return deserializeStoryAreaTypeUpgradedGift(jsonObject = jsonObject)
            "storyAreaTypeVenue" -> return deserializeStoryAreaTypeVenue(jsonObject = jsonObject)
            "storyAreaTypeWeather" -> return deserializeStoryAreaTypeWeather(jsonObject = jsonObject)
            "storyContentPhoto" -> return deserializeStoryContentPhoto(jsonObject = jsonObject)
            "storyContentUnsupported" -> return deserializeStoryContentUnsupported(jsonObject = jsonObject)
            "storyContentVideo" -> return deserializeStoryContentVideo(jsonObject = jsonObject)
            "storyFullId" -> return deserializeStoryFullId(jsonObject = jsonObject)
            "storyInfo" -> return deserializeStoryInfo(jsonObject = jsonObject)
            "storyInteraction" -> return deserializeStoryInteraction(jsonObject = jsonObject)
            "storyInteractionInfo" -> return deserializeStoryInteractionInfo(jsonObject = jsonObject)
            "storyInteractionTypeForward" -> return deserializeStoryInteractionTypeForward(jsonObject = jsonObject)
            "storyInteractionTypeRepost" -> return deserializeStoryInteractionTypeRepost(jsonObject = jsonObject)
            "storyInteractionTypeView" -> return deserializeStoryInteractionTypeView(jsonObject = jsonObject)
            "storyInteractions" -> return deserializeStoryInteractions(jsonObject = jsonObject)
            "storyListArchive" -> return deserializeStoryListArchive(jsonObject = jsonObject)
            "storyListMain" -> return deserializeStoryListMain(jsonObject = jsonObject)
            "storyOriginHiddenUser" -> return deserializeStoryOriginHiddenUser(jsonObject = jsonObject)
            "storyOriginPublicStory" -> return deserializeStoryOriginPublicStory(jsonObject = jsonObject)
            "storyPrivacySettingsCloseFriends" -> return deserializeStoryPrivacySettingsCloseFriends(jsonObject = jsonObject)
            "storyPrivacySettingsContacts" -> return deserializeStoryPrivacySettingsContacts(jsonObject = jsonObject)
            "storyPrivacySettingsEveryone" -> return deserializeStoryPrivacySettingsEveryone(jsonObject = jsonObject)
            "storyPrivacySettingsSelectedUsers" -> return deserializeStoryPrivacySettingsSelectedUsers(jsonObject = jsonObject)
            "storyRepostInfo" -> return deserializeStoryRepostInfo(jsonObject = jsonObject)
            "storyStatistics" -> return deserializeStoryStatistics(jsonObject = jsonObject)
            "storyVideo" -> return deserializeStoryVideo(jsonObject = jsonObject)
            "suggestedActionCheckPassword" -> return deserializeSuggestedActionCheckPassword(jsonObject = jsonObject)
            "suggestedActionCheckPhoneNumber" -> return deserializeSuggestedActionCheckPhoneNumber(jsonObject = jsonObject)
            "suggestedActionConvertToBroadcastGroup" -> return deserializeSuggestedActionConvertToBroadcastGroup(jsonObject = jsonObject)
            "suggestedActionCustom" -> return deserializeSuggestedActionCustom(jsonObject = jsonObject)
            "suggestedActionEnableArchiveAndMuteNewChats" -> return deserializeSuggestedActionEnableArchiveAndMuteNewChats(jsonObject = jsonObject)
            "suggestedActionExtendPremium" -> return deserializeSuggestedActionExtendPremium(jsonObject = jsonObject)
            "suggestedActionExtendStarSubscriptions" -> return deserializeSuggestedActionExtendStarSubscriptions(jsonObject = jsonObject)
            "suggestedActionGiftPremiumForChristmas" -> return deserializeSuggestedActionGiftPremiumForChristmas(jsonObject = jsonObject)
            "suggestedActionRestorePremium" -> return deserializeSuggestedActionRestorePremium(jsonObject = jsonObject)
            "suggestedActionSetBirthdate" -> return deserializeSuggestedActionSetBirthdate(jsonObject = jsonObject)
            "suggestedActionSetPassword" -> return deserializeSuggestedActionSetPassword(jsonObject = jsonObject)
            "suggestedActionSetProfilePhoto" -> return deserializeSuggestedActionSetProfilePhoto(jsonObject = jsonObject)
            "suggestedActionSubscribeToAnnualPremium" -> return deserializeSuggestedActionSubscribeToAnnualPremium(jsonObject = jsonObject)
            "suggestedActionUpgradePremium" -> return deserializeSuggestedActionUpgradePremium(jsonObject = jsonObject)
            "suggestedActionViewChecksHint" -> return deserializeSuggestedActionViewChecksHint(jsonObject = jsonObject)
            "supergroup" -> return deserializeSupergroup(jsonObject = jsonObject)
            "supergroupFullInfo" -> return deserializeSupergroupFullInfo(jsonObject = jsonObject)
            "supergroupMembersFilterAdministrators" -> return deserializeSupergroupMembersFilterAdministrators(jsonObject = jsonObject)
            "supergroupMembersFilterBanned" -> return deserializeSupergroupMembersFilterBanned(jsonObject = jsonObject)
            "supergroupMembersFilterBots" -> return deserializeSupergroupMembersFilterBots(jsonObject = jsonObject)
            "supergroupMembersFilterContacts" -> return deserializeSupergroupMembersFilterContacts(jsonObject = jsonObject)
            "supergroupMembersFilterMention" -> return deserializeSupergroupMembersFilterMention(jsonObject = jsonObject)
            "supergroupMembersFilterRecent" -> return deserializeSupergroupMembersFilterRecent(jsonObject = jsonObject)
            "supergroupMembersFilterRestricted" -> return deserializeSupergroupMembersFilterRestricted(jsonObject = jsonObject)
            "supergroupMembersFilterSearch" -> return deserializeSupergroupMembersFilterSearch(jsonObject = jsonObject)
            "tMeUrl" -> return deserializeTMeUrl(jsonObject = jsonObject)
            "tMeUrlTypeChatInvite" -> return deserializeTMeUrlTypeChatInvite(jsonObject = jsonObject)
            "tMeUrlTypeStickerSet" -> return deserializeTMeUrlTypeStickerSet(jsonObject = jsonObject)
            "tMeUrlTypeSupergroup" -> return deserializeTMeUrlTypeSupergroup(jsonObject = jsonObject)
            "tMeUrlTypeUser" -> return deserializeTMeUrlTypeUser(jsonObject = jsonObject)
            "tMeUrls" -> return deserializeTMeUrls(jsonObject = jsonObject)
            "targetChatChosen" -> return deserializeTargetChatChosen(jsonObject = jsonObject)
            "targetChatCurrent" -> return deserializeTargetChatCurrent(jsonObject = jsonObject)
            "targetChatInternalLink" -> return deserializeTargetChatInternalLink(jsonObject = jsonObject)
            "targetChatTypes" -> return deserializeTargetChatTypes(jsonObject = jsonObject)
            "telegramPaymentPurposeGiftedStars" -> return deserializeTelegramPaymentPurposeGiftedStars(jsonObject = jsonObject)
            "telegramPaymentPurposeJoinChat" -> return deserializeTelegramPaymentPurposeJoinChat(jsonObject = jsonObject)
            "telegramPaymentPurposePremiumGift" -> return deserializeTelegramPaymentPurposePremiumGift(jsonObject = jsonObject)
            "telegramPaymentPurposePremiumGiftCodes" -> return deserializeTelegramPaymentPurposePremiumGiftCodes(jsonObject = jsonObject)
            "telegramPaymentPurposePremiumGiveaway" -> return deserializeTelegramPaymentPurposePremiumGiveaway(jsonObject = jsonObject)
            "telegramPaymentPurposeStarGiveaway" -> return deserializeTelegramPaymentPurposeStarGiveaway(jsonObject = jsonObject)
            "telegramPaymentPurposeStars" -> return deserializeTelegramPaymentPurposeStars(jsonObject = jsonObject)
            "temporaryPasswordState" -> return deserializeTemporaryPasswordState(jsonObject = jsonObject)
            "termsOfService" -> return deserializeTermsOfService(jsonObject = jsonObject)
            "testBytes" -> return deserializeTestBytes(jsonObject = jsonObject)
            "testInt" -> return deserializeTestInt(jsonObject = jsonObject)
            "testString" -> return deserializeTestString(jsonObject = jsonObject)
            "testVectorInt" -> return deserializeTestVectorInt(jsonObject = jsonObject)
            "testVectorIntObject" -> return deserializeTestVectorIntObject(jsonObject = jsonObject)
            "testVectorString" -> return deserializeTestVectorString(jsonObject = jsonObject)
            "testVectorStringObject" -> return deserializeTestVectorStringObject(jsonObject = jsonObject)
            "text" -> return deserializeText(jsonObject = jsonObject)
            "textEntities" -> return deserializeTextEntities(jsonObject = jsonObject)
            "textEntity" -> return deserializeTextEntity(jsonObject = jsonObject)
            "textEntityTypeBankCardNumber" -> return deserializeTextEntityTypeBankCardNumber(jsonObject = jsonObject)
            "textEntityTypeBlockQuote" -> return deserializeTextEntityTypeBlockQuote(jsonObject = jsonObject)
            "textEntityTypeBold" -> return deserializeTextEntityTypeBold(jsonObject = jsonObject)
            "textEntityTypeBotCommand" -> return deserializeTextEntityTypeBotCommand(jsonObject = jsonObject)
            "textEntityTypeCashtag" -> return deserializeTextEntityTypeCashtag(jsonObject = jsonObject)
            "textEntityTypeCode" -> return deserializeTextEntityTypeCode(jsonObject = jsonObject)
            "textEntityTypeCustomEmoji" -> return deserializeTextEntityTypeCustomEmoji(jsonObject = jsonObject)
            "textEntityTypeEmailAddress" -> return deserializeTextEntityTypeEmailAddress(jsonObject = jsonObject)
            "textEntityTypeExpandableBlockQuote" -> return deserializeTextEntityTypeExpandableBlockQuote(jsonObject = jsonObject)
            "textEntityTypeHashtag" -> return deserializeTextEntityTypeHashtag(jsonObject = jsonObject)
            "textEntityTypeItalic" -> return deserializeTextEntityTypeItalic(jsonObject = jsonObject)
            "textEntityTypeMediaTimestamp" -> return deserializeTextEntityTypeMediaTimestamp(jsonObject = jsonObject)
            "textEntityTypeMention" -> return deserializeTextEntityTypeMention(jsonObject = jsonObject)
            "textEntityTypeMentionName" -> return deserializeTextEntityTypeMentionName(jsonObject = jsonObject)
            "textEntityTypePhoneNumber" -> return deserializeTextEntityTypePhoneNumber(jsonObject = jsonObject)
            "textEntityTypePre" -> return deserializeTextEntityTypePre(jsonObject = jsonObject)
            "textEntityTypePreCode" -> return deserializeTextEntityTypePreCode(jsonObject = jsonObject)
            "textEntityTypeSpoiler" -> return deserializeTextEntityTypeSpoiler(jsonObject = jsonObject)
            "textEntityTypeStrikethrough" -> return deserializeTextEntityTypeStrikethrough(jsonObject = jsonObject)
            "textEntityTypeTextUrl" -> return deserializeTextEntityTypeTextUrl(jsonObject = jsonObject)
            "textEntityTypeUnderline" -> return deserializeTextEntityTypeUnderline(jsonObject = jsonObject)
            "textEntityTypeUrl" -> return deserializeTextEntityTypeUrl(jsonObject = jsonObject)
            "textParseModeHTML" -> return deserializeTextParseModeHTML(jsonObject = jsonObject)
            "textParseModeMarkdown" -> return deserializeTextParseModeMarkdown(jsonObject = jsonObject)
            "textQuote" -> return deserializeTextQuote(jsonObject = jsonObject)
            "themeParameters" -> return deserializeThemeParameters(jsonObject = jsonObject)
            "themeSettings" -> return deserializeThemeSettings(jsonObject = jsonObject)
            "thumbnail" -> return deserializeThumbnail(jsonObject = jsonObject)
            "thumbnailFormatGif" -> return deserializeThumbnailFormatGif(jsonObject = jsonObject)
            "thumbnailFormatJpeg" -> return deserializeThumbnailFormatJpeg(jsonObject = jsonObject)
            "thumbnailFormatMpeg4" -> return deserializeThumbnailFormatMpeg4(jsonObject = jsonObject)
            "thumbnailFormatPng" -> return deserializeThumbnailFormatPng(jsonObject = jsonObject)
            "thumbnailFormatTgs" -> return deserializeThumbnailFormatTgs(jsonObject = jsonObject)
            "thumbnailFormatWebm" -> return deserializeThumbnailFormatWebm(jsonObject = jsonObject)
            "thumbnailFormatWebp" -> return deserializeThumbnailFormatWebp(jsonObject = jsonObject)
            "timeZone" -> return deserializeTimeZone(jsonObject = jsonObject)
            "timeZones" -> return deserializeTimeZones(jsonObject = jsonObject)
            "topChatCategoryBots" -> return deserializeTopChatCategoryBots(jsonObject = jsonObject)
            "topChatCategoryCalls" -> return deserializeTopChatCategoryCalls(jsonObject = jsonObject)
            "topChatCategoryChannels" -> return deserializeTopChatCategoryChannels(jsonObject = jsonObject)
            "topChatCategoryForwardChats" -> return deserializeTopChatCategoryForwardChats(jsonObject = jsonObject)
            "topChatCategoryGroups" -> return deserializeTopChatCategoryGroups(jsonObject = jsonObject)
            "topChatCategoryInlineBots" -> return deserializeTopChatCategoryInlineBots(jsonObject = jsonObject)
            "topChatCategoryUsers" -> return deserializeTopChatCategoryUsers(jsonObject = jsonObject)
            "topChatCategoryWebAppBots" -> return deserializeTopChatCategoryWebAppBots(jsonObject = jsonObject)
            "trendingStickerSets" -> return deserializeTrendingStickerSets(jsonObject = jsonObject)
            "unconfirmedSession" -> return deserializeUnconfirmedSession(jsonObject = jsonObject)
            "unreadReaction" -> return deserializeUnreadReaction(jsonObject = jsonObject)
            "updateAccentColors" -> return deserializeUpdateAccentColors(jsonObject = jsonObject)
            "updateActiveEmojiReactions" -> return deserializeUpdateActiveEmojiReactions(jsonObject = jsonObject)
            "updateActiveLiveLocationMessages" -> return deserializeUpdateActiveLiveLocationMessages(jsonObject = jsonObject)
            "updateActiveNotifications" -> return deserializeUpdateActiveNotifications(jsonObject = jsonObject)
            "updateAnimatedEmojiMessageClicked" -> return deserializeUpdateAnimatedEmojiMessageClicked(jsonObject = jsonObject)
            "updateAnimationSearchParameters" -> return deserializeUpdateAnimationSearchParameters(jsonObject = jsonObject)
            "updateApplicationRecaptchaVerificationRequired" -> return deserializeUpdateApplicationRecaptchaVerificationRequired(jsonObject = jsonObject)
            "updateApplicationVerificationRequired" -> return deserializeUpdateApplicationVerificationRequired(jsonObject = jsonObject)
            "updateAttachmentMenuBots" -> return deserializeUpdateAttachmentMenuBots(jsonObject = jsonObject)
            "updateAuthorizationState" -> return deserializeUpdateAuthorizationState(jsonObject = jsonObject)
            "updateAutosaveSettings" -> return deserializeUpdateAutosaveSettings(jsonObject = jsonObject)
            "updateAvailableMessageEffects" -> return deserializeUpdateAvailableMessageEffects(jsonObject = jsonObject)
            "updateBasicGroup" -> return deserializeUpdateBasicGroup(jsonObject = jsonObject)
            "updateBasicGroupFullInfo" -> return deserializeUpdateBasicGroupFullInfo(jsonObject = jsonObject)
            "updateBusinessConnection" -> return deserializeUpdateBusinessConnection(jsonObject = jsonObject)
            "updateBusinessMessageEdited" -> return deserializeUpdateBusinessMessageEdited(jsonObject = jsonObject)
            "updateBusinessMessagesDeleted" -> return deserializeUpdateBusinessMessagesDeleted(jsonObject = jsonObject)
            "updateCall" -> return deserializeUpdateCall(jsonObject = jsonObject)
            "updateChatAccentColors" -> return deserializeUpdateChatAccentColors(jsonObject = jsonObject)
            "updateChatAction" -> return deserializeUpdateChatAction(jsonObject = jsonObject)
            "updateChatActionBar" -> return deserializeUpdateChatActionBar(jsonObject = jsonObject)
            "updateChatActiveStories" -> return deserializeUpdateChatActiveStories(jsonObject = jsonObject)
            "updateChatAddedToList" -> return deserializeUpdateChatAddedToList(jsonObject = jsonObject)
            "updateChatAvailableReactions" -> return deserializeUpdateChatAvailableReactions(jsonObject = jsonObject)
            "updateChatBackground" -> return deserializeUpdateChatBackground(jsonObject = jsonObject)
            "updateChatBlockList" -> return deserializeUpdateChatBlockList(jsonObject = jsonObject)
            "updateChatBoost" -> return deserializeUpdateChatBoost(jsonObject = jsonObject)
            "updateChatBusinessBotManageBar" -> return deserializeUpdateChatBusinessBotManageBar(jsonObject = jsonObject)
            "updateChatDefaultDisableNotification" -> return deserializeUpdateChatDefaultDisableNotification(jsonObject = jsonObject)
            "updateChatDraftMessage" -> return deserializeUpdateChatDraftMessage(jsonObject = jsonObject)
            "updateChatEmojiStatus" -> return deserializeUpdateChatEmojiStatus(jsonObject = jsonObject)
            "updateChatFolders" -> return deserializeUpdateChatFolders(jsonObject = jsonObject)
            "updateChatHasProtectedContent" -> return deserializeUpdateChatHasProtectedContent(jsonObject = jsonObject)
            "updateChatHasScheduledMessages" -> return deserializeUpdateChatHasScheduledMessages(jsonObject = jsonObject)
            "updateChatIsMarkedAsUnread" -> return deserializeUpdateChatIsMarkedAsUnread(jsonObject = jsonObject)
            "updateChatIsTranslatable" -> return deserializeUpdateChatIsTranslatable(jsonObject = jsonObject)
            "updateChatLastMessage" -> return deserializeUpdateChatLastMessage(jsonObject = jsonObject)
            "updateChatMember" -> return deserializeUpdateChatMember(jsonObject = jsonObject)
            "updateChatMessageAutoDeleteTime" -> return deserializeUpdateChatMessageAutoDeleteTime(jsonObject = jsonObject)
            "updateChatMessageSender" -> return deserializeUpdateChatMessageSender(jsonObject = jsonObject)
            "updateChatNotificationSettings" -> return deserializeUpdateChatNotificationSettings(jsonObject = jsonObject)
            "updateChatOnlineMemberCount" -> return deserializeUpdateChatOnlineMemberCount(jsonObject = jsonObject)
            "updateChatPendingJoinRequests" -> return deserializeUpdateChatPendingJoinRequests(jsonObject = jsonObject)
            "updateChatPermissions" -> return deserializeUpdateChatPermissions(jsonObject = jsonObject)
            "updateChatPhoto" -> return deserializeUpdateChatPhoto(jsonObject = jsonObject)
            "updateChatPosition" -> return deserializeUpdateChatPosition(jsonObject = jsonObject)
            "updateChatReadInbox" -> return deserializeUpdateChatReadInbox(jsonObject = jsonObject)
            "updateChatReadOutbox" -> return deserializeUpdateChatReadOutbox(jsonObject = jsonObject)
            "updateChatRemovedFromList" -> return deserializeUpdateChatRemovedFromList(jsonObject = jsonObject)
            "updateChatReplyMarkup" -> return deserializeUpdateChatReplyMarkup(jsonObject = jsonObject)
            "updateChatRevenueAmount" -> return deserializeUpdateChatRevenueAmount(jsonObject = jsonObject)
            "updateChatTheme" -> return deserializeUpdateChatTheme(jsonObject = jsonObject)
            "updateChatThemes" -> return deserializeUpdateChatThemes(jsonObject = jsonObject)
            "updateChatTitle" -> return deserializeUpdateChatTitle(jsonObject = jsonObject)
            "updateChatUnreadMentionCount" -> return deserializeUpdateChatUnreadMentionCount(jsonObject = jsonObject)
            "updateChatUnreadReactionCount" -> return deserializeUpdateChatUnreadReactionCount(jsonObject = jsonObject)
            "updateChatVideoChat" -> return deserializeUpdateChatVideoChat(jsonObject = jsonObject)
            "updateChatViewAsTopics" -> return deserializeUpdateChatViewAsTopics(jsonObject = jsonObject)
            "updateConnectionState" -> return deserializeUpdateConnectionState(jsonObject = jsonObject)
            "updateContactCloseBirthdays" -> return deserializeUpdateContactCloseBirthdays(jsonObject = jsonObject)
            "updateDefaultBackground" -> return deserializeUpdateDefaultBackground(jsonObject = jsonObject)
            "updateDefaultPaidReactionType" -> return deserializeUpdateDefaultPaidReactionType(jsonObject = jsonObject)
            "updateDefaultReactionType" -> return deserializeUpdateDefaultReactionType(jsonObject = jsonObject)
            "updateDeleteMessages" -> return deserializeUpdateDeleteMessages(jsonObject = jsonObject)
            "updateDiceEmojis" -> return deserializeUpdateDiceEmojis(jsonObject = jsonObject)
            "updateDirectMessagesChatTopic" -> return deserializeUpdateDirectMessagesChatTopic(jsonObject = jsonObject)
            "updateFavoriteStickers" -> return deserializeUpdateFavoriteStickers(jsonObject = jsonObject)
            "updateFile" -> return deserializeUpdateFile(jsonObject = jsonObject)
            "updateFileAddedToDownloads" -> return deserializeUpdateFileAddedToDownloads(jsonObject = jsonObject)
            "updateFileDownload" -> return deserializeUpdateFileDownload(jsonObject = jsonObject)
            "updateFileDownloads" -> return deserializeUpdateFileDownloads(jsonObject = jsonObject)
            "updateFileGenerationStart" -> return deserializeUpdateFileGenerationStart(jsonObject = jsonObject)
            "updateFileGenerationStop" -> return deserializeUpdateFileGenerationStop(jsonObject = jsonObject)
            "updateFileRemovedFromDownloads" -> return deserializeUpdateFileRemovedFromDownloads(jsonObject = jsonObject)
            "updateForumTopic" -> return deserializeUpdateForumTopic(jsonObject = jsonObject)
            "updateForumTopicInfo" -> return deserializeUpdateForumTopicInfo(jsonObject = jsonObject)
            "updateFreezeState" -> return deserializeUpdateFreezeState(jsonObject = jsonObject)
            "updateGroupCall" -> return deserializeUpdateGroupCall(jsonObject = jsonObject)
            "updateGroupCallParticipant" -> return deserializeUpdateGroupCallParticipant(jsonObject = jsonObject)
            "updateGroupCallParticipants" -> return deserializeUpdateGroupCallParticipants(jsonObject = jsonObject)
            "updateGroupCallVerificationState" -> return deserializeUpdateGroupCallVerificationState(jsonObject = jsonObject)
            "updateHavePendingNotifications" -> return deserializeUpdateHavePendingNotifications(jsonObject = jsonObject)
            "updateInstalledStickerSets" -> return deserializeUpdateInstalledStickerSets(jsonObject = jsonObject)
            "updateLanguagePackStrings" -> return deserializeUpdateLanguagePackStrings(jsonObject = jsonObject)
            "updateMessageContent" -> return deserializeUpdateMessageContent(jsonObject = jsonObject)
            "updateMessageContentOpened" -> return deserializeUpdateMessageContentOpened(jsonObject = jsonObject)
            "updateMessageEdited" -> return deserializeUpdateMessageEdited(jsonObject = jsonObject)
            "updateMessageFactCheck" -> return deserializeUpdateMessageFactCheck(jsonObject = jsonObject)
            "updateMessageInteractionInfo" -> return deserializeUpdateMessageInteractionInfo(jsonObject = jsonObject)
            "updateMessageIsPinned" -> return deserializeUpdateMessageIsPinned(jsonObject = jsonObject)
            "updateMessageLiveLocationViewed" -> return deserializeUpdateMessageLiveLocationViewed(jsonObject = jsonObject)
            "updateMessageMentionRead" -> return deserializeUpdateMessageMentionRead(jsonObject = jsonObject)
            "updateMessageReaction" -> return deserializeUpdateMessageReaction(jsonObject = jsonObject)
            "updateMessageReactions" -> return deserializeUpdateMessageReactions(jsonObject = jsonObject)
            "updateMessageSendAcknowledged" -> return deserializeUpdateMessageSendAcknowledged(jsonObject = jsonObject)
            "updateMessageSendFailed" -> return deserializeUpdateMessageSendFailed(jsonObject = jsonObject)
            "updateMessageSendSucceeded" -> return deserializeUpdateMessageSendSucceeded(jsonObject = jsonObject)
            "updateMessageUnreadReactions" -> return deserializeUpdateMessageUnreadReactions(jsonObject = jsonObject)
            "updateNewBusinessCallbackQuery" -> return deserializeUpdateNewBusinessCallbackQuery(jsonObject = jsonObject)
            "updateNewBusinessMessage" -> return deserializeUpdateNewBusinessMessage(jsonObject = jsonObject)
            "updateNewCallSignalingData" -> return deserializeUpdateNewCallSignalingData(jsonObject = jsonObject)
            "updateNewCallbackQuery" -> return deserializeUpdateNewCallbackQuery(jsonObject = jsonObject)
            "updateNewChat" -> return deserializeUpdateNewChat(jsonObject = jsonObject)
            "updateNewChatJoinRequest" -> return deserializeUpdateNewChatJoinRequest(jsonObject = jsonObject)
            "updateNewChosenInlineResult" -> return deserializeUpdateNewChosenInlineResult(jsonObject = jsonObject)
            "updateNewCustomEvent" -> return deserializeUpdateNewCustomEvent(jsonObject = jsonObject)
            "updateNewCustomQuery" -> return deserializeUpdateNewCustomQuery(jsonObject = jsonObject)
            "updateNewInlineCallbackQuery" -> return deserializeUpdateNewInlineCallbackQuery(jsonObject = jsonObject)
            "updateNewInlineQuery" -> return deserializeUpdateNewInlineQuery(jsonObject = jsonObject)
            "updateNewMessage" -> return deserializeUpdateNewMessage(jsonObject = jsonObject)
            "updateNewPreCheckoutQuery" -> return deserializeUpdateNewPreCheckoutQuery(jsonObject = jsonObject)
            "updateNewShippingQuery" -> return deserializeUpdateNewShippingQuery(jsonObject = jsonObject)
            "updateNotification" -> return deserializeUpdateNotification(jsonObject = jsonObject)
            "updateNotificationGroup" -> return deserializeUpdateNotificationGroup(jsonObject = jsonObject)
            "updateOption" -> return deserializeUpdateOption(jsonObject = jsonObject)
            "updateOwnedStarCount" -> return deserializeUpdateOwnedStarCount(jsonObject = jsonObject)
            "updatePaidMediaPurchased" -> return deserializeUpdatePaidMediaPurchased(jsonObject = jsonObject)
            "updatePoll" -> return deserializeUpdatePoll(jsonObject = jsonObject)
            "updatePollAnswer" -> return deserializeUpdatePollAnswer(jsonObject = jsonObject)
            "updateProfileAccentColors" -> return deserializeUpdateProfileAccentColors(jsonObject = jsonObject)
            "updateQuickReplyShortcut" -> return deserializeUpdateQuickReplyShortcut(jsonObject = jsonObject)
            "updateQuickReplyShortcutDeleted" -> return deserializeUpdateQuickReplyShortcutDeleted(jsonObject = jsonObject)
            "updateQuickReplyShortcutMessages" -> return deserializeUpdateQuickReplyShortcutMessages(jsonObject = jsonObject)
            "updateQuickReplyShortcuts" -> return deserializeUpdateQuickReplyShortcuts(jsonObject = jsonObject)
            "updateReactionNotificationSettings" -> return deserializeUpdateReactionNotificationSettings(jsonObject = jsonObject)
            "updateRecentStickers" -> return deserializeUpdateRecentStickers(jsonObject = jsonObject)
            "updateSavedAnimations" -> return deserializeUpdateSavedAnimations(jsonObject = jsonObject)
            "updateSavedMessagesTags" -> return deserializeUpdateSavedMessagesTags(jsonObject = jsonObject)
            "updateSavedMessagesTopic" -> return deserializeUpdateSavedMessagesTopic(jsonObject = jsonObject)
            "updateSavedMessagesTopicCount" -> return deserializeUpdateSavedMessagesTopicCount(jsonObject = jsonObject)
            "updateSavedNotificationSounds" -> return deserializeUpdateSavedNotificationSounds(jsonObject = jsonObject)
            "updateScopeNotificationSettings" -> return deserializeUpdateScopeNotificationSettings(jsonObject = jsonObject)
            "updateSecretChat" -> return deserializeUpdateSecretChat(jsonObject = jsonObject)
            "updateServiceNotification" -> return deserializeUpdateServiceNotification(jsonObject = jsonObject)
            "updateSpeechRecognitionTrial" -> return deserializeUpdateSpeechRecognitionTrial(jsonObject = jsonObject)
            "updateSpeedLimitNotification" -> return deserializeUpdateSpeedLimitNotification(jsonObject = jsonObject)
            "updateStarRevenueStatus" -> return deserializeUpdateStarRevenueStatus(jsonObject = jsonObject)
            "updateStickerSet" -> return deserializeUpdateStickerSet(jsonObject = jsonObject)
            "updateStory" -> return deserializeUpdateStory(jsonObject = jsonObject)
            "updateStoryDeleted" -> return deserializeUpdateStoryDeleted(jsonObject = jsonObject)
            "updateStoryListChatCount" -> return deserializeUpdateStoryListChatCount(jsonObject = jsonObject)
            "updateStoryPostFailed" -> return deserializeUpdateStoryPostFailed(jsonObject = jsonObject)
            "updateStoryPostSucceeded" -> return deserializeUpdateStoryPostSucceeded(jsonObject = jsonObject)
            "updateStoryStealthMode" -> return deserializeUpdateStoryStealthMode(jsonObject = jsonObject)
            "updateSuggestedActions" -> return deserializeUpdateSuggestedActions(jsonObject = jsonObject)
            "updateSupergroup" -> return deserializeUpdateSupergroup(jsonObject = jsonObject)
            "updateSupergroupFullInfo" -> return deserializeUpdateSupergroupFullInfo(jsonObject = jsonObject)
            "updateTermsOfService" -> return deserializeUpdateTermsOfService(jsonObject = jsonObject)
            "updateTopicMessageCount" -> return deserializeUpdateTopicMessageCount(jsonObject = jsonObject)
            "updateTrendingStickerSets" -> return deserializeUpdateTrendingStickerSets(jsonObject = jsonObject)
            "updateUnconfirmedSession" -> return deserializeUpdateUnconfirmedSession(jsonObject = jsonObject)
            "updateUnreadChatCount" -> return deserializeUpdateUnreadChatCount(jsonObject = jsonObject)
            "updateUnreadMessageCount" -> return deserializeUpdateUnreadMessageCount(jsonObject = jsonObject)
            "updateUser" -> return deserializeUpdateUser(jsonObject = jsonObject)
            "updateUserFullInfo" -> return deserializeUpdateUserFullInfo(jsonObject = jsonObject)
            "updateUserPrivacySettingRules" -> return deserializeUpdateUserPrivacySettingRules(jsonObject = jsonObject)
            "updateUserStatus" -> return deserializeUpdateUserStatus(jsonObject = jsonObject)
            "updateVideoPublished" -> return deserializeUpdateVideoPublished(jsonObject = jsonObject)
            "updateWebAppMessageSent" -> return deserializeUpdateWebAppMessageSent(jsonObject = jsonObject)
            "updates" -> return deserializeUpdates(jsonObject = jsonObject)
            "upgradeGiftResult" -> return deserializeUpgradeGiftResult(jsonObject = jsonObject)
            "upgradedGift" -> return deserializeUpgradedGift(jsonObject = jsonObject)
            "upgradedGiftAttributeIdBackdrop" -> return deserializeUpgradedGiftAttributeIdBackdrop(jsonObject = jsonObject)
            "upgradedGiftAttributeIdModel" -> return deserializeUpgradedGiftAttributeIdModel(jsonObject = jsonObject)
            "upgradedGiftAttributeIdSymbol" -> return deserializeUpgradedGiftAttributeIdSymbol(jsonObject = jsonObject)
            "upgradedGiftBackdrop" -> return deserializeUpgradedGiftBackdrop(jsonObject = jsonObject)
            "upgradedGiftBackdropColors" -> return deserializeUpgradedGiftBackdropColors(jsonObject = jsonObject)
            "upgradedGiftBackdropCount" -> return deserializeUpgradedGiftBackdropCount(jsonObject = jsonObject)
            "upgradedGiftModel" -> return deserializeUpgradedGiftModel(jsonObject = jsonObject)
            "upgradedGiftModelCount" -> return deserializeUpgradedGiftModelCount(jsonObject = jsonObject)
            "upgradedGiftOriginalDetails" -> return deserializeUpgradedGiftOriginalDetails(jsonObject = jsonObject)
            "upgradedGiftSymbol" -> return deserializeUpgradedGiftSymbol(jsonObject = jsonObject)
            "upgradedGiftSymbolCount" -> return deserializeUpgradedGiftSymbolCount(jsonObject = jsonObject)
            "user" -> return deserializeUser(jsonObject = jsonObject)
            "userFullInfo" -> return deserializeUserFullInfo(jsonObject = jsonObject)
            "userLink" -> return deserializeUserLink(jsonObject = jsonObject)
            "userPrivacySettingAllowCalls" -> return deserializeUserPrivacySettingAllowCalls(jsonObject = jsonObject)
            "userPrivacySettingAllowChatInvites" -> return deserializeUserPrivacySettingAllowChatInvites(jsonObject = jsonObject)
            "userPrivacySettingAllowFindingByPhoneNumber" -> return deserializeUserPrivacySettingAllowFindingByPhoneNumber(jsonObject = jsonObject)
            "userPrivacySettingAllowPeerToPeerCalls" -> return deserializeUserPrivacySettingAllowPeerToPeerCalls(jsonObject = jsonObject)
            "userPrivacySettingAllowPrivateVoiceAndVideoNoteMessages" -> return deserializeUserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages(jsonObject = jsonObject)
            "userPrivacySettingAllowUnpaidMessages" -> return deserializeUserPrivacySettingAllowUnpaidMessages(jsonObject = jsonObject)
            "userPrivacySettingAutosaveGifts" -> return deserializeUserPrivacySettingAutosaveGifts(jsonObject = jsonObject)
            "userPrivacySettingRuleAllowAll" -> return deserializeUserPrivacySettingRuleAllowAll(jsonObject = jsonObject)
            "userPrivacySettingRuleAllowBots" -> return deserializeUserPrivacySettingRuleAllowBots(jsonObject = jsonObject)
            "userPrivacySettingRuleAllowChatMembers" -> return deserializeUserPrivacySettingRuleAllowChatMembers(jsonObject = jsonObject)
            "userPrivacySettingRuleAllowContacts" -> return deserializeUserPrivacySettingRuleAllowContacts(jsonObject = jsonObject)
            "userPrivacySettingRuleAllowPremiumUsers" -> return deserializeUserPrivacySettingRuleAllowPremiumUsers(jsonObject = jsonObject)
            "userPrivacySettingRuleAllowUsers" -> return deserializeUserPrivacySettingRuleAllowUsers(jsonObject = jsonObject)
            "userPrivacySettingRuleRestrictAll" -> return deserializeUserPrivacySettingRuleRestrictAll(jsonObject = jsonObject)
            "userPrivacySettingRuleRestrictBots" -> return deserializeUserPrivacySettingRuleRestrictBots(jsonObject = jsonObject)
            "userPrivacySettingRuleRestrictChatMembers" -> return deserializeUserPrivacySettingRuleRestrictChatMembers(jsonObject = jsonObject)
            "userPrivacySettingRuleRestrictContacts" -> return deserializeUserPrivacySettingRuleRestrictContacts(jsonObject = jsonObject)
            "userPrivacySettingRuleRestrictUsers" -> return deserializeUserPrivacySettingRuleRestrictUsers(jsonObject = jsonObject)
            "userPrivacySettingRules" -> return deserializeUserPrivacySettingRules(jsonObject = jsonObject)
            "userPrivacySettingShowBio" -> return deserializeUserPrivacySettingShowBio(jsonObject = jsonObject)
            "userPrivacySettingShowBirthdate" -> return deserializeUserPrivacySettingShowBirthdate(jsonObject = jsonObject)
            "userPrivacySettingShowLinkInForwardedMessages" -> return deserializeUserPrivacySettingShowLinkInForwardedMessages(jsonObject = jsonObject)
            "userPrivacySettingShowPhoneNumber" -> return deserializeUserPrivacySettingShowPhoneNumber(jsonObject = jsonObject)
            "userPrivacySettingShowProfilePhoto" -> return deserializeUserPrivacySettingShowProfilePhoto(jsonObject = jsonObject)
            "userPrivacySettingShowStatus" -> return deserializeUserPrivacySettingShowStatus(jsonObject = jsonObject)
            "userStatusEmpty" -> return deserializeUserStatusEmpty(jsonObject = jsonObject)
            "userStatusLastMonth" -> return deserializeUserStatusLastMonth(jsonObject = jsonObject)
            "userStatusLastWeek" -> return deserializeUserStatusLastWeek(jsonObject = jsonObject)
            "userStatusOffline" -> return deserializeUserStatusOffline(jsonObject = jsonObject)
            "userStatusOnline" -> return deserializeUserStatusOnline(jsonObject = jsonObject)
            "userStatusRecently" -> return deserializeUserStatusRecently(jsonObject = jsonObject)
            "userSupportInfo" -> return deserializeUserSupportInfo(jsonObject = jsonObject)
            "userTypeBot" -> return deserializeUserTypeBot(jsonObject = jsonObject)
            "userTypeDeleted" -> return deserializeUserTypeDeleted(jsonObject = jsonObject)
            "userTypeRegular" -> return deserializeUserTypeRegular(jsonObject = jsonObject)
            "userTypeUnknown" -> return deserializeUserTypeUnknown(jsonObject = jsonObject)
            "usernames" -> return deserializeUsernames(jsonObject = jsonObject)
            "users" -> return deserializeUsers(jsonObject = jsonObject)
            "validatedOrderInfo" -> return deserializeValidatedOrderInfo(jsonObject = jsonObject)
            "vectorPathCommandCubicBezierCurve" -> return deserializeVectorPathCommandCubicBezierCurve(jsonObject = jsonObject)
            "vectorPathCommandLine" -> return deserializeVectorPathCommandLine(jsonObject = jsonObject)
            "venue" -> return deserializeVenue(jsonObject = jsonObject)
            "verificationStatus" -> return deserializeVerificationStatus(jsonObject = jsonObject)
            "video" -> return deserializeVideo(jsonObject = jsonObject)
            "videoChat" -> return deserializeVideoChat(jsonObject = jsonObject)
            "videoChatStream" -> return deserializeVideoChatStream(jsonObject = jsonObject)
            "videoChatStreams" -> return deserializeVideoChatStreams(jsonObject = jsonObject)
            "videoMessageAdvertisement" -> return deserializeVideoMessageAdvertisement(jsonObject = jsonObject)
            "videoMessageAdvertisements" -> return deserializeVideoMessageAdvertisements(jsonObject = jsonObject)
            "videoNote" -> return deserializeVideoNote(jsonObject = jsonObject)
            "videoStoryboard" -> return deserializeVideoStoryboard(jsonObject = jsonObject)
            "voiceNote" -> return deserializeVoiceNote(jsonObject = jsonObject)
            "webApp" -> return deserializeWebApp(jsonObject = jsonObject)
            "webAppInfo" -> return deserializeWebAppInfo(jsonObject = jsonObject)
            "webAppOpenModeCompact" -> return deserializeWebAppOpenModeCompact(jsonObject = jsonObject)
            "webAppOpenModeFullScreen" -> return deserializeWebAppOpenModeFullScreen(jsonObject = jsonObject)
            "webAppOpenModeFullSize" -> return deserializeWebAppOpenModeFullSize(jsonObject = jsonObject)
            "webAppOpenParameters" -> return deserializeWebAppOpenParameters(jsonObject = jsonObject)
            "webPageInstantView" -> return deserializeWebPageInstantView(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeAffiliateProgramSortOrder(jsonObject: JsonObject): AffiliateProgramSortOrder {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "affiliateProgramSortOrderCreationDate" -> return deserializeAffiliateProgramSortOrderCreationDate(jsonObject = jsonObject)
            "affiliateProgramSortOrderProfitability" -> return deserializeAffiliateProgramSortOrderProfitability(jsonObject = jsonObject)
            "affiliateProgramSortOrderRevenue" -> return deserializeAffiliateProgramSortOrderRevenue(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeAffiliateType(jsonObject: JsonObject): AffiliateType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "affiliateTypeBot" -> return deserializeAffiliateTypeBot(jsonObject = jsonObject)
            "affiliateTypeChannel" -> return deserializeAffiliateTypeChannel(jsonObject = jsonObject)
            "affiliateTypeCurrentUser" -> return deserializeAffiliateTypeCurrentUser(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeAuthenticationCodeType(jsonObject: JsonObject): AuthenticationCodeType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "authenticationCodeTypeCall" -> return deserializeAuthenticationCodeTypeCall(jsonObject = jsonObject)
            "authenticationCodeTypeFirebaseAndroid" -> return deserializeAuthenticationCodeTypeFirebaseAndroid(jsonObject = jsonObject)
            "authenticationCodeTypeFirebaseIos" -> return deserializeAuthenticationCodeTypeFirebaseIos(jsonObject = jsonObject)
            "authenticationCodeTypeFlashCall" -> return deserializeAuthenticationCodeTypeFlashCall(jsonObject = jsonObject)
            "authenticationCodeTypeFragment" -> return deserializeAuthenticationCodeTypeFragment(jsonObject = jsonObject)
            "authenticationCodeTypeMissedCall" -> return deserializeAuthenticationCodeTypeMissedCall(jsonObject = jsonObject)
            "authenticationCodeTypeSms" -> return deserializeAuthenticationCodeTypeSms(jsonObject = jsonObject)
            "authenticationCodeTypeSmsPhrase" -> return deserializeAuthenticationCodeTypeSmsPhrase(jsonObject = jsonObject)
            "authenticationCodeTypeSmsWord" -> return deserializeAuthenticationCodeTypeSmsWord(jsonObject = jsonObject)
            "authenticationCodeTypeTelegramMessage" -> return deserializeAuthenticationCodeTypeTelegramMessage(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeAuthorizationState(jsonObject: JsonObject): AuthorizationState {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "authorizationStateClosed" -> return deserializeAuthorizationStateClosed(jsonObject = jsonObject)
            "authorizationStateClosing" -> return deserializeAuthorizationStateClosing(jsonObject = jsonObject)
            "authorizationStateLoggingOut" -> return deserializeAuthorizationStateLoggingOut(jsonObject = jsonObject)
            "authorizationStateReady" -> return deserializeAuthorizationStateReady(jsonObject = jsonObject)
            "authorizationStateWaitCode" -> return deserializeAuthorizationStateWaitCode(jsonObject = jsonObject)
            "authorizationStateWaitEmailAddress" -> return deserializeAuthorizationStateWaitEmailAddress(jsonObject = jsonObject)
            "authorizationStateWaitEmailCode" -> return deserializeAuthorizationStateWaitEmailCode(jsonObject = jsonObject)
            "authorizationStateWaitOtherDeviceConfirmation" -> return deserializeAuthorizationStateWaitOtherDeviceConfirmation(jsonObject = jsonObject)
            "authorizationStateWaitPassword" -> return deserializeAuthorizationStateWaitPassword(jsonObject = jsonObject)
            "authorizationStateWaitPhoneNumber" -> return deserializeAuthorizationStateWaitPhoneNumber(jsonObject = jsonObject)
            "authorizationStateWaitPremiumPurchase" -> return deserializeAuthorizationStateWaitPremiumPurchase(jsonObject = jsonObject)
            "authorizationStateWaitRegistration" -> return deserializeAuthorizationStateWaitRegistration(jsonObject = jsonObject)
            "authorizationStateWaitTdlibParameters" -> return deserializeAuthorizationStateWaitTdlibParameters(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeAutosaveSettingsScope(jsonObject: JsonObject): AutosaveSettingsScope {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "autosaveSettingsScopeChannelChats" -> return deserializeAutosaveSettingsScopeChannelChats(jsonObject = jsonObject)
            "autosaveSettingsScopeChat" -> return deserializeAutosaveSettingsScopeChat(jsonObject = jsonObject)
            "autosaveSettingsScopeGroupChats" -> return deserializeAutosaveSettingsScopeGroupChats(jsonObject = jsonObject)
            "autosaveSettingsScopePrivateChats" -> return deserializeAutosaveSettingsScopePrivateChats(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeBackgroundFill(jsonObject: JsonObject): BackgroundFill {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "backgroundFillFreeformGradient" -> return deserializeBackgroundFillFreeformGradient(jsonObject = jsonObject)
            "backgroundFillGradient" -> return deserializeBackgroundFillGradient(jsonObject = jsonObject)
            "backgroundFillSolid" -> return deserializeBackgroundFillSolid(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeBackgroundType(jsonObject: JsonObject): BackgroundType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "backgroundTypeChatTheme" -> return deserializeBackgroundTypeChatTheme(jsonObject = jsonObject)
            "backgroundTypeFill" -> return deserializeBackgroundTypeFill(jsonObject = jsonObject)
            "backgroundTypePattern" -> return deserializeBackgroundTypePattern(jsonObject = jsonObject)
            "backgroundTypeWallpaper" -> return deserializeBackgroundTypeWallpaper(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeBlockList(jsonObject: JsonObject): BlockList {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "blockListMain" -> return deserializeBlockListMain(jsonObject = jsonObject)
            "blockListStories" -> return deserializeBlockListStories(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeBotCommandScope(jsonObject: JsonObject): BotCommandScope {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "botCommandScopeAllChatAdministrators" -> return deserializeBotCommandScopeAllChatAdministrators(jsonObject = jsonObject)
            "botCommandScopeAllGroupChats" -> return deserializeBotCommandScopeAllGroupChats(jsonObject = jsonObject)
            "botCommandScopeAllPrivateChats" -> return deserializeBotCommandScopeAllPrivateChats(jsonObject = jsonObject)
            "botCommandScopeChat" -> return deserializeBotCommandScopeChat(jsonObject = jsonObject)
            "botCommandScopeChatAdministrators" -> return deserializeBotCommandScopeChatAdministrators(jsonObject = jsonObject)
            "botCommandScopeChatMember" -> return deserializeBotCommandScopeChatMember(jsonObject = jsonObject)
            "botCommandScopeDefault" -> return deserializeBotCommandScopeDefault(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeBotWriteAccessAllowReason(jsonObject: JsonObject): BotWriteAccessAllowReason {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "botWriteAccessAllowReasonAcceptedRequest" -> return deserializeBotWriteAccessAllowReasonAcceptedRequest(jsonObject = jsonObject)
            "botWriteAccessAllowReasonAddedToAttachmentMenu" -> return deserializeBotWriteAccessAllowReasonAddedToAttachmentMenu(jsonObject = jsonObject)
            "botWriteAccessAllowReasonConnectedWebsite" -> return deserializeBotWriteAccessAllowReasonConnectedWebsite(jsonObject = jsonObject)
            "botWriteAccessAllowReasonLaunchedWebApp" -> return deserializeBotWriteAccessAllowReasonLaunchedWebApp(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeBusinessAwayMessageSchedule(jsonObject: JsonObject): BusinessAwayMessageSchedule {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "businessAwayMessageScheduleAlways" -> return deserializeBusinessAwayMessageScheduleAlways(jsonObject = jsonObject)
            "businessAwayMessageScheduleCustom" -> return deserializeBusinessAwayMessageScheduleCustom(jsonObject = jsonObject)
            "businessAwayMessageScheduleOutsideOfOpeningHours" -> return deserializeBusinessAwayMessageScheduleOutsideOfOpeningHours(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeBusinessFeature(jsonObject: JsonObject): BusinessFeature {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "businessFeatureAccountLinks" -> return deserializeBusinessFeatureAccountLinks(jsonObject = jsonObject)
            "businessFeatureAwayMessage" -> return deserializeBusinessFeatureAwayMessage(jsonObject = jsonObject)
            "businessFeatureBots" -> return deserializeBusinessFeatureBots(jsonObject = jsonObject)
            "businessFeatureChatFolderTags" -> return deserializeBusinessFeatureChatFolderTags(jsonObject = jsonObject)
            "businessFeatureEmojiStatus" -> return deserializeBusinessFeatureEmojiStatus(jsonObject = jsonObject)
            "businessFeatureGreetingMessage" -> return deserializeBusinessFeatureGreetingMessage(jsonObject = jsonObject)
            "businessFeatureLocation" -> return deserializeBusinessFeatureLocation(jsonObject = jsonObject)
            "businessFeatureOpeningHours" -> return deserializeBusinessFeatureOpeningHours(jsonObject = jsonObject)
            "businessFeatureQuickReplies" -> return deserializeBusinessFeatureQuickReplies(jsonObject = jsonObject)
            "businessFeatureStartPage" -> return deserializeBusinessFeatureStartPage(jsonObject = jsonObject)
            "businessFeatureUpgradedStories" -> return deserializeBusinessFeatureUpgradedStories(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeCallDiscardReason(jsonObject: JsonObject): CallDiscardReason {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "callDiscardReasonDeclined" -> return deserializeCallDiscardReasonDeclined(jsonObject = jsonObject)
            "callDiscardReasonDisconnected" -> return deserializeCallDiscardReasonDisconnected(jsonObject = jsonObject)
            "callDiscardReasonEmpty" -> return deserializeCallDiscardReasonEmpty(jsonObject = jsonObject)
            "callDiscardReasonHungUp" -> return deserializeCallDiscardReasonHungUp(jsonObject = jsonObject)
            "callDiscardReasonMissed" -> return deserializeCallDiscardReasonMissed(jsonObject = jsonObject)
            "callDiscardReasonUpgradeToGroupCall" -> return deserializeCallDiscardReasonUpgradeToGroupCall(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeCallProblem(jsonObject: JsonObject): CallProblem {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "callProblemDistortedSpeech" -> return deserializeCallProblemDistortedSpeech(jsonObject = jsonObject)
            "callProblemDistortedVideo" -> return deserializeCallProblemDistortedVideo(jsonObject = jsonObject)
            "callProblemDropped" -> return deserializeCallProblemDropped(jsonObject = jsonObject)
            "callProblemEcho" -> return deserializeCallProblemEcho(jsonObject = jsonObject)
            "callProblemInterruptions" -> return deserializeCallProblemInterruptions(jsonObject = jsonObject)
            "callProblemNoise" -> return deserializeCallProblemNoise(jsonObject = jsonObject)
            "callProblemPixelatedVideo" -> return deserializeCallProblemPixelatedVideo(jsonObject = jsonObject)
            "callProblemSilentLocal" -> return deserializeCallProblemSilentLocal(jsonObject = jsonObject)
            "callProblemSilentRemote" -> return deserializeCallProblemSilentRemote(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeCallServerType(jsonObject: JsonObject): CallServerType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "callServerTypeTelegramReflector" -> return deserializeCallServerTypeTelegramReflector(jsonObject = jsonObject)
            "callServerTypeWebrtc" -> return deserializeCallServerTypeWebrtc(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeCallState(jsonObject: JsonObject): CallState {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "callStateDiscarded" -> return deserializeCallStateDiscarded(jsonObject = jsonObject)
            "callStateError" -> return deserializeCallStateError(jsonObject = jsonObject)
            "callStateExchangingKeys" -> return deserializeCallStateExchangingKeys(jsonObject = jsonObject)
            "callStateHangingUp" -> return deserializeCallStateHangingUp(jsonObject = jsonObject)
            "callStatePending" -> return deserializeCallStatePending(jsonObject = jsonObject)
            "callStateReady" -> return deserializeCallStateReady(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeCallbackQueryPayload(jsonObject: JsonObject): CallbackQueryPayload {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "callbackQueryPayloadData" -> return deserializeCallbackQueryPayloadData(jsonObject = jsonObject)
            "callbackQueryPayloadDataWithPassword" -> return deserializeCallbackQueryPayloadDataWithPassword(jsonObject = jsonObject)
            "callbackQueryPayloadGame" -> return deserializeCallbackQueryPayloadGame(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeCanPostStoryResult(jsonObject: JsonObject): CanPostStoryResult {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "canPostStoryResultActiveStoryLimitExceeded" -> return deserializeCanPostStoryResultActiveStoryLimitExceeded(jsonObject = jsonObject)
            "canPostStoryResultBoostNeeded" -> return deserializeCanPostStoryResultBoostNeeded(jsonObject = jsonObject)
            "canPostStoryResultMonthlyLimitExceeded" -> return deserializeCanPostStoryResultMonthlyLimitExceeded(jsonObject = jsonObject)
            "canPostStoryResultOk" -> return deserializeCanPostStoryResultOk(jsonObject = jsonObject)
            "canPostStoryResultPremiumNeeded" -> return deserializeCanPostStoryResultPremiumNeeded(jsonObject = jsonObject)
            "canPostStoryResultWeeklyLimitExceeded" -> return deserializeCanPostStoryResultWeeklyLimitExceeded(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeCanSendMessageToUserResult(jsonObject: JsonObject): CanSendMessageToUserResult {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "canSendMessageToUserResultOk" -> return deserializeCanSendMessageToUserResultOk(jsonObject = jsonObject)
            "canSendMessageToUserResultUserHasPaidMessages" -> return deserializeCanSendMessageToUserResultUserHasPaidMessages(jsonObject = jsonObject)
            "canSendMessageToUserResultUserIsDeleted" -> return deserializeCanSendMessageToUserResultUserIsDeleted(jsonObject = jsonObject)
            "canSendMessageToUserResultUserRestrictsNewChats" -> return deserializeCanSendMessageToUserResultUserRestrictsNewChats(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeCanTransferOwnershipResult(jsonObject: JsonObject): CanTransferOwnershipResult {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "canTransferOwnershipResultOk" -> return deserializeCanTransferOwnershipResultOk(jsonObject = jsonObject)
            "canTransferOwnershipResultPasswordNeeded" -> return deserializeCanTransferOwnershipResultPasswordNeeded(jsonObject = jsonObject)
            "canTransferOwnershipResultPasswordTooFresh" -> return deserializeCanTransferOwnershipResultPasswordTooFresh(jsonObject = jsonObject)
            "canTransferOwnershipResultSessionTooFresh" -> return deserializeCanTransferOwnershipResultSessionTooFresh(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeChatActionBar(jsonObject: JsonObject): ChatActionBar {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "chatActionBarAddContact" -> return deserializeChatActionBarAddContact(jsonObject = jsonObject)
            "chatActionBarInviteMembers" -> return deserializeChatActionBarInviteMembers(jsonObject = jsonObject)
            "chatActionBarJoinRequest" -> return deserializeChatActionBarJoinRequest(jsonObject = jsonObject)
            "chatActionBarReportAddBlock" -> return deserializeChatActionBarReportAddBlock(jsonObject = jsonObject)
            "chatActionBarReportSpam" -> return deserializeChatActionBarReportSpam(jsonObject = jsonObject)
            "chatActionBarSharePhoneNumber" -> return deserializeChatActionBarSharePhoneNumber(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeChatAction(jsonObject: JsonObject): ChatAction {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "chatActionCancel" -> return deserializeChatActionCancel(jsonObject = jsonObject)
            "chatActionChoosingContact" -> return deserializeChatActionChoosingContact(jsonObject = jsonObject)
            "chatActionChoosingLocation" -> return deserializeChatActionChoosingLocation(jsonObject = jsonObject)
            "chatActionChoosingSticker" -> return deserializeChatActionChoosingSticker(jsonObject = jsonObject)
            "chatActionRecordingVideo" -> return deserializeChatActionRecordingVideo(jsonObject = jsonObject)
            "chatActionRecordingVideoNote" -> return deserializeChatActionRecordingVideoNote(jsonObject = jsonObject)
            "chatActionRecordingVoiceNote" -> return deserializeChatActionRecordingVoiceNote(jsonObject = jsonObject)
            "chatActionStartPlayingGame" -> return deserializeChatActionStartPlayingGame(jsonObject = jsonObject)
            "chatActionTyping" -> return deserializeChatActionTyping(jsonObject = jsonObject)
            "chatActionUploadingDocument" -> return deserializeChatActionUploadingDocument(jsonObject = jsonObject)
            "chatActionUploadingPhoto" -> return deserializeChatActionUploadingPhoto(jsonObject = jsonObject)
            "chatActionUploadingVideo" -> return deserializeChatActionUploadingVideo(jsonObject = jsonObject)
            "chatActionUploadingVideoNote" -> return deserializeChatActionUploadingVideoNote(jsonObject = jsonObject)
            "chatActionUploadingVoiceNote" -> return deserializeChatActionUploadingVoiceNote(jsonObject = jsonObject)
            "chatActionWatchingAnimations" -> return deserializeChatActionWatchingAnimations(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeChatAvailableReactions(jsonObject: JsonObject): ChatAvailableReactions {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "chatAvailableReactionsAll" -> return deserializeChatAvailableReactionsAll(jsonObject = jsonObject)
            "chatAvailableReactionsSome" -> return deserializeChatAvailableReactionsSome(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeChatBoostSource(jsonObject: JsonObject): ChatBoostSource {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "chatBoostSourceGiftCode" -> return deserializeChatBoostSourceGiftCode(jsonObject = jsonObject)
            "chatBoostSourceGiveaway" -> return deserializeChatBoostSourceGiveaway(jsonObject = jsonObject)
            "chatBoostSourcePremium" -> return deserializeChatBoostSourcePremium(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeChatEventAction(jsonObject: JsonObject): ChatEventAction {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "chatEventAccentColorChanged" -> return deserializeChatEventAccentColorChanged(jsonObject = jsonObject)
            "chatEventActiveUsernamesChanged" -> return deserializeChatEventActiveUsernamesChanged(jsonObject = jsonObject)
            "chatEventAutomaticTranslationToggled" -> return deserializeChatEventAutomaticTranslationToggled(jsonObject = jsonObject)
            "chatEventAvailableReactionsChanged" -> return deserializeChatEventAvailableReactionsChanged(jsonObject = jsonObject)
            "chatEventBackgroundChanged" -> return deserializeChatEventBackgroundChanged(jsonObject = jsonObject)
            "chatEventCustomEmojiStickerSetChanged" -> return deserializeChatEventCustomEmojiStickerSetChanged(jsonObject = jsonObject)
            "chatEventDescriptionChanged" -> return deserializeChatEventDescriptionChanged(jsonObject = jsonObject)
            "chatEventEmojiStatusChanged" -> return deserializeChatEventEmojiStatusChanged(jsonObject = jsonObject)
            "chatEventForumTopicCreated" -> return deserializeChatEventForumTopicCreated(jsonObject = jsonObject)
            "chatEventForumTopicDeleted" -> return deserializeChatEventForumTopicDeleted(jsonObject = jsonObject)
            "chatEventForumTopicEdited" -> return deserializeChatEventForumTopicEdited(jsonObject = jsonObject)
            "chatEventForumTopicPinned" -> return deserializeChatEventForumTopicPinned(jsonObject = jsonObject)
            "chatEventForumTopicToggleIsClosed" -> return deserializeChatEventForumTopicToggleIsClosed(jsonObject = jsonObject)
            "chatEventForumTopicToggleIsHidden" -> return deserializeChatEventForumTopicToggleIsHidden(jsonObject = jsonObject)
            "chatEventHasAggressiveAntiSpamEnabledToggled" -> return deserializeChatEventHasAggressiveAntiSpamEnabledToggled(jsonObject = jsonObject)
            "chatEventHasProtectedContentToggled" -> return deserializeChatEventHasProtectedContentToggled(jsonObject = jsonObject)
            "chatEventInviteLinkDeleted" -> return deserializeChatEventInviteLinkDeleted(jsonObject = jsonObject)
            "chatEventInviteLinkEdited" -> return deserializeChatEventInviteLinkEdited(jsonObject = jsonObject)
            "chatEventInviteLinkRevoked" -> return deserializeChatEventInviteLinkRevoked(jsonObject = jsonObject)
            "chatEventInvitesToggled" -> return deserializeChatEventInvitesToggled(jsonObject = jsonObject)
            "chatEventIsAllHistoryAvailableToggled" -> return deserializeChatEventIsAllHistoryAvailableToggled(jsonObject = jsonObject)
            "chatEventIsForumToggled" -> return deserializeChatEventIsForumToggled(jsonObject = jsonObject)
            "chatEventLinkedChatChanged" -> return deserializeChatEventLinkedChatChanged(jsonObject = jsonObject)
            "chatEventLocationChanged" -> return deserializeChatEventLocationChanged(jsonObject = jsonObject)
            "chatEventMemberInvited" -> return deserializeChatEventMemberInvited(jsonObject = jsonObject)
            "chatEventMemberJoined" -> return deserializeChatEventMemberJoined(jsonObject = jsonObject)
            "chatEventMemberJoinedByInviteLink" -> return deserializeChatEventMemberJoinedByInviteLink(jsonObject = jsonObject)
            "chatEventMemberJoinedByRequest" -> return deserializeChatEventMemberJoinedByRequest(jsonObject = jsonObject)
            "chatEventMemberLeft" -> return deserializeChatEventMemberLeft(jsonObject = jsonObject)
            "chatEventMemberPromoted" -> return deserializeChatEventMemberPromoted(jsonObject = jsonObject)
            "chatEventMemberRestricted" -> return deserializeChatEventMemberRestricted(jsonObject = jsonObject)
            "chatEventMemberSubscriptionExtended" -> return deserializeChatEventMemberSubscriptionExtended(jsonObject = jsonObject)
            "chatEventMessageAutoDeleteTimeChanged" -> return deserializeChatEventMessageAutoDeleteTimeChanged(jsonObject = jsonObject)
            "chatEventMessageDeleted" -> return deserializeChatEventMessageDeleted(jsonObject = jsonObject)
            "chatEventMessageEdited" -> return deserializeChatEventMessageEdited(jsonObject = jsonObject)
            "chatEventMessagePinned" -> return deserializeChatEventMessagePinned(jsonObject = jsonObject)
            "chatEventMessageUnpinned" -> return deserializeChatEventMessageUnpinned(jsonObject = jsonObject)
            "chatEventPermissionsChanged" -> return deserializeChatEventPermissionsChanged(jsonObject = jsonObject)
            "chatEventPhotoChanged" -> return deserializeChatEventPhotoChanged(jsonObject = jsonObject)
            "chatEventPollStopped" -> return deserializeChatEventPollStopped(jsonObject = jsonObject)
            "chatEventProfileAccentColorChanged" -> return deserializeChatEventProfileAccentColorChanged(jsonObject = jsonObject)
            "chatEventShowMessageSenderToggled" -> return deserializeChatEventShowMessageSenderToggled(jsonObject = jsonObject)
            "chatEventSignMessagesToggled" -> return deserializeChatEventSignMessagesToggled(jsonObject = jsonObject)
            "chatEventSlowModeDelayChanged" -> return deserializeChatEventSlowModeDelayChanged(jsonObject = jsonObject)
            "chatEventStickerSetChanged" -> return deserializeChatEventStickerSetChanged(jsonObject = jsonObject)
            "chatEventTitleChanged" -> return deserializeChatEventTitleChanged(jsonObject = jsonObject)
            "chatEventUsernameChanged" -> return deserializeChatEventUsernameChanged(jsonObject = jsonObject)
            "chatEventVideoChatCreated" -> return deserializeChatEventVideoChatCreated(jsonObject = jsonObject)
            "chatEventVideoChatEnded" -> return deserializeChatEventVideoChatEnded(jsonObject = jsonObject)
            "chatEventVideoChatMuteNewParticipantsToggled" -> return deserializeChatEventVideoChatMuteNewParticipantsToggled(jsonObject = jsonObject)
            "chatEventVideoChatParticipantIsMutedToggled" -> return deserializeChatEventVideoChatParticipantIsMutedToggled(jsonObject = jsonObject)
            "chatEventVideoChatParticipantVolumeLevelChanged" -> return deserializeChatEventVideoChatParticipantVolumeLevelChanged(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeChatList(jsonObject: JsonObject): ChatList {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "chatListArchive" -> return deserializeChatListArchive(jsonObject = jsonObject)
            "chatListFolder" -> return deserializeChatListFolder(jsonObject = jsonObject)
            "chatListMain" -> return deserializeChatListMain(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeChatMemberStatus(jsonObject: JsonObject): ChatMemberStatus {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "chatMemberStatusAdministrator" -> return deserializeChatMemberStatusAdministrator(jsonObject = jsonObject)
            "chatMemberStatusBanned" -> return deserializeChatMemberStatusBanned(jsonObject = jsonObject)
            "chatMemberStatusCreator" -> return deserializeChatMemberStatusCreator(jsonObject = jsonObject)
            "chatMemberStatusLeft" -> return deserializeChatMemberStatusLeft(jsonObject = jsonObject)
            "chatMemberStatusMember" -> return deserializeChatMemberStatusMember(jsonObject = jsonObject)
            "chatMemberStatusRestricted" -> return deserializeChatMemberStatusRestricted(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeChatMembersFilter(jsonObject: JsonObject): ChatMembersFilter {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "chatMembersFilterAdministrators" -> return deserializeChatMembersFilterAdministrators(jsonObject = jsonObject)
            "chatMembersFilterBanned" -> return deserializeChatMembersFilterBanned(jsonObject = jsonObject)
            "chatMembersFilterBots" -> return deserializeChatMembersFilterBots(jsonObject = jsonObject)
            "chatMembersFilterContacts" -> return deserializeChatMembersFilterContacts(jsonObject = jsonObject)
            "chatMembersFilterMembers" -> return deserializeChatMembersFilterMembers(jsonObject = jsonObject)
            "chatMembersFilterMention" -> return deserializeChatMembersFilterMention(jsonObject = jsonObject)
            "chatMembersFilterRestricted" -> return deserializeChatMembersFilterRestricted(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeChatPhotoStickerType(jsonObject: JsonObject): ChatPhotoStickerType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "chatPhotoStickerTypeCustomEmoji" -> return deserializeChatPhotoStickerTypeCustomEmoji(jsonObject = jsonObject)
            "chatPhotoStickerTypeRegularOrMask" -> return deserializeChatPhotoStickerTypeRegularOrMask(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeChatRevenueTransactionType(jsonObject: JsonObject): ChatRevenueTransactionType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "chatRevenueTransactionTypeEarnings" -> return deserializeChatRevenueTransactionTypeEarnings(jsonObject = jsonObject)
            "chatRevenueTransactionTypeRefund" -> return deserializeChatRevenueTransactionTypeRefund(jsonObject = jsonObject)
            "chatRevenueTransactionTypeWithdrawal" -> return deserializeChatRevenueTransactionTypeWithdrawal(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeChatSource(jsonObject: JsonObject): ChatSource {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "chatSourceMtprotoProxy" -> return deserializeChatSourceMtprotoProxy(jsonObject = jsonObject)
            "chatSourcePublicServiceAnnouncement" -> return deserializeChatSourcePublicServiceAnnouncement(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeChatStatistics(jsonObject: JsonObject): ChatStatistics {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "chatStatisticsChannel" -> return deserializeChatStatisticsChannel(jsonObject = jsonObject)
            "chatStatisticsSupergroup" -> return deserializeChatStatisticsSupergroup(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeChatStatisticsObjectType(jsonObject: JsonObject): ChatStatisticsObjectType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "chatStatisticsObjectTypeMessage" -> return deserializeChatStatisticsObjectTypeMessage(jsonObject = jsonObject)
            "chatStatisticsObjectTypeStory" -> return deserializeChatStatisticsObjectTypeStory(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeChatType(jsonObject: JsonObject): ChatType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "chatTypeBasicGroup" -> return deserializeChatTypeBasicGroup(jsonObject = jsonObject)
            "chatTypePrivate" -> return deserializeChatTypePrivate(jsonObject = jsonObject)
            "chatTypeSecret" -> return deserializeChatTypeSecret(jsonObject = jsonObject)
            "chatTypeSupergroup" -> return deserializeChatTypeSupergroup(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeCheckChatUsernameResult(jsonObject: JsonObject): CheckChatUsernameResult {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "checkChatUsernameResultOk" -> return deserializeCheckChatUsernameResultOk(jsonObject = jsonObject)
            "checkChatUsernameResultPublicChatsTooMany" -> return deserializeCheckChatUsernameResultPublicChatsTooMany(jsonObject = jsonObject)
            "checkChatUsernameResultPublicGroupsUnavailable" -> return deserializeCheckChatUsernameResultPublicGroupsUnavailable(jsonObject = jsonObject)
            "checkChatUsernameResultUsernameInvalid" -> return deserializeCheckChatUsernameResultUsernameInvalid(jsonObject = jsonObject)
            "checkChatUsernameResultUsernameOccupied" -> return deserializeCheckChatUsernameResultUsernameOccupied(jsonObject = jsonObject)
            "checkChatUsernameResultUsernamePurchasable" -> return deserializeCheckChatUsernameResultUsernamePurchasable(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeCheckStickerSetNameResult(jsonObject: JsonObject): CheckStickerSetNameResult {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "checkStickerSetNameResultNameInvalid" -> return deserializeCheckStickerSetNameResultNameInvalid(jsonObject = jsonObject)
            "checkStickerSetNameResultNameOccupied" -> return deserializeCheckStickerSetNameResultNameOccupied(jsonObject = jsonObject)
            "checkStickerSetNameResultOk" -> return deserializeCheckStickerSetNameResultOk(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeCollectibleItemType(jsonObject: JsonObject): CollectibleItemType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "collectibleItemTypePhoneNumber" -> return deserializeCollectibleItemTypePhoneNumber(jsonObject = jsonObject)
            "collectibleItemTypeUsername" -> return deserializeCollectibleItemTypeUsername(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeConnectionState(jsonObject: JsonObject): ConnectionState {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "connectionStateConnecting" -> return deserializeConnectionStateConnecting(jsonObject = jsonObject)
            "connectionStateConnectingToProxy" -> return deserializeConnectionStateConnectingToProxy(jsonObject = jsonObject)
            "connectionStateReady" -> return deserializeConnectionStateReady(jsonObject = jsonObject)
            "connectionStateUpdating" -> return deserializeConnectionStateUpdating(jsonObject = jsonObject)
            "connectionStateWaitingForNetwork" -> return deserializeConnectionStateWaitingForNetwork(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeDeviceToken(jsonObject: JsonObject): DeviceToken {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "deviceTokenApplePush" -> return deserializeDeviceTokenApplePush(jsonObject = jsonObject)
            "deviceTokenApplePushVoIP" -> return deserializeDeviceTokenApplePushVoIP(jsonObject = jsonObject)
            "deviceTokenBlackBerryPush" -> return deserializeDeviceTokenBlackBerryPush(jsonObject = jsonObject)
            "deviceTokenFirebaseCloudMessaging" -> return deserializeDeviceTokenFirebaseCloudMessaging(jsonObject = jsonObject)
            "deviceTokenHuaweiPush" -> return deserializeDeviceTokenHuaweiPush(jsonObject = jsonObject)
            "deviceTokenMicrosoftPush" -> return deserializeDeviceTokenMicrosoftPush(jsonObject = jsonObject)
            "deviceTokenMicrosoftPushVoIP" -> return deserializeDeviceTokenMicrosoftPushVoIP(jsonObject = jsonObject)
            "deviceTokenSimplePush" -> return deserializeDeviceTokenSimplePush(jsonObject = jsonObject)
            "deviceTokenTizenPush" -> return deserializeDeviceTokenTizenPush(jsonObject = jsonObject)
            "deviceTokenUbuntuPush" -> return deserializeDeviceTokenUbuntuPush(jsonObject = jsonObject)
            "deviceTokenWebPush" -> return deserializeDeviceTokenWebPush(jsonObject = jsonObject)
            "deviceTokenWindowsPush" -> return deserializeDeviceTokenWindowsPush(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeDiceStickers(jsonObject: JsonObject): DiceStickers {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "diceStickersRegular" -> return deserializeDiceStickersRegular(jsonObject = jsonObject)
            "diceStickersSlotMachine" -> return deserializeDiceStickersSlotMachine(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeEmailAddressAuthentication(jsonObject: JsonObject): EmailAddressAuthentication {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "emailAddressAuthenticationAppleId" -> return deserializeEmailAddressAuthenticationAppleId(jsonObject = jsonObject)
            "emailAddressAuthenticationCode" -> return deserializeEmailAddressAuthenticationCode(jsonObject = jsonObject)
            "emailAddressAuthenticationGoogleId" -> return deserializeEmailAddressAuthenticationGoogleId(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeEmailAddressResetState(jsonObject: JsonObject): EmailAddressResetState {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "emailAddressResetStateAvailable" -> return deserializeEmailAddressResetStateAvailable(jsonObject = jsonObject)
            "emailAddressResetStatePending" -> return deserializeEmailAddressResetStatePending(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeEmojiCategorySource(jsonObject: JsonObject): EmojiCategorySource {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "emojiCategorySourcePremium" -> return deserializeEmojiCategorySourcePremium(jsonObject = jsonObject)
            "emojiCategorySourceSearch" -> return deserializeEmojiCategorySourceSearch(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeEmojiCategoryType(jsonObject: JsonObject): EmojiCategoryType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "emojiCategoryTypeChatPhoto" -> return deserializeEmojiCategoryTypeChatPhoto(jsonObject = jsonObject)
            "emojiCategoryTypeDefault" -> return deserializeEmojiCategoryTypeDefault(jsonObject = jsonObject)
            "emojiCategoryTypeEmojiStatus" -> return deserializeEmojiCategoryTypeEmojiStatus(jsonObject = jsonObject)
            "emojiCategoryTypeRegularStickers" -> return deserializeEmojiCategoryTypeRegularStickers(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeEmojiStatusType(jsonObject: JsonObject): EmojiStatusType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "emojiStatusTypeCustomEmoji" -> return deserializeEmojiStatusTypeCustomEmoji(jsonObject = jsonObject)
            "emojiStatusTypeUpgradedGift" -> return deserializeEmojiStatusTypeUpgradedGift(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeFileType(jsonObject: JsonObject): FileType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "fileTypeAnimation" -> return deserializeFileTypeAnimation(jsonObject = jsonObject)
            "fileTypeAudio" -> return deserializeFileTypeAudio(jsonObject = jsonObject)
            "fileTypeDocument" -> return deserializeFileTypeDocument(jsonObject = jsonObject)
            "fileTypeNone" -> return deserializeFileTypeNone(jsonObject = jsonObject)
            "fileTypeNotificationSound" -> return deserializeFileTypeNotificationSound(jsonObject = jsonObject)
            "fileTypePhoto" -> return deserializeFileTypePhoto(jsonObject = jsonObject)
            "fileTypePhotoStory" -> return deserializeFileTypePhotoStory(jsonObject = jsonObject)
            "fileTypeProfilePhoto" -> return deserializeFileTypeProfilePhoto(jsonObject = jsonObject)
            "fileTypeSecret" -> return deserializeFileTypeSecret(jsonObject = jsonObject)
            "fileTypeSecretThumbnail" -> return deserializeFileTypeSecretThumbnail(jsonObject = jsonObject)
            "fileTypeSecure" -> return deserializeFileTypeSecure(jsonObject = jsonObject)
            "fileTypeSelfDestructingPhoto" -> return deserializeFileTypeSelfDestructingPhoto(jsonObject = jsonObject)
            "fileTypeSelfDestructingVideo" -> return deserializeFileTypeSelfDestructingVideo(jsonObject = jsonObject)
            "fileTypeSelfDestructingVideoNote" -> return deserializeFileTypeSelfDestructingVideoNote(jsonObject = jsonObject)
            "fileTypeSelfDestructingVoiceNote" -> return deserializeFileTypeSelfDestructingVoiceNote(jsonObject = jsonObject)
            "fileTypeSticker" -> return deserializeFileTypeSticker(jsonObject = jsonObject)
            "fileTypeThumbnail" -> return deserializeFileTypeThumbnail(jsonObject = jsonObject)
            "fileTypeUnknown" -> return deserializeFileTypeUnknown(jsonObject = jsonObject)
            "fileTypeVideo" -> return deserializeFileTypeVideo(jsonObject = jsonObject)
            "fileTypeVideoNote" -> return deserializeFileTypeVideoNote(jsonObject = jsonObject)
            "fileTypeVideoStory" -> return deserializeFileTypeVideoStory(jsonObject = jsonObject)
            "fileTypeVoiceNote" -> return deserializeFileTypeVoiceNote(jsonObject = jsonObject)
            "fileTypeWallpaper" -> return deserializeFileTypeWallpaper(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeFirebaseAuthenticationSettings(jsonObject: JsonObject): FirebaseAuthenticationSettings {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "firebaseAuthenticationSettingsAndroid" -> return deserializeFirebaseAuthenticationSettingsAndroid(jsonObject = jsonObject)
            "firebaseAuthenticationSettingsIos" -> return deserializeFirebaseAuthenticationSettingsIos(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeFirebaseDeviceVerificationParameters(jsonObject: JsonObject): FirebaseDeviceVerificationParameters {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "firebaseDeviceVerificationParametersPlayIntegrity" -> return deserializeFirebaseDeviceVerificationParametersPlayIntegrity(jsonObject = jsonObject)
            "firebaseDeviceVerificationParametersSafetyNet" -> return deserializeFirebaseDeviceVerificationParametersSafetyNet(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeGiftForResaleOrder(jsonObject: JsonObject): GiftForResaleOrder {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "giftForResaleOrderNumber" -> return deserializeGiftForResaleOrderNumber(jsonObject = jsonObject)
            "giftForResaleOrderPrice" -> return deserializeGiftForResaleOrderPrice(jsonObject = jsonObject)
            "giftForResaleOrderPriceChangeDate" -> return deserializeGiftForResaleOrderPriceChangeDate(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeGiveawayInfo(jsonObject: JsonObject): GiveawayInfo {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "giveawayInfoCompleted" -> return deserializeGiveawayInfoCompleted(jsonObject = jsonObject)
            "giveawayInfoOngoing" -> return deserializeGiveawayInfoOngoing(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeGiveawayParticipantStatus(jsonObject: JsonObject): GiveawayParticipantStatus {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "giveawayParticipantStatusAdministrator" -> return deserializeGiveawayParticipantStatusAdministrator(jsonObject = jsonObject)
            "giveawayParticipantStatusAlreadyWasMember" -> return deserializeGiveawayParticipantStatusAlreadyWasMember(jsonObject = jsonObject)
            "giveawayParticipantStatusDisallowedCountry" -> return deserializeGiveawayParticipantStatusDisallowedCountry(jsonObject = jsonObject)
            "giveawayParticipantStatusEligible" -> return deserializeGiveawayParticipantStatusEligible(jsonObject = jsonObject)
            "giveawayParticipantStatusParticipating" -> return deserializeGiveawayParticipantStatusParticipating(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeGiveawayPrize(jsonObject: JsonObject): GiveawayPrize {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "giveawayPrizePremium" -> return deserializeGiveawayPrizePremium(jsonObject = jsonObject)
            "giveawayPrizeStars" -> return deserializeGiveawayPrizeStars(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeGroupCallDataChannel(jsonObject: JsonObject): GroupCallDataChannel {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "groupCallDataChannelMain" -> return deserializeGroupCallDataChannelMain(jsonObject = jsonObject)
            "groupCallDataChannelScreenSharing" -> return deserializeGroupCallDataChannelScreenSharing(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeGroupCallVideoQuality(jsonObject: JsonObject): GroupCallVideoQuality {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "groupCallVideoQualityFull" -> return deserializeGroupCallVideoQualityFull(jsonObject = jsonObject)
            "groupCallVideoQualityMedium" -> return deserializeGroupCallVideoQualityMedium(jsonObject = jsonObject)
            "groupCallVideoQualityThumbnail" -> return deserializeGroupCallVideoQualityThumbnail(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInlineKeyboardButtonType(jsonObject: JsonObject): InlineKeyboardButtonType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inlineKeyboardButtonTypeBuy" -> return deserializeInlineKeyboardButtonTypeBuy(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeCallback" -> return deserializeInlineKeyboardButtonTypeCallback(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeCallbackGame" -> return deserializeInlineKeyboardButtonTypeCallbackGame(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeCallbackWithPassword" -> return deserializeInlineKeyboardButtonTypeCallbackWithPassword(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeCopyText" -> return deserializeInlineKeyboardButtonTypeCopyText(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeLoginUrl" -> return deserializeInlineKeyboardButtonTypeLoginUrl(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeSwitchInline" -> return deserializeInlineKeyboardButtonTypeSwitchInline(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeUrl" -> return deserializeInlineKeyboardButtonTypeUrl(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeUser" -> return deserializeInlineKeyboardButtonTypeUser(jsonObject = jsonObject)
            "inlineKeyboardButtonTypeWebApp" -> return deserializeInlineKeyboardButtonTypeWebApp(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInlineQueryResult(jsonObject: JsonObject): InlineQueryResult {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inlineQueryResultAnimation" -> return deserializeInlineQueryResultAnimation(jsonObject = jsonObject)
            "inlineQueryResultArticle" -> return deserializeInlineQueryResultArticle(jsonObject = jsonObject)
            "inlineQueryResultAudio" -> return deserializeInlineQueryResultAudio(jsonObject = jsonObject)
            "inlineQueryResultContact" -> return deserializeInlineQueryResultContact(jsonObject = jsonObject)
            "inlineQueryResultDocument" -> return deserializeInlineQueryResultDocument(jsonObject = jsonObject)
            "inlineQueryResultGame" -> return deserializeInlineQueryResultGame(jsonObject = jsonObject)
            "inlineQueryResultLocation" -> return deserializeInlineQueryResultLocation(jsonObject = jsonObject)
            "inlineQueryResultPhoto" -> return deserializeInlineQueryResultPhoto(jsonObject = jsonObject)
            "inlineQueryResultSticker" -> return deserializeInlineQueryResultSticker(jsonObject = jsonObject)
            "inlineQueryResultVenue" -> return deserializeInlineQueryResultVenue(jsonObject = jsonObject)
            "inlineQueryResultVideo" -> return deserializeInlineQueryResultVideo(jsonObject = jsonObject)
            "inlineQueryResultVoiceNote" -> return deserializeInlineQueryResultVoiceNote(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInlineQueryResultsButtonType(jsonObject: JsonObject): InlineQueryResultsButtonType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inlineQueryResultsButtonTypeStartBot" -> return deserializeInlineQueryResultsButtonTypeStartBot(jsonObject = jsonObject)
            "inlineQueryResultsButtonTypeWebApp" -> return deserializeInlineQueryResultsButtonTypeWebApp(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInputBackground(jsonObject: JsonObject): InputBackground {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inputBackgroundLocal" -> return deserializeInputBackgroundLocal(jsonObject = jsonObject)
            "inputBackgroundPrevious" -> return deserializeInputBackgroundPrevious(jsonObject = jsonObject)
            "inputBackgroundRemote" -> return deserializeInputBackgroundRemote(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInputChatPhoto(jsonObject: JsonObject): InputChatPhoto {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inputChatPhotoAnimation" -> return deserializeInputChatPhotoAnimation(jsonObject = jsonObject)
            "inputChatPhotoPrevious" -> return deserializeInputChatPhotoPrevious(jsonObject = jsonObject)
            "inputChatPhotoStatic" -> return deserializeInputChatPhotoStatic(jsonObject = jsonObject)
            "inputChatPhotoSticker" -> return deserializeInputChatPhotoSticker(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInputCredentials(jsonObject: JsonObject): InputCredentials {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inputCredentialsApplePay" -> return deserializeInputCredentialsApplePay(jsonObject = jsonObject)
            "inputCredentialsGooglePay" -> return deserializeInputCredentialsGooglePay(jsonObject = jsonObject)
            "inputCredentialsNew" -> return deserializeInputCredentialsNew(jsonObject = jsonObject)
            "inputCredentialsSaved" -> return deserializeInputCredentialsSaved(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInputFile(jsonObject: JsonObject): InputFile {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inputFileGenerated" -> return deserializeInputFileGenerated(jsonObject = jsonObject)
            "inputFileId" -> return deserializeInputFileId(jsonObject = jsonObject)
            "inputFileLocal" -> return deserializeInputFileLocal(jsonObject = jsonObject)
            "inputFileRemote" -> return deserializeInputFileRemote(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInputGroupCall(jsonObject: JsonObject): InputGroupCall {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inputGroupCallLink" -> return deserializeInputGroupCallLink(jsonObject = jsonObject)
            "inputGroupCallMessage" -> return deserializeInputGroupCallMessage(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInputInlineQueryResult(jsonObject: JsonObject): InputInlineQueryResult {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inputInlineQueryResultAnimation" -> return deserializeInputInlineQueryResultAnimation(jsonObject = jsonObject)
            "inputInlineQueryResultArticle" -> return deserializeInputInlineQueryResultArticle(jsonObject = jsonObject)
            "inputInlineQueryResultAudio" -> return deserializeInputInlineQueryResultAudio(jsonObject = jsonObject)
            "inputInlineQueryResultContact" -> return deserializeInputInlineQueryResultContact(jsonObject = jsonObject)
            "inputInlineQueryResultDocument" -> return deserializeInputInlineQueryResultDocument(jsonObject = jsonObject)
            "inputInlineQueryResultGame" -> return deserializeInputInlineQueryResultGame(jsonObject = jsonObject)
            "inputInlineQueryResultLocation" -> return deserializeInputInlineQueryResultLocation(jsonObject = jsonObject)
            "inputInlineQueryResultPhoto" -> return deserializeInputInlineQueryResultPhoto(jsonObject = jsonObject)
            "inputInlineQueryResultSticker" -> return deserializeInputInlineQueryResultSticker(jsonObject = jsonObject)
            "inputInlineQueryResultVenue" -> return deserializeInputInlineQueryResultVenue(jsonObject = jsonObject)
            "inputInlineQueryResultVideo" -> return deserializeInputInlineQueryResultVideo(jsonObject = jsonObject)
            "inputInlineQueryResultVoiceNote" -> return deserializeInputInlineQueryResultVoiceNote(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInputInvoice(jsonObject: JsonObject): InputInvoice {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inputInvoiceMessage" -> return deserializeInputInvoiceMessage(jsonObject = jsonObject)
            "inputInvoiceName" -> return deserializeInputInvoiceName(jsonObject = jsonObject)
            "inputInvoiceTelegram" -> return deserializeInputInvoiceTelegram(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInputMessageContent(jsonObject: JsonObject): InputMessageContent {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inputMessageAnimation" -> return deserializeInputMessageAnimation(jsonObject = jsonObject)
            "inputMessageAudio" -> return deserializeInputMessageAudio(jsonObject = jsonObject)
            "inputMessageChecklist" -> return deserializeInputMessageChecklist(jsonObject = jsonObject)
            "inputMessageContact" -> return deserializeInputMessageContact(jsonObject = jsonObject)
            "inputMessageDice" -> return deserializeInputMessageDice(jsonObject = jsonObject)
            "inputMessageDocument" -> return deserializeInputMessageDocument(jsonObject = jsonObject)
            "inputMessageForwarded" -> return deserializeInputMessageForwarded(jsonObject = jsonObject)
            "inputMessageGame" -> return deserializeInputMessageGame(jsonObject = jsonObject)
            "inputMessageInvoice" -> return deserializeInputMessageInvoice(jsonObject = jsonObject)
            "inputMessageLocation" -> return deserializeInputMessageLocation(jsonObject = jsonObject)
            "inputMessagePaidMedia" -> return deserializeInputMessagePaidMedia(jsonObject = jsonObject)
            "inputMessagePhoto" -> return deserializeInputMessagePhoto(jsonObject = jsonObject)
            "inputMessagePoll" -> return deserializeInputMessagePoll(jsonObject = jsonObject)
            "inputMessageSticker" -> return deserializeInputMessageSticker(jsonObject = jsonObject)
            "inputMessageStory" -> return deserializeInputMessageStory(jsonObject = jsonObject)
            "inputMessageText" -> return deserializeInputMessageText(jsonObject = jsonObject)
            "inputMessageVenue" -> return deserializeInputMessageVenue(jsonObject = jsonObject)
            "inputMessageVideo" -> return deserializeInputMessageVideo(jsonObject = jsonObject)
            "inputMessageVideoNote" -> return deserializeInputMessageVideoNote(jsonObject = jsonObject)
            "inputMessageVoiceNote" -> return deserializeInputMessageVoiceNote(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInputMessageReplyTo(jsonObject: JsonObject): InputMessageReplyTo {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inputMessageReplyToExternalMessage" -> return deserializeInputMessageReplyToExternalMessage(jsonObject = jsonObject)
            "inputMessageReplyToMessage" -> return deserializeInputMessageReplyToMessage(jsonObject = jsonObject)
            "inputMessageReplyToStory" -> return deserializeInputMessageReplyToStory(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInputPaidMediaType(jsonObject: JsonObject): InputPaidMediaType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inputPaidMediaTypePhoto" -> return deserializeInputPaidMediaTypePhoto(jsonObject = jsonObject)
            "inputPaidMediaTypeVideo" -> return deserializeInputPaidMediaTypeVideo(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInputPassportElement(jsonObject: JsonObject): InputPassportElement {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inputPassportElementAddress" -> return deserializeInputPassportElementAddress(jsonObject = jsonObject)
            "inputPassportElementBankStatement" -> return deserializeInputPassportElementBankStatement(jsonObject = jsonObject)
            "inputPassportElementDriverLicense" -> return deserializeInputPassportElementDriverLicense(jsonObject = jsonObject)
            "inputPassportElementEmailAddress" -> return deserializeInputPassportElementEmailAddress(jsonObject = jsonObject)
            "inputPassportElementIdentityCard" -> return deserializeInputPassportElementIdentityCard(jsonObject = jsonObject)
            "inputPassportElementInternalPassport" -> return deserializeInputPassportElementInternalPassport(jsonObject = jsonObject)
            "inputPassportElementPassport" -> return deserializeInputPassportElementPassport(jsonObject = jsonObject)
            "inputPassportElementPassportRegistration" -> return deserializeInputPassportElementPassportRegistration(jsonObject = jsonObject)
            "inputPassportElementPersonalDetails" -> return deserializeInputPassportElementPersonalDetails(jsonObject = jsonObject)
            "inputPassportElementPhoneNumber" -> return deserializeInputPassportElementPhoneNumber(jsonObject = jsonObject)
            "inputPassportElementRentalAgreement" -> return deserializeInputPassportElementRentalAgreement(jsonObject = jsonObject)
            "inputPassportElementTemporaryRegistration" -> return deserializeInputPassportElementTemporaryRegistration(jsonObject = jsonObject)
            "inputPassportElementUtilityBill" -> return deserializeInputPassportElementUtilityBill(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInputPassportElementErrorSource(jsonObject: JsonObject): InputPassportElementErrorSource {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inputPassportElementErrorSourceDataField" -> return deserializeInputPassportElementErrorSourceDataField(jsonObject = jsonObject)
            "inputPassportElementErrorSourceFile" -> return deserializeInputPassportElementErrorSourceFile(jsonObject = jsonObject)
            "inputPassportElementErrorSourceFiles" -> return deserializeInputPassportElementErrorSourceFiles(jsonObject = jsonObject)
            "inputPassportElementErrorSourceFrontSide" -> return deserializeInputPassportElementErrorSourceFrontSide(jsonObject = jsonObject)
            "inputPassportElementErrorSourceReverseSide" -> return deserializeInputPassportElementErrorSourceReverseSide(jsonObject = jsonObject)
            "inputPassportElementErrorSourceSelfie" -> return deserializeInputPassportElementErrorSourceSelfie(jsonObject = jsonObject)
            "inputPassportElementErrorSourceTranslationFile" -> return deserializeInputPassportElementErrorSourceTranslationFile(jsonObject = jsonObject)
            "inputPassportElementErrorSourceTranslationFiles" -> return deserializeInputPassportElementErrorSourceTranslationFiles(jsonObject = jsonObject)
            "inputPassportElementErrorSourceUnspecified" -> return deserializeInputPassportElementErrorSourceUnspecified(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInputStoryAreaType(jsonObject: JsonObject): InputStoryAreaType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inputStoryAreaTypeFoundVenue" -> return deserializeInputStoryAreaTypeFoundVenue(jsonObject = jsonObject)
            "inputStoryAreaTypeLink" -> return deserializeInputStoryAreaTypeLink(jsonObject = jsonObject)
            "inputStoryAreaTypeLocation" -> return deserializeInputStoryAreaTypeLocation(jsonObject = jsonObject)
            "inputStoryAreaTypeMessage" -> return deserializeInputStoryAreaTypeMessage(jsonObject = jsonObject)
            "inputStoryAreaTypePreviousVenue" -> return deserializeInputStoryAreaTypePreviousVenue(jsonObject = jsonObject)
            "inputStoryAreaTypeSuggestedReaction" -> return deserializeInputStoryAreaTypeSuggestedReaction(jsonObject = jsonObject)
            "inputStoryAreaTypeUpgradedGift" -> return deserializeInputStoryAreaTypeUpgradedGift(jsonObject = jsonObject)
            "inputStoryAreaTypeWeather" -> return deserializeInputStoryAreaTypeWeather(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInputStoryContent(jsonObject: JsonObject): InputStoryContent {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inputStoryContentPhoto" -> return deserializeInputStoryContentPhoto(jsonObject = jsonObject)
            "inputStoryContentVideo" -> return deserializeInputStoryContentVideo(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInternalLinkType(jsonObject: JsonObject): InternalLinkType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "internalLinkTypeActiveSessions" -> return deserializeInternalLinkTypeActiveSessions(jsonObject = jsonObject)
            "internalLinkTypeAttachmentMenuBot" -> return deserializeInternalLinkTypeAttachmentMenuBot(jsonObject = jsonObject)
            "internalLinkTypeAuthenticationCode" -> return deserializeInternalLinkTypeAuthenticationCode(jsonObject = jsonObject)
            "internalLinkTypeBackground" -> return deserializeInternalLinkTypeBackground(jsonObject = jsonObject)
            "internalLinkTypeBotAddToChannel" -> return deserializeInternalLinkTypeBotAddToChannel(jsonObject = jsonObject)
            "internalLinkTypeBotStart" -> return deserializeInternalLinkTypeBotStart(jsonObject = jsonObject)
            "internalLinkTypeBotStartInGroup" -> return deserializeInternalLinkTypeBotStartInGroup(jsonObject = jsonObject)
            "internalLinkTypeBusinessChat" -> return deserializeInternalLinkTypeBusinessChat(jsonObject = jsonObject)
            "internalLinkTypeBuyStars" -> return deserializeInternalLinkTypeBuyStars(jsonObject = jsonObject)
            "internalLinkTypeChangePhoneNumber" -> return deserializeInternalLinkTypeChangePhoneNumber(jsonObject = jsonObject)
            "internalLinkTypeChatAffiliateProgram" -> return deserializeInternalLinkTypeChatAffiliateProgram(jsonObject = jsonObject)
            "internalLinkTypeChatBoost" -> return deserializeInternalLinkTypeChatBoost(jsonObject = jsonObject)
            "internalLinkTypeChatFolderInvite" -> return deserializeInternalLinkTypeChatFolderInvite(jsonObject = jsonObject)
            "internalLinkTypeChatFolderSettings" -> return deserializeInternalLinkTypeChatFolderSettings(jsonObject = jsonObject)
            "internalLinkTypeChatInvite" -> return deserializeInternalLinkTypeChatInvite(jsonObject = jsonObject)
            "internalLinkTypeDefaultMessageAutoDeleteTimerSettings" -> return deserializeInternalLinkTypeDefaultMessageAutoDeleteTimerSettings(jsonObject = jsonObject)
            "internalLinkTypeEditProfileSettings" -> return deserializeInternalLinkTypeEditProfileSettings(jsonObject = jsonObject)
            "internalLinkTypeGame" -> return deserializeInternalLinkTypeGame(jsonObject = jsonObject)
            "internalLinkTypeGroupCall" -> return deserializeInternalLinkTypeGroupCall(jsonObject = jsonObject)
            "internalLinkTypeInstantView" -> return deserializeInternalLinkTypeInstantView(jsonObject = jsonObject)
            "internalLinkTypeInvoice" -> return deserializeInternalLinkTypeInvoice(jsonObject = jsonObject)
            "internalLinkTypeLanguagePack" -> return deserializeInternalLinkTypeLanguagePack(jsonObject = jsonObject)
            "internalLinkTypeLanguageSettings" -> return deserializeInternalLinkTypeLanguageSettings(jsonObject = jsonObject)
            "internalLinkTypeMainWebApp" -> return deserializeInternalLinkTypeMainWebApp(jsonObject = jsonObject)
            "internalLinkTypeMessage" -> return deserializeInternalLinkTypeMessage(jsonObject = jsonObject)
            "internalLinkTypeMessageDraft" -> return deserializeInternalLinkTypeMessageDraft(jsonObject = jsonObject)
            "internalLinkTypeMyStars" -> return deserializeInternalLinkTypeMyStars(jsonObject = jsonObject)
            "internalLinkTypePassportDataRequest" -> return deserializeInternalLinkTypePassportDataRequest(jsonObject = jsonObject)
            "internalLinkTypePhoneNumberConfirmation" -> return deserializeInternalLinkTypePhoneNumberConfirmation(jsonObject = jsonObject)
            "internalLinkTypePremiumFeatures" -> return deserializeInternalLinkTypePremiumFeatures(jsonObject = jsonObject)
            "internalLinkTypePremiumGift" -> return deserializeInternalLinkTypePremiumGift(jsonObject = jsonObject)
            "internalLinkTypePremiumGiftCode" -> return deserializeInternalLinkTypePremiumGiftCode(jsonObject = jsonObject)
            "internalLinkTypePrivacyAndSecuritySettings" -> return deserializeInternalLinkTypePrivacyAndSecuritySettings(jsonObject = jsonObject)
            "internalLinkTypeProxy" -> return deserializeInternalLinkTypeProxy(jsonObject = jsonObject)
            "internalLinkTypePublicChat" -> return deserializeInternalLinkTypePublicChat(jsonObject = jsonObject)
            "internalLinkTypeQrCodeAuthentication" -> return deserializeInternalLinkTypeQrCodeAuthentication(jsonObject = jsonObject)
            "internalLinkTypeRestorePurchases" -> return deserializeInternalLinkTypeRestorePurchases(jsonObject = jsonObject)
            "internalLinkTypeSettings" -> return deserializeInternalLinkTypeSettings(jsonObject = jsonObject)
            "internalLinkTypeStickerSet" -> return deserializeInternalLinkTypeStickerSet(jsonObject = jsonObject)
            "internalLinkTypeStory" -> return deserializeInternalLinkTypeStory(jsonObject = jsonObject)
            "internalLinkTypeTheme" -> return deserializeInternalLinkTypeTheme(jsonObject = jsonObject)
            "internalLinkTypeThemeSettings" -> return deserializeInternalLinkTypeThemeSettings(jsonObject = jsonObject)
            "internalLinkTypeUnknownDeepLink" -> return deserializeInternalLinkTypeUnknownDeepLink(jsonObject = jsonObject)
            "internalLinkTypeUnsupportedProxy" -> return deserializeInternalLinkTypeUnsupportedProxy(jsonObject = jsonObject)
            "internalLinkTypeUpgradedGift" -> return deserializeInternalLinkTypeUpgradedGift(jsonObject = jsonObject)
            "internalLinkTypeUserPhoneNumber" -> return deserializeInternalLinkTypeUserPhoneNumber(jsonObject = jsonObject)
            "internalLinkTypeUserToken" -> return deserializeInternalLinkTypeUserToken(jsonObject = jsonObject)
            "internalLinkTypeVideoChat" -> return deserializeInternalLinkTypeVideoChat(jsonObject = jsonObject)
            "internalLinkTypeWebApp" -> return deserializeInternalLinkTypeWebApp(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInviteGroupCallParticipantResult(jsonObject: JsonObject): InviteGroupCallParticipantResult {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inviteGroupCallParticipantResultSuccess" -> return deserializeInviteGroupCallParticipantResultSuccess(jsonObject = jsonObject)
            "inviteGroupCallParticipantResultUserAlreadyParticipant" -> return deserializeInviteGroupCallParticipantResultUserAlreadyParticipant(jsonObject = jsonObject)
            "inviteGroupCallParticipantResultUserPrivacyRestricted" -> return deserializeInviteGroupCallParticipantResultUserPrivacyRestricted(jsonObject = jsonObject)
            "inviteGroupCallParticipantResultUserWasBanned" -> return deserializeInviteGroupCallParticipantResultUserWasBanned(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeInviteLinkChatType(jsonObject: JsonObject): InviteLinkChatType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "inviteLinkChatTypeBasicGroup" -> return deserializeInviteLinkChatTypeBasicGroup(jsonObject = jsonObject)
            "inviteLinkChatTypeChannel" -> return deserializeInviteLinkChatTypeChannel(jsonObject = jsonObject)
            "inviteLinkChatTypeSupergroup" -> return deserializeInviteLinkChatTypeSupergroup(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeJsonValue(jsonObject: JsonObject): JsonValue {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "jsonValueArray" -> return deserializeJsonValueArray(jsonObject = jsonObject)
            "jsonValueBoolean" -> return deserializeJsonValueBoolean(jsonObject = jsonObject)
            "jsonValueNull" -> return deserializeJsonValueNull(jsonObject = jsonObject)
            "jsonValueNumber" -> return deserializeJsonValueNumber(jsonObject = jsonObject)
            "jsonValueObject" -> return deserializeJsonValueObject(jsonObject = jsonObject)
            "jsonValueString" -> return deserializeJsonValueString(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeKeyboardButtonType(jsonObject: JsonObject): KeyboardButtonType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "keyboardButtonTypeRequestChat" -> return deserializeKeyboardButtonTypeRequestChat(jsonObject = jsonObject)
            "keyboardButtonTypeRequestLocation" -> return deserializeKeyboardButtonTypeRequestLocation(jsonObject = jsonObject)
            "keyboardButtonTypeRequestPhoneNumber" -> return deserializeKeyboardButtonTypeRequestPhoneNumber(jsonObject = jsonObject)
            "keyboardButtonTypeRequestPoll" -> return deserializeKeyboardButtonTypeRequestPoll(jsonObject = jsonObject)
            "keyboardButtonTypeRequestUsers" -> return deserializeKeyboardButtonTypeRequestUsers(jsonObject = jsonObject)
            "keyboardButtonTypeText" -> return deserializeKeyboardButtonTypeText(jsonObject = jsonObject)
            "keyboardButtonTypeWebApp" -> return deserializeKeyboardButtonTypeWebApp(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeLanguagePackStringValue(jsonObject: JsonObject): LanguagePackStringValue {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "languagePackStringValueDeleted" -> return deserializeLanguagePackStringValueDeleted(jsonObject = jsonObject)
            "languagePackStringValueOrdinary" -> return deserializeLanguagePackStringValueOrdinary(jsonObject = jsonObject)
            "languagePackStringValuePluralized" -> return deserializeLanguagePackStringValuePluralized(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeLinkPreviewAlbumMedia(jsonObject: JsonObject): LinkPreviewAlbumMedia {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "linkPreviewAlbumMediaPhoto" -> return deserializeLinkPreviewAlbumMediaPhoto(jsonObject = jsonObject)
            "linkPreviewAlbumMediaVideo" -> return deserializeLinkPreviewAlbumMediaVideo(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeLinkPreviewType(jsonObject: JsonObject): LinkPreviewType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "linkPreviewTypeAlbum" -> return deserializeLinkPreviewTypeAlbum(jsonObject = jsonObject)
            "linkPreviewTypeAnimation" -> return deserializeLinkPreviewTypeAnimation(jsonObject = jsonObject)
            "linkPreviewTypeApp" -> return deserializeLinkPreviewTypeApp(jsonObject = jsonObject)
            "linkPreviewTypeArticle" -> return deserializeLinkPreviewTypeArticle(jsonObject = jsonObject)
            "linkPreviewTypeAudio" -> return deserializeLinkPreviewTypeAudio(jsonObject = jsonObject)
            "linkPreviewTypeBackground" -> return deserializeLinkPreviewTypeBackground(jsonObject = jsonObject)
            "linkPreviewTypeChannelBoost" -> return deserializeLinkPreviewTypeChannelBoost(jsonObject = jsonObject)
            "linkPreviewTypeChat" -> return deserializeLinkPreviewTypeChat(jsonObject = jsonObject)
            "linkPreviewTypeDocument" -> return deserializeLinkPreviewTypeDocument(jsonObject = jsonObject)
            "linkPreviewTypeEmbeddedAnimationPlayer" -> return deserializeLinkPreviewTypeEmbeddedAnimationPlayer(jsonObject = jsonObject)
            "linkPreviewTypeEmbeddedAudioPlayer" -> return deserializeLinkPreviewTypeEmbeddedAudioPlayer(jsonObject = jsonObject)
            "linkPreviewTypeEmbeddedVideoPlayer" -> return deserializeLinkPreviewTypeEmbeddedVideoPlayer(jsonObject = jsonObject)
            "linkPreviewTypeExternalAudio" -> return deserializeLinkPreviewTypeExternalAudio(jsonObject = jsonObject)
            "linkPreviewTypeExternalVideo" -> return deserializeLinkPreviewTypeExternalVideo(jsonObject = jsonObject)
            "linkPreviewTypeGroupCall" -> return deserializeLinkPreviewTypeGroupCall(jsonObject = jsonObject)
            "linkPreviewTypeInvoice" -> return deserializeLinkPreviewTypeInvoice(jsonObject = jsonObject)
            "linkPreviewTypeMessage" -> return deserializeLinkPreviewTypeMessage(jsonObject = jsonObject)
            "linkPreviewTypePhoto" -> return deserializeLinkPreviewTypePhoto(jsonObject = jsonObject)
            "linkPreviewTypePremiumGiftCode" -> return deserializeLinkPreviewTypePremiumGiftCode(jsonObject = jsonObject)
            "linkPreviewTypeShareableChatFolder" -> return deserializeLinkPreviewTypeShareableChatFolder(jsonObject = jsonObject)
            "linkPreviewTypeSticker" -> return deserializeLinkPreviewTypeSticker(jsonObject = jsonObject)
            "linkPreviewTypeStickerSet" -> return deserializeLinkPreviewTypeStickerSet(jsonObject = jsonObject)
            "linkPreviewTypeStory" -> return deserializeLinkPreviewTypeStory(jsonObject = jsonObject)
            "linkPreviewTypeSupergroupBoost" -> return deserializeLinkPreviewTypeSupergroupBoost(jsonObject = jsonObject)
            "linkPreviewTypeTheme" -> return deserializeLinkPreviewTypeTheme(jsonObject = jsonObject)
            "linkPreviewTypeUnsupported" -> return deserializeLinkPreviewTypeUnsupported(jsonObject = jsonObject)
            "linkPreviewTypeUpgradedGift" -> return deserializeLinkPreviewTypeUpgradedGift(jsonObject = jsonObject)
            "linkPreviewTypeUser" -> return deserializeLinkPreviewTypeUser(jsonObject = jsonObject)
            "linkPreviewTypeVideo" -> return deserializeLinkPreviewTypeVideo(jsonObject = jsonObject)
            "linkPreviewTypeVideoChat" -> return deserializeLinkPreviewTypeVideoChat(jsonObject = jsonObject)
            "linkPreviewTypeVideoNote" -> return deserializeLinkPreviewTypeVideoNote(jsonObject = jsonObject)
            "linkPreviewTypeVoiceNote" -> return deserializeLinkPreviewTypeVoiceNote(jsonObject = jsonObject)
            "linkPreviewTypeWebApp" -> return deserializeLinkPreviewTypeWebApp(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeLogStream(jsonObject: JsonObject): LogStream {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "logStreamDefault" -> return deserializeLogStreamDefault(jsonObject = jsonObject)
            "logStreamEmpty" -> return deserializeLogStreamEmpty(jsonObject = jsonObject)
            "logStreamFile" -> return deserializeLogStreamFile(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeLoginUrlInfo(jsonObject: JsonObject): LoginUrlInfo {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "loginUrlInfoOpen" -> return deserializeLoginUrlInfoOpen(jsonObject = jsonObject)
            "loginUrlInfoRequestConfirmation" -> return deserializeLoginUrlInfoRequestConfirmation(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeMaskPoint(jsonObject: JsonObject): MaskPoint {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "maskPointChin" -> return deserializeMaskPointChin(jsonObject = jsonObject)
            "maskPointEyes" -> return deserializeMaskPointEyes(jsonObject = jsonObject)
            "maskPointForehead" -> return deserializeMaskPointForehead(jsonObject = jsonObject)
            "maskPointMouth" -> return deserializeMaskPointMouth(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeMessageContent(jsonObject: JsonObject): MessageContent {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "messageAnimatedEmoji" -> return deserializeMessageAnimatedEmoji(jsonObject = jsonObject)
            "messageAnimation" -> return deserializeMessageAnimation(jsonObject = jsonObject)
            "messageAudio" -> return deserializeMessageAudio(jsonObject = jsonObject)
            "messageBasicGroupChatCreate" -> return deserializeMessageBasicGroupChatCreate(jsonObject = jsonObject)
            "messageBotWriteAccessAllowed" -> return deserializeMessageBotWriteAccessAllowed(jsonObject = jsonObject)
            "messageCall" -> return deserializeMessageCall(jsonObject = jsonObject)
            "messageChatAddMembers" -> return deserializeMessageChatAddMembers(jsonObject = jsonObject)
            "messageChatBoost" -> return deserializeMessageChatBoost(jsonObject = jsonObject)
            "messageChatChangePhoto" -> return deserializeMessageChatChangePhoto(jsonObject = jsonObject)
            "messageChatChangeTitle" -> return deserializeMessageChatChangeTitle(jsonObject = jsonObject)
            "messageChatDeleteMember" -> return deserializeMessageChatDeleteMember(jsonObject = jsonObject)
            "messageChatDeletePhoto" -> return deserializeMessageChatDeletePhoto(jsonObject = jsonObject)
            "messageChatJoinByLink" -> return deserializeMessageChatJoinByLink(jsonObject = jsonObject)
            "messageChatJoinByRequest" -> return deserializeMessageChatJoinByRequest(jsonObject = jsonObject)
            "messageChatSetBackground" -> return deserializeMessageChatSetBackground(jsonObject = jsonObject)
            "messageChatSetMessageAutoDeleteTime" -> return deserializeMessageChatSetMessageAutoDeleteTime(jsonObject = jsonObject)
            "messageChatSetTheme" -> return deserializeMessageChatSetTheme(jsonObject = jsonObject)
            "messageChatShared" -> return deserializeMessageChatShared(jsonObject = jsonObject)
            "messageChatUpgradeFrom" -> return deserializeMessageChatUpgradeFrom(jsonObject = jsonObject)
            "messageChatUpgradeTo" -> return deserializeMessageChatUpgradeTo(jsonObject = jsonObject)
            "messageChecklist" -> return deserializeMessageChecklist(jsonObject = jsonObject)
            "messageChecklistTasksAdded" -> return deserializeMessageChecklistTasksAdded(jsonObject = jsonObject)
            "messageChecklistTasksDone" -> return deserializeMessageChecklistTasksDone(jsonObject = jsonObject)
            "messageContact" -> return deserializeMessageContact(jsonObject = jsonObject)
            "messageContactRegistered" -> return deserializeMessageContactRegistered(jsonObject = jsonObject)
            "messageCustomServiceAction" -> return deserializeMessageCustomServiceAction(jsonObject = jsonObject)
            "messageDice" -> return deserializeMessageDice(jsonObject = jsonObject)
            "messageDirectMessagePriceChanged" -> return deserializeMessageDirectMessagePriceChanged(jsonObject = jsonObject)
            "messageDocument" -> return deserializeMessageDocument(jsonObject = jsonObject)
            "messageExpiredPhoto" -> return deserializeMessageExpiredPhoto(jsonObject = jsonObject)
            "messageExpiredVideo" -> return deserializeMessageExpiredVideo(jsonObject = jsonObject)
            "messageExpiredVideoNote" -> return deserializeMessageExpiredVideoNote(jsonObject = jsonObject)
            "messageExpiredVoiceNote" -> return deserializeMessageExpiredVoiceNote(jsonObject = jsonObject)
            "messageForumTopicCreated" -> return deserializeMessageForumTopicCreated(jsonObject = jsonObject)
            "messageForumTopicEdited" -> return deserializeMessageForumTopicEdited(jsonObject = jsonObject)
            "messageForumTopicIsClosedToggled" -> return deserializeMessageForumTopicIsClosedToggled(jsonObject = jsonObject)
            "messageForumTopicIsHiddenToggled" -> return deserializeMessageForumTopicIsHiddenToggled(jsonObject = jsonObject)
            "messageGame" -> return deserializeMessageGame(jsonObject = jsonObject)
            "messageGameScore" -> return deserializeMessageGameScore(jsonObject = jsonObject)
            "messageGift" -> return deserializeMessageGift(jsonObject = jsonObject)
            "messageGiftedPremium" -> return deserializeMessageGiftedPremium(jsonObject = jsonObject)
            "messageGiftedStars" -> return deserializeMessageGiftedStars(jsonObject = jsonObject)
            "messageGiveaway" -> return deserializeMessageGiveaway(jsonObject = jsonObject)
            "messageGiveawayCompleted" -> return deserializeMessageGiveawayCompleted(jsonObject = jsonObject)
            "messageGiveawayCreated" -> return deserializeMessageGiveawayCreated(jsonObject = jsonObject)
            "messageGiveawayPrizeStars" -> return deserializeMessageGiveawayPrizeStars(jsonObject = jsonObject)
            "messageGiveawayWinners" -> return deserializeMessageGiveawayWinners(jsonObject = jsonObject)
            "messageGroupCall" -> return deserializeMessageGroupCall(jsonObject = jsonObject)
            "messageInviteVideoChatParticipants" -> return deserializeMessageInviteVideoChatParticipants(jsonObject = jsonObject)
            "messageInvoice" -> return deserializeMessageInvoice(jsonObject = jsonObject)
            "messageLocation" -> return deserializeMessageLocation(jsonObject = jsonObject)
            "messagePaidMedia" -> return deserializeMessagePaidMedia(jsonObject = jsonObject)
            "messagePaidMessagePriceChanged" -> return deserializeMessagePaidMessagePriceChanged(jsonObject = jsonObject)
            "messagePaidMessagesRefunded" -> return deserializeMessagePaidMessagesRefunded(jsonObject = jsonObject)
            "messagePassportDataReceived" -> return deserializeMessagePassportDataReceived(jsonObject = jsonObject)
            "messagePassportDataSent" -> return deserializeMessagePassportDataSent(jsonObject = jsonObject)
            "messagePaymentRefunded" -> return deserializeMessagePaymentRefunded(jsonObject = jsonObject)
            "messagePaymentSuccessful" -> return deserializeMessagePaymentSuccessful(jsonObject = jsonObject)
            "messagePaymentSuccessfulBot" -> return deserializeMessagePaymentSuccessfulBot(jsonObject = jsonObject)
            "messagePhoto" -> return deserializeMessagePhoto(jsonObject = jsonObject)
            "messagePinMessage" -> return deserializeMessagePinMessage(jsonObject = jsonObject)
            "messagePoll" -> return deserializeMessagePoll(jsonObject = jsonObject)
            "messagePremiumGiftCode" -> return deserializeMessagePremiumGiftCode(jsonObject = jsonObject)
            "messageProximityAlertTriggered" -> return deserializeMessageProximityAlertTriggered(jsonObject = jsonObject)
            "messageRefundedUpgradedGift" -> return deserializeMessageRefundedUpgradedGift(jsonObject = jsonObject)
            "messageScreenshotTaken" -> return deserializeMessageScreenshotTaken(jsonObject = jsonObject)
            "messageSticker" -> return deserializeMessageSticker(jsonObject = jsonObject)
            "messageStory" -> return deserializeMessageStory(jsonObject = jsonObject)
            "messageSuggestProfilePhoto" -> return deserializeMessageSuggestProfilePhoto(jsonObject = jsonObject)
            "messageSupergroupChatCreate" -> return deserializeMessageSupergroupChatCreate(jsonObject = jsonObject)
            "messageText" -> return deserializeMessageText(jsonObject = jsonObject)
            "messageUnsupported" -> return deserializeMessageUnsupported(jsonObject = jsonObject)
            "messageUpgradedGift" -> return deserializeMessageUpgradedGift(jsonObject = jsonObject)
            "messageUsersShared" -> return deserializeMessageUsersShared(jsonObject = jsonObject)
            "messageVenue" -> return deserializeMessageVenue(jsonObject = jsonObject)
            "messageVideo" -> return deserializeMessageVideo(jsonObject = jsonObject)
            "messageVideoChatEnded" -> return deserializeMessageVideoChatEnded(jsonObject = jsonObject)
            "messageVideoChatScheduled" -> return deserializeMessageVideoChatScheduled(jsonObject = jsonObject)
            "messageVideoChatStarted" -> return deserializeMessageVideoChatStarted(jsonObject = jsonObject)
            "messageVideoNote" -> return deserializeMessageVideoNote(jsonObject = jsonObject)
            "messageVoiceNote" -> return deserializeMessageVoiceNote(jsonObject = jsonObject)
            "messageWebAppDataReceived" -> return deserializeMessageWebAppDataReceived(jsonObject = jsonObject)
            "messageWebAppDataSent" -> return deserializeMessageWebAppDataSent(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeMessageEffectType(jsonObject: JsonObject): MessageEffectType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "messageEffectTypeEmojiReaction" -> return deserializeMessageEffectTypeEmojiReaction(jsonObject = jsonObject)
            "messageEffectTypePremiumSticker" -> return deserializeMessageEffectTypePremiumSticker(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeMessageFileType(jsonObject: JsonObject): MessageFileType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "messageFileTypeGroup" -> return deserializeMessageFileTypeGroup(jsonObject = jsonObject)
            "messageFileTypePrivate" -> return deserializeMessageFileTypePrivate(jsonObject = jsonObject)
            "messageFileTypeUnknown" -> return deserializeMessageFileTypeUnknown(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeMessageOrigin(jsonObject: JsonObject): MessageOrigin {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "messageOriginChannel" -> return deserializeMessageOriginChannel(jsonObject = jsonObject)
            "messageOriginChat" -> return deserializeMessageOriginChat(jsonObject = jsonObject)
            "messageOriginHiddenUser" -> return deserializeMessageOriginHiddenUser(jsonObject = jsonObject)
            "messageOriginUser" -> return deserializeMessageOriginUser(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeMessageReadDate(jsonObject: JsonObject): MessageReadDate {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "messageReadDateMyPrivacyRestricted" -> return deserializeMessageReadDateMyPrivacyRestricted(jsonObject = jsonObject)
            "messageReadDateRead" -> return deserializeMessageReadDateRead(jsonObject = jsonObject)
            "messageReadDateTooOld" -> return deserializeMessageReadDateTooOld(jsonObject = jsonObject)
            "messageReadDateUnread" -> return deserializeMessageReadDateUnread(jsonObject = jsonObject)
            "messageReadDateUserPrivacyRestricted" -> return deserializeMessageReadDateUserPrivacyRestricted(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeMessageReplyTo(jsonObject: JsonObject): MessageReplyTo {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "messageReplyToMessage" -> return deserializeMessageReplyToMessage(jsonObject = jsonObject)
            "messageReplyToStory" -> return deserializeMessageReplyToStory(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeMessageSchedulingState(jsonObject: JsonObject): MessageSchedulingState {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "messageSchedulingStateSendAtDate" -> return deserializeMessageSchedulingStateSendAtDate(jsonObject = jsonObject)
            "messageSchedulingStateSendWhenOnline" -> return deserializeMessageSchedulingStateSendWhenOnline(jsonObject = jsonObject)
            "messageSchedulingStateSendWhenVideoProcessed" -> return deserializeMessageSchedulingStateSendWhenVideoProcessed(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeMessageSelfDestructType(jsonObject: JsonObject): MessageSelfDestructType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "messageSelfDestructTypeImmediately" -> return deserializeMessageSelfDestructTypeImmediately(jsonObject = jsonObject)
            "messageSelfDestructTypeTimer" -> return deserializeMessageSelfDestructTypeTimer(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeMessageSender(jsonObject: JsonObject): MessageSender {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "messageSenderChat" -> return deserializeMessageSenderChat(jsonObject = jsonObject)
            "messageSenderUser" -> return deserializeMessageSenderUser(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeMessageSendingState(jsonObject: JsonObject): MessageSendingState {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "messageSendingStateFailed" -> return deserializeMessageSendingStateFailed(jsonObject = jsonObject)
            "messageSendingStatePending" -> return deserializeMessageSendingStatePending(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeMessageSource(jsonObject: JsonObject): MessageSource {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "messageSourceChatEventLog" -> return deserializeMessageSourceChatEventLog(jsonObject = jsonObject)
            "messageSourceChatHistory" -> return deserializeMessageSourceChatHistory(jsonObject = jsonObject)
            "messageSourceChatList" -> return deserializeMessageSourceChatList(jsonObject = jsonObject)
            "messageSourceDirectMessagesChatTopicHistory" -> return deserializeMessageSourceDirectMessagesChatTopicHistory(jsonObject = jsonObject)
            "messageSourceForumTopicHistory" -> return deserializeMessageSourceForumTopicHistory(jsonObject = jsonObject)
            "messageSourceHistoryPreview" -> return deserializeMessageSourceHistoryPreview(jsonObject = jsonObject)
            "messageSourceMessageThreadHistory" -> return deserializeMessageSourceMessageThreadHistory(jsonObject = jsonObject)
            "messageSourceNotification" -> return deserializeMessageSourceNotification(jsonObject = jsonObject)
            "messageSourceOther" -> return deserializeMessageSourceOther(jsonObject = jsonObject)
            "messageSourceScreenshot" -> return deserializeMessageSourceScreenshot(jsonObject = jsonObject)
            "messageSourceSearch" -> return deserializeMessageSourceSearch(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeMessageTopic(jsonObject: JsonObject): MessageTopic {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "messageTopicDirectMessages" -> return deserializeMessageTopicDirectMessages(jsonObject = jsonObject)
            "messageTopicForum" -> return deserializeMessageTopicForum(jsonObject = jsonObject)
            "messageTopicSavedMessages" -> return deserializeMessageTopicSavedMessages(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeNetworkStatisticsEntry(jsonObject: JsonObject): NetworkStatisticsEntry {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "networkStatisticsEntryCall" -> return deserializeNetworkStatisticsEntryCall(jsonObject = jsonObject)
            "networkStatisticsEntryFile" -> return deserializeNetworkStatisticsEntryFile(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeNetworkType(jsonObject: JsonObject): NetworkType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "networkTypeMobile" -> return deserializeNetworkTypeMobile(jsonObject = jsonObject)
            "networkTypeMobileRoaming" -> return deserializeNetworkTypeMobileRoaming(jsonObject = jsonObject)
            "networkTypeNone" -> return deserializeNetworkTypeNone(jsonObject = jsonObject)
            "networkTypeOther" -> return deserializeNetworkTypeOther(jsonObject = jsonObject)
            "networkTypeWiFi" -> return deserializeNetworkTypeWiFi(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeNotificationGroupType(jsonObject: JsonObject): NotificationGroupType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "notificationGroupTypeCalls" -> return deserializeNotificationGroupTypeCalls(jsonObject = jsonObject)
            "notificationGroupTypeMentions" -> return deserializeNotificationGroupTypeMentions(jsonObject = jsonObject)
            "notificationGroupTypeMessages" -> return deserializeNotificationGroupTypeMessages(jsonObject = jsonObject)
            "notificationGroupTypeSecretChat" -> return deserializeNotificationGroupTypeSecretChat(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeNotificationSettingsScope(jsonObject: JsonObject): NotificationSettingsScope {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "notificationSettingsScopeChannelChats" -> return deserializeNotificationSettingsScopeChannelChats(jsonObject = jsonObject)
            "notificationSettingsScopeGroupChats" -> return deserializeNotificationSettingsScopeGroupChats(jsonObject = jsonObject)
            "notificationSettingsScopePrivateChats" -> return deserializeNotificationSettingsScopePrivateChats(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeNotificationType(jsonObject: JsonObject): NotificationType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "notificationTypeNewCall" -> return deserializeNotificationTypeNewCall(jsonObject = jsonObject)
            "notificationTypeNewMessage" -> return deserializeNotificationTypeNewMessage(jsonObject = jsonObject)
            "notificationTypeNewPushMessage" -> return deserializeNotificationTypeNewPushMessage(jsonObject = jsonObject)
            "notificationTypeNewSecretChat" -> return deserializeNotificationTypeNewSecretChat(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeOptionValue(jsonObject: JsonObject): OptionValue {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "optionValueBoolean" -> return deserializeOptionValueBoolean(jsonObject = jsonObject)
            "optionValueEmpty" -> return deserializeOptionValueEmpty(jsonObject = jsonObject)
            "optionValueInteger" -> return deserializeOptionValueInteger(jsonObject = jsonObject)
            "optionValueString" -> return deserializeOptionValueString(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePageBlock(jsonObject: JsonObject): PageBlock {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "pageBlockAnchor" -> return deserializePageBlockAnchor(jsonObject = jsonObject)
            "pageBlockAnimation" -> return deserializePageBlockAnimation(jsonObject = jsonObject)
            "pageBlockAudio" -> return deserializePageBlockAudio(jsonObject = jsonObject)
            "pageBlockAuthorDate" -> return deserializePageBlockAuthorDate(jsonObject = jsonObject)
            "pageBlockBlockQuote" -> return deserializePageBlockBlockQuote(jsonObject = jsonObject)
            "pageBlockChatLink" -> return deserializePageBlockChatLink(jsonObject = jsonObject)
            "pageBlockCollage" -> return deserializePageBlockCollage(jsonObject = jsonObject)
            "pageBlockCover" -> return deserializePageBlockCover(jsonObject = jsonObject)
            "pageBlockDetails" -> return deserializePageBlockDetails(jsonObject = jsonObject)
            "pageBlockDivider" -> return deserializePageBlockDivider(jsonObject = jsonObject)
            "pageBlockEmbedded" -> return deserializePageBlockEmbedded(jsonObject = jsonObject)
            "pageBlockEmbeddedPost" -> return deserializePageBlockEmbeddedPost(jsonObject = jsonObject)
            "pageBlockFooter" -> return deserializePageBlockFooter(jsonObject = jsonObject)
            "pageBlockHeader" -> return deserializePageBlockHeader(jsonObject = jsonObject)
            "pageBlockKicker" -> return deserializePageBlockKicker(jsonObject = jsonObject)
            "pageBlockList" -> return deserializePageBlockList(jsonObject = jsonObject)
            "pageBlockMap" -> return deserializePageBlockMap(jsonObject = jsonObject)
            "pageBlockParagraph" -> return deserializePageBlockParagraph(jsonObject = jsonObject)
            "pageBlockPhoto" -> return deserializePageBlockPhoto(jsonObject = jsonObject)
            "pageBlockPreformatted" -> return deserializePageBlockPreformatted(jsonObject = jsonObject)
            "pageBlockPullQuote" -> return deserializePageBlockPullQuote(jsonObject = jsonObject)
            "pageBlockRelatedArticles" -> return deserializePageBlockRelatedArticles(jsonObject = jsonObject)
            "pageBlockSlideshow" -> return deserializePageBlockSlideshow(jsonObject = jsonObject)
            "pageBlockSubheader" -> return deserializePageBlockSubheader(jsonObject = jsonObject)
            "pageBlockSubtitle" -> return deserializePageBlockSubtitle(jsonObject = jsonObject)
            "pageBlockTable" -> return deserializePageBlockTable(jsonObject = jsonObject)
            "pageBlockTitle" -> return deserializePageBlockTitle(jsonObject = jsonObject)
            "pageBlockVideo" -> return deserializePageBlockVideo(jsonObject = jsonObject)
            "pageBlockVoiceNote" -> return deserializePageBlockVoiceNote(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePageBlockHorizontalAlignment(jsonObject: JsonObject): PageBlockHorizontalAlignment {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "pageBlockHorizontalAlignmentCenter" -> return deserializePageBlockHorizontalAlignmentCenter(jsonObject = jsonObject)
            "pageBlockHorizontalAlignmentLeft" -> return deserializePageBlockHorizontalAlignmentLeft(jsonObject = jsonObject)
            "pageBlockHorizontalAlignmentRight" -> return deserializePageBlockHorizontalAlignmentRight(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePageBlockVerticalAlignment(jsonObject: JsonObject): PageBlockVerticalAlignment {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "pageBlockVerticalAlignmentBottom" -> return deserializePageBlockVerticalAlignmentBottom(jsonObject = jsonObject)
            "pageBlockVerticalAlignmentMiddle" -> return deserializePageBlockVerticalAlignmentMiddle(jsonObject = jsonObject)
            "pageBlockVerticalAlignmentTop" -> return deserializePageBlockVerticalAlignmentTop(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePaidMedia(jsonObject: JsonObject): PaidMedia {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "paidMediaPhoto" -> return deserializePaidMediaPhoto(jsonObject = jsonObject)
            "paidMediaPreview" -> return deserializePaidMediaPreview(jsonObject = jsonObject)
            "paidMediaUnsupported" -> return deserializePaidMediaUnsupported(jsonObject = jsonObject)
            "paidMediaVideo" -> return deserializePaidMediaVideo(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePaidReactionType(jsonObject: JsonObject): PaidReactionType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "paidReactionTypeAnonymous" -> return deserializePaidReactionTypeAnonymous(jsonObject = jsonObject)
            "paidReactionTypeChat" -> return deserializePaidReactionTypeChat(jsonObject = jsonObject)
            "paidReactionTypeRegular" -> return deserializePaidReactionTypeRegular(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePassportElement(jsonObject: JsonObject): PassportElement {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "passportElementAddress" -> return deserializePassportElementAddress(jsonObject = jsonObject)
            "passportElementBankStatement" -> return deserializePassportElementBankStatement(jsonObject = jsonObject)
            "passportElementDriverLicense" -> return deserializePassportElementDriverLicense(jsonObject = jsonObject)
            "passportElementEmailAddress" -> return deserializePassportElementEmailAddress(jsonObject = jsonObject)
            "passportElementIdentityCard" -> return deserializePassportElementIdentityCard(jsonObject = jsonObject)
            "passportElementInternalPassport" -> return deserializePassportElementInternalPassport(jsonObject = jsonObject)
            "passportElementPassport" -> return deserializePassportElementPassport(jsonObject = jsonObject)
            "passportElementPassportRegistration" -> return deserializePassportElementPassportRegistration(jsonObject = jsonObject)
            "passportElementPersonalDetails" -> return deserializePassportElementPersonalDetails(jsonObject = jsonObject)
            "passportElementPhoneNumber" -> return deserializePassportElementPhoneNumber(jsonObject = jsonObject)
            "passportElementRentalAgreement" -> return deserializePassportElementRentalAgreement(jsonObject = jsonObject)
            "passportElementTemporaryRegistration" -> return deserializePassportElementTemporaryRegistration(jsonObject = jsonObject)
            "passportElementUtilityBill" -> return deserializePassportElementUtilityBill(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePassportElementErrorSource(jsonObject: JsonObject): PassportElementErrorSource {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "passportElementErrorSourceDataField" -> return deserializePassportElementErrorSourceDataField(jsonObject = jsonObject)
            "passportElementErrorSourceFile" -> return deserializePassportElementErrorSourceFile(jsonObject = jsonObject)
            "passportElementErrorSourceFiles" -> return deserializePassportElementErrorSourceFiles(jsonObject = jsonObject)
            "passportElementErrorSourceFrontSide" -> return deserializePassportElementErrorSourceFrontSide(jsonObject = jsonObject)
            "passportElementErrorSourceReverseSide" -> return deserializePassportElementErrorSourceReverseSide(jsonObject = jsonObject)
            "passportElementErrorSourceSelfie" -> return deserializePassportElementErrorSourceSelfie(jsonObject = jsonObject)
            "passportElementErrorSourceTranslationFile" -> return deserializePassportElementErrorSourceTranslationFile(jsonObject = jsonObject)
            "passportElementErrorSourceTranslationFiles" -> return deserializePassportElementErrorSourceTranslationFiles(jsonObject = jsonObject)
            "passportElementErrorSourceUnspecified" -> return deserializePassportElementErrorSourceUnspecified(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePassportElementType(jsonObject: JsonObject): PassportElementType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "passportElementTypeAddress" -> return deserializePassportElementTypeAddress(jsonObject = jsonObject)
            "passportElementTypeBankStatement" -> return deserializePassportElementTypeBankStatement(jsonObject = jsonObject)
            "passportElementTypeDriverLicense" -> return deserializePassportElementTypeDriverLicense(jsonObject = jsonObject)
            "passportElementTypeEmailAddress" -> return deserializePassportElementTypeEmailAddress(jsonObject = jsonObject)
            "passportElementTypeIdentityCard" -> return deserializePassportElementTypeIdentityCard(jsonObject = jsonObject)
            "passportElementTypeInternalPassport" -> return deserializePassportElementTypeInternalPassport(jsonObject = jsonObject)
            "passportElementTypePassport" -> return deserializePassportElementTypePassport(jsonObject = jsonObject)
            "passportElementTypePassportRegistration" -> return deserializePassportElementTypePassportRegistration(jsonObject = jsonObject)
            "passportElementTypePersonalDetails" -> return deserializePassportElementTypePersonalDetails(jsonObject = jsonObject)
            "passportElementTypePhoneNumber" -> return deserializePassportElementTypePhoneNumber(jsonObject = jsonObject)
            "passportElementTypeRentalAgreement" -> return deserializePassportElementTypeRentalAgreement(jsonObject = jsonObject)
            "passportElementTypeTemporaryRegistration" -> return deserializePassportElementTypeTemporaryRegistration(jsonObject = jsonObject)
            "passportElementTypeUtilityBill" -> return deserializePassportElementTypeUtilityBill(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePaymentFormType(jsonObject: JsonObject): PaymentFormType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "paymentFormTypeRegular" -> return deserializePaymentFormTypeRegular(jsonObject = jsonObject)
            "paymentFormTypeStarSubscription" -> return deserializePaymentFormTypeStarSubscription(jsonObject = jsonObject)
            "paymentFormTypeStars" -> return deserializePaymentFormTypeStars(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePaymentProvider(jsonObject: JsonObject): PaymentProvider {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "paymentProviderOther" -> return deserializePaymentProviderOther(jsonObject = jsonObject)
            "paymentProviderSmartGlocal" -> return deserializePaymentProviderSmartGlocal(jsonObject = jsonObject)
            "paymentProviderStripe" -> return deserializePaymentProviderStripe(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePaymentReceiptType(jsonObject: JsonObject): PaymentReceiptType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "paymentReceiptTypeRegular" -> return deserializePaymentReceiptTypeRegular(jsonObject = jsonObject)
            "paymentReceiptTypeStars" -> return deserializePaymentReceiptTypeStars(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePhoneNumberCodeType(jsonObject: JsonObject): PhoneNumberCodeType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "phoneNumberCodeTypeChange" -> return deserializePhoneNumberCodeTypeChange(jsonObject = jsonObject)
            "phoneNumberCodeTypeConfirmOwnership" -> return deserializePhoneNumberCodeTypeConfirmOwnership(jsonObject = jsonObject)
            "phoneNumberCodeTypeVerify" -> return deserializePhoneNumberCodeTypeVerify(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePollType(jsonObject: JsonObject): PollType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "pollTypeQuiz" -> return deserializePollTypeQuiz(jsonObject = jsonObject)
            "pollTypeRegular" -> return deserializePollTypeRegular(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePremiumFeature(jsonObject: JsonObject): PremiumFeature {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "premiumFeatureAccentColor" -> return deserializePremiumFeatureAccentColor(jsonObject = jsonObject)
            "premiumFeatureAdvancedChatManagement" -> return deserializePremiumFeatureAdvancedChatManagement(jsonObject = jsonObject)
            "premiumFeatureAnimatedProfilePhoto" -> return deserializePremiumFeatureAnimatedProfilePhoto(jsonObject = jsonObject)
            "premiumFeatureAppIcons" -> return deserializePremiumFeatureAppIcons(jsonObject = jsonObject)
            "premiumFeatureBackgroundForBoth" -> return deserializePremiumFeatureBackgroundForBoth(jsonObject = jsonObject)
            "premiumFeatureBusiness" -> return deserializePremiumFeatureBusiness(jsonObject = jsonObject)
            "premiumFeatureChatBoost" -> return deserializePremiumFeatureChatBoost(jsonObject = jsonObject)
            "premiumFeatureChecklists" -> return deserializePremiumFeatureChecklists(jsonObject = jsonObject)
            "premiumFeatureCustomEmoji" -> return deserializePremiumFeatureCustomEmoji(jsonObject = jsonObject)
            "premiumFeatureDisabledAds" -> return deserializePremiumFeatureDisabledAds(jsonObject = jsonObject)
            "premiumFeatureEmojiStatus" -> return deserializePremiumFeatureEmojiStatus(jsonObject = jsonObject)
            "premiumFeatureForumTopicIcon" -> return deserializePremiumFeatureForumTopicIcon(jsonObject = jsonObject)
            "premiumFeatureImprovedDownloadSpeed" -> return deserializePremiumFeatureImprovedDownloadSpeed(jsonObject = jsonObject)
            "premiumFeatureIncreasedLimits" -> return deserializePremiumFeatureIncreasedLimits(jsonObject = jsonObject)
            "premiumFeatureIncreasedUploadFileSize" -> return deserializePremiumFeatureIncreasedUploadFileSize(jsonObject = jsonObject)
            "premiumFeatureLastSeenTimes" -> return deserializePremiumFeatureLastSeenTimes(jsonObject = jsonObject)
            "premiumFeatureMessageEffects" -> return deserializePremiumFeatureMessageEffects(jsonObject = jsonObject)
            "premiumFeatureMessagePrivacy" -> return deserializePremiumFeatureMessagePrivacy(jsonObject = jsonObject)
            "premiumFeatureProfileBadge" -> return deserializePremiumFeatureProfileBadge(jsonObject = jsonObject)
            "premiumFeatureRealTimeChatTranslation" -> return deserializePremiumFeatureRealTimeChatTranslation(jsonObject = jsonObject)
            "premiumFeatureSavedMessagesTags" -> return deserializePremiumFeatureSavedMessagesTags(jsonObject = jsonObject)
            "premiumFeatureUniqueReactions" -> return deserializePremiumFeatureUniqueReactions(jsonObject = jsonObject)
            "premiumFeatureUniqueStickers" -> return deserializePremiumFeatureUniqueStickers(jsonObject = jsonObject)
            "premiumFeatureUpgradedStories" -> return deserializePremiumFeatureUpgradedStories(jsonObject = jsonObject)
            "premiumFeatureVoiceRecognition" -> return deserializePremiumFeatureVoiceRecognition(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePremiumLimitType(jsonObject: JsonObject): PremiumLimitType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "premiumLimitTypeActiveStoryCount" -> return deserializePremiumLimitTypeActiveStoryCount(jsonObject = jsonObject)
            "premiumLimitTypeBioLength" -> return deserializePremiumLimitTypeBioLength(jsonObject = jsonObject)
            "premiumLimitTypeCaptionLength" -> return deserializePremiumLimitTypeCaptionLength(jsonObject = jsonObject)
            "premiumLimitTypeChatFolderChosenChatCount" -> return deserializePremiumLimitTypeChatFolderChosenChatCount(jsonObject = jsonObject)
            "premiumLimitTypeChatFolderCount" -> return deserializePremiumLimitTypeChatFolderCount(jsonObject = jsonObject)
            "premiumLimitTypeChatFolderInviteLinkCount" -> return deserializePremiumLimitTypeChatFolderInviteLinkCount(jsonObject = jsonObject)
            "premiumLimitTypeCreatedPublicChatCount" -> return deserializePremiumLimitTypeCreatedPublicChatCount(jsonObject = jsonObject)
            "premiumLimitTypeFavoriteStickerCount" -> return deserializePremiumLimitTypeFavoriteStickerCount(jsonObject = jsonObject)
            "premiumLimitTypeMonthlyPostedStoryCount" -> return deserializePremiumLimitTypeMonthlyPostedStoryCount(jsonObject = jsonObject)
            "premiumLimitTypePinnedArchivedChatCount" -> return deserializePremiumLimitTypePinnedArchivedChatCount(jsonObject = jsonObject)
            "premiumLimitTypePinnedChatCount" -> return deserializePremiumLimitTypePinnedChatCount(jsonObject = jsonObject)
            "premiumLimitTypePinnedSavedMessagesTopicCount" -> return deserializePremiumLimitTypePinnedSavedMessagesTopicCount(jsonObject = jsonObject)
            "premiumLimitTypeSavedAnimationCount" -> return deserializePremiumLimitTypeSavedAnimationCount(jsonObject = jsonObject)
            "premiumLimitTypeShareableChatFolderCount" -> return deserializePremiumLimitTypeShareableChatFolderCount(jsonObject = jsonObject)
            "premiumLimitTypeSimilarChatCount" -> return deserializePremiumLimitTypeSimilarChatCount(jsonObject = jsonObject)
            "premiumLimitTypeStoryCaptionLength" -> return deserializePremiumLimitTypeStoryCaptionLength(jsonObject = jsonObject)
            "premiumLimitTypeStorySuggestedReactionAreaCount" -> return deserializePremiumLimitTypeStorySuggestedReactionAreaCount(jsonObject = jsonObject)
            "premiumLimitTypeSupergroupCount" -> return deserializePremiumLimitTypeSupergroupCount(jsonObject = jsonObject)
            "premiumLimitTypeWeeklyPostedStoryCount" -> return deserializePremiumLimitTypeWeeklyPostedStoryCount(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePremiumSource(jsonObject: JsonObject): PremiumSource {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "premiumSourceBusinessFeature" -> return deserializePremiumSourceBusinessFeature(jsonObject = jsonObject)
            "premiumSourceFeature" -> return deserializePremiumSourceFeature(jsonObject = jsonObject)
            "premiumSourceLimitExceeded" -> return deserializePremiumSourceLimitExceeded(jsonObject = jsonObject)
            "premiumSourceLink" -> return deserializePremiumSourceLink(jsonObject = jsonObject)
            "premiumSourceSettings" -> return deserializePremiumSourceSettings(jsonObject = jsonObject)
            "premiumSourceStoryFeature" -> return deserializePremiumSourceStoryFeature(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePremiumStoryFeature(jsonObject: JsonObject): PremiumStoryFeature {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "premiumStoryFeatureCustomExpirationDuration" -> return deserializePremiumStoryFeatureCustomExpirationDuration(jsonObject = jsonObject)
            "premiumStoryFeatureLinksAndFormatting" -> return deserializePremiumStoryFeatureLinksAndFormatting(jsonObject = jsonObject)
            "premiumStoryFeaturePermanentViewsHistory" -> return deserializePremiumStoryFeaturePermanentViewsHistory(jsonObject = jsonObject)
            "premiumStoryFeaturePriorityOrder" -> return deserializePremiumStoryFeaturePriorityOrder(jsonObject = jsonObject)
            "premiumStoryFeatureSaveStories" -> return deserializePremiumStoryFeatureSaveStories(jsonObject = jsonObject)
            "premiumStoryFeatureStealthMode" -> return deserializePremiumStoryFeatureStealthMode(jsonObject = jsonObject)
            "premiumStoryFeatureVideoQuality" -> return deserializePremiumStoryFeatureVideoQuality(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeProxyType(jsonObject: JsonObject): ProxyType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "proxyTypeHttp" -> return deserializeProxyTypeHttp(jsonObject = jsonObject)
            "proxyTypeMtproto" -> return deserializeProxyTypeMtproto(jsonObject = jsonObject)
            "proxyTypeSocks5" -> return deserializeProxyTypeSocks5(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePublicChatType(jsonObject: JsonObject): PublicChatType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "publicChatTypeHasUsername" -> return deserializePublicChatTypeHasUsername(jsonObject = jsonObject)
            "publicChatTypeIsLocationBased" -> return deserializePublicChatTypeIsLocationBased(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePublicForward(jsonObject: JsonObject): PublicForward {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "publicForwardMessage" -> return deserializePublicForwardMessage(jsonObject = jsonObject)
            "publicForwardStory" -> return deserializePublicForwardStory(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializePushMessageContent(jsonObject: JsonObject): PushMessageContent {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "pushMessageContentAnimation" -> return deserializePushMessageContentAnimation(jsonObject = jsonObject)
            "pushMessageContentAudio" -> return deserializePushMessageContentAudio(jsonObject = jsonObject)
            "pushMessageContentBasicGroupChatCreate" -> return deserializePushMessageContentBasicGroupChatCreate(jsonObject = jsonObject)
            "pushMessageContentChatAddMembers" -> return deserializePushMessageContentChatAddMembers(jsonObject = jsonObject)
            "pushMessageContentChatChangePhoto" -> return deserializePushMessageContentChatChangePhoto(jsonObject = jsonObject)
            "pushMessageContentChatChangeTitle" -> return deserializePushMessageContentChatChangeTitle(jsonObject = jsonObject)
            "pushMessageContentChatDeleteMember" -> return deserializePushMessageContentChatDeleteMember(jsonObject = jsonObject)
            "pushMessageContentChatJoinByLink" -> return deserializePushMessageContentChatJoinByLink(jsonObject = jsonObject)
            "pushMessageContentChatJoinByRequest" -> return deserializePushMessageContentChatJoinByRequest(jsonObject = jsonObject)
            "pushMessageContentChatSetBackground" -> return deserializePushMessageContentChatSetBackground(jsonObject = jsonObject)
            "pushMessageContentChatSetTheme" -> return deserializePushMessageContentChatSetTheme(jsonObject = jsonObject)
            "pushMessageContentChecklist" -> return deserializePushMessageContentChecklist(jsonObject = jsonObject)
            "pushMessageContentChecklistTasksAdded" -> return deserializePushMessageContentChecklistTasksAdded(jsonObject = jsonObject)
            "pushMessageContentChecklistTasksDone" -> return deserializePushMessageContentChecklistTasksDone(jsonObject = jsonObject)
            "pushMessageContentContact" -> return deserializePushMessageContentContact(jsonObject = jsonObject)
            "pushMessageContentContactRegistered" -> return deserializePushMessageContentContactRegistered(jsonObject = jsonObject)
            "pushMessageContentDocument" -> return deserializePushMessageContentDocument(jsonObject = jsonObject)
            "pushMessageContentGame" -> return deserializePushMessageContentGame(jsonObject = jsonObject)
            "pushMessageContentGameScore" -> return deserializePushMessageContentGameScore(jsonObject = jsonObject)
            "pushMessageContentGift" -> return deserializePushMessageContentGift(jsonObject = jsonObject)
            "pushMessageContentGiveaway" -> return deserializePushMessageContentGiveaway(jsonObject = jsonObject)
            "pushMessageContentHidden" -> return deserializePushMessageContentHidden(jsonObject = jsonObject)
            "pushMessageContentInviteVideoChatParticipants" -> return deserializePushMessageContentInviteVideoChatParticipants(jsonObject = jsonObject)
            "pushMessageContentInvoice" -> return deserializePushMessageContentInvoice(jsonObject = jsonObject)
            "pushMessageContentLocation" -> return deserializePushMessageContentLocation(jsonObject = jsonObject)
            "pushMessageContentMediaAlbum" -> return deserializePushMessageContentMediaAlbum(jsonObject = jsonObject)
            "pushMessageContentMessageForwards" -> return deserializePushMessageContentMessageForwards(jsonObject = jsonObject)
            "pushMessageContentPaidMedia" -> return deserializePushMessageContentPaidMedia(jsonObject = jsonObject)
            "pushMessageContentPhoto" -> return deserializePushMessageContentPhoto(jsonObject = jsonObject)
            "pushMessageContentPoll" -> return deserializePushMessageContentPoll(jsonObject = jsonObject)
            "pushMessageContentPremiumGiftCode" -> return deserializePushMessageContentPremiumGiftCode(jsonObject = jsonObject)
            "pushMessageContentProximityAlertTriggered" -> return deserializePushMessageContentProximityAlertTriggered(jsonObject = jsonObject)
            "pushMessageContentRecurringPayment" -> return deserializePushMessageContentRecurringPayment(jsonObject = jsonObject)
            "pushMessageContentScreenshotTaken" -> return deserializePushMessageContentScreenshotTaken(jsonObject = jsonObject)
            "pushMessageContentSticker" -> return deserializePushMessageContentSticker(jsonObject = jsonObject)
            "pushMessageContentStory" -> return deserializePushMessageContentStory(jsonObject = jsonObject)
            "pushMessageContentSuggestProfilePhoto" -> return deserializePushMessageContentSuggestProfilePhoto(jsonObject = jsonObject)
            "pushMessageContentText" -> return deserializePushMessageContentText(jsonObject = jsonObject)
            "pushMessageContentUpgradedGift" -> return deserializePushMessageContentUpgradedGift(jsonObject = jsonObject)
            "pushMessageContentVideo" -> return deserializePushMessageContentVideo(jsonObject = jsonObject)
            "pushMessageContentVideoChatEnded" -> return deserializePushMessageContentVideoChatEnded(jsonObject = jsonObject)
            "pushMessageContentVideoChatStarted" -> return deserializePushMessageContentVideoChatStarted(jsonObject = jsonObject)
            "pushMessageContentVideoNote" -> return deserializePushMessageContentVideoNote(jsonObject = jsonObject)
            "pushMessageContentVoiceNote" -> return deserializePushMessageContentVoiceNote(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeReactionNotificationSource(jsonObject: JsonObject): ReactionNotificationSource {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "reactionNotificationSourceAll" -> return deserializeReactionNotificationSourceAll(jsonObject = jsonObject)
            "reactionNotificationSourceContacts" -> return deserializeReactionNotificationSourceContacts(jsonObject = jsonObject)
            "reactionNotificationSourceNone" -> return deserializeReactionNotificationSourceNone(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeReactionType(jsonObject: JsonObject): ReactionType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "reactionTypeCustomEmoji" -> return deserializeReactionTypeCustomEmoji(jsonObject = jsonObject)
            "reactionTypeEmoji" -> return deserializeReactionTypeEmoji(jsonObject = jsonObject)
            "reactionTypePaid" -> return deserializeReactionTypePaid(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeReactionUnavailabilityReason(jsonObject: JsonObject): ReactionUnavailabilityReason {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "reactionUnavailabilityReasonAnonymousAdministrator" -> return deserializeReactionUnavailabilityReasonAnonymousAdministrator(jsonObject = jsonObject)
            "reactionUnavailabilityReasonGuest" -> return deserializeReactionUnavailabilityReasonGuest(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeReplyMarkup(jsonObject: JsonObject): ReplyMarkup {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "replyMarkupForceReply" -> return deserializeReplyMarkupForceReply(jsonObject = jsonObject)
            "replyMarkupInlineKeyboard" -> return deserializeReplyMarkupInlineKeyboard(jsonObject = jsonObject)
            "replyMarkupRemoveKeyboard" -> return deserializeReplyMarkupRemoveKeyboard(jsonObject = jsonObject)
            "replyMarkupShowKeyboard" -> return deserializeReplyMarkupShowKeyboard(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeReportChatResult(jsonObject: JsonObject): ReportChatResult {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "reportChatResultMessagesRequired" -> return deserializeReportChatResultMessagesRequired(jsonObject = jsonObject)
            "reportChatResultOk" -> return deserializeReportChatResultOk(jsonObject = jsonObject)
            "reportChatResultOptionRequired" -> return deserializeReportChatResultOptionRequired(jsonObject = jsonObject)
            "reportChatResultTextRequired" -> return deserializeReportChatResultTextRequired(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeReportReason(jsonObject: JsonObject): ReportReason {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "reportReasonChildAbuse" -> return deserializeReportReasonChildAbuse(jsonObject = jsonObject)
            "reportReasonCopyright" -> return deserializeReportReasonCopyright(jsonObject = jsonObject)
            "reportReasonCustom" -> return deserializeReportReasonCustom(jsonObject = jsonObject)
            "reportReasonFake" -> return deserializeReportReasonFake(jsonObject = jsonObject)
            "reportReasonIllegalDrugs" -> return deserializeReportReasonIllegalDrugs(jsonObject = jsonObject)
            "reportReasonPersonalDetails" -> return deserializeReportReasonPersonalDetails(jsonObject = jsonObject)
            "reportReasonPornography" -> return deserializeReportReasonPornography(jsonObject = jsonObject)
            "reportReasonSpam" -> return deserializeReportReasonSpam(jsonObject = jsonObject)
            "reportReasonUnrelatedLocation" -> return deserializeReportReasonUnrelatedLocation(jsonObject = jsonObject)
            "reportReasonViolence" -> return deserializeReportReasonViolence(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeReportSponsoredResult(jsonObject: JsonObject): ReportSponsoredResult {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "reportSponsoredResultAdsHidden" -> return deserializeReportSponsoredResultAdsHidden(jsonObject = jsonObject)
            "reportSponsoredResultFailed" -> return deserializeReportSponsoredResultFailed(jsonObject = jsonObject)
            "reportSponsoredResultOk" -> return deserializeReportSponsoredResultOk(jsonObject = jsonObject)
            "reportSponsoredResultOptionRequired" -> return deserializeReportSponsoredResultOptionRequired(jsonObject = jsonObject)
            "reportSponsoredResultPremiumRequired" -> return deserializeReportSponsoredResultPremiumRequired(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeReportStoryResult(jsonObject: JsonObject): ReportStoryResult {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "reportStoryResultOk" -> return deserializeReportStoryResultOk(jsonObject = jsonObject)
            "reportStoryResultOptionRequired" -> return deserializeReportStoryResultOptionRequired(jsonObject = jsonObject)
            "reportStoryResultTextRequired" -> return deserializeReportStoryResultTextRequired(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeResendCodeReason(jsonObject: JsonObject): ResendCodeReason {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "resendCodeReasonUserRequest" -> return deserializeResendCodeReasonUserRequest(jsonObject = jsonObject)
            "resendCodeReasonVerificationFailed" -> return deserializeResendCodeReasonVerificationFailed(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeResetPasswordResult(jsonObject: JsonObject): ResetPasswordResult {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "resetPasswordResultDeclined" -> return deserializeResetPasswordResultDeclined(jsonObject = jsonObject)
            "resetPasswordResultOk" -> return deserializeResetPasswordResultOk(jsonObject = jsonObject)
            "resetPasswordResultPending" -> return deserializeResetPasswordResultPending(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeRevenueWithdrawalState(jsonObject: JsonObject): RevenueWithdrawalState {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "revenueWithdrawalStateFailed" -> return deserializeRevenueWithdrawalStateFailed(jsonObject = jsonObject)
            "revenueWithdrawalStatePending" -> return deserializeRevenueWithdrawalStatePending(jsonObject = jsonObject)
            "revenueWithdrawalStateSucceeded" -> return deserializeRevenueWithdrawalStateSucceeded(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeRichText(jsonObject: JsonObject): RichText {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "richTextAnchor" -> return deserializeRichTextAnchor(jsonObject = jsonObject)
            "richTextAnchorLink" -> return deserializeRichTextAnchorLink(jsonObject = jsonObject)
            "richTextBold" -> return deserializeRichTextBold(jsonObject = jsonObject)
            "richTextEmailAddress" -> return deserializeRichTextEmailAddress(jsonObject = jsonObject)
            "richTextFixed" -> return deserializeRichTextFixed(jsonObject = jsonObject)
            "richTextIcon" -> return deserializeRichTextIcon(jsonObject = jsonObject)
            "richTextItalic" -> return deserializeRichTextItalic(jsonObject = jsonObject)
            "richTextMarked" -> return deserializeRichTextMarked(jsonObject = jsonObject)
            "richTextPhoneNumber" -> return deserializeRichTextPhoneNumber(jsonObject = jsonObject)
            "richTextPlain" -> return deserializeRichTextPlain(jsonObject = jsonObject)
            "richTextReference" -> return deserializeRichTextReference(jsonObject = jsonObject)
            "richTextStrikethrough" -> return deserializeRichTextStrikethrough(jsonObject = jsonObject)
            "richTextSubscript" -> return deserializeRichTextSubscript(jsonObject = jsonObject)
            "richTextSuperscript" -> return deserializeRichTextSuperscript(jsonObject = jsonObject)
            "richTextUnderline" -> return deserializeRichTextUnderline(jsonObject = jsonObject)
            "richTextUrl" -> return deserializeRichTextUrl(jsonObject = jsonObject)
            "richTexts" -> return deserializeRichTexts(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeSavedMessagesTopicType(jsonObject: JsonObject): SavedMessagesTopicType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "savedMessagesTopicTypeAuthorHidden" -> return deserializeSavedMessagesTopicTypeAuthorHidden(jsonObject = jsonObject)
            "savedMessagesTopicTypeMyNotes" -> return deserializeSavedMessagesTopicTypeMyNotes(jsonObject = jsonObject)
            "savedMessagesTopicTypeSavedFromChat" -> return deserializeSavedMessagesTopicTypeSavedFromChat(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeSearchMessagesChatTypeFilter(jsonObject: JsonObject): SearchMessagesChatTypeFilter {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "searchMessagesChatTypeFilterChannel" -> return deserializeSearchMessagesChatTypeFilterChannel(jsonObject = jsonObject)
            "searchMessagesChatTypeFilterGroup" -> return deserializeSearchMessagesChatTypeFilterGroup(jsonObject = jsonObject)
            "searchMessagesChatTypeFilterPrivate" -> return deserializeSearchMessagesChatTypeFilterPrivate(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeSearchMessagesFilter(jsonObject: JsonObject): SearchMessagesFilter {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "searchMessagesFilterAnimation" -> return deserializeSearchMessagesFilterAnimation(jsonObject = jsonObject)
            "searchMessagesFilterAudio" -> return deserializeSearchMessagesFilterAudio(jsonObject = jsonObject)
            "searchMessagesFilterChatPhoto" -> return deserializeSearchMessagesFilterChatPhoto(jsonObject = jsonObject)
            "searchMessagesFilterDocument" -> return deserializeSearchMessagesFilterDocument(jsonObject = jsonObject)
            "searchMessagesFilterEmpty" -> return deserializeSearchMessagesFilterEmpty(jsonObject = jsonObject)
            "searchMessagesFilterFailedToSend" -> return deserializeSearchMessagesFilterFailedToSend(jsonObject = jsonObject)
            "searchMessagesFilterMention" -> return deserializeSearchMessagesFilterMention(jsonObject = jsonObject)
            "searchMessagesFilterPhoto" -> return deserializeSearchMessagesFilterPhoto(jsonObject = jsonObject)
            "searchMessagesFilterPhotoAndVideo" -> return deserializeSearchMessagesFilterPhotoAndVideo(jsonObject = jsonObject)
            "searchMessagesFilterPinned" -> return deserializeSearchMessagesFilterPinned(jsonObject = jsonObject)
            "searchMessagesFilterUnreadMention" -> return deserializeSearchMessagesFilterUnreadMention(jsonObject = jsonObject)
            "searchMessagesFilterUnreadReaction" -> return deserializeSearchMessagesFilterUnreadReaction(jsonObject = jsonObject)
            "searchMessagesFilterUrl" -> return deserializeSearchMessagesFilterUrl(jsonObject = jsonObject)
            "searchMessagesFilterVideo" -> return deserializeSearchMessagesFilterVideo(jsonObject = jsonObject)
            "searchMessagesFilterVideoNote" -> return deserializeSearchMessagesFilterVideoNote(jsonObject = jsonObject)
            "searchMessagesFilterVoiceAndVideoNote" -> return deserializeSearchMessagesFilterVoiceAndVideoNote(jsonObject = jsonObject)
            "searchMessagesFilterVoiceNote" -> return deserializeSearchMessagesFilterVoiceNote(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeSecretChatState(jsonObject: JsonObject): SecretChatState {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "secretChatStateClosed" -> return deserializeSecretChatStateClosed(jsonObject = jsonObject)
            "secretChatStatePending" -> return deserializeSecretChatStatePending(jsonObject = jsonObject)
            "secretChatStateReady" -> return deserializeSecretChatStateReady(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeSentGift(jsonObject: JsonObject): SentGift {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "sentGiftRegular" -> return deserializeSentGiftRegular(jsonObject = jsonObject)
            "sentGiftUpgraded" -> return deserializeSentGiftUpgraded(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeSessionType(jsonObject: JsonObject): SessionType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "sessionTypeAndroid" -> return deserializeSessionTypeAndroid(jsonObject = jsonObject)
            "sessionTypeApple" -> return deserializeSessionTypeApple(jsonObject = jsonObject)
            "sessionTypeBrave" -> return deserializeSessionTypeBrave(jsonObject = jsonObject)
            "sessionTypeChrome" -> return deserializeSessionTypeChrome(jsonObject = jsonObject)
            "sessionTypeEdge" -> return deserializeSessionTypeEdge(jsonObject = jsonObject)
            "sessionTypeFirefox" -> return deserializeSessionTypeFirefox(jsonObject = jsonObject)
            "sessionTypeIpad" -> return deserializeSessionTypeIpad(jsonObject = jsonObject)
            "sessionTypeIphone" -> return deserializeSessionTypeIphone(jsonObject = jsonObject)
            "sessionTypeLinux" -> return deserializeSessionTypeLinux(jsonObject = jsonObject)
            "sessionTypeMac" -> return deserializeSessionTypeMac(jsonObject = jsonObject)
            "sessionTypeOpera" -> return deserializeSessionTypeOpera(jsonObject = jsonObject)
            "sessionTypeSafari" -> return deserializeSessionTypeSafari(jsonObject = jsonObject)
            "sessionTypeUbuntu" -> return deserializeSessionTypeUbuntu(jsonObject = jsonObject)
            "sessionTypeUnknown" -> return deserializeSessionTypeUnknown(jsonObject = jsonObject)
            "sessionTypeVivaldi" -> return deserializeSessionTypeVivaldi(jsonObject = jsonObject)
            "sessionTypeWindows" -> return deserializeSessionTypeWindows(jsonObject = jsonObject)
            "sessionTypeXbox" -> return deserializeSessionTypeXbox(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeSpeechRecognitionResult(jsonObject: JsonObject): SpeechRecognitionResult {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "speechRecognitionResultError" -> return deserializeSpeechRecognitionResultError(jsonObject = jsonObject)
            "speechRecognitionResultPending" -> return deserializeSpeechRecognitionResultPending(jsonObject = jsonObject)
            "speechRecognitionResultText" -> return deserializeSpeechRecognitionResultText(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStarSubscriptionType(jsonObject: JsonObject): StarSubscriptionType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "starSubscriptionTypeBot" -> return deserializeStarSubscriptionTypeBot(jsonObject = jsonObject)
            "starSubscriptionTypeChannel" -> return deserializeStarSubscriptionTypeChannel(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStarTransactionDirection(jsonObject: JsonObject): StarTransactionDirection {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "starTransactionDirectionIncoming" -> return deserializeStarTransactionDirectionIncoming(jsonObject = jsonObject)
            "starTransactionDirectionOutgoing" -> return deserializeStarTransactionDirectionOutgoing(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStarTransactionType(jsonObject: JsonObject): StarTransactionType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "starTransactionTypeAffiliateProgramCommission" -> return deserializeStarTransactionTypeAffiliateProgramCommission(jsonObject = jsonObject)
            "starTransactionTypeAppStoreDeposit" -> return deserializeStarTransactionTypeAppStoreDeposit(jsonObject = jsonObject)
            "starTransactionTypeBotInvoicePurchase" -> return deserializeStarTransactionTypeBotInvoicePurchase(jsonObject = jsonObject)
            "starTransactionTypeBotInvoiceSale" -> return deserializeStarTransactionTypeBotInvoiceSale(jsonObject = jsonObject)
            "starTransactionTypeBotPaidMediaPurchase" -> return deserializeStarTransactionTypeBotPaidMediaPurchase(jsonObject = jsonObject)
            "starTransactionTypeBotPaidMediaSale" -> return deserializeStarTransactionTypeBotPaidMediaSale(jsonObject = jsonObject)
            "starTransactionTypeBotSubscriptionPurchase" -> return deserializeStarTransactionTypeBotSubscriptionPurchase(jsonObject = jsonObject)
            "starTransactionTypeBotSubscriptionSale" -> return deserializeStarTransactionTypeBotSubscriptionSale(jsonObject = jsonObject)
            "starTransactionTypeBusinessBotTransferReceive" -> return deserializeStarTransactionTypeBusinessBotTransferReceive(jsonObject = jsonObject)
            "starTransactionTypeBusinessBotTransferSend" -> return deserializeStarTransactionTypeBusinessBotTransferSend(jsonObject = jsonObject)
            "starTransactionTypeChannelPaidMediaPurchase" -> return deserializeStarTransactionTypeChannelPaidMediaPurchase(jsonObject = jsonObject)
            "starTransactionTypeChannelPaidMediaSale" -> return deserializeStarTransactionTypeChannelPaidMediaSale(jsonObject = jsonObject)
            "starTransactionTypeChannelPaidReactionReceive" -> return deserializeStarTransactionTypeChannelPaidReactionReceive(jsonObject = jsonObject)
            "starTransactionTypeChannelPaidReactionSend" -> return deserializeStarTransactionTypeChannelPaidReactionSend(jsonObject = jsonObject)
            "starTransactionTypeChannelSubscriptionPurchase" -> return deserializeStarTransactionTypeChannelSubscriptionPurchase(jsonObject = jsonObject)
            "starTransactionTypeChannelSubscriptionSale" -> return deserializeStarTransactionTypeChannelSubscriptionSale(jsonObject = jsonObject)
            "starTransactionTypeFragmentDeposit" -> return deserializeStarTransactionTypeFragmentDeposit(jsonObject = jsonObject)
            "starTransactionTypeFragmentWithdrawal" -> return deserializeStarTransactionTypeFragmentWithdrawal(jsonObject = jsonObject)
            "starTransactionTypeGiftPurchase" -> return deserializeStarTransactionTypeGiftPurchase(jsonObject = jsonObject)
            "starTransactionTypeGiftSale" -> return deserializeStarTransactionTypeGiftSale(jsonObject = jsonObject)
            "starTransactionTypeGiftTransfer" -> return deserializeStarTransactionTypeGiftTransfer(jsonObject = jsonObject)
            "starTransactionTypeGiftUpgrade" -> return deserializeStarTransactionTypeGiftUpgrade(jsonObject = jsonObject)
            "starTransactionTypeGiveawayDeposit" -> return deserializeStarTransactionTypeGiveawayDeposit(jsonObject = jsonObject)
            "starTransactionTypeGooglePlayDeposit" -> return deserializeStarTransactionTypeGooglePlayDeposit(jsonObject = jsonObject)
            "starTransactionTypePaidMessageReceive" -> return deserializeStarTransactionTypePaidMessageReceive(jsonObject = jsonObject)
            "starTransactionTypePaidMessageSend" -> return deserializeStarTransactionTypePaidMessageSend(jsonObject = jsonObject)
            "starTransactionTypePremiumBotDeposit" -> return deserializeStarTransactionTypePremiumBotDeposit(jsonObject = jsonObject)
            "starTransactionTypePremiumPurchase" -> return deserializeStarTransactionTypePremiumPurchase(jsonObject = jsonObject)
            "starTransactionTypeTelegramAdsWithdrawal" -> return deserializeStarTransactionTypeTelegramAdsWithdrawal(jsonObject = jsonObject)
            "starTransactionTypeTelegramApiUsage" -> return deserializeStarTransactionTypeTelegramApiUsage(jsonObject = jsonObject)
            "starTransactionTypeUnsupported" -> return deserializeStarTransactionTypeUnsupported(jsonObject = jsonObject)
            "starTransactionTypeUpgradedGiftPurchase" -> return deserializeStarTransactionTypeUpgradedGiftPurchase(jsonObject = jsonObject)
            "starTransactionTypeUpgradedGiftSale" -> return deserializeStarTransactionTypeUpgradedGiftSale(jsonObject = jsonObject)
            "starTransactionTypeUserDeposit" -> return deserializeStarTransactionTypeUserDeposit(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStatisticalGraph(jsonObject: JsonObject): StatisticalGraph {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "statisticalGraphAsync" -> return deserializeStatisticalGraphAsync(jsonObject = jsonObject)
            "statisticalGraphData" -> return deserializeStatisticalGraphData(jsonObject = jsonObject)
            "statisticalGraphError" -> return deserializeStatisticalGraphError(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStickerFormat(jsonObject: JsonObject): StickerFormat {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "stickerFormatTgs" -> return deserializeStickerFormatTgs(jsonObject = jsonObject)
            "stickerFormatWebm" -> return deserializeStickerFormatWebm(jsonObject = jsonObject)
            "stickerFormatWebp" -> return deserializeStickerFormatWebp(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStickerFullType(jsonObject: JsonObject): StickerFullType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "stickerFullTypeCustomEmoji" -> return deserializeStickerFullTypeCustomEmoji(jsonObject = jsonObject)
            "stickerFullTypeMask" -> return deserializeStickerFullTypeMask(jsonObject = jsonObject)
            "stickerFullTypeRegular" -> return deserializeStickerFullTypeRegular(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStickerType(jsonObject: JsonObject): StickerType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "stickerTypeCustomEmoji" -> return deserializeStickerTypeCustomEmoji(jsonObject = jsonObject)
            "stickerTypeMask" -> return deserializeStickerTypeMask(jsonObject = jsonObject)
            "stickerTypeRegular" -> return deserializeStickerTypeRegular(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStorePaymentPurpose(jsonObject: JsonObject): StorePaymentPurpose {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "storePaymentPurposeGiftedStars" -> return deserializeStorePaymentPurposeGiftedStars(jsonObject = jsonObject)
            "storePaymentPurposePremiumGift" -> return deserializeStorePaymentPurposePremiumGift(jsonObject = jsonObject)
            "storePaymentPurposePremiumGiftCodes" -> return deserializeStorePaymentPurposePremiumGiftCodes(jsonObject = jsonObject)
            "storePaymentPurposePremiumGiveaway" -> return deserializeStorePaymentPurposePremiumGiveaway(jsonObject = jsonObject)
            "storePaymentPurposePremiumSubscription" -> return deserializeStorePaymentPurposePremiumSubscription(jsonObject = jsonObject)
            "storePaymentPurposeStarGiveaway" -> return deserializeStorePaymentPurposeStarGiveaway(jsonObject = jsonObject)
            "storePaymentPurposeStars" -> return deserializeStorePaymentPurposeStars(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStoreTransaction(jsonObject: JsonObject): StoreTransaction {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "storeTransactionAppStore" -> return deserializeStoreTransactionAppStore(jsonObject = jsonObject)
            "storeTransactionGooglePlay" -> return deserializeStoreTransactionGooglePlay(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStoryAreaType(jsonObject: JsonObject): StoryAreaType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "storyAreaTypeLink" -> return deserializeStoryAreaTypeLink(jsonObject = jsonObject)
            "storyAreaTypeLocation" -> return deserializeStoryAreaTypeLocation(jsonObject = jsonObject)
            "storyAreaTypeMessage" -> return deserializeStoryAreaTypeMessage(jsonObject = jsonObject)
            "storyAreaTypeSuggestedReaction" -> return deserializeStoryAreaTypeSuggestedReaction(jsonObject = jsonObject)
            "storyAreaTypeUpgradedGift" -> return deserializeStoryAreaTypeUpgradedGift(jsonObject = jsonObject)
            "storyAreaTypeVenue" -> return deserializeStoryAreaTypeVenue(jsonObject = jsonObject)
            "storyAreaTypeWeather" -> return deserializeStoryAreaTypeWeather(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStoryContent(jsonObject: JsonObject): StoryContent {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "storyContentPhoto" -> return deserializeStoryContentPhoto(jsonObject = jsonObject)
            "storyContentUnsupported" -> return deserializeStoryContentUnsupported(jsonObject = jsonObject)
            "storyContentVideo" -> return deserializeStoryContentVideo(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStoryInteractionType(jsonObject: JsonObject): StoryInteractionType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "storyInteractionTypeForward" -> return deserializeStoryInteractionTypeForward(jsonObject = jsonObject)
            "storyInteractionTypeRepost" -> return deserializeStoryInteractionTypeRepost(jsonObject = jsonObject)
            "storyInteractionTypeView" -> return deserializeStoryInteractionTypeView(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStoryList(jsonObject: JsonObject): StoryList {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "storyListArchive" -> return deserializeStoryListArchive(jsonObject = jsonObject)
            "storyListMain" -> return deserializeStoryListMain(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStoryOrigin(jsonObject: JsonObject): StoryOrigin {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "storyOriginHiddenUser" -> return deserializeStoryOriginHiddenUser(jsonObject = jsonObject)
            "storyOriginPublicStory" -> return deserializeStoryOriginPublicStory(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeStoryPrivacySettings(jsonObject: JsonObject): StoryPrivacySettings {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "storyPrivacySettingsCloseFriends" -> return deserializeStoryPrivacySettingsCloseFriends(jsonObject = jsonObject)
            "storyPrivacySettingsContacts" -> return deserializeStoryPrivacySettingsContacts(jsonObject = jsonObject)
            "storyPrivacySettingsEveryone" -> return deserializeStoryPrivacySettingsEveryone(jsonObject = jsonObject)
            "storyPrivacySettingsSelectedUsers" -> return deserializeStoryPrivacySettingsSelectedUsers(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeSuggestedAction(jsonObject: JsonObject): SuggestedAction {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "suggestedActionCheckPassword" -> return deserializeSuggestedActionCheckPassword(jsonObject = jsonObject)
            "suggestedActionCheckPhoneNumber" -> return deserializeSuggestedActionCheckPhoneNumber(jsonObject = jsonObject)
            "suggestedActionConvertToBroadcastGroup" -> return deserializeSuggestedActionConvertToBroadcastGroup(jsonObject = jsonObject)
            "suggestedActionCustom" -> return deserializeSuggestedActionCustom(jsonObject = jsonObject)
            "suggestedActionEnableArchiveAndMuteNewChats" -> return deserializeSuggestedActionEnableArchiveAndMuteNewChats(jsonObject = jsonObject)
            "suggestedActionExtendPremium" -> return deserializeSuggestedActionExtendPremium(jsonObject = jsonObject)
            "suggestedActionExtendStarSubscriptions" -> return deserializeSuggestedActionExtendStarSubscriptions(jsonObject = jsonObject)
            "suggestedActionGiftPremiumForChristmas" -> return deserializeSuggestedActionGiftPremiumForChristmas(jsonObject = jsonObject)
            "suggestedActionRestorePremium" -> return deserializeSuggestedActionRestorePremium(jsonObject = jsonObject)
            "suggestedActionSetBirthdate" -> return deserializeSuggestedActionSetBirthdate(jsonObject = jsonObject)
            "suggestedActionSetPassword" -> return deserializeSuggestedActionSetPassword(jsonObject = jsonObject)
            "suggestedActionSetProfilePhoto" -> return deserializeSuggestedActionSetProfilePhoto(jsonObject = jsonObject)
            "suggestedActionSubscribeToAnnualPremium" -> return deserializeSuggestedActionSubscribeToAnnualPremium(jsonObject = jsonObject)
            "suggestedActionUpgradePremium" -> return deserializeSuggestedActionUpgradePremium(jsonObject = jsonObject)
            "suggestedActionViewChecksHint" -> return deserializeSuggestedActionViewChecksHint(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeSupergroupMembersFilter(jsonObject: JsonObject): SupergroupMembersFilter {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "supergroupMembersFilterAdministrators" -> return deserializeSupergroupMembersFilterAdministrators(jsonObject = jsonObject)
            "supergroupMembersFilterBanned" -> return deserializeSupergroupMembersFilterBanned(jsonObject = jsonObject)
            "supergroupMembersFilterBots" -> return deserializeSupergroupMembersFilterBots(jsonObject = jsonObject)
            "supergroupMembersFilterContacts" -> return deserializeSupergroupMembersFilterContacts(jsonObject = jsonObject)
            "supergroupMembersFilterMention" -> return deserializeSupergroupMembersFilterMention(jsonObject = jsonObject)
            "supergroupMembersFilterRecent" -> return deserializeSupergroupMembersFilterRecent(jsonObject = jsonObject)
            "supergroupMembersFilterRestricted" -> return deserializeSupergroupMembersFilterRestricted(jsonObject = jsonObject)
            "supergroupMembersFilterSearch" -> return deserializeSupergroupMembersFilterSearch(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeTMeUrlType(jsonObject: JsonObject): TMeUrlType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "tMeUrlTypeChatInvite" -> return deserializeTMeUrlTypeChatInvite(jsonObject = jsonObject)
            "tMeUrlTypeStickerSet" -> return deserializeTMeUrlTypeStickerSet(jsonObject = jsonObject)
            "tMeUrlTypeSupergroup" -> return deserializeTMeUrlTypeSupergroup(jsonObject = jsonObject)
            "tMeUrlTypeUser" -> return deserializeTMeUrlTypeUser(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeTargetChat(jsonObject: JsonObject): TargetChat {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "targetChatChosen" -> return deserializeTargetChatChosen(jsonObject = jsonObject)
            "targetChatCurrent" -> return deserializeTargetChatCurrent(jsonObject = jsonObject)
            "targetChatInternalLink" -> return deserializeTargetChatInternalLink(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeTelegramPaymentPurpose(jsonObject: JsonObject): TelegramPaymentPurpose {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "telegramPaymentPurposeGiftedStars" -> return deserializeTelegramPaymentPurposeGiftedStars(jsonObject = jsonObject)
            "telegramPaymentPurposeJoinChat" -> return deserializeTelegramPaymentPurposeJoinChat(jsonObject = jsonObject)
            "telegramPaymentPurposePremiumGift" -> return deserializeTelegramPaymentPurposePremiumGift(jsonObject = jsonObject)
            "telegramPaymentPurposePremiumGiftCodes" -> return deserializeTelegramPaymentPurposePremiumGiftCodes(jsonObject = jsonObject)
            "telegramPaymentPurposePremiumGiveaway" -> return deserializeTelegramPaymentPurposePremiumGiveaway(jsonObject = jsonObject)
            "telegramPaymentPurposeStarGiveaway" -> return deserializeTelegramPaymentPurposeStarGiveaway(jsonObject = jsonObject)
            "telegramPaymentPurposeStars" -> return deserializeTelegramPaymentPurposeStars(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeTextEntityType(jsonObject: JsonObject): TextEntityType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "textEntityTypeBankCardNumber" -> return deserializeTextEntityTypeBankCardNumber(jsonObject = jsonObject)
            "textEntityTypeBlockQuote" -> return deserializeTextEntityTypeBlockQuote(jsonObject = jsonObject)
            "textEntityTypeBold" -> return deserializeTextEntityTypeBold(jsonObject = jsonObject)
            "textEntityTypeBotCommand" -> return deserializeTextEntityTypeBotCommand(jsonObject = jsonObject)
            "textEntityTypeCashtag" -> return deserializeTextEntityTypeCashtag(jsonObject = jsonObject)
            "textEntityTypeCode" -> return deserializeTextEntityTypeCode(jsonObject = jsonObject)
            "textEntityTypeCustomEmoji" -> return deserializeTextEntityTypeCustomEmoji(jsonObject = jsonObject)
            "textEntityTypeEmailAddress" -> return deserializeTextEntityTypeEmailAddress(jsonObject = jsonObject)
            "textEntityTypeExpandableBlockQuote" -> return deserializeTextEntityTypeExpandableBlockQuote(jsonObject = jsonObject)
            "textEntityTypeHashtag" -> return deserializeTextEntityTypeHashtag(jsonObject = jsonObject)
            "textEntityTypeItalic" -> return deserializeTextEntityTypeItalic(jsonObject = jsonObject)
            "textEntityTypeMediaTimestamp" -> return deserializeTextEntityTypeMediaTimestamp(jsonObject = jsonObject)
            "textEntityTypeMention" -> return deserializeTextEntityTypeMention(jsonObject = jsonObject)
            "textEntityTypeMentionName" -> return deserializeTextEntityTypeMentionName(jsonObject = jsonObject)
            "textEntityTypePhoneNumber" -> return deserializeTextEntityTypePhoneNumber(jsonObject = jsonObject)
            "textEntityTypePre" -> return deserializeTextEntityTypePre(jsonObject = jsonObject)
            "textEntityTypePreCode" -> return deserializeTextEntityTypePreCode(jsonObject = jsonObject)
            "textEntityTypeSpoiler" -> return deserializeTextEntityTypeSpoiler(jsonObject = jsonObject)
            "textEntityTypeStrikethrough" -> return deserializeTextEntityTypeStrikethrough(jsonObject = jsonObject)
            "textEntityTypeTextUrl" -> return deserializeTextEntityTypeTextUrl(jsonObject = jsonObject)
            "textEntityTypeUnderline" -> return deserializeTextEntityTypeUnderline(jsonObject = jsonObject)
            "textEntityTypeUrl" -> return deserializeTextEntityTypeUrl(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeTextParseMode(jsonObject: JsonObject): TextParseMode {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "textParseModeHTML" -> return deserializeTextParseModeHTML(jsonObject = jsonObject)
            "textParseModeMarkdown" -> return deserializeTextParseModeMarkdown(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeThumbnailFormat(jsonObject: JsonObject): ThumbnailFormat {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "thumbnailFormatGif" -> return deserializeThumbnailFormatGif(jsonObject = jsonObject)
            "thumbnailFormatJpeg" -> return deserializeThumbnailFormatJpeg(jsonObject = jsonObject)
            "thumbnailFormatMpeg4" -> return deserializeThumbnailFormatMpeg4(jsonObject = jsonObject)
            "thumbnailFormatPng" -> return deserializeThumbnailFormatPng(jsonObject = jsonObject)
            "thumbnailFormatTgs" -> return deserializeThumbnailFormatTgs(jsonObject = jsonObject)
            "thumbnailFormatWebm" -> return deserializeThumbnailFormatWebm(jsonObject = jsonObject)
            "thumbnailFormatWebp" -> return deserializeThumbnailFormatWebp(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeTopChatCategory(jsonObject: JsonObject): TopChatCategory {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "topChatCategoryBots" -> return deserializeTopChatCategoryBots(jsonObject = jsonObject)
            "topChatCategoryCalls" -> return deserializeTopChatCategoryCalls(jsonObject = jsonObject)
            "topChatCategoryChannels" -> return deserializeTopChatCategoryChannels(jsonObject = jsonObject)
            "topChatCategoryForwardChats" -> return deserializeTopChatCategoryForwardChats(jsonObject = jsonObject)
            "topChatCategoryGroups" -> return deserializeTopChatCategoryGroups(jsonObject = jsonObject)
            "topChatCategoryInlineBots" -> return deserializeTopChatCategoryInlineBots(jsonObject = jsonObject)
            "topChatCategoryUsers" -> return deserializeTopChatCategoryUsers(jsonObject = jsonObject)
            "topChatCategoryWebAppBots" -> return deserializeTopChatCategoryWebAppBots(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeUpdate(jsonObject: JsonObject): Update {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "updateAccentColors" -> return deserializeUpdateAccentColors(jsonObject = jsonObject)
            "updateActiveEmojiReactions" -> return deserializeUpdateActiveEmojiReactions(jsonObject = jsonObject)
            "updateActiveLiveLocationMessages" -> return deserializeUpdateActiveLiveLocationMessages(jsonObject = jsonObject)
            "updateActiveNotifications" -> return deserializeUpdateActiveNotifications(jsonObject = jsonObject)
            "updateAnimatedEmojiMessageClicked" -> return deserializeUpdateAnimatedEmojiMessageClicked(jsonObject = jsonObject)
            "updateAnimationSearchParameters" -> return deserializeUpdateAnimationSearchParameters(jsonObject = jsonObject)
            "updateApplicationRecaptchaVerificationRequired" -> return deserializeUpdateApplicationRecaptchaVerificationRequired(jsonObject = jsonObject)
            "updateApplicationVerificationRequired" -> return deserializeUpdateApplicationVerificationRequired(jsonObject = jsonObject)
            "updateAttachmentMenuBots" -> return deserializeUpdateAttachmentMenuBots(jsonObject = jsonObject)
            "updateAuthorizationState" -> return deserializeUpdateAuthorizationState(jsonObject = jsonObject)
            "updateAutosaveSettings" -> return deserializeUpdateAutosaveSettings(jsonObject = jsonObject)
            "updateAvailableMessageEffects" -> return deserializeUpdateAvailableMessageEffects(jsonObject = jsonObject)
            "updateBasicGroup" -> return deserializeUpdateBasicGroup(jsonObject = jsonObject)
            "updateBasicGroupFullInfo" -> return deserializeUpdateBasicGroupFullInfo(jsonObject = jsonObject)
            "updateBusinessConnection" -> return deserializeUpdateBusinessConnection(jsonObject = jsonObject)
            "updateBusinessMessageEdited" -> return deserializeUpdateBusinessMessageEdited(jsonObject = jsonObject)
            "updateBusinessMessagesDeleted" -> return deserializeUpdateBusinessMessagesDeleted(jsonObject = jsonObject)
            "updateCall" -> return deserializeUpdateCall(jsonObject = jsonObject)
            "updateChatAccentColors" -> return deserializeUpdateChatAccentColors(jsonObject = jsonObject)
            "updateChatAction" -> return deserializeUpdateChatAction(jsonObject = jsonObject)
            "updateChatActionBar" -> return deserializeUpdateChatActionBar(jsonObject = jsonObject)
            "updateChatActiveStories" -> return deserializeUpdateChatActiveStories(jsonObject = jsonObject)
            "updateChatAddedToList" -> return deserializeUpdateChatAddedToList(jsonObject = jsonObject)
            "updateChatAvailableReactions" -> return deserializeUpdateChatAvailableReactions(jsonObject = jsonObject)
            "updateChatBackground" -> return deserializeUpdateChatBackground(jsonObject = jsonObject)
            "updateChatBlockList" -> return deserializeUpdateChatBlockList(jsonObject = jsonObject)
            "updateChatBoost" -> return deserializeUpdateChatBoost(jsonObject = jsonObject)
            "updateChatBusinessBotManageBar" -> return deserializeUpdateChatBusinessBotManageBar(jsonObject = jsonObject)
            "updateChatDefaultDisableNotification" -> return deserializeUpdateChatDefaultDisableNotification(jsonObject = jsonObject)
            "updateChatDraftMessage" -> return deserializeUpdateChatDraftMessage(jsonObject = jsonObject)
            "updateChatEmojiStatus" -> return deserializeUpdateChatEmojiStatus(jsonObject = jsonObject)
            "updateChatFolders" -> return deserializeUpdateChatFolders(jsonObject = jsonObject)
            "updateChatHasProtectedContent" -> return deserializeUpdateChatHasProtectedContent(jsonObject = jsonObject)
            "updateChatHasScheduledMessages" -> return deserializeUpdateChatHasScheduledMessages(jsonObject = jsonObject)
            "updateChatIsMarkedAsUnread" -> return deserializeUpdateChatIsMarkedAsUnread(jsonObject = jsonObject)
            "updateChatIsTranslatable" -> return deserializeUpdateChatIsTranslatable(jsonObject = jsonObject)
            "updateChatLastMessage" -> return deserializeUpdateChatLastMessage(jsonObject = jsonObject)
            "updateChatMember" -> return deserializeUpdateChatMember(jsonObject = jsonObject)
            "updateChatMessageAutoDeleteTime" -> return deserializeUpdateChatMessageAutoDeleteTime(jsonObject = jsonObject)
            "updateChatMessageSender" -> return deserializeUpdateChatMessageSender(jsonObject = jsonObject)
            "updateChatNotificationSettings" -> return deserializeUpdateChatNotificationSettings(jsonObject = jsonObject)
            "updateChatOnlineMemberCount" -> return deserializeUpdateChatOnlineMemberCount(jsonObject = jsonObject)
            "updateChatPendingJoinRequests" -> return deserializeUpdateChatPendingJoinRequests(jsonObject = jsonObject)
            "updateChatPermissions" -> return deserializeUpdateChatPermissions(jsonObject = jsonObject)
            "updateChatPhoto" -> return deserializeUpdateChatPhoto(jsonObject = jsonObject)
            "updateChatPosition" -> return deserializeUpdateChatPosition(jsonObject = jsonObject)
            "updateChatReadInbox" -> return deserializeUpdateChatReadInbox(jsonObject = jsonObject)
            "updateChatReadOutbox" -> return deserializeUpdateChatReadOutbox(jsonObject = jsonObject)
            "updateChatRemovedFromList" -> return deserializeUpdateChatRemovedFromList(jsonObject = jsonObject)
            "updateChatReplyMarkup" -> return deserializeUpdateChatReplyMarkup(jsonObject = jsonObject)
            "updateChatRevenueAmount" -> return deserializeUpdateChatRevenueAmount(jsonObject = jsonObject)
            "updateChatTheme" -> return deserializeUpdateChatTheme(jsonObject = jsonObject)
            "updateChatThemes" -> return deserializeUpdateChatThemes(jsonObject = jsonObject)
            "updateChatTitle" -> return deserializeUpdateChatTitle(jsonObject = jsonObject)
            "updateChatUnreadMentionCount" -> return deserializeUpdateChatUnreadMentionCount(jsonObject = jsonObject)
            "updateChatUnreadReactionCount" -> return deserializeUpdateChatUnreadReactionCount(jsonObject = jsonObject)
            "updateChatVideoChat" -> return deserializeUpdateChatVideoChat(jsonObject = jsonObject)
            "updateChatViewAsTopics" -> return deserializeUpdateChatViewAsTopics(jsonObject = jsonObject)
            "updateConnectionState" -> return deserializeUpdateConnectionState(jsonObject = jsonObject)
            "updateContactCloseBirthdays" -> return deserializeUpdateContactCloseBirthdays(jsonObject = jsonObject)
            "updateDefaultBackground" -> return deserializeUpdateDefaultBackground(jsonObject = jsonObject)
            "updateDefaultPaidReactionType" -> return deserializeUpdateDefaultPaidReactionType(jsonObject = jsonObject)
            "updateDefaultReactionType" -> return deserializeUpdateDefaultReactionType(jsonObject = jsonObject)
            "updateDeleteMessages" -> return deserializeUpdateDeleteMessages(jsonObject = jsonObject)
            "updateDiceEmojis" -> return deserializeUpdateDiceEmojis(jsonObject = jsonObject)
            "updateDirectMessagesChatTopic" -> return deserializeUpdateDirectMessagesChatTopic(jsonObject = jsonObject)
            "updateFavoriteStickers" -> return deserializeUpdateFavoriteStickers(jsonObject = jsonObject)
            "updateFile" -> return deserializeUpdateFile(jsonObject = jsonObject)
            "updateFileAddedToDownloads" -> return deserializeUpdateFileAddedToDownloads(jsonObject = jsonObject)
            "updateFileDownload" -> return deserializeUpdateFileDownload(jsonObject = jsonObject)
            "updateFileDownloads" -> return deserializeUpdateFileDownloads(jsonObject = jsonObject)
            "updateFileGenerationStart" -> return deserializeUpdateFileGenerationStart(jsonObject = jsonObject)
            "updateFileGenerationStop" -> return deserializeUpdateFileGenerationStop(jsonObject = jsonObject)
            "updateFileRemovedFromDownloads" -> return deserializeUpdateFileRemovedFromDownloads(jsonObject = jsonObject)
            "updateForumTopic" -> return deserializeUpdateForumTopic(jsonObject = jsonObject)
            "updateForumTopicInfo" -> return deserializeUpdateForumTopicInfo(jsonObject = jsonObject)
            "updateFreezeState" -> return deserializeUpdateFreezeState(jsonObject = jsonObject)
            "updateGroupCall" -> return deserializeUpdateGroupCall(jsonObject = jsonObject)
            "updateGroupCallParticipant" -> return deserializeUpdateGroupCallParticipant(jsonObject = jsonObject)
            "updateGroupCallParticipants" -> return deserializeUpdateGroupCallParticipants(jsonObject = jsonObject)
            "updateGroupCallVerificationState" -> return deserializeUpdateGroupCallVerificationState(jsonObject = jsonObject)
            "updateHavePendingNotifications" -> return deserializeUpdateHavePendingNotifications(jsonObject = jsonObject)
            "updateInstalledStickerSets" -> return deserializeUpdateInstalledStickerSets(jsonObject = jsonObject)
            "updateLanguagePackStrings" -> return deserializeUpdateLanguagePackStrings(jsonObject = jsonObject)
            "updateMessageContent" -> return deserializeUpdateMessageContent(jsonObject = jsonObject)
            "updateMessageContentOpened" -> return deserializeUpdateMessageContentOpened(jsonObject = jsonObject)
            "updateMessageEdited" -> return deserializeUpdateMessageEdited(jsonObject = jsonObject)
            "updateMessageFactCheck" -> return deserializeUpdateMessageFactCheck(jsonObject = jsonObject)
            "updateMessageInteractionInfo" -> return deserializeUpdateMessageInteractionInfo(jsonObject = jsonObject)
            "updateMessageIsPinned" -> return deserializeUpdateMessageIsPinned(jsonObject = jsonObject)
            "updateMessageLiveLocationViewed" -> return deserializeUpdateMessageLiveLocationViewed(jsonObject = jsonObject)
            "updateMessageMentionRead" -> return deserializeUpdateMessageMentionRead(jsonObject = jsonObject)
            "updateMessageReaction" -> return deserializeUpdateMessageReaction(jsonObject = jsonObject)
            "updateMessageReactions" -> return deserializeUpdateMessageReactions(jsonObject = jsonObject)
            "updateMessageSendAcknowledged" -> return deserializeUpdateMessageSendAcknowledged(jsonObject = jsonObject)
            "updateMessageSendFailed" -> return deserializeUpdateMessageSendFailed(jsonObject = jsonObject)
            "updateMessageSendSucceeded" -> return deserializeUpdateMessageSendSucceeded(jsonObject = jsonObject)
            "updateMessageUnreadReactions" -> return deserializeUpdateMessageUnreadReactions(jsonObject = jsonObject)
            "updateNewBusinessCallbackQuery" -> return deserializeUpdateNewBusinessCallbackQuery(jsonObject = jsonObject)
            "updateNewBusinessMessage" -> return deserializeUpdateNewBusinessMessage(jsonObject = jsonObject)
            "updateNewCallSignalingData" -> return deserializeUpdateNewCallSignalingData(jsonObject = jsonObject)
            "updateNewCallbackQuery" -> return deserializeUpdateNewCallbackQuery(jsonObject = jsonObject)
            "updateNewChat" -> return deserializeUpdateNewChat(jsonObject = jsonObject)
            "updateNewChatJoinRequest" -> return deserializeUpdateNewChatJoinRequest(jsonObject = jsonObject)
            "updateNewChosenInlineResult" -> return deserializeUpdateNewChosenInlineResult(jsonObject = jsonObject)
            "updateNewCustomEvent" -> return deserializeUpdateNewCustomEvent(jsonObject = jsonObject)
            "updateNewCustomQuery" -> return deserializeUpdateNewCustomQuery(jsonObject = jsonObject)
            "updateNewInlineCallbackQuery" -> return deserializeUpdateNewInlineCallbackQuery(jsonObject = jsonObject)
            "updateNewInlineQuery" -> return deserializeUpdateNewInlineQuery(jsonObject = jsonObject)
            "updateNewMessage" -> return deserializeUpdateNewMessage(jsonObject = jsonObject)
            "updateNewPreCheckoutQuery" -> return deserializeUpdateNewPreCheckoutQuery(jsonObject = jsonObject)
            "updateNewShippingQuery" -> return deserializeUpdateNewShippingQuery(jsonObject = jsonObject)
            "updateNotification" -> return deserializeUpdateNotification(jsonObject = jsonObject)
            "updateNotificationGroup" -> return deserializeUpdateNotificationGroup(jsonObject = jsonObject)
            "updateOption" -> return deserializeUpdateOption(jsonObject = jsonObject)
            "updateOwnedStarCount" -> return deserializeUpdateOwnedStarCount(jsonObject = jsonObject)
            "updatePaidMediaPurchased" -> return deserializeUpdatePaidMediaPurchased(jsonObject = jsonObject)
            "updatePoll" -> return deserializeUpdatePoll(jsonObject = jsonObject)
            "updatePollAnswer" -> return deserializeUpdatePollAnswer(jsonObject = jsonObject)
            "updateProfileAccentColors" -> return deserializeUpdateProfileAccentColors(jsonObject = jsonObject)
            "updateQuickReplyShortcut" -> return deserializeUpdateQuickReplyShortcut(jsonObject = jsonObject)
            "updateQuickReplyShortcutDeleted" -> return deserializeUpdateQuickReplyShortcutDeleted(jsonObject = jsonObject)
            "updateQuickReplyShortcutMessages" -> return deserializeUpdateQuickReplyShortcutMessages(jsonObject = jsonObject)
            "updateQuickReplyShortcuts" -> return deserializeUpdateQuickReplyShortcuts(jsonObject = jsonObject)
            "updateReactionNotificationSettings" -> return deserializeUpdateReactionNotificationSettings(jsonObject = jsonObject)
            "updateRecentStickers" -> return deserializeUpdateRecentStickers(jsonObject = jsonObject)
            "updateSavedAnimations" -> return deserializeUpdateSavedAnimations(jsonObject = jsonObject)
            "updateSavedMessagesTags" -> return deserializeUpdateSavedMessagesTags(jsonObject = jsonObject)
            "updateSavedMessagesTopic" -> return deserializeUpdateSavedMessagesTopic(jsonObject = jsonObject)
            "updateSavedMessagesTopicCount" -> return deserializeUpdateSavedMessagesTopicCount(jsonObject = jsonObject)
            "updateSavedNotificationSounds" -> return deserializeUpdateSavedNotificationSounds(jsonObject = jsonObject)
            "updateScopeNotificationSettings" -> return deserializeUpdateScopeNotificationSettings(jsonObject = jsonObject)
            "updateSecretChat" -> return deserializeUpdateSecretChat(jsonObject = jsonObject)
            "updateServiceNotification" -> return deserializeUpdateServiceNotification(jsonObject = jsonObject)
            "updateSpeechRecognitionTrial" -> return deserializeUpdateSpeechRecognitionTrial(jsonObject = jsonObject)
            "updateSpeedLimitNotification" -> return deserializeUpdateSpeedLimitNotification(jsonObject = jsonObject)
            "updateStarRevenueStatus" -> return deserializeUpdateStarRevenueStatus(jsonObject = jsonObject)
            "updateStickerSet" -> return deserializeUpdateStickerSet(jsonObject = jsonObject)
            "updateStory" -> return deserializeUpdateStory(jsonObject = jsonObject)
            "updateStoryDeleted" -> return deserializeUpdateStoryDeleted(jsonObject = jsonObject)
            "updateStoryListChatCount" -> return deserializeUpdateStoryListChatCount(jsonObject = jsonObject)
            "updateStoryPostFailed" -> return deserializeUpdateStoryPostFailed(jsonObject = jsonObject)
            "updateStoryPostSucceeded" -> return deserializeUpdateStoryPostSucceeded(jsonObject = jsonObject)
            "updateStoryStealthMode" -> return deserializeUpdateStoryStealthMode(jsonObject = jsonObject)
            "updateSuggestedActions" -> return deserializeUpdateSuggestedActions(jsonObject = jsonObject)
            "updateSupergroup" -> return deserializeUpdateSupergroup(jsonObject = jsonObject)
            "updateSupergroupFullInfo" -> return deserializeUpdateSupergroupFullInfo(jsonObject = jsonObject)
            "updateTermsOfService" -> return deserializeUpdateTermsOfService(jsonObject = jsonObject)
            "updateTopicMessageCount" -> return deserializeUpdateTopicMessageCount(jsonObject = jsonObject)
            "updateTrendingStickerSets" -> return deserializeUpdateTrendingStickerSets(jsonObject = jsonObject)
            "updateUnconfirmedSession" -> return deserializeUpdateUnconfirmedSession(jsonObject = jsonObject)
            "updateUnreadChatCount" -> return deserializeUpdateUnreadChatCount(jsonObject = jsonObject)
            "updateUnreadMessageCount" -> return deserializeUpdateUnreadMessageCount(jsonObject = jsonObject)
            "updateUser" -> return deserializeUpdateUser(jsonObject = jsonObject)
            "updateUserFullInfo" -> return deserializeUpdateUserFullInfo(jsonObject = jsonObject)
            "updateUserPrivacySettingRules" -> return deserializeUpdateUserPrivacySettingRules(jsonObject = jsonObject)
            "updateUserStatus" -> return deserializeUpdateUserStatus(jsonObject = jsonObject)
            "updateVideoPublished" -> return deserializeUpdateVideoPublished(jsonObject = jsonObject)
            "updateWebAppMessageSent" -> return deserializeUpdateWebAppMessageSent(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeUpgradedGiftAttributeId(jsonObject: JsonObject): UpgradedGiftAttributeId {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "upgradedGiftAttributeIdBackdrop" -> return deserializeUpgradedGiftAttributeIdBackdrop(jsonObject = jsonObject)
            "upgradedGiftAttributeIdModel" -> return deserializeUpgradedGiftAttributeIdModel(jsonObject = jsonObject)
            "upgradedGiftAttributeIdSymbol" -> return deserializeUpgradedGiftAttributeIdSymbol(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeUserPrivacySetting(jsonObject: JsonObject): UserPrivacySetting {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "userPrivacySettingAllowCalls" -> return deserializeUserPrivacySettingAllowCalls(jsonObject = jsonObject)
            "userPrivacySettingAllowChatInvites" -> return deserializeUserPrivacySettingAllowChatInvites(jsonObject = jsonObject)
            "userPrivacySettingAllowFindingByPhoneNumber" -> return deserializeUserPrivacySettingAllowFindingByPhoneNumber(jsonObject = jsonObject)
            "userPrivacySettingAllowPeerToPeerCalls" -> return deserializeUserPrivacySettingAllowPeerToPeerCalls(jsonObject = jsonObject)
            "userPrivacySettingAllowPrivateVoiceAndVideoNoteMessages" -> return deserializeUserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages(jsonObject = jsonObject)
            "userPrivacySettingAllowUnpaidMessages" -> return deserializeUserPrivacySettingAllowUnpaidMessages(jsonObject = jsonObject)
            "userPrivacySettingAutosaveGifts" -> return deserializeUserPrivacySettingAutosaveGifts(jsonObject = jsonObject)
            "userPrivacySettingShowBio" -> return deserializeUserPrivacySettingShowBio(jsonObject = jsonObject)
            "userPrivacySettingShowBirthdate" -> return deserializeUserPrivacySettingShowBirthdate(jsonObject = jsonObject)
            "userPrivacySettingShowLinkInForwardedMessages" -> return deserializeUserPrivacySettingShowLinkInForwardedMessages(jsonObject = jsonObject)
            "userPrivacySettingShowPhoneNumber" -> return deserializeUserPrivacySettingShowPhoneNumber(jsonObject = jsonObject)
            "userPrivacySettingShowProfilePhoto" -> return deserializeUserPrivacySettingShowProfilePhoto(jsonObject = jsonObject)
            "userPrivacySettingShowStatus" -> return deserializeUserPrivacySettingShowStatus(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeUserPrivacySettingRule(jsonObject: JsonObject): UserPrivacySettingRule {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "userPrivacySettingRuleAllowAll" -> return deserializeUserPrivacySettingRuleAllowAll(jsonObject = jsonObject)
            "userPrivacySettingRuleAllowBots" -> return deserializeUserPrivacySettingRuleAllowBots(jsonObject = jsonObject)
            "userPrivacySettingRuleAllowChatMembers" -> return deserializeUserPrivacySettingRuleAllowChatMembers(jsonObject = jsonObject)
            "userPrivacySettingRuleAllowContacts" -> return deserializeUserPrivacySettingRuleAllowContacts(jsonObject = jsonObject)
            "userPrivacySettingRuleAllowPremiumUsers" -> return deserializeUserPrivacySettingRuleAllowPremiumUsers(jsonObject = jsonObject)
            "userPrivacySettingRuleAllowUsers" -> return deserializeUserPrivacySettingRuleAllowUsers(jsonObject = jsonObject)
            "userPrivacySettingRuleRestrictAll" -> return deserializeUserPrivacySettingRuleRestrictAll(jsonObject = jsonObject)
            "userPrivacySettingRuleRestrictBots" -> return deserializeUserPrivacySettingRuleRestrictBots(jsonObject = jsonObject)
            "userPrivacySettingRuleRestrictChatMembers" -> return deserializeUserPrivacySettingRuleRestrictChatMembers(jsonObject = jsonObject)
            "userPrivacySettingRuleRestrictContacts" -> return deserializeUserPrivacySettingRuleRestrictContacts(jsonObject = jsonObject)
            "userPrivacySettingRuleRestrictUsers" -> return deserializeUserPrivacySettingRuleRestrictUsers(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeUserStatus(jsonObject: JsonObject): UserStatus {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "userStatusEmpty" -> return deserializeUserStatusEmpty(jsonObject = jsonObject)
            "userStatusLastMonth" -> return deserializeUserStatusLastMonth(jsonObject = jsonObject)
            "userStatusLastWeek" -> return deserializeUserStatusLastWeek(jsonObject = jsonObject)
            "userStatusOffline" -> return deserializeUserStatusOffline(jsonObject = jsonObject)
            "userStatusOnline" -> return deserializeUserStatusOnline(jsonObject = jsonObject)
            "userStatusRecently" -> return deserializeUserStatusRecently(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeUserType(jsonObject: JsonObject): UserType {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "userTypeBot" -> return deserializeUserTypeBot(jsonObject = jsonObject)
            "userTypeDeleted" -> return deserializeUserTypeDeleted(jsonObject = jsonObject)
            "userTypeRegular" -> return deserializeUserTypeRegular(jsonObject = jsonObject)
            "userTypeUnknown" -> return deserializeUserTypeUnknown(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeVectorPathCommand(jsonObject: JsonObject): VectorPathCommand {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "vectorPathCommandCubicBezierCurve" -> return deserializeVectorPathCommandCubicBezierCurve(jsonObject = jsonObject)
            "vectorPathCommandLine" -> return deserializeVectorPathCommandLine(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeWebAppOpenMode(jsonObject: JsonObject): WebAppOpenMode {
        val type = jsonObject.getString(key = "@type")
        when(type) {
            "webAppOpenModeCompact" -> return deserializeWebAppOpenModeCompact(jsonObject = jsonObject)
            "webAppOpenModeFullScreen" -> return deserializeWebAppOpenModeFullScreen(jsonObject = jsonObject)
            "webAppOpenModeFullSize" -> return deserializeWebAppOpenModeFullSize(jsonObject = jsonObject)
            else -> error(message = "Unknown dto type: $type")
        }
    }

    private fun deserializeAccentColor(jsonObject: JsonObject): AccentColor {
        return AccentColor(
            id = jsonObject.getInt(key = "id"),
            builtInAccentColorId = jsonObject.getInt(key = "built_in_accent_color_id"),
            lightThemeColors = jsonObject.getInts(key = "light_theme_colors"),
            darkThemeColors = jsonObject.getInts(key = "dark_theme_colors"),
            minChannelChatBoostLevel = jsonObject.getInt(key = "min_channel_chat_boost_level"),
        )
    }

    private fun deserializeAcceptedGiftTypes(jsonObject: JsonObject): AcceptedGiftTypes {
        return AcceptedGiftTypes(
            unlimitedGifts = jsonObject.getBoolean(key = "unlimited_gifts"),
            limitedGifts = jsonObject.getBoolean(key = "limited_gifts"),
            upgradedGifts = jsonObject.getBoolean(key = "upgraded_gifts"),
            premiumSubscription = jsonObject.getBoolean(key = "premium_subscription"),
        )
    }

    private fun deserializeAccountInfo(jsonObject: JsonObject): AccountInfo {
        return AccountInfo(
            registrationMonth = jsonObject.getInt(key = "registration_month"),
            registrationYear = jsonObject.getInt(key = "registration_year"),
            phoneNumberCountryCode = jsonObject.getString(key = "phone_number_country_code"),
            lastNameChangeDate = jsonObject.getInt(key = "last_name_change_date"),
            lastPhotoChangeDate = jsonObject.getInt(key = "last_photo_change_date"),
        )
    }

    private fun deserializeAccountTtl(jsonObject: JsonObject): AccountTtl {
        return AccountTtl(
            days = jsonObject.getInt(key = "days"),
        )
    }

    private fun deserializeAddedReaction(jsonObject: JsonObject): AddedReaction {
        return AddedReaction(
            type = jsonObject.getObject(key = "type") { data -> deserializeReactionType(jsonObject = data) },
            senderId = jsonObject.getObject(key = "sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            isOutgoing = jsonObject.getBoolean(key = "is_outgoing"),
            date = jsonObject.getInt(key = "date"),
        )
    }

    private fun deserializeAddedReactions(jsonObject: JsonObject): AddedReactions {
        return AddedReactions(
            totalCount = jsonObject.getInt(key = "total_count"),
            reactions = jsonObject.getObjects(key = "reactions") { data -> deserializeAddedReaction(jsonObject = data) },
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializeAddress(jsonObject: JsonObject): Address {
        return Address(
            countryCode = jsonObject.getString(key = "country_code"),
            state = jsonObject.getString(key = "state"),
            city = jsonObject.getString(key = "city"),
            streetLine1 = jsonObject.getString(key = "street_line1"),
            streetLine2 = jsonObject.getString(key = "street_line2"),
            postalCode = jsonObject.getString(key = "postal_code"),
        )
    }

    private fun deserializeAdvertisementSponsor(jsonObject: JsonObject): AdvertisementSponsor {
        return AdvertisementSponsor(
            url = jsonObject.getString(key = "url"),
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializePhoto(jsonObject = data) },
            info = jsonObject.getString(key = "info"),
        )
    }

    private fun deserializeAffiliateInfo(jsonObject: JsonObject): AffiliateInfo {
        return AffiliateInfo(
            commissionPerMille = jsonObject.getInt(key = "commission_per_mille"),
            affiliateChatId = jsonObject.getLong(key = "affiliate_chat_id"),
            starAmount = jsonObject.getObject(key = "star_amount") { data -> deserializeStarAmount(jsonObject = data) },
        )
    }

    private fun deserializeAffiliateProgramInfo(jsonObject: JsonObject): AffiliateProgramInfo {
        return AffiliateProgramInfo(
            parameters = jsonObject.getObject(key = "parameters") { data -> deserializeAffiliateProgramParameters(jsonObject = data) },
            endDate = jsonObject.getInt(key = "end_date"),
            dailyRevenuePerUserAmount = jsonObject.getObject(key = "daily_revenue_per_user_amount") { data -> deserializeStarAmount(jsonObject = data) },
        )
    }

    private fun deserializeAffiliateProgramParameters(jsonObject: JsonObject): AffiliateProgramParameters {
        return AffiliateProgramParameters(
            commissionPerMille = jsonObject.getInt(key = "commission_per_mille"),
            monthCount = jsonObject.getInt(key = "month_count"),
        )
    }

    private fun deserializeAffiliateProgramSortOrderCreationDate(jsonObject: JsonObject): AffiliateProgramSortOrderCreationDate {
        return AffiliateProgramSortOrderCreationDate()
    }

    private fun deserializeAffiliateProgramSortOrderProfitability(jsonObject: JsonObject): AffiliateProgramSortOrderProfitability {
        return AffiliateProgramSortOrderProfitability()
    }

    private fun deserializeAffiliateProgramSortOrderRevenue(jsonObject: JsonObject): AffiliateProgramSortOrderRevenue {
        return AffiliateProgramSortOrderRevenue()
    }

    private fun deserializeAffiliateTypeBot(jsonObject: JsonObject): AffiliateTypeBot {
        return AffiliateTypeBot(
            userId = jsonObject.getLong(key = "user_id"),
        )
    }

    private fun deserializeAffiliateTypeChannel(jsonObject: JsonObject): AffiliateTypeChannel {
        return AffiliateTypeChannel(
            chatId = jsonObject.getLong(key = "chat_id"),
        )
    }

    private fun deserializeAffiliateTypeCurrentUser(jsonObject: JsonObject): AffiliateTypeCurrentUser {
        return AffiliateTypeCurrentUser()
    }

    private fun deserializeAlternativeVideo(jsonObject: JsonObject): AlternativeVideo {
        return AlternativeVideo(
            id = jsonObject.getLong(key = "id"),
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            codec = jsonObject.getString(key = "codec"),
            hlsFile = jsonObject.getObject(key = "hls_file") { data -> deserializeFile(jsonObject = data) },
            video = jsonObject.getObject(key = "video") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeAnimatedChatPhoto(jsonObject: JsonObject): AnimatedChatPhoto {
        return AnimatedChatPhoto(
            length = jsonObject.getInt(key = "length"),
            file = jsonObject.getObject(key = "file") { data -> deserializeFile(jsonObject = data) },
            mainFrameTimestamp = jsonObject.getDouble(key = "main_frame_timestamp"),
        )
    }

    private fun deserializeAnimatedEmoji(jsonObject: JsonObject): AnimatedEmoji {
        return AnimatedEmoji(
            sticker = jsonObject.getObjectNullable(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
            stickerWidth = jsonObject.getInt(key = "sticker_width"),
            stickerHeight = jsonObject.getInt(key = "sticker_height"),
            fitzpatrickType = jsonObject.getInt(key = "fitzpatrick_type"),
            sound = jsonObject.getObjectNullable(key = "sound") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeAnimation(jsonObject: JsonObject): Animation {
        return Animation(
            duration = jsonObject.getInt(key = "duration"),
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            fileName = jsonObject.getString(key = "file_name"),
            mimeType = jsonObject.getString(key = "mime_type"),
            hasStickers = jsonObject.getBoolean(key = "has_stickers"),
            minithumbnail = jsonObject.getObjectNullable(key = "minithumbnail") { data -> deserializeMinithumbnail(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeThumbnail(jsonObject = data) },
            animation = jsonObject.getObject(key = "animation") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeAnimations(jsonObject: JsonObject): Animations {
        return Animations(
            animations = jsonObject.getObjects(key = "animations") { data -> deserializeAnimation(jsonObject = data) },
        )
    }

    private fun deserializeArchiveChatListSettings(jsonObject: JsonObject): ArchiveChatListSettings {
        return ArchiveChatListSettings(
            archiveAndMuteNewChatsFromUnknownUsers = jsonObject.getBoolean(key = "archive_and_mute_new_chats_from_unknown_users"),
            keepUnmutedChatsArchived = jsonObject.getBoolean(key = "keep_unmuted_chats_archived"),
            keepChatsFromFoldersArchived = jsonObject.getBoolean(key = "keep_chats_from_folders_archived"),
        )
    }

    private fun deserializeAttachmentMenuBot(jsonObject: JsonObject): AttachmentMenuBot {
        return AttachmentMenuBot(
            botUserId = jsonObject.getLong(key = "bot_user_id"),
            supportsSelfChat = jsonObject.getBoolean(key = "supports_self_chat"),
            supportsUserChats = jsonObject.getBoolean(key = "supports_user_chats"),
            supportsBotChats = jsonObject.getBoolean(key = "supports_bot_chats"),
            supportsGroupChats = jsonObject.getBoolean(key = "supports_group_chats"),
            supportsChannelChats = jsonObject.getBoolean(key = "supports_channel_chats"),
            requestWriteAccess = jsonObject.getBoolean(key = "request_write_access"),
            isAdded = jsonObject.getBoolean(key = "is_added"),
            showInAttachmentMenu = jsonObject.getBoolean(key = "show_in_attachment_menu"),
            showInSideMenu = jsonObject.getBoolean(key = "show_in_side_menu"),
            showDisclaimerInSideMenu = jsonObject.getBoolean(key = "show_disclaimer_in_side_menu"),
            name = jsonObject.getString(key = "name"),
            nameColor = jsonObject.getObjectNullable(key = "name_color") { data -> deserializeAttachmentMenuBotColor(jsonObject = data) },
            defaultIcon = jsonObject.getObjectNullable(key = "default_icon") { data -> deserializeFile(jsonObject = data) },
            iosStaticIcon = jsonObject.getObjectNullable(key = "ios_static_icon") { data -> deserializeFile(jsonObject = data) },
            iosAnimatedIcon = jsonObject.getObjectNullable(key = "ios_animated_icon") { data -> deserializeFile(jsonObject = data) },
            iosSideMenuIcon = jsonObject.getObjectNullable(key = "ios_side_menu_icon") { data -> deserializeFile(jsonObject = data) },
            androidIcon = jsonObject.getObjectNullable(key = "android_icon") { data -> deserializeFile(jsonObject = data) },
            androidSideMenuIcon = jsonObject.getObjectNullable(key = "android_side_menu_icon") { data -> deserializeFile(jsonObject = data) },
            macosIcon = jsonObject.getObjectNullable(key = "macos_icon") { data -> deserializeFile(jsonObject = data) },
            macosSideMenuIcon = jsonObject.getObjectNullable(key = "macos_side_menu_icon") { data -> deserializeFile(jsonObject = data) },
            iconColor = jsonObject.getObjectNullable(key = "icon_color") { data -> deserializeAttachmentMenuBotColor(jsonObject = data) },
            webAppPlaceholder = jsonObject.getObjectNullable(key = "web_app_placeholder") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeAttachmentMenuBotColor(jsonObject: JsonObject): AttachmentMenuBotColor {
        return AttachmentMenuBotColor(
            lightColor = jsonObject.getInt(key = "light_color"),
            darkColor = jsonObject.getInt(key = "dark_color"),
        )
    }

    private fun deserializeAudio(jsonObject: JsonObject): Audio {
        return Audio(
            duration = jsonObject.getInt(key = "duration"),
            title = jsonObject.getString(key = "title"),
            performer = jsonObject.getString(key = "performer"),
            fileName = jsonObject.getString(key = "file_name"),
            mimeType = jsonObject.getString(key = "mime_type"),
            albumCoverMinithumbnail = jsonObject.getObjectNullable(key = "album_cover_minithumbnail") { data -> deserializeMinithumbnail(jsonObject = data) },
            albumCoverThumbnail = jsonObject.getObjectNullable(key = "album_cover_thumbnail") { data -> deserializeThumbnail(jsonObject = data) },
            externalAlbumCovers = jsonObject.getObjects(key = "external_album_covers") { data -> deserializeThumbnail(jsonObject = data) },
            audio = jsonObject.getObject(key = "audio") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeAuthenticationCodeInfo(jsonObject: JsonObject): AuthenticationCodeInfo {
        return AuthenticationCodeInfo(
            phoneNumber = jsonObject.getString(key = "phone_number"),
            type = jsonObject.getObject(key = "type") { data -> deserializeAuthenticationCodeType(jsonObject = data) },
            nextType = jsonObject.getObjectNullable(key = "next_type") { data -> deserializeAuthenticationCodeType(jsonObject = data) },
            timeout = jsonObject.getInt(key = "timeout"),
        )
    }

    private fun deserializeAuthenticationCodeTypeCall(jsonObject: JsonObject): AuthenticationCodeTypeCall {
        return AuthenticationCodeTypeCall(
            length = jsonObject.getInt(key = "length"),
        )
    }

    private fun deserializeAuthenticationCodeTypeFirebaseAndroid(jsonObject: JsonObject): AuthenticationCodeTypeFirebaseAndroid {
        return AuthenticationCodeTypeFirebaseAndroid(
            deviceVerificationParameters = jsonObject.getObject(key = "device_verification_parameters") { data -> deserializeFirebaseDeviceVerificationParameters(jsonObject = data) },
            length = jsonObject.getInt(key = "length"),
        )
    }

    private fun deserializeAuthenticationCodeTypeFirebaseIos(jsonObject: JsonObject): AuthenticationCodeTypeFirebaseIos {
        return AuthenticationCodeTypeFirebaseIos(
            receipt = jsonObject.getString(key = "receipt"),
            pushTimeout = jsonObject.getInt(key = "push_timeout"),
            length = jsonObject.getInt(key = "length"),
        )
    }

    private fun deserializeAuthenticationCodeTypeFlashCall(jsonObject: JsonObject): AuthenticationCodeTypeFlashCall {
        return AuthenticationCodeTypeFlashCall(
            pattern = jsonObject.getString(key = "pattern"),
        )
    }

    private fun deserializeAuthenticationCodeTypeFragment(jsonObject: JsonObject): AuthenticationCodeTypeFragment {
        return AuthenticationCodeTypeFragment(
            url = jsonObject.getString(key = "url"),
            length = jsonObject.getInt(key = "length"),
        )
    }

    private fun deserializeAuthenticationCodeTypeMissedCall(jsonObject: JsonObject): AuthenticationCodeTypeMissedCall {
        return AuthenticationCodeTypeMissedCall(
            phoneNumberPrefix = jsonObject.getString(key = "phone_number_prefix"),
            length = jsonObject.getInt(key = "length"),
        )
    }

    private fun deserializeAuthenticationCodeTypeSms(jsonObject: JsonObject): AuthenticationCodeTypeSms {
        return AuthenticationCodeTypeSms(
            length = jsonObject.getInt(key = "length"),
        )
    }

    private fun deserializeAuthenticationCodeTypeSmsPhrase(jsonObject: JsonObject): AuthenticationCodeTypeSmsPhrase {
        return AuthenticationCodeTypeSmsPhrase(
            firstWord = jsonObject.getString(key = "first_word"),
        )
    }

    private fun deserializeAuthenticationCodeTypeSmsWord(jsonObject: JsonObject): AuthenticationCodeTypeSmsWord {
        return AuthenticationCodeTypeSmsWord(
            firstLetter = jsonObject.getString(key = "first_letter"),
        )
    }

    private fun deserializeAuthenticationCodeTypeTelegramMessage(jsonObject: JsonObject): AuthenticationCodeTypeTelegramMessage {
        return AuthenticationCodeTypeTelegramMessage(
            length = jsonObject.getInt(key = "length"),
        )
    }

    private fun deserializeAuthorizationStateClosed(jsonObject: JsonObject): AuthorizationStateClosed {
        return AuthorizationStateClosed()
    }

    private fun deserializeAuthorizationStateClosing(jsonObject: JsonObject): AuthorizationStateClosing {
        return AuthorizationStateClosing()
    }

    private fun deserializeAuthorizationStateLoggingOut(jsonObject: JsonObject): AuthorizationStateLoggingOut {
        return AuthorizationStateLoggingOut()
    }

    private fun deserializeAuthorizationStateReady(jsonObject: JsonObject): AuthorizationStateReady {
        return AuthorizationStateReady()
    }

    private fun deserializeAuthorizationStateWaitCode(jsonObject: JsonObject): AuthorizationStateWaitCode {
        return AuthorizationStateWaitCode(
            codeInfo = jsonObject.getObject(key = "code_info") { data -> deserializeAuthenticationCodeInfo(jsonObject = data) },
        )
    }

    private fun deserializeAuthorizationStateWaitEmailAddress(jsonObject: JsonObject): AuthorizationStateWaitEmailAddress {
        return AuthorizationStateWaitEmailAddress(
            allowAppleId = jsonObject.getBoolean(key = "allow_apple_id"),
            allowGoogleId = jsonObject.getBoolean(key = "allow_google_id"),
        )
    }

    private fun deserializeAuthorizationStateWaitEmailCode(jsonObject: JsonObject): AuthorizationStateWaitEmailCode {
        return AuthorizationStateWaitEmailCode(
            allowAppleId = jsonObject.getBoolean(key = "allow_apple_id"),
            allowGoogleId = jsonObject.getBoolean(key = "allow_google_id"),
            codeInfo = jsonObject.getObject(key = "code_info") { data -> deserializeEmailAddressAuthenticationCodeInfo(jsonObject = data) },
            emailAddressResetState = jsonObject.getObjectNullable(key = "email_address_reset_state") { data -> deserializeEmailAddressResetState(jsonObject = data) },
        )
    }

    private fun deserializeAuthorizationStateWaitOtherDeviceConfirmation(jsonObject: JsonObject): AuthorizationStateWaitOtherDeviceConfirmation {
        return AuthorizationStateWaitOtherDeviceConfirmation(
            link = jsonObject.getString(key = "link"),
        )
    }

    private fun deserializeAuthorizationStateWaitPassword(jsonObject: JsonObject): AuthorizationStateWaitPassword {
        return AuthorizationStateWaitPassword(
            passwordHint = jsonObject.getString(key = "password_hint"),
            hasRecoveryEmailAddress = jsonObject.getBoolean(key = "has_recovery_email_address"),
            hasPassportData = jsonObject.getBoolean(key = "has_passport_data"),
            recoveryEmailAddressPattern = jsonObject.getString(key = "recovery_email_address_pattern"),
        )
    }

    private fun deserializeAuthorizationStateWaitPhoneNumber(jsonObject: JsonObject): AuthorizationStateWaitPhoneNumber {
        return AuthorizationStateWaitPhoneNumber()
    }

    private fun deserializeAuthorizationStateWaitPremiumPurchase(jsonObject: JsonObject): AuthorizationStateWaitPremiumPurchase {
        return AuthorizationStateWaitPremiumPurchase(
            storeProductId = jsonObject.getString(key = "store_product_id"),
        )
    }

    private fun deserializeAuthorizationStateWaitRegistration(jsonObject: JsonObject): AuthorizationStateWaitRegistration {
        return AuthorizationStateWaitRegistration(
            termsOfService = jsonObject.getObject(key = "terms_of_service") { data -> deserializeTermsOfService(jsonObject = data) },
        )
    }

    private fun deserializeAuthorizationStateWaitTdlibParameters(jsonObject: JsonObject): AuthorizationStateWaitTdlibParameters {
        return AuthorizationStateWaitTdlibParameters()
    }

    private fun deserializeAutoDownloadSettings(jsonObject: JsonObject): AutoDownloadSettings {
        return AutoDownloadSettings(
            isAutoDownloadEnabled = jsonObject.getBoolean(key = "is_auto_download_enabled"),
            maxPhotoFileSize = jsonObject.getInt(key = "max_photo_file_size"),
            maxVideoFileSize = jsonObject.getLong(key = "max_video_file_size"),
            maxOtherFileSize = jsonObject.getLong(key = "max_other_file_size"),
            videoUploadBitrate = jsonObject.getInt(key = "video_upload_bitrate"),
            preloadLargeVideos = jsonObject.getBoolean(key = "preload_large_videos"),
            preloadNextAudio = jsonObject.getBoolean(key = "preload_next_audio"),
            preloadStories = jsonObject.getBoolean(key = "preload_stories"),
            useLessDataForCalls = jsonObject.getBoolean(key = "use_less_data_for_calls"),
        )
    }

    private fun deserializeAutoDownloadSettingsPresets(jsonObject: JsonObject): AutoDownloadSettingsPresets {
        return AutoDownloadSettingsPresets(
            low = jsonObject.getObject(key = "low") { data -> deserializeAutoDownloadSettings(jsonObject = data) },
            medium = jsonObject.getObject(key = "medium") { data -> deserializeAutoDownloadSettings(jsonObject = data) },
            high = jsonObject.getObject(key = "high") { data -> deserializeAutoDownloadSettings(jsonObject = data) },
        )
    }

    private fun deserializeAutosaveSettings(jsonObject: JsonObject): AutosaveSettings {
        return AutosaveSettings(
            privateChatSettings = jsonObject.getObject(key = "private_chat_settings") { data -> deserializeScopeAutosaveSettings(jsonObject = data) },
            groupSettings = jsonObject.getObject(key = "group_settings") { data -> deserializeScopeAutosaveSettings(jsonObject = data) },
            channelSettings = jsonObject.getObject(key = "channel_settings") { data -> deserializeScopeAutosaveSettings(jsonObject = data) },
            exceptions = jsonObject.getObjects(key = "exceptions") { data -> deserializeAutosaveSettingsException(jsonObject = data) },
        )
    }

    private fun deserializeAutosaveSettingsException(jsonObject: JsonObject): AutosaveSettingsException {
        return AutosaveSettingsException(
            chatId = jsonObject.getLong(key = "chat_id"),
            settings = jsonObject.getObject(key = "settings") { data -> deserializeScopeAutosaveSettings(jsonObject = data) },
        )
    }

    private fun deserializeAutosaveSettingsScopeChannelChats(jsonObject: JsonObject): AutosaveSettingsScopeChannelChats {
        return AutosaveSettingsScopeChannelChats()
    }

    private fun deserializeAutosaveSettingsScopeChat(jsonObject: JsonObject): AutosaveSettingsScopeChat {
        return AutosaveSettingsScopeChat(
            chatId = jsonObject.getLong(key = "chat_id"),
        )
    }

    private fun deserializeAutosaveSettingsScopeGroupChats(jsonObject: JsonObject): AutosaveSettingsScopeGroupChats {
        return AutosaveSettingsScopeGroupChats()
    }

    private fun deserializeAutosaveSettingsScopePrivateChats(jsonObject: JsonObject): AutosaveSettingsScopePrivateChats {
        return AutosaveSettingsScopePrivateChats()
    }

    private fun deserializeAvailableGift(jsonObject: JsonObject): AvailableGift {
        return AvailableGift(
            gift = jsonObject.getObject(key = "gift") { data -> deserializeGift(jsonObject = data) },
            resaleCount = jsonObject.getInt(key = "resale_count"),
            minResaleStarCount = jsonObject.getLong(key = "min_resale_star_count"),
            title = jsonObject.getString(key = "title"),
        )
    }

    private fun deserializeAvailableGifts(jsonObject: JsonObject): AvailableGifts {
        return AvailableGifts(
            gifts = jsonObject.getObjects(key = "gifts") { data -> deserializeAvailableGift(jsonObject = data) },
        )
    }

    private fun deserializeAvailableReaction(jsonObject: JsonObject): AvailableReaction {
        return AvailableReaction(
            type = jsonObject.getObject(key = "type") { data -> deserializeReactionType(jsonObject = data) },
            needsPremium = jsonObject.getBoolean(key = "needs_premium"),
        )
    }

    private fun deserializeAvailableReactions(jsonObject: JsonObject): AvailableReactions {
        return AvailableReactions(
            topReactions = jsonObject.getObjects(key = "top_reactions") { data -> deserializeAvailableReaction(jsonObject = data) },
            recentReactions = jsonObject.getObjects(key = "recent_reactions") { data -> deserializeAvailableReaction(jsonObject = data) },
            popularReactions = jsonObject.getObjects(key = "popular_reactions") { data -> deserializeAvailableReaction(jsonObject = data) },
            allowCustomEmoji = jsonObject.getBoolean(key = "allow_custom_emoji"),
            areTags = jsonObject.getBoolean(key = "are_tags"),
            unavailabilityReason = jsonObject.getObjectNullable(key = "unavailability_reason") { data -> deserializeReactionUnavailabilityReason(jsonObject = data) },
        )
    }

    private fun deserializeBackground(jsonObject: JsonObject): Background {
        return Background(
            id = jsonObject.getLong(key = "id"),
            isDefault = jsonObject.getBoolean(key = "is_default"),
            isDark = jsonObject.getBoolean(key = "is_dark"),
            name = jsonObject.getString(key = "name"),
            document = jsonObject.getObjectNullable(key = "document") { data -> deserializeDocument(jsonObject = data) },
            type = jsonObject.getObject(key = "type") { data -> deserializeBackgroundType(jsonObject = data) },
        )
    }

    private fun deserializeBackgroundFillFreeformGradient(jsonObject: JsonObject): BackgroundFillFreeformGradient {
        return BackgroundFillFreeformGradient(
            colors = jsonObject.getInts(key = "colors"),
        )
    }

    private fun deserializeBackgroundFillGradient(jsonObject: JsonObject): BackgroundFillGradient {
        return BackgroundFillGradient(
            topColor = jsonObject.getInt(key = "top_color"),
            bottomColor = jsonObject.getInt(key = "bottom_color"),
            rotationAngle = jsonObject.getInt(key = "rotation_angle"),
        )
    }

    private fun deserializeBackgroundFillSolid(jsonObject: JsonObject): BackgroundFillSolid {
        return BackgroundFillSolid(
            color = jsonObject.getInt(key = "color"),
        )
    }

    private fun deserializeBackgroundTypeChatTheme(jsonObject: JsonObject): BackgroundTypeChatTheme {
        return BackgroundTypeChatTheme(
            themeName = jsonObject.getString(key = "theme_name"),
        )
    }

    private fun deserializeBackgroundTypeFill(jsonObject: JsonObject): BackgroundTypeFill {
        return BackgroundTypeFill(
            fill = jsonObject.getObject(key = "fill") { data -> deserializeBackgroundFill(jsonObject = data) },
        )
    }

    private fun deserializeBackgroundTypePattern(jsonObject: JsonObject): BackgroundTypePattern {
        return BackgroundTypePattern(
            fill = jsonObject.getObject(key = "fill") { data -> deserializeBackgroundFill(jsonObject = data) },
            intensity = jsonObject.getInt(key = "intensity"),
            isInverted = jsonObject.getBoolean(key = "is_inverted"),
            isMoving = jsonObject.getBoolean(key = "is_moving"),
        )
    }

    private fun deserializeBackgroundTypeWallpaper(jsonObject: JsonObject): BackgroundTypeWallpaper {
        return BackgroundTypeWallpaper(
            isBlurred = jsonObject.getBoolean(key = "is_blurred"),
            isMoving = jsonObject.getBoolean(key = "is_moving"),
        )
    }

    private fun deserializeBackgrounds(jsonObject: JsonObject): Backgrounds {
        return Backgrounds(
            backgrounds = jsonObject.getObjects(key = "backgrounds") { data -> deserializeBackground(jsonObject = data) },
        )
    }

    private fun deserializeBankCardActionOpenUrl(jsonObject: JsonObject): BankCardActionOpenUrl {
        return BankCardActionOpenUrl(
            text = jsonObject.getString(key = "text"),
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeBankCardInfo(jsonObject: JsonObject): BankCardInfo {
        return BankCardInfo(
            title = jsonObject.getString(key = "title"),
            actions = jsonObject.getObjects(key = "actions") { data -> deserializeBankCardActionOpenUrl(jsonObject = data) },
        )
    }

    private fun deserializeBasicGroup(jsonObject: JsonObject): BasicGroup {
        return BasicGroup(
            id = jsonObject.getLong(key = "id"),
            memberCount = jsonObject.getInt(key = "member_count"),
            status = jsonObject.getObject(key = "status") { data -> deserializeChatMemberStatus(jsonObject = data) },
            isActive = jsonObject.getBoolean(key = "is_active"),
            upgradedToSupergroupId = jsonObject.getLong(key = "upgraded_to_supergroup_id"),
        )
    }

    private fun deserializeBasicGroupFullInfo(jsonObject: JsonObject): BasicGroupFullInfo {
        return BasicGroupFullInfo(
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializeChatPhoto(jsonObject = data) },
            description = jsonObject.getString(key = "description"),
            creatorUserId = jsonObject.getLong(key = "creator_user_id"),
            members = jsonObject.getObjects(key = "members") { data -> deserializeChatMember(jsonObject = data) },
            canHideMembers = jsonObject.getBoolean(key = "can_hide_members"),
            canToggleAggressiveAntiSpam = jsonObject.getBoolean(key = "can_toggle_aggressive_anti_spam"),
            inviteLink = jsonObject.getObjectNullable(key = "invite_link") { data -> deserializeChatInviteLink(jsonObject = data) },
            botCommands = jsonObject.getObjects(key = "bot_commands") { data -> deserializeBotCommands(jsonObject = data) },
        )
    }

    private fun deserializeBirthdate(jsonObject: JsonObject): Birthdate {
        return Birthdate(
            day = jsonObject.getInt(key = "day"),
            month = jsonObject.getInt(key = "month"),
            year = jsonObject.getInt(key = "year"),
        )
    }

    private fun deserializeBlockListMain(jsonObject: JsonObject): BlockListMain {
        return BlockListMain()
    }

    private fun deserializeBlockListStories(jsonObject: JsonObject): BlockListStories {
        return BlockListStories()
    }

    private fun deserializeBotCommand(jsonObject: JsonObject): BotCommand {
        return BotCommand(
            command = jsonObject.getString(key = "command"),
            description = jsonObject.getString(key = "description"),
        )
    }

    private fun deserializeBotCommandScopeAllChatAdministrators(jsonObject: JsonObject): BotCommandScopeAllChatAdministrators {
        return BotCommandScopeAllChatAdministrators()
    }

    private fun deserializeBotCommandScopeAllGroupChats(jsonObject: JsonObject): BotCommandScopeAllGroupChats {
        return BotCommandScopeAllGroupChats()
    }

    private fun deserializeBotCommandScopeAllPrivateChats(jsonObject: JsonObject): BotCommandScopeAllPrivateChats {
        return BotCommandScopeAllPrivateChats()
    }

    private fun deserializeBotCommandScopeChat(jsonObject: JsonObject): BotCommandScopeChat {
        return BotCommandScopeChat(
            chatId = jsonObject.getLong(key = "chat_id"),
        )
    }

    private fun deserializeBotCommandScopeChatAdministrators(jsonObject: JsonObject): BotCommandScopeChatAdministrators {
        return BotCommandScopeChatAdministrators(
            chatId = jsonObject.getLong(key = "chat_id"),
        )
    }

    private fun deserializeBotCommandScopeChatMember(jsonObject: JsonObject): BotCommandScopeChatMember {
        return BotCommandScopeChatMember(
            chatId = jsonObject.getLong(key = "chat_id"),
            userId = jsonObject.getLong(key = "user_id"),
        )
    }

    private fun deserializeBotCommandScopeDefault(jsonObject: JsonObject): BotCommandScopeDefault {
        return BotCommandScopeDefault()
    }

    private fun deserializeBotCommands(jsonObject: JsonObject): BotCommands {
        return BotCommands(
            botUserId = jsonObject.getLong(key = "bot_user_id"),
            commands = jsonObject.getObjects(key = "commands") { data -> deserializeBotCommand(jsonObject = data) },
        )
    }

    private fun deserializeBotInfo(jsonObject: JsonObject): BotInfo {
        return BotInfo(
            shortDescription = jsonObject.getString(key = "short_description"),
            description = jsonObject.getString(key = "description"),
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializePhoto(jsonObject = data) },
            animation = jsonObject.getObjectNullable(key = "animation") { data -> deserializeAnimation(jsonObject = data) },
            menuButton = jsonObject.getObjectNullable(key = "menu_button") { data -> deserializeBotMenuButton(jsonObject = data) },
            commands = jsonObject.getObjects(key = "commands") { data -> deserializeBotCommand(jsonObject = data) },
            privacyPolicyUrl = jsonObject.getString(key = "privacy_policy_url"),
            defaultGroupAdministratorRights = jsonObject.getObjectNullable(key = "default_group_administrator_rights") { data -> deserializeChatAdministratorRights(jsonObject = data) },
            defaultChannelAdministratorRights = jsonObject.getObjectNullable(key = "default_channel_administrator_rights") { data -> deserializeChatAdministratorRights(jsonObject = data) },
            affiliateProgram = jsonObject.getObjectNullable(key = "affiliate_program") { data -> deserializeAffiliateProgramInfo(jsonObject = data) },
            webAppBackgroundLightColor = jsonObject.getInt(key = "web_app_background_light_color"),
            webAppBackgroundDarkColor = jsonObject.getInt(key = "web_app_background_dark_color"),
            webAppHeaderLightColor = jsonObject.getInt(key = "web_app_header_light_color"),
            webAppHeaderDarkColor = jsonObject.getInt(key = "web_app_header_dark_color"),
            verificationParameters = jsonObject.getObjectNullable(key = "verification_parameters") { data -> deserializeBotVerificationParameters(jsonObject = data) },
            canGetRevenueStatistics = jsonObject.getBoolean(key = "can_get_revenue_statistics"),
            canManageEmojiStatus = jsonObject.getBoolean(key = "can_manage_emoji_status"),
            hasMediaPreviews = jsonObject.getBoolean(key = "has_media_previews"),
            editCommandsLink = jsonObject.getObjectNullable(key = "edit_commands_link") { data -> deserializeInternalLinkType(jsonObject = data) },
            editDescriptionLink = jsonObject.getObjectNullable(key = "edit_description_link") { data -> deserializeInternalLinkType(jsonObject = data) },
            editDescriptionMediaLink = jsonObject.getObjectNullable(key = "edit_description_media_link") { data -> deserializeInternalLinkType(jsonObject = data) },
            editSettingsLink = jsonObject.getObjectNullable(key = "edit_settings_link") { data -> deserializeInternalLinkType(jsonObject = data) },
        )
    }

    private fun deserializeBotMediaPreview(jsonObject: JsonObject): BotMediaPreview {
        return BotMediaPreview(
            date = jsonObject.getInt(key = "date"),
            content = jsonObject.getObject(key = "content") { data -> deserializeStoryContent(jsonObject = data) },
        )
    }

    private fun deserializeBotMediaPreviewInfo(jsonObject: JsonObject): BotMediaPreviewInfo {
        return BotMediaPreviewInfo(
            previews = jsonObject.getObjects(key = "previews") { data -> deserializeBotMediaPreview(jsonObject = data) },
            languageCodes = jsonObject.getStrings(key = "language_codes"),
        )
    }

    private fun deserializeBotMediaPreviews(jsonObject: JsonObject): BotMediaPreviews {
        return BotMediaPreviews(
            previews = jsonObject.getObjects(key = "previews") { data -> deserializeBotMediaPreview(jsonObject = data) },
        )
    }

    private fun deserializeBotMenuButton(jsonObject: JsonObject): BotMenuButton {
        return BotMenuButton(
            text = jsonObject.getString(key = "text"),
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeBotVerification(jsonObject: JsonObject): BotVerification {
        return BotVerification(
            botUserId = jsonObject.getLong(key = "bot_user_id"),
            iconCustomEmojiId = jsonObject.getLong(key = "icon_custom_emoji_id"),
            customDescription = jsonObject.getObject(key = "custom_description") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializeBotVerificationParameters(jsonObject: JsonObject): BotVerificationParameters {
        return BotVerificationParameters(
            iconCustomEmojiId = jsonObject.getLong(key = "icon_custom_emoji_id"),
            organizationName = jsonObject.getString(key = "organization_name"),
            defaultCustomDescription = jsonObject.getObjectNullable(key = "default_custom_description") { data -> deserializeFormattedText(jsonObject = data) },
            canSetCustomDescription = jsonObject.getBoolean(key = "can_set_custom_description"),
        )
    }

    private fun deserializeBotWriteAccessAllowReasonAcceptedRequest(jsonObject: JsonObject): BotWriteAccessAllowReasonAcceptedRequest {
        return BotWriteAccessAllowReasonAcceptedRequest()
    }

    private fun deserializeBotWriteAccessAllowReasonAddedToAttachmentMenu(jsonObject: JsonObject): BotWriteAccessAllowReasonAddedToAttachmentMenu {
        return BotWriteAccessAllowReasonAddedToAttachmentMenu()
    }

    private fun deserializeBotWriteAccessAllowReasonConnectedWebsite(jsonObject: JsonObject): BotWriteAccessAllowReasonConnectedWebsite {
        return BotWriteAccessAllowReasonConnectedWebsite(
            domainName = jsonObject.getString(key = "domain_name"),
        )
    }

    private fun deserializeBotWriteAccessAllowReasonLaunchedWebApp(jsonObject: JsonObject): BotWriteAccessAllowReasonLaunchedWebApp {
        return BotWriteAccessAllowReasonLaunchedWebApp(
            webApp = jsonObject.getObject(key = "web_app") { data -> deserializeWebApp(jsonObject = data) },
        )
    }

    private fun deserializeBusinessAwayMessageScheduleAlways(jsonObject: JsonObject): BusinessAwayMessageScheduleAlways {
        return BusinessAwayMessageScheduleAlways()
    }

    private fun deserializeBusinessAwayMessageScheduleCustom(jsonObject: JsonObject): BusinessAwayMessageScheduleCustom {
        return BusinessAwayMessageScheduleCustom(
            startDate = jsonObject.getInt(key = "start_date"),
            endDate = jsonObject.getInt(key = "end_date"),
        )
    }

    private fun deserializeBusinessAwayMessageScheduleOutsideOfOpeningHours(jsonObject: JsonObject): BusinessAwayMessageScheduleOutsideOfOpeningHours {
        return BusinessAwayMessageScheduleOutsideOfOpeningHours()
    }

    private fun deserializeBusinessAwayMessageSettings(jsonObject: JsonObject): BusinessAwayMessageSettings {
        return BusinessAwayMessageSettings(
            shortcutId = jsonObject.getInt(key = "shortcut_id"),
            recipients = jsonObject.getObject(key = "recipients") { data -> deserializeBusinessRecipients(jsonObject = data) },
            schedule = jsonObject.getObject(key = "schedule") { data -> deserializeBusinessAwayMessageSchedule(jsonObject = data) },
            offlineOnly = jsonObject.getBoolean(key = "offline_only"),
        )
    }

    private fun deserializeBusinessBotManageBar(jsonObject: JsonObject): BusinessBotManageBar {
        return BusinessBotManageBar(
            botUserId = jsonObject.getLong(key = "bot_user_id"),
            manageUrl = jsonObject.getString(key = "manage_url"),
            isBotPaused = jsonObject.getBoolean(key = "is_bot_paused"),
            canBotReply = jsonObject.getBoolean(key = "can_bot_reply"),
        )
    }

    private fun deserializeBusinessBotRights(jsonObject: JsonObject): BusinessBotRights {
        return BusinessBotRights(
            canReply = jsonObject.getBoolean(key = "can_reply"),
            canReadMessages = jsonObject.getBoolean(key = "can_read_messages"),
            canDeleteSentMessages = jsonObject.getBoolean(key = "can_delete_sent_messages"),
            canDeleteAllMessages = jsonObject.getBoolean(key = "can_delete_all_messages"),
            canEditName = jsonObject.getBoolean(key = "can_edit_name"),
            canEditBio = jsonObject.getBoolean(key = "can_edit_bio"),
            canEditProfilePhoto = jsonObject.getBoolean(key = "can_edit_profile_photo"),
            canEditUsername = jsonObject.getBoolean(key = "can_edit_username"),
            canViewGiftsAndStars = jsonObject.getBoolean(key = "can_view_gifts_and_stars"),
            canSellGifts = jsonObject.getBoolean(key = "can_sell_gifts"),
            canChangeGiftSettings = jsonObject.getBoolean(key = "can_change_gift_settings"),
            canTransferAndUpgradeGifts = jsonObject.getBoolean(key = "can_transfer_and_upgrade_gifts"),
            canTransferStars = jsonObject.getBoolean(key = "can_transfer_stars"),
            canManageStories = jsonObject.getBoolean(key = "can_manage_stories"),
        )
    }

    private fun deserializeBusinessChatLink(jsonObject: JsonObject): BusinessChatLink {
        return BusinessChatLink(
            link = jsonObject.getString(key = "link"),
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            title = jsonObject.getString(key = "title"),
            viewCount = jsonObject.getInt(key = "view_count"),
        )
    }

    private fun deserializeBusinessChatLinkInfo(jsonObject: JsonObject): BusinessChatLinkInfo {
        return BusinessChatLinkInfo(
            chatId = jsonObject.getLong(key = "chat_id"),
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializeBusinessChatLinks(jsonObject: JsonObject): BusinessChatLinks {
        return BusinessChatLinks(
            links = jsonObject.getObjects(key = "links") { data -> deserializeBusinessChatLink(jsonObject = data) },
        )
    }

    private fun deserializeBusinessConnectedBot(jsonObject: JsonObject): BusinessConnectedBot {
        return BusinessConnectedBot(
            botUserId = jsonObject.getLong(key = "bot_user_id"),
            recipients = jsonObject.getObject(key = "recipients") { data -> deserializeBusinessRecipients(jsonObject = data) },
            rights = jsonObject.getObject(key = "rights") { data -> deserializeBusinessBotRights(jsonObject = data) },
        )
    }

    private fun deserializeBusinessConnection(jsonObject: JsonObject): BusinessConnection {
        return BusinessConnection(
            id = jsonObject.getString(key = "id"),
            userId = jsonObject.getLong(key = "user_id"),
            userChatId = jsonObject.getLong(key = "user_chat_id"),
            date = jsonObject.getInt(key = "date"),
            rights = jsonObject.getObjectNullable(key = "rights") { data -> deserializeBusinessBotRights(jsonObject = data) },
            isEnabled = jsonObject.getBoolean(key = "is_enabled"),
        )
    }

    private fun deserializeBusinessFeatureAccountLinks(jsonObject: JsonObject): BusinessFeatureAccountLinks {
        return BusinessFeatureAccountLinks()
    }

    private fun deserializeBusinessFeatureAwayMessage(jsonObject: JsonObject): BusinessFeatureAwayMessage {
        return BusinessFeatureAwayMessage()
    }

    private fun deserializeBusinessFeatureBots(jsonObject: JsonObject): BusinessFeatureBots {
        return BusinessFeatureBots()
    }

    private fun deserializeBusinessFeatureChatFolderTags(jsonObject: JsonObject): BusinessFeatureChatFolderTags {
        return BusinessFeatureChatFolderTags()
    }

    private fun deserializeBusinessFeatureEmojiStatus(jsonObject: JsonObject): BusinessFeatureEmojiStatus {
        return BusinessFeatureEmojiStatus()
    }

    private fun deserializeBusinessFeatureGreetingMessage(jsonObject: JsonObject): BusinessFeatureGreetingMessage {
        return BusinessFeatureGreetingMessage()
    }

    private fun deserializeBusinessFeatureLocation(jsonObject: JsonObject): BusinessFeatureLocation {
        return BusinessFeatureLocation()
    }

    private fun deserializeBusinessFeatureOpeningHours(jsonObject: JsonObject): BusinessFeatureOpeningHours {
        return BusinessFeatureOpeningHours()
    }

    private fun deserializeBusinessFeaturePromotionAnimation(jsonObject: JsonObject): BusinessFeaturePromotionAnimation {
        return BusinessFeaturePromotionAnimation(
            feature = jsonObject.getObject(key = "feature") { data -> deserializeBusinessFeature(jsonObject = data) },
            animation = jsonObject.getObject(key = "animation") { data -> deserializeAnimation(jsonObject = data) },
        )
    }

    private fun deserializeBusinessFeatureQuickReplies(jsonObject: JsonObject): BusinessFeatureQuickReplies {
        return BusinessFeatureQuickReplies()
    }

    private fun deserializeBusinessFeatureStartPage(jsonObject: JsonObject): BusinessFeatureStartPage {
        return BusinessFeatureStartPage()
    }

    private fun deserializeBusinessFeatureUpgradedStories(jsonObject: JsonObject): BusinessFeatureUpgradedStories {
        return BusinessFeatureUpgradedStories()
    }

    private fun deserializeBusinessFeatures(jsonObject: JsonObject): BusinessFeatures {
        return BusinessFeatures(
            features = jsonObject.getObjects(key = "features") { data -> deserializeBusinessFeature(jsonObject = data) },
        )
    }

    private fun deserializeBusinessGreetingMessageSettings(jsonObject: JsonObject): BusinessGreetingMessageSettings {
        return BusinessGreetingMessageSettings(
            shortcutId = jsonObject.getInt(key = "shortcut_id"),
            recipients = jsonObject.getObject(key = "recipients") { data -> deserializeBusinessRecipients(jsonObject = data) },
            inactivityDays = jsonObject.getInt(key = "inactivity_days"),
        )
    }

    private fun deserializeBusinessInfo(jsonObject: JsonObject): BusinessInfo {
        return BusinessInfo(
            location = jsonObject.getObjectNullable(key = "location") { data -> deserializeBusinessLocation(jsonObject = data) },
            openingHours = jsonObject.getObjectNullable(key = "opening_hours") { data -> deserializeBusinessOpeningHours(jsonObject = data) },
            localOpeningHours = jsonObject.getObjectNullable(key = "local_opening_hours") { data -> deserializeBusinessOpeningHours(jsonObject = data) },
            nextOpenIn = jsonObject.getInt(key = "next_open_in"),
            nextCloseIn = jsonObject.getInt(key = "next_close_in"),
            greetingMessageSettings = jsonObject.getObjectNullable(key = "greeting_message_settings") { data -> deserializeBusinessGreetingMessageSettings(jsonObject = data) },
            awayMessageSettings = jsonObject.getObjectNullable(key = "away_message_settings") { data -> deserializeBusinessAwayMessageSettings(jsonObject = data) },
            startPage = jsonObject.getObjectNullable(key = "start_page") { data -> deserializeBusinessStartPage(jsonObject = data) },
        )
    }

    private fun deserializeBusinessLocation(jsonObject: JsonObject): BusinessLocation {
        return BusinessLocation(
            location = jsonObject.getObjectNullable(key = "location") { data -> deserializeLocation(jsonObject = data) },
            address = jsonObject.getString(key = "address"),
        )
    }

    private fun deserializeBusinessMessage(jsonObject: JsonObject): BusinessMessage {
        return BusinessMessage(
            message = jsonObject.getObject(key = "message") { data -> deserializeMessage(jsonObject = data) },
            replyToMessage = jsonObject.getObjectNullable(key = "reply_to_message") { data -> deserializeMessage(jsonObject = data) },
        )
    }

    private fun deserializeBusinessMessages(jsonObject: JsonObject): BusinessMessages {
        return BusinessMessages(
            messages = jsonObject.getObjects(key = "messages") { data -> deserializeBusinessMessage(jsonObject = data) },
        )
    }

    private fun deserializeBusinessOpeningHours(jsonObject: JsonObject): BusinessOpeningHours {
        return BusinessOpeningHours(
            timeZoneId = jsonObject.getString(key = "time_zone_id"),
            openingHours = jsonObject.getObjects(key = "opening_hours") { data -> deserializeBusinessOpeningHoursInterval(jsonObject = data) },
        )
    }

    private fun deserializeBusinessOpeningHoursInterval(jsonObject: JsonObject): BusinessOpeningHoursInterval {
        return BusinessOpeningHoursInterval(
            startMinute = jsonObject.getInt(key = "start_minute"),
            endMinute = jsonObject.getInt(key = "end_minute"),
        )
    }

    private fun deserializeBusinessRecipients(jsonObject: JsonObject): BusinessRecipients {
        return BusinessRecipients(
            chatIds = jsonObject.getLongs(key = "chat_ids"),
            excludedChatIds = jsonObject.getLongs(key = "excluded_chat_ids"),
            selectExistingChats = jsonObject.getBoolean(key = "select_existing_chats"),
            selectNewChats = jsonObject.getBoolean(key = "select_new_chats"),
            selectContacts = jsonObject.getBoolean(key = "select_contacts"),
            selectNonContacts = jsonObject.getBoolean(key = "select_non_contacts"),
            excludeSelected = jsonObject.getBoolean(key = "exclude_selected"),
        )
    }

    private fun deserializeBusinessStartPage(jsonObject: JsonObject): BusinessStartPage {
        return BusinessStartPage(
            title = jsonObject.getString(key = "title"),
            message = jsonObject.getString(key = "message"),
            sticker = jsonObject.getObjectNullable(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeCall(jsonObject: JsonObject): Call {
        return Call(
            id = jsonObject.getInt(key = "id"),
            userId = jsonObject.getLong(key = "user_id"),
            isOutgoing = jsonObject.getBoolean(key = "is_outgoing"),
            isVideo = jsonObject.getBoolean(key = "is_video"),
            state = jsonObject.getObject(key = "state") { data -> deserializeCallState(jsonObject = data) },
        )
    }

    private fun deserializeCallDiscardReasonDeclined(jsonObject: JsonObject): CallDiscardReasonDeclined {
        return CallDiscardReasonDeclined()
    }

    private fun deserializeCallDiscardReasonDisconnected(jsonObject: JsonObject): CallDiscardReasonDisconnected {
        return CallDiscardReasonDisconnected()
    }

    private fun deserializeCallDiscardReasonEmpty(jsonObject: JsonObject): CallDiscardReasonEmpty {
        return CallDiscardReasonEmpty()
    }

    private fun deserializeCallDiscardReasonHungUp(jsonObject: JsonObject): CallDiscardReasonHungUp {
        return CallDiscardReasonHungUp()
    }

    private fun deserializeCallDiscardReasonMissed(jsonObject: JsonObject): CallDiscardReasonMissed {
        return CallDiscardReasonMissed()
    }

    private fun deserializeCallDiscardReasonUpgradeToGroupCall(jsonObject: JsonObject): CallDiscardReasonUpgradeToGroupCall {
        return CallDiscardReasonUpgradeToGroupCall(
            inviteLink = jsonObject.getString(key = "invite_link"),
        )
    }

    private fun deserializeCallId(jsonObject: JsonObject): CallId {
        return CallId(
            id = jsonObject.getInt(key = "id"),
        )
    }

    private fun deserializeCallProblemDistortedSpeech(jsonObject: JsonObject): CallProblemDistortedSpeech {
        return CallProblemDistortedSpeech()
    }

    private fun deserializeCallProblemDistortedVideo(jsonObject: JsonObject): CallProblemDistortedVideo {
        return CallProblemDistortedVideo()
    }

    private fun deserializeCallProblemDropped(jsonObject: JsonObject): CallProblemDropped {
        return CallProblemDropped()
    }

    private fun deserializeCallProblemEcho(jsonObject: JsonObject): CallProblemEcho {
        return CallProblemEcho()
    }

    private fun deserializeCallProblemInterruptions(jsonObject: JsonObject): CallProblemInterruptions {
        return CallProblemInterruptions()
    }

    private fun deserializeCallProblemNoise(jsonObject: JsonObject): CallProblemNoise {
        return CallProblemNoise()
    }

    private fun deserializeCallProblemPixelatedVideo(jsonObject: JsonObject): CallProblemPixelatedVideo {
        return CallProblemPixelatedVideo()
    }

    private fun deserializeCallProblemSilentLocal(jsonObject: JsonObject): CallProblemSilentLocal {
        return CallProblemSilentLocal()
    }

    private fun deserializeCallProblemSilentRemote(jsonObject: JsonObject): CallProblemSilentRemote {
        return CallProblemSilentRemote()
    }

    private fun deserializeCallProtocol(jsonObject: JsonObject): CallProtocol {
        return CallProtocol(
            udpP2p = jsonObject.getBoolean(key = "udp_p2p"),
            udpReflector = jsonObject.getBoolean(key = "udp_reflector"),
            minLayer = jsonObject.getInt(key = "min_layer"),
            maxLayer = jsonObject.getInt(key = "max_layer"),
            libraryVersions = jsonObject.getStrings(key = "library_versions"),
        )
    }

    private fun deserializeCallServer(jsonObject: JsonObject): CallServer {
        return CallServer(
            id = jsonObject.getLong(key = "id"),
            ipAddress = jsonObject.getString(key = "ip_address"),
            ipv6Address = jsonObject.getString(key = "ipv6_address"),
            port = jsonObject.getInt(key = "port"),
            type = jsonObject.getObject(key = "type") { data -> deserializeCallServerType(jsonObject = data) },
        )
    }

    private fun deserializeCallServerTypeTelegramReflector(jsonObject: JsonObject): CallServerTypeTelegramReflector {
        return CallServerTypeTelegramReflector(
            peerTag = jsonObject.getBytes(key = "peer_tag"),
            isTcp = jsonObject.getBoolean(key = "is_tcp"),
        )
    }

    private fun deserializeCallServerTypeWebrtc(jsonObject: JsonObject): CallServerTypeWebrtc {
        return CallServerTypeWebrtc(
            username = jsonObject.getString(key = "username"),
            password = jsonObject.getString(key = "password"),
            supportsTurn = jsonObject.getBoolean(key = "supports_turn"),
            supportsStun = jsonObject.getBoolean(key = "supports_stun"),
        )
    }

    private fun deserializeCallStateDiscarded(jsonObject: JsonObject): CallStateDiscarded {
        return CallStateDiscarded(
            reason = jsonObject.getObject(key = "reason") { data -> deserializeCallDiscardReason(jsonObject = data) },
            needRating = jsonObject.getBoolean(key = "need_rating"),
            needDebugInformation = jsonObject.getBoolean(key = "need_debug_information"),
            needLog = jsonObject.getBoolean(key = "need_log"),
        )
    }

    private fun deserializeCallStateError(jsonObject: JsonObject): CallStateError {
        return CallStateError(
            error = jsonObject.getObject(key = "error") { data -> deserializeError(jsonObject = data) },
        )
    }

    private fun deserializeCallStateExchangingKeys(jsonObject: JsonObject): CallStateExchangingKeys {
        return CallStateExchangingKeys()
    }

    private fun deserializeCallStateHangingUp(jsonObject: JsonObject): CallStateHangingUp {
        return CallStateHangingUp()
    }

    private fun deserializeCallStatePending(jsonObject: JsonObject): CallStatePending {
        return CallStatePending(
            isCreated = jsonObject.getBoolean(key = "is_created"),
            isReceived = jsonObject.getBoolean(key = "is_received"),
        )
    }

    private fun deserializeCallStateReady(jsonObject: JsonObject): CallStateReady {
        return CallStateReady(
            protocol = jsonObject.getObject(key = "protocol") { data -> deserializeCallProtocol(jsonObject = data) },
            servers = jsonObject.getObjects(key = "servers") { data -> deserializeCallServer(jsonObject = data) },
            config = jsonObject.getString(key = "config"),
            encryptionKey = jsonObject.getBytes(key = "encryption_key"),
            emojis = jsonObject.getStrings(key = "emojis"),
            allowP2p = jsonObject.getBoolean(key = "allow_p2p"),
            isGroupCallSupported = jsonObject.getBoolean(key = "is_group_call_supported"),
            customParameters = jsonObject.getString(key = "custom_parameters"),
        )
    }

    private fun deserializeCallbackQueryAnswer(jsonObject: JsonObject): CallbackQueryAnswer {
        return CallbackQueryAnswer(
            text = jsonObject.getString(key = "text"),
            showAlert = jsonObject.getBoolean(key = "show_alert"),
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeCallbackQueryPayloadData(jsonObject: JsonObject): CallbackQueryPayloadData {
        return CallbackQueryPayloadData(
            data = jsonObject.getBytes(key = "data"),
        )
    }

    private fun deserializeCallbackQueryPayloadDataWithPassword(jsonObject: JsonObject): CallbackQueryPayloadDataWithPassword {
        return CallbackQueryPayloadDataWithPassword(
            password = jsonObject.getString(key = "password"),
            data = jsonObject.getBytes(key = "data"),
        )
    }

    private fun deserializeCallbackQueryPayloadGame(jsonObject: JsonObject): CallbackQueryPayloadGame {
        return CallbackQueryPayloadGame(
            gameShortName = jsonObject.getString(key = "game_short_name"),
        )
    }

    private fun deserializeCanPostStoryResultActiveStoryLimitExceeded(jsonObject: JsonObject): CanPostStoryResultActiveStoryLimitExceeded {
        return CanPostStoryResultActiveStoryLimitExceeded()
    }

    private fun deserializeCanPostStoryResultBoostNeeded(jsonObject: JsonObject): CanPostStoryResultBoostNeeded {
        return CanPostStoryResultBoostNeeded()
    }

    private fun deserializeCanPostStoryResultMonthlyLimitExceeded(jsonObject: JsonObject): CanPostStoryResultMonthlyLimitExceeded {
        return CanPostStoryResultMonthlyLimitExceeded(
            retryAfter = jsonObject.getInt(key = "retry_after"),
        )
    }

    private fun deserializeCanPostStoryResultOk(jsonObject: JsonObject): CanPostStoryResultOk {
        return CanPostStoryResultOk(
            storyCount = jsonObject.getInt(key = "story_count"),
        )
    }

    private fun deserializeCanPostStoryResultPremiumNeeded(jsonObject: JsonObject): CanPostStoryResultPremiumNeeded {
        return CanPostStoryResultPremiumNeeded()
    }

    private fun deserializeCanPostStoryResultWeeklyLimitExceeded(jsonObject: JsonObject): CanPostStoryResultWeeklyLimitExceeded {
        return CanPostStoryResultWeeklyLimitExceeded(
            retryAfter = jsonObject.getInt(key = "retry_after"),
        )
    }

    private fun deserializeCanSendMessageToUserResultOk(jsonObject: JsonObject): CanSendMessageToUserResultOk {
        return CanSendMessageToUserResultOk()
    }

    private fun deserializeCanSendMessageToUserResultUserHasPaidMessages(jsonObject: JsonObject): CanSendMessageToUserResultUserHasPaidMessages {
        return CanSendMessageToUserResultUserHasPaidMessages(
            outgoingPaidMessageStarCount = jsonObject.getLong(key = "outgoing_paid_message_star_count"),
        )
    }

    private fun deserializeCanSendMessageToUserResultUserIsDeleted(jsonObject: JsonObject): CanSendMessageToUserResultUserIsDeleted {
        return CanSendMessageToUserResultUserIsDeleted()
    }

    private fun deserializeCanSendMessageToUserResultUserRestrictsNewChats(jsonObject: JsonObject): CanSendMessageToUserResultUserRestrictsNewChats {
        return CanSendMessageToUserResultUserRestrictsNewChats()
    }

    private fun deserializeCanTransferOwnershipResultOk(jsonObject: JsonObject): CanTransferOwnershipResultOk {
        return CanTransferOwnershipResultOk()
    }

    private fun deserializeCanTransferOwnershipResultPasswordNeeded(jsonObject: JsonObject): CanTransferOwnershipResultPasswordNeeded {
        return CanTransferOwnershipResultPasswordNeeded()
    }

    private fun deserializeCanTransferOwnershipResultPasswordTooFresh(jsonObject: JsonObject): CanTransferOwnershipResultPasswordTooFresh {
        return CanTransferOwnershipResultPasswordTooFresh(
            retryAfter = jsonObject.getInt(key = "retry_after"),
        )
    }

    private fun deserializeCanTransferOwnershipResultSessionTooFresh(jsonObject: JsonObject): CanTransferOwnershipResultSessionTooFresh {
        return CanTransferOwnershipResultSessionTooFresh(
            retryAfter = jsonObject.getInt(key = "retry_after"),
        )
    }

    private fun deserializeChat(jsonObject: JsonObject): Chat {
        return Chat(
            id = jsonObject.getLong(key = "id"),
            type = jsonObject.getObject(key = "type") { data -> deserializeChatType(jsonObject = data) },
            title = jsonObject.getString(key = "title"),
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializeChatPhotoInfo(jsonObject = data) },
            accentColorId = jsonObject.getInt(key = "accent_color_id"),
            backgroundCustomEmojiId = jsonObject.getLong(key = "background_custom_emoji_id"),
            profileAccentColorId = jsonObject.getInt(key = "profile_accent_color_id"),
            profileBackgroundCustomEmojiId = jsonObject.getLong(key = "profile_background_custom_emoji_id"),
            permissions = jsonObject.getObject(key = "permissions") { data -> deserializeChatPermissions(jsonObject = data) },
            lastMessage = jsonObject.getObjectNullable(key = "last_message") { data -> deserializeMessage(jsonObject = data) },
            positions = jsonObject.getObjects(key = "positions") { data -> deserializeChatPosition(jsonObject = data) },
            chatLists = jsonObject.getObjects(key = "chat_lists") { data -> deserializeChatList(jsonObject = data) },
            messageSenderId = jsonObject.getObjectNullable(key = "message_sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            blockList = jsonObject.getObjectNullable(key = "block_list") { data -> deserializeBlockList(jsonObject = data) },
            hasProtectedContent = jsonObject.getBoolean(key = "has_protected_content"),
            isTranslatable = jsonObject.getBoolean(key = "is_translatable"),
            isMarkedAsUnread = jsonObject.getBoolean(key = "is_marked_as_unread"),
            viewAsTopics = jsonObject.getBoolean(key = "view_as_topics"),
            hasScheduledMessages = jsonObject.getBoolean(key = "has_scheduled_messages"),
            canBeDeletedOnlyForSelf = jsonObject.getBoolean(key = "can_be_deleted_only_for_self"),
            canBeDeletedForAllUsers = jsonObject.getBoolean(key = "can_be_deleted_for_all_users"),
            canBeReported = jsonObject.getBoolean(key = "can_be_reported"),
            defaultDisableNotification = jsonObject.getBoolean(key = "default_disable_notification"),
            unreadCount = jsonObject.getInt(key = "unread_count"),
            lastReadInboxMessageId = jsonObject.getLong(key = "last_read_inbox_message_id"),
            lastReadOutboxMessageId = jsonObject.getLong(key = "last_read_outbox_message_id"),
            unreadMentionCount = jsonObject.getInt(key = "unread_mention_count"),
            unreadReactionCount = jsonObject.getInt(key = "unread_reaction_count"),
            notificationSettings = jsonObject.getObject(key = "notification_settings") { data -> deserializeChatNotificationSettings(jsonObject = data) },
            availableReactions = jsonObject.getObject(key = "available_reactions") { data -> deserializeChatAvailableReactions(jsonObject = data) },
            messageAutoDeleteTime = jsonObject.getInt(key = "message_auto_delete_time"),
            emojiStatus = jsonObject.getObjectNullable(key = "emoji_status") { data -> deserializeEmojiStatus(jsonObject = data) },
            background = jsonObject.getObjectNullable(key = "background") { data -> deserializeChatBackground(jsonObject = data) },
            themeName = jsonObject.getString(key = "theme_name"),
            actionBar = jsonObject.getObjectNullable(key = "action_bar") { data -> deserializeChatActionBar(jsonObject = data) },
            businessBotManageBar = jsonObject.getObjectNullable(key = "business_bot_manage_bar") { data -> deserializeBusinessBotManageBar(jsonObject = data) },
            videoChat = jsonObject.getObject(key = "video_chat") { data -> deserializeVideoChat(jsonObject = data) },
            pendingJoinRequests = jsonObject.getObjectNullable(key = "pending_join_requests") { data -> deserializeChatJoinRequestsInfo(jsonObject = data) },
            replyMarkupMessageId = jsonObject.getLong(key = "reply_markup_message_id"),
            draftMessage = jsonObject.getObjectNullable(key = "draft_message") { data -> deserializeDraftMessage(jsonObject = data) },
            clientData = jsonObject.getString(key = "client_data"),
        )
    }

    private fun deserializeChatActionBarAddContact(jsonObject: JsonObject): ChatActionBarAddContact {
        return ChatActionBarAddContact()
    }

    private fun deserializeChatActionBarInviteMembers(jsonObject: JsonObject): ChatActionBarInviteMembers {
        return ChatActionBarInviteMembers()
    }

    private fun deserializeChatActionBarJoinRequest(jsonObject: JsonObject): ChatActionBarJoinRequest {
        return ChatActionBarJoinRequest(
            title = jsonObject.getString(key = "title"),
            isChannel = jsonObject.getBoolean(key = "is_channel"),
            requestDate = jsonObject.getInt(key = "request_date"),
        )
    }

    private fun deserializeChatActionBarReportAddBlock(jsonObject: JsonObject): ChatActionBarReportAddBlock {
        return ChatActionBarReportAddBlock(
            canUnarchive = jsonObject.getBoolean(key = "can_unarchive"),
            accountInfo = jsonObject.getObjectNullable(key = "account_info") { data -> deserializeAccountInfo(jsonObject = data) },
        )
    }

    private fun deserializeChatActionBarReportSpam(jsonObject: JsonObject): ChatActionBarReportSpam {
        return ChatActionBarReportSpam(
            canUnarchive = jsonObject.getBoolean(key = "can_unarchive"),
        )
    }

    private fun deserializeChatActionBarSharePhoneNumber(jsonObject: JsonObject): ChatActionBarSharePhoneNumber {
        return ChatActionBarSharePhoneNumber()
    }

    private fun deserializeChatActionCancel(jsonObject: JsonObject): ChatActionCancel {
        return ChatActionCancel()
    }

    private fun deserializeChatActionChoosingContact(jsonObject: JsonObject): ChatActionChoosingContact {
        return ChatActionChoosingContact()
    }

    private fun deserializeChatActionChoosingLocation(jsonObject: JsonObject): ChatActionChoosingLocation {
        return ChatActionChoosingLocation()
    }

    private fun deserializeChatActionChoosingSticker(jsonObject: JsonObject): ChatActionChoosingSticker {
        return ChatActionChoosingSticker()
    }

    private fun deserializeChatActionRecordingVideo(jsonObject: JsonObject): ChatActionRecordingVideo {
        return ChatActionRecordingVideo()
    }

    private fun deserializeChatActionRecordingVideoNote(jsonObject: JsonObject): ChatActionRecordingVideoNote {
        return ChatActionRecordingVideoNote()
    }

    private fun deserializeChatActionRecordingVoiceNote(jsonObject: JsonObject): ChatActionRecordingVoiceNote {
        return ChatActionRecordingVoiceNote()
    }

    private fun deserializeChatActionStartPlayingGame(jsonObject: JsonObject): ChatActionStartPlayingGame {
        return ChatActionStartPlayingGame()
    }

    private fun deserializeChatActionTyping(jsonObject: JsonObject): ChatActionTyping {
        return ChatActionTyping()
    }

    private fun deserializeChatActionUploadingDocument(jsonObject: JsonObject): ChatActionUploadingDocument {
        return ChatActionUploadingDocument(
            progress = jsonObject.getInt(key = "progress"),
        )
    }

    private fun deserializeChatActionUploadingPhoto(jsonObject: JsonObject): ChatActionUploadingPhoto {
        return ChatActionUploadingPhoto(
            progress = jsonObject.getInt(key = "progress"),
        )
    }

    private fun deserializeChatActionUploadingVideo(jsonObject: JsonObject): ChatActionUploadingVideo {
        return ChatActionUploadingVideo(
            progress = jsonObject.getInt(key = "progress"),
        )
    }

    private fun deserializeChatActionUploadingVideoNote(jsonObject: JsonObject): ChatActionUploadingVideoNote {
        return ChatActionUploadingVideoNote(
            progress = jsonObject.getInt(key = "progress"),
        )
    }

    private fun deserializeChatActionUploadingVoiceNote(jsonObject: JsonObject): ChatActionUploadingVoiceNote {
        return ChatActionUploadingVoiceNote(
            progress = jsonObject.getInt(key = "progress"),
        )
    }

    private fun deserializeChatActionWatchingAnimations(jsonObject: JsonObject): ChatActionWatchingAnimations {
        return ChatActionWatchingAnimations(
            emoji = jsonObject.getString(key = "emoji"),
        )
    }

    private fun deserializeChatActiveStories(jsonObject: JsonObject): ChatActiveStories {
        return ChatActiveStories(
            chatId = jsonObject.getLong(key = "chat_id"),
            list = jsonObject.getObjectNullable(key = "list") { data -> deserializeStoryList(jsonObject = data) },
            order = jsonObject.getLong(key = "order"),
            maxReadStoryId = jsonObject.getInt(key = "max_read_story_id"),
            stories = jsonObject.getObjects(key = "stories") { data -> deserializeStoryInfo(jsonObject = data) },
        )
    }

    private fun deserializeChatAdministrator(jsonObject: JsonObject): ChatAdministrator {
        return ChatAdministrator(
            userId = jsonObject.getLong(key = "user_id"),
            customTitle = jsonObject.getString(key = "custom_title"),
            isOwner = jsonObject.getBoolean(key = "is_owner"),
        )
    }

    private fun deserializeChatAdministratorRights(jsonObject: JsonObject): ChatAdministratorRights {
        return ChatAdministratorRights(
            canManageChat = jsonObject.getBoolean(key = "can_manage_chat"),
            canChangeInfo = jsonObject.getBoolean(key = "can_change_info"),
            canPostMessages = jsonObject.getBoolean(key = "can_post_messages"),
            canEditMessages = jsonObject.getBoolean(key = "can_edit_messages"),
            canDeleteMessages = jsonObject.getBoolean(key = "can_delete_messages"),
            canInviteUsers = jsonObject.getBoolean(key = "can_invite_users"),
            canRestrictMembers = jsonObject.getBoolean(key = "can_restrict_members"),
            canPinMessages = jsonObject.getBoolean(key = "can_pin_messages"),
            canManageTopics = jsonObject.getBoolean(key = "can_manage_topics"),
            canPromoteMembers = jsonObject.getBoolean(key = "can_promote_members"),
            canManageVideoChats = jsonObject.getBoolean(key = "can_manage_video_chats"),
            canPostStories = jsonObject.getBoolean(key = "can_post_stories"),
            canEditStories = jsonObject.getBoolean(key = "can_edit_stories"),
            canDeleteStories = jsonObject.getBoolean(key = "can_delete_stories"),
            isAnonymous = jsonObject.getBoolean(key = "is_anonymous"),
        )
    }

    private fun deserializeChatAdministrators(jsonObject: JsonObject): ChatAdministrators {
        return ChatAdministrators(
            administrators = jsonObject.getObjects(key = "administrators") { data -> deserializeChatAdministrator(jsonObject = data) },
        )
    }

    private fun deserializeChatAvailableReactionsAll(jsonObject: JsonObject): ChatAvailableReactionsAll {
        return ChatAvailableReactionsAll(
            maxReactionCount = jsonObject.getInt(key = "max_reaction_count"),
        )
    }

    private fun deserializeChatAvailableReactionsSome(jsonObject: JsonObject): ChatAvailableReactionsSome {
        return ChatAvailableReactionsSome(
            reactions = jsonObject.getObjects(key = "reactions") { data -> deserializeReactionType(jsonObject = data) },
            maxReactionCount = jsonObject.getInt(key = "max_reaction_count"),
        )
    }

    private fun deserializeChatBackground(jsonObject: JsonObject): ChatBackground {
        return ChatBackground(
            background = jsonObject.getObject(key = "background") { data -> deserializeBackground(jsonObject = data) },
            darkThemeDimming = jsonObject.getInt(key = "dark_theme_dimming"),
        )
    }

    private fun deserializeChatBoost(jsonObject: JsonObject): ChatBoost {
        return ChatBoost(
            id = jsonObject.getString(key = "id"),
            count = jsonObject.getInt(key = "count"),
            source = jsonObject.getObject(key = "source") { data -> deserializeChatBoostSource(jsonObject = data) },
            startDate = jsonObject.getInt(key = "start_date"),
            expirationDate = jsonObject.getInt(key = "expiration_date"),
        )
    }

    private fun deserializeChatBoostFeatures(jsonObject: JsonObject): ChatBoostFeatures {
        return ChatBoostFeatures(
            features = jsonObject.getObjects(key = "features") { data -> deserializeChatBoostLevelFeatures(jsonObject = data) },
            minProfileBackgroundCustomEmojiBoostLevel = jsonObject.getInt(key = "min_profile_background_custom_emoji_boost_level"),
            minBackgroundCustomEmojiBoostLevel = jsonObject.getInt(key = "min_background_custom_emoji_boost_level"),
            minEmojiStatusBoostLevel = jsonObject.getInt(key = "min_emoji_status_boost_level"),
            minChatThemeBackgroundBoostLevel = jsonObject.getInt(key = "min_chat_theme_background_boost_level"),
            minCustomBackgroundBoostLevel = jsonObject.getInt(key = "min_custom_background_boost_level"),
            minCustomEmojiStickerSetBoostLevel = jsonObject.getInt(key = "min_custom_emoji_sticker_set_boost_level"),
            minAutomaticTranslationBoostLevel = jsonObject.getInt(key = "min_automatic_translation_boost_level"),
            minSpeechRecognitionBoostLevel = jsonObject.getInt(key = "min_speech_recognition_boost_level"),
            minSponsoredMessageDisableBoostLevel = jsonObject.getInt(key = "min_sponsored_message_disable_boost_level"),
        )
    }

    private fun deserializeChatBoostLevelFeatures(jsonObject: JsonObject): ChatBoostLevelFeatures {
        return ChatBoostLevelFeatures(
            level = jsonObject.getInt(key = "level"),
            storyPerDayCount = jsonObject.getInt(key = "story_per_day_count"),
            customEmojiReactionCount = jsonObject.getInt(key = "custom_emoji_reaction_count"),
            titleColorCount = jsonObject.getInt(key = "title_color_count"),
            profileAccentColorCount = jsonObject.getInt(key = "profile_accent_color_count"),
            canSetProfileBackgroundCustomEmoji = jsonObject.getBoolean(key = "can_set_profile_background_custom_emoji"),
            accentColorCount = jsonObject.getInt(key = "accent_color_count"),
            canSetBackgroundCustomEmoji = jsonObject.getBoolean(key = "can_set_background_custom_emoji"),
            canSetEmojiStatus = jsonObject.getBoolean(key = "can_set_emoji_status"),
            chatThemeBackgroundCount = jsonObject.getInt(key = "chat_theme_background_count"),
            canSetCustomBackground = jsonObject.getBoolean(key = "can_set_custom_background"),
            canSetCustomEmojiStickerSet = jsonObject.getBoolean(key = "can_set_custom_emoji_sticker_set"),
            canEnableAutomaticTranslation = jsonObject.getBoolean(key = "can_enable_automatic_translation"),
            canRecognizeSpeech = jsonObject.getBoolean(key = "can_recognize_speech"),
            canDisableSponsoredMessages = jsonObject.getBoolean(key = "can_disable_sponsored_messages"),
        )
    }

    private fun deserializeChatBoostLink(jsonObject: JsonObject): ChatBoostLink {
        return ChatBoostLink(
            link = jsonObject.getString(key = "link"),
            isPublic = jsonObject.getBoolean(key = "is_public"),
        )
    }

    private fun deserializeChatBoostLinkInfo(jsonObject: JsonObject): ChatBoostLinkInfo {
        return ChatBoostLinkInfo(
            isPublic = jsonObject.getBoolean(key = "is_public"),
            chatId = jsonObject.getLong(key = "chat_id"),
        )
    }

    private fun deserializeChatBoostSlot(jsonObject: JsonObject): ChatBoostSlot {
        return ChatBoostSlot(
            slotId = jsonObject.getInt(key = "slot_id"),
            currentlyBoostedChatId = jsonObject.getLong(key = "currently_boosted_chat_id"),
            startDate = jsonObject.getInt(key = "start_date"),
            expirationDate = jsonObject.getInt(key = "expiration_date"),
            cooldownUntilDate = jsonObject.getInt(key = "cooldown_until_date"),
        )
    }

    private fun deserializeChatBoostSlots(jsonObject: JsonObject): ChatBoostSlots {
        return ChatBoostSlots(
            slots = jsonObject.getObjects(key = "slots") { data -> deserializeChatBoostSlot(jsonObject = data) },
        )
    }

    private fun deserializeChatBoostSourceGiftCode(jsonObject: JsonObject): ChatBoostSourceGiftCode {
        return ChatBoostSourceGiftCode(
            userId = jsonObject.getLong(key = "user_id"),
            giftCode = jsonObject.getString(key = "gift_code"),
        )
    }

    private fun deserializeChatBoostSourceGiveaway(jsonObject: JsonObject): ChatBoostSourceGiveaway {
        return ChatBoostSourceGiveaway(
            userId = jsonObject.getLong(key = "user_id"),
            giftCode = jsonObject.getString(key = "gift_code"),
            starCount = jsonObject.getLong(key = "star_count"),
            giveawayMessageId = jsonObject.getLong(key = "giveaway_message_id"),
            isUnclaimed = jsonObject.getBoolean(key = "is_unclaimed"),
        )
    }

    private fun deserializeChatBoostSourcePremium(jsonObject: JsonObject): ChatBoostSourcePremium {
        return ChatBoostSourcePremium(
            userId = jsonObject.getLong(key = "user_id"),
        )
    }

    private fun deserializeChatBoostStatus(jsonObject: JsonObject): ChatBoostStatus {
        return ChatBoostStatus(
            boostUrl = jsonObject.getString(key = "boost_url"),
            appliedSlotIds = jsonObject.getInts(key = "applied_slot_ids"),
            level = jsonObject.getInt(key = "level"),
            giftCodeBoostCount = jsonObject.getInt(key = "gift_code_boost_count"),
            boostCount = jsonObject.getInt(key = "boost_count"),
            currentLevelBoostCount = jsonObject.getInt(key = "current_level_boost_count"),
            nextLevelBoostCount = jsonObject.getInt(key = "next_level_boost_count"),
            premiumMemberCount = jsonObject.getInt(key = "premium_member_count"),
            premiumMemberPercentage = jsonObject.getDouble(key = "premium_member_percentage"),
            prepaidGiveaways = jsonObject.getObjects(key = "prepaid_giveaways") { data -> deserializePrepaidGiveaway(jsonObject = data) },
        )
    }

    private fun deserializeChatEvent(jsonObject: JsonObject): ChatEvent {
        return ChatEvent(
            id = jsonObject.getLong(key = "id"),
            date = jsonObject.getInt(key = "date"),
            memberId = jsonObject.getObject(key = "member_id") { data -> deserializeMessageSender(jsonObject = data) },
            action = jsonObject.getObject(key = "action") { data -> deserializeChatEventAction(jsonObject = data) },
        )
    }

    private fun deserializeChatEventAccentColorChanged(jsonObject: JsonObject): ChatEventAccentColorChanged {
        return ChatEventAccentColorChanged(
            oldAccentColorId = jsonObject.getInt(key = "old_accent_color_id"),
            oldBackgroundCustomEmojiId = jsonObject.getLong(key = "old_background_custom_emoji_id"),
            newAccentColorId = jsonObject.getInt(key = "new_accent_color_id"),
            newBackgroundCustomEmojiId = jsonObject.getLong(key = "new_background_custom_emoji_id"),
        )
    }

    private fun deserializeChatEventActiveUsernamesChanged(jsonObject: JsonObject): ChatEventActiveUsernamesChanged {
        return ChatEventActiveUsernamesChanged(
            oldUsernames = jsonObject.getStrings(key = "old_usernames"),
            newUsernames = jsonObject.getStrings(key = "new_usernames"),
        )
    }

    private fun deserializeChatEventAutomaticTranslationToggled(jsonObject: JsonObject): ChatEventAutomaticTranslationToggled {
        return ChatEventAutomaticTranslationToggled(
            hasAutomaticTranslation = jsonObject.getBoolean(key = "has_automatic_translation"),
        )
    }

    private fun deserializeChatEventAvailableReactionsChanged(jsonObject: JsonObject): ChatEventAvailableReactionsChanged {
        return ChatEventAvailableReactionsChanged(
            oldAvailableReactions = jsonObject.getObject(key = "old_available_reactions") { data -> deserializeChatAvailableReactions(jsonObject = data) },
            newAvailableReactions = jsonObject.getObject(key = "new_available_reactions") { data -> deserializeChatAvailableReactions(jsonObject = data) },
        )
    }

    private fun deserializeChatEventBackgroundChanged(jsonObject: JsonObject): ChatEventBackgroundChanged {
        return ChatEventBackgroundChanged(
            oldBackground = jsonObject.getObjectNullable(key = "old_background") { data -> deserializeChatBackground(jsonObject = data) },
            newBackground = jsonObject.getObjectNullable(key = "new_background") { data -> deserializeChatBackground(jsonObject = data) },
        )
    }

    private fun deserializeChatEventCustomEmojiStickerSetChanged(jsonObject: JsonObject): ChatEventCustomEmojiStickerSetChanged {
        return ChatEventCustomEmojiStickerSetChanged(
            oldStickerSetId = jsonObject.getLong(key = "old_sticker_set_id"),
            newStickerSetId = jsonObject.getLong(key = "new_sticker_set_id"),
        )
    }

    private fun deserializeChatEventDescriptionChanged(jsonObject: JsonObject): ChatEventDescriptionChanged {
        return ChatEventDescriptionChanged(
            oldDescription = jsonObject.getString(key = "old_description"),
            newDescription = jsonObject.getString(key = "new_description"),
        )
    }

    private fun deserializeChatEventEmojiStatusChanged(jsonObject: JsonObject): ChatEventEmojiStatusChanged {
        return ChatEventEmojiStatusChanged(
            oldEmojiStatus = jsonObject.getObjectNullable(key = "old_emoji_status") { data -> deserializeEmojiStatus(jsonObject = data) },
            newEmojiStatus = jsonObject.getObjectNullable(key = "new_emoji_status") { data -> deserializeEmojiStatus(jsonObject = data) },
        )
    }

    private fun deserializeChatEventForumTopicCreated(jsonObject: JsonObject): ChatEventForumTopicCreated {
        return ChatEventForumTopicCreated(
            topicInfo = jsonObject.getObject(key = "topic_info") { data -> deserializeForumTopicInfo(jsonObject = data) },
        )
    }

    private fun deserializeChatEventForumTopicDeleted(jsonObject: JsonObject): ChatEventForumTopicDeleted {
        return ChatEventForumTopicDeleted(
            topicInfo = jsonObject.getObject(key = "topic_info") { data -> deserializeForumTopicInfo(jsonObject = data) },
        )
    }

    private fun deserializeChatEventForumTopicEdited(jsonObject: JsonObject): ChatEventForumTopicEdited {
        return ChatEventForumTopicEdited(
            oldTopicInfo = jsonObject.getObject(key = "old_topic_info") { data -> deserializeForumTopicInfo(jsonObject = data) },
            newTopicInfo = jsonObject.getObject(key = "new_topic_info") { data -> deserializeForumTopicInfo(jsonObject = data) },
        )
    }

    private fun deserializeChatEventForumTopicPinned(jsonObject: JsonObject): ChatEventForumTopicPinned {
        return ChatEventForumTopicPinned(
            oldTopicInfo = jsonObject.getObjectNullable(key = "old_topic_info") { data -> deserializeForumTopicInfo(jsonObject = data) },
            newTopicInfo = jsonObject.getObjectNullable(key = "new_topic_info") { data -> deserializeForumTopicInfo(jsonObject = data) },
        )
    }

    private fun deserializeChatEventForumTopicToggleIsClosed(jsonObject: JsonObject): ChatEventForumTopicToggleIsClosed {
        return ChatEventForumTopicToggleIsClosed(
            topicInfo = jsonObject.getObject(key = "topic_info") { data -> deserializeForumTopicInfo(jsonObject = data) },
        )
    }

    private fun deserializeChatEventForumTopicToggleIsHidden(jsonObject: JsonObject): ChatEventForumTopicToggleIsHidden {
        return ChatEventForumTopicToggleIsHidden(
            topicInfo = jsonObject.getObject(key = "topic_info") { data -> deserializeForumTopicInfo(jsonObject = data) },
        )
    }

    private fun deserializeChatEventHasAggressiveAntiSpamEnabledToggled(jsonObject: JsonObject): ChatEventHasAggressiveAntiSpamEnabledToggled {
        return ChatEventHasAggressiveAntiSpamEnabledToggled(
            hasAggressiveAntiSpamEnabled = jsonObject.getBoolean(key = "has_aggressive_anti_spam_enabled"),
        )
    }

    private fun deserializeChatEventHasProtectedContentToggled(jsonObject: JsonObject): ChatEventHasProtectedContentToggled {
        return ChatEventHasProtectedContentToggled(
            hasProtectedContent = jsonObject.getBoolean(key = "has_protected_content"),
        )
    }

    private fun deserializeChatEventInviteLinkDeleted(jsonObject: JsonObject): ChatEventInviteLinkDeleted {
        return ChatEventInviteLinkDeleted(
            inviteLink = jsonObject.getObject(key = "invite_link") { data -> deserializeChatInviteLink(jsonObject = data) },
        )
    }

    private fun deserializeChatEventInviteLinkEdited(jsonObject: JsonObject): ChatEventInviteLinkEdited {
        return ChatEventInviteLinkEdited(
            oldInviteLink = jsonObject.getObject(key = "old_invite_link") { data -> deserializeChatInviteLink(jsonObject = data) },
            newInviteLink = jsonObject.getObject(key = "new_invite_link") { data -> deserializeChatInviteLink(jsonObject = data) },
        )
    }

    private fun deserializeChatEventInviteLinkRevoked(jsonObject: JsonObject): ChatEventInviteLinkRevoked {
        return ChatEventInviteLinkRevoked(
            inviteLink = jsonObject.getObject(key = "invite_link") { data -> deserializeChatInviteLink(jsonObject = data) },
        )
    }

    private fun deserializeChatEventInvitesToggled(jsonObject: JsonObject): ChatEventInvitesToggled {
        return ChatEventInvitesToggled(
            canInviteUsers = jsonObject.getBoolean(key = "can_invite_users"),
        )
    }

    private fun deserializeChatEventIsAllHistoryAvailableToggled(jsonObject: JsonObject): ChatEventIsAllHistoryAvailableToggled {
        return ChatEventIsAllHistoryAvailableToggled(
            isAllHistoryAvailable = jsonObject.getBoolean(key = "is_all_history_available"),
        )
    }

    private fun deserializeChatEventIsForumToggled(jsonObject: JsonObject): ChatEventIsForumToggled {
        return ChatEventIsForumToggled(
            isForum = jsonObject.getBoolean(key = "is_forum"),
        )
    }

    private fun deserializeChatEventLinkedChatChanged(jsonObject: JsonObject): ChatEventLinkedChatChanged {
        return ChatEventLinkedChatChanged(
            oldLinkedChatId = jsonObject.getLong(key = "old_linked_chat_id"),
            newLinkedChatId = jsonObject.getLong(key = "new_linked_chat_id"),
        )
    }

    private fun deserializeChatEventLocationChanged(jsonObject: JsonObject): ChatEventLocationChanged {
        return ChatEventLocationChanged(
            oldLocation = jsonObject.getObjectNullable(key = "old_location") { data -> deserializeChatLocation(jsonObject = data) },
            newLocation = jsonObject.getObjectNullable(key = "new_location") { data -> deserializeChatLocation(jsonObject = data) },
        )
    }

    private fun deserializeChatEventLogFilters(jsonObject: JsonObject): ChatEventLogFilters {
        return ChatEventLogFilters(
            messageEdits = jsonObject.getBoolean(key = "message_edits"),
            messageDeletions = jsonObject.getBoolean(key = "message_deletions"),
            messagePins = jsonObject.getBoolean(key = "message_pins"),
            memberJoins = jsonObject.getBoolean(key = "member_joins"),
            memberLeaves = jsonObject.getBoolean(key = "member_leaves"),
            memberInvites = jsonObject.getBoolean(key = "member_invites"),
            memberPromotions = jsonObject.getBoolean(key = "member_promotions"),
            memberRestrictions = jsonObject.getBoolean(key = "member_restrictions"),
            infoChanges = jsonObject.getBoolean(key = "info_changes"),
            settingChanges = jsonObject.getBoolean(key = "setting_changes"),
            inviteLinkChanges = jsonObject.getBoolean(key = "invite_link_changes"),
            videoChatChanges = jsonObject.getBoolean(key = "video_chat_changes"),
            forumChanges = jsonObject.getBoolean(key = "forum_changes"),
            subscriptionExtensions = jsonObject.getBoolean(key = "subscription_extensions"),
        )
    }

    private fun deserializeChatEventMemberInvited(jsonObject: JsonObject): ChatEventMemberInvited {
        return ChatEventMemberInvited(
            userId = jsonObject.getLong(key = "user_id"),
            status = jsonObject.getObject(key = "status") { data -> deserializeChatMemberStatus(jsonObject = data) },
        )
    }

    private fun deserializeChatEventMemberJoined(jsonObject: JsonObject): ChatEventMemberJoined {
        return ChatEventMemberJoined()
    }

    private fun deserializeChatEventMemberJoinedByInviteLink(jsonObject: JsonObject): ChatEventMemberJoinedByInviteLink {
        return ChatEventMemberJoinedByInviteLink(
            inviteLink = jsonObject.getObject(key = "invite_link") { data -> deserializeChatInviteLink(jsonObject = data) },
            viaChatFolderInviteLink = jsonObject.getBoolean(key = "via_chat_folder_invite_link"),
        )
    }

    private fun deserializeChatEventMemberJoinedByRequest(jsonObject: JsonObject): ChatEventMemberJoinedByRequest {
        return ChatEventMemberJoinedByRequest(
            approverUserId = jsonObject.getLong(key = "approver_user_id"),
            inviteLink = jsonObject.getObjectNullable(key = "invite_link") { data -> deserializeChatInviteLink(jsonObject = data) },
        )
    }

    private fun deserializeChatEventMemberLeft(jsonObject: JsonObject): ChatEventMemberLeft {
        return ChatEventMemberLeft()
    }

    private fun deserializeChatEventMemberPromoted(jsonObject: JsonObject): ChatEventMemberPromoted {
        return ChatEventMemberPromoted(
            userId = jsonObject.getLong(key = "user_id"),
            oldStatus = jsonObject.getObject(key = "old_status") { data -> deserializeChatMemberStatus(jsonObject = data) },
            newStatus = jsonObject.getObject(key = "new_status") { data -> deserializeChatMemberStatus(jsonObject = data) },
        )
    }

    private fun deserializeChatEventMemberRestricted(jsonObject: JsonObject): ChatEventMemberRestricted {
        return ChatEventMemberRestricted(
            memberId = jsonObject.getObject(key = "member_id") { data -> deserializeMessageSender(jsonObject = data) },
            oldStatus = jsonObject.getObject(key = "old_status") { data -> deserializeChatMemberStatus(jsonObject = data) },
            newStatus = jsonObject.getObject(key = "new_status") { data -> deserializeChatMemberStatus(jsonObject = data) },
        )
    }

    private fun deserializeChatEventMemberSubscriptionExtended(jsonObject: JsonObject): ChatEventMemberSubscriptionExtended {
        return ChatEventMemberSubscriptionExtended(
            userId = jsonObject.getLong(key = "user_id"),
            oldStatus = jsonObject.getObject(key = "old_status") { data -> deserializeChatMemberStatus(jsonObject = data) },
            newStatus = jsonObject.getObject(key = "new_status") { data -> deserializeChatMemberStatus(jsonObject = data) },
        )
    }

    private fun deserializeChatEventMessageAutoDeleteTimeChanged(jsonObject: JsonObject): ChatEventMessageAutoDeleteTimeChanged {
        return ChatEventMessageAutoDeleteTimeChanged(
            oldMessageAutoDeleteTime = jsonObject.getInt(key = "old_message_auto_delete_time"),
            newMessageAutoDeleteTime = jsonObject.getInt(key = "new_message_auto_delete_time"),
        )
    }

    private fun deserializeChatEventMessageDeleted(jsonObject: JsonObject): ChatEventMessageDeleted {
        return ChatEventMessageDeleted(
            message = jsonObject.getObject(key = "message") { data -> deserializeMessage(jsonObject = data) },
            canReportAntiSpamFalsePositive = jsonObject.getBoolean(key = "can_report_anti_spam_false_positive"),
        )
    }

    private fun deserializeChatEventMessageEdited(jsonObject: JsonObject): ChatEventMessageEdited {
        return ChatEventMessageEdited(
            oldMessage = jsonObject.getObject(key = "old_message") { data -> deserializeMessage(jsonObject = data) },
            newMessage = jsonObject.getObject(key = "new_message") { data -> deserializeMessage(jsonObject = data) },
        )
    }

    private fun deserializeChatEventMessagePinned(jsonObject: JsonObject): ChatEventMessagePinned {
        return ChatEventMessagePinned(
            message = jsonObject.getObject(key = "message") { data -> deserializeMessage(jsonObject = data) },
        )
    }

    private fun deserializeChatEventMessageUnpinned(jsonObject: JsonObject): ChatEventMessageUnpinned {
        return ChatEventMessageUnpinned(
            message = jsonObject.getObject(key = "message") { data -> deserializeMessage(jsonObject = data) },
        )
    }

    private fun deserializeChatEventPermissionsChanged(jsonObject: JsonObject): ChatEventPermissionsChanged {
        return ChatEventPermissionsChanged(
            oldPermissions = jsonObject.getObject(key = "old_permissions") { data -> deserializeChatPermissions(jsonObject = data) },
            newPermissions = jsonObject.getObject(key = "new_permissions") { data -> deserializeChatPermissions(jsonObject = data) },
        )
    }

    private fun deserializeChatEventPhotoChanged(jsonObject: JsonObject): ChatEventPhotoChanged {
        return ChatEventPhotoChanged(
            oldPhoto = jsonObject.getObjectNullable(key = "old_photo") { data -> deserializeChatPhoto(jsonObject = data) },
            newPhoto = jsonObject.getObjectNullable(key = "new_photo") { data -> deserializeChatPhoto(jsonObject = data) },
        )
    }

    private fun deserializeChatEventPollStopped(jsonObject: JsonObject): ChatEventPollStopped {
        return ChatEventPollStopped(
            message = jsonObject.getObject(key = "message") { data -> deserializeMessage(jsonObject = data) },
        )
    }

    private fun deserializeChatEventProfileAccentColorChanged(jsonObject: JsonObject): ChatEventProfileAccentColorChanged {
        return ChatEventProfileAccentColorChanged(
            oldProfileAccentColorId = jsonObject.getInt(key = "old_profile_accent_color_id"),
            oldProfileBackgroundCustomEmojiId = jsonObject.getLong(key = "old_profile_background_custom_emoji_id"),
            newProfileAccentColorId = jsonObject.getInt(key = "new_profile_accent_color_id"),
            newProfileBackgroundCustomEmojiId = jsonObject.getLong(key = "new_profile_background_custom_emoji_id"),
        )
    }

    private fun deserializeChatEventShowMessageSenderToggled(jsonObject: JsonObject): ChatEventShowMessageSenderToggled {
        return ChatEventShowMessageSenderToggled(
            showMessageSender = jsonObject.getBoolean(key = "show_message_sender"),
        )
    }

    private fun deserializeChatEventSignMessagesToggled(jsonObject: JsonObject): ChatEventSignMessagesToggled {
        return ChatEventSignMessagesToggled(
            signMessages = jsonObject.getBoolean(key = "sign_messages"),
        )
    }

    private fun deserializeChatEventSlowModeDelayChanged(jsonObject: JsonObject): ChatEventSlowModeDelayChanged {
        return ChatEventSlowModeDelayChanged(
            oldSlowModeDelay = jsonObject.getInt(key = "old_slow_mode_delay"),
            newSlowModeDelay = jsonObject.getInt(key = "new_slow_mode_delay"),
        )
    }

    private fun deserializeChatEventStickerSetChanged(jsonObject: JsonObject): ChatEventStickerSetChanged {
        return ChatEventStickerSetChanged(
            oldStickerSetId = jsonObject.getLong(key = "old_sticker_set_id"),
            newStickerSetId = jsonObject.getLong(key = "new_sticker_set_id"),
        )
    }

    private fun deserializeChatEventTitleChanged(jsonObject: JsonObject): ChatEventTitleChanged {
        return ChatEventTitleChanged(
            oldTitle = jsonObject.getString(key = "old_title"),
            newTitle = jsonObject.getString(key = "new_title"),
        )
    }

    private fun deserializeChatEventUsernameChanged(jsonObject: JsonObject): ChatEventUsernameChanged {
        return ChatEventUsernameChanged(
            oldUsername = jsonObject.getString(key = "old_username"),
            newUsername = jsonObject.getString(key = "new_username"),
        )
    }

    private fun deserializeChatEventVideoChatCreated(jsonObject: JsonObject): ChatEventVideoChatCreated {
        return ChatEventVideoChatCreated(
            groupCallId = jsonObject.getInt(key = "group_call_id"),
        )
    }

    private fun deserializeChatEventVideoChatEnded(jsonObject: JsonObject): ChatEventVideoChatEnded {
        return ChatEventVideoChatEnded(
            groupCallId = jsonObject.getInt(key = "group_call_id"),
        )
    }

    private fun deserializeChatEventVideoChatMuteNewParticipantsToggled(jsonObject: JsonObject): ChatEventVideoChatMuteNewParticipantsToggled {
        return ChatEventVideoChatMuteNewParticipantsToggled(
            muteNewParticipants = jsonObject.getBoolean(key = "mute_new_participants"),
        )
    }

    private fun deserializeChatEventVideoChatParticipantIsMutedToggled(jsonObject: JsonObject): ChatEventVideoChatParticipantIsMutedToggled {
        return ChatEventVideoChatParticipantIsMutedToggled(
            participantId = jsonObject.getObject(key = "participant_id") { data -> deserializeMessageSender(jsonObject = data) },
            isMuted = jsonObject.getBoolean(key = "is_muted"),
        )
    }

    private fun deserializeChatEventVideoChatParticipantVolumeLevelChanged(jsonObject: JsonObject): ChatEventVideoChatParticipantVolumeLevelChanged {
        return ChatEventVideoChatParticipantVolumeLevelChanged(
            participantId = jsonObject.getObject(key = "participant_id") { data -> deserializeMessageSender(jsonObject = data) },
            volumeLevel = jsonObject.getInt(key = "volume_level"),
        )
    }

    private fun deserializeChatEvents(jsonObject: JsonObject): ChatEvents {
        return ChatEvents(
            events = jsonObject.getObjects(key = "events") { data -> deserializeChatEvent(jsonObject = data) },
        )
    }

    private fun deserializeChatFolder(jsonObject: JsonObject): ChatFolder {
        return ChatFolder(
            name = jsonObject.getObject(key = "name") { data -> deserializeChatFolderName(jsonObject = data) },
            icon = jsonObject.getObjectNullable(key = "icon") { data -> deserializeChatFolderIcon(jsonObject = data) },
            colorId = jsonObject.getInt(key = "color_id"),
            isShareable = jsonObject.getBoolean(key = "is_shareable"),
            pinnedChatIds = jsonObject.getLongs(key = "pinned_chat_ids"),
            includedChatIds = jsonObject.getLongs(key = "included_chat_ids"),
            excludedChatIds = jsonObject.getLongs(key = "excluded_chat_ids"),
            excludeMuted = jsonObject.getBoolean(key = "exclude_muted"),
            excludeRead = jsonObject.getBoolean(key = "exclude_read"),
            excludeArchived = jsonObject.getBoolean(key = "exclude_archived"),
            includeContacts = jsonObject.getBoolean(key = "include_contacts"),
            includeNonContacts = jsonObject.getBoolean(key = "include_non_contacts"),
            includeBots = jsonObject.getBoolean(key = "include_bots"),
            includeGroups = jsonObject.getBoolean(key = "include_groups"),
            includeChannels = jsonObject.getBoolean(key = "include_channels"),
        )
    }

    private fun deserializeChatFolderIcon(jsonObject: JsonObject): ChatFolderIcon {
        return ChatFolderIcon(
            name = jsonObject.getString(key = "name"),
        )
    }

    private fun deserializeChatFolderInfo(jsonObject: JsonObject): ChatFolderInfo {
        return ChatFolderInfo(
            id = jsonObject.getInt(key = "id"),
            name = jsonObject.getObject(key = "name") { data -> deserializeChatFolderName(jsonObject = data) },
            icon = jsonObject.getObject(key = "icon") { data -> deserializeChatFolderIcon(jsonObject = data) },
            colorId = jsonObject.getInt(key = "color_id"),
            isShareable = jsonObject.getBoolean(key = "is_shareable"),
            hasMyInviteLinks = jsonObject.getBoolean(key = "has_my_invite_links"),
        )
    }

    private fun deserializeChatFolderInviteLink(jsonObject: JsonObject): ChatFolderInviteLink {
        return ChatFolderInviteLink(
            inviteLink = jsonObject.getString(key = "invite_link"),
            name = jsonObject.getString(key = "name"),
            chatIds = jsonObject.getLongs(key = "chat_ids"),
        )
    }

    private fun deserializeChatFolderInviteLinkInfo(jsonObject: JsonObject): ChatFolderInviteLinkInfo {
        return ChatFolderInviteLinkInfo(
            chatFolderInfo = jsonObject.getObject(key = "chat_folder_info") { data -> deserializeChatFolderInfo(jsonObject = data) },
            missingChatIds = jsonObject.getLongs(key = "missing_chat_ids"),
            addedChatIds = jsonObject.getLongs(key = "added_chat_ids"),
        )
    }

    private fun deserializeChatFolderInviteLinks(jsonObject: JsonObject): ChatFolderInviteLinks {
        return ChatFolderInviteLinks(
            inviteLinks = jsonObject.getObjects(key = "invite_links") { data -> deserializeChatFolderInviteLink(jsonObject = data) },
        )
    }

    private fun deserializeChatFolderName(jsonObject: JsonObject): ChatFolderName {
        return ChatFolderName(
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            animateCustomEmoji = jsonObject.getBoolean(key = "animate_custom_emoji"),
        )
    }

    private fun deserializeChatInviteLink(jsonObject: JsonObject): ChatInviteLink {
        return ChatInviteLink(
            inviteLink = jsonObject.getString(key = "invite_link"),
            name = jsonObject.getString(key = "name"),
            creatorUserId = jsonObject.getLong(key = "creator_user_id"),
            date = jsonObject.getInt(key = "date"),
            editDate = jsonObject.getInt(key = "edit_date"),
            expirationDate = jsonObject.getInt(key = "expiration_date"),
            subscriptionPricing = jsonObject.getObjectNullable(key = "subscription_pricing") { data -> deserializeStarSubscriptionPricing(jsonObject = data) },
            memberLimit = jsonObject.getInt(key = "member_limit"),
            memberCount = jsonObject.getInt(key = "member_count"),
            expiredMemberCount = jsonObject.getInt(key = "expired_member_count"),
            pendingJoinRequestCount = jsonObject.getInt(key = "pending_join_request_count"),
            createsJoinRequest = jsonObject.getBoolean(key = "creates_join_request"),
            isPrimary = jsonObject.getBoolean(key = "is_primary"),
            isRevoked = jsonObject.getBoolean(key = "is_revoked"),
        )
    }

    private fun deserializeChatInviteLinkCount(jsonObject: JsonObject): ChatInviteLinkCount {
        return ChatInviteLinkCount(
            userId = jsonObject.getLong(key = "user_id"),
            inviteLinkCount = jsonObject.getInt(key = "invite_link_count"),
            revokedInviteLinkCount = jsonObject.getInt(key = "revoked_invite_link_count"),
        )
    }

    private fun deserializeChatInviteLinkCounts(jsonObject: JsonObject): ChatInviteLinkCounts {
        return ChatInviteLinkCounts(
            inviteLinkCounts = jsonObject.getObjects(key = "invite_link_counts") { data -> deserializeChatInviteLinkCount(jsonObject = data) },
        )
    }

    private fun deserializeChatInviteLinkInfo(jsonObject: JsonObject): ChatInviteLinkInfo {
        return ChatInviteLinkInfo(
            chatId = jsonObject.getLong(key = "chat_id"),
            accessibleFor = jsonObject.getInt(key = "accessible_for"),
            type = jsonObject.getObject(key = "type") { data -> deserializeInviteLinkChatType(jsonObject = data) },
            title = jsonObject.getString(key = "title"),
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializeChatPhotoInfo(jsonObject = data) },
            accentColorId = jsonObject.getInt(key = "accent_color_id"),
            description = jsonObject.getString(key = "description"),
            memberCount = jsonObject.getInt(key = "member_count"),
            memberUserIds = jsonObject.getLongs(key = "member_user_ids"),
            subscriptionInfo = jsonObject.getObjectNullable(key = "subscription_info") { data -> deserializeChatInviteLinkSubscriptionInfo(jsonObject = data) },
            createsJoinRequest = jsonObject.getBoolean(key = "creates_join_request"),
            isPublic = jsonObject.getBoolean(key = "is_public"),
            verificationStatus = jsonObject.getObjectNullable(key = "verification_status") { data -> deserializeVerificationStatus(jsonObject = data) },
        )
    }

    private fun deserializeChatInviteLinkMember(jsonObject: JsonObject): ChatInviteLinkMember {
        return ChatInviteLinkMember(
            userId = jsonObject.getLong(key = "user_id"),
            joinedChatDate = jsonObject.getInt(key = "joined_chat_date"),
            viaChatFolderInviteLink = jsonObject.getBoolean(key = "via_chat_folder_invite_link"),
            approverUserId = jsonObject.getLong(key = "approver_user_id"),
        )
    }

    private fun deserializeChatInviteLinkMembers(jsonObject: JsonObject): ChatInviteLinkMembers {
        return ChatInviteLinkMembers(
            totalCount = jsonObject.getInt(key = "total_count"),
            members = jsonObject.getObjects(key = "members") { data -> deserializeChatInviteLinkMember(jsonObject = data) },
        )
    }

    private fun deserializeChatInviteLinkSubscriptionInfo(jsonObject: JsonObject): ChatInviteLinkSubscriptionInfo {
        return ChatInviteLinkSubscriptionInfo(
            pricing = jsonObject.getObject(key = "pricing") { data -> deserializeStarSubscriptionPricing(jsonObject = data) },
            canReuse = jsonObject.getBoolean(key = "can_reuse"),
            formId = jsonObject.getLong(key = "form_id"),
        )
    }

    private fun deserializeChatInviteLinks(jsonObject: JsonObject): ChatInviteLinks {
        return ChatInviteLinks(
            totalCount = jsonObject.getInt(key = "total_count"),
            inviteLinks = jsonObject.getObjects(key = "invite_links") { data -> deserializeChatInviteLink(jsonObject = data) },
        )
    }

    private fun deserializeChatJoinRequest(jsonObject: JsonObject): ChatJoinRequest {
        return ChatJoinRequest(
            userId = jsonObject.getLong(key = "user_id"),
            date = jsonObject.getInt(key = "date"),
            bio = jsonObject.getString(key = "bio"),
        )
    }

    private fun deserializeChatJoinRequests(jsonObject: JsonObject): ChatJoinRequests {
        return ChatJoinRequests(
            totalCount = jsonObject.getInt(key = "total_count"),
            requests = jsonObject.getObjects(key = "requests") { data -> deserializeChatJoinRequest(jsonObject = data) },
        )
    }

    private fun deserializeChatJoinRequestsInfo(jsonObject: JsonObject): ChatJoinRequestsInfo {
        return ChatJoinRequestsInfo(
            totalCount = jsonObject.getInt(key = "total_count"),
            userIds = jsonObject.getLongs(key = "user_ids"),
        )
    }

    private fun deserializeChatListArchive(jsonObject: JsonObject): ChatListArchive {
        return ChatListArchive()
    }

    private fun deserializeChatListFolder(jsonObject: JsonObject): ChatListFolder {
        return ChatListFolder(
            chatFolderId = jsonObject.getInt(key = "chat_folder_id"),
        )
    }

    private fun deserializeChatListMain(jsonObject: JsonObject): ChatListMain {
        return ChatListMain()
    }

    private fun deserializeChatLists(jsonObject: JsonObject): ChatLists {
        return ChatLists(
            chatLists = jsonObject.getObjects(key = "chat_lists") { data -> deserializeChatList(jsonObject = data) },
        )
    }

    private fun deserializeChatLocation(jsonObject: JsonObject): ChatLocation {
        return ChatLocation(
            location = jsonObject.getObject(key = "location") { data -> deserializeLocation(jsonObject = data) },
            address = jsonObject.getString(key = "address"),
        )
    }

    private fun deserializeChatMember(jsonObject: JsonObject): ChatMember {
        return ChatMember(
            memberId = jsonObject.getObject(key = "member_id") { data -> deserializeMessageSender(jsonObject = data) },
            inviterUserId = jsonObject.getLong(key = "inviter_user_id"),
            joinedChatDate = jsonObject.getInt(key = "joined_chat_date"),
            status = jsonObject.getObject(key = "status") { data -> deserializeChatMemberStatus(jsonObject = data) },
        )
    }

    private fun deserializeChatMemberStatusAdministrator(jsonObject: JsonObject): ChatMemberStatusAdministrator {
        return ChatMemberStatusAdministrator(
            customTitle = jsonObject.getString(key = "custom_title"),
            canBeEdited = jsonObject.getBoolean(key = "can_be_edited"),
            rights = jsonObject.getObject(key = "rights") { data -> deserializeChatAdministratorRights(jsonObject = data) },
        )
    }

    private fun deserializeChatMemberStatusBanned(jsonObject: JsonObject): ChatMemberStatusBanned {
        return ChatMemberStatusBanned(
            bannedUntilDate = jsonObject.getInt(key = "banned_until_date"),
        )
    }

    private fun deserializeChatMemberStatusCreator(jsonObject: JsonObject): ChatMemberStatusCreator {
        return ChatMemberStatusCreator(
            customTitle = jsonObject.getString(key = "custom_title"),
            isAnonymous = jsonObject.getBoolean(key = "is_anonymous"),
            isMember = jsonObject.getBoolean(key = "is_member"),
        )
    }

    private fun deserializeChatMemberStatusLeft(jsonObject: JsonObject): ChatMemberStatusLeft {
        return ChatMemberStatusLeft()
    }

    private fun deserializeChatMemberStatusMember(jsonObject: JsonObject): ChatMemberStatusMember {
        return ChatMemberStatusMember(
            memberUntilDate = jsonObject.getInt(key = "member_until_date"),
        )
    }

    private fun deserializeChatMemberStatusRestricted(jsonObject: JsonObject): ChatMemberStatusRestricted {
        return ChatMemberStatusRestricted(
            isMember = jsonObject.getBoolean(key = "is_member"),
            restrictedUntilDate = jsonObject.getInt(key = "restricted_until_date"),
            permissions = jsonObject.getObject(key = "permissions") { data -> deserializeChatPermissions(jsonObject = data) },
        )
    }

    private fun deserializeChatMembers(jsonObject: JsonObject): ChatMembers {
        return ChatMembers(
            totalCount = jsonObject.getInt(key = "total_count"),
            members = jsonObject.getObjects(key = "members") { data -> deserializeChatMember(jsonObject = data) },
        )
    }

    private fun deserializeChatMembersFilterAdministrators(jsonObject: JsonObject): ChatMembersFilterAdministrators {
        return ChatMembersFilterAdministrators()
    }

    private fun deserializeChatMembersFilterBanned(jsonObject: JsonObject): ChatMembersFilterBanned {
        return ChatMembersFilterBanned()
    }

    private fun deserializeChatMembersFilterBots(jsonObject: JsonObject): ChatMembersFilterBots {
        return ChatMembersFilterBots()
    }

    private fun deserializeChatMembersFilterContacts(jsonObject: JsonObject): ChatMembersFilterContacts {
        return ChatMembersFilterContacts()
    }

    private fun deserializeChatMembersFilterMembers(jsonObject: JsonObject): ChatMembersFilterMembers {
        return ChatMembersFilterMembers()
    }

    private fun deserializeChatMembersFilterMention(jsonObject: JsonObject): ChatMembersFilterMention {
        return ChatMembersFilterMention(
            messageThreadId = jsonObject.getLong(key = "message_thread_id"),
        )
    }

    private fun deserializeChatMembersFilterRestricted(jsonObject: JsonObject): ChatMembersFilterRestricted {
        return ChatMembersFilterRestricted()
    }

    private fun deserializeChatMessageSender(jsonObject: JsonObject): ChatMessageSender {
        return ChatMessageSender(
            sender = jsonObject.getObject(key = "sender") { data -> deserializeMessageSender(jsonObject = data) },
            needsPremium = jsonObject.getBoolean(key = "needs_premium"),
        )
    }

    private fun deserializeChatMessageSenders(jsonObject: JsonObject): ChatMessageSenders {
        return ChatMessageSenders(
            senders = jsonObject.getObjects(key = "senders") { data -> deserializeChatMessageSender(jsonObject = data) },
        )
    }

    private fun deserializeChatNotificationSettings(jsonObject: JsonObject): ChatNotificationSettings {
        return ChatNotificationSettings(
            useDefaultMuteFor = jsonObject.getBoolean(key = "use_default_mute_for"),
            muteFor = jsonObject.getInt(key = "mute_for"),
            useDefaultSound = jsonObject.getBoolean(key = "use_default_sound"),
            soundId = jsonObject.getLong(key = "sound_id"),
            useDefaultShowPreview = jsonObject.getBoolean(key = "use_default_show_preview"),
            showPreview = jsonObject.getBoolean(key = "show_preview"),
            useDefaultMuteStories = jsonObject.getBoolean(key = "use_default_mute_stories"),
            muteStories = jsonObject.getBoolean(key = "mute_stories"),
            useDefaultStorySound = jsonObject.getBoolean(key = "use_default_story_sound"),
            storySoundId = jsonObject.getLong(key = "story_sound_id"),
            useDefaultShowStoryPoster = jsonObject.getBoolean(key = "use_default_show_story_poster"),
            showStoryPoster = jsonObject.getBoolean(key = "show_story_poster"),
            useDefaultDisablePinnedMessageNotifications = jsonObject.getBoolean(key = "use_default_disable_pinned_message_notifications"),
            disablePinnedMessageNotifications = jsonObject.getBoolean(key = "disable_pinned_message_notifications"),
            useDefaultDisableMentionNotifications = jsonObject.getBoolean(key = "use_default_disable_mention_notifications"),
            disableMentionNotifications = jsonObject.getBoolean(key = "disable_mention_notifications"),
        )
    }

    private fun deserializeChatPermissions(jsonObject: JsonObject): ChatPermissions {
        return ChatPermissions(
            canSendBasicMessages = jsonObject.getBoolean(key = "can_send_basic_messages"),
            canSendAudios = jsonObject.getBoolean(key = "can_send_audios"),
            canSendDocuments = jsonObject.getBoolean(key = "can_send_documents"),
            canSendPhotos = jsonObject.getBoolean(key = "can_send_photos"),
            canSendVideos = jsonObject.getBoolean(key = "can_send_videos"),
            canSendVideoNotes = jsonObject.getBoolean(key = "can_send_video_notes"),
            canSendVoiceNotes = jsonObject.getBoolean(key = "can_send_voice_notes"),
            canSendPolls = jsonObject.getBoolean(key = "can_send_polls"),
            canSendOtherMessages = jsonObject.getBoolean(key = "can_send_other_messages"),
            canAddLinkPreviews = jsonObject.getBoolean(key = "can_add_link_previews"),
            canChangeInfo = jsonObject.getBoolean(key = "can_change_info"),
            canInviteUsers = jsonObject.getBoolean(key = "can_invite_users"),
            canPinMessages = jsonObject.getBoolean(key = "can_pin_messages"),
            canCreateTopics = jsonObject.getBoolean(key = "can_create_topics"),
        )
    }

    private fun deserializeChatPhoto(jsonObject: JsonObject): ChatPhoto {
        return ChatPhoto(
            id = jsonObject.getLong(key = "id"),
            addedDate = jsonObject.getInt(key = "added_date"),
            minithumbnail = jsonObject.getObjectNullable(key = "minithumbnail") { data -> deserializeMinithumbnail(jsonObject = data) },
            sizes = jsonObject.getObjects(key = "sizes") { data -> deserializePhotoSize(jsonObject = data) },
            animation = jsonObject.getObjectNullable(key = "animation") { data -> deserializeAnimatedChatPhoto(jsonObject = data) },
            smallAnimation = jsonObject.getObjectNullable(key = "small_animation") { data -> deserializeAnimatedChatPhoto(jsonObject = data) },
            sticker = jsonObject.getObjectNullable(key = "sticker") { data -> deserializeChatPhotoSticker(jsonObject = data) },
        )
    }

    private fun deserializeChatPhotoInfo(jsonObject: JsonObject): ChatPhotoInfo {
        return ChatPhotoInfo(
            small = jsonObject.getObject(key = "small") { data -> deserializeFile(jsonObject = data) },
            big = jsonObject.getObject(key = "big") { data -> deserializeFile(jsonObject = data) },
            minithumbnail = jsonObject.getObjectNullable(key = "minithumbnail") { data -> deserializeMinithumbnail(jsonObject = data) },
            hasAnimation = jsonObject.getBoolean(key = "has_animation"),
            isPersonal = jsonObject.getBoolean(key = "is_personal"),
        )
    }

    private fun deserializeChatPhotoSticker(jsonObject: JsonObject): ChatPhotoSticker {
        return ChatPhotoSticker(
            type = jsonObject.getObject(key = "type") { data -> deserializeChatPhotoStickerType(jsonObject = data) },
            backgroundFill = jsonObject.getObject(key = "background_fill") { data -> deserializeBackgroundFill(jsonObject = data) },
        )
    }

    private fun deserializeChatPhotoStickerTypeCustomEmoji(jsonObject: JsonObject): ChatPhotoStickerTypeCustomEmoji {
        return ChatPhotoStickerTypeCustomEmoji(
            customEmojiId = jsonObject.getLong(key = "custom_emoji_id"),
        )
    }

    private fun deserializeChatPhotoStickerTypeRegularOrMask(jsonObject: JsonObject): ChatPhotoStickerTypeRegularOrMask {
        return ChatPhotoStickerTypeRegularOrMask(
            stickerSetId = jsonObject.getLong(key = "sticker_set_id"),
            stickerId = jsonObject.getLong(key = "sticker_id"),
        )
    }

    private fun deserializeChatPhotos(jsonObject: JsonObject): ChatPhotos {
        return ChatPhotos(
            totalCount = jsonObject.getInt(key = "total_count"),
            photos = jsonObject.getObjects(key = "photos") { data -> deserializeChatPhoto(jsonObject = data) },
        )
    }

    private fun deserializeChatPosition(jsonObject: JsonObject): ChatPosition {
        return ChatPosition(
            list = jsonObject.getObject(key = "list") { data -> deserializeChatList(jsonObject = data) },
            order = jsonObject.getLong(key = "order"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
            source = jsonObject.getObjectNullable(key = "source") { data -> deserializeChatSource(jsonObject = data) },
        )
    }

    private fun deserializeChatRevenueAmount(jsonObject: JsonObject): ChatRevenueAmount {
        return ChatRevenueAmount(
            cryptocurrency = jsonObject.getString(key = "cryptocurrency"),
            totalAmount = jsonObject.getLong(key = "total_amount"),
            balanceAmount = jsonObject.getLong(key = "balance_amount"),
            availableAmount = jsonObject.getLong(key = "available_amount"),
            withdrawalEnabled = jsonObject.getBoolean(key = "withdrawal_enabled"),
        )
    }

    private fun deserializeChatRevenueStatistics(jsonObject: JsonObject): ChatRevenueStatistics {
        return ChatRevenueStatistics(
            revenueByHourGraph = jsonObject.getObject(key = "revenue_by_hour_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            revenueGraph = jsonObject.getObject(key = "revenue_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            revenueAmount = jsonObject.getObject(key = "revenue_amount") { data -> deserializeChatRevenueAmount(jsonObject = data) },
            usdRate = jsonObject.getDouble(key = "usd_rate"),
        )
    }

    private fun deserializeChatRevenueTransaction(jsonObject: JsonObject): ChatRevenueTransaction {
        return ChatRevenueTransaction(
            cryptocurrency = jsonObject.getString(key = "cryptocurrency"),
            cryptocurrencyAmount = jsonObject.getLong(key = "cryptocurrency_amount"),
            type = jsonObject.getObject(key = "type") { data -> deserializeChatRevenueTransactionType(jsonObject = data) },
        )
    }

    private fun deserializeChatRevenueTransactionTypeEarnings(jsonObject: JsonObject): ChatRevenueTransactionTypeEarnings {
        return ChatRevenueTransactionTypeEarnings(
            startDate = jsonObject.getInt(key = "start_date"),
            endDate = jsonObject.getInt(key = "end_date"),
        )
    }

    private fun deserializeChatRevenueTransactionTypeRefund(jsonObject: JsonObject): ChatRevenueTransactionTypeRefund {
        return ChatRevenueTransactionTypeRefund(
            refundDate = jsonObject.getInt(key = "refund_date"),
            provider = jsonObject.getString(key = "provider"),
        )
    }

    private fun deserializeChatRevenueTransactionTypeWithdrawal(jsonObject: JsonObject): ChatRevenueTransactionTypeWithdrawal {
        return ChatRevenueTransactionTypeWithdrawal(
            withdrawalDate = jsonObject.getInt(key = "withdrawal_date"),
            provider = jsonObject.getString(key = "provider"),
            state = jsonObject.getObject(key = "state") { data -> deserializeRevenueWithdrawalState(jsonObject = data) },
        )
    }

    private fun deserializeChatRevenueTransactions(jsonObject: JsonObject): ChatRevenueTransactions {
        return ChatRevenueTransactions(
            totalCount = jsonObject.getInt(key = "total_count"),
            transactions = jsonObject.getObjects(key = "transactions") { data -> deserializeChatRevenueTransaction(jsonObject = data) },
        )
    }

    private fun deserializeChatSourceMtprotoProxy(jsonObject: JsonObject): ChatSourceMtprotoProxy {
        return ChatSourceMtprotoProxy()
    }

    private fun deserializeChatSourcePublicServiceAnnouncement(jsonObject: JsonObject): ChatSourcePublicServiceAnnouncement {
        return ChatSourcePublicServiceAnnouncement(
            type = jsonObject.getString(key = "type"),
            text = jsonObject.getString(key = "text"),
        )
    }

    private fun deserializeChatStatisticsAdministratorActionsInfo(jsonObject: JsonObject): ChatStatisticsAdministratorActionsInfo {
        return ChatStatisticsAdministratorActionsInfo(
            userId = jsonObject.getLong(key = "user_id"),
            deletedMessageCount = jsonObject.getInt(key = "deleted_message_count"),
            bannedUserCount = jsonObject.getInt(key = "banned_user_count"),
            restrictedUserCount = jsonObject.getInt(key = "restricted_user_count"),
        )
    }

    private fun deserializeChatStatisticsChannel(jsonObject: JsonObject): ChatStatisticsChannel {
        return ChatStatisticsChannel(
            period = jsonObject.getObject(key = "period") { data -> deserializeDateRange(jsonObject = data) },
            memberCount = jsonObject.getObject(key = "member_count") { data -> deserializeStatisticalValue(jsonObject = data) },
            meanMessageViewCount = jsonObject.getObject(key = "mean_message_view_count") { data -> deserializeStatisticalValue(jsonObject = data) },
            meanMessageShareCount = jsonObject.getObject(key = "mean_message_share_count") { data -> deserializeStatisticalValue(jsonObject = data) },
            meanMessageReactionCount = jsonObject.getObject(key = "mean_message_reaction_count") { data -> deserializeStatisticalValue(jsonObject = data) },
            meanStoryViewCount = jsonObject.getObject(key = "mean_story_view_count") { data -> deserializeStatisticalValue(jsonObject = data) },
            meanStoryShareCount = jsonObject.getObject(key = "mean_story_share_count") { data -> deserializeStatisticalValue(jsonObject = data) },
            meanStoryReactionCount = jsonObject.getObject(key = "mean_story_reaction_count") { data -> deserializeStatisticalValue(jsonObject = data) },
            enabledNotificationsPercentage = jsonObject.getDouble(key = "enabled_notifications_percentage"),
            memberCountGraph = jsonObject.getObject(key = "member_count_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            joinGraph = jsonObject.getObject(key = "join_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            muteGraph = jsonObject.getObject(key = "mute_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            viewCountByHourGraph = jsonObject.getObject(key = "view_count_by_hour_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            viewCountBySourceGraph = jsonObject.getObject(key = "view_count_by_source_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            joinBySourceGraph = jsonObject.getObject(key = "join_by_source_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            languageGraph = jsonObject.getObject(key = "language_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            messageInteractionGraph = jsonObject.getObject(key = "message_interaction_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            messageReactionGraph = jsonObject.getObject(key = "message_reaction_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            storyInteractionGraph = jsonObject.getObject(key = "story_interaction_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            storyReactionGraph = jsonObject.getObject(key = "story_reaction_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            instantViewInteractionGraph = jsonObject.getObject(key = "instant_view_interaction_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            recentInteractions = jsonObject.getObjects(key = "recent_interactions") { data -> deserializeChatStatisticsInteractionInfo(jsonObject = data) },
        )
    }

    private fun deserializeChatStatisticsInteractionInfo(jsonObject: JsonObject): ChatStatisticsInteractionInfo {
        return ChatStatisticsInteractionInfo(
            objectType = jsonObject.getObject(key = "object_type") { data -> deserializeChatStatisticsObjectType(jsonObject = data) },
            viewCount = jsonObject.getInt(key = "view_count"),
            forwardCount = jsonObject.getInt(key = "forward_count"),
            reactionCount = jsonObject.getInt(key = "reaction_count"),
        )
    }

    private fun deserializeChatStatisticsInviterInfo(jsonObject: JsonObject): ChatStatisticsInviterInfo {
        return ChatStatisticsInviterInfo(
            userId = jsonObject.getLong(key = "user_id"),
            addedMemberCount = jsonObject.getInt(key = "added_member_count"),
        )
    }

    private fun deserializeChatStatisticsMessageSenderInfo(jsonObject: JsonObject): ChatStatisticsMessageSenderInfo {
        return ChatStatisticsMessageSenderInfo(
            userId = jsonObject.getLong(key = "user_id"),
            sentMessageCount = jsonObject.getInt(key = "sent_message_count"),
            averageCharacterCount = jsonObject.getInt(key = "average_character_count"),
        )
    }

    private fun deserializeChatStatisticsObjectTypeMessage(jsonObject: JsonObject): ChatStatisticsObjectTypeMessage {
        return ChatStatisticsObjectTypeMessage(
            messageId = jsonObject.getLong(key = "message_id"),
        )
    }

    private fun deserializeChatStatisticsObjectTypeStory(jsonObject: JsonObject): ChatStatisticsObjectTypeStory {
        return ChatStatisticsObjectTypeStory(
            storyId = jsonObject.getInt(key = "story_id"),
        )
    }

    private fun deserializeChatStatisticsSupergroup(jsonObject: JsonObject): ChatStatisticsSupergroup {
        return ChatStatisticsSupergroup(
            period = jsonObject.getObject(key = "period") { data -> deserializeDateRange(jsonObject = data) },
            memberCount = jsonObject.getObject(key = "member_count") { data -> deserializeStatisticalValue(jsonObject = data) },
            messageCount = jsonObject.getObject(key = "message_count") { data -> deserializeStatisticalValue(jsonObject = data) },
            viewerCount = jsonObject.getObject(key = "viewer_count") { data -> deserializeStatisticalValue(jsonObject = data) },
            senderCount = jsonObject.getObject(key = "sender_count") { data -> deserializeStatisticalValue(jsonObject = data) },
            memberCountGraph = jsonObject.getObject(key = "member_count_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            joinGraph = jsonObject.getObject(key = "join_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            joinBySourceGraph = jsonObject.getObject(key = "join_by_source_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            languageGraph = jsonObject.getObject(key = "language_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            messageContentGraph = jsonObject.getObject(key = "message_content_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            actionGraph = jsonObject.getObject(key = "action_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            dayGraph = jsonObject.getObject(key = "day_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            weekGraph = jsonObject.getObject(key = "week_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            topSenders = jsonObject.getObjects(key = "top_senders") { data -> deserializeChatStatisticsMessageSenderInfo(jsonObject = data) },
            topAdministrators = jsonObject.getObjects(key = "top_administrators") { data -> deserializeChatStatisticsAdministratorActionsInfo(jsonObject = data) },
            topInviters = jsonObject.getObjects(key = "top_inviters") { data -> deserializeChatStatisticsInviterInfo(jsonObject = data) },
        )
    }

    private fun deserializeChatTheme(jsonObject: JsonObject): ChatTheme {
        return ChatTheme(
            name = jsonObject.getString(key = "name"),
            lightSettings = jsonObject.getObject(key = "light_settings") { data -> deserializeThemeSettings(jsonObject = data) },
            darkSettings = jsonObject.getObject(key = "dark_settings") { data -> deserializeThemeSettings(jsonObject = data) },
        )
    }

    private fun deserializeChatTypeBasicGroup(jsonObject: JsonObject): ChatTypeBasicGroup {
        return ChatTypeBasicGroup(
            basicGroupId = jsonObject.getLong(key = "basic_group_id"),
        )
    }

    private fun deserializeChatTypePrivate(jsonObject: JsonObject): ChatTypePrivate {
        return ChatTypePrivate(
            userId = jsonObject.getLong(key = "user_id"),
        )
    }

    private fun deserializeChatTypeSecret(jsonObject: JsonObject): ChatTypeSecret {
        return ChatTypeSecret(
            secretChatId = jsonObject.getInt(key = "secret_chat_id"),
            userId = jsonObject.getLong(key = "user_id"),
        )
    }

    private fun deserializeChatTypeSupergroup(jsonObject: JsonObject): ChatTypeSupergroup {
        return ChatTypeSupergroup(
            supergroupId = jsonObject.getLong(key = "supergroup_id"),
            isChannel = jsonObject.getBoolean(key = "is_channel"),
        )
    }

    private fun deserializeChats(jsonObject: JsonObject): Chats {
        return Chats(
            totalCount = jsonObject.getInt(key = "total_count"),
            chatIds = jsonObject.getLongs(key = "chat_ids"),
        )
    }

    private fun deserializeCheckChatUsernameResultOk(jsonObject: JsonObject): CheckChatUsernameResultOk {
        return CheckChatUsernameResultOk()
    }

    private fun deserializeCheckChatUsernameResultPublicChatsTooMany(jsonObject: JsonObject): CheckChatUsernameResultPublicChatsTooMany {
        return CheckChatUsernameResultPublicChatsTooMany()
    }

    private fun deserializeCheckChatUsernameResultPublicGroupsUnavailable(jsonObject: JsonObject): CheckChatUsernameResultPublicGroupsUnavailable {
        return CheckChatUsernameResultPublicGroupsUnavailable()
    }

    private fun deserializeCheckChatUsernameResultUsernameInvalid(jsonObject: JsonObject): CheckChatUsernameResultUsernameInvalid {
        return CheckChatUsernameResultUsernameInvalid()
    }

    private fun deserializeCheckChatUsernameResultUsernameOccupied(jsonObject: JsonObject): CheckChatUsernameResultUsernameOccupied {
        return CheckChatUsernameResultUsernameOccupied()
    }

    private fun deserializeCheckChatUsernameResultUsernamePurchasable(jsonObject: JsonObject): CheckChatUsernameResultUsernamePurchasable {
        return CheckChatUsernameResultUsernamePurchasable()
    }

    private fun deserializeCheckStickerSetNameResultNameInvalid(jsonObject: JsonObject): CheckStickerSetNameResultNameInvalid {
        return CheckStickerSetNameResultNameInvalid()
    }

    private fun deserializeCheckStickerSetNameResultNameOccupied(jsonObject: JsonObject): CheckStickerSetNameResultNameOccupied {
        return CheckStickerSetNameResultNameOccupied()
    }

    private fun deserializeCheckStickerSetNameResultOk(jsonObject: JsonObject): CheckStickerSetNameResultOk {
        return CheckStickerSetNameResultOk()
    }

    private fun deserializeChecklist(jsonObject: JsonObject): Checklist {
        return Checklist(
            title = jsonObject.getObject(key = "title") { data -> deserializeFormattedText(jsonObject = data) },
            tasks = jsonObject.getObjects(key = "tasks") { data -> deserializeChecklistTask(jsonObject = data) },
            othersCanAddTasks = jsonObject.getBoolean(key = "others_can_add_tasks"),
            canAddTasks = jsonObject.getBoolean(key = "can_add_tasks"),
            othersCanMarkTasksAsDone = jsonObject.getBoolean(key = "others_can_mark_tasks_as_done"),
            canMarkTasksAsDone = jsonObject.getBoolean(key = "can_mark_tasks_as_done"),
        )
    }

    private fun deserializeChecklistTask(jsonObject: JsonObject): ChecklistTask {
        return ChecklistTask(
            id = jsonObject.getInt(key = "id"),
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            completedByUserId = jsonObject.getLong(key = "completed_by_user_id"),
            completionDate = jsonObject.getInt(key = "completion_date"),
        )
    }

    private fun deserializeCloseBirthdayUser(jsonObject: JsonObject): CloseBirthdayUser {
        return CloseBirthdayUser(
            userId = jsonObject.getLong(key = "user_id"),
            birthdate = jsonObject.getObject(key = "birthdate") { data -> deserializeBirthdate(jsonObject = data) },
        )
    }

    private fun deserializeClosedVectorPath(jsonObject: JsonObject): ClosedVectorPath {
        return ClosedVectorPath(
            commands = jsonObject.getObjects(key = "commands") { data -> deserializeVectorPathCommand(jsonObject = data) },
        )
    }

    private fun deserializeCollectibleItemInfo(jsonObject: JsonObject): CollectibleItemInfo {
        return CollectibleItemInfo(
            purchaseDate = jsonObject.getInt(key = "purchase_date"),
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            cryptocurrency = jsonObject.getString(key = "cryptocurrency"),
            cryptocurrencyAmount = jsonObject.getLong(key = "cryptocurrency_amount"),
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeCollectibleItemTypePhoneNumber(jsonObject: JsonObject): CollectibleItemTypePhoneNumber {
        return CollectibleItemTypePhoneNumber(
            phoneNumber = jsonObject.getString(key = "phone_number"),
        )
    }

    private fun deserializeCollectibleItemTypeUsername(jsonObject: JsonObject): CollectibleItemTypeUsername {
        return CollectibleItemTypeUsername(
            username = jsonObject.getString(key = "username"),
        )
    }

    private fun deserializeConnectedAffiliateProgram(jsonObject: JsonObject): ConnectedAffiliateProgram {
        return ConnectedAffiliateProgram(
            url = jsonObject.getString(key = "url"),
            botUserId = jsonObject.getLong(key = "bot_user_id"),
            parameters = jsonObject.getObject(key = "parameters") { data -> deserializeAffiliateProgramParameters(jsonObject = data) },
            connectionDate = jsonObject.getInt(key = "connection_date"),
            isDisconnected = jsonObject.getBoolean(key = "is_disconnected"),
            userCount = jsonObject.getLong(key = "user_count"),
            revenueStarCount = jsonObject.getLong(key = "revenue_star_count"),
        )
    }

    private fun deserializeConnectedAffiliatePrograms(jsonObject: JsonObject): ConnectedAffiliatePrograms {
        return ConnectedAffiliatePrograms(
            totalCount = jsonObject.getInt(key = "total_count"),
            programs = jsonObject.getObjects(key = "programs") { data -> deserializeConnectedAffiliateProgram(jsonObject = data) },
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializeConnectedWebsite(jsonObject: JsonObject): ConnectedWebsite {
        return ConnectedWebsite(
            id = jsonObject.getLong(key = "id"),
            domainName = jsonObject.getString(key = "domain_name"),
            botUserId = jsonObject.getLong(key = "bot_user_id"),
            browser = jsonObject.getString(key = "browser"),
            platform = jsonObject.getString(key = "platform"),
            logInDate = jsonObject.getInt(key = "log_in_date"),
            lastActiveDate = jsonObject.getInt(key = "last_active_date"),
            ipAddress = jsonObject.getString(key = "ip_address"),
            location = jsonObject.getString(key = "location"),
        )
    }

    private fun deserializeConnectedWebsites(jsonObject: JsonObject): ConnectedWebsites {
        return ConnectedWebsites(
            websites = jsonObject.getObjects(key = "websites") { data -> deserializeConnectedWebsite(jsonObject = data) },
        )
    }

    private fun deserializeConnectionStateConnecting(jsonObject: JsonObject): ConnectionStateConnecting {
        return ConnectionStateConnecting()
    }

    private fun deserializeConnectionStateConnectingToProxy(jsonObject: JsonObject): ConnectionStateConnectingToProxy {
        return ConnectionStateConnectingToProxy()
    }

    private fun deserializeConnectionStateReady(jsonObject: JsonObject): ConnectionStateReady {
        return ConnectionStateReady()
    }

    private fun deserializeConnectionStateUpdating(jsonObject: JsonObject): ConnectionStateUpdating {
        return ConnectionStateUpdating()
    }

    private fun deserializeConnectionStateWaitingForNetwork(jsonObject: JsonObject): ConnectionStateWaitingForNetwork {
        return ConnectionStateWaitingForNetwork()
    }

    private fun deserializeContact(jsonObject: JsonObject): Contact {
        return Contact(
            phoneNumber = jsonObject.getString(key = "phone_number"),
            firstName = jsonObject.getString(key = "first_name"),
            lastName = jsonObject.getString(key = "last_name"),
            vcard = jsonObject.getString(key = "vcard"),
            userId = jsonObject.getLong(key = "user_id"),
        )
    }

    private fun deserializeCount(jsonObject: JsonObject): Count {
        return Count(
            count = jsonObject.getInt(key = "count"),
        )
    }

    private fun deserializeCountries(jsonObject: JsonObject): Countries {
        return Countries(
            countries = jsonObject.getObjects(key = "countries") { data -> deserializeCountryInfo(jsonObject = data) },
        )
    }

    private fun deserializeCountryInfo(jsonObject: JsonObject): CountryInfo {
        return CountryInfo(
            countryCode = jsonObject.getString(key = "country_code"),
            name = jsonObject.getString(key = "name"),
            englishName = jsonObject.getString(key = "english_name"),
            isHidden = jsonObject.getBoolean(key = "is_hidden"),
            callingCodes = jsonObject.getStrings(key = "calling_codes"),
        )
    }

    private fun deserializeCreatedBasicGroupChat(jsonObject: JsonObject): CreatedBasicGroupChat {
        return CreatedBasicGroupChat(
            chatId = jsonObject.getLong(key = "chat_id"),
            failedToAddMembers = jsonObject.getObject(key = "failed_to_add_members") { data -> deserializeFailedToAddMembers(jsonObject = data) },
        )
    }

    private fun deserializeCurrentWeather(jsonObject: JsonObject): CurrentWeather {
        return CurrentWeather(
            temperature = jsonObject.getDouble(key = "temperature"),
            emoji = jsonObject.getString(key = "emoji"),
        )
    }

    private fun deserializeCustomRequestResult(jsonObject: JsonObject): CustomRequestResult {
        return CustomRequestResult(
            result = jsonObject.getString(key = "result"),
        )
    }

    private fun deserializeData(jsonObject: JsonObject): Data {
        return Data(
            data = jsonObject.getBytes(key = "data"),
        )
    }

    private fun deserializeDatabaseStatistics(jsonObject: JsonObject): DatabaseStatistics {
        return DatabaseStatistics(
            statistics = jsonObject.getString(key = "statistics"),
        )
    }

    private fun deserializeDate(jsonObject: JsonObject): Date {
        return Date(
            day = jsonObject.getInt(key = "day"),
            month = jsonObject.getInt(key = "month"),
            year = jsonObject.getInt(key = "year"),
        )
    }

    private fun deserializeDateRange(jsonObject: JsonObject): DateRange {
        return DateRange(
            startDate = jsonObject.getInt(key = "start_date"),
            endDate = jsonObject.getInt(key = "end_date"),
        )
    }

    private fun deserializeDatedFile(jsonObject: JsonObject): DatedFile {
        return DatedFile(
            file = jsonObject.getObject(key = "file") { data -> deserializeFile(jsonObject = data) },
            date = jsonObject.getInt(key = "date"),
        )
    }

    private fun deserializeDeepLinkInfo(jsonObject: JsonObject): DeepLinkInfo {
        return DeepLinkInfo(
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            needUpdateApplication = jsonObject.getBoolean(key = "need_update_application"),
        )
    }

    private fun deserializeDeviceTokenApplePush(jsonObject: JsonObject): DeviceTokenApplePush {
        return DeviceTokenApplePush(
            deviceToken = jsonObject.getString(key = "device_token"),
            isAppSandbox = jsonObject.getBoolean(key = "is_app_sandbox"),
        )
    }

    private fun deserializeDeviceTokenApplePushVoIP(jsonObject: JsonObject): DeviceTokenApplePushVoIP {
        return DeviceTokenApplePushVoIP(
            deviceToken = jsonObject.getString(key = "device_token"),
            isAppSandbox = jsonObject.getBoolean(key = "is_app_sandbox"),
            encrypt = jsonObject.getBoolean(key = "encrypt"),
        )
    }

    private fun deserializeDeviceTokenBlackBerryPush(jsonObject: JsonObject): DeviceTokenBlackBerryPush {
        return DeviceTokenBlackBerryPush(
            token = jsonObject.getString(key = "token"),
        )
    }

    private fun deserializeDeviceTokenFirebaseCloudMessaging(jsonObject: JsonObject): DeviceTokenFirebaseCloudMessaging {
        return DeviceTokenFirebaseCloudMessaging(
            token = jsonObject.getString(key = "token"),
            encrypt = jsonObject.getBoolean(key = "encrypt"),
        )
    }

    private fun deserializeDeviceTokenHuaweiPush(jsonObject: JsonObject): DeviceTokenHuaweiPush {
        return DeviceTokenHuaweiPush(
            token = jsonObject.getString(key = "token"),
            encrypt = jsonObject.getBoolean(key = "encrypt"),
        )
    }

    private fun deserializeDeviceTokenMicrosoftPush(jsonObject: JsonObject): DeviceTokenMicrosoftPush {
        return DeviceTokenMicrosoftPush(
            channelUri = jsonObject.getString(key = "channel_uri"),
        )
    }

    private fun deserializeDeviceTokenMicrosoftPushVoIP(jsonObject: JsonObject): DeviceTokenMicrosoftPushVoIP {
        return DeviceTokenMicrosoftPushVoIP(
            channelUri = jsonObject.getString(key = "channel_uri"),
        )
    }

    private fun deserializeDeviceTokenSimplePush(jsonObject: JsonObject): DeviceTokenSimplePush {
        return DeviceTokenSimplePush(
            endpoint = jsonObject.getString(key = "endpoint"),
        )
    }

    private fun deserializeDeviceTokenTizenPush(jsonObject: JsonObject): DeviceTokenTizenPush {
        return DeviceTokenTizenPush(
            regId = jsonObject.getString(key = "reg_id"),
        )
    }

    private fun deserializeDeviceTokenUbuntuPush(jsonObject: JsonObject): DeviceTokenUbuntuPush {
        return DeviceTokenUbuntuPush(
            token = jsonObject.getString(key = "token"),
        )
    }

    private fun deserializeDeviceTokenWebPush(jsonObject: JsonObject): DeviceTokenWebPush {
        return DeviceTokenWebPush(
            endpoint = jsonObject.getString(key = "endpoint"),
            p256dhBase64url = jsonObject.getString(key = "p256dh_base64url"),
            authBase64url = jsonObject.getString(key = "auth_base64url"),
        )
    }

    private fun deserializeDeviceTokenWindowsPush(jsonObject: JsonObject): DeviceTokenWindowsPush {
        return DeviceTokenWindowsPush(
            accessToken = jsonObject.getString(key = "access_token"),
        )
    }

    private fun deserializeDiceStickersRegular(jsonObject: JsonObject): DiceStickersRegular {
        return DiceStickersRegular(
            sticker = jsonObject.getObject(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeDiceStickersSlotMachine(jsonObject: JsonObject): DiceStickersSlotMachine {
        return DiceStickersSlotMachine(
            background = jsonObject.getObject(key = "background") { data -> deserializeSticker(jsonObject = data) },
            lever = jsonObject.getObject(key = "lever") { data -> deserializeSticker(jsonObject = data) },
            leftReel = jsonObject.getObject(key = "left_reel") { data -> deserializeSticker(jsonObject = data) },
            centerReel = jsonObject.getObject(key = "center_reel") { data -> deserializeSticker(jsonObject = data) },
            rightReel = jsonObject.getObject(key = "right_reel") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeDirectMessagesChatTopic(jsonObject: JsonObject): DirectMessagesChatTopic {
        return DirectMessagesChatTopic(
            chatId = jsonObject.getLong(key = "chat_id"),
            id = jsonObject.getLong(key = "id"),
            senderId = jsonObject.getObject(key = "sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            order = jsonObject.getLong(key = "order"),
            canSendUnpaidMessages = jsonObject.getBoolean(key = "can_send_unpaid_messages"),
            isMarkedAsUnread = jsonObject.getBoolean(key = "is_marked_as_unread"),
            unreadCount = jsonObject.getLong(key = "unread_count"),
            lastReadInboxMessageId = jsonObject.getLong(key = "last_read_inbox_message_id"),
            lastReadOutboxMessageId = jsonObject.getLong(key = "last_read_outbox_message_id"),
            unreadReactionCount = jsonObject.getLong(key = "unread_reaction_count"),
            lastMessage = jsonObject.getObjectNullable(key = "last_message") { data -> deserializeMessage(jsonObject = data) },
            draftMessage = jsonObject.getObjectNullable(key = "draft_message") { data -> deserializeDraftMessage(jsonObject = data) },
        )
    }

    private fun deserializeDocument(jsonObject: JsonObject): Document {
        return Document(
            fileName = jsonObject.getString(key = "file_name"),
            mimeType = jsonObject.getString(key = "mime_type"),
            minithumbnail = jsonObject.getObjectNullable(key = "minithumbnail") { data -> deserializeMinithumbnail(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeThumbnail(jsonObject = data) },
            document = jsonObject.getObject(key = "document") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeDownloadedFileCounts(jsonObject: JsonObject): DownloadedFileCounts {
        return DownloadedFileCounts(
            activeCount = jsonObject.getInt(key = "active_count"),
            pausedCount = jsonObject.getInt(key = "paused_count"),
            completedCount = jsonObject.getInt(key = "completed_count"),
        )
    }

    private fun deserializeDraftMessage(jsonObject: JsonObject): DraftMessage {
        return DraftMessage(
            replyTo = jsonObject.getObjectNullable(key = "reply_to") { data -> deserializeInputMessageReplyTo(jsonObject = data) },
            date = jsonObject.getInt(key = "date"),
            inputMessageText = jsonObject.getObject(key = "input_message_text") { data -> deserializeInputMessageContent(jsonObject = data) },
            effectId = jsonObject.getLong(key = "effect_id"),
        )
    }

    private fun deserializeEmailAddressAuthenticationAppleId(jsonObject: JsonObject): EmailAddressAuthenticationAppleId {
        return EmailAddressAuthenticationAppleId(
            token = jsonObject.getString(key = "token"),
        )
    }

    private fun deserializeEmailAddressAuthenticationCode(jsonObject: JsonObject): EmailAddressAuthenticationCode {
        return EmailAddressAuthenticationCode(
            code = jsonObject.getString(key = "code"),
        )
    }

    private fun deserializeEmailAddressAuthenticationCodeInfo(jsonObject: JsonObject): EmailAddressAuthenticationCodeInfo {
        return EmailAddressAuthenticationCodeInfo(
            emailAddressPattern = jsonObject.getString(key = "email_address_pattern"),
            length = jsonObject.getInt(key = "length"),
        )
    }

    private fun deserializeEmailAddressAuthenticationGoogleId(jsonObject: JsonObject): EmailAddressAuthenticationGoogleId {
        return EmailAddressAuthenticationGoogleId(
            token = jsonObject.getString(key = "token"),
        )
    }

    private fun deserializeEmailAddressResetStateAvailable(jsonObject: JsonObject): EmailAddressResetStateAvailable {
        return EmailAddressResetStateAvailable(
            waitPeriod = jsonObject.getInt(key = "wait_period"),
        )
    }

    private fun deserializeEmailAddressResetStatePending(jsonObject: JsonObject): EmailAddressResetStatePending {
        return EmailAddressResetStatePending(
            resetIn = jsonObject.getInt(key = "reset_in"),
        )
    }

    private fun deserializeEmojiCategories(jsonObject: JsonObject): EmojiCategories {
        return EmojiCategories(
            categories = jsonObject.getObjects(key = "categories") { data -> deserializeEmojiCategory(jsonObject = data) },
        )
    }

    private fun deserializeEmojiCategory(jsonObject: JsonObject): EmojiCategory {
        return EmojiCategory(
            name = jsonObject.getString(key = "name"),
            icon = jsonObject.getObject(key = "icon") { data -> deserializeSticker(jsonObject = data) },
            source = jsonObject.getObject(key = "source") { data -> deserializeEmojiCategorySource(jsonObject = data) },
            isGreeting = jsonObject.getBoolean(key = "is_greeting"),
        )
    }

    private fun deserializeEmojiCategorySourcePremium(jsonObject: JsonObject): EmojiCategorySourcePremium {
        return EmojiCategorySourcePremium()
    }

    private fun deserializeEmojiCategorySourceSearch(jsonObject: JsonObject): EmojiCategorySourceSearch {
        return EmojiCategorySourceSearch(
            emojis = jsonObject.getStrings(key = "emojis"),
        )
    }

    private fun deserializeEmojiCategoryTypeChatPhoto(jsonObject: JsonObject): EmojiCategoryTypeChatPhoto {
        return EmojiCategoryTypeChatPhoto()
    }

    private fun deserializeEmojiCategoryTypeDefault(jsonObject: JsonObject): EmojiCategoryTypeDefault {
        return EmojiCategoryTypeDefault()
    }

    private fun deserializeEmojiCategoryTypeEmojiStatus(jsonObject: JsonObject): EmojiCategoryTypeEmojiStatus {
        return EmojiCategoryTypeEmojiStatus()
    }

    private fun deserializeEmojiCategoryTypeRegularStickers(jsonObject: JsonObject): EmojiCategoryTypeRegularStickers {
        return EmojiCategoryTypeRegularStickers()
    }

    private fun deserializeEmojiKeyword(jsonObject: JsonObject): EmojiKeyword {
        return EmojiKeyword(
            emoji = jsonObject.getString(key = "emoji"),
            keyword = jsonObject.getString(key = "keyword"),
        )
    }

    private fun deserializeEmojiKeywords(jsonObject: JsonObject): EmojiKeywords {
        return EmojiKeywords(
            emojiKeywords = jsonObject.getObjects(key = "emoji_keywords") { data -> deserializeEmojiKeyword(jsonObject = data) },
        )
    }

    private fun deserializeEmojiReaction(jsonObject: JsonObject): EmojiReaction {
        return EmojiReaction(
            emoji = jsonObject.getString(key = "emoji"),
            title = jsonObject.getString(key = "title"),
            isActive = jsonObject.getBoolean(key = "is_active"),
            staticIcon = jsonObject.getObject(key = "static_icon") { data -> deserializeSticker(jsonObject = data) },
            appearAnimation = jsonObject.getObject(key = "appear_animation") { data -> deserializeSticker(jsonObject = data) },
            selectAnimation = jsonObject.getObject(key = "select_animation") { data -> deserializeSticker(jsonObject = data) },
            activateAnimation = jsonObject.getObject(key = "activate_animation") { data -> deserializeSticker(jsonObject = data) },
            effectAnimation = jsonObject.getObject(key = "effect_animation") { data -> deserializeSticker(jsonObject = data) },
            aroundAnimation = jsonObject.getObjectNullable(key = "around_animation") { data -> deserializeSticker(jsonObject = data) },
            centerAnimation = jsonObject.getObjectNullable(key = "center_animation") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeEmojiStatus(jsonObject: JsonObject): EmojiStatus {
        return EmojiStatus(
            type = jsonObject.getObject(key = "type") { data -> deserializeEmojiStatusType(jsonObject = data) },
            expirationDate = jsonObject.getInt(key = "expiration_date"),
        )
    }

    private fun deserializeEmojiStatusCustomEmojis(jsonObject: JsonObject): EmojiStatusCustomEmojis {
        return EmojiStatusCustomEmojis(
            customEmojiIds = jsonObject.getLongs(key = "custom_emoji_ids"),
        )
    }

    private fun deserializeEmojiStatusTypeCustomEmoji(jsonObject: JsonObject): EmojiStatusTypeCustomEmoji {
        return EmojiStatusTypeCustomEmoji(
            customEmojiId = jsonObject.getLong(key = "custom_emoji_id"),
        )
    }

    private fun deserializeEmojiStatusTypeUpgradedGift(jsonObject: JsonObject): EmojiStatusTypeUpgradedGift {
        return EmojiStatusTypeUpgradedGift(
            upgradedGiftId = jsonObject.getLong(key = "upgraded_gift_id"),
            giftTitle = jsonObject.getString(key = "gift_title"),
            giftName = jsonObject.getString(key = "gift_name"),
            modelCustomEmojiId = jsonObject.getLong(key = "model_custom_emoji_id"),
            symbolCustomEmojiId = jsonObject.getLong(key = "symbol_custom_emoji_id"),
            backdropColors = jsonObject.getObject(key = "backdrop_colors") { data -> deserializeUpgradedGiftBackdropColors(jsonObject = data) },
        )
    }

    private fun deserializeEmojiStatuses(jsonObject: JsonObject): EmojiStatuses {
        return EmojiStatuses(
            emojiStatuses = jsonObject.getObjects(key = "emoji_statuses") { data -> deserializeEmojiStatus(jsonObject = data) },
        )
    }

    private fun deserializeEmojis(jsonObject: JsonObject): Emojis {
        return Emojis(
            emojis = jsonObject.getStrings(key = "emojis"),
        )
    }

    private fun deserializeEncryptedCredentials(jsonObject: JsonObject): EncryptedCredentials {
        return EncryptedCredentials(
            data = jsonObject.getBytes(key = "data"),
            hash = jsonObject.getBytes(key = "hash"),
            secret = jsonObject.getBytes(key = "secret"),
        )
    }

    private fun deserializeEncryptedPassportElement(jsonObject: JsonObject): EncryptedPassportElement {
        return EncryptedPassportElement(
            type = jsonObject.getObject(key = "type") { data -> deserializePassportElementType(jsonObject = data) },
            data = jsonObject.getBytes(key = "data"),
            frontSide = jsonObject.getObject(key = "front_side") { data -> deserializeDatedFile(jsonObject = data) },
            reverseSide = jsonObject.getObjectNullable(key = "reverse_side") { data -> deserializeDatedFile(jsonObject = data) },
            selfie = jsonObject.getObjectNullable(key = "selfie") { data -> deserializeDatedFile(jsonObject = data) },
            translation = jsonObject.getObjects(key = "translation") { data -> deserializeDatedFile(jsonObject = data) },
            files = jsonObject.getObjects(key = "files") { data -> deserializeDatedFile(jsonObject = data) },
            value = jsonObject.getString(key = "value"),
            hash = jsonObject.getString(key = "hash"),
        )
    }

    private fun deserializeError(jsonObject: JsonObject): Error {
        return Error(
            code = jsonObject.getInt(key = "code"),
            message = jsonObject.getString(key = "message"),
        )
    }

    private fun deserializeFactCheck(jsonObject: JsonObject): FactCheck {
        return FactCheck(
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            countryCode = jsonObject.getString(key = "country_code"),
        )
    }

    private fun deserializeFailedToAddMember(jsonObject: JsonObject): FailedToAddMember {
        return FailedToAddMember(
            userId = jsonObject.getLong(key = "user_id"),
            premiumWouldAllowInvite = jsonObject.getBoolean(key = "premium_would_allow_invite"),
            premiumRequiredToSendMessages = jsonObject.getBoolean(key = "premium_required_to_send_messages"),
        )
    }

    private fun deserializeFailedToAddMembers(jsonObject: JsonObject): FailedToAddMembers {
        return FailedToAddMembers(
            failedToAddMembers = jsonObject.getObjects(key = "failed_to_add_members") { data -> deserializeFailedToAddMember(jsonObject = data) },
        )
    }

    private fun deserializeFile(jsonObject: JsonObject): File {
        return File(
            id = jsonObject.getInt(key = "id"),
            size = jsonObject.getLong(key = "size"),
            expectedSize = jsonObject.getLong(key = "expected_size"),
            local = jsonObject.getObject(key = "local") { data -> deserializeLocalFile(jsonObject = data) },
            remote = jsonObject.getObject(key = "remote") { data -> deserializeRemoteFile(jsonObject = data) },
        )
    }

    private fun deserializeFileDownload(jsonObject: JsonObject): FileDownload {
        return FileDownload(
            fileId = jsonObject.getInt(key = "file_id"),
            message = jsonObject.getObject(key = "message") { data -> deserializeMessage(jsonObject = data) },
            addDate = jsonObject.getInt(key = "add_date"),
            completeDate = jsonObject.getInt(key = "complete_date"),
            isPaused = jsonObject.getBoolean(key = "is_paused"),
        )
    }

    private fun deserializeFileDownloadedPrefixSize(jsonObject: JsonObject): FileDownloadedPrefixSize {
        return FileDownloadedPrefixSize(
            size = jsonObject.getLong(key = "size"),
        )
    }

    private fun deserializeFileTypeAnimation(jsonObject: JsonObject): FileTypeAnimation {
        return FileTypeAnimation()
    }

    private fun deserializeFileTypeAudio(jsonObject: JsonObject): FileTypeAudio {
        return FileTypeAudio()
    }

    private fun deserializeFileTypeDocument(jsonObject: JsonObject): FileTypeDocument {
        return FileTypeDocument()
    }

    private fun deserializeFileTypeNone(jsonObject: JsonObject): FileTypeNone {
        return FileTypeNone()
    }

    private fun deserializeFileTypeNotificationSound(jsonObject: JsonObject): FileTypeNotificationSound {
        return FileTypeNotificationSound()
    }

    private fun deserializeFileTypePhoto(jsonObject: JsonObject): FileTypePhoto {
        return FileTypePhoto()
    }

    private fun deserializeFileTypePhotoStory(jsonObject: JsonObject): FileTypePhotoStory {
        return FileTypePhotoStory()
    }

    private fun deserializeFileTypeProfilePhoto(jsonObject: JsonObject): FileTypeProfilePhoto {
        return FileTypeProfilePhoto()
    }

    private fun deserializeFileTypeSecret(jsonObject: JsonObject): FileTypeSecret {
        return FileTypeSecret()
    }

    private fun deserializeFileTypeSecretThumbnail(jsonObject: JsonObject): FileTypeSecretThumbnail {
        return FileTypeSecretThumbnail()
    }

    private fun deserializeFileTypeSecure(jsonObject: JsonObject): FileTypeSecure {
        return FileTypeSecure()
    }

    private fun deserializeFileTypeSelfDestructingPhoto(jsonObject: JsonObject): FileTypeSelfDestructingPhoto {
        return FileTypeSelfDestructingPhoto()
    }

    private fun deserializeFileTypeSelfDestructingVideo(jsonObject: JsonObject): FileTypeSelfDestructingVideo {
        return FileTypeSelfDestructingVideo()
    }

    private fun deserializeFileTypeSelfDestructingVideoNote(jsonObject: JsonObject): FileTypeSelfDestructingVideoNote {
        return FileTypeSelfDestructingVideoNote()
    }

    private fun deserializeFileTypeSelfDestructingVoiceNote(jsonObject: JsonObject): FileTypeSelfDestructingVoiceNote {
        return FileTypeSelfDestructingVoiceNote()
    }

    private fun deserializeFileTypeSticker(jsonObject: JsonObject): FileTypeSticker {
        return FileTypeSticker()
    }

    private fun deserializeFileTypeThumbnail(jsonObject: JsonObject): FileTypeThumbnail {
        return FileTypeThumbnail()
    }

    private fun deserializeFileTypeUnknown(jsonObject: JsonObject): FileTypeUnknown {
        return FileTypeUnknown()
    }

    private fun deserializeFileTypeVideo(jsonObject: JsonObject): FileTypeVideo {
        return FileTypeVideo()
    }

    private fun deserializeFileTypeVideoNote(jsonObject: JsonObject): FileTypeVideoNote {
        return FileTypeVideoNote()
    }

    private fun deserializeFileTypeVideoStory(jsonObject: JsonObject): FileTypeVideoStory {
        return FileTypeVideoStory()
    }

    private fun deserializeFileTypeVoiceNote(jsonObject: JsonObject): FileTypeVoiceNote {
        return FileTypeVoiceNote()
    }

    private fun deserializeFileTypeWallpaper(jsonObject: JsonObject): FileTypeWallpaper {
        return FileTypeWallpaper()
    }

    private fun deserializeFirebaseAuthenticationSettingsAndroid(jsonObject: JsonObject): FirebaseAuthenticationSettingsAndroid {
        return FirebaseAuthenticationSettingsAndroid()
    }

    private fun deserializeFirebaseAuthenticationSettingsIos(jsonObject: JsonObject): FirebaseAuthenticationSettingsIos {
        return FirebaseAuthenticationSettingsIos(
            deviceToken = jsonObject.getString(key = "device_token"),
            isAppSandbox = jsonObject.getBoolean(key = "is_app_sandbox"),
        )
    }

    private fun deserializeFirebaseDeviceVerificationParametersPlayIntegrity(jsonObject: JsonObject): FirebaseDeviceVerificationParametersPlayIntegrity {
        return FirebaseDeviceVerificationParametersPlayIntegrity(
            nonce = jsonObject.getString(key = "nonce"),
            cloudProjectNumber = jsonObject.getLong(key = "cloud_project_number"),
        )
    }

    private fun deserializeFirebaseDeviceVerificationParametersSafetyNet(jsonObject: JsonObject): FirebaseDeviceVerificationParametersSafetyNet {
        return FirebaseDeviceVerificationParametersSafetyNet(
            nonce = jsonObject.getBytes(key = "nonce"),
        )
    }

    private fun deserializeFormattedText(jsonObject: JsonObject): FormattedText {
        return FormattedText(
            text = jsonObject.getString(key = "text"),
            entities = jsonObject.getObjects(key = "entities") { data -> deserializeTextEntity(jsonObject = data) },
        )
    }

    private fun deserializeForumTopic(jsonObject: JsonObject): ForumTopic {
        return ForumTopic(
            info = jsonObject.getObject(key = "info") { data -> deserializeForumTopicInfo(jsonObject = data) },
            lastMessage = jsonObject.getObjectNullable(key = "last_message") { data -> deserializeMessage(jsonObject = data) },
            order = jsonObject.getLong(key = "order"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
            unreadCount = jsonObject.getInt(key = "unread_count"),
            lastReadInboxMessageId = jsonObject.getLong(key = "last_read_inbox_message_id"),
            lastReadOutboxMessageId = jsonObject.getLong(key = "last_read_outbox_message_id"),
            unreadMentionCount = jsonObject.getInt(key = "unread_mention_count"),
            unreadReactionCount = jsonObject.getInt(key = "unread_reaction_count"),
            notificationSettings = jsonObject.getObject(key = "notification_settings") { data -> deserializeChatNotificationSettings(jsonObject = data) },
            draftMessage = jsonObject.getObjectNullable(key = "draft_message") { data -> deserializeDraftMessage(jsonObject = data) },
        )
    }

    private fun deserializeForumTopicIcon(jsonObject: JsonObject): ForumTopicIcon {
        return ForumTopicIcon(
            color = jsonObject.getInt(key = "color"),
            customEmojiId = jsonObject.getLong(key = "custom_emoji_id"),
        )
    }

    private fun deserializeForumTopicInfo(jsonObject: JsonObject): ForumTopicInfo {
        return ForumTopicInfo(
            chatId = jsonObject.getLong(key = "chat_id"),
            forumTopicId = jsonObject.getLong(key = "forum_topic_id"),
            messageThreadId = jsonObject.getLong(key = "message_thread_id"),
            name = jsonObject.getString(key = "name"),
            icon = jsonObject.getObject(key = "icon") { data -> deserializeForumTopicIcon(jsonObject = data) },
            creationDate = jsonObject.getInt(key = "creation_date"),
            creatorId = jsonObject.getObject(key = "creator_id") { data -> deserializeMessageSender(jsonObject = data) },
            isGeneral = jsonObject.getBoolean(key = "is_general"),
            isOutgoing = jsonObject.getBoolean(key = "is_outgoing"),
            isClosed = jsonObject.getBoolean(key = "is_closed"),
            isHidden = jsonObject.getBoolean(key = "is_hidden"),
        )
    }

    private fun deserializeForumTopics(jsonObject: JsonObject): ForumTopics {
        return ForumTopics(
            totalCount = jsonObject.getInt(key = "total_count"),
            topics = jsonObject.getObjects(key = "topics") { data -> deserializeForumTopic(jsonObject = data) },
            nextOffsetDate = jsonObject.getInt(key = "next_offset_date"),
            nextOffsetMessageId = jsonObject.getLong(key = "next_offset_message_id"),
            nextOffsetMessageThreadId = jsonObject.getLong(key = "next_offset_message_thread_id"),
        )
    }

    private fun deserializeForwardSource(jsonObject: JsonObject): ForwardSource {
        return ForwardSource(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            senderId = jsonObject.getObjectNullable(key = "sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            senderName = jsonObject.getString(key = "sender_name"),
            date = jsonObject.getInt(key = "date"),
            isOutgoing = jsonObject.getBoolean(key = "is_outgoing"),
        )
    }

    private fun deserializeFoundAffiliateProgram(jsonObject: JsonObject): FoundAffiliateProgram {
        return FoundAffiliateProgram(
            botUserId = jsonObject.getLong(key = "bot_user_id"),
            info = jsonObject.getObject(key = "info") { data -> deserializeAffiliateProgramInfo(jsonObject = data) },
        )
    }

    private fun deserializeFoundAffiliatePrograms(jsonObject: JsonObject): FoundAffiliatePrograms {
        return FoundAffiliatePrograms(
            totalCount = jsonObject.getInt(key = "total_count"),
            programs = jsonObject.getObjects(key = "programs") { data -> deserializeFoundAffiliateProgram(jsonObject = data) },
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializeFoundChatBoosts(jsonObject: JsonObject): FoundChatBoosts {
        return FoundChatBoosts(
            totalCount = jsonObject.getInt(key = "total_count"),
            boosts = jsonObject.getObjects(key = "boosts") { data -> deserializeChatBoost(jsonObject = data) },
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializeFoundChatMessages(jsonObject: JsonObject): FoundChatMessages {
        return FoundChatMessages(
            totalCount = jsonObject.getInt(key = "total_count"),
            messages = jsonObject.getObjects(key = "messages") { data -> deserializeMessage(jsonObject = data) },
            nextFromMessageId = jsonObject.getLong(key = "next_from_message_id"),
        )
    }

    private fun deserializeFoundFileDownloads(jsonObject: JsonObject): FoundFileDownloads {
        return FoundFileDownloads(
            totalCounts = jsonObject.getObject(key = "total_counts") { data -> deserializeDownloadedFileCounts(jsonObject = data) },
            files = jsonObject.getObjects(key = "files") { data -> deserializeFileDownload(jsonObject = data) },
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializeFoundMessages(jsonObject: JsonObject): FoundMessages {
        return FoundMessages(
            totalCount = jsonObject.getInt(key = "total_count"),
            messages = jsonObject.getObjects(key = "messages") { data -> deserializeMessage(jsonObject = data) },
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializeFoundPosition(jsonObject: JsonObject): FoundPosition {
        return FoundPosition(
            position = jsonObject.getInt(key = "position"),
        )
    }

    private fun deserializeFoundPositions(jsonObject: JsonObject): FoundPositions {
        return FoundPositions(
            totalCount = jsonObject.getInt(key = "total_count"),
            positions = jsonObject.getInts(key = "positions"),
        )
    }

    private fun deserializeFoundStories(jsonObject: JsonObject): FoundStories {
        return FoundStories(
            totalCount = jsonObject.getInt(key = "total_count"),
            stories = jsonObject.getObjects(key = "stories") { data -> deserializeStory(jsonObject = data) },
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializeFoundUsers(jsonObject: JsonObject): FoundUsers {
        return FoundUsers(
            userIds = jsonObject.getLongs(key = "user_ids"),
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializeFoundWebApp(jsonObject: JsonObject): FoundWebApp {
        return FoundWebApp(
            webApp = jsonObject.getObject(key = "web_app") { data -> deserializeWebApp(jsonObject = data) },
            requestWriteAccess = jsonObject.getBoolean(key = "request_write_access"),
            skipConfirmation = jsonObject.getBoolean(key = "skip_confirmation"),
        )
    }

    private fun deserializeGame(jsonObject: JsonObject): Game {
        return Game(
            id = jsonObject.getLong(key = "id"),
            shortName = jsonObject.getString(key = "short_name"),
            title = jsonObject.getString(key = "title"),
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            description = jsonObject.getString(key = "description"),
            photo = jsonObject.getObject(key = "photo") { data -> deserializePhoto(jsonObject = data) },
            animation = jsonObject.getObjectNullable(key = "animation") { data -> deserializeAnimation(jsonObject = data) },
        )
    }

    private fun deserializeGameHighScore(jsonObject: JsonObject): GameHighScore {
        return GameHighScore(
            position = jsonObject.getInt(key = "position"),
            userId = jsonObject.getLong(key = "user_id"),
            score = jsonObject.getInt(key = "score"),
        )
    }

    private fun deserializeGameHighScores(jsonObject: JsonObject): GameHighScores {
        return GameHighScores(
            scores = jsonObject.getObjects(key = "scores") { data -> deserializeGameHighScore(jsonObject = data) },
        )
    }

    private fun deserializeGift(jsonObject: JsonObject): Gift {
        return Gift(
            id = jsonObject.getLong(key = "id"),
            sticker = jsonObject.getObject(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
            starCount = jsonObject.getLong(key = "star_count"),
            defaultSellStarCount = jsonObject.getLong(key = "default_sell_star_count"),
            upgradeStarCount = jsonObject.getLong(key = "upgrade_star_count"),
            isForBirthday = jsonObject.getBoolean(key = "is_for_birthday"),
            remainingCount = jsonObject.getInt(key = "remaining_count"),
            totalCount = jsonObject.getInt(key = "total_count"),
            firstSendDate = jsonObject.getInt(key = "first_send_date"),
            lastSendDate = jsonObject.getInt(key = "last_send_date"),
        )
    }

    private fun deserializeGiftForResale(jsonObject: JsonObject): GiftForResale {
        return GiftForResale(
            gift = jsonObject.getObject(key = "gift") { data -> deserializeUpgradedGift(jsonObject = data) },
            receivedGiftId = jsonObject.getString(key = "received_gift_id"),
        )
    }

    private fun deserializeGiftForResaleOrderNumber(jsonObject: JsonObject): GiftForResaleOrderNumber {
        return GiftForResaleOrderNumber()
    }

    private fun deserializeGiftForResaleOrderPrice(jsonObject: JsonObject): GiftForResaleOrderPrice {
        return GiftForResaleOrderPrice()
    }

    private fun deserializeGiftForResaleOrderPriceChangeDate(jsonObject: JsonObject): GiftForResaleOrderPriceChangeDate {
        return GiftForResaleOrderPriceChangeDate()
    }

    private fun deserializeGiftSettings(jsonObject: JsonObject): GiftSettings {
        return GiftSettings(
            showGiftButton = jsonObject.getBoolean(key = "show_gift_button"),
            acceptedGiftTypes = jsonObject.getObject(key = "accepted_gift_types") { data -> deserializeAcceptedGiftTypes(jsonObject = data) },
        )
    }

    private fun deserializeGiftUpgradePreview(jsonObject: JsonObject): GiftUpgradePreview {
        return GiftUpgradePreview(
            models = jsonObject.getObjects(key = "models") { data -> deserializeUpgradedGiftModel(jsonObject = data) },
            symbols = jsonObject.getObjects(key = "symbols") { data -> deserializeUpgradedGiftSymbol(jsonObject = data) },
            backdrops = jsonObject.getObjects(key = "backdrops") { data -> deserializeUpgradedGiftBackdrop(jsonObject = data) },
        )
    }

    private fun deserializeGiftsForResale(jsonObject: JsonObject): GiftsForResale {
        return GiftsForResale(
            totalCount = jsonObject.getInt(key = "total_count"),
            gifts = jsonObject.getObjects(key = "gifts") { data -> deserializeGiftForResale(jsonObject = data) },
            models = jsonObject.getObjects(key = "models") { data -> deserializeUpgradedGiftModelCount(jsonObject = data) },
            symbols = jsonObject.getObjects(key = "symbols") { data -> deserializeUpgradedGiftSymbolCount(jsonObject = data) },
            backdrops = jsonObject.getObjects(key = "backdrops") { data -> deserializeUpgradedGiftBackdropCount(jsonObject = data) },
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializeGiveawayInfoCompleted(jsonObject: JsonObject): GiveawayInfoCompleted {
        return GiveawayInfoCompleted(
            creationDate = jsonObject.getInt(key = "creation_date"),
            actualWinnersSelectionDate = jsonObject.getInt(key = "actual_winners_selection_date"),
            wasRefunded = jsonObject.getBoolean(key = "was_refunded"),
            isWinner = jsonObject.getBoolean(key = "is_winner"),
            winnerCount = jsonObject.getInt(key = "winner_count"),
            activationCount = jsonObject.getInt(key = "activation_count"),
            giftCode = jsonObject.getString(key = "gift_code"),
            wonStarCount = jsonObject.getLong(key = "won_star_count"),
        )
    }

    private fun deserializeGiveawayInfoOngoing(jsonObject: JsonObject): GiveawayInfoOngoing {
        return GiveawayInfoOngoing(
            creationDate = jsonObject.getInt(key = "creation_date"),
            status = jsonObject.getObject(key = "status") { data -> deserializeGiveawayParticipantStatus(jsonObject = data) },
            isEnded = jsonObject.getBoolean(key = "is_ended"),
        )
    }

    private fun deserializeGiveawayParameters(jsonObject: JsonObject): GiveawayParameters {
        return GiveawayParameters(
            boostedChatId = jsonObject.getLong(key = "boosted_chat_id"),
            additionalChatIds = jsonObject.getLongs(key = "additional_chat_ids"),
            winnersSelectionDate = jsonObject.getInt(key = "winners_selection_date"),
            onlyNewMembers = jsonObject.getBoolean(key = "only_new_members"),
            hasPublicWinners = jsonObject.getBoolean(key = "has_public_winners"),
            countryCodes = jsonObject.getStrings(key = "country_codes"),
            prizeDescription = jsonObject.getString(key = "prize_description"),
        )
    }

    private fun deserializeGiveawayParticipantStatusAdministrator(jsonObject: JsonObject): GiveawayParticipantStatusAdministrator {
        return GiveawayParticipantStatusAdministrator(
            chatId = jsonObject.getLong(key = "chat_id"),
        )
    }

    private fun deserializeGiveawayParticipantStatusAlreadyWasMember(jsonObject: JsonObject): GiveawayParticipantStatusAlreadyWasMember {
        return GiveawayParticipantStatusAlreadyWasMember(
            joinedChatDate = jsonObject.getInt(key = "joined_chat_date"),
        )
    }

    private fun deserializeGiveawayParticipantStatusDisallowedCountry(jsonObject: JsonObject): GiveawayParticipantStatusDisallowedCountry {
        return GiveawayParticipantStatusDisallowedCountry(
            userCountryCode = jsonObject.getString(key = "user_country_code"),
        )
    }

    private fun deserializeGiveawayParticipantStatusEligible(jsonObject: JsonObject): GiveawayParticipantStatusEligible {
        return GiveawayParticipantStatusEligible()
    }

    private fun deserializeGiveawayParticipantStatusParticipating(jsonObject: JsonObject): GiveawayParticipantStatusParticipating {
        return GiveawayParticipantStatusParticipating()
    }

    private fun deserializeGiveawayPrizePremium(jsonObject: JsonObject): GiveawayPrizePremium {
        return GiveawayPrizePremium(
            monthCount = jsonObject.getInt(key = "month_count"),
        )
    }

    private fun deserializeGiveawayPrizeStars(jsonObject: JsonObject): GiveawayPrizeStars {
        return GiveawayPrizeStars(
            starCount = jsonObject.getLong(key = "star_count"),
        )
    }

    private fun deserializeGroupCall(jsonObject: JsonObject): GroupCall {
        return GroupCall(
            id = jsonObject.getInt(key = "id"),
            title = jsonObject.getString(key = "title"),
            inviteLink = jsonObject.getString(key = "invite_link"),
            scheduledStartDate = jsonObject.getInt(key = "scheduled_start_date"),
            enabledStartNotification = jsonObject.getBoolean(key = "enabled_start_notification"),
            isActive = jsonObject.getBoolean(key = "is_active"),
            isVideoChat = jsonObject.getBoolean(key = "is_video_chat"),
            isRtmpStream = jsonObject.getBoolean(key = "is_rtmp_stream"),
            isJoined = jsonObject.getBoolean(key = "is_joined"),
            needRejoin = jsonObject.getBoolean(key = "need_rejoin"),
            isOwned = jsonObject.getBoolean(key = "is_owned"),
            canBeManaged = jsonObject.getBoolean(key = "can_be_managed"),
            participantCount = jsonObject.getInt(key = "participant_count"),
            hasHiddenListeners = jsonObject.getBoolean(key = "has_hidden_listeners"),
            loadedAllParticipants = jsonObject.getBoolean(key = "loaded_all_participants"),
            recentSpeakers = jsonObject.getObjects(key = "recent_speakers") { data -> deserializeGroupCallRecentSpeaker(jsonObject = data) },
            isMyVideoEnabled = jsonObject.getBoolean(key = "is_my_video_enabled"),
            isMyVideoPaused = jsonObject.getBoolean(key = "is_my_video_paused"),
            canEnableVideo = jsonObject.getBoolean(key = "can_enable_video"),
            muteNewParticipants = jsonObject.getBoolean(key = "mute_new_participants"),
            canToggleMuteNewParticipants = jsonObject.getBoolean(key = "can_toggle_mute_new_participants"),
            recordDuration = jsonObject.getInt(key = "record_duration"),
            isVideoRecorded = jsonObject.getBoolean(key = "is_video_recorded"),
            duration = jsonObject.getInt(key = "duration"),
        )
    }

    private fun deserializeGroupCallDataChannelMain(jsonObject: JsonObject): GroupCallDataChannelMain {
        return GroupCallDataChannelMain()
    }

    private fun deserializeGroupCallDataChannelScreenSharing(jsonObject: JsonObject): GroupCallDataChannelScreenSharing {
        return GroupCallDataChannelScreenSharing()
    }

    private fun deserializeGroupCallId(jsonObject: JsonObject): GroupCallId {
        return GroupCallId(
            id = jsonObject.getInt(key = "id"),
        )
    }

    private fun deserializeGroupCallInfo(jsonObject: JsonObject): GroupCallInfo {
        return GroupCallInfo(
            groupCallId = jsonObject.getInt(key = "group_call_id"),
            joinPayload = jsonObject.getString(key = "join_payload"),
        )
    }

    private fun deserializeGroupCallJoinParameters(jsonObject: JsonObject): GroupCallJoinParameters {
        return GroupCallJoinParameters(
            audioSourceId = jsonObject.getInt(key = "audio_source_id"),
            payload = jsonObject.getString(key = "payload"),
            isMuted = jsonObject.getBoolean(key = "is_muted"),
            isMyVideoEnabled = jsonObject.getBoolean(key = "is_my_video_enabled"),
        )
    }

    private fun deserializeGroupCallParticipant(jsonObject: JsonObject): GroupCallParticipant {
        return GroupCallParticipant(
            participantId = jsonObject.getObject(key = "participant_id") { data -> deserializeMessageSender(jsonObject = data) },
            audioSourceId = jsonObject.getInt(key = "audio_source_id"),
            screenSharingAudioSourceId = jsonObject.getInt(key = "screen_sharing_audio_source_id"),
            videoInfo = jsonObject.getObjectNullable(key = "video_info") { data -> deserializeGroupCallParticipantVideoInfo(jsonObject = data) },
            screenSharingVideoInfo = jsonObject.getObjectNullable(key = "screen_sharing_video_info") { data -> deserializeGroupCallParticipantVideoInfo(jsonObject = data) },
            bio = jsonObject.getString(key = "bio"),
            isCurrentUser = jsonObject.getBoolean(key = "is_current_user"),
            isSpeaking = jsonObject.getBoolean(key = "is_speaking"),
            isHandRaised = jsonObject.getBoolean(key = "is_hand_raised"),
            canBeMutedForAllUsers = jsonObject.getBoolean(key = "can_be_muted_for_all_users"),
            canBeUnmutedForAllUsers = jsonObject.getBoolean(key = "can_be_unmuted_for_all_users"),
            canBeMutedForCurrentUser = jsonObject.getBoolean(key = "can_be_muted_for_current_user"),
            canBeUnmutedForCurrentUser = jsonObject.getBoolean(key = "can_be_unmuted_for_current_user"),
            isMutedForAllUsers = jsonObject.getBoolean(key = "is_muted_for_all_users"),
            isMutedForCurrentUser = jsonObject.getBoolean(key = "is_muted_for_current_user"),
            canUnmuteSelf = jsonObject.getBoolean(key = "can_unmute_self"),
            volumeLevel = jsonObject.getInt(key = "volume_level"),
            order = jsonObject.getString(key = "order"),
        )
    }

    private fun deserializeGroupCallParticipantVideoInfo(jsonObject: JsonObject): GroupCallParticipantVideoInfo {
        return GroupCallParticipantVideoInfo(
            sourceGroups = jsonObject.getObjects(key = "source_groups") { data -> deserializeGroupCallVideoSourceGroup(jsonObject = data) },
            endpointId = jsonObject.getString(key = "endpoint_id"),
            isPaused = jsonObject.getBoolean(key = "is_paused"),
        )
    }

    private fun deserializeGroupCallParticipants(jsonObject: JsonObject): GroupCallParticipants {
        return GroupCallParticipants(
            totalCount = jsonObject.getInt(key = "total_count"),
            participantIds = jsonObject.getObjects(key = "participant_ids") { data -> deserializeMessageSender(jsonObject = data) },
        )
    }

    private fun deserializeGroupCallRecentSpeaker(jsonObject: JsonObject): GroupCallRecentSpeaker {
        return GroupCallRecentSpeaker(
            participantId = jsonObject.getObject(key = "participant_id") { data -> deserializeMessageSender(jsonObject = data) },
            isSpeaking = jsonObject.getBoolean(key = "is_speaking"),
        )
    }

    private fun deserializeGroupCallVideoQualityFull(jsonObject: JsonObject): GroupCallVideoQualityFull {
        return GroupCallVideoQualityFull()
    }

    private fun deserializeGroupCallVideoQualityMedium(jsonObject: JsonObject): GroupCallVideoQualityMedium {
        return GroupCallVideoQualityMedium()
    }

    private fun deserializeGroupCallVideoQualityThumbnail(jsonObject: JsonObject): GroupCallVideoQualityThumbnail {
        return GroupCallVideoQualityThumbnail()
    }

    private fun deserializeGroupCallVideoSourceGroup(jsonObject: JsonObject): GroupCallVideoSourceGroup {
        return GroupCallVideoSourceGroup(
            semantics = jsonObject.getString(key = "semantics"),
            sourceIds = jsonObject.getInts(key = "source_ids"),
        )
    }

    private fun deserializeHashtags(jsonObject: JsonObject): Hashtags {
        return Hashtags(
            hashtags = jsonObject.getStrings(key = "hashtags"),
        )
    }

    private fun deserializeHttpUrl(jsonObject: JsonObject): HttpUrl {
        return HttpUrl(
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeIdentityDocument(jsonObject: JsonObject): IdentityDocument {
        return IdentityDocument(
            number = jsonObject.getString(key = "number"),
            expirationDate = jsonObject.getObjectNullable(key = "expiration_date") { data -> deserializeDate(jsonObject = data) },
            frontSide = jsonObject.getObject(key = "front_side") { data -> deserializeDatedFile(jsonObject = data) },
            reverseSide = jsonObject.getObjectNullable(key = "reverse_side") { data -> deserializeDatedFile(jsonObject = data) },
            selfie = jsonObject.getObjectNullable(key = "selfie") { data -> deserializeDatedFile(jsonObject = data) },
            translation = jsonObject.getObjects(key = "translation") { data -> deserializeDatedFile(jsonObject = data) },
        )
    }

    private fun deserializeImportedContacts(jsonObject: JsonObject): ImportedContacts {
        return ImportedContacts(
            userIds = jsonObject.getLongs(key = "user_ids"),
            importerCount = jsonObject.getInts(key = "importer_count"),
        )
    }

    private fun deserializeInlineKeyboardButton(jsonObject: JsonObject): InlineKeyboardButton {
        return InlineKeyboardButton(
            text = jsonObject.getString(key = "text"),
            type = jsonObject.getObject(key = "type") { data -> deserializeInlineKeyboardButtonType(jsonObject = data) },
        )
    }

    private fun deserializeInlineKeyboardButtonTypeBuy(jsonObject: JsonObject): InlineKeyboardButtonTypeBuy {
        return InlineKeyboardButtonTypeBuy()
    }

    private fun deserializeInlineKeyboardButtonTypeCallback(jsonObject: JsonObject): InlineKeyboardButtonTypeCallback {
        return InlineKeyboardButtonTypeCallback(
            data = jsonObject.getBytes(key = "data"),
        )
    }

    private fun deserializeInlineKeyboardButtonTypeCallbackGame(jsonObject: JsonObject): InlineKeyboardButtonTypeCallbackGame {
        return InlineKeyboardButtonTypeCallbackGame()
    }

    private fun deserializeInlineKeyboardButtonTypeCallbackWithPassword(jsonObject: JsonObject): InlineKeyboardButtonTypeCallbackWithPassword {
        return InlineKeyboardButtonTypeCallbackWithPassword(
            data = jsonObject.getBytes(key = "data"),
        )
    }

    private fun deserializeInlineKeyboardButtonTypeCopyText(jsonObject: JsonObject): InlineKeyboardButtonTypeCopyText {
        return InlineKeyboardButtonTypeCopyText(
            text = jsonObject.getString(key = "text"),
        )
    }

    private fun deserializeInlineKeyboardButtonTypeLoginUrl(jsonObject: JsonObject): InlineKeyboardButtonTypeLoginUrl {
        return InlineKeyboardButtonTypeLoginUrl(
            url = jsonObject.getString(key = "url"),
            id = jsonObject.getLong(key = "id"),
            forwardText = jsonObject.getString(key = "forward_text"),
        )
    }

    private fun deserializeInlineKeyboardButtonTypeSwitchInline(jsonObject: JsonObject): InlineKeyboardButtonTypeSwitchInline {
        return InlineKeyboardButtonTypeSwitchInline(
            query = jsonObject.getString(key = "query"),
            targetChat = jsonObject.getObject(key = "target_chat") { data -> deserializeTargetChat(jsonObject = data) },
        )
    }

    private fun deserializeInlineKeyboardButtonTypeUrl(jsonObject: JsonObject): InlineKeyboardButtonTypeUrl {
        return InlineKeyboardButtonTypeUrl(
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeInlineKeyboardButtonTypeUser(jsonObject: JsonObject): InlineKeyboardButtonTypeUser {
        return InlineKeyboardButtonTypeUser(
            userId = jsonObject.getLong(key = "user_id"),
        )
    }

    private fun deserializeInlineKeyboardButtonTypeWebApp(jsonObject: JsonObject): InlineKeyboardButtonTypeWebApp {
        return InlineKeyboardButtonTypeWebApp(
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeInlineQueryResultAnimation(jsonObject: JsonObject): InlineQueryResultAnimation {
        return InlineQueryResultAnimation(
            id = jsonObject.getString(key = "id"),
            animation = jsonObject.getObject(key = "animation") { data -> deserializeAnimation(jsonObject = data) },
            title = jsonObject.getString(key = "title"),
        )
    }

    private fun deserializeInlineQueryResultArticle(jsonObject: JsonObject): InlineQueryResultArticle {
        return InlineQueryResultArticle(
            id = jsonObject.getString(key = "id"),
            url = jsonObject.getString(key = "url"),
            title = jsonObject.getString(key = "title"),
            description = jsonObject.getString(key = "description"),
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeThumbnail(jsonObject = data) },
        )
    }

    private fun deserializeInlineQueryResultAudio(jsonObject: JsonObject): InlineQueryResultAudio {
        return InlineQueryResultAudio(
            id = jsonObject.getString(key = "id"),
            audio = jsonObject.getObject(key = "audio") { data -> deserializeAudio(jsonObject = data) },
        )
    }

    private fun deserializeInlineQueryResultContact(jsonObject: JsonObject): InlineQueryResultContact {
        return InlineQueryResultContact(
            id = jsonObject.getString(key = "id"),
            contact = jsonObject.getObject(key = "contact") { data -> deserializeContact(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeThumbnail(jsonObject = data) },
        )
    }

    private fun deserializeInlineQueryResultDocument(jsonObject: JsonObject): InlineQueryResultDocument {
        return InlineQueryResultDocument(
            id = jsonObject.getString(key = "id"),
            document = jsonObject.getObject(key = "document") { data -> deserializeDocument(jsonObject = data) },
            title = jsonObject.getString(key = "title"),
            description = jsonObject.getString(key = "description"),
        )
    }

    private fun deserializeInlineQueryResultGame(jsonObject: JsonObject): InlineQueryResultGame {
        return InlineQueryResultGame(
            id = jsonObject.getString(key = "id"),
            game = jsonObject.getObject(key = "game") { data -> deserializeGame(jsonObject = data) },
        )
    }

    private fun deserializeInlineQueryResultLocation(jsonObject: JsonObject): InlineQueryResultLocation {
        return InlineQueryResultLocation(
            id = jsonObject.getString(key = "id"),
            location = jsonObject.getObject(key = "location") { data -> deserializeLocation(jsonObject = data) },
            title = jsonObject.getString(key = "title"),
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeThumbnail(jsonObject = data) },
        )
    }

    private fun deserializeInlineQueryResultPhoto(jsonObject: JsonObject): InlineQueryResultPhoto {
        return InlineQueryResultPhoto(
            id = jsonObject.getString(key = "id"),
            photo = jsonObject.getObject(key = "photo") { data -> deserializePhoto(jsonObject = data) },
            title = jsonObject.getString(key = "title"),
            description = jsonObject.getString(key = "description"),
        )
    }

    private fun deserializeInlineQueryResultSticker(jsonObject: JsonObject): InlineQueryResultSticker {
        return InlineQueryResultSticker(
            id = jsonObject.getString(key = "id"),
            sticker = jsonObject.getObject(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeInlineQueryResultVenue(jsonObject: JsonObject): InlineQueryResultVenue {
        return InlineQueryResultVenue(
            id = jsonObject.getString(key = "id"),
            venue = jsonObject.getObject(key = "venue") { data -> deserializeVenue(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeThumbnail(jsonObject = data) },
        )
    }

    private fun deserializeInlineQueryResultVideo(jsonObject: JsonObject): InlineQueryResultVideo {
        return InlineQueryResultVideo(
            id = jsonObject.getString(key = "id"),
            video = jsonObject.getObject(key = "video") { data -> deserializeVideo(jsonObject = data) },
            title = jsonObject.getString(key = "title"),
            description = jsonObject.getString(key = "description"),
        )
    }

    private fun deserializeInlineQueryResultVoiceNote(jsonObject: JsonObject): InlineQueryResultVoiceNote {
        return InlineQueryResultVoiceNote(
            id = jsonObject.getString(key = "id"),
            voiceNote = jsonObject.getObject(key = "voice_note") { data -> deserializeVoiceNote(jsonObject = data) },
            title = jsonObject.getString(key = "title"),
        )
    }

    private fun deserializeInlineQueryResults(jsonObject: JsonObject): InlineQueryResults {
        return InlineQueryResults(
            inlineQueryId = jsonObject.getLong(key = "inline_query_id"),
            button = jsonObject.getObjectNullable(key = "button") { data -> deserializeInlineQueryResultsButton(jsonObject = data) },
            results = jsonObject.getObjects(key = "results") { data -> deserializeInlineQueryResult(jsonObject = data) },
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializeInlineQueryResultsButton(jsonObject: JsonObject): InlineQueryResultsButton {
        return InlineQueryResultsButton(
            text = jsonObject.getString(key = "text"),
            type = jsonObject.getObject(key = "type") { data -> deserializeInlineQueryResultsButtonType(jsonObject = data) },
        )
    }

    private fun deserializeInlineQueryResultsButtonTypeStartBot(jsonObject: JsonObject): InlineQueryResultsButtonTypeStartBot {
        return InlineQueryResultsButtonTypeStartBot(
            parameter = jsonObject.getString(key = "parameter"),
        )
    }

    private fun deserializeInlineQueryResultsButtonTypeWebApp(jsonObject: JsonObject): InlineQueryResultsButtonTypeWebApp {
        return InlineQueryResultsButtonTypeWebApp(
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeInputBackgroundLocal(jsonObject: JsonObject): InputBackgroundLocal {
        return InputBackgroundLocal(
            background = jsonObject.getObject(key = "background") { data -> deserializeInputFile(jsonObject = data) },
        )
    }

    private fun deserializeInputBackgroundPrevious(jsonObject: JsonObject): InputBackgroundPrevious {
        return InputBackgroundPrevious(
            messageId = jsonObject.getLong(key = "message_id"),
        )
    }

    private fun deserializeInputBackgroundRemote(jsonObject: JsonObject): InputBackgroundRemote {
        return InputBackgroundRemote(
            backgroundId = jsonObject.getLong(key = "background_id"),
        )
    }

    private fun deserializeInputBusinessChatLink(jsonObject: JsonObject): InputBusinessChatLink {
        return InputBusinessChatLink(
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            title = jsonObject.getString(key = "title"),
        )
    }

    private fun deserializeInputBusinessStartPage(jsonObject: JsonObject): InputBusinessStartPage {
        return InputBusinessStartPage(
            title = jsonObject.getString(key = "title"),
            message = jsonObject.getString(key = "message"),
            sticker = jsonObject.getObjectNullable(key = "sticker") { data -> deserializeInputFile(jsonObject = data) },
        )
    }

    private fun deserializeInputChatPhotoAnimation(jsonObject: JsonObject): InputChatPhotoAnimation {
        return InputChatPhotoAnimation(
            animation = jsonObject.getObject(key = "animation") { data -> deserializeInputFile(jsonObject = data) },
            mainFrameTimestamp = jsonObject.getDouble(key = "main_frame_timestamp"),
        )
    }

    private fun deserializeInputChatPhotoPrevious(jsonObject: JsonObject): InputChatPhotoPrevious {
        return InputChatPhotoPrevious(
            chatPhotoId = jsonObject.getLong(key = "chat_photo_id"),
        )
    }

    private fun deserializeInputChatPhotoStatic(jsonObject: JsonObject): InputChatPhotoStatic {
        return InputChatPhotoStatic(
            photo = jsonObject.getObject(key = "photo") { data -> deserializeInputFile(jsonObject = data) },
        )
    }

    private fun deserializeInputChatPhotoSticker(jsonObject: JsonObject): InputChatPhotoSticker {
        return InputChatPhotoSticker(
            sticker = jsonObject.getObject(key = "sticker") { data -> deserializeChatPhotoSticker(jsonObject = data) },
        )
    }

    private fun deserializeInputChecklist(jsonObject: JsonObject): InputChecklist {
        return InputChecklist(
            title = jsonObject.getObject(key = "title") { data -> deserializeFormattedText(jsonObject = data) },
            tasks = jsonObject.getObjects(key = "tasks") { data -> deserializeInputChecklistTask(jsonObject = data) },
            othersCanAddTasks = jsonObject.getBoolean(key = "others_can_add_tasks"),
            othersCanMarkTasksAsDone = jsonObject.getBoolean(key = "others_can_mark_tasks_as_done"),
        )
    }

    private fun deserializeInputChecklistTask(jsonObject: JsonObject): InputChecklistTask {
        return InputChecklistTask(
            id = jsonObject.getInt(key = "id"),
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializeInputCredentialsApplePay(jsonObject: JsonObject): InputCredentialsApplePay {
        return InputCredentialsApplePay(
            data = jsonObject.getString(key = "data"),
        )
    }

    private fun deserializeInputCredentialsGooglePay(jsonObject: JsonObject): InputCredentialsGooglePay {
        return InputCredentialsGooglePay(
            data = jsonObject.getString(key = "data"),
        )
    }

    private fun deserializeInputCredentialsNew(jsonObject: JsonObject): InputCredentialsNew {
        return InputCredentialsNew(
            data = jsonObject.getString(key = "data"),
            allowSave = jsonObject.getBoolean(key = "allow_save"),
        )
    }

    private fun deserializeInputCredentialsSaved(jsonObject: JsonObject): InputCredentialsSaved {
        return InputCredentialsSaved(
            savedCredentialsId = jsonObject.getString(key = "saved_credentials_id"),
        )
    }

    private fun deserializeInputFileGenerated(jsonObject: JsonObject): InputFileGenerated {
        return InputFileGenerated(
            originalPath = jsonObject.getString(key = "original_path"),
            conversion = jsonObject.getString(key = "conversion"),
            expectedSize = jsonObject.getLong(key = "expected_size"),
        )
    }

    private fun deserializeInputFileId(jsonObject: JsonObject): InputFileId {
        return InputFileId(
            id = jsonObject.getInt(key = "id"),
        )
    }

    private fun deserializeInputFileLocal(jsonObject: JsonObject): InputFileLocal {
        return InputFileLocal(
            path = jsonObject.getString(key = "path"),
        )
    }

    private fun deserializeInputFileRemote(jsonObject: JsonObject): InputFileRemote {
        return InputFileRemote(
            id = jsonObject.getString(key = "id"),
        )
    }

    private fun deserializeInputGroupCallLink(jsonObject: JsonObject): InputGroupCallLink {
        return InputGroupCallLink(
            link = jsonObject.getString(key = "link"),
        )
    }

    private fun deserializeInputGroupCallMessage(jsonObject: JsonObject): InputGroupCallMessage {
        return InputGroupCallMessage(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
        )
    }

    private fun deserializeInputIdentityDocument(jsonObject: JsonObject): InputIdentityDocument {
        return InputIdentityDocument(
            number = jsonObject.getString(key = "number"),
            expirationDate = jsonObject.getObjectNullable(key = "expiration_date") { data -> deserializeDate(jsonObject = data) },
            frontSide = jsonObject.getObject(key = "front_side") { data -> deserializeInputFile(jsonObject = data) },
            reverseSide = jsonObject.getObjectNullable(key = "reverse_side") { data -> deserializeInputFile(jsonObject = data) },
            selfie = jsonObject.getObjectNullable(key = "selfie") { data -> deserializeInputFile(jsonObject = data) },
            translation = jsonObject.getObjects(key = "translation") { data -> deserializeInputFile(jsonObject = data) },
        )
    }

    private fun deserializeInputInlineQueryResultAnimation(jsonObject: JsonObject): InputInlineQueryResultAnimation {
        return InputInlineQueryResultAnimation(
            id = jsonObject.getString(key = "id"),
            title = jsonObject.getString(key = "title"),
            thumbnailUrl = jsonObject.getString(key = "thumbnail_url"),
            thumbnailMimeType = jsonObject.getString(key = "thumbnail_mime_type"),
            videoUrl = jsonObject.getString(key = "video_url"),
            videoMimeType = jsonObject.getString(key = "video_mime_type"),
            videoDuration = jsonObject.getInt(key = "video_duration"),
            videoWidth = jsonObject.getInt(key = "video_width"),
            videoHeight = jsonObject.getInt(key = "video_height"),
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
            inputMessageContent = jsonObject.getObject(key = "input_message_content") { data -> deserializeInputMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeInputInlineQueryResultArticle(jsonObject: JsonObject): InputInlineQueryResultArticle {
        return InputInlineQueryResultArticle(
            id = jsonObject.getString(key = "id"),
            url = jsonObject.getString(key = "url"),
            title = jsonObject.getString(key = "title"),
            description = jsonObject.getString(key = "description"),
            thumbnailUrl = jsonObject.getString(key = "thumbnail_url"),
            thumbnailWidth = jsonObject.getInt(key = "thumbnail_width"),
            thumbnailHeight = jsonObject.getInt(key = "thumbnail_height"),
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
            inputMessageContent = jsonObject.getObject(key = "input_message_content") { data -> deserializeInputMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeInputInlineQueryResultAudio(jsonObject: JsonObject): InputInlineQueryResultAudio {
        return InputInlineQueryResultAudio(
            id = jsonObject.getString(key = "id"),
            title = jsonObject.getString(key = "title"),
            performer = jsonObject.getString(key = "performer"),
            audioUrl = jsonObject.getString(key = "audio_url"),
            audioDuration = jsonObject.getInt(key = "audio_duration"),
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
            inputMessageContent = jsonObject.getObject(key = "input_message_content") { data -> deserializeInputMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeInputInlineQueryResultContact(jsonObject: JsonObject): InputInlineQueryResultContact {
        return InputInlineQueryResultContact(
            id = jsonObject.getString(key = "id"),
            contact = jsonObject.getObject(key = "contact") { data -> deserializeContact(jsonObject = data) },
            thumbnailUrl = jsonObject.getString(key = "thumbnail_url"),
            thumbnailWidth = jsonObject.getInt(key = "thumbnail_width"),
            thumbnailHeight = jsonObject.getInt(key = "thumbnail_height"),
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
            inputMessageContent = jsonObject.getObject(key = "input_message_content") { data -> deserializeInputMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeInputInlineQueryResultDocument(jsonObject: JsonObject): InputInlineQueryResultDocument {
        return InputInlineQueryResultDocument(
            id = jsonObject.getString(key = "id"),
            title = jsonObject.getString(key = "title"),
            description = jsonObject.getString(key = "description"),
            documentUrl = jsonObject.getString(key = "document_url"),
            mimeType = jsonObject.getString(key = "mime_type"),
            thumbnailUrl = jsonObject.getString(key = "thumbnail_url"),
            thumbnailWidth = jsonObject.getInt(key = "thumbnail_width"),
            thumbnailHeight = jsonObject.getInt(key = "thumbnail_height"),
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
            inputMessageContent = jsonObject.getObject(key = "input_message_content") { data -> deserializeInputMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeInputInlineQueryResultGame(jsonObject: JsonObject): InputInlineQueryResultGame {
        return InputInlineQueryResultGame(
            id = jsonObject.getString(key = "id"),
            gameShortName = jsonObject.getString(key = "game_short_name"),
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
        )
    }

    private fun deserializeInputInlineQueryResultLocation(jsonObject: JsonObject): InputInlineQueryResultLocation {
        return InputInlineQueryResultLocation(
            id = jsonObject.getString(key = "id"),
            location = jsonObject.getObject(key = "location") { data -> deserializeLocation(jsonObject = data) },
            livePeriod = jsonObject.getInt(key = "live_period"),
            title = jsonObject.getString(key = "title"),
            thumbnailUrl = jsonObject.getString(key = "thumbnail_url"),
            thumbnailWidth = jsonObject.getInt(key = "thumbnail_width"),
            thumbnailHeight = jsonObject.getInt(key = "thumbnail_height"),
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
            inputMessageContent = jsonObject.getObject(key = "input_message_content") { data -> deserializeInputMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeInputInlineQueryResultPhoto(jsonObject: JsonObject): InputInlineQueryResultPhoto {
        return InputInlineQueryResultPhoto(
            id = jsonObject.getString(key = "id"),
            title = jsonObject.getString(key = "title"),
            description = jsonObject.getString(key = "description"),
            thumbnailUrl = jsonObject.getString(key = "thumbnail_url"),
            photoUrl = jsonObject.getString(key = "photo_url"),
            photoWidth = jsonObject.getInt(key = "photo_width"),
            photoHeight = jsonObject.getInt(key = "photo_height"),
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
            inputMessageContent = jsonObject.getObject(key = "input_message_content") { data -> deserializeInputMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeInputInlineQueryResultSticker(jsonObject: JsonObject): InputInlineQueryResultSticker {
        return InputInlineQueryResultSticker(
            id = jsonObject.getString(key = "id"),
            thumbnailUrl = jsonObject.getString(key = "thumbnail_url"),
            stickerUrl = jsonObject.getString(key = "sticker_url"),
            stickerWidth = jsonObject.getInt(key = "sticker_width"),
            stickerHeight = jsonObject.getInt(key = "sticker_height"),
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
            inputMessageContent = jsonObject.getObject(key = "input_message_content") { data -> deserializeInputMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeInputInlineQueryResultVenue(jsonObject: JsonObject): InputInlineQueryResultVenue {
        return InputInlineQueryResultVenue(
            id = jsonObject.getString(key = "id"),
            venue = jsonObject.getObject(key = "venue") { data -> deserializeVenue(jsonObject = data) },
            thumbnailUrl = jsonObject.getString(key = "thumbnail_url"),
            thumbnailWidth = jsonObject.getInt(key = "thumbnail_width"),
            thumbnailHeight = jsonObject.getInt(key = "thumbnail_height"),
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
            inputMessageContent = jsonObject.getObject(key = "input_message_content") { data -> deserializeInputMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeInputInlineQueryResultVideo(jsonObject: JsonObject): InputInlineQueryResultVideo {
        return InputInlineQueryResultVideo(
            id = jsonObject.getString(key = "id"),
            title = jsonObject.getString(key = "title"),
            description = jsonObject.getString(key = "description"),
            thumbnailUrl = jsonObject.getString(key = "thumbnail_url"),
            videoUrl = jsonObject.getString(key = "video_url"),
            mimeType = jsonObject.getString(key = "mime_type"),
            videoWidth = jsonObject.getInt(key = "video_width"),
            videoHeight = jsonObject.getInt(key = "video_height"),
            videoDuration = jsonObject.getInt(key = "video_duration"),
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
            inputMessageContent = jsonObject.getObject(key = "input_message_content") { data -> deserializeInputMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeInputInlineQueryResultVoiceNote(jsonObject: JsonObject): InputInlineQueryResultVoiceNote {
        return InputInlineQueryResultVoiceNote(
            id = jsonObject.getString(key = "id"),
            title = jsonObject.getString(key = "title"),
            voiceNoteUrl = jsonObject.getString(key = "voice_note_url"),
            voiceNoteDuration = jsonObject.getInt(key = "voice_note_duration"),
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
            inputMessageContent = jsonObject.getObject(key = "input_message_content") { data -> deserializeInputMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeInputInvoiceMessage(jsonObject: JsonObject): InputInvoiceMessage {
        return InputInvoiceMessage(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
        )
    }

    private fun deserializeInputInvoiceName(jsonObject: JsonObject): InputInvoiceName {
        return InputInvoiceName(
            name = jsonObject.getString(key = "name"),
        )
    }

    private fun deserializeInputInvoiceTelegram(jsonObject: JsonObject): InputInvoiceTelegram {
        return InputInvoiceTelegram(
            purpose = jsonObject.getObject(key = "purpose") { data -> deserializeTelegramPaymentPurpose(jsonObject = data) },
        )
    }

    private fun deserializeInputMessageAnimation(jsonObject: JsonObject): InputMessageAnimation {
        return InputMessageAnimation(
            animation = jsonObject.getObject(key = "animation") { data -> deserializeInputFile(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeInputThumbnail(jsonObject = data) },
            addedStickerFileIds = jsonObject.getInts(key = "added_sticker_file_ids"),
            duration = jsonObject.getInt(key = "duration"),
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            caption = jsonObject.getObjectNullable(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
            showCaptionAboveMedia = jsonObject.getBoolean(key = "show_caption_above_media"),
            hasSpoiler = jsonObject.getBoolean(key = "has_spoiler"),
        )
    }

    private fun deserializeInputMessageAudio(jsonObject: JsonObject): InputMessageAudio {
        return InputMessageAudio(
            audio = jsonObject.getObject(key = "audio") { data -> deserializeInputFile(jsonObject = data) },
            albumCoverThumbnail = jsonObject.getObjectNullable(key = "album_cover_thumbnail") { data -> deserializeInputThumbnail(jsonObject = data) },
            duration = jsonObject.getInt(key = "duration"),
            title = jsonObject.getString(key = "title"),
            performer = jsonObject.getString(key = "performer"),
            caption = jsonObject.getObjectNullable(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializeInputMessageChecklist(jsonObject: JsonObject): InputMessageChecklist {
        return InputMessageChecklist(
            checklist = jsonObject.getObject(key = "checklist") { data -> deserializeInputChecklist(jsonObject = data) },
        )
    }

    private fun deserializeInputMessageContact(jsonObject: JsonObject): InputMessageContact {
        return InputMessageContact(
            contact = jsonObject.getObject(key = "contact") { data -> deserializeContact(jsonObject = data) },
        )
    }

    private fun deserializeInputMessageDice(jsonObject: JsonObject): InputMessageDice {
        return InputMessageDice(
            emoji = jsonObject.getString(key = "emoji"),
            clearDraft = jsonObject.getBoolean(key = "clear_draft"),
        )
    }

    private fun deserializeInputMessageDocument(jsonObject: JsonObject): InputMessageDocument {
        return InputMessageDocument(
            document = jsonObject.getObject(key = "document") { data -> deserializeInputFile(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeInputThumbnail(jsonObject = data) },
            disableContentTypeDetection = jsonObject.getBoolean(key = "disable_content_type_detection"),
            caption = jsonObject.getObjectNullable(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializeInputMessageForwarded(jsonObject: JsonObject): InputMessageForwarded {
        return InputMessageForwarded(
            fromChatId = jsonObject.getLong(key = "from_chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            inGameShare = jsonObject.getBoolean(key = "in_game_share"),
            replaceVideoStartTimestamp = jsonObject.getBoolean(key = "replace_video_start_timestamp"),
            newVideoStartTimestamp = jsonObject.getInt(key = "new_video_start_timestamp"),
            copyOptions = jsonObject.getObjectNullable(key = "copy_options") { data -> deserializeMessageCopyOptions(jsonObject = data) },
        )
    }

    private fun deserializeInputMessageGame(jsonObject: JsonObject): InputMessageGame {
        return InputMessageGame(
            botUserId = jsonObject.getLong(key = "bot_user_id"),
            gameShortName = jsonObject.getString(key = "game_short_name"),
        )
    }

    private fun deserializeInputMessageInvoice(jsonObject: JsonObject): InputMessageInvoice {
        return InputMessageInvoice(
            invoice = jsonObject.getObject(key = "invoice") { data -> deserializeInvoice(jsonObject = data) },
            title = jsonObject.getString(key = "title"),
            description = jsonObject.getString(key = "description"),
            photoUrl = jsonObject.getString(key = "photo_url"),
            photoSize = jsonObject.getInt(key = "photo_size"),
            photoWidth = jsonObject.getInt(key = "photo_width"),
            photoHeight = jsonObject.getInt(key = "photo_height"),
            payload = jsonObject.getBytes(key = "payload"),
            providerToken = jsonObject.getString(key = "provider_token"),
            providerData = jsonObject.getString(key = "provider_data"),
            startParameter = jsonObject.getString(key = "start_parameter"),
            paidMedia = jsonObject.getObjectNullable(key = "paid_media") { data -> deserializeInputPaidMedia(jsonObject = data) },
            paidMediaCaption = jsonObject.getObjectNullable(key = "paid_media_caption") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializeInputMessageLocation(jsonObject: JsonObject): InputMessageLocation {
        return InputMessageLocation(
            location = jsonObject.getObject(key = "location") { data -> deserializeLocation(jsonObject = data) },
            livePeriod = jsonObject.getInt(key = "live_period"),
            heading = jsonObject.getInt(key = "heading"),
            proximityAlertRadius = jsonObject.getInt(key = "proximity_alert_radius"),
        )
    }

    private fun deserializeInputMessagePaidMedia(jsonObject: JsonObject): InputMessagePaidMedia {
        return InputMessagePaidMedia(
            starCount = jsonObject.getLong(key = "star_count"),
            paidMedia = jsonObject.getObjects(key = "paid_media") { data -> deserializeInputPaidMedia(jsonObject = data) },
            caption = jsonObject.getObjectNullable(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
            showCaptionAboveMedia = jsonObject.getBoolean(key = "show_caption_above_media"),
            payload = jsonObject.getString(key = "payload"),
        )
    }

    private fun deserializeInputMessagePhoto(jsonObject: JsonObject): InputMessagePhoto {
        return InputMessagePhoto(
            photo = jsonObject.getObject(key = "photo") { data -> deserializeInputFile(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeInputThumbnail(jsonObject = data) },
            addedStickerFileIds = jsonObject.getInts(key = "added_sticker_file_ids"),
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            caption = jsonObject.getObjectNullable(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
            showCaptionAboveMedia = jsonObject.getBoolean(key = "show_caption_above_media"),
            selfDestructType = jsonObject.getObjectNullable(key = "self_destruct_type") { data -> deserializeMessageSelfDestructType(jsonObject = data) },
            hasSpoiler = jsonObject.getBoolean(key = "has_spoiler"),
        )
    }

    private fun deserializeInputMessagePoll(jsonObject: JsonObject): InputMessagePoll {
        return InputMessagePoll(
            question = jsonObject.getObject(key = "question") { data -> deserializeFormattedText(jsonObject = data) },
            options = jsonObject.getObjects(key = "options") { data -> deserializeFormattedText(jsonObject = data) },
            isAnonymous = jsonObject.getBoolean(key = "is_anonymous"),
            type = jsonObject.getObject(key = "type") { data -> deserializePollType(jsonObject = data) },
            openPeriod = jsonObject.getInt(key = "open_period"),
            closeDate = jsonObject.getInt(key = "close_date"),
            isClosed = jsonObject.getBoolean(key = "is_closed"),
        )
    }

    private fun deserializeInputMessageReplyToExternalMessage(jsonObject: JsonObject): InputMessageReplyToExternalMessage {
        return InputMessageReplyToExternalMessage(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            quote = jsonObject.getObjectNullable(key = "quote") { data -> deserializeInputTextQuote(jsonObject = data) },
        )
    }

    private fun deserializeInputMessageReplyToMessage(jsonObject: JsonObject): InputMessageReplyToMessage {
        return InputMessageReplyToMessage(
            messageId = jsonObject.getLong(key = "message_id"),
            quote = jsonObject.getObjectNullable(key = "quote") { data -> deserializeInputTextQuote(jsonObject = data) },
        )
    }

    private fun deserializeInputMessageReplyToStory(jsonObject: JsonObject): InputMessageReplyToStory {
        return InputMessageReplyToStory(
            storyPosterChatId = jsonObject.getLong(key = "story_poster_chat_id"),
            storyId = jsonObject.getInt(key = "story_id"),
        )
    }

    private fun deserializeInputMessageSticker(jsonObject: JsonObject): InputMessageSticker {
        return InputMessageSticker(
            sticker = jsonObject.getObject(key = "sticker") { data -> deserializeInputFile(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeInputThumbnail(jsonObject = data) },
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            emoji = jsonObject.getString(key = "emoji"),
        )
    }

    private fun deserializeInputMessageStory(jsonObject: JsonObject): InputMessageStory {
        return InputMessageStory(
            storyPosterChatId = jsonObject.getLong(key = "story_poster_chat_id"),
            storyId = jsonObject.getInt(key = "story_id"),
        )
    }

    private fun deserializeInputMessageText(jsonObject: JsonObject): InputMessageText {
        return InputMessageText(
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            linkPreviewOptions = jsonObject.getObjectNullable(key = "link_preview_options") { data -> deserializeLinkPreviewOptions(jsonObject = data) },
            clearDraft = jsonObject.getBoolean(key = "clear_draft"),
        )
    }

    private fun deserializeInputMessageVenue(jsonObject: JsonObject): InputMessageVenue {
        return InputMessageVenue(
            venue = jsonObject.getObject(key = "venue") { data -> deserializeVenue(jsonObject = data) },
        )
    }

    private fun deserializeInputMessageVideo(jsonObject: JsonObject): InputMessageVideo {
        return InputMessageVideo(
            video = jsonObject.getObject(key = "video") { data -> deserializeInputFile(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeInputThumbnail(jsonObject = data) },
            cover = jsonObject.getObjectNullable(key = "cover") { data -> deserializeInputFile(jsonObject = data) },
            startTimestamp = jsonObject.getInt(key = "start_timestamp"),
            addedStickerFileIds = jsonObject.getInts(key = "added_sticker_file_ids"),
            duration = jsonObject.getInt(key = "duration"),
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            supportsStreaming = jsonObject.getBoolean(key = "supports_streaming"),
            caption = jsonObject.getObjectNullable(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
            showCaptionAboveMedia = jsonObject.getBoolean(key = "show_caption_above_media"),
            selfDestructType = jsonObject.getObjectNullable(key = "self_destruct_type") { data -> deserializeMessageSelfDestructType(jsonObject = data) },
            hasSpoiler = jsonObject.getBoolean(key = "has_spoiler"),
        )
    }

    private fun deserializeInputMessageVideoNote(jsonObject: JsonObject): InputMessageVideoNote {
        return InputMessageVideoNote(
            videoNote = jsonObject.getObject(key = "video_note") { data -> deserializeInputFile(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeInputThumbnail(jsonObject = data) },
            duration = jsonObject.getInt(key = "duration"),
            length = jsonObject.getInt(key = "length"),
            selfDestructType = jsonObject.getObjectNullable(key = "self_destruct_type") { data -> deserializeMessageSelfDestructType(jsonObject = data) },
        )
    }

    private fun deserializeInputMessageVoiceNote(jsonObject: JsonObject): InputMessageVoiceNote {
        return InputMessageVoiceNote(
            voiceNote = jsonObject.getObject(key = "voice_note") { data -> deserializeInputFile(jsonObject = data) },
            duration = jsonObject.getInt(key = "duration"),
            waveform = jsonObject.getBytes(key = "waveform"),
            caption = jsonObject.getObjectNullable(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
            selfDestructType = jsonObject.getObjectNullable(key = "self_destruct_type") { data -> deserializeMessageSelfDestructType(jsonObject = data) },
        )
    }

    private fun deserializeInputPaidMedia(jsonObject: JsonObject): InputPaidMedia {
        return InputPaidMedia(
            type = jsonObject.getObject(key = "type") { data -> deserializeInputPaidMediaType(jsonObject = data) },
            media = jsonObject.getObject(key = "media") { data -> deserializeInputFile(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeInputThumbnail(jsonObject = data) },
            addedStickerFileIds = jsonObject.getInts(key = "added_sticker_file_ids"),
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
        )
    }

    private fun deserializeInputPaidMediaTypePhoto(jsonObject: JsonObject): InputPaidMediaTypePhoto {
        return InputPaidMediaTypePhoto()
    }

    private fun deserializeInputPaidMediaTypeVideo(jsonObject: JsonObject): InputPaidMediaTypeVideo {
        return InputPaidMediaTypeVideo(
            cover = jsonObject.getObjectNullable(key = "cover") { data -> deserializeInputFile(jsonObject = data) },
            startTimestamp = jsonObject.getInt(key = "start_timestamp"),
            duration = jsonObject.getInt(key = "duration"),
            supportsStreaming = jsonObject.getBoolean(key = "supports_streaming"),
        )
    }

    private fun deserializeInputPassportElementAddress(jsonObject: JsonObject): InputPassportElementAddress {
        return InputPassportElementAddress(
            address = jsonObject.getObject(key = "address") { data -> deserializeAddress(jsonObject = data) },
        )
    }

    private fun deserializeInputPassportElementBankStatement(jsonObject: JsonObject): InputPassportElementBankStatement {
        return InputPassportElementBankStatement(
            bankStatement = jsonObject.getObject(key = "bank_statement") { data -> deserializeInputPersonalDocument(jsonObject = data) },
        )
    }

    private fun deserializeInputPassportElementDriverLicense(jsonObject: JsonObject): InputPassportElementDriverLicense {
        return InputPassportElementDriverLicense(
            driverLicense = jsonObject.getObject(key = "driver_license") { data -> deserializeInputIdentityDocument(jsonObject = data) },
        )
    }

    private fun deserializeInputPassportElementEmailAddress(jsonObject: JsonObject): InputPassportElementEmailAddress {
        return InputPassportElementEmailAddress(
            emailAddress = jsonObject.getString(key = "email_address"),
        )
    }

    private fun deserializeInputPassportElementError(jsonObject: JsonObject): InputPassportElementError {
        return InputPassportElementError(
            type = jsonObject.getObject(key = "type") { data -> deserializePassportElementType(jsonObject = data) },
            message = jsonObject.getString(key = "message"),
            source = jsonObject.getObject(key = "source") { data -> deserializeInputPassportElementErrorSource(jsonObject = data) },
        )
    }

    private fun deserializeInputPassportElementErrorSourceDataField(jsonObject: JsonObject): InputPassportElementErrorSourceDataField {
        return InputPassportElementErrorSourceDataField(
            fieldName = jsonObject.getString(key = "field_name"),
            dataHash = jsonObject.getBytes(key = "data_hash"),
        )
    }

    private fun deserializeInputPassportElementErrorSourceFile(jsonObject: JsonObject): InputPassportElementErrorSourceFile {
        return InputPassportElementErrorSourceFile(
            fileHash = jsonObject.getBytes(key = "file_hash"),
        )
    }

    private fun deserializeInputPassportElementErrorSourceFiles(jsonObject: JsonObject): InputPassportElementErrorSourceFiles {
        return InputPassportElementErrorSourceFiles(
            fileHashes = jsonObject.getBytesArray(key = "file_hashes"),
        )
    }

    private fun deserializeInputPassportElementErrorSourceFrontSide(jsonObject: JsonObject): InputPassportElementErrorSourceFrontSide {
        return InputPassportElementErrorSourceFrontSide(
            fileHash = jsonObject.getBytes(key = "file_hash"),
        )
    }

    private fun deserializeInputPassportElementErrorSourceReverseSide(jsonObject: JsonObject): InputPassportElementErrorSourceReverseSide {
        return InputPassportElementErrorSourceReverseSide(
            fileHash = jsonObject.getBytes(key = "file_hash"),
        )
    }

    private fun deserializeInputPassportElementErrorSourceSelfie(jsonObject: JsonObject): InputPassportElementErrorSourceSelfie {
        return InputPassportElementErrorSourceSelfie(
            fileHash = jsonObject.getBytes(key = "file_hash"),
        )
    }

    private fun deserializeInputPassportElementErrorSourceTranslationFile(jsonObject: JsonObject): InputPassportElementErrorSourceTranslationFile {
        return InputPassportElementErrorSourceTranslationFile(
            fileHash = jsonObject.getBytes(key = "file_hash"),
        )
    }

    private fun deserializeInputPassportElementErrorSourceTranslationFiles(jsonObject: JsonObject): InputPassportElementErrorSourceTranslationFiles {
        return InputPassportElementErrorSourceTranslationFiles(
            fileHashes = jsonObject.getBytesArray(key = "file_hashes"),
        )
    }

    private fun deserializeInputPassportElementErrorSourceUnspecified(jsonObject: JsonObject): InputPassportElementErrorSourceUnspecified {
        return InputPassportElementErrorSourceUnspecified(
            elementHash = jsonObject.getBytes(key = "element_hash"),
        )
    }

    private fun deserializeInputPassportElementIdentityCard(jsonObject: JsonObject): InputPassportElementIdentityCard {
        return InputPassportElementIdentityCard(
            identityCard = jsonObject.getObject(key = "identity_card") { data -> deserializeInputIdentityDocument(jsonObject = data) },
        )
    }

    private fun deserializeInputPassportElementInternalPassport(jsonObject: JsonObject): InputPassportElementInternalPassport {
        return InputPassportElementInternalPassport(
            internalPassport = jsonObject.getObject(key = "internal_passport") { data -> deserializeInputIdentityDocument(jsonObject = data) },
        )
    }

    private fun deserializeInputPassportElementPassport(jsonObject: JsonObject): InputPassportElementPassport {
        return InputPassportElementPassport(
            passport = jsonObject.getObject(key = "passport") { data -> deserializeInputIdentityDocument(jsonObject = data) },
        )
    }

    private fun deserializeInputPassportElementPassportRegistration(jsonObject: JsonObject): InputPassportElementPassportRegistration {
        return InputPassportElementPassportRegistration(
            passportRegistration = jsonObject.getObject(key = "passport_registration") { data -> deserializeInputPersonalDocument(jsonObject = data) },
        )
    }

    private fun deserializeInputPassportElementPersonalDetails(jsonObject: JsonObject): InputPassportElementPersonalDetails {
        return InputPassportElementPersonalDetails(
            personalDetails = jsonObject.getObject(key = "personal_details") { data -> deserializePersonalDetails(jsonObject = data) },
        )
    }

    private fun deserializeInputPassportElementPhoneNumber(jsonObject: JsonObject): InputPassportElementPhoneNumber {
        return InputPassportElementPhoneNumber(
            phoneNumber = jsonObject.getString(key = "phone_number"),
        )
    }

    private fun deserializeInputPassportElementRentalAgreement(jsonObject: JsonObject): InputPassportElementRentalAgreement {
        return InputPassportElementRentalAgreement(
            rentalAgreement = jsonObject.getObject(key = "rental_agreement") { data -> deserializeInputPersonalDocument(jsonObject = data) },
        )
    }

    private fun deserializeInputPassportElementTemporaryRegistration(jsonObject: JsonObject): InputPassportElementTemporaryRegistration {
        return InputPassportElementTemporaryRegistration(
            temporaryRegistration = jsonObject.getObject(key = "temporary_registration") { data -> deserializeInputPersonalDocument(jsonObject = data) },
        )
    }

    private fun deserializeInputPassportElementUtilityBill(jsonObject: JsonObject): InputPassportElementUtilityBill {
        return InputPassportElementUtilityBill(
            utilityBill = jsonObject.getObject(key = "utility_bill") { data -> deserializeInputPersonalDocument(jsonObject = data) },
        )
    }

    private fun deserializeInputPersonalDocument(jsonObject: JsonObject): InputPersonalDocument {
        return InputPersonalDocument(
            files = jsonObject.getObjects(key = "files") { data -> deserializeInputFile(jsonObject = data) },
            translation = jsonObject.getObjects(key = "translation") { data -> deserializeInputFile(jsonObject = data) },
        )
    }

    private fun deserializeInputSticker(jsonObject: JsonObject): InputSticker {
        return InputSticker(
            sticker = jsonObject.getObject(key = "sticker") { data -> deserializeInputFile(jsonObject = data) },
            format = jsonObject.getObject(key = "format") { data -> deserializeStickerFormat(jsonObject = data) },
            emojis = jsonObject.getString(key = "emojis"),
            maskPosition = jsonObject.getObjectNullable(key = "mask_position") { data -> deserializeMaskPosition(jsonObject = data) },
            keywords = jsonObject.getStrings(key = "keywords"),
        )
    }

    private fun deserializeInputStoryArea(jsonObject: JsonObject): InputStoryArea {
        return InputStoryArea(
            position = jsonObject.getObject(key = "position") { data -> deserializeStoryAreaPosition(jsonObject = data) },
            type = jsonObject.getObject(key = "type") { data -> deserializeInputStoryAreaType(jsonObject = data) },
        )
    }

    private fun deserializeInputStoryAreaTypeFoundVenue(jsonObject: JsonObject): InputStoryAreaTypeFoundVenue {
        return InputStoryAreaTypeFoundVenue(
            queryId = jsonObject.getLong(key = "query_id"),
            resultId = jsonObject.getString(key = "result_id"),
        )
    }

    private fun deserializeInputStoryAreaTypeLink(jsonObject: JsonObject): InputStoryAreaTypeLink {
        return InputStoryAreaTypeLink(
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeInputStoryAreaTypeLocation(jsonObject: JsonObject): InputStoryAreaTypeLocation {
        return InputStoryAreaTypeLocation(
            location = jsonObject.getObject(key = "location") { data -> deserializeLocation(jsonObject = data) },
            address = jsonObject.getObjectNullable(key = "address") { data -> deserializeLocationAddress(jsonObject = data) },
        )
    }

    private fun deserializeInputStoryAreaTypeMessage(jsonObject: JsonObject): InputStoryAreaTypeMessage {
        return InputStoryAreaTypeMessage(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
        )
    }

    private fun deserializeInputStoryAreaTypePreviousVenue(jsonObject: JsonObject): InputStoryAreaTypePreviousVenue {
        return InputStoryAreaTypePreviousVenue(
            venueProvider = jsonObject.getString(key = "venue_provider"),
            venueId = jsonObject.getString(key = "venue_id"),
        )
    }

    private fun deserializeInputStoryAreaTypeSuggestedReaction(jsonObject: JsonObject): InputStoryAreaTypeSuggestedReaction {
        return InputStoryAreaTypeSuggestedReaction(
            reactionType = jsonObject.getObject(key = "reaction_type") { data -> deserializeReactionType(jsonObject = data) },
            isDark = jsonObject.getBoolean(key = "is_dark"),
            isFlipped = jsonObject.getBoolean(key = "is_flipped"),
        )
    }

    private fun deserializeInputStoryAreaTypeUpgradedGift(jsonObject: JsonObject): InputStoryAreaTypeUpgradedGift {
        return InputStoryAreaTypeUpgradedGift(
            giftName = jsonObject.getString(key = "gift_name"),
        )
    }

    private fun deserializeInputStoryAreaTypeWeather(jsonObject: JsonObject): InputStoryAreaTypeWeather {
        return InputStoryAreaTypeWeather(
            temperature = jsonObject.getDouble(key = "temperature"),
            emoji = jsonObject.getString(key = "emoji"),
            backgroundColor = jsonObject.getInt(key = "background_color"),
        )
    }

    private fun deserializeInputStoryAreas(jsonObject: JsonObject): InputStoryAreas {
        return InputStoryAreas(
            areas = jsonObject.getObjects(key = "areas") { data -> deserializeInputStoryArea(jsonObject = data) },
        )
    }

    private fun deserializeInputStoryContentPhoto(jsonObject: JsonObject): InputStoryContentPhoto {
        return InputStoryContentPhoto(
            photo = jsonObject.getObject(key = "photo") { data -> deserializeInputFile(jsonObject = data) },
            addedStickerFileIds = jsonObject.getInts(key = "added_sticker_file_ids"),
        )
    }

    private fun deserializeInputStoryContentVideo(jsonObject: JsonObject): InputStoryContentVideo {
        return InputStoryContentVideo(
            video = jsonObject.getObject(key = "video") { data -> deserializeInputFile(jsonObject = data) },
            addedStickerFileIds = jsonObject.getInts(key = "added_sticker_file_ids"),
            duration = jsonObject.getDouble(key = "duration"),
            coverFrameTimestamp = jsonObject.getDouble(key = "cover_frame_timestamp"),
            isAnimation = jsonObject.getBoolean(key = "is_animation"),
        )
    }

    private fun deserializeInputTextQuote(jsonObject: JsonObject): InputTextQuote {
        return InputTextQuote(
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            position = jsonObject.getInt(key = "position"),
        )
    }

    private fun deserializeInputThumbnail(jsonObject: JsonObject): InputThumbnail {
        return InputThumbnail(
            thumbnail = jsonObject.getObject(key = "thumbnail") { data -> deserializeInputFile(jsonObject = data) },
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
        )
    }

    private fun deserializeInternalLinkTypeActiveSessions(jsonObject: JsonObject): InternalLinkTypeActiveSessions {
        return InternalLinkTypeActiveSessions()
    }

    private fun deserializeInternalLinkTypeAttachmentMenuBot(jsonObject: JsonObject): InternalLinkTypeAttachmentMenuBot {
        return InternalLinkTypeAttachmentMenuBot(
            targetChat = jsonObject.getObject(key = "target_chat") { data -> deserializeTargetChat(jsonObject = data) },
            botUsername = jsonObject.getString(key = "bot_username"),
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeInternalLinkTypeAuthenticationCode(jsonObject: JsonObject): InternalLinkTypeAuthenticationCode {
        return InternalLinkTypeAuthenticationCode(
            code = jsonObject.getString(key = "code"),
        )
    }

    private fun deserializeInternalLinkTypeBackground(jsonObject: JsonObject): InternalLinkTypeBackground {
        return InternalLinkTypeBackground(
            backgroundName = jsonObject.getString(key = "background_name"),
        )
    }

    private fun deserializeInternalLinkTypeBotAddToChannel(jsonObject: JsonObject): InternalLinkTypeBotAddToChannel {
        return InternalLinkTypeBotAddToChannel(
            botUsername = jsonObject.getString(key = "bot_username"),
            administratorRights = jsonObject.getObject(key = "administrator_rights") { data -> deserializeChatAdministratorRights(jsonObject = data) },
        )
    }

    private fun deserializeInternalLinkTypeBotStart(jsonObject: JsonObject): InternalLinkTypeBotStart {
        return InternalLinkTypeBotStart(
            botUsername = jsonObject.getString(key = "bot_username"),
            startParameter = jsonObject.getString(key = "start_parameter"),
            autostart = jsonObject.getBoolean(key = "autostart"),
        )
    }

    private fun deserializeInternalLinkTypeBotStartInGroup(jsonObject: JsonObject): InternalLinkTypeBotStartInGroup {
        return InternalLinkTypeBotStartInGroup(
            botUsername = jsonObject.getString(key = "bot_username"),
            startParameter = jsonObject.getString(key = "start_parameter"),
            administratorRights = jsonObject.getObjectNullable(key = "administrator_rights") { data -> deserializeChatAdministratorRights(jsonObject = data) },
        )
    }

    private fun deserializeInternalLinkTypeBusinessChat(jsonObject: JsonObject): InternalLinkTypeBusinessChat {
        return InternalLinkTypeBusinessChat(
            linkName = jsonObject.getString(key = "link_name"),
        )
    }

    private fun deserializeInternalLinkTypeBuyStars(jsonObject: JsonObject): InternalLinkTypeBuyStars {
        return InternalLinkTypeBuyStars(
            starCount = jsonObject.getLong(key = "star_count"),
            purpose = jsonObject.getString(key = "purpose"),
        )
    }

    private fun deserializeInternalLinkTypeChangePhoneNumber(jsonObject: JsonObject): InternalLinkTypeChangePhoneNumber {
        return InternalLinkTypeChangePhoneNumber()
    }

    private fun deserializeInternalLinkTypeChatAffiliateProgram(jsonObject: JsonObject): InternalLinkTypeChatAffiliateProgram {
        return InternalLinkTypeChatAffiliateProgram(
            username = jsonObject.getString(key = "username"),
            referrer = jsonObject.getString(key = "referrer"),
        )
    }

    private fun deserializeInternalLinkTypeChatBoost(jsonObject: JsonObject): InternalLinkTypeChatBoost {
        return InternalLinkTypeChatBoost(
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeInternalLinkTypeChatFolderInvite(jsonObject: JsonObject): InternalLinkTypeChatFolderInvite {
        return InternalLinkTypeChatFolderInvite(
            inviteLink = jsonObject.getString(key = "invite_link"),
        )
    }

    private fun deserializeInternalLinkTypeChatFolderSettings(jsonObject: JsonObject): InternalLinkTypeChatFolderSettings {
        return InternalLinkTypeChatFolderSettings()
    }

    private fun deserializeInternalLinkTypeChatInvite(jsonObject: JsonObject): InternalLinkTypeChatInvite {
        return InternalLinkTypeChatInvite(
            inviteLink = jsonObject.getString(key = "invite_link"),
        )
    }

    private fun deserializeInternalLinkTypeDefaultMessageAutoDeleteTimerSettings(jsonObject: JsonObject): InternalLinkTypeDefaultMessageAutoDeleteTimerSettings {
        return InternalLinkTypeDefaultMessageAutoDeleteTimerSettings()
    }

    private fun deserializeInternalLinkTypeEditProfileSettings(jsonObject: JsonObject): InternalLinkTypeEditProfileSettings {
        return InternalLinkTypeEditProfileSettings()
    }

    private fun deserializeInternalLinkTypeGame(jsonObject: JsonObject): InternalLinkTypeGame {
        return InternalLinkTypeGame(
            botUsername = jsonObject.getString(key = "bot_username"),
            gameShortName = jsonObject.getString(key = "game_short_name"),
        )
    }

    private fun deserializeInternalLinkTypeGroupCall(jsonObject: JsonObject): InternalLinkTypeGroupCall {
        return InternalLinkTypeGroupCall(
            inviteLink = jsonObject.getString(key = "invite_link"),
        )
    }

    private fun deserializeInternalLinkTypeInstantView(jsonObject: JsonObject): InternalLinkTypeInstantView {
        return InternalLinkTypeInstantView(
            url = jsonObject.getString(key = "url"),
            fallbackUrl = jsonObject.getString(key = "fallback_url"),
        )
    }

    private fun deserializeInternalLinkTypeInvoice(jsonObject: JsonObject): InternalLinkTypeInvoice {
        return InternalLinkTypeInvoice(
            invoiceName = jsonObject.getString(key = "invoice_name"),
        )
    }

    private fun deserializeInternalLinkTypeLanguagePack(jsonObject: JsonObject): InternalLinkTypeLanguagePack {
        return InternalLinkTypeLanguagePack(
            languagePackId = jsonObject.getString(key = "language_pack_id"),
        )
    }

    private fun deserializeInternalLinkTypeLanguageSettings(jsonObject: JsonObject): InternalLinkTypeLanguageSettings {
        return InternalLinkTypeLanguageSettings()
    }

    private fun deserializeInternalLinkTypeMainWebApp(jsonObject: JsonObject): InternalLinkTypeMainWebApp {
        return InternalLinkTypeMainWebApp(
            botUsername = jsonObject.getString(key = "bot_username"),
            startParameter = jsonObject.getString(key = "start_parameter"),
            mode = jsonObject.getObject(key = "mode") { data -> deserializeWebAppOpenMode(jsonObject = data) },
        )
    }

    private fun deserializeInternalLinkTypeMessage(jsonObject: JsonObject): InternalLinkTypeMessage {
        return InternalLinkTypeMessage(
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeInternalLinkTypeMessageDraft(jsonObject: JsonObject): InternalLinkTypeMessageDraft {
        return InternalLinkTypeMessageDraft(
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            containsLink = jsonObject.getBoolean(key = "contains_link"),
        )
    }

    private fun deserializeInternalLinkTypeMyStars(jsonObject: JsonObject): InternalLinkTypeMyStars {
        return InternalLinkTypeMyStars()
    }

    private fun deserializeInternalLinkTypePassportDataRequest(jsonObject: JsonObject): InternalLinkTypePassportDataRequest {
        return InternalLinkTypePassportDataRequest(
            botUserId = jsonObject.getLong(key = "bot_user_id"),
            scope = jsonObject.getString(key = "scope"),
            publicKey = jsonObject.getString(key = "public_key"),
            nonce = jsonObject.getString(key = "nonce"),
            callbackUrl = jsonObject.getString(key = "callback_url"),
        )
    }

    private fun deserializeInternalLinkTypePhoneNumberConfirmation(jsonObject: JsonObject): InternalLinkTypePhoneNumberConfirmation {
        return InternalLinkTypePhoneNumberConfirmation(
            hash = jsonObject.getString(key = "hash"),
            phoneNumber = jsonObject.getString(key = "phone_number"),
        )
    }

    private fun deserializeInternalLinkTypePremiumFeatures(jsonObject: JsonObject): InternalLinkTypePremiumFeatures {
        return InternalLinkTypePremiumFeatures(
            referrer = jsonObject.getString(key = "referrer"),
        )
    }

    private fun deserializeInternalLinkTypePremiumGift(jsonObject: JsonObject): InternalLinkTypePremiumGift {
        return InternalLinkTypePremiumGift(
            referrer = jsonObject.getString(key = "referrer"),
        )
    }

    private fun deserializeInternalLinkTypePremiumGiftCode(jsonObject: JsonObject): InternalLinkTypePremiumGiftCode {
        return InternalLinkTypePremiumGiftCode(
            code = jsonObject.getString(key = "code"),
        )
    }

    private fun deserializeInternalLinkTypePrivacyAndSecuritySettings(jsonObject: JsonObject): InternalLinkTypePrivacyAndSecuritySettings {
        return InternalLinkTypePrivacyAndSecuritySettings()
    }

    private fun deserializeInternalLinkTypeProxy(jsonObject: JsonObject): InternalLinkTypeProxy {
        return InternalLinkTypeProxy(
            server = jsonObject.getString(key = "server"),
            port = jsonObject.getInt(key = "port"),
            type = jsonObject.getObject(key = "type") { data -> deserializeProxyType(jsonObject = data) },
        )
    }

    private fun deserializeInternalLinkTypePublicChat(jsonObject: JsonObject): InternalLinkTypePublicChat {
        return InternalLinkTypePublicChat(
            chatUsername = jsonObject.getString(key = "chat_username"),
            draftText = jsonObject.getString(key = "draft_text"),
            openProfile = jsonObject.getBoolean(key = "open_profile"),
        )
    }

    private fun deserializeInternalLinkTypeQrCodeAuthentication(jsonObject: JsonObject): InternalLinkTypeQrCodeAuthentication {
        return InternalLinkTypeQrCodeAuthentication()
    }

    private fun deserializeInternalLinkTypeRestorePurchases(jsonObject: JsonObject): InternalLinkTypeRestorePurchases {
        return InternalLinkTypeRestorePurchases()
    }

    private fun deserializeInternalLinkTypeSettings(jsonObject: JsonObject): InternalLinkTypeSettings {
        return InternalLinkTypeSettings()
    }

    private fun deserializeInternalLinkTypeStickerSet(jsonObject: JsonObject): InternalLinkTypeStickerSet {
        return InternalLinkTypeStickerSet(
            stickerSetName = jsonObject.getString(key = "sticker_set_name"),
            expectCustomEmoji = jsonObject.getBoolean(key = "expect_custom_emoji"),
        )
    }

    private fun deserializeInternalLinkTypeStory(jsonObject: JsonObject): InternalLinkTypeStory {
        return InternalLinkTypeStory(
            storyPosterUsername = jsonObject.getString(key = "story_poster_username"),
            storyId = jsonObject.getInt(key = "story_id"),
        )
    }

    private fun deserializeInternalLinkTypeTheme(jsonObject: JsonObject): InternalLinkTypeTheme {
        return InternalLinkTypeTheme(
            themeName = jsonObject.getString(key = "theme_name"),
        )
    }

    private fun deserializeInternalLinkTypeThemeSettings(jsonObject: JsonObject): InternalLinkTypeThemeSettings {
        return InternalLinkTypeThemeSettings()
    }

    private fun deserializeInternalLinkTypeUnknownDeepLink(jsonObject: JsonObject): InternalLinkTypeUnknownDeepLink {
        return InternalLinkTypeUnknownDeepLink(
            link = jsonObject.getString(key = "link"),
        )
    }

    private fun deserializeInternalLinkTypeUnsupportedProxy(jsonObject: JsonObject): InternalLinkTypeUnsupportedProxy {
        return InternalLinkTypeUnsupportedProxy()
    }

    private fun deserializeInternalLinkTypeUpgradedGift(jsonObject: JsonObject): InternalLinkTypeUpgradedGift {
        return InternalLinkTypeUpgradedGift(
            name = jsonObject.getString(key = "name"),
        )
    }

    private fun deserializeInternalLinkTypeUserPhoneNumber(jsonObject: JsonObject): InternalLinkTypeUserPhoneNumber {
        return InternalLinkTypeUserPhoneNumber(
            phoneNumber = jsonObject.getString(key = "phone_number"),
            draftText = jsonObject.getString(key = "draft_text"),
            openProfile = jsonObject.getBoolean(key = "open_profile"),
        )
    }

    private fun deserializeInternalLinkTypeUserToken(jsonObject: JsonObject): InternalLinkTypeUserToken {
        return InternalLinkTypeUserToken(
            token = jsonObject.getString(key = "token"),
        )
    }

    private fun deserializeInternalLinkTypeVideoChat(jsonObject: JsonObject): InternalLinkTypeVideoChat {
        return InternalLinkTypeVideoChat(
            chatUsername = jsonObject.getString(key = "chat_username"),
            inviteHash = jsonObject.getString(key = "invite_hash"),
            isLiveStream = jsonObject.getBoolean(key = "is_live_stream"),
        )
    }

    private fun deserializeInternalLinkTypeWebApp(jsonObject: JsonObject): InternalLinkTypeWebApp {
        return InternalLinkTypeWebApp(
            botUsername = jsonObject.getString(key = "bot_username"),
            webAppShortName = jsonObject.getString(key = "web_app_short_name"),
            startParameter = jsonObject.getString(key = "start_parameter"),
            mode = jsonObject.getObject(key = "mode") { data -> deserializeWebAppOpenMode(jsonObject = data) },
        )
    }

    private fun deserializeInviteGroupCallParticipantResultSuccess(jsonObject: JsonObject): InviteGroupCallParticipantResultSuccess {
        return InviteGroupCallParticipantResultSuccess(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
        )
    }

    private fun deserializeInviteGroupCallParticipantResultUserAlreadyParticipant(jsonObject: JsonObject): InviteGroupCallParticipantResultUserAlreadyParticipant {
        return InviteGroupCallParticipantResultUserAlreadyParticipant()
    }

    private fun deserializeInviteGroupCallParticipantResultUserPrivacyRestricted(jsonObject: JsonObject): InviteGroupCallParticipantResultUserPrivacyRestricted {
        return InviteGroupCallParticipantResultUserPrivacyRestricted()
    }

    private fun deserializeInviteGroupCallParticipantResultUserWasBanned(jsonObject: JsonObject): InviteGroupCallParticipantResultUserWasBanned {
        return InviteGroupCallParticipantResultUserWasBanned()
    }

    private fun deserializeInviteLinkChatTypeBasicGroup(jsonObject: JsonObject): InviteLinkChatTypeBasicGroup {
        return InviteLinkChatTypeBasicGroup()
    }

    private fun deserializeInviteLinkChatTypeChannel(jsonObject: JsonObject): InviteLinkChatTypeChannel {
        return InviteLinkChatTypeChannel()
    }

    private fun deserializeInviteLinkChatTypeSupergroup(jsonObject: JsonObject): InviteLinkChatTypeSupergroup {
        return InviteLinkChatTypeSupergroup()
    }

    private fun deserializeInvoice(jsonObject: JsonObject): Invoice {
        return Invoice(
            currency = jsonObject.getString(key = "currency"),
            priceParts = jsonObject.getObjects(key = "price_parts") { data -> deserializeLabeledPricePart(jsonObject = data) },
            subscriptionPeriod = jsonObject.getInt(key = "subscription_period"),
            maxTipAmount = jsonObject.getLong(key = "max_tip_amount"),
            suggestedTipAmounts = jsonObject.getLongs(key = "suggested_tip_amounts"),
            recurringPaymentTermsOfServiceUrl = jsonObject.getString(key = "recurring_payment_terms_of_service_url"),
            termsOfServiceUrl = jsonObject.getString(key = "terms_of_service_url"),
            isTest = jsonObject.getBoolean(key = "is_test"),
            needName = jsonObject.getBoolean(key = "need_name"),
            needPhoneNumber = jsonObject.getBoolean(key = "need_phone_number"),
            needEmailAddress = jsonObject.getBoolean(key = "need_email_address"),
            needShippingAddress = jsonObject.getBoolean(key = "need_shipping_address"),
            sendPhoneNumberToProvider = jsonObject.getBoolean(key = "send_phone_number_to_provider"),
            sendEmailAddressToProvider = jsonObject.getBoolean(key = "send_email_address_to_provider"),
            isFlexible = jsonObject.getBoolean(key = "is_flexible"),
        )
    }

    private fun deserializeJsonObjectMember(jsonObject: JsonObject): JsonObjectMember {
        return JsonObjectMember(
            key = jsonObject.getString(key = "key"),
            value = jsonObject.getObject(key = "value") { data -> deserializeJsonValue(jsonObject = data) },
        )
    }

    private fun deserializeJsonValueArray(jsonObject: JsonObject): JsonValueArray {
        return JsonValueArray(
            values = jsonObject.getObjects(key = "values") { data -> deserializeJsonValue(jsonObject = data) },
        )
    }

    private fun deserializeJsonValueBoolean(jsonObject: JsonObject): JsonValueBoolean {
        return JsonValueBoolean(
            value = jsonObject.getBoolean(key = "value"),
        )
    }

    private fun deserializeJsonValueNull(jsonObject: JsonObject): JsonValueNull {
        return JsonValueNull()
    }

    private fun deserializeJsonValueNumber(jsonObject: JsonObject): JsonValueNumber {
        return JsonValueNumber(
            value = jsonObject.getDouble(key = "value"),
        )
    }

    private fun deserializeJsonValueObject(jsonObject: JsonObject): JsonValueObject {
        return JsonValueObject(
            members = jsonObject.getObjects(key = "members") { data -> deserializeJsonObjectMember(jsonObject = data) },
        )
    }

    private fun deserializeJsonValueString(jsonObject: JsonObject): JsonValueString {
        return JsonValueString(
            value = jsonObject.getString(key = "value"),
        )
    }

    private fun deserializeKeyboardButton(jsonObject: JsonObject): KeyboardButton {
        return KeyboardButton(
            text = jsonObject.getString(key = "text"),
            type = jsonObject.getObject(key = "type") { data -> deserializeKeyboardButtonType(jsonObject = data) },
        )
    }

    private fun deserializeKeyboardButtonTypeRequestChat(jsonObject: JsonObject): KeyboardButtonTypeRequestChat {
        return KeyboardButtonTypeRequestChat(
            id = jsonObject.getInt(key = "id"),
            chatIsChannel = jsonObject.getBoolean(key = "chat_is_channel"),
            restrictChatIsForum = jsonObject.getBoolean(key = "restrict_chat_is_forum"),
            chatIsForum = jsonObject.getBoolean(key = "chat_is_forum"),
            restrictChatHasUsername = jsonObject.getBoolean(key = "restrict_chat_has_username"),
            chatHasUsername = jsonObject.getBoolean(key = "chat_has_username"),
            chatIsCreated = jsonObject.getBoolean(key = "chat_is_created"),
            userAdministratorRights = jsonObject.getObjectNullable(key = "user_administrator_rights") { data -> deserializeChatAdministratorRights(jsonObject = data) },
            botAdministratorRights = jsonObject.getObjectNullable(key = "bot_administrator_rights") { data -> deserializeChatAdministratorRights(jsonObject = data) },
            botIsMember = jsonObject.getBoolean(key = "bot_is_member"),
            requestTitle = jsonObject.getBoolean(key = "request_title"),
            requestUsername = jsonObject.getBoolean(key = "request_username"),
            requestPhoto = jsonObject.getBoolean(key = "request_photo"),
        )
    }

    private fun deserializeKeyboardButtonTypeRequestLocation(jsonObject: JsonObject): KeyboardButtonTypeRequestLocation {
        return KeyboardButtonTypeRequestLocation()
    }

    private fun deserializeKeyboardButtonTypeRequestPhoneNumber(jsonObject: JsonObject): KeyboardButtonTypeRequestPhoneNumber {
        return KeyboardButtonTypeRequestPhoneNumber()
    }

    private fun deserializeKeyboardButtonTypeRequestPoll(jsonObject: JsonObject): KeyboardButtonTypeRequestPoll {
        return KeyboardButtonTypeRequestPoll(
            forceRegular = jsonObject.getBoolean(key = "force_regular"),
            forceQuiz = jsonObject.getBoolean(key = "force_quiz"),
        )
    }

    private fun deserializeKeyboardButtonTypeRequestUsers(jsonObject: JsonObject): KeyboardButtonTypeRequestUsers {
        return KeyboardButtonTypeRequestUsers(
            id = jsonObject.getInt(key = "id"),
            restrictUserIsBot = jsonObject.getBoolean(key = "restrict_user_is_bot"),
            userIsBot = jsonObject.getBoolean(key = "user_is_bot"),
            restrictUserIsPremium = jsonObject.getBoolean(key = "restrict_user_is_premium"),
            userIsPremium = jsonObject.getBoolean(key = "user_is_premium"),
            maxQuantity = jsonObject.getInt(key = "max_quantity"),
            requestName = jsonObject.getBoolean(key = "request_name"),
            requestUsername = jsonObject.getBoolean(key = "request_username"),
            requestPhoto = jsonObject.getBoolean(key = "request_photo"),
        )
    }

    private fun deserializeKeyboardButtonTypeText(jsonObject: JsonObject): KeyboardButtonTypeText {
        return KeyboardButtonTypeText()
    }

    private fun deserializeKeyboardButtonTypeWebApp(jsonObject: JsonObject): KeyboardButtonTypeWebApp {
        return KeyboardButtonTypeWebApp(
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeLabeledPricePart(jsonObject: JsonObject): LabeledPricePart {
        return LabeledPricePart(
            label = jsonObject.getString(key = "label"),
            amount = jsonObject.getLong(key = "amount"),
        )
    }

    private fun deserializeLanguagePackInfo(jsonObject: JsonObject): LanguagePackInfo {
        return LanguagePackInfo(
            id = jsonObject.getString(key = "id"),
            baseLanguagePackId = jsonObject.getString(key = "base_language_pack_id"),
            name = jsonObject.getString(key = "name"),
            nativeName = jsonObject.getString(key = "native_name"),
            pluralCode = jsonObject.getString(key = "plural_code"),
            isOfficial = jsonObject.getBoolean(key = "is_official"),
            isRtl = jsonObject.getBoolean(key = "is_rtl"),
            isBeta = jsonObject.getBoolean(key = "is_beta"),
            isInstalled = jsonObject.getBoolean(key = "is_installed"),
            totalStringCount = jsonObject.getInt(key = "total_string_count"),
            translatedStringCount = jsonObject.getInt(key = "translated_string_count"),
            localStringCount = jsonObject.getInt(key = "local_string_count"),
            translationUrl = jsonObject.getString(key = "translation_url"),
        )
    }

    private fun deserializeLanguagePackString(jsonObject: JsonObject): LanguagePackString {
        return LanguagePackString(
            key = jsonObject.getString(key = "key"),
            value = jsonObject.getObjectNullable(key = "value") { data -> deserializeLanguagePackStringValue(jsonObject = data) },
        )
    }

    private fun deserializeLanguagePackStringValueDeleted(jsonObject: JsonObject): LanguagePackStringValueDeleted {
        return LanguagePackStringValueDeleted()
    }

    private fun deserializeLanguagePackStringValueOrdinary(jsonObject: JsonObject): LanguagePackStringValueOrdinary {
        return LanguagePackStringValueOrdinary(
            value = jsonObject.getString(key = "value"),
        )
    }

    private fun deserializeLanguagePackStringValuePluralized(jsonObject: JsonObject): LanguagePackStringValuePluralized {
        return LanguagePackStringValuePluralized(
            zeroValue = jsonObject.getString(key = "zero_value"),
            oneValue = jsonObject.getString(key = "one_value"),
            twoValue = jsonObject.getString(key = "two_value"),
            fewValue = jsonObject.getString(key = "few_value"),
            manyValue = jsonObject.getString(key = "many_value"),
            otherValue = jsonObject.getString(key = "other_value"),
        )
    }

    private fun deserializeLanguagePackStrings(jsonObject: JsonObject): LanguagePackStrings {
        return LanguagePackStrings(
            strings = jsonObject.getObjects(key = "strings") { data -> deserializeLanguagePackString(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreview(jsonObject: JsonObject): LinkPreview {
        return LinkPreview(
            url = jsonObject.getString(key = "url"),
            displayUrl = jsonObject.getString(key = "display_url"),
            siteName = jsonObject.getString(key = "site_name"),
            title = jsonObject.getString(key = "title"),
            description = jsonObject.getObject(key = "description") { data -> deserializeFormattedText(jsonObject = data) },
            author = jsonObject.getString(key = "author"),
            type = jsonObject.getObject(key = "type") { data -> deserializeLinkPreviewType(jsonObject = data) },
            hasLargeMedia = jsonObject.getBoolean(key = "has_large_media"),
            showLargeMedia = jsonObject.getBoolean(key = "show_large_media"),
            showMediaAboveDescription = jsonObject.getBoolean(key = "show_media_above_description"),
            skipConfirmation = jsonObject.getBoolean(key = "skip_confirmation"),
            showAboveText = jsonObject.getBoolean(key = "show_above_text"),
            instantViewVersion = jsonObject.getInt(key = "instant_view_version"),
        )
    }

    private fun deserializeLinkPreviewAlbumMediaPhoto(jsonObject: JsonObject): LinkPreviewAlbumMediaPhoto {
        return LinkPreviewAlbumMediaPhoto(
            photo = jsonObject.getObject(key = "photo") { data -> deserializePhoto(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewAlbumMediaVideo(jsonObject: JsonObject): LinkPreviewAlbumMediaVideo {
        return LinkPreviewAlbumMediaVideo(
            video = jsonObject.getObject(key = "video") { data -> deserializeVideo(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewOptions(jsonObject: JsonObject): LinkPreviewOptions {
        return LinkPreviewOptions(
            isDisabled = jsonObject.getBoolean(key = "is_disabled"),
            url = jsonObject.getString(key = "url"),
            forceSmallMedia = jsonObject.getBoolean(key = "force_small_media"),
            forceLargeMedia = jsonObject.getBoolean(key = "force_large_media"),
            showAboveText = jsonObject.getBoolean(key = "show_above_text"),
        )
    }

    private fun deserializeLinkPreviewTypeAlbum(jsonObject: JsonObject): LinkPreviewTypeAlbum {
        return LinkPreviewTypeAlbum(
            media = jsonObject.getObjects(key = "media") { data -> deserializeLinkPreviewAlbumMedia(jsonObject = data) },
            caption = jsonObject.getString(key = "caption"),
        )
    }

    private fun deserializeLinkPreviewTypeAnimation(jsonObject: JsonObject): LinkPreviewTypeAnimation {
        return LinkPreviewTypeAnimation(
            animation = jsonObject.getObject(key = "animation") { data -> deserializeAnimation(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypeApp(jsonObject: JsonObject): LinkPreviewTypeApp {
        return LinkPreviewTypeApp(
            photo = jsonObject.getObject(key = "photo") { data -> deserializePhoto(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypeArticle(jsonObject: JsonObject): LinkPreviewTypeArticle {
        return LinkPreviewTypeArticle(
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializePhoto(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypeAudio(jsonObject: JsonObject): LinkPreviewTypeAudio {
        return LinkPreviewTypeAudio(
            audio = jsonObject.getObject(key = "audio") { data -> deserializeAudio(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypeBackground(jsonObject: JsonObject): LinkPreviewTypeBackground {
        return LinkPreviewTypeBackground(
            document = jsonObject.getObjectNullable(key = "document") { data -> deserializeDocument(jsonObject = data) },
            backgroundType = jsonObject.getObjectNullable(key = "background_type") { data -> deserializeBackgroundType(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypeChannelBoost(jsonObject: JsonObject): LinkPreviewTypeChannelBoost {
        return LinkPreviewTypeChannelBoost(
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializeChatPhoto(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypeChat(jsonObject: JsonObject): LinkPreviewTypeChat {
        return LinkPreviewTypeChat(
            type = jsonObject.getObject(key = "type") { data -> deserializeInviteLinkChatType(jsonObject = data) },
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializeChatPhoto(jsonObject = data) },
            createsJoinRequest = jsonObject.getBoolean(key = "creates_join_request"),
        )
    }

    private fun deserializeLinkPreviewTypeDocument(jsonObject: JsonObject): LinkPreviewTypeDocument {
        return LinkPreviewTypeDocument(
            document = jsonObject.getObject(key = "document") { data -> deserializeDocument(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypeEmbeddedAnimationPlayer(jsonObject: JsonObject): LinkPreviewTypeEmbeddedAnimationPlayer {
        return LinkPreviewTypeEmbeddedAnimationPlayer(
            url = jsonObject.getString(key = "url"),
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializePhoto(jsonObject = data) },
            duration = jsonObject.getInt(key = "duration"),
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
        )
    }

    private fun deserializeLinkPreviewTypeEmbeddedAudioPlayer(jsonObject: JsonObject): LinkPreviewTypeEmbeddedAudioPlayer {
        return LinkPreviewTypeEmbeddedAudioPlayer(
            url = jsonObject.getString(key = "url"),
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializePhoto(jsonObject = data) },
            duration = jsonObject.getInt(key = "duration"),
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
        )
    }

    private fun deserializeLinkPreviewTypeEmbeddedVideoPlayer(jsonObject: JsonObject): LinkPreviewTypeEmbeddedVideoPlayer {
        return LinkPreviewTypeEmbeddedVideoPlayer(
            url = jsonObject.getString(key = "url"),
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializePhoto(jsonObject = data) },
            duration = jsonObject.getInt(key = "duration"),
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
        )
    }

    private fun deserializeLinkPreviewTypeExternalAudio(jsonObject: JsonObject): LinkPreviewTypeExternalAudio {
        return LinkPreviewTypeExternalAudio(
            url = jsonObject.getString(key = "url"),
            mimeType = jsonObject.getString(key = "mime_type"),
            duration = jsonObject.getInt(key = "duration"),
        )
    }

    private fun deserializeLinkPreviewTypeExternalVideo(jsonObject: JsonObject): LinkPreviewTypeExternalVideo {
        return LinkPreviewTypeExternalVideo(
            url = jsonObject.getString(key = "url"),
            mimeType = jsonObject.getString(key = "mime_type"),
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            duration = jsonObject.getInt(key = "duration"),
        )
    }

    private fun deserializeLinkPreviewTypeGroupCall(jsonObject: JsonObject): LinkPreviewTypeGroupCall {
        return LinkPreviewTypeGroupCall()
    }

    private fun deserializeLinkPreviewTypeInvoice(jsonObject: JsonObject): LinkPreviewTypeInvoice {
        return LinkPreviewTypeInvoice()
    }

    private fun deserializeLinkPreviewTypeMessage(jsonObject: JsonObject): LinkPreviewTypeMessage {
        return LinkPreviewTypeMessage()
    }

    private fun deserializeLinkPreviewTypePhoto(jsonObject: JsonObject): LinkPreviewTypePhoto {
        return LinkPreviewTypePhoto(
            photo = jsonObject.getObject(key = "photo") { data -> deserializePhoto(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypePremiumGiftCode(jsonObject: JsonObject): LinkPreviewTypePremiumGiftCode {
        return LinkPreviewTypePremiumGiftCode()
    }

    private fun deserializeLinkPreviewTypeShareableChatFolder(jsonObject: JsonObject): LinkPreviewTypeShareableChatFolder {
        return LinkPreviewTypeShareableChatFolder()
    }

    private fun deserializeLinkPreviewTypeSticker(jsonObject: JsonObject): LinkPreviewTypeSticker {
        return LinkPreviewTypeSticker(
            sticker = jsonObject.getObject(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypeStickerSet(jsonObject: JsonObject): LinkPreviewTypeStickerSet {
        return LinkPreviewTypeStickerSet(
            stickers = jsonObject.getObjects(key = "stickers") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypeStory(jsonObject: JsonObject): LinkPreviewTypeStory {
        return LinkPreviewTypeStory(
            storyPosterChatId = jsonObject.getLong(key = "story_poster_chat_id"),
            storyId = jsonObject.getInt(key = "story_id"),
        )
    }

    private fun deserializeLinkPreviewTypeSupergroupBoost(jsonObject: JsonObject): LinkPreviewTypeSupergroupBoost {
        return LinkPreviewTypeSupergroupBoost(
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializeChatPhoto(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypeTheme(jsonObject: JsonObject): LinkPreviewTypeTheme {
        return LinkPreviewTypeTheme(
            documents = jsonObject.getObjects(key = "documents") { data -> deserializeDocument(jsonObject = data) },
            settings = jsonObject.getObjectNullable(key = "settings") { data -> deserializeThemeSettings(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypeUnsupported(jsonObject: JsonObject): LinkPreviewTypeUnsupported {
        return LinkPreviewTypeUnsupported()
    }

    private fun deserializeLinkPreviewTypeUpgradedGift(jsonObject: JsonObject): LinkPreviewTypeUpgradedGift {
        return LinkPreviewTypeUpgradedGift(
            gift = jsonObject.getObject(key = "gift") { data -> deserializeUpgradedGift(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypeUser(jsonObject: JsonObject): LinkPreviewTypeUser {
        return LinkPreviewTypeUser(
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializeChatPhoto(jsonObject = data) },
            isBot = jsonObject.getBoolean(key = "is_bot"),
        )
    }

    private fun deserializeLinkPreviewTypeVideo(jsonObject: JsonObject): LinkPreviewTypeVideo {
        return LinkPreviewTypeVideo(
            video = jsonObject.getObject(key = "video") { data -> deserializeVideo(jsonObject = data) },
            cover = jsonObject.getObjectNullable(key = "cover") { data -> deserializePhoto(jsonObject = data) },
            startTimestamp = jsonObject.getInt(key = "start_timestamp"),
        )
    }

    private fun deserializeLinkPreviewTypeVideoChat(jsonObject: JsonObject): LinkPreviewTypeVideoChat {
        return LinkPreviewTypeVideoChat(
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializeChatPhoto(jsonObject = data) },
            isLiveStream = jsonObject.getBoolean(key = "is_live_stream"),
        )
    }

    private fun deserializeLinkPreviewTypeVideoNote(jsonObject: JsonObject): LinkPreviewTypeVideoNote {
        return LinkPreviewTypeVideoNote(
            videoNote = jsonObject.getObject(key = "video_note") { data -> deserializeVideoNote(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypeVoiceNote(jsonObject: JsonObject): LinkPreviewTypeVoiceNote {
        return LinkPreviewTypeVoiceNote(
            voiceNote = jsonObject.getObject(key = "voice_note") { data -> deserializeVoiceNote(jsonObject = data) },
        )
    }

    private fun deserializeLinkPreviewTypeWebApp(jsonObject: JsonObject): LinkPreviewTypeWebApp {
        return LinkPreviewTypeWebApp(
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializePhoto(jsonObject = data) },
        )
    }

    private fun deserializeLocalFile(jsonObject: JsonObject): LocalFile {
        return LocalFile(
            path = jsonObject.getString(key = "path"),
            canBeDownloaded = jsonObject.getBoolean(key = "can_be_downloaded"),
            canBeDeleted = jsonObject.getBoolean(key = "can_be_deleted"),
            isDownloadingActive = jsonObject.getBoolean(key = "is_downloading_active"),
            isDownloadingCompleted = jsonObject.getBoolean(key = "is_downloading_completed"),
            downloadOffset = jsonObject.getLong(key = "download_offset"),
            downloadedPrefixSize = jsonObject.getLong(key = "downloaded_prefix_size"),
            downloadedSize = jsonObject.getLong(key = "downloaded_size"),
        )
    }

    private fun deserializeLocalizationTargetInfo(jsonObject: JsonObject): LocalizationTargetInfo {
        return LocalizationTargetInfo(
            languagePacks = jsonObject.getObjects(key = "language_packs") { data -> deserializeLanguagePackInfo(jsonObject = data) },
        )
    }

    private fun deserializeLocation(jsonObject: JsonObject): Location {
        return Location(
            latitude = jsonObject.getDouble(key = "latitude"),
            longitude = jsonObject.getDouble(key = "longitude"),
            horizontalAccuracy = jsonObject.getDouble(key = "horizontal_accuracy"),
        )
    }

    private fun deserializeLocationAddress(jsonObject: JsonObject): LocationAddress {
        return LocationAddress(
            countryCode = jsonObject.getString(key = "country_code"),
            state = jsonObject.getString(key = "state"),
            city = jsonObject.getString(key = "city"),
            street = jsonObject.getString(key = "street"),
        )
    }

    private fun deserializeLogStreamDefault(jsonObject: JsonObject): LogStreamDefault {
        return LogStreamDefault()
    }

    private fun deserializeLogStreamEmpty(jsonObject: JsonObject): LogStreamEmpty {
        return LogStreamEmpty()
    }

    private fun deserializeLogStreamFile(jsonObject: JsonObject): LogStreamFile {
        return LogStreamFile(
            path = jsonObject.getString(key = "path"),
            maxFileSize = jsonObject.getLong(key = "max_file_size"),
            redirectStderr = jsonObject.getBoolean(key = "redirect_stderr"),
        )
    }

    private fun deserializeLogTags(jsonObject: JsonObject): LogTags {
        return LogTags(
            tags = jsonObject.getStrings(key = "tags"),
        )
    }

    private fun deserializeLogVerbosityLevel(jsonObject: JsonObject): LogVerbosityLevel {
        return LogVerbosityLevel(
            verbosityLevel = jsonObject.getInt(key = "verbosity_level"),
        )
    }

    private fun deserializeLoginUrlInfoOpen(jsonObject: JsonObject): LoginUrlInfoOpen {
        return LoginUrlInfoOpen(
            url = jsonObject.getString(key = "url"),
            skipConfirmation = jsonObject.getBoolean(key = "skip_confirmation"),
        )
    }

    private fun deserializeLoginUrlInfoRequestConfirmation(jsonObject: JsonObject): LoginUrlInfoRequestConfirmation {
        return LoginUrlInfoRequestConfirmation(
            url = jsonObject.getString(key = "url"),
            domain = jsonObject.getString(key = "domain"),
            botUserId = jsonObject.getLong(key = "bot_user_id"),
            requestWriteAccess = jsonObject.getBoolean(key = "request_write_access"),
        )
    }

    private fun deserializeMainWebApp(jsonObject: JsonObject): MainWebApp {
        return MainWebApp(
            url = jsonObject.getString(key = "url"),
            mode = jsonObject.getObject(key = "mode") { data -> deserializeWebAppOpenMode(jsonObject = data) },
        )
    }

    private fun deserializeMaskPointChin(jsonObject: JsonObject): MaskPointChin {
        return MaskPointChin()
    }

    private fun deserializeMaskPointEyes(jsonObject: JsonObject): MaskPointEyes {
        return MaskPointEyes()
    }

    private fun deserializeMaskPointForehead(jsonObject: JsonObject): MaskPointForehead {
        return MaskPointForehead()
    }

    private fun deserializeMaskPointMouth(jsonObject: JsonObject): MaskPointMouth {
        return MaskPointMouth()
    }

    private fun deserializeMaskPosition(jsonObject: JsonObject): MaskPosition {
        return MaskPosition(
            point = jsonObject.getObject(key = "point") { data -> deserializeMaskPoint(jsonObject = data) },
            xShift = jsonObject.getDouble(key = "x_shift"),
            yShift = jsonObject.getDouble(key = "y_shift"),
            scale = jsonObject.getDouble(key = "scale"),
        )
    }

    private fun deserializeMessage(jsonObject: JsonObject): Message {
        return Message(
            id = jsonObject.getLong(key = "id"),
            senderId = jsonObject.getObject(key = "sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            chatId = jsonObject.getLong(key = "chat_id"),
            sendingState = jsonObject.getObjectNullable(key = "sending_state") { data -> deserializeMessageSendingState(jsonObject = data) },
            schedulingState = jsonObject.getObjectNullable(key = "scheduling_state") { data -> deserializeMessageSchedulingState(jsonObject = data) },
            isOutgoing = jsonObject.getBoolean(key = "is_outgoing"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
            isFromOffline = jsonObject.getBoolean(key = "is_from_offline"),
            canBeSaved = jsonObject.getBoolean(key = "can_be_saved"),
            hasTimestampedMedia = jsonObject.getBoolean(key = "has_timestamped_media"),
            isChannelPost = jsonObject.getBoolean(key = "is_channel_post"),
            containsUnreadMention = jsonObject.getBoolean(key = "contains_unread_mention"),
            date = jsonObject.getInt(key = "date"),
            editDate = jsonObject.getInt(key = "edit_date"),
            forwardInfo = jsonObject.getObjectNullable(key = "forward_info") { data -> deserializeMessageForwardInfo(jsonObject = data) },
            importInfo = jsonObject.getObjectNullable(key = "import_info") { data -> deserializeMessageImportInfo(jsonObject = data) },
            interactionInfo = jsonObject.getObjectNullable(key = "interaction_info") { data -> deserializeMessageInteractionInfo(jsonObject = data) },
            unreadReactions = jsonObject.getObjects(key = "unread_reactions") { data -> deserializeUnreadReaction(jsonObject = data) },
            factCheck = jsonObject.getObjectNullable(key = "fact_check") { data -> deserializeFactCheck(jsonObject = data) },
            replyTo = jsonObject.getObjectNullable(key = "reply_to") { data -> deserializeMessageReplyTo(jsonObject = data) },
            messageThreadId = jsonObject.getLong(key = "message_thread_id"),
            topicId = jsonObject.getObjectNullable(key = "topic_id") { data -> deserializeMessageTopic(jsonObject = data) },
            selfDestructType = jsonObject.getObjectNullable(key = "self_destruct_type") { data -> deserializeMessageSelfDestructType(jsonObject = data) },
            selfDestructIn = jsonObject.getDouble(key = "self_destruct_in"),
            autoDeleteIn = jsonObject.getDouble(key = "auto_delete_in"),
            viaBotUserId = jsonObject.getLong(key = "via_bot_user_id"),
            senderBusinessBotUserId = jsonObject.getLong(key = "sender_business_bot_user_id"),
            senderBoostCount = jsonObject.getInt(key = "sender_boost_count"),
            paidMessageStarCount = jsonObject.getLong(key = "paid_message_star_count"),
            authorSignature = jsonObject.getString(key = "author_signature"),
            mediaAlbumId = jsonObject.getLong(key = "media_album_id"),
            effectId = jsonObject.getLong(key = "effect_id"),
            hasSensitiveContent = jsonObject.getBoolean(key = "has_sensitive_content"),
            restrictionReason = jsonObject.getString(key = "restriction_reason"),
            content = jsonObject.getObject(key = "content") { data -> deserializeMessageContent(jsonObject = data) },
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
        )
    }

    private fun deserializeMessageAnimatedEmoji(jsonObject: JsonObject): MessageAnimatedEmoji {
        return MessageAnimatedEmoji(
            animatedEmoji = jsonObject.getObject(key = "animated_emoji") { data -> deserializeAnimatedEmoji(jsonObject = data) },
            emoji = jsonObject.getString(key = "emoji"),
        )
    }

    private fun deserializeMessageAnimation(jsonObject: JsonObject): MessageAnimation {
        return MessageAnimation(
            animation = jsonObject.getObject(key = "animation") { data -> deserializeAnimation(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
            showCaptionAboveMedia = jsonObject.getBoolean(key = "show_caption_above_media"),
            hasSpoiler = jsonObject.getBoolean(key = "has_spoiler"),
            isSecret = jsonObject.getBoolean(key = "is_secret"),
        )
    }

    private fun deserializeMessageAudio(jsonObject: JsonObject): MessageAudio {
        return MessageAudio(
            audio = jsonObject.getObject(key = "audio") { data -> deserializeAudio(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializeMessageAutoDeleteTime(jsonObject: JsonObject): MessageAutoDeleteTime {
        return MessageAutoDeleteTime(
            time = jsonObject.getInt(key = "time"),
        )
    }

    private fun deserializeMessageBasicGroupChatCreate(jsonObject: JsonObject): MessageBasicGroupChatCreate {
        return MessageBasicGroupChatCreate(
            title = jsonObject.getString(key = "title"),
            memberUserIds = jsonObject.getLongs(key = "member_user_ids"),
        )
    }

    private fun deserializeMessageBotWriteAccessAllowed(jsonObject: JsonObject): MessageBotWriteAccessAllowed {
        return MessageBotWriteAccessAllowed(
            reason = jsonObject.getObject(key = "reason") { data -> deserializeBotWriteAccessAllowReason(jsonObject = data) },
        )
    }

    private fun deserializeMessageCalendar(jsonObject: JsonObject): MessageCalendar {
        return MessageCalendar(
            totalCount = jsonObject.getInt(key = "total_count"),
            days = jsonObject.getObjects(key = "days") { data -> deserializeMessageCalendarDay(jsonObject = data) },
        )
    }

    private fun deserializeMessageCalendarDay(jsonObject: JsonObject): MessageCalendarDay {
        return MessageCalendarDay(
            totalCount = jsonObject.getInt(key = "total_count"),
            message = jsonObject.getObject(key = "message") { data -> deserializeMessage(jsonObject = data) },
        )
    }

    private fun deserializeMessageCall(jsonObject: JsonObject): MessageCall {
        return MessageCall(
            isVideo = jsonObject.getBoolean(key = "is_video"),
            discardReason = jsonObject.getObject(key = "discard_reason") { data -> deserializeCallDiscardReason(jsonObject = data) },
            duration = jsonObject.getInt(key = "duration"),
        )
    }

    private fun deserializeMessageChatAddMembers(jsonObject: JsonObject): MessageChatAddMembers {
        return MessageChatAddMembers(
            memberUserIds = jsonObject.getLongs(key = "member_user_ids"),
        )
    }

    private fun deserializeMessageChatBoost(jsonObject: JsonObject): MessageChatBoost {
        return MessageChatBoost(
            boostCount = jsonObject.getInt(key = "boost_count"),
        )
    }

    private fun deserializeMessageChatChangePhoto(jsonObject: JsonObject): MessageChatChangePhoto {
        return MessageChatChangePhoto(
            photo = jsonObject.getObject(key = "photo") { data -> deserializeChatPhoto(jsonObject = data) },
        )
    }

    private fun deserializeMessageChatChangeTitle(jsonObject: JsonObject): MessageChatChangeTitle {
        return MessageChatChangeTitle(
            title = jsonObject.getString(key = "title"),
        )
    }

    private fun deserializeMessageChatDeleteMember(jsonObject: JsonObject): MessageChatDeleteMember {
        return MessageChatDeleteMember(
            userId = jsonObject.getLong(key = "user_id"),
        )
    }

    private fun deserializeMessageChatDeletePhoto(jsonObject: JsonObject): MessageChatDeletePhoto {
        return MessageChatDeletePhoto()
    }

    private fun deserializeMessageChatJoinByLink(jsonObject: JsonObject): MessageChatJoinByLink {
        return MessageChatJoinByLink()
    }

    private fun deserializeMessageChatJoinByRequest(jsonObject: JsonObject): MessageChatJoinByRequest {
        return MessageChatJoinByRequest()
    }

    private fun deserializeMessageChatSetBackground(jsonObject: JsonObject): MessageChatSetBackground {
        return MessageChatSetBackground(
            oldBackgroundMessageId = jsonObject.getLong(key = "old_background_message_id"),
            background = jsonObject.getObject(key = "background") { data -> deserializeChatBackground(jsonObject = data) },
            onlyForSelf = jsonObject.getBoolean(key = "only_for_self"),
        )
    }

    private fun deserializeMessageChatSetMessageAutoDeleteTime(jsonObject: JsonObject): MessageChatSetMessageAutoDeleteTime {
        return MessageChatSetMessageAutoDeleteTime(
            messageAutoDeleteTime = jsonObject.getInt(key = "message_auto_delete_time"),
            fromUserId = jsonObject.getLong(key = "from_user_id"),
        )
    }

    private fun deserializeMessageChatSetTheme(jsonObject: JsonObject): MessageChatSetTheme {
        return MessageChatSetTheme(
            themeName = jsonObject.getString(key = "theme_name"),
        )
    }

    private fun deserializeMessageChatShared(jsonObject: JsonObject): MessageChatShared {
        return MessageChatShared(
            chat = jsonObject.getObject(key = "chat") { data -> deserializeSharedChat(jsonObject = data) },
            buttonId = jsonObject.getInt(key = "button_id"),
        )
    }

    private fun deserializeMessageChatUpgradeFrom(jsonObject: JsonObject): MessageChatUpgradeFrom {
        return MessageChatUpgradeFrom(
            title = jsonObject.getString(key = "title"),
            basicGroupId = jsonObject.getLong(key = "basic_group_id"),
        )
    }

    private fun deserializeMessageChatUpgradeTo(jsonObject: JsonObject): MessageChatUpgradeTo {
        return MessageChatUpgradeTo(
            supergroupId = jsonObject.getLong(key = "supergroup_id"),
        )
    }

    private fun deserializeMessageChecklist(jsonObject: JsonObject): MessageChecklist {
        return MessageChecklist(
            list = jsonObject.getObject(key = "list") { data -> deserializeChecklist(jsonObject = data) },
        )
    }

    private fun deserializeMessageChecklistTasksAdded(jsonObject: JsonObject): MessageChecklistTasksAdded {
        return MessageChecklistTasksAdded(
            checklistMessageId = jsonObject.getLong(key = "checklist_message_id"),
            tasks = jsonObject.getObjects(key = "tasks") { data -> deserializeChecklistTask(jsonObject = data) },
        )
    }

    private fun deserializeMessageChecklistTasksDone(jsonObject: JsonObject): MessageChecklistTasksDone {
        return MessageChecklistTasksDone(
            checklistMessageId = jsonObject.getLong(key = "checklist_message_id"),
            markedAsDoneTaskIds = jsonObject.getInts(key = "marked_as_done_task_ids"),
            markedAsNotDoneTaskIds = jsonObject.getInts(key = "marked_as_not_done_task_ids"),
        )
    }

    private fun deserializeMessageContact(jsonObject: JsonObject): MessageContact {
        return MessageContact(
            contact = jsonObject.getObject(key = "contact") { data -> deserializeContact(jsonObject = data) },
        )
    }

    private fun deserializeMessageContactRegistered(jsonObject: JsonObject): MessageContactRegistered {
        return MessageContactRegistered()
    }

    private fun deserializeMessageCopyOptions(jsonObject: JsonObject): MessageCopyOptions {
        return MessageCopyOptions(
            sendCopy = jsonObject.getBoolean(key = "send_copy"),
            replaceCaption = jsonObject.getBoolean(key = "replace_caption"),
            newCaption = jsonObject.getObjectNullable(key = "new_caption") { data -> deserializeFormattedText(jsonObject = data) },
            newShowCaptionAboveMedia = jsonObject.getBoolean(key = "new_show_caption_above_media"),
        )
    }

    private fun deserializeMessageCustomServiceAction(jsonObject: JsonObject): MessageCustomServiceAction {
        return MessageCustomServiceAction(
            text = jsonObject.getString(key = "text"),
        )
    }

    private fun deserializeMessageDice(jsonObject: JsonObject): MessageDice {
        return MessageDice(
            initialState = jsonObject.getObjectNullable(key = "initial_state") { data -> deserializeDiceStickers(jsonObject = data) },
            finalState = jsonObject.getObjectNullable(key = "final_state") { data -> deserializeDiceStickers(jsonObject = data) },
            emoji = jsonObject.getString(key = "emoji"),
            value = jsonObject.getInt(key = "value"),
            successAnimationFrameNumber = jsonObject.getInt(key = "success_animation_frame_number"),
        )
    }

    private fun deserializeMessageDirectMessagePriceChanged(jsonObject: JsonObject): MessageDirectMessagePriceChanged {
        return MessageDirectMessagePriceChanged(
            isEnabled = jsonObject.getBoolean(key = "is_enabled"),
            paidMessageStarCount = jsonObject.getLong(key = "paid_message_star_count"),
        )
    }

    private fun deserializeMessageDocument(jsonObject: JsonObject): MessageDocument {
        return MessageDocument(
            document = jsonObject.getObject(key = "document") { data -> deserializeDocument(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializeMessageEffect(jsonObject: JsonObject): MessageEffect {
        return MessageEffect(
            id = jsonObject.getLong(key = "id"),
            staticIcon = jsonObject.getObjectNullable(key = "static_icon") { data -> deserializeSticker(jsonObject = data) },
            emoji = jsonObject.getString(key = "emoji"),
            isPremium = jsonObject.getBoolean(key = "is_premium"),
            type = jsonObject.getObject(key = "type") { data -> deserializeMessageEffectType(jsonObject = data) },
        )
    }

    private fun deserializeMessageEffectTypeEmojiReaction(jsonObject: JsonObject): MessageEffectTypeEmojiReaction {
        return MessageEffectTypeEmojiReaction(
            selectAnimation = jsonObject.getObject(key = "select_animation") { data -> deserializeSticker(jsonObject = data) },
            effectAnimation = jsonObject.getObject(key = "effect_animation") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeMessageEffectTypePremiumSticker(jsonObject: JsonObject): MessageEffectTypePremiumSticker {
        return MessageEffectTypePremiumSticker(
            sticker = jsonObject.getObject(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeMessageExpiredPhoto(jsonObject: JsonObject): MessageExpiredPhoto {
        return MessageExpiredPhoto()
    }

    private fun deserializeMessageExpiredVideo(jsonObject: JsonObject): MessageExpiredVideo {
        return MessageExpiredVideo()
    }

    private fun deserializeMessageExpiredVideoNote(jsonObject: JsonObject): MessageExpiredVideoNote {
        return MessageExpiredVideoNote()
    }

    private fun deserializeMessageExpiredVoiceNote(jsonObject: JsonObject): MessageExpiredVoiceNote {
        return MessageExpiredVoiceNote()
    }

    private fun deserializeMessageFileTypeGroup(jsonObject: JsonObject): MessageFileTypeGroup {
        return MessageFileTypeGroup(
            title = jsonObject.getString(key = "title"),
        )
    }

    private fun deserializeMessageFileTypePrivate(jsonObject: JsonObject): MessageFileTypePrivate {
        return MessageFileTypePrivate(
            name = jsonObject.getString(key = "name"),
        )
    }

    private fun deserializeMessageFileTypeUnknown(jsonObject: JsonObject): MessageFileTypeUnknown {
        return MessageFileTypeUnknown()
    }

    private fun deserializeMessageForumTopicCreated(jsonObject: JsonObject): MessageForumTopicCreated {
        return MessageForumTopicCreated(
            name = jsonObject.getString(key = "name"),
            icon = jsonObject.getObject(key = "icon") { data -> deserializeForumTopicIcon(jsonObject = data) },
        )
    }

    private fun deserializeMessageForumTopicEdited(jsonObject: JsonObject): MessageForumTopicEdited {
        return MessageForumTopicEdited(
            name = jsonObject.getString(key = "name"),
            editIconCustomEmojiId = jsonObject.getBoolean(key = "edit_icon_custom_emoji_id"),
            iconCustomEmojiId = jsonObject.getLong(key = "icon_custom_emoji_id"),
        )
    }

    private fun deserializeMessageForumTopicIsClosedToggled(jsonObject: JsonObject): MessageForumTopicIsClosedToggled {
        return MessageForumTopicIsClosedToggled(
            isClosed = jsonObject.getBoolean(key = "is_closed"),
        )
    }

    private fun deserializeMessageForumTopicIsHiddenToggled(jsonObject: JsonObject): MessageForumTopicIsHiddenToggled {
        return MessageForumTopicIsHiddenToggled(
            isHidden = jsonObject.getBoolean(key = "is_hidden"),
        )
    }

    private fun deserializeMessageForwardInfo(jsonObject: JsonObject): MessageForwardInfo {
        return MessageForwardInfo(
            origin = jsonObject.getObject(key = "origin") { data -> deserializeMessageOrigin(jsonObject = data) },
            date = jsonObject.getInt(key = "date"),
            source = jsonObject.getObjectNullable(key = "source") { data -> deserializeForwardSource(jsonObject = data) },
            publicServiceAnnouncementType = jsonObject.getString(key = "public_service_announcement_type"),
        )
    }

    private fun deserializeMessageGame(jsonObject: JsonObject): MessageGame {
        return MessageGame(
            game = jsonObject.getObject(key = "game") { data -> deserializeGame(jsonObject = data) },
        )
    }

    private fun deserializeMessageGameScore(jsonObject: JsonObject): MessageGameScore {
        return MessageGameScore(
            gameMessageId = jsonObject.getLong(key = "game_message_id"),
            gameId = jsonObject.getLong(key = "game_id"),
            score = jsonObject.getInt(key = "score"),
        )
    }

    private fun deserializeMessageGift(jsonObject: JsonObject): MessageGift {
        return MessageGift(
            gift = jsonObject.getObject(key = "gift") { data -> deserializeGift(jsonObject = data) },
            senderId = jsonObject.getObject(key = "sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            receiverId = jsonObject.getObject(key = "receiver_id") { data -> deserializeMessageSender(jsonObject = data) },
            receivedGiftId = jsonObject.getString(key = "received_gift_id"),
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            sellStarCount = jsonObject.getLong(key = "sell_star_count"),
            prepaidUpgradeStarCount = jsonObject.getLong(key = "prepaid_upgrade_star_count"),
            isPrivate = jsonObject.getBoolean(key = "is_private"),
            isSaved = jsonObject.getBoolean(key = "is_saved"),
            canBeUpgraded = jsonObject.getBoolean(key = "can_be_upgraded"),
            wasConverted = jsonObject.getBoolean(key = "was_converted"),
            wasUpgraded = jsonObject.getBoolean(key = "was_upgraded"),
            wasRefunded = jsonObject.getBoolean(key = "was_refunded"),
            upgradedReceivedGiftId = jsonObject.getString(key = "upgraded_received_gift_id"),
        )
    }

    private fun deserializeMessageGiftedPremium(jsonObject: JsonObject): MessageGiftedPremium {
        return MessageGiftedPremium(
            gifterUserId = jsonObject.getLong(key = "gifter_user_id"),
            receiverUserId = jsonObject.getLong(key = "receiver_user_id"),
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            cryptocurrency = jsonObject.getString(key = "cryptocurrency"),
            cryptocurrencyAmount = jsonObject.getLong(key = "cryptocurrency_amount"),
            monthCount = jsonObject.getInt(key = "month_count"),
            sticker = jsonObject.getObjectNullable(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeMessageGiftedStars(jsonObject: JsonObject): MessageGiftedStars {
        return MessageGiftedStars(
            gifterUserId = jsonObject.getLong(key = "gifter_user_id"),
            receiverUserId = jsonObject.getLong(key = "receiver_user_id"),
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            cryptocurrency = jsonObject.getString(key = "cryptocurrency"),
            cryptocurrencyAmount = jsonObject.getLong(key = "cryptocurrency_amount"),
            starCount = jsonObject.getLong(key = "star_count"),
            transactionId = jsonObject.getString(key = "transaction_id"),
            sticker = jsonObject.getObjectNullable(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeMessageGiveaway(jsonObject: JsonObject): MessageGiveaway {
        return MessageGiveaway(
            parameters = jsonObject.getObject(key = "parameters") { data -> deserializeGiveawayParameters(jsonObject = data) },
            winnerCount = jsonObject.getInt(key = "winner_count"),
            prize = jsonObject.getObject(key = "prize") { data -> deserializeGiveawayPrize(jsonObject = data) },
            sticker = jsonObject.getObjectNullable(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeMessageGiveawayCompleted(jsonObject: JsonObject): MessageGiveawayCompleted {
        return MessageGiveawayCompleted(
            giveawayMessageId = jsonObject.getLong(key = "giveaway_message_id"),
            winnerCount = jsonObject.getInt(key = "winner_count"),
            isStarGiveaway = jsonObject.getBoolean(key = "is_star_giveaway"),
            unclaimedPrizeCount = jsonObject.getInt(key = "unclaimed_prize_count"),
        )
    }

    private fun deserializeMessageGiveawayCreated(jsonObject: JsonObject): MessageGiveawayCreated {
        return MessageGiveawayCreated(
            starCount = jsonObject.getLong(key = "star_count"),
        )
    }

    private fun deserializeMessageGiveawayPrizeStars(jsonObject: JsonObject): MessageGiveawayPrizeStars {
        return MessageGiveawayPrizeStars(
            starCount = jsonObject.getLong(key = "star_count"),
            transactionId = jsonObject.getString(key = "transaction_id"),
            boostedChatId = jsonObject.getLong(key = "boosted_chat_id"),
            giveawayMessageId = jsonObject.getLong(key = "giveaway_message_id"),
            isUnclaimed = jsonObject.getBoolean(key = "is_unclaimed"),
            sticker = jsonObject.getObjectNullable(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeMessageGiveawayWinners(jsonObject: JsonObject): MessageGiveawayWinners {
        return MessageGiveawayWinners(
            boostedChatId = jsonObject.getLong(key = "boosted_chat_id"),
            giveawayMessageId = jsonObject.getLong(key = "giveaway_message_id"),
            additionalChatCount = jsonObject.getInt(key = "additional_chat_count"),
            actualWinnersSelectionDate = jsonObject.getInt(key = "actual_winners_selection_date"),
            onlyNewMembers = jsonObject.getBoolean(key = "only_new_members"),
            wasRefunded = jsonObject.getBoolean(key = "was_refunded"),
            prize = jsonObject.getObject(key = "prize") { data -> deserializeGiveawayPrize(jsonObject = data) },
            prizeDescription = jsonObject.getString(key = "prize_description"),
            winnerCount = jsonObject.getInt(key = "winner_count"),
            winnerUserIds = jsonObject.getLongs(key = "winner_user_ids"),
            unclaimedPrizeCount = jsonObject.getInt(key = "unclaimed_prize_count"),
        )
    }

    private fun deserializeMessageGroupCall(jsonObject: JsonObject): MessageGroupCall {
        return MessageGroupCall(
            isActive = jsonObject.getBoolean(key = "is_active"),
            wasMissed = jsonObject.getBoolean(key = "was_missed"),
            isVideo = jsonObject.getBoolean(key = "is_video"),
            duration = jsonObject.getInt(key = "duration"),
            otherParticipantIds = jsonObject.getObjects(key = "other_participant_ids") { data -> deserializeMessageSender(jsonObject = data) },
        )
    }

    private fun deserializeMessageImportInfo(jsonObject: JsonObject): MessageImportInfo {
        return MessageImportInfo(
            senderName = jsonObject.getString(key = "sender_name"),
            date = jsonObject.getInt(key = "date"),
        )
    }

    private fun deserializeMessageInteractionInfo(jsonObject: JsonObject): MessageInteractionInfo {
        return MessageInteractionInfo(
            viewCount = jsonObject.getInt(key = "view_count"),
            forwardCount = jsonObject.getInt(key = "forward_count"),
            replyInfo = jsonObject.getObjectNullable(key = "reply_info") { data -> deserializeMessageReplyInfo(jsonObject = data) },
            reactions = jsonObject.getObjectNullable(key = "reactions") { data -> deserializeMessageReactions(jsonObject = data) },
        )
    }

    private fun deserializeMessageInviteVideoChatParticipants(jsonObject: JsonObject): MessageInviteVideoChatParticipants {
        return MessageInviteVideoChatParticipants(
            groupCallId = jsonObject.getInt(key = "group_call_id"),
            userIds = jsonObject.getLongs(key = "user_ids"),
        )
    }

    private fun deserializeMessageInvoice(jsonObject: JsonObject): MessageInvoice {
        return MessageInvoice(
            productInfo = jsonObject.getObject(key = "product_info") { data -> deserializeProductInfo(jsonObject = data) },
            currency = jsonObject.getString(key = "currency"),
            totalAmount = jsonObject.getLong(key = "total_amount"),
            startParameter = jsonObject.getString(key = "start_parameter"),
            isTest = jsonObject.getBoolean(key = "is_test"),
            needShippingAddress = jsonObject.getBoolean(key = "need_shipping_address"),
            receiptMessageId = jsonObject.getLong(key = "receipt_message_id"),
            paidMedia = jsonObject.getObjectNullable(key = "paid_media") { data -> deserializePaidMedia(jsonObject = data) },
            paidMediaCaption = jsonObject.getObjectNullable(key = "paid_media_caption") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializeMessageLink(jsonObject: JsonObject): MessageLink {
        return MessageLink(
            link = jsonObject.getString(key = "link"),
            isPublic = jsonObject.getBoolean(key = "is_public"),
        )
    }

    private fun deserializeMessageLinkInfo(jsonObject: JsonObject): MessageLinkInfo {
        return MessageLinkInfo(
            isPublic = jsonObject.getBoolean(key = "is_public"),
            chatId = jsonObject.getLong(key = "chat_id"),
            messageThreadId = jsonObject.getLong(key = "message_thread_id"),
            message = jsonObject.getObjectNullable(key = "message") { data -> deserializeMessage(jsonObject = data) },
            mediaTimestamp = jsonObject.getInt(key = "media_timestamp"),
            forAlbum = jsonObject.getBoolean(key = "for_album"),
        )
    }

    private fun deserializeMessageLocation(jsonObject: JsonObject): MessageLocation {
        return MessageLocation(
            location = jsonObject.getObject(key = "location") { data -> deserializeLocation(jsonObject = data) },
            livePeriod = jsonObject.getInt(key = "live_period"),
            expiresIn = jsonObject.getInt(key = "expires_in"),
            heading = jsonObject.getInt(key = "heading"),
            proximityAlertRadius = jsonObject.getInt(key = "proximity_alert_radius"),
        )
    }

    private fun deserializeMessageOriginChannel(jsonObject: JsonObject): MessageOriginChannel {
        return MessageOriginChannel(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            authorSignature = jsonObject.getString(key = "author_signature"),
        )
    }

    private fun deserializeMessageOriginChat(jsonObject: JsonObject): MessageOriginChat {
        return MessageOriginChat(
            senderChatId = jsonObject.getLong(key = "sender_chat_id"),
            authorSignature = jsonObject.getString(key = "author_signature"),
        )
    }

    private fun deserializeMessageOriginHiddenUser(jsonObject: JsonObject): MessageOriginHiddenUser {
        return MessageOriginHiddenUser(
            senderName = jsonObject.getString(key = "sender_name"),
        )
    }

    private fun deserializeMessageOriginUser(jsonObject: JsonObject): MessageOriginUser {
        return MessageOriginUser(
            senderUserId = jsonObject.getLong(key = "sender_user_id"),
        )
    }

    private fun deserializeMessagePaidMedia(jsonObject: JsonObject): MessagePaidMedia {
        return MessagePaidMedia(
            starCount = jsonObject.getLong(key = "star_count"),
            media = jsonObject.getObjects(key = "media") { data -> deserializePaidMedia(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
            showCaptionAboveMedia = jsonObject.getBoolean(key = "show_caption_above_media"),
        )
    }

    private fun deserializeMessagePaidMessagePriceChanged(jsonObject: JsonObject): MessagePaidMessagePriceChanged {
        return MessagePaidMessagePriceChanged(
            paidMessageStarCount = jsonObject.getLong(key = "paid_message_star_count"),
        )
    }

    private fun deserializeMessagePaidMessagesRefunded(jsonObject: JsonObject): MessagePaidMessagesRefunded {
        return MessagePaidMessagesRefunded(
            messageCount = jsonObject.getInt(key = "message_count"),
            starCount = jsonObject.getLong(key = "star_count"),
        )
    }

    private fun deserializeMessagePassportDataReceived(jsonObject: JsonObject): MessagePassportDataReceived {
        return MessagePassportDataReceived(
            elements = jsonObject.getObjects(key = "elements") { data -> deserializeEncryptedPassportElement(jsonObject = data) },
            credentials = jsonObject.getObject(key = "credentials") { data -> deserializeEncryptedCredentials(jsonObject = data) },
        )
    }

    private fun deserializeMessagePassportDataSent(jsonObject: JsonObject): MessagePassportDataSent {
        return MessagePassportDataSent(
            types = jsonObject.getObjects(key = "types") { data -> deserializePassportElementType(jsonObject = data) },
        )
    }

    private fun deserializeMessagePaymentRefunded(jsonObject: JsonObject): MessagePaymentRefunded {
        return MessagePaymentRefunded(
            ownerId = jsonObject.getObject(key = "owner_id") { data -> deserializeMessageSender(jsonObject = data) },
            currency = jsonObject.getString(key = "currency"),
            totalAmount = jsonObject.getLong(key = "total_amount"),
            invoicePayload = jsonObject.getBytes(key = "invoice_payload"),
            telegramPaymentChargeId = jsonObject.getString(key = "telegram_payment_charge_id"),
            providerPaymentChargeId = jsonObject.getString(key = "provider_payment_charge_id"),
        )
    }

    private fun deserializeMessagePaymentSuccessful(jsonObject: JsonObject): MessagePaymentSuccessful {
        return MessagePaymentSuccessful(
            invoiceChatId = jsonObject.getLong(key = "invoice_chat_id"),
            invoiceMessageId = jsonObject.getLong(key = "invoice_message_id"),
            currency = jsonObject.getString(key = "currency"),
            totalAmount = jsonObject.getLong(key = "total_amount"),
            subscriptionUntilDate = jsonObject.getInt(key = "subscription_until_date"),
            isRecurring = jsonObject.getBoolean(key = "is_recurring"),
            isFirstRecurring = jsonObject.getBoolean(key = "is_first_recurring"),
            invoiceName = jsonObject.getString(key = "invoice_name"),
        )
    }

    private fun deserializeMessagePaymentSuccessfulBot(jsonObject: JsonObject): MessagePaymentSuccessfulBot {
        return MessagePaymentSuccessfulBot(
            currency = jsonObject.getString(key = "currency"),
            totalAmount = jsonObject.getLong(key = "total_amount"),
            subscriptionUntilDate = jsonObject.getInt(key = "subscription_until_date"),
            isRecurring = jsonObject.getBoolean(key = "is_recurring"),
            isFirstRecurring = jsonObject.getBoolean(key = "is_first_recurring"),
            invoicePayload = jsonObject.getBytes(key = "invoice_payload"),
            shippingOptionId = jsonObject.getString(key = "shipping_option_id"),
            orderInfo = jsonObject.getObjectNullable(key = "order_info") { data -> deserializeOrderInfo(jsonObject = data) },
            telegramPaymentChargeId = jsonObject.getString(key = "telegram_payment_charge_id"),
            providerPaymentChargeId = jsonObject.getString(key = "provider_payment_charge_id"),
        )
    }

    private fun deserializeMessagePhoto(jsonObject: JsonObject): MessagePhoto {
        return MessagePhoto(
            photo = jsonObject.getObject(key = "photo") { data -> deserializePhoto(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
            showCaptionAboveMedia = jsonObject.getBoolean(key = "show_caption_above_media"),
            hasSpoiler = jsonObject.getBoolean(key = "has_spoiler"),
            isSecret = jsonObject.getBoolean(key = "is_secret"),
        )
    }

    private fun deserializeMessagePinMessage(jsonObject: JsonObject): MessagePinMessage {
        return MessagePinMessage(
            messageId = jsonObject.getLong(key = "message_id"),
        )
    }

    private fun deserializeMessagePoll(jsonObject: JsonObject): MessagePoll {
        return MessagePoll(
            poll = jsonObject.getObject(key = "poll") { data -> deserializePoll(jsonObject = data) },
        )
    }

    private fun deserializeMessagePosition(jsonObject: JsonObject): MessagePosition {
        return MessagePosition(
            position = jsonObject.getInt(key = "position"),
            messageId = jsonObject.getLong(key = "message_id"),
            date = jsonObject.getInt(key = "date"),
        )
    }

    private fun deserializeMessagePositions(jsonObject: JsonObject): MessagePositions {
        return MessagePositions(
            totalCount = jsonObject.getInt(key = "total_count"),
            positions = jsonObject.getObjects(key = "positions") { data -> deserializeMessagePosition(jsonObject = data) },
        )
    }

    private fun deserializeMessagePremiumGiftCode(jsonObject: JsonObject): MessagePremiumGiftCode {
        return MessagePremiumGiftCode(
            creatorId = jsonObject.getObjectNullable(key = "creator_id") { data -> deserializeMessageSender(jsonObject = data) },
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            isFromGiveaway = jsonObject.getBoolean(key = "is_from_giveaway"),
            isUnclaimed = jsonObject.getBoolean(key = "is_unclaimed"),
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            cryptocurrency = jsonObject.getString(key = "cryptocurrency"),
            cryptocurrencyAmount = jsonObject.getLong(key = "cryptocurrency_amount"),
            monthCount = jsonObject.getInt(key = "month_count"),
            sticker = jsonObject.getObjectNullable(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
            code = jsonObject.getString(key = "code"),
        )
    }

    private fun deserializeMessageProperties(jsonObject: JsonObject): MessageProperties {
        return MessageProperties(
            canAddTasks = jsonObject.getBoolean(key = "can_add_tasks"),
            canBeCopied = jsonObject.getBoolean(key = "can_be_copied"),
            canBeCopiedToSecretChat = jsonObject.getBoolean(key = "can_be_copied_to_secret_chat"),
            canBeDeletedOnlyForSelf = jsonObject.getBoolean(key = "can_be_deleted_only_for_self"),
            canBeDeletedForAllUsers = jsonObject.getBoolean(key = "can_be_deleted_for_all_users"),
            canBeEdited = jsonObject.getBoolean(key = "can_be_edited"),
            canBeForwarded = jsonObject.getBoolean(key = "can_be_forwarded"),
            canBePaid = jsonObject.getBoolean(key = "can_be_paid"),
            canBePinned = jsonObject.getBoolean(key = "can_be_pinned"),
            canBeReplied = jsonObject.getBoolean(key = "can_be_replied"),
            canBeRepliedInAnotherChat = jsonObject.getBoolean(key = "can_be_replied_in_another_chat"),
            canBeSaved = jsonObject.getBoolean(key = "can_be_saved"),
            canBeSharedInStory = jsonObject.getBoolean(key = "can_be_shared_in_story"),
            canEditMedia = jsonObject.getBoolean(key = "can_edit_media"),
            canEditSchedulingState = jsonObject.getBoolean(key = "can_edit_scheduling_state"),
            canGetAuthor = jsonObject.getBoolean(key = "can_get_author"),
            canGetEmbeddingCode = jsonObject.getBoolean(key = "can_get_embedding_code"),
            canGetLink = jsonObject.getBoolean(key = "can_get_link"),
            canGetMediaTimestampLinks = jsonObject.getBoolean(key = "can_get_media_timestamp_links"),
            canGetMessageThread = jsonObject.getBoolean(key = "can_get_message_thread"),
            canGetReadDate = jsonObject.getBoolean(key = "can_get_read_date"),
            canGetStatistics = jsonObject.getBoolean(key = "can_get_statistics"),
            canGetVideoAdvertisements = jsonObject.getBoolean(key = "can_get_video_advertisements"),
            canGetViewers = jsonObject.getBoolean(key = "can_get_viewers"),
            canMarkTasksAsDone = jsonObject.getBoolean(key = "can_mark_tasks_as_done"),
            canRecognizeSpeech = jsonObject.getBoolean(key = "can_recognize_speech"),
            canReportChat = jsonObject.getBoolean(key = "can_report_chat"),
            canReportReactions = jsonObject.getBoolean(key = "can_report_reactions"),
            canReportSupergroupSpam = jsonObject.getBoolean(key = "can_report_supergroup_spam"),
            canSetFactCheck = jsonObject.getBoolean(key = "can_set_fact_check"),
            needShowStatistics = jsonObject.getBoolean(key = "need_show_statistics"),
        )
    }

    private fun deserializeMessageProximityAlertTriggered(jsonObject: JsonObject): MessageProximityAlertTriggered {
        return MessageProximityAlertTriggered(
            travelerId = jsonObject.getObject(key = "traveler_id") { data -> deserializeMessageSender(jsonObject = data) },
            watcherId = jsonObject.getObject(key = "watcher_id") { data -> deserializeMessageSender(jsonObject = data) },
            distance = jsonObject.getInt(key = "distance"),
        )
    }

    private fun deserializeMessageReaction(jsonObject: JsonObject): MessageReaction {
        return MessageReaction(
            type = jsonObject.getObject(key = "type") { data -> deserializeReactionType(jsonObject = data) },
            totalCount = jsonObject.getInt(key = "total_count"),
            isChosen = jsonObject.getBoolean(key = "is_chosen"),
            usedSenderId = jsonObject.getObjectNullable(key = "used_sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            recentSenderIds = jsonObject.getObjects(key = "recent_sender_ids") { data -> deserializeMessageSender(jsonObject = data) },
        )
    }

    private fun deserializeMessageReactions(jsonObject: JsonObject): MessageReactions {
        return MessageReactions(
            reactions = jsonObject.getObjects(key = "reactions") { data -> deserializeMessageReaction(jsonObject = data) },
            areTags = jsonObject.getBoolean(key = "are_tags"),
            paidReactors = jsonObject.getObjects(key = "paid_reactors") { data -> deserializePaidReactor(jsonObject = data) },
            canGetAddedReactions = jsonObject.getBoolean(key = "can_get_added_reactions"),
        )
    }

    private fun deserializeMessageReadDateMyPrivacyRestricted(jsonObject: JsonObject): MessageReadDateMyPrivacyRestricted {
        return MessageReadDateMyPrivacyRestricted()
    }

    private fun deserializeMessageReadDateRead(jsonObject: JsonObject): MessageReadDateRead {
        return MessageReadDateRead(
            readDate = jsonObject.getInt(key = "read_date"),
        )
    }

    private fun deserializeMessageReadDateTooOld(jsonObject: JsonObject): MessageReadDateTooOld {
        return MessageReadDateTooOld()
    }

    private fun deserializeMessageReadDateUnread(jsonObject: JsonObject): MessageReadDateUnread {
        return MessageReadDateUnread()
    }

    private fun deserializeMessageReadDateUserPrivacyRestricted(jsonObject: JsonObject): MessageReadDateUserPrivacyRestricted {
        return MessageReadDateUserPrivacyRestricted()
    }

    private fun deserializeMessageRefundedUpgradedGift(jsonObject: JsonObject): MessageRefundedUpgradedGift {
        return MessageRefundedUpgradedGift(
            gift = jsonObject.getObject(key = "gift") { data -> deserializeGift(jsonObject = data) },
            senderId = jsonObject.getObject(key = "sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            receiverId = jsonObject.getObject(key = "receiver_id") { data -> deserializeMessageSender(jsonObject = data) },
            isUpgrade = jsonObject.getBoolean(key = "is_upgrade"),
        )
    }

    private fun deserializeMessageReplyInfo(jsonObject: JsonObject): MessageReplyInfo {
        return MessageReplyInfo(
            replyCount = jsonObject.getInt(key = "reply_count"),
            recentReplierIds = jsonObject.getObjects(key = "recent_replier_ids") { data -> deserializeMessageSender(jsonObject = data) },
            lastReadInboxMessageId = jsonObject.getLong(key = "last_read_inbox_message_id"),
            lastReadOutboxMessageId = jsonObject.getLong(key = "last_read_outbox_message_id"),
            lastMessageId = jsonObject.getLong(key = "last_message_id"),
        )
    }

    private fun deserializeMessageReplyToMessage(jsonObject: JsonObject): MessageReplyToMessage {
        return MessageReplyToMessage(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            quote = jsonObject.getObjectNullable(key = "quote") { data -> deserializeTextQuote(jsonObject = data) },
            origin = jsonObject.getObjectNullable(key = "origin") { data -> deserializeMessageOrigin(jsonObject = data) },
            originSendDate = jsonObject.getInt(key = "origin_send_date"),
            content = jsonObject.getObjectNullable(key = "content") { data -> deserializeMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeMessageReplyToStory(jsonObject: JsonObject): MessageReplyToStory {
        return MessageReplyToStory(
            storyPosterChatId = jsonObject.getLong(key = "story_poster_chat_id"),
            storyId = jsonObject.getInt(key = "story_id"),
        )
    }

    private fun deserializeMessageSchedulingStateSendAtDate(jsonObject: JsonObject): MessageSchedulingStateSendAtDate {
        return MessageSchedulingStateSendAtDate(
            sendDate = jsonObject.getInt(key = "send_date"),
        )
    }

    private fun deserializeMessageSchedulingStateSendWhenOnline(jsonObject: JsonObject): MessageSchedulingStateSendWhenOnline {
        return MessageSchedulingStateSendWhenOnline()
    }

    private fun deserializeMessageSchedulingStateSendWhenVideoProcessed(jsonObject: JsonObject): MessageSchedulingStateSendWhenVideoProcessed {
        return MessageSchedulingStateSendWhenVideoProcessed(
            sendDate = jsonObject.getInt(key = "send_date"),
        )
    }

    private fun deserializeMessageScreenshotTaken(jsonObject: JsonObject): MessageScreenshotTaken {
        return MessageScreenshotTaken()
    }

    private fun deserializeMessageSelfDestructTypeImmediately(jsonObject: JsonObject): MessageSelfDestructTypeImmediately {
        return MessageSelfDestructTypeImmediately()
    }

    private fun deserializeMessageSelfDestructTypeTimer(jsonObject: JsonObject): MessageSelfDestructTypeTimer {
        return MessageSelfDestructTypeTimer(
            selfDestructTime = jsonObject.getInt(key = "self_destruct_time"),
        )
    }

    private fun deserializeMessageSendOptions(jsonObject: JsonObject): MessageSendOptions {
        return MessageSendOptions(
            directMessagesChatTopicId = jsonObject.getLong(key = "direct_messages_chat_topic_id"),
            disableNotification = jsonObject.getBoolean(key = "disable_notification"),
            fromBackground = jsonObject.getBoolean(key = "from_background"),
            protectContent = jsonObject.getBoolean(key = "protect_content"),
            allowPaidBroadcast = jsonObject.getBoolean(key = "allow_paid_broadcast"),
            paidMessageStarCount = jsonObject.getLong(key = "paid_message_star_count"),
            updateOrderOfInstalledStickerSets = jsonObject.getBoolean(key = "update_order_of_installed_sticker_sets"),
            schedulingState = jsonObject.getObjectNullable(key = "scheduling_state") { data -> deserializeMessageSchedulingState(jsonObject = data) },
            effectId = jsonObject.getLong(key = "effect_id"),
            sendingId = jsonObject.getInt(key = "sending_id"),
            onlyPreview = jsonObject.getBoolean(key = "only_preview"),
        )
    }

    private fun deserializeMessageSenderChat(jsonObject: JsonObject): MessageSenderChat {
        return MessageSenderChat(
            chatId = jsonObject.getLong(key = "chat_id"),
        )
    }

    private fun deserializeMessageSenderUser(jsonObject: JsonObject): MessageSenderUser {
        return MessageSenderUser(
            userId = jsonObject.getLong(key = "user_id"),
        )
    }

    private fun deserializeMessageSenders(jsonObject: JsonObject): MessageSenders {
        return MessageSenders(
            totalCount = jsonObject.getInt(key = "total_count"),
            senders = jsonObject.getObjects(key = "senders") { data -> deserializeMessageSender(jsonObject = data) },
        )
    }

    private fun deserializeMessageSendingStateFailed(jsonObject: JsonObject): MessageSendingStateFailed {
        return MessageSendingStateFailed(
            error = jsonObject.getObject(key = "error") { data -> deserializeError(jsonObject = data) },
            canRetry = jsonObject.getBoolean(key = "can_retry"),
            needAnotherSender = jsonObject.getBoolean(key = "need_another_sender"),
            needAnotherReplyQuote = jsonObject.getBoolean(key = "need_another_reply_quote"),
            needDropReply = jsonObject.getBoolean(key = "need_drop_reply"),
            requiredPaidMessageStarCount = jsonObject.getLong(key = "required_paid_message_star_count"),
            retryAfter = jsonObject.getDouble(key = "retry_after"),
        )
    }

    private fun deserializeMessageSendingStatePending(jsonObject: JsonObject): MessageSendingStatePending {
        return MessageSendingStatePending(
            sendingId = jsonObject.getInt(key = "sending_id"),
        )
    }

    private fun deserializeMessageSourceChatEventLog(jsonObject: JsonObject): MessageSourceChatEventLog {
        return MessageSourceChatEventLog()
    }

    private fun deserializeMessageSourceChatHistory(jsonObject: JsonObject): MessageSourceChatHistory {
        return MessageSourceChatHistory()
    }

    private fun deserializeMessageSourceChatList(jsonObject: JsonObject): MessageSourceChatList {
        return MessageSourceChatList()
    }

    private fun deserializeMessageSourceDirectMessagesChatTopicHistory(jsonObject: JsonObject): MessageSourceDirectMessagesChatTopicHistory {
        return MessageSourceDirectMessagesChatTopicHistory()
    }

    private fun deserializeMessageSourceForumTopicHistory(jsonObject: JsonObject): MessageSourceForumTopicHistory {
        return MessageSourceForumTopicHistory()
    }

    private fun deserializeMessageSourceHistoryPreview(jsonObject: JsonObject): MessageSourceHistoryPreview {
        return MessageSourceHistoryPreview()
    }

    private fun deserializeMessageSourceMessageThreadHistory(jsonObject: JsonObject): MessageSourceMessageThreadHistory {
        return MessageSourceMessageThreadHistory()
    }

    private fun deserializeMessageSourceNotification(jsonObject: JsonObject): MessageSourceNotification {
        return MessageSourceNotification()
    }

    private fun deserializeMessageSourceOther(jsonObject: JsonObject): MessageSourceOther {
        return MessageSourceOther()
    }

    private fun deserializeMessageSourceScreenshot(jsonObject: JsonObject): MessageSourceScreenshot {
        return MessageSourceScreenshot()
    }

    private fun deserializeMessageSourceSearch(jsonObject: JsonObject): MessageSourceSearch {
        return MessageSourceSearch()
    }

    private fun deserializeMessageStatistics(jsonObject: JsonObject): MessageStatistics {
        return MessageStatistics(
            messageInteractionGraph = jsonObject.getObject(key = "message_interaction_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            messageReactionGraph = jsonObject.getObject(key = "message_reaction_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
        )
    }

    private fun deserializeMessageSticker(jsonObject: JsonObject): MessageSticker {
        return MessageSticker(
            sticker = jsonObject.getObject(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
            isPremium = jsonObject.getBoolean(key = "is_premium"),
        )
    }

    private fun deserializeMessageStory(jsonObject: JsonObject): MessageStory {
        return MessageStory(
            storyPosterChatId = jsonObject.getLong(key = "story_poster_chat_id"),
            storyId = jsonObject.getInt(key = "story_id"),
            viaMention = jsonObject.getBoolean(key = "via_mention"),
        )
    }

    private fun deserializeMessageSuggestProfilePhoto(jsonObject: JsonObject): MessageSuggestProfilePhoto {
        return MessageSuggestProfilePhoto(
            photo = jsonObject.getObject(key = "photo") { data -> deserializeChatPhoto(jsonObject = data) },
        )
    }

    private fun deserializeMessageSupergroupChatCreate(jsonObject: JsonObject): MessageSupergroupChatCreate {
        return MessageSupergroupChatCreate(
            title = jsonObject.getString(key = "title"),
        )
    }

    private fun deserializeMessageText(jsonObject: JsonObject): MessageText {
        return MessageText(
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            linkPreview = jsonObject.getObjectNullable(key = "link_preview") { data -> deserializeLinkPreview(jsonObject = data) },
            linkPreviewOptions = jsonObject.getObjectNullable(key = "link_preview_options") { data -> deserializeLinkPreviewOptions(jsonObject = data) },
        )
    }

    private fun deserializeMessageThreadInfo(jsonObject: JsonObject): MessageThreadInfo {
        return MessageThreadInfo(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageThreadId = jsonObject.getLong(key = "message_thread_id"),
            replyInfo = jsonObject.getObjectNullable(key = "reply_info") { data -> deserializeMessageReplyInfo(jsonObject = data) },
            unreadMessageCount = jsonObject.getInt(key = "unread_message_count"),
            messages = jsonObject.getObjects(key = "messages") { data -> deserializeMessage(jsonObject = data) },
            draftMessage = jsonObject.getObjectNullable(key = "draft_message") { data -> deserializeDraftMessage(jsonObject = data) },
        )
    }

    private fun deserializeMessageTopicDirectMessages(jsonObject: JsonObject): MessageTopicDirectMessages {
        return MessageTopicDirectMessages(
            directMessagesChatTopicId = jsonObject.getLong(key = "direct_messages_chat_topic_id"),
        )
    }

    private fun deserializeMessageTopicForum(jsonObject: JsonObject): MessageTopicForum {
        return MessageTopicForum(
            forumTopicId = jsonObject.getLong(key = "forum_topic_id"),
        )
    }

    private fun deserializeMessageTopicSavedMessages(jsonObject: JsonObject): MessageTopicSavedMessages {
        return MessageTopicSavedMessages(
            savedMessagesTopicId = jsonObject.getLong(key = "saved_messages_topic_id"),
        )
    }

    private fun deserializeMessageUnsupported(jsonObject: JsonObject): MessageUnsupported {
        return MessageUnsupported()
    }

    private fun deserializeMessageUpgradedGift(jsonObject: JsonObject): MessageUpgradedGift {
        return MessageUpgradedGift(
            gift = jsonObject.getObject(key = "gift") { data -> deserializeUpgradedGift(jsonObject = data) },
            senderId = jsonObject.getObjectNullable(key = "sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            receiverId = jsonObject.getObject(key = "receiver_id") { data -> deserializeMessageSender(jsonObject = data) },
            receivedGiftId = jsonObject.getString(key = "received_gift_id"),
            isUpgrade = jsonObject.getBoolean(key = "is_upgrade"),
            isSaved = jsonObject.getBoolean(key = "is_saved"),
            canBeTransferred = jsonObject.getBoolean(key = "can_be_transferred"),
            wasTransferred = jsonObject.getBoolean(key = "was_transferred"),
            lastResaleStarCount = jsonObject.getLong(key = "last_resale_star_count"),
            transferStarCount = jsonObject.getLong(key = "transfer_star_count"),
            nextTransferDate = jsonObject.getInt(key = "next_transfer_date"),
            nextResaleDate = jsonObject.getInt(key = "next_resale_date"),
            exportDate = jsonObject.getInt(key = "export_date"),
        )
    }

    private fun deserializeMessageUsersShared(jsonObject: JsonObject): MessageUsersShared {
        return MessageUsersShared(
            users = jsonObject.getObjects(key = "users") { data -> deserializeSharedUser(jsonObject = data) },
            buttonId = jsonObject.getInt(key = "button_id"),
        )
    }

    private fun deserializeMessageVenue(jsonObject: JsonObject): MessageVenue {
        return MessageVenue(
            venue = jsonObject.getObject(key = "venue") { data -> deserializeVenue(jsonObject = data) },
        )
    }

    private fun deserializeMessageVideo(jsonObject: JsonObject): MessageVideo {
        return MessageVideo(
            video = jsonObject.getObject(key = "video") { data -> deserializeVideo(jsonObject = data) },
            alternativeVideos = jsonObject.getObjects(key = "alternative_videos") { data -> deserializeAlternativeVideo(jsonObject = data) },
            storyboards = jsonObject.getObjects(key = "storyboards") { data -> deserializeVideoStoryboard(jsonObject = data) },
            cover = jsonObject.getObjectNullable(key = "cover") { data -> deserializePhoto(jsonObject = data) },
            startTimestamp = jsonObject.getInt(key = "start_timestamp"),
            caption = jsonObject.getObject(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
            showCaptionAboveMedia = jsonObject.getBoolean(key = "show_caption_above_media"),
            hasSpoiler = jsonObject.getBoolean(key = "has_spoiler"),
            isSecret = jsonObject.getBoolean(key = "is_secret"),
        )
    }

    private fun deserializeMessageVideoChatEnded(jsonObject: JsonObject): MessageVideoChatEnded {
        return MessageVideoChatEnded(
            duration = jsonObject.getInt(key = "duration"),
        )
    }

    private fun deserializeMessageVideoChatScheduled(jsonObject: JsonObject): MessageVideoChatScheduled {
        return MessageVideoChatScheduled(
            groupCallId = jsonObject.getInt(key = "group_call_id"),
            startDate = jsonObject.getInt(key = "start_date"),
        )
    }

    private fun deserializeMessageVideoChatStarted(jsonObject: JsonObject): MessageVideoChatStarted {
        return MessageVideoChatStarted(
            groupCallId = jsonObject.getInt(key = "group_call_id"),
        )
    }

    private fun deserializeMessageVideoNote(jsonObject: JsonObject): MessageVideoNote {
        return MessageVideoNote(
            videoNote = jsonObject.getObject(key = "video_note") { data -> deserializeVideoNote(jsonObject = data) },
            isViewed = jsonObject.getBoolean(key = "is_viewed"),
            isSecret = jsonObject.getBoolean(key = "is_secret"),
        )
    }

    private fun deserializeMessageViewer(jsonObject: JsonObject): MessageViewer {
        return MessageViewer(
            userId = jsonObject.getLong(key = "user_id"),
            viewDate = jsonObject.getInt(key = "view_date"),
        )
    }

    private fun deserializeMessageViewers(jsonObject: JsonObject): MessageViewers {
        return MessageViewers(
            viewers = jsonObject.getObjects(key = "viewers") { data -> deserializeMessageViewer(jsonObject = data) },
        )
    }

    private fun deserializeMessageVoiceNote(jsonObject: JsonObject): MessageVoiceNote {
        return MessageVoiceNote(
            voiceNote = jsonObject.getObject(key = "voice_note") { data -> deserializeVoiceNote(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
            isListened = jsonObject.getBoolean(key = "is_listened"),
        )
    }

    private fun deserializeMessageWebAppDataReceived(jsonObject: JsonObject): MessageWebAppDataReceived {
        return MessageWebAppDataReceived(
            buttonText = jsonObject.getString(key = "button_text"),
            data = jsonObject.getString(key = "data"),
        )
    }

    private fun deserializeMessageWebAppDataSent(jsonObject: JsonObject): MessageWebAppDataSent {
        return MessageWebAppDataSent(
            buttonText = jsonObject.getString(key = "button_text"),
        )
    }

    private fun deserializeMessages(jsonObject: JsonObject): Messages {
        return Messages(
            totalCount = jsonObject.getInt(key = "total_count"),
            messages = jsonObject.getObjects(key = "messages") { data -> deserializeMessage(jsonObject = data) },
        )
    }

    private fun deserializeMinithumbnail(jsonObject: JsonObject): Minithumbnail {
        return Minithumbnail(
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            data = jsonObject.getBytes(key = "data"),
        )
    }

    private fun deserializeNetworkStatistics(jsonObject: JsonObject): NetworkStatistics {
        return NetworkStatistics(
            sinceDate = jsonObject.getInt(key = "since_date"),
            entries = jsonObject.getObjects(key = "entries") { data -> deserializeNetworkStatisticsEntry(jsonObject = data) },
        )
    }

    private fun deserializeNetworkStatisticsEntryCall(jsonObject: JsonObject): NetworkStatisticsEntryCall {
        return NetworkStatisticsEntryCall(
            networkType = jsonObject.getObject(key = "network_type") { data -> deserializeNetworkType(jsonObject = data) },
            sentBytes = jsonObject.getLong(key = "sent_bytes"),
            receivedBytes = jsonObject.getLong(key = "received_bytes"),
            duration = jsonObject.getDouble(key = "duration"),
        )
    }

    private fun deserializeNetworkStatisticsEntryFile(jsonObject: JsonObject): NetworkStatisticsEntryFile {
        return NetworkStatisticsEntryFile(
            fileType = jsonObject.getObjectNullable(key = "file_type") { data -> deserializeFileType(jsonObject = data) },
            networkType = jsonObject.getObject(key = "network_type") { data -> deserializeNetworkType(jsonObject = data) },
            sentBytes = jsonObject.getLong(key = "sent_bytes"),
            receivedBytes = jsonObject.getLong(key = "received_bytes"),
        )
    }

    private fun deserializeNetworkTypeMobile(jsonObject: JsonObject): NetworkTypeMobile {
        return NetworkTypeMobile()
    }

    private fun deserializeNetworkTypeMobileRoaming(jsonObject: JsonObject): NetworkTypeMobileRoaming {
        return NetworkTypeMobileRoaming()
    }

    private fun deserializeNetworkTypeNone(jsonObject: JsonObject): NetworkTypeNone {
        return NetworkTypeNone()
    }

    private fun deserializeNetworkTypeOther(jsonObject: JsonObject): NetworkTypeOther {
        return NetworkTypeOther()
    }

    private fun deserializeNetworkTypeWiFi(jsonObject: JsonObject): NetworkTypeWiFi {
        return NetworkTypeWiFi()
    }

    private fun deserializeNewChatPrivacySettings(jsonObject: JsonObject): NewChatPrivacySettings {
        return NewChatPrivacySettings(
            allowNewChatsFromUnknownUsers = jsonObject.getBoolean(key = "allow_new_chats_from_unknown_users"),
            incomingPaidMessageStarCount = jsonObject.getLong(key = "incoming_paid_message_star_count"),
        )
    }

    private fun deserializeNotification(jsonObject: JsonObject): Notification {
        return Notification(
            id = jsonObject.getInt(key = "id"),
            date = jsonObject.getInt(key = "date"),
            isSilent = jsonObject.getBoolean(key = "is_silent"),
            type = jsonObject.getObject(key = "type") { data -> deserializeNotificationType(jsonObject = data) },
        )
    }

    private fun deserializeNotificationGroup(jsonObject: JsonObject): NotificationGroup {
        return NotificationGroup(
            id = jsonObject.getInt(key = "id"),
            type = jsonObject.getObject(key = "type") { data -> deserializeNotificationGroupType(jsonObject = data) },
            chatId = jsonObject.getLong(key = "chat_id"),
            totalCount = jsonObject.getInt(key = "total_count"),
            notifications = jsonObject.getObjects(key = "notifications") { data -> deserializeNotification(jsonObject = data) },
        )
    }

    private fun deserializeNotificationGroupTypeCalls(jsonObject: JsonObject): NotificationGroupTypeCalls {
        return NotificationGroupTypeCalls()
    }

    private fun deserializeNotificationGroupTypeMentions(jsonObject: JsonObject): NotificationGroupTypeMentions {
        return NotificationGroupTypeMentions()
    }

    private fun deserializeNotificationGroupTypeMessages(jsonObject: JsonObject): NotificationGroupTypeMessages {
        return NotificationGroupTypeMessages()
    }

    private fun deserializeNotificationGroupTypeSecretChat(jsonObject: JsonObject): NotificationGroupTypeSecretChat {
        return NotificationGroupTypeSecretChat()
    }

    private fun deserializeNotificationSettingsScopeChannelChats(jsonObject: JsonObject): NotificationSettingsScopeChannelChats {
        return NotificationSettingsScopeChannelChats()
    }

    private fun deserializeNotificationSettingsScopeGroupChats(jsonObject: JsonObject): NotificationSettingsScopeGroupChats {
        return NotificationSettingsScopeGroupChats()
    }

    private fun deserializeNotificationSettingsScopePrivateChats(jsonObject: JsonObject): NotificationSettingsScopePrivateChats {
        return NotificationSettingsScopePrivateChats()
    }

    private fun deserializeNotificationSound(jsonObject: JsonObject): NotificationSound {
        return NotificationSound(
            id = jsonObject.getLong(key = "id"),
            duration = jsonObject.getInt(key = "duration"),
            date = jsonObject.getInt(key = "date"),
            title = jsonObject.getString(key = "title"),
            data = jsonObject.getString(key = "data"),
            sound = jsonObject.getObject(key = "sound") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeNotificationSounds(jsonObject: JsonObject): NotificationSounds {
        return NotificationSounds(
            notificationSounds = jsonObject.getObjects(key = "notification_sounds") { data -> deserializeNotificationSound(jsonObject = data) },
        )
    }

    private fun deserializeNotificationTypeNewCall(jsonObject: JsonObject): NotificationTypeNewCall {
        return NotificationTypeNewCall(
            callId = jsonObject.getInt(key = "call_id"),
        )
    }

    private fun deserializeNotificationTypeNewMessage(jsonObject: JsonObject): NotificationTypeNewMessage {
        return NotificationTypeNewMessage(
            message = jsonObject.getObject(key = "message") { data -> deserializeMessage(jsonObject = data) },
            showPreview = jsonObject.getBoolean(key = "show_preview"),
        )
    }

    private fun deserializeNotificationTypeNewPushMessage(jsonObject: JsonObject): NotificationTypeNewPushMessage {
        return NotificationTypeNewPushMessage(
            messageId = jsonObject.getLong(key = "message_id"),
            senderId = jsonObject.getObject(key = "sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            senderName = jsonObject.getString(key = "sender_name"),
            isOutgoing = jsonObject.getBoolean(key = "is_outgoing"),
            content = jsonObject.getObject(key = "content") { data -> deserializePushMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeNotificationTypeNewSecretChat(jsonObject: JsonObject): NotificationTypeNewSecretChat {
        return NotificationTypeNewSecretChat()
    }

    private fun deserializeOk(jsonObject: JsonObject): Ok {
        return Ok()
    }

    private fun deserializeOptionValueBoolean(jsonObject: JsonObject): OptionValueBoolean {
        return OptionValueBoolean(
            value = jsonObject.getBoolean(key = "value"),
        )
    }

    private fun deserializeOptionValueEmpty(jsonObject: JsonObject): OptionValueEmpty {
        return OptionValueEmpty()
    }

    private fun deserializeOptionValueInteger(jsonObject: JsonObject): OptionValueInteger {
        return OptionValueInteger(
            value = jsonObject.getLong(key = "value"),
        )
    }

    private fun deserializeOptionValueString(jsonObject: JsonObject): OptionValueString {
        return OptionValueString(
            value = jsonObject.getString(key = "value"),
        )
    }

    private fun deserializeOrderInfo(jsonObject: JsonObject): OrderInfo {
        return OrderInfo(
            name = jsonObject.getString(key = "name"),
            phoneNumber = jsonObject.getString(key = "phone_number"),
            emailAddress = jsonObject.getString(key = "email_address"),
            shippingAddress = jsonObject.getObjectNullable(key = "shipping_address") { data -> deserializeAddress(jsonObject = data) },
        )
    }

    private fun deserializeOutline(jsonObject: JsonObject): Outline {
        return Outline(
            paths = jsonObject.getObjects(key = "paths") { data -> deserializeClosedVectorPath(jsonObject = data) },
        )
    }

    private fun deserializePageBlockAnchor(jsonObject: JsonObject): PageBlockAnchor {
        return PageBlockAnchor(
            name = jsonObject.getString(key = "name"),
        )
    }

    private fun deserializePageBlockAnimation(jsonObject: JsonObject): PageBlockAnimation {
        return PageBlockAnimation(
            animation = jsonObject.getObjectNullable(key = "animation") { data -> deserializeAnimation(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializePageBlockCaption(jsonObject = data) },
            needAutoplay = jsonObject.getBoolean(key = "need_autoplay"),
        )
    }

    private fun deserializePageBlockAudio(jsonObject: JsonObject): PageBlockAudio {
        return PageBlockAudio(
            audio = jsonObject.getObjectNullable(key = "audio") { data -> deserializeAudio(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializePageBlockCaption(jsonObject = data) },
        )
    }

    private fun deserializePageBlockAuthorDate(jsonObject: JsonObject): PageBlockAuthorDate {
        return PageBlockAuthorDate(
            author = jsonObject.getObject(key = "author") { data -> deserializeRichText(jsonObject = data) },
            publishDate = jsonObject.getInt(key = "publish_date"),
        )
    }

    private fun deserializePageBlockBlockQuote(jsonObject: JsonObject): PageBlockBlockQuote {
        return PageBlockBlockQuote(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
            credit = jsonObject.getObject(key = "credit") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializePageBlockCaption(jsonObject: JsonObject): PageBlockCaption {
        return PageBlockCaption(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
            credit = jsonObject.getObject(key = "credit") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializePageBlockChatLink(jsonObject: JsonObject): PageBlockChatLink {
        return PageBlockChatLink(
            title = jsonObject.getString(key = "title"),
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializeChatPhotoInfo(jsonObject = data) },
            accentColorId = jsonObject.getInt(key = "accent_color_id"),
            username = jsonObject.getString(key = "username"),
        )
    }

    private fun deserializePageBlockCollage(jsonObject: JsonObject): PageBlockCollage {
        return PageBlockCollage(
            pageBlocks = jsonObject.getObjects(key = "page_blocks") { data -> deserializePageBlock(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializePageBlockCaption(jsonObject = data) },
        )
    }

    private fun deserializePageBlockCover(jsonObject: JsonObject): PageBlockCover {
        return PageBlockCover(
            cover = jsonObject.getObject(key = "cover") { data -> deserializePageBlock(jsonObject = data) },
        )
    }

    private fun deserializePageBlockDetails(jsonObject: JsonObject): PageBlockDetails {
        return PageBlockDetails(
            header = jsonObject.getObject(key = "header") { data -> deserializeRichText(jsonObject = data) },
            pageBlocks = jsonObject.getObjects(key = "page_blocks") { data -> deserializePageBlock(jsonObject = data) },
            isOpen = jsonObject.getBoolean(key = "is_open"),
        )
    }

    private fun deserializePageBlockDivider(jsonObject: JsonObject): PageBlockDivider {
        return PageBlockDivider()
    }

    private fun deserializePageBlockEmbedded(jsonObject: JsonObject): PageBlockEmbedded {
        return PageBlockEmbedded(
            url = jsonObject.getString(key = "url"),
            html = jsonObject.getString(key = "html"),
            posterPhoto = jsonObject.getObjectNullable(key = "poster_photo") { data -> deserializePhoto(jsonObject = data) },
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            caption = jsonObject.getObject(key = "caption") { data -> deserializePageBlockCaption(jsonObject = data) },
            isFullWidth = jsonObject.getBoolean(key = "is_full_width"),
            allowScrolling = jsonObject.getBoolean(key = "allow_scrolling"),
        )
    }

    private fun deserializePageBlockEmbeddedPost(jsonObject: JsonObject): PageBlockEmbeddedPost {
        return PageBlockEmbeddedPost(
            url = jsonObject.getString(key = "url"),
            author = jsonObject.getString(key = "author"),
            authorPhoto = jsonObject.getObjectNullable(key = "author_photo") { data -> deserializePhoto(jsonObject = data) },
            date = jsonObject.getInt(key = "date"),
            pageBlocks = jsonObject.getObjects(key = "page_blocks") { data -> deserializePageBlock(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializePageBlockCaption(jsonObject = data) },
        )
    }

    private fun deserializePageBlockFooter(jsonObject: JsonObject): PageBlockFooter {
        return PageBlockFooter(
            footer = jsonObject.getObject(key = "footer") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializePageBlockHeader(jsonObject: JsonObject): PageBlockHeader {
        return PageBlockHeader(
            header = jsonObject.getObject(key = "header") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializePageBlockHorizontalAlignmentCenter(jsonObject: JsonObject): PageBlockHorizontalAlignmentCenter {
        return PageBlockHorizontalAlignmentCenter()
    }

    private fun deserializePageBlockHorizontalAlignmentLeft(jsonObject: JsonObject): PageBlockHorizontalAlignmentLeft {
        return PageBlockHorizontalAlignmentLeft()
    }

    private fun deserializePageBlockHorizontalAlignmentRight(jsonObject: JsonObject): PageBlockHorizontalAlignmentRight {
        return PageBlockHorizontalAlignmentRight()
    }

    private fun deserializePageBlockKicker(jsonObject: JsonObject): PageBlockKicker {
        return PageBlockKicker(
            kicker = jsonObject.getObject(key = "kicker") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializePageBlockList(jsonObject: JsonObject): PageBlockList {
        return PageBlockList(
            items = jsonObject.getObjects(key = "items") { data -> deserializePageBlockListItem(jsonObject = data) },
        )
    }

    private fun deserializePageBlockListItem(jsonObject: JsonObject): PageBlockListItem {
        return PageBlockListItem(
            label = jsonObject.getString(key = "label"),
            pageBlocks = jsonObject.getObjects(key = "page_blocks") { data -> deserializePageBlock(jsonObject = data) },
        )
    }

    private fun deserializePageBlockMap(jsonObject: JsonObject): PageBlockMap {
        return PageBlockMap(
            location = jsonObject.getObject(key = "location") { data -> deserializeLocation(jsonObject = data) },
            zoom = jsonObject.getInt(key = "zoom"),
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            caption = jsonObject.getObject(key = "caption") { data -> deserializePageBlockCaption(jsonObject = data) },
        )
    }

    private fun deserializePageBlockParagraph(jsonObject: JsonObject): PageBlockParagraph {
        return PageBlockParagraph(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializePageBlockPhoto(jsonObject: JsonObject): PageBlockPhoto {
        return PageBlockPhoto(
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializePhoto(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializePageBlockCaption(jsonObject = data) },
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializePageBlockPreformatted(jsonObject: JsonObject): PageBlockPreformatted {
        return PageBlockPreformatted(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
            language = jsonObject.getString(key = "language"),
        )
    }

    private fun deserializePageBlockPullQuote(jsonObject: JsonObject): PageBlockPullQuote {
        return PageBlockPullQuote(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
            credit = jsonObject.getObject(key = "credit") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializePageBlockRelatedArticle(jsonObject: JsonObject): PageBlockRelatedArticle {
        return PageBlockRelatedArticle(
            url = jsonObject.getString(key = "url"),
            title = jsonObject.getString(key = "title"),
            description = jsonObject.getString(key = "description"),
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializePhoto(jsonObject = data) },
            author = jsonObject.getString(key = "author"),
            publishDate = jsonObject.getInt(key = "publish_date"),
        )
    }

    private fun deserializePageBlockRelatedArticles(jsonObject: JsonObject): PageBlockRelatedArticles {
        return PageBlockRelatedArticles(
            header = jsonObject.getObject(key = "header") { data -> deserializeRichText(jsonObject = data) },
            articles = jsonObject.getObjects(key = "articles") { data -> deserializePageBlockRelatedArticle(jsonObject = data) },
        )
    }

    private fun deserializePageBlockSlideshow(jsonObject: JsonObject): PageBlockSlideshow {
        return PageBlockSlideshow(
            pageBlocks = jsonObject.getObjects(key = "page_blocks") { data -> deserializePageBlock(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializePageBlockCaption(jsonObject = data) },
        )
    }

    private fun deserializePageBlockSubheader(jsonObject: JsonObject): PageBlockSubheader {
        return PageBlockSubheader(
            subheader = jsonObject.getObject(key = "subheader") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializePageBlockSubtitle(jsonObject: JsonObject): PageBlockSubtitle {
        return PageBlockSubtitle(
            subtitle = jsonObject.getObject(key = "subtitle") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializePageBlockTable(jsonObject: JsonObject): PageBlockTable {
        return PageBlockTable(
            caption = jsonObject.getObject(key = "caption") { data -> deserializeRichText(jsonObject = data) },
            cells = jsonObject.getObjectsArray(key = "cells") { data -> deserializePageBlockTableCell(jsonObject = data) },
            isBordered = jsonObject.getBoolean(key = "is_bordered"),
            isStriped = jsonObject.getBoolean(key = "is_striped"),
        )
    }

    private fun deserializePageBlockTableCell(jsonObject: JsonObject): PageBlockTableCell {
        return PageBlockTableCell(
            text = jsonObject.getObjectNullable(key = "text") { data -> deserializeRichText(jsonObject = data) },
            isHeader = jsonObject.getBoolean(key = "is_header"),
            colspan = jsonObject.getInt(key = "colspan"),
            rowspan = jsonObject.getInt(key = "rowspan"),
            align = jsonObject.getObject(key = "align") { data -> deserializePageBlockHorizontalAlignment(jsonObject = data) },
            valign = jsonObject.getObject(key = "valign") { data -> deserializePageBlockVerticalAlignment(jsonObject = data) },
        )
    }

    private fun deserializePageBlockTitle(jsonObject: JsonObject): PageBlockTitle {
        return PageBlockTitle(
            title = jsonObject.getObject(key = "title") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializePageBlockVerticalAlignmentBottom(jsonObject: JsonObject): PageBlockVerticalAlignmentBottom {
        return PageBlockVerticalAlignmentBottom()
    }

    private fun deserializePageBlockVerticalAlignmentMiddle(jsonObject: JsonObject): PageBlockVerticalAlignmentMiddle {
        return PageBlockVerticalAlignmentMiddle()
    }

    private fun deserializePageBlockVerticalAlignmentTop(jsonObject: JsonObject): PageBlockVerticalAlignmentTop {
        return PageBlockVerticalAlignmentTop()
    }

    private fun deserializePageBlockVideo(jsonObject: JsonObject): PageBlockVideo {
        return PageBlockVideo(
            video = jsonObject.getObjectNullable(key = "video") { data -> deserializeVideo(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializePageBlockCaption(jsonObject = data) },
            needAutoplay = jsonObject.getBoolean(key = "need_autoplay"),
            isLooped = jsonObject.getBoolean(key = "is_looped"),
        )
    }

    private fun deserializePageBlockVoiceNote(jsonObject: JsonObject): PageBlockVoiceNote {
        return PageBlockVoiceNote(
            voiceNote = jsonObject.getObjectNullable(key = "voice_note") { data -> deserializeVoiceNote(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializePageBlockCaption(jsonObject = data) },
        )
    }

    private fun deserializePaidMediaPhoto(jsonObject: JsonObject): PaidMediaPhoto {
        return PaidMediaPhoto(
            photo = jsonObject.getObject(key = "photo") { data -> deserializePhoto(jsonObject = data) },
        )
    }

    private fun deserializePaidMediaPreview(jsonObject: JsonObject): PaidMediaPreview {
        return PaidMediaPreview(
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            duration = jsonObject.getInt(key = "duration"),
            minithumbnail = jsonObject.getObjectNullable(key = "minithumbnail") { data -> deserializeMinithumbnail(jsonObject = data) },
        )
    }

    private fun deserializePaidMediaUnsupported(jsonObject: JsonObject): PaidMediaUnsupported {
        return PaidMediaUnsupported()
    }

    private fun deserializePaidMediaVideo(jsonObject: JsonObject): PaidMediaVideo {
        return PaidMediaVideo(
            video = jsonObject.getObject(key = "video") { data -> deserializeVideo(jsonObject = data) },
            cover = jsonObject.getObjectNullable(key = "cover") { data -> deserializePhoto(jsonObject = data) },
            startTimestamp = jsonObject.getInt(key = "start_timestamp"),
        )
    }

    private fun deserializePaidReactionTypeAnonymous(jsonObject: JsonObject): PaidReactionTypeAnonymous {
        return PaidReactionTypeAnonymous()
    }

    private fun deserializePaidReactionTypeChat(jsonObject: JsonObject): PaidReactionTypeChat {
        return PaidReactionTypeChat(
            chatId = jsonObject.getLong(key = "chat_id"),
        )
    }

    private fun deserializePaidReactionTypeRegular(jsonObject: JsonObject): PaidReactionTypeRegular {
        return PaidReactionTypeRegular()
    }

    private fun deserializePaidReactor(jsonObject: JsonObject): PaidReactor {
        return PaidReactor(
            senderId = jsonObject.getObjectNullable(key = "sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            starCount = jsonObject.getInt(key = "star_count"),
            isTop = jsonObject.getBoolean(key = "is_top"),
            isMe = jsonObject.getBoolean(key = "is_me"),
            isAnonymous = jsonObject.getBoolean(key = "is_anonymous"),
        )
    }

    private fun deserializePassportAuthorizationForm(jsonObject: JsonObject): PassportAuthorizationForm {
        return PassportAuthorizationForm(
            id = jsonObject.getInt(key = "id"),
            requiredElements = jsonObject.getObjects(key = "required_elements") { data -> deserializePassportRequiredElement(jsonObject = data) },
            privacyPolicyUrl = jsonObject.getString(key = "privacy_policy_url"),
        )
    }

    private fun deserializePassportElementAddress(jsonObject: JsonObject): PassportElementAddress {
        return PassportElementAddress(
            address = jsonObject.getObject(key = "address") { data -> deserializeAddress(jsonObject = data) },
        )
    }

    private fun deserializePassportElementBankStatement(jsonObject: JsonObject): PassportElementBankStatement {
        return PassportElementBankStatement(
            bankStatement = jsonObject.getObject(key = "bank_statement") { data -> deserializePersonalDocument(jsonObject = data) },
        )
    }

    private fun deserializePassportElementDriverLicense(jsonObject: JsonObject): PassportElementDriverLicense {
        return PassportElementDriverLicense(
            driverLicense = jsonObject.getObject(key = "driver_license") { data -> deserializeIdentityDocument(jsonObject = data) },
        )
    }

    private fun deserializePassportElementEmailAddress(jsonObject: JsonObject): PassportElementEmailAddress {
        return PassportElementEmailAddress(
            emailAddress = jsonObject.getString(key = "email_address"),
        )
    }

    private fun deserializePassportElementError(jsonObject: JsonObject): PassportElementError {
        return PassportElementError(
            type = jsonObject.getObject(key = "type") { data -> deserializePassportElementType(jsonObject = data) },
            message = jsonObject.getString(key = "message"),
            source = jsonObject.getObject(key = "source") { data -> deserializePassportElementErrorSource(jsonObject = data) },
        )
    }

    private fun deserializePassportElementErrorSourceDataField(jsonObject: JsonObject): PassportElementErrorSourceDataField {
        return PassportElementErrorSourceDataField(
            fieldName = jsonObject.getString(key = "field_name"),
        )
    }

    private fun deserializePassportElementErrorSourceFile(jsonObject: JsonObject): PassportElementErrorSourceFile {
        return PassportElementErrorSourceFile(
            fileIndex = jsonObject.getInt(key = "file_index"),
        )
    }

    private fun deserializePassportElementErrorSourceFiles(jsonObject: JsonObject): PassportElementErrorSourceFiles {
        return PassportElementErrorSourceFiles()
    }

    private fun deserializePassportElementErrorSourceFrontSide(jsonObject: JsonObject): PassportElementErrorSourceFrontSide {
        return PassportElementErrorSourceFrontSide()
    }

    private fun deserializePassportElementErrorSourceReverseSide(jsonObject: JsonObject): PassportElementErrorSourceReverseSide {
        return PassportElementErrorSourceReverseSide()
    }

    private fun deserializePassportElementErrorSourceSelfie(jsonObject: JsonObject): PassportElementErrorSourceSelfie {
        return PassportElementErrorSourceSelfie()
    }

    private fun deserializePassportElementErrorSourceTranslationFile(jsonObject: JsonObject): PassportElementErrorSourceTranslationFile {
        return PassportElementErrorSourceTranslationFile(
            fileIndex = jsonObject.getInt(key = "file_index"),
        )
    }

    private fun deserializePassportElementErrorSourceTranslationFiles(jsonObject: JsonObject): PassportElementErrorSourceTranslationFiles {
        return PassportElementErrorSourceTranslationFiles()
    }

    private fun deserializePassportElementErrorSourceUnspecified(jsonObject: JsonObject): PassportElementErrorSourceUnspecified {
        return PassportElementErrorSourceUnspecified()
    }

    private fun deserializePassportElementIdentityCard(jsonObject: JsonObject): PassportElementIdentityCard {
        return PassportElementIdentityCard(
            identityCard = jsonObject.getObject(key = "identity_card") { data -> deserializeIdentityDocument(jsonObject = data) },
        )
    }

    private fun deserializePassportElementInternalPassport(jsonObject: JsonObject): PassportElementInternalPassport {
        return PassportElementInternalPassport(
            internalPassport = jsonObject.getObject(key = "internal_passport") { data -> deserializeIdentityDocument(jsonObject = data) },
        )
    }

    private fun deserializePassportElementPassport(jsonObject: JsonObject): PassportElementPassport {
        return PassportElementPassport(
            passport = jsonObject.getObject(key = "passport") { data -> deserializeIdentityDocument(jsonObject = data) },
        )
    }

    private fun deserializePassportElementPassportRegistration(jsonObject: JsonObject): PassportElementPassportRegistration {
        return PassportElementPassportRegistration(
            passportRegistration = jsonObject.getObject(key = "passport_registration") { data -> deserializePersonalDocument(jsonObject = data) },
        )
    }

    private fun deserializePassportElementPersonalDetails(jsonObject: JsonObject): PassportElementPersonalDetails {
        return PassportElementPersonalDetails(
            personalDetails = jsonObject.getObject(key = "personal_details") { data -> deserializePersonalDetails(jsonObject = data) },
        )
    }

    private fun deserializePassportElementPhoneNumber(jsonObject: JsonObject): PassportElementPhoneNumber {
        return PassportElementPhoneNumber(
            phoneNumber = jsonObject.getString(key = "phone_number"),
        )
    }

    private fun deserializePassportElementRentalAgreement(jsonObject: JsonObject): PassportElementRentalAgreement {
        return PassportElementRentalAgreement(
            rentalAgreement = jsonObject.getObject(key = "rental_agreement") { data -> deserializePersonalDocument(jsonObject = data) },
        )
    }

    private fun deserializePassportElementTemporaryRegistration(jsonObject: JsonObject): PassportElementTemporaryRegistration {
        return PassportElementTemporaryRegistration(
            temporaryRegistration = jsonObject.getObject(key = "temporary_registration") { data -> deserializePersonalDocument(jsonObject = data) },
        )
    }

    private fun deserializePassportElementTypeAddress(jsonObject: JsonObject): PassportElementTypeAddress {
        return PassportElementTypeAddress()
    }

    private fun deserializePassportElementTypeBankStatement(jsonObject: JsonObject): PassportElementTypeBankStatement {
        return PassportElementTypeBankStatement()
    }

    private fun deserializePassportElementTypeDriverLicense(jsonObject: JsonObject): PassportElementTypeDriverLicense {
        return PassportElementTypeDriverLicense()
    }

    private fun deserializePassportElementTypeEmailAddress(jsonObject: JsonObject): PassportElementTypeEmailAddress {
        return PassportElementTypeEmailAddress()
    }

    private fun deserializePassportElementTypeIdentityCard(jsonObject: JsonObject): PassportElementTypeIdentityCard {
        return PassportElementTypeIdentityCard()
    }

    private fun deserializePassportElementTypeInternalPassport(jsonObject: JsonObject): PassportElementTypeInternalPassport {
        return PassportElementTypeInternalPassport()
    }

    private fun deserializePassportElementTypePassport(jsonObject: JsonObject): PassportElementTypePassport {
        return PassportElementTypePassport()
    }

    private fun deserializePassportElementTypePassportRegistration(jsonObject: JsonObject): PassportElementTypePassportRegistration {
        return PassportElementTypePassportRegistration()
    }

    private fun deserializePassportElementTypePersonalDetails(jsonObject: JsonObject): PassportElementTypePersonalDetails {
        return PassportElementTypePersonalDetails()
    }

    private fun deserializePassportElementTypePhoneNumber(jsonObject: JsonObject): PassportElementTypePhoneNumber {
        return PassportElementTypePhoneNumber()
    }

    private fun deserializePassportElementTypeRentalAgreement(jsonObject: JsonObject): PassportElementTypeRentalAgreement {
        return PassportElementTypeRentalAgreement()
    }

    private fun deserializePassportElementTypeTemporaryRegistration(jsonObject: JsonObject): PassportElementTypeTemporaryRegistration {
        return PassportElementTypeTemporaryRegistration()
    }

    private fun deserializePassportElementTypeUtilityBill(jsonObject: JsonObject): PassportElementTypeUtilityBill {
        return PassportElementTypeUtilityBill()
    }

    private fun deserializePassportElementUtilityBill(jsonObject: JsonObject): PassportElementUtilityBill {
        return PassportElementUtilityBill(
            utilityBill = jsonObject.getObject(key = "utility_bill") { data -> deserializePersonalDocument(jsonObject = data) },
        )
    }

    private fun deserializePassportElements(jsonObject: JsonObject): PassportElements {
        return PassportElements(
            elements = jsonObject.getObjects(key = "elements") { data -> deserializePassportElement(jsonObject = data) },
        )
    }

    private fun deserializePassportElementsWithErrors(jsonObject: JsonObject): PassportElementsWithErrors {
        return PassportElementsWithErrors(
            elements = jsonObject.getObjects(key = "elements") { data -> deserializePassportElement(jsonObject = data) },
            errors = jsonObject.getObjects(key = "errors") { data -> deserializePassportElementError(jsonObject = data) },
        )
    }

    private fun deserializePassportRequiredElement(jsonObject: JsonObject): PassportRequiredElement {
        return PassportRequiredElement(
            suitableElements = jsonObject.getObjects(key = "suitable_elements") { data -> deserializePassportSuitableElement(jsonObject = data) },
        )
    }

    private fun deserializePassportSuitableElement(jsonObject: JsonObject): PassportSuitableElement {
        return PassportSuitableElement(
            type = jsonObject.getObject(key = "type") { data -> deserializePassportElementType(jsonObject = data) },
            isSelfieRequired = jsonObject.getBoolean(key = "is_selfie_required"),
            isTranslationRequired = jsonObject.getBoolean(key = "is_translation_required"),
            isNativeNameRequired = jsonObject.getBoolean(key = "is_native_name_required"),
        )
    }

    private fun deserializePasswordState(jsonObject: JsonObject): PasswordState {
        return PasswordState(
            hasPassword = jsonObject.getBoolean(key = "has_password"),
            passwordHint = jsonObject.getString(key = "password_hint"),
            hasRecoveryEmailAddress = jsonObject.getBoolean(key = "has_recovery_email_address"),
            hasPassportData = jsonObject.getBoolean(key = "has_passport_data"),
            recoveryEmailAddressCodeInfo = jsonObject.getObjectNullable(key = "recovery_email_address_code_info") { data -> deserializeEmailAddressAuthenticationCodeInfo(jsonObject = data) },
            loginEmailAddressPattern = jsonObject.getString(key = "login_email_address_pattern"),
            pendingResetDate = jsonObject.getInt(key = "pending_reset_date"),
        )
    }

    private fun deserializePaymentForm(jsonObject: JsonObject): PaymentForm {
        return PaymentForm(
            id = jsonObject.getLong(key = "id"),
            type = jsonObject.getObject(key = "type") { data -> deserializePaymentFormType(jsonObject = data) },
            sellerBotUserId = jsonObject.getLong(key = "seller_bot_user_id"),
            productInfo = jsonObject.getObject(key = "product_info") { data -> deserializeProductInfo(jsonObject = data) },
        )
    }

    private fun deserializePaymentFormTypeRegular(jsonObject: JsonObject): PaymentFormTypeRegular {
        return PaymentFormTypeRegular(
            invoice = jsonObject.getObject(key = "invoice") { data -> deserializeInvoice(jsonObject = data) },
            paymentProviderUserId = jsonObject.getLong(key = "payment_provider_user_id"),
            paymentProvider = jsonObject.getObject(key = "payment_provider") { data -> deserializePaymentProvider(jsonObject = data) },
            additionalPaymentOptions = jsonObject.getObjects(key = "additional_payment_options") { data -> deserializePaymentOption(jsonObject = data) },
            savedOrderInfo = jsonObject.getObjectNullable(key = "saved_order_info") { data -> deserializeOrderInfo(jsonObject = data) },
            savedCredentials = jsonObject.getObjects(key = "saved_credentials") { data -> deserializeSavedCredentials(jsonObject = data) },
            canSaveCredentials = jsonObject.getBoolean(key = "can_save_credentials"),
            needPassword = jsonObject.getBoolean(key = "need_password"),
        )
    }

    private fun deserializePaymentFormTypeStarSubscription(jsonObject: JsonObject): PaymentFormTypeStarSubscription {
        return PaymentFormTypeStarSubscription(
            pricing = jsonObject.getObject(key = "pricing") { data -> deserializeStarSubscriptionPricing(jsonObject = data) },
        )
    }

    private fun deserializePaymentFormTypeStars(jsonObject: JsonObject): PaymentFormTypeStars {
        return PaymentFormTypeStars(
            starCount = jsonObject.getLong(key = "star_count"),
        )
    }

    private fun deserializePaymentOption(jsonObject: JsonObject): PaymentOption {
        return PaymentOption(
            title = jsonObject.getString(key = "title"),
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializePaymentProviderOther(jsonObject: JsonObject): PaymentProviderOther {
        return PaymentProviderOther(
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializePaymentProviderSmartGlocal(jsonObject: JsonObject): PaymentProviderSmartGlocal {
        return PaymentProviderSmartGlocal(
            publicToken = jsonObject.getString(key = "public_token"),
            tokenizeUrl = jsonObject.getString(key = "tokenize_url"),
        )
    }

    private fun deserializePaymentProviderStripe(jsonObject: JsonObject): PaymentProviderStripe {
        return PaymentProviderStripe(
            publishableKey = jsonObject.getString(key = "publishable_key"),
            needCountry = jsonObject.getBoolean(key = "need_country"),
            needPostalCode = jsonObject.getBoolean(key = "need_postal_code"),
            needCardholderName = jsonObject.getBoolean(key = "need_cardholder_name"),
        )
    }

    private fun deserializePaymentReceipt(jsonObject: JsonObject): PaymentReceipt {
        return PaymentReceipt(
            productInfo = jsonObject.getObject(key = "product_info") { data -> deserializeProductInfo(jsonObject = data) },
            date = jsonObject.getInt(key = "date"),
            sellerBotUserId = jsonObject.getLong(key = "seller_bot_user_id"),
            type = jsonObject.getObject(key = "type") { data -> deserializePaymentReceiptType(jsonObject = data) },
        )
    }

    private fun deserializePaymentReceiptTypeRegular(jsonObject: JsonObject): PaymentReceiptTypeRegular {
        return PaymentReceiptTypeRegular(
            paymentProviderUserId = jsonObject.getLong(key = "payment_provider_user_id"),
            invoice = jsonObject.getObject(key = "invoice") { data -> deserializeInvoice(jsonObject = data) },
            orderInfo = jsonObject.getObjectNullable(key = "order_info") { data -> deserializeOrderInfo(jsonObject = data) },
            shippingOption = jsonObject.getObjectNullable(key = "shipping_option") { data -> deserializeShippingOption(jsonObject = data) },
            credentialsTitle = jsonObject.getString(key = "credentials_title"),
            tipAmount = jsonObject.getLong(key = "tip_amount"),
        )
    }

    private fun deserializePaymentReceiptTypeStars(jsonObject: JsonObject): PaymentReceiptTypeStars {
        return PaymentReceiptTypeStars(
            starCount = jsonObject.getLong(key = "star_count"),
            transactionId = jsonObject.getString(key = "transaction_id"),
        )
    }

    private fun deserializePaymentResult(jsonObject: JsonObject): PaymentResult {
        return PaymentResult(
            success = jsonObject.getBoolean(key = "success"),
            verificationUrl = jsonObject.getString(key = "verification_url"),
        )
    }

    private fun deserializePersonalDetails(jsonObject: JsonObject): PersonalDetails {
        return PersonalDetails(
            firstName = jsonObject.getString(key = "first_name"),
            middleName = jsonObject.getString(key = "middle_name"),
            lastName = jsonObject.getString(key = "last_name"),
            nativeFirstName = jsonObject.getString(key = "native_first_name"),
            nativeMiddleName = jsonObject.getString(key = "native_middle_name"),
            nativeLastName = jsonObject.getString(key = "native_last_name"),
            birthdate = jsonObject.getObject(key = "birthdate") { data -> deserializeDate(jsonObject = data) },
            gender = jsonObject.getString(key = "gender"),
            countryCode = jsonObject.getString(key = "country_code"),
            residenceCountryCode = jsonObject.getString(key = "residence_country_code"),
        )
    }

    private fun deserializePersonalDocument(jsonObject: JsonObject): PersonalDocument {
        return PersonalDocument(
            files = jsonObject.getObjects(key = "files") { data -> deserializeDatedFile(jsonObject = data) },
            translation = jsonObject.getObjects(key = "translation") { data -> deserializeDatedFile(jsonObject = data) },
        )
    }

    private fun deserializePhoneNumberAuthenticationSettings(jsonObject: JsonObject): PhoneNumberAuthenticationSettings {
        return PhoneNumberAuthenticationSettings(
            allowFlashCall = jsonObject.getBoolean(key = "allow_flash_call"),
            allowMissedCall = jsonObject.getBoolean(key = "allow_missed_call"),
            isCurrentPhoneNumber = jsonObject.getBoolean(key = "is_current_phone_number"),
            hasUnknownPhoneNumber = jsonObject.getBoolean(key = "has_unknown_phone_number"),
            allowSmsRetrieverApi = jsonObject.getBoolean(key = "allow_sms_retriever_api"),
            firebaseAuthenticationSettings = jsonObject.getObjectNullable(key = "firebase_authentication_settings") { data -> deserializeFirebaseAuthenticationSettings(jsonObject = data) },
            authenticationTokens = jsonObject.getStrings(key = "authentication_tokens"),
        )
    }

    private fun deserializePhoneNumberCodeTypeChange(jsonObject: JsonObject): PhoneNumberCodeTypeChange {
        return PhoneNumberCodeTypeChange()
    }

    private fun deserializePhoneNumberCodeTypeConfirmOwnership(jsonObject: JsonObject): PhoneNumberCodeTypeConfirmOwnership {
        return PhoneNumberCodeTypeConfirmOwnership(
            hash = jsonObject.getString(key = "hash"),
        )
    }

    private fun deserializePhoneNumberCodeTypeVerify(jsonObject: JsonObject): PhoneNumberCodeTypeVerify {
        return PhoneNumberCodeTypeVerify()
    }

    private fun deserializePhoneNumberInfo(jsonObject: JsonObject): PhoneNumberInfo {
        return PhoneNumberInfo(
            country = jsonObject.getObjectNullable(key = "country") { data -> deserializeCountryInfo(jsonObject = data) },
            countryCallingCode = jsonObject.getString(key = "country_calling_code"),
            formattedPhoneNumber = jsonObject.getString(key = "formatted_phone_number"),
            isAnonymous = jsonObject.getBoolean(key = "is_anonymous"),
        )
    }

    private fun deserializePhoto(jsonObject: JsonObject): Photo {
        return Photo(
            hasStickers = jsonObject.getBoolean(key = "has_stickers"),
            minithumbnail = jsonObject.getObjectNullable(key = "minithumbnail") { data -> deserializeMinithumbnail(jsonObject = data) },
            sizes = jsonObject.getObjects(key = "sizes") { data -> deserializePhotoSize(jsonObject = data) },
        )
    }

    private fun deserializePhotoSize(jsonObject: JsonObject): PhotoSize {
        return PhotoSize(
            type = jsonObject.getString(key = "type"),
            photo = jsonObject.getObject(key = "photo") { data -> deserializeFile(jsonObject = data) },
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            progressiveSizes = jsonObject.getInts(key = "progressive_sizes"),
        )
    }

    private fun deserializePoint(jsonObject: JsonObject): Point {
        return Point(
            x = jsonObject.getDouble(key = "x"),
            y = jsonObject.getDouble(key = "y"),
        )
    }

    private fun deserializePoll(jsonObject: JsonObject): Poll {
        return Poll(
            id = jsonObject.getLong(key = "id"),
            question = jsonObject.getObject(key = "question") { data -> deserializeFormattedText(jsonObject = data) },
            options = jsonObject.getObjects(key = "options") { data -> deserializePollOption(jsonObject = data) },
            totalVoterCount = jsonObject.getInt(key = "total_voter_count"),
            recentVoterIds = jsonObject.getObjects(key = "recent_voter_ids") { data -> deserializeMessageSender(jsonObject = data) },
            isAnonymous = jsonObject.getBoolean(key = "is_anonymous"),
            type = jsonObject.getObject(key = "type") { data -> deserializePollType(jsonObject = data) },
            openPeriod = jsonObject.getInt(key = "open_period"),
            closeDate = jsonObject.getInt(key = "close_date"),
            isClosed = jsonObject.getBoolean(key = "is_closed"),
        )
    }

    private fun deserializePollOption(jsonObject: JsonObject): PollOption {
        return PollOption(
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            voterCount = jsonObject.getInt(key = "voter_count"),
            votePercentage = jsonObject.getInt(key = "vote_percentage"),
            isChosen = jsonObject.getBoolean(key = "is_chosen"),
            isBeingChosen = jsonObject.getBoolean(key = "is_being_chosen"),
        )
    }

    private fun deserializePollTypeQuiz(jsonObject: JsonObject): PollTypeQuiz {
        return PollTypeQuiz(
            correctOptionId = jsonObject.getInt(key = "correct_option_id"),
            explanation = jsonObject.getObject(key = "explanation") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializePollTypeRegular(jsonObject: JsonObject): PollTypeRegular {
        return PollTypeRegular(
            allowMultipleAnswers = jsonObject.getBoolean(key = "allow_multiple_answers"),
        )
    }

    private fun deserializePremiumFeatureAccentColor(jsonObject: JsonObject): PremiumFeatureAccentColor {
        return PremiumFeatureAccentColor()
    }

    private fun deserializePremiumFeatureAdvancedChatManagement(jsonObject: JsonObject): PremiumFeatureAdvancedChatManagement {
        return PremiumFeatureAdvancedChatManagement()
    }

    private fun deserializePremiumFeatureAnimatedProfilePhoto(jsonObject: JsonObject): PremiumFeatureAnimatedProfilePhoto {
        return PremiumFeatureAnimatedProfilePhoto()
    }

    private fun deserializePremiumFeatureAppIcons(jsonObject: JsonObject): PremiumFeatureAppIcons {
        return PremiumFeatureAppIcons()
    }

    private fun deserializePremiumFeatureBackgroundForBoth(jsonObject: JsonObject): PremiumFeatureBackgroundForBoth {
        return PremiumFeatureBackgroundForBoth()
    }

    private fun deserializePremiumFeatureBusiness(jsonObject: JsonObject): PremiumFeatureBusiness {
        return PremiumFeatureBusiness()
    }

    private fun deserializePremiumFeatureChatBoost(jsonObject: JsonObject): PremiumFeatureChatBoost {
        return PremiumFeatureChatBoost()
    }

    private fun deserializePremiumFeatureChecklists(jsonObject: JsonObject): PremiumFeatureChecklists {
        return PremiumFeatureChecklists()
    }

    private fun deserializePremiumFeatureCustomEmoji(jsonObject: JsonObject): PremiumFeatureCustomEmoji {
        return PremiumFeatureCustomEmoji()
    }

    private fun deserializePremiumFeatureDisabledAds(jsonObject: JsonObject): PremiumFeatureDisabledAds {
        return PremiumFeatureDisabledAds()
    }

    private fun deserializePremiumFeatureEmojiStatus(jsonObject: JsonObject): PremiumFeatureEmojiStatus {
        return PremiumFeatureEmojiStatus()
    }

    private fun deserializePremiumFeatureForumTopicIcon(jsonObject: JsonObject): PremiumFeatureForumTopicIcon {
        return PremiumFeatureForumTopicIcon()
    }

    private fun deserializePremiumFeatureImprovedDownloadSpeed(jsonObject: JsonObject): PremiumFeatureImprovedDownloadSpeed {
        return PremiumFeatureImprovedDownloadSpeed()
    }

    private fun deserializePremiumFeatureIncreasedLimits(jsonObject: JsonObject): PremiumFeatureIncreasedLimits {
        return PremiumFeatureIncreasedLimits()
    }

    private fun deserializePremiumFeatureIncreasedUploadFileSize(jsonObject: JsonObject): PremiumFeatureIncreasedUploadFileSize {
        return PremiumFeatureIncreasedUploadFileSize()
    }

    private fun deserializePremiumFeatureLastSeenTimes(jsonObject: JsonObject): PremiumFeatureLastSeenTimes {
        return PremiumFeatureLastSeenTimes()
    }

    private fun deserializePremiumFeatureMessageEffects(jsonObject: JsonObject): PremiumFeatureMessageEffects {
        return PremiumFeatureMessageEffects()
    }

    private fun deserializePremiumFeatureMessagePrivacy(jsonObject: JsonObject): PremiumFeatureMessagePrivacy {
        return PremiumFeatureMessagePrivacy()
    }

    private fun deserializePremiumFeatureProfileBadge(jsonObject: JsonObject): PremiumFeatureProfileBadge {
        return PremiumFeatureProfileBadge()
    }

    private fun deserializePremiumFeaturePromotionAnimation(jsonObject: JsonObject): PremiumFeaturePromotionAnimation {
        return PremiumFeaturePromotionAnimation(
            feature = jsonObject.getObject(key = "feature") { data -> deserializePremiumFeature(jsonObject = data) },
            animation = jsonObject.getObject(key = "animation") { data -> deserializeAnimation(jsonObject = data) },
        )
    }

    private fun deserializePremiumFeatureRealTimeChatTranslation(jsonObject: JsonObject): PremiumFeatureRealTimeChatTranslation {
        return PremiumFeatureRealTimeChatTranslation()
    }

    private fun deserializePremiumFeatureSavedMessagesTags(jsonObject: JsonObject): PremiumFeatureSavedMessagesTags {
        return PremiumFeatureSavedMessagesTags()
    }

    private fun deserializePremiumFeatureUniqueReactions(jsonObject: JsonObject): PremiumFeatureUniqueReactions {
        return PremiumFeatureUniqueReactions()
    }

    private fun deserializePremiumFeatureUniqueStickers(jsonObject: JsonObject): PremiumFeatureUniqueStickers {
        return PremiumFeatureUniqueStickers()
    }

    private fun deserializePremiumFeatureUpgradedStories(jsonObject: JsonObject): PremiumFeatureUpgradedStories {
        return PremiumFeatureUpgradedStories()
    }

    private fun deserializePremiumFeatureVoiceRecognition(jsonObject: JsonObject): PremiumFeatureVoiceRecognition {
        return PremiumFeatureVoiceRecognition()
    }

    private fun deserializePremiumFeatures(jsonObject: JsonObject): PremiumFeatures {
        return PremiumFeatures(
            features = jsonObject.getObjects(key = "features") { data -> deserializePremiumFeature(jsonObject = data) },
            limits = jsonObject.getObjects(key = "limits") { data -> deserializePremiumLimit(jsonObject = data) },
            paymentLink = jsonObject.getObjectNullable(key = "payment_link") { data -> deserializeInternalLinkType(jsonObject = data) },
        )
    }

    private fun deserializePremiumGiftCodeInfo(jsonObject: JsonObject): PremiumGiftCodeInfo {
        return PremiumGiftCodeInfo(
            creatorId = jsonObject.getObjectNullable(key = "creator_id") { data -> deserializeMessageSender(jsonObject = data) },
            creationDate = jsonObject.getInt(key = "creation_date"),
            isFromGiveaway = jsonObject.getBoolean(key = "is_from_giveaway"),
            giveawayMessageId = jsonObject.getLong(key = "giveaway_message_id"),
            monthCount = jsonObject.getInt(key = "month_count"),
            userId = jsonObject.getLong(key = "user_id"),
            useDate = jsonObject.getInt(key = "use_date"),
        )
    }

    private fun deserializePremiumGiftPaymentOption(jsonObject: JsonObject): PremiumGiftPaymentOption {
        return PremiumGiftPaymentOption(
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            starCount = jsonObject.getLong(key = "star_count"),
            discountPercentage = jsonObject.getInt(key = "discount_percentage"),
            monthCount = jsonObject.getInt(key = "month_count"),
            storeProductId = jsonObject.getString(key = "store_product_id"),
            sticker = jsonObject.getObjectNullable(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializePremiumGiftPaymentOptions(jsonObject: JsonObject): PremiumGiftPaymentOptions {
        return PremiumGiftPaymentOptions(
            options = jsonObject.getObjects(key = "options") { data -> deserializePremiumGiftPaymentOption(jsonObject = data) },
        )
    }

    private fun deserializePremiumGiveawayPaymentOption(jsonObject: JsonObject): PremiumGiveawayPaymentOption {
        return PremiumGiveawayPaymentOption(
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            winnerCount = jsonObject.getInt(key = "winner_count"),
            monthCount = jsonObject.getInt(key = "month_count"),
            storeProductId = jsonObject.getString(key = "store_product_id"),
            storeProductQuantity = jsonObject.getInt(key = "store_product_quantity"),
        )
    }

    private fun deserializePremiumGiveawayPaymentOptions(jsonObject: JsonObject): PremiumGiveawayPaymentOptions {
        return PremiumGiveawayPaymentOptions(
            options = jsonObject.getObjects(key = "options") { data -> deserializePremiumGiveawayPaymentOption(jsonObject = data) },
        )
    }

    private fun deserializePremiumLimit(jsonObject: JsonObject): PremiumLimit {
        return PremiumLimit(
            type = jsonObject.getObject(key = "type") { data -> deserializePremiumLimitType(jsonObject = data) },
            defaultValue = jsonObject.getInt(key = "default_value"),
            premiumValue = jsonObject.getInt(key = "premium_value"),
        )
    }

    private fun deserializePremiumLimitTypeActiveStoryCount(jsonObject: JsonObject): PremiumLimitTypeActiveStoryCount {
        return PremiumLimitTypeActiveStoryCount()
    }

    private fun deserializePremiumLimitTypeBioLength(jsonObject: JsonObject): PremiumLimitTypeBioLength {
        return PremiumLimitTypeBioLength()
    }

    private fun deserializePremiumLimitTypeCaptionLength(jsonObject: JsonObject): PremiumLimitTypeCaptionLength {
        return PremiumLimitTypeCaptionLength()
    }

    private fun deserializePremiumLimitTypeChatFolderChosenChatCount(jsonObject: JsonObject): PremiumLimitTypeChatFolderChosenChatCount {
        return PremiumLimitTypeChatFolderChosenChatCount()
    }

    private fun deserializePremiumLimitTypeChatFolderCount(jsonObject: JsonObject): PremiumLimitTypeChatFolderCount {
        return PremiumLimitTypeChatFolderCount()
    }

    private fun deserializePremiumLimitTypeChatFolderInviteLinkCount(jsonObject: JsonObject): PremiumLimitTypeChatFolderInviteLinkCount {
        return PremiumLimitTypeChatFolderInviteLinkCount()
    }

    private fun deserializePremiumLimitTypeCreatedPublicChatCount(jsonObject: JsonObject): PremiumLimitTypeCreatedPublicChatCount {
        return PremiumLimitTypeCreatedPublicChatCount()
    }

    private fun deserializePremiumLimitTypeFavoriteStickerCount(jsonObject: JsonObject): PremiumLimitTypeFavoriteStickerCount {
        return PremiumLimitTypeFavoriteStickerCount()
    }

    private fun deserializePremiumLimitTypeMonthlyPostedStoryCount(jsonObject: JsonObject): PremiumLimitTypeMonthlyPostedStoryCount {
        return PremiumLimitTypeMonthlyPostedStoryCount()
    }

    private fun deserializePremiumLimitTypePinnedArchivedChatCount(jsonObject: JsonObject): PremiumLimitTypePinnedArchivedChatCount {
        return PremiumLimitTypePinnedArchivedChatCount()
    }

    private fun deserializePremiumLimitTypePinnedChatCount(jsonObject: JsonObject): PremiumLimitTypePinnedChatCount {
        return PremiumLimitTypePinnedChatCount()
    }

    private fun deserializePremiumLimitTypePinnedSavedMessagesTopicCount(jsonObject: JsonObject): PremiumLimitTypePinnedSavedMessagesTopicCount {
        return PremiumLimitTypePinnedSavedMessagesTopicCount()
    }

    private fun deserializePremiumLimitTypeSavedAnimationCount(jsonObject: JsonObject): PremiumLimitTypeSavedAnimationCount {
        return PremiumLimitTypeSavedAnimationCount()
    }

    private fun deserializePremiumLimitTypeShareableChatFolderCount(jsonObject: JsonObject): PremiumLimitTypeShareableChatFolderCount {
        return PremiumLimitTypeShareableChatFolderCount()
    }

    private fun deserializePremiumLimitTypeSimilarChatCount(jsonObject: JsonObject): PremiumLimitTypeSimilarChatCount {
        return PremiumLimitTypeSimilarChatCount()
    }

    private fun deserializePremiumLimitTypeStoryCaptionLength(jsonObject: JsonObject): PremiumLimitTypeStoryCaptionLength {
        return PremiumLimitTypeStoryCaptionLength()
    }

    private fun deserializePremiumLimitTypeStorySuggestedReactionAreaCount(jsonObject: JsonObject): PremiumLimitTypeStorySuggestedReactionAreaCount {
        return PremiumLimitTypeStorySuggestedReactionAreaCount()
    }

    private fun deserializePremiumLimitTypeSupergroupCount(jsonObject: JsonObject): PremiumLimitTypeSupergroupCount {
        return PremiumLimitTypeSupergroupCount()
    }

    private fun deserializePremiumLimitTypeWeeklyPostedStoryCount(jsonObject: JsonObject): PremiumLimitTypeWeeklyPostedStoryCount {
        return PremiumLimitTypeWeeklyPostedStoryCount()
    }

    private fun deserializePremiumPaymentOption(jsonObject: JsonObject): PremiumPaymentOption {
        return PremiumPaymentOption(
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            discountPercentage = jsonObject.getInt(key = "discount_percentage"),
            monthCount = jsonObject.getInt(key = "month_count"),
            storeProductId = jsonObject.getString(key = "store_product_id"),
            paymentLink = jsonObject.getObjectNullable(key = "payment_link") { data -> deserializeInternalLinkType(jsonObject = data) },
        )
    }

    private fun deserializePremiumSourceBusinessFeature(jsonObject: JsonObject): PremiumSourceBusinessFeature {
        return PremiumSourceBusinessFeature(
            feature = jsonObject.getObjectNullable(key = "feature") { data -> deserializeBusinessFeature(jsonObject = data) },
        )
    }

    private fun deserializePremiumSourceFeature(jsonObject: JsonObject): PremiumSourceFeature {
        return PremiumSourceFeature(
            feature = jsonObject.getObject(key = "feature") { data -> deserializePremiumFeature(jsonObject = data) },
        )
    }

    private fun deserializePremiumSourceLimitExceeded(jsonObject: JsonObject): PremiumSourceLimitExceeded {
        return PremiumSourceLimitExceeded(
            limitType = jsonObject.getObject(key = "limit_type") { data -> deserializePremiumLimitType(jsonObject = data) },
        )
    }

    private fun deserializePremiumSourceLink(jsonObject: JsonObject): PremiumSourceLink {
        return PremiumSourceLink(
            referrer = jsonObject.getString(key = "referrer"),
        )
    }

    private fun deserializePremiumSourceSettings(jsonObject: JsonObject): PremiumSourceSettings {
        return PremiumSourceSettings()
    }

    private fun deserializePremiumSourceStoryFeature(jsonObject: JsonObject): PremiumSourceStoryFeature {
        return PremiumSourceStoryFeature(
            feature = jsonObject.getObject(key = "feature") { data -> deserializePremiumStoryFeature(jsonObject = data) },
        )
    }

    private fun deserializePremiumState(jsonObject: JsonObject): PremiumState {
        return PremiumState(
            state = jsonObject.getObject(key = "state") { data -> deserializeFormattedText(jsonObject = data) },
            paymentOptions = jsonObject.getObjects(key = "payment_options") { data -> deserializePremiumStatePaymentOption(jsonObject = data) },
            animations = jsonObject.getObjects(key = "animations") { data -> deserializePremiumFeaturePromotionAnimation(jsonObject = data) },
            businessAnimations = jsonObject.getObjects(key = "business_animations") { data -> deserializeBusinessFeaturePromotionAnimation(jsonObject = data) },
        )
    }

    private fun deserializePremiumStatePaymentOption(jsonObject: JsonObject): PremiumStatePaymentOption {
        return PremiumStatePaymentOption(
            paymentOption = jsonObject.getObject(key = "payment_option") { data -> deserializePremiumPaymentOption(jsonObject = data) },
            isCurrent = jsonObject.getBoolean(key = "is_current"),
            isUpgrade = jsonObject.getBoolean(key = "is_upgrade"),
            lastTransactionId = jsonObject.getString(key = "last_transaction_id"),
        )
    }

    private fun deserializePremiumStoryFeatureCustomExpirationDuration(jsonObject: JsonObject): PremiumStoryFeatureCustomExpirationDuration {
        return PremiumStoryFeatureCustomExpirationDuration()
    }

    private fun deserializePremiumStoryFeatureLinksAndFormatting(jsonObject: JsonObject): PremiumStoryFeatureLinksAndFormatting {
        return PremiumStoryFeatureLinksAndFormatting()
    }

    private fun deserializePremiumStoryFeaturePermanentViewsHistory(jsonObject: JsonObject): PremiumStoryFeaturePermanentViewsHistory {
        return PremiumStoryFeaturePermanentViewsHistory()
    }

    private fun deserializePremiumStoryFeaturePriorityOrder(jsonObject: JsonObject): PremiumStoryFeaturePriorityOrder {
        return PremiumStoryFeaturePriorityOrder()
    }

    private fun deserializePremiumStoryFeatureSaveStories(jsonObject: JsonObject): PremiumStoryFeatureSaveStories {
        return PremiumStoryFeatureSaveStories()
    }

    private fun deserializePremiumStoryFeatureStealthMode(jsonObject: JsonObject): PremiumStoryFeatureStealthMode {
        return PremiumStoryFeatureStealthMode()
    }

    private fun deserializePremiumStoryFeatureVideoQuality(jsonObject: JsonObject): PremiumStoryFeatureVideoQuality {
        return PremiumStoryFeatureVideoQuality()
    }

    private fun deserializePrepaidGiveaway(jsonObject: JsonObject): PrepaidGiveaway {
        return PrepaidGiveaway(
            id = jsonObject.getLong(key = "id"),
            winnerCount = jsonObject.getInt(key = "winner_count"),
            prize = jsonObject.getObject(key = "prize") { data -> deserializeGiveawayPrize(jsonObject = data) },
            boostCount = jsonObject.getInt(key = "boost_count"),
            paymentDate = jsonObject.getInt(key = "payment_date"),
        )
    }

    private fun deserializePreparedInlineMessage(jsonObject: JsonObject): PreparedInlineMessage {
        return PreparedInlineMessage(
            inlineQueryId = jsonObject.getLong(key = "inline_query_id"),
            result = jsonObject.getObject(key = "result") { data -> deserializeInlineQueryResult(jsonObject = data) },
            chatTypes = jsonObject.getObject(key = "chat_types") { data -> deserializeTargetChatTypes(jsonObject = data) },
        )
    }

    private fun deserializePreparedInlineMessageId(jsonObject: JsonObject): PreparedInlineMessageId {
        return PreparedInlineMessageId(
            id = jsonObject.getString(key = "id"),
            expirationDate = jsonObject.getInt(key = "expiration_date"),
        )
    }

    private fun deserializeProductInfo(jsonObject: JsonObject): ProductInfo {
        return ProductInfo(
            title = jsonObject.getString(key = "title"),
            description = jsonObject.getObject(key = "description") { data -> deserializeFormattedText(jsonObject = data) },
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializePhoto(jsonObject = data) },
        )
    }

    private fun deserializeProfileAccentColor(jsonObject: JsonObject): ProfileAccentColor {
        return ProfileAccentColor(
            id = jsonObject.getInt(key = "id"),
            lightThemeColors = jsonObject.getObject(key = "light_theme_colors") { data -> deserializeProfileAccentColors(jsonObject = data) },
            darkThemeColors = jsonObject.getObject(key = "dark_theme_colors") { data -> deserializeProfileAccentColors(jsonObject = data) },
            minSupergroupChatBoostLevel = jsonObject.getInt(key = "min_supergroup_chat_boost_level"),
            minChannelChatBoostLevel = jsonObject.getInt(key = "min_channel_chat_boost_level"),
        )
    }

    private fun deserializeProfileAccentColors(jsonObject: JsonObject): ProfileAccentColors {
        return ProfileAccentColors(
            paletteColors = jsonObject.getInts(key = "palette_colors"),
            backgroundColors = jsonObject.getInts(key = "background_colors"),
            storyColors = jsonObject.getInts(key = "story_colors"),
        )
    }

    private fun deserializeProfilePhoto(jsonObject: JsonObject): ProfilePhoto {
        return ProfilePhoto(
            id = jsonObject.getLong(key = "id"),
            small = jsonObject.getObject(key = "small") { data -> deserializeFile(jsonObject = data) },
            big = jsonObject.getObject(key = "big") { data -> deserializeFile(jsonObject = data) },
            minithumbnail = jsonObject.getObjectNullable(key = "minithumbnail") { data -> deserializeMinithumbnail(jsonObject = data) },
            hasAnimation = jsonObject.getBoolean(key = "has_animation"),
            isPersonal = jsonObject.getBoolean(key = "is_personal"),
        )
    }

    private fun deserializeProxies(jsonObject: JsonObject): Proxies {
        return Proxies(
            proxies = jsonObject.getObjects(key = "proxies") { data -> deserializeProxy(jsonObject = data) },
        )
    }

    private fun deserializeProxy(jsonObject: JsonObject): Proxy {
        return Proxy(
            id = jsonObject.getInt(key = "id"),
            server = jsonObject.getString(key = "server"),
            port = jsonObject.getInt(key = "port"),
            lastUsedDate = jsonObject.getInt(key = "last_used_date"),
            isEnabled = jsonObject.getBoolean(key = "is_enabled"),
            type = jsonObject.getObject(key = "type") { data -> deserializeProxyType(jsonObject = data) },
        )
    }

    private fun deserializeProxyTypeHttp(jsonObject: JsonObject): ProxyTypeHttp {
        return ProxyTypeHttp(
            username = jsonObject.getString(key = "username"),
            password = jsonObject.getString(key = "password"),
            httpOnly = jsonObject.getBoolean(key = "http_only"),
        )
    }

    private fun deserializeProxyTypeMtproto(jsonObject: JsonObject): ProxyTypeMtproto {
        return ProxyTypeMtproto(
            secret = jsonObject.getString(key = "secret"),
        )
    }

    private fun deserializeProxyTypeSocks5(jsonObject: JsonObject): ProxyTypeSocks5 {
        return ProxyTypeSocks5(
            username = jsonObject.getString(key = "username"),
            password = jsonObject.getString(key = "password"),
        )
    }

    private fun deserializePublicChatTypeHasUsername(jsonObject: JsonObject): PublicChatTypeHasUsername {
        return PublicChatTypeHasUsername()
    }

    private fun deserializePublicChatTypeIsLocationBased(jsonObject: JsonObject): PublicChatTypeIsLocationBased {
        return PublicChatTypeIsLocationBased()
    }

    private fun deserializePublicForwardMessage(jsonObject: JsonObject): PublicForwardMessage {
        return PublicForwardMessage(
            message = jsonObject.getObject(key = "message") { data -> deserializeMessage(jsonObject = data) },
        )
    }

    private fun deserializePublicForwardStory(jsonObject: JsonObject): PublicForwardStory {
        return PublicForwardStory(
            story = jsonObject.getObject(key = "story") { data -> deserializeStory(jsonObject = data) },
        )
    }

    private fun deserializePublicForwards(jsonObject: JsonObject): PublicForwards {
        return PublicForwards(
            totalCount = jsonObject.getInt(key = "total_count"),
            forwards = jsonObject.getObjects(key = "forwards") { data -> deserializePublicForward(jsonObject = data) },
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializePushMessageContentAnimation(jsonObject: JsonObject): PushMessageContentAnimation {
        return PushMessageContentAnimation(
            animation = jsonObject.getObjectNullable(key = "animation") { data -> deserializeAnimation(jsonObject = data) },
            caption = jsonObject.getString(key = "caption"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentAudio(jsonObject: JsonObject): PushMessageContentAudio {
        return PushMessageContentAudio(
            audio = jsonObject.getObjectNullable(key = "audio") { data -> deserializeAudio(jsonObject = data) },
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentBasicGroupChatCreate(jsonObject: JsonObject): PushMessageContentBasicGroupChatCreate {
        return PushMessageContentBasicGroupChatCreate()
    }

    private fun deserializePushMessageContentChatAddMembers(jsonObject: JsonObject): PushMessageContentChatAddMembers {
        return PushMessageContentChatAddMembers(
            memberName = jsonObject.getString(key = "member_name"),
            isCurrentUser = jsonObject.getBoolean(key = "is_current_user"),
            isReturned = jsonObject.getBoolean(key = "is_returned"),
        )
    }

    private fun deserializePushMessageContentChatChangePhoto(jsonObject: JsonObject): PushMessageContentChatChangePhoto {
        return PushMessageContentChatChangePhoto()
    }

    private fun deserializePushMessageContentChatChangeTitle(jsonObject: JsonObject): PushMessageContentChatChangeTitle {
        return PushMessageContentChatChangeTitle(
            title = jsonObject.getString(key = "title"),
        )
    }

    private fun deserializePushMessageContentChatDeleteMember(jsonObject: JsonObject): PushMessageContentChatDeleteMember {
        return PushMessageContentChatDeleteMember(
            memberName = jsonObject.getString(key = "member_name"),
            isCurrentUser = jsonObject.getBoolean(key = "is_current_user"),
            isLeft = jsonObject.getBoolean(key = "is_left"),
        )
    }

    private fun deserializePushMessageContentChatJoinByLink(jsonObject: JsonObject): PushMessageContentChatJoinByLink {
        return PushMessageContentChatJoinByLink()
    }

    private fun deserializePushMessageContentChatJoinByRequest(jsonObject: JsonObject): PushMessageContentChatJoinByRequest {
        return PushMessageContentChatJoinByRequest()
    }

    private fun deserializePushMessageContentChatSetBackground(jsonObject: JsonObject): PushMessageContentChatSetBackground {
        return PushMessageContentChatSetBackground(
            isSame = jsonObject.getBoolean(key = "is_same"),
        )
    }

    private fun deserializePushMessageContentChatSetTheme(jsonObject: JsonObject): PushMessageContentChatSetTheme {
        return PushMessageContentChatSetTheme(
            themeName = jsonObject.getString(key = "theme_name"),
        )
    }

    private fun deserializePushMessageContentChecklist(jsonObject: JsonObject): PushMessageContentChecklist {
        return PushMessageContentChecklist(
            title = jsonObject.getString(key = "title"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentChecklistTasksAdded(jsonObject: JsonObject): PushMessageContentChecklistTasksAdded {
        return PushMessageContentChecklistTasksAdded(
            taskCount = jsonObject.getInt(key = "task_count"),
        )
    }

    private fun deserializePushMessageContentChecklistTasksDone(jsonObject: JsonObject): PushMessageContentChecklistTasksDone {
        return PushMessageContentChecklistTasksDone(
            taskCount = jsonObject.getInt(key = "task_count"),
        )
    }

    private fun deserializePushMessageContentContact(jsonObject: JsonObject): PushMessageContentContact {
        return PushMessageContentContact(
            name = jsonObject.getString(key = "name"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentContactRegistered(jsonObject: JsonObject): PushMessageContentContactRegistered {
        return PushMessageContentContactRegistered()
    }

    private fun deserializePushMessageContentDocument(jsonObject: JsonObject): PushMessageContentDocument {
        return PushMessageContentDocument(
            document = jsonObject.getObjectNullable(key = "document") { data -> deserializeDocument(jsonObject = data) },
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentGame(jsonObject: JsonObject): PushMessageContentGame {
        return PushMessageContentGame(
            title = jsonObject.getString(key = "title"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentGameScore(jsonObject: JsonObject): PushMessageContentGameScore {
        return PushMessageContentGameScore(
            title = jsonObject.getString(key = "title"),
            score = jsonObject.getInt(key = "score"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentGift(jsonObject: JsonObject): PushMessageContentGift {
        return PushMessageContentGift(
            starCount = jsonObject.getLong(key = "star_count"),
        )
    }

    private fun deserializePushMessageContentGiveaway(jsonObject: JsonObject): PushMessageContentGiveaway {
        return PushMessageContentGiveaway(
            winnerCount = jsonObject.getInt(key = "winner_count"),
            prize = jsonObject.getObjectNullable(key = "prize") { data -> deserializeGiveawayPrize(jsonObject = data) },
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentHidden(jsonObject: JsonObject): PushMessageContentHidden {
        return PushMessageContentHidden(
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentInviteVideoChatParticipants(jsonObject: JsonObject): PushMessageContentInviteVideoChatParticipants {
        return PushMessageContentInviteVideoChatParticipants(
            isCurrentUser = jsonObject.getBoolean(key = "is_current_user"),
        )
    }

    private fun deserializePushMessageContentInvoice(jsonObject: JsonObject): PushMessageContentInvoice {
        return PushMessageContentInvoice(
            price = jsonObject.getString(key = "price"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentLocation(jsonObject: JsonObject): PushMessageContentLocation {
        return PushMessageContentLocation(
            isLive = jsonObject.getBoolean(key = "is_live"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentMediaAlbum(jsonObject: JsonObject): PushMessageContentMediaAlbum {
        return PushMessageContentMediaAlbum(
            totalCount = jsonObject.getInt(key = "total_count"),
            hasPhotos = jsonObject.getBoolean(key = "has_photos"),
            hasVideos = jsonObject.getBoolean(key = "has_videos"),
            hasAudios = jsonObject.getBoolean(key = "has_audios"),
            hasDocuments = jsonObject.getBoolean(key = "has_documents"),
        )
    }

    private fun deserializePushMessageContentMessageForwards(jsonObject: JsonObject): PushMessageContentMessageForwards {
        return PushMessageContentMessageForwards(
            totalCount = jsonObject.getInt(key = "total_count"),
        )
    }

    private fun deserializePushMessageContentPaidMedia(jsonObject: JsonObject): PushMessageContentPaidMedia {
        return PushMessageContentPaidMedia(
            starCount = jsonObject.getLong(key = "star_count"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentPhoto(jsonObject: JsonObject): PushMessageContentPhoto {
        return PushMessageContentPhoto(
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializePhoto(jsonObject = data) },
            caption = jsonObject.getString(key = "caption"),
            isSecret = jsonObject.getBoolean(key = "is_secret"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentPoll(jsonObject: JsonObject): PushMessageContentPoll {
        return PushMessageContentPoll(
            question = jsonObject.getString(key = "question"),
            isRegular = jsonObject.getBoolean(key = "is_regular"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentPremiumGiftCode(jsonObject: JsonObject): PushMessageContentPremiumGiftCode {
        return PushMessageContentPremiumGiftCode(
            monthCount = jsonObject.getInt(key = "month_count"),
        )
    }

    private fun deserializePushMessageContentProximityAlertTriggered(jsonObject: JsonObject): PushMessageContentProximityAlertTriggered {
        return PushMessageContentProximityAlertTriggered(
            distance = jsonObject.getInt(key = "distance"),
        )
    }

    private fun deserializePushMessageContentRecurringPayment(jsonObject: JsonObject): PushMessageContentRecurringPayment {
        return PushMessageContentRecurringPayment(
            amount = jsonObject.getString(key = "amount"),
        )
    }

    private fun deserializePushMessageContentScreenshotTaken(jsonObject: JsonObject): PushMessageContentScreenshotTaken {
        return PushMessageContentScreenshotTaken()
    }

    private fun deserializePushMessageContentSticker(jsonObject: JsonObject): PushMessageContentSticker {
        return PushMessageContentSticker(
            sticker = jsonObject.getObjectNullable(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
            emoji = jsonObject.getString(key = "emoji"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentStory(jsonObject: JsonObject): PushMessageContentStory {
        return PushMessageContentStory(
            isMention = jsonObject.getBoolean(key = "is_mention"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentSuggestProfilePhoto(jsonObject: JsonObject): PushMessageContentSuggestProfilePhoto {
        return PushMessageContentSuggestProfilePhoto()
    }

    private fun deserializePushMessageContentText(jsonObject: JsonObject): PushMessageContentText {
        return PushMessageContentText(
            text = jsonObject.getString(key = "text"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentUpgradedGift(jsonObject: JsonObject): PushMessageContentUpgradedGift {
        return PushMessageContentUpgradedGift(
            isUpgrade = jsonObject.getBoolean(key = "is_upgrade"),
        )
    }

    private fun deserializePushMessageContentVideo(jsonObject: JsonObject): PushMessageContentVideo {
        return PushMessageContentVideo(
            video = jsonObject.getObjectNullable(key = "video") { data -> deserializeVideo(jsonObject = data) },
            caption = jsonObject.getString(key = "caption"),
            isSecret = jsonObject.getBoolean(key = "is_secret"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentVideoChatEnded(jsonObject: JsonObject): PushMessageContentVideoChatEnded {
        return PushMessageContentVideoChatEnded()
    }

    private fun deserializePushMessageContentVideoChatStarted(jsonObject: JsonObject): PushMessageContentVideoChatStarted {
        return PushMessageContentVideoChatStarted()
    }

    private fun deserializePushMessageContentVideoNote(jsonObject: JsonObject): PushMessageContentVideoNote {
        return PushMessageContentVideoNote(
            videoNote = jsonObject.getObjectNullable(key = "video_note") { data -> deserializeVideoNote(jsonObject = data) },
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushMessageContentVoiceNote(jsonObject: JsonObject): PushMessageContentVoiceNote {
        return PushMessageContentVoiceNote(
            voiceNote = jsonObject.getObjectNullable(key = "voice_note") { data -> deserializeVoiceNote(jsonObject = data) },
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializePushReceiverId(jsonObject: JsonObject): PushReceiverId {
        return PushReceiverId(
            id = jsonObject.getLong(key = "id"),
        )
    }

    private fun deserializeQuickReplyMessage(jsonObject: JsonObject): QuickReplyMessage {
        return QuickReplyMessage(
            id = jsonObject.getLong(key = "id"),
            sendingState = jsonObject.getObjectNullable(key = "sending_state") { data -> deserializeMessageSendingState(jsonObject = data) },
            canBeEdited = jsonObject.getBoolean(key = "can_be_edited"),
            replyToMessageId = jsonObject.getLong(key = "reply_to_message_id"),
            viaBotUserId = jsonObject.getLong(key = "via_bot_user_id"),
            mediaAlbumId = jsonObject.getLong(key = "media_album_id"),
            content = jsonObject.getObject(key = "content") { data -> deserializeMessageContent(jsonObject = data) },
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
        )
    }

    private fun deserializeQuickReplyMessages(jsonObject: JsonObject): QuickReplyMessages {
        return QuickReplyMessages(
            messages = jsonObject.getObjects(key = "messages") { data -> deserializeQuickReplyMessage(jsonObject = data) },
        )
    }

    private fun deserializeQuickReplyShortcut(jsonObject: JsonObject): QuickReplyShortcut {
        return QuickReplyShortcut(
            id = jsonObject.getInt(key = "id"),
            name = jsonObject.getString(key = "name"),
            firstMessage = jsonObject.getObject(key = "first_message") { data -> deserializeQuickReplyMessage(jsonObject = data) },
            messageCount = jsonObject.getInt(key = "message_count"),
        )
    }

    private fun deserializeReactionNotificationSettings(jsonObject: JsonObject): ReactionNotificationSettings {
        return ReactionNotificationSettings(
            messageReactionSource = jsonObject.getObject(key = "message_reaction_source") { data -> deserializeReactionNotificationSource(jsonObject = data) },
            storyReactionSource = jsonObject.getObject(key = "story_reaction_source") { data -> deserializeReactionNotificationSource(jsonObject = data) },
            soundId = jsonObject.getLong(key = "sound_id"),
            showPreview = jsonObject.getBoolean(key = "show_preview"),
        )
    }

    private fun deserializeReactionNotificationSourceAll(jsonObject: JsonObject): ReactionNotificationSourceAll {
        return ReactionNotificationSourceAll()
    }

    private fun deserializeReactionNotificationSourceContacts(jsonObject: JsonObject): ReactionNotificationSourceContacts {
        return ReactionNotificationSourceContacts()
    }

    private fun deserializeReactionNotificationSourceNone(jsonObject: JsonObject): ReactionNotificationSourceNone {
        return ReactionNotificationSourceNone()
    }

    private fun deserializeReactionTypeCustomEmoji(jsonObject: JsonObject): ReactionTypeCustomEmoji {
        return ReactionTypeCustomEmoji(
            customEmojiId = jsonObject.getLong(key = "custom_emoji_id"),
        )
    }

    private fun deserializeReactionTypeEmoji(jsonObject: JsonObject): ReactionTypeEmoji {
        return ReactionTypeEmoji(
            emoji = jsonObject.getString(key = "emoji"),
        )
    }

    private fun deserializeReactionTypePaid(jsonObject: JsonObject): ReactionTypePaid {
        return ReactionTypePaid()
    }

    private fun deserializeReactionUnavailabilityReasonAnonymousAdministrator(jsonObject: JsonObject): ReactionUnavailabilityReasonAnonymousAdministrator {
        return ReactionUnavailabilityReasonAnonymousAdministrator()
    }

    private fun deserializeReactionUnavailabilityReasonGuest(jsonObject: JsonObject): ReactionUnavailabilityReasonGuest {
        return ReactionUnavailabilityReasonGuest()
    }

    private fun deserializeReadDatePrivacySettings(jsonObject: JsonObject): ReadDatePrivacySettings {
        return ReadDatePrivacySettings(
            showReadDate = jsonObject.getBoolean(key = "show_read_date"),
        )
    }

    private fun deserializeReceivedGift(jsonObject: JsonObject): ReceivedGift {
        return ReceivedGift(
            receivedGiftId = jsonObject.getString(key = "received_gift_id"),
            senderId = jsonObject.getObjectNullable(key = "sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            isPrivate = jsonObject.getBoolean(key = "is_private"),
            isSaved = jsonObject.getBoolean(key = "is_saved"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
            canBeUpgraded = jsonObject.getBoolean(key = "can_be_upgraded"),
            canBeTransferred = jsonObject.getBoolean(key = "can_be_transferred"),
            wasRefunded = jsonObject.getBoolean(key = "was_refunded"),
            date = jsonObject.getInt(key = "date"),
            gift = jsonObject.getObject(key = "gift") { data -> deserializeSentGift(jsonObject = data) },
            sellStarCount = jsonObject.getLong(key = "sell_star_count"),
            prepaidUpgradeStarCount = jsonObject.getLong(key = "prepaid_upgrade_star_count"),
            transferStarCount = jsonObject.getLong(key = "transfer_star_count"),
            nextTransferDate = jsonObject.getInt(key = "next_transfer_date"),
            nextResaleDate = jsonObject.getInt(key = "next_resale_date"),
            exportDate = jsonObject.getInt(key = "export_date"),
        )
    }

    private fun deserializeReceivedGifts(jsonObject: JsonObject): ReceivedGifts {
        return ReceivedGifts(
            totalCount = jsonObject.getInt(key = "total_count"),
            gifts = jsonObject.getObjects(key = "gifts") { data -> deserializeReceivedGift(jsonObject = data) },
            areNotificationsEnabled = jsonObject.getBoolean(key = "are_notifications_enabled"),
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializeRecommendedChatFolder(jsonObject: JsonObject): RecommendedChatFolder {
        return RecommendedChatFolder(
            folder = jsonObject.getObject(key = "folder") { data -> deserializeChatFolder(jsonObject = data) },
            description = jsonObject.getString(key = "description"),
        )
    }

    private fun deserializeRecommendedChatFolders(jsonObject: JsonObject): RecommendedChatFolders {
        return RecommendedChatFolders(
            chatFolders = jsonObject.getObjects(key = "chat_folders") { data -> deserializeRecommendedChatFolder(jsonObject = data) },
        )
    }

    private fun deserializeRecoveryEmailAddress(jsonObject: JsonObject): RecoveryEmailAddress {
        return RecoveryEmailAddress(
            recoveryEmailAddress = jsonObject.getString(key = "recovery_email_address"),
        )
    }

    private fun deserializeRemoteFile(jsonObject: JsonObject): RemoteFile {
        return RemoteFile(
            id = jsonObject.getString(key = "id"),
            uniqueId = jsonObject.getString(key = "unique_id"),
            isUploadingActive = jsonObject.getBoolean(key = "is_uploading_active"),
            isUploadingCompleted = jsonObject.getBoolean(key = "is_uploading_completed"),
            uploadedSize = jsonObject.getLong(key = "uploaded_size"),
        )
    }

    private fun deserializeReplyMarkupForceReply(jsonObject: JsonObject): ReplyMarkupForceReply {
        return ReplyMarkupForceReply(
            isPersonal = jsonObject.getBoolean(key = "is_personal"),
            inputFieldPlaceholder = jsonObject.getString(key = "input_field_placeholder"),
        )
    }

    private fun deserializeReplyMarkupInlineKeyboard(jsonObject: JsonObject): ReplyMarkupInlineKeyboard {
        return ReplyMarkupInlineKeyboard(
            rows = jsonObject.getObjectsArray(key = "rows") { data -> deserializeInlineKeyboardButton(jsonObject = data) },
        )
    }

    private fun deserializeReplyMarkupRemoveKeyboard(jsonObject: JsonObject): ReplyMarkupRemoveKeyboard {
        return ReplyMarkupRemoveKeyboard(
            isPersonal = jsonObject.getBoolean(key = "is_personal"),
        )
    }

    private fun deserializeReplyMarkupShowKeyboard(jsonObject: JsonObject): ReplyMarkupShowKeyboard {
        return ReplyMarkupShowKeyboard(
            rows = jsonObject.getObjectsArray(key = "rows") { data -> deserializeKeyboardButton(jsonObject = data) },
            isPersistent = jsonObject.getBoolean(key = "is_persistent"),
            resizeKeyboard = jsonObject.getBoolean(key = "resize_keyboard"),
            oneTime = jsonObject.getBoolean(key = "one_time"),
            isPersonal = jsonObject.getBoolean(key = "is_personal"),
            inputFieldPlaceholder = jsonObject.getString(key = "input_field_placeholder"),
        )
    }

    private fun deserializeReportChatResultMessagesRequired(jsonObject: JsonObject): ReportChatResultMessagesRequired {
        return ReportChatResultMessagesRequired()
    }

    private fun deserializeReportChatResultOk(jsonObject: JsonObject): ReportChatResultOk {
        return ReportChatResultOk()
    }

    private fun deserializeReportChatResultOptionRequired(jsonObject: JsonObject): ReportChatResultOptionRequired {
        return ReportChatResultOptionRequired(
            title = jsonObject.getString(key = "title"),
            options = jsonObject.getObjects(key = "options") { data -> deserializeReportOption(jsonObject = data) },
        )
    }

    private fun deserializeReportChatResultTextRequired(jsonObject: JsonObject): ReportChatResultTextRequired {
        return ReportChatResultTextRequired(
            optionId = jsonObject.getBytes(key = "option_id"),
            isOptional = jsonObject.getBoolean(key = "is_optional"),
        )
    }

    private fun deserializeReportOption(jsonObject: JsonObject): ReportOption {
        return ReportOption(
            id = jsonObject.getBytes(key = "id"),
            text = jsonObject.getString(key = "text"),
        )
    }

    private fun deserializeReportReasonChildAbuse(jsonObject: JsonObject): ReportReasonChildAbuse {
        return ReportReasonChildAbuse()
    }

    private fun deserializeReportReasonCopyright(jsonObject: JsonObject): ReportReasonCopyright {
        return ReportReasonCopyright()
    }

    private fun deserializeReportReasonCustom(jsonObject: JsonObject): ReportReasonCustom {
        return ReportReasonCustom()
    }

    private fun deserializeReportReasonFake(jsonObject: JsonObject): ReportReasonFake {
        return ReportReasonFake()
    }

    private fun deserializeReportReasonIllegalDrugs(jsonObject: JsonObject): ReportReasonIllegalDrugs {
        return ReportReasonIllegalDrugs()
    }

    private fun deserializeReportReasonPersonalDetails(jsonObject: JsonObject): ReportReasonPersonalDetails {
        return ReportReasonPersonalDetails()
    }

    private fun deserializeReportReasonPornography(jsonObject: JsonObject): ReportReasonPornography {
        return ReportReasonPornography()
    }

    private fun deserializeReportReasonSpam(jsonObject: JsonObject): ReportReasonSpam {
        return ReportReasonSpam()
    }

    private fun deserializeReportReasonUnrelatedLocation(jsonObject: JsonObject): ReportReasonUnrelatedLocation {
        return ReportReasonUnrelatedLocation()
    }

    private fun deserializeReportReasonViolence(jsonObject: JsonObject): ReportReasonViolence {
        return ReportReasonViolence()
    }

    private fun deserializeReportSponsoredResultAdsHidden(jsonObject: JsonObject): ReportSponsoredResultAdsHidden {
        return ReportSponsoredResultAdsHidden()
    }

    private fun deserializeReportSponsoredResultFailed(jsonObject: JsonObject): ReportSponsoredResultFailed {
        return ReportSponsoredResultFailed()
    }

    private fun deserializeReportSponsoredResultOk(jsonObject: JsonObject): ReportSponsoredResultOk {
        return ReportSponsoredResultOk()
    }

    private fun deserializeReportSponsoredResultOptionRequired(jsonObject: JsonObject): ReportSponsoredResultOptionRequired {
        return ReportSponsoredResultOptionRequired(
            title = jsonObject.getString(key = "title"),
            options = jsonObject.getObjects(key = "options") { data -> deserializeReportOption(jsonObject = data) },
        )
    }

    private fun deserializeReportSponsoredResultPremiumRequired(jsonObject: JsonObject): ReportSponsoredResultPremiumRequired {
        return ReportSponsoredResultPremiumRequired()
    }

    private fun deserializeReportStoryResultOk(jsonObject: JsonObject): ReportStoryResultOk {
        return ReportStoryResultOk()
    }

    private fun deserializeReportStoryResultOptionRequired(jsonObject: JsonObject): ReportStoryResultOptionRequired {
        return ReportStoryResultOptionRequired(
            title = jsonObject.getString(key = "title"),
            options = jsonObject.getObjects(key = "options") { data -> deserializeReportOption(jsonObject = data) },
        )
    }

    private fun deserializeReportStoryResultTextRequired(jsonObject: JsonObject): ReportStoryResultTextRequired {
        return ReportStoryResultTextRequired(
            optionId = jsonObject.getBytes(key = "option_id"),
            isOptional = jsonObject.getBoolean(key = "is_optional"),
        )
    }

    private fun deserializeResendCodeReasonUserRequest(jsonObject: JsonObject): ResendCodeReasonUserRequest {
        return ResendCodeReasonUserRequest()
    }

    private fun deserializeResendCodeReasonVerificationFailed(jsonObject: JsonObject): ResendCodeReasonVerificationFailed {
        return ResendCodeReasonVerificationFailed(
            errorMessage = jsonObject.getString(key = "error_message"),
        )
    }

    private fun deserializeResetPasswordResultDeclined(jsonObject: JsonObject): ResetPasswordResultDeclined {
        return ResetPasswordResultDeclined(
            retryDate = jsonObject.getInt(key = "retry_date"),
        )
    }

    private fun deserializeResetPasswordResultOk(jsonObject: JsonObject): ResetPasswordResultOk {
        return ResetPasswordResultOk()
    }

    private fun deserializeResetPasswordResultPending(jsonObject: JsonObject): ResetPasswordResultPending {
        return ResetPasswordResultPending(
            pendingResetDate = jsonObject.getInt(key = "pending_reset_date"),
        )
    }

    private fun deserializeRevenueWithdrawalStateFailed(jsonObject: JsonObject): RevenueWithdrawalStateFailed {
        return RevenueWithdrawalStateFailed()
    }

    private fun deserializeRevenueWithdrawalStatePending(jsonObject: JsonObject): RevenueWithdrawalStatePending {
        return RevenueWithdrawalStatePending()
    }

    private fun deserializeRevenueWithdrawalStateSucceeded(jsonObject: JsonObject): RevenueWithdrawalStateSucceeded {
        return RevenueWithdrawalStateSucceeded(
            date = jsonObject.getInt(key = "date"),
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeRichTextAnchor(jsonObject: JsonObject): RichTextAnchor {
        return RichTextAnchor(
            name = jsonObject.getString(key = "name"),
        )
    }

    private fun deserializeRichTextAnchorLink(jsonObject: JsonObject): RichTextAnchorLink {
        return RichTextAnchorLink(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
            anchorName = jsonObject.getString(key = "anchor_name"),
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeRichTextBold(jsonObject: JsonObject): RichTextBold {
        return RichTextBold(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializeRichTextEmailAddress(jsonObject: JsonObject): RichTextEmailAddress {
        return RichTextEmailAddress(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
            emailAddress = jsonObject.getString(key = "email_address"),
        )
    }

    private fun deserializeRichTextFixed(jsonObject: JsonObject): RichTextFixed {
        return RichTextFixed(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializeRichTextIcon(jsonObject: JsonObject): RichTextIcon {
        return RichTextIcon(
            document = jsonObject.getObject(key = "document") { data -> deserializeDocument(jsonObject = data) },
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
        )
    }

    private fun deserializeRichTextItalic(jsonObject: JsonObject): RichTextItalic {
        return RichTextItalic(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializeRichTextMarked(jsonObject: JsonObject): RichTextMarked {
        return RichTextMarked(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializeRichTextPhoneNumber(jsonObject: JsonObject): RichTextPhoneNumber {
        return RichTextPhoneNumber(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
            phoneNumber = jsonObject.getString(key = "phone_number"),
        )
    }

    private fun deserializeRichTextPlain(jsonObject: JsonObject): RichTextPlain {
        return RichTextPlain(
            text = jsonObject.getString(key = "text"),
        )
    }

    private fun deserializeRichTextReference(jsonObject: JsonObject): RichTextReference {
        return RichTextReference(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
            anchorName = jsonObject.getString(key = "anchor_name"),
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeRichTextStrikethrough(jsonObject: JsonObject): RichTextStrikethrough {
        return RichTextStrikethrough(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializeRichTextSubscript(jsonObject: JsonObject): RichTextSubscript {
        return RichTextSubscript(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializeRichTextSuperscript(jsonObject: JsonObject): RichTextSuperscript {
        return RichTextSuperscript(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializeRichTextUnderline(jsonObject: JsonObject): RichTextUnderline {
        return RichTextUnderline(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializeRichTextUrl(jsonObject: JsonObject): RichTextUrl {
        return RichTextUrl(
            text = jsonObject.getObject(key = "text") { data -> deserializeRichText(jsonObject = data) },
            url = jsonObject.getString(key = "url"),
            isCached = jsonObject.getBoolean(key = "is_cached"),
        )
    }

    private fun deserializeRichTexts(jsonObject: JsonObject): RichTexts {
        return RichTexts(
            texts = jsonObject.getObjects(key = "texts") { data -> deserializeRichText(jsonObject = data) },
        )
    }

    private fun deserializeRtmpUrl(jsonObject: JsonObject): RtmpUrl {
        return RtmpUrl(
            url = jsonObject.getString(key = "url"),
            streamKey = jsonObject.getString(key = "stream_key"),
        )
    }

    private fun deserializeSavedCredentials(jsonObject: JsonObject): SavedCredentials {
        return SavedCredentials(
            id = jsonObject.getString(key = "id"),
            title = jsonObject.getString(key = "title"),
        )
    }

    private fun deserializeSavedMessagesTag(jsonObject: JsonObject): SavedMessagesTag {
        return SavedMessagesTag(
            tag = jsonObject.getObject(key = "tag") { data -> deserializeReactionType(jsonObject = data) },
            label = jsonObject.getString(key = "label"),
            count = jsonObject.getInt(key = "count"),
        )
    }

    private fun deserializeSavedMessagesTags(jsonObject: JsonObject): SavedMessagesTags {
        return SavedMessagesTags(
            tags = jsonObject.getObjects(key = "tags") { data -> deserializeSavedMessagesTag(jsonObject = data) },
        )
    }

    private fun deserializeSavedMessagesTopic(jsonObject: JsonObject): SavedMessagesTopic {
        return SavedMessagesTopic(
            id = jsonObject.getLong(key = "id"),
            type = jsonObject.getObject(key = "type") { data -> deserializeSavedMessagesTopicType(jsonObject = data) },
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
            order = jsonObject.getLong(key = "order"),
            lastMessage = jsonObject.getObjectNullable(key = "last_message") { data -> deserializeMessage(jsonObject = data) },
            draftMessage = jsonObject.getObjectNullable(key = "draft_message") { data -> deserializeDraftMessage(jsonObject = data) },
        )
    }

    private fun deserializeSavedMessagesTopicTypeAuthorHidden(jsonObject: JsonObject): SavedMessagesTopicTypeAuthorHidden {
        return SavedMessagesTopicTypeAuthorHidden()
    }

    private fun deserializeSavedMessagesTopicTypeMyNotes(jsonObject: JsonObject): SavedMessagesTopicTypeMyNotes {
        return SavedMessagesTopicTypeMyNotes()
    }

    private fun deserializeSavedMessagesTopicTypeSavedFromChat(jsonObject: JsonObject): SavedMessagesTopicTypeSavedFromChat {
        return SavedMessagesTopicTypeSavedFromChat(
            chatId = jsonObject.getLong(key = "chat_id"),
        )
    }

    private fun deserializeScopeAutosaveSettings(jsonObject: JsonObject): ScopeAutosaveSettings {
        return ScopeAutosaveSettings(
            autosavePhotos = jsonObject.getBoolean(key = "autosave_photos"),
            autosaveVideos = jsonObject.getBoolean(key = "autosave_videos"),
            maxVideoFileSize = jsonObject.getLong(key = "max_video_file_size"),
        )
    }

    private fun deserializeScopeNotificationSettings(jsonObject: JsonObject): ScopeNotificationSettings {
        return ScopeNotificationSettings(
            muteFor = jsonObject.getInt(key = "mute_for"),
            soundId = jsonObject.getLong(key = "sound_id"),
            showPreview = jsonObject.getBoolean(key = "show_preview"),
            useDefaultMuteStories = jsonObject.getBoolean(key = "use_default_mute_stories"),
            muteStories = jsonObject.getBoolean(key = "mute_stories"),
            storySoundId = jsonObject.getLong(key = "story_sound_id"),
            showStoryPoster = jsonObject.getBoolean(key = "show_story_poster"),
            disablePinnedMessageNotifications = jsonObject.getBoolean(key = "disable_pinned_message_notifications"),
            disableMentionNotifications = jsonObject.getBoolean(key = "disable_mention_notifications"),
        )
    }

    private fun deserializeSearchMessagesChatTypeFilterChannel(jsonObject: JsonObject): SearchMessagesChatTypeFilterChannel {
        return SearchMessagesChatTypeFilterChannel()
    }

    private fun deserializeSearchMessagesChatTypeFilterGroup(jsonObject: JsonObject): SearchMessagesChatTypeFilterGroup {
        return SearchMessagesChatTypeFilterGroup()
    }

    private fun deserializeSearchMessagesChatTypeFilterPrivate(jsonObject: JsonObject): SearchMessagesChatTypeFilterPrivate {
        return SearchMessagesChatTypeFilterPrivate()
    }

    private fun deserializeSearchMessagesFilterAnimation(jsonObject: JsonObject): SearchMessagesFilterAnimation {
        return SearchMessagesFilterAnimation()
    }

    private fun deserializeSearchMessagesFilterAudio(jsonObject: JsonObject): SearchMessagesFilterAudio {
        return SearchMessagesFilterAudio()
    }

    private fun deserializeSearchMessagesFilterChatPhoto(jsonObject: JsonObject): SearchMessagesFilterChatPhoto {
        return SearchMessagesFilterChatPhoto()
    }

    private fun deserializeSearchMessagesFilterDocument(jsonObject: JsonObject): SearchMessagesFilterDocument {
        return SearchMessagesFilterDocument()
    }

    private fun deserializeSearchMessagesFilterEmpty(jsonObject: JsonObject): SearchMessagesFilterEmpty {
        return SearchMessagesFilterEmpty()
    }

    private fun deserializeSearchMessagesFilterFailedToSend(jsonObject: JsonObject): SearchMessagesFilterFailedToSend {
        return SearchMessagesFilterFailedToSend()
    }

    private fun deserializeSearchMessagesFilterMention(jsonObject: JsonObject): SearchMessagesFilterMention {
        return SearchMessagesFilterMention()
    }

    private fun deserializeSearchMessagesFilterPhoto(jsonObject: JsonObject): SearchMessagesFilterPhoto {
        return SearchMessagesFilterPhoto()
    }

    private fun deserializeSearchMessagesFilterPhotoAndVideo(jsonObject: JsonObject): SearchMessagesFilterPhotoAndVideo {
        return SearchMessagesFilterPhotoAndVideo()
    }

    private fun deserializeSearchMessagesFilterPinned(jsonObject: JsonObject): SearchMessagesFilterPinned {
        return SearchMessagesFilterPinned()
    }

    private fun deserializeSearchMessagesFilterUnreadMention(jsonObject: JsonObject): SearchMessagesFilterUnreadMention {
        return SearchMessagesFilterUnreadMention()
    }

    private fun deserializeSearchMessagesFilterUnreadReaction(jsonObject: JsonObject): SearchMessagesFilterUnreadReaction {
        return SearchMessagesFilterUnreadReaction()
    }

    private fun deserializeSearchMessagesFilterUrl(jsonObject: JsonObject): SearchMessagesFilterUrl {
        return SearchMessagesFilterUrl()
    }

    private fun deserializeSearchMessagesFilterVideo(jsonObject: JsonObject): SearchMessagesFilterVideo {
        return SearchMessagesFilterVideo()
    }

    private fun deserializeSearchMessagesFilterVideoNote(jsonObject: JsonObject): SearchMessagesFilterVideoNote {
        return SearchMessagesFilterVideoNote()
    }

    private fun deserializeSearchMessagesFilterVoiceAndVideoNote(jsonObject: JsonObject): SearchMessagesFilterVoiceAndVideoNote {
        return SearchMessagesFilterVoiceAndVideoNote()
    }

    private fun deserializeSearchMessagesFilterVoiceNote(jsonObject: JsonObject): SearchMessagesFilterVoiceNote {
        return SearchMessagesFilterVoiceNote()
    }

    private fun deserializeSeconds(jsonObject: JsonObject): Seconds {
        return Seconds(
            seconds = jsonObject.getDouble(key = "seconds"),
        )
    }

    private fun deserializeSecretChat(jsonObject: JsonObject): SecretChat {
        return SecretChat(
            id = jsonObject.getInt(key = "id"),
            userId = jsonObject.getLong(key = "user_id"),
            state = jsonObject.getObject(key = "state") { data -> deserializeSecretChatState(jsonObject = data) },
            isOutbound = jsonObject.getBoolean(key = "is_outbound"),
            keyHash = jsonObject.getBytes(key = "key_hash"),
            layer = jsonObject.getInt(key = "layer"),
        )
    }

    private fun deserializeSecretChatStateClosed(jsonObject: JsonObject): SecretChatStateClosed {
        return SecretChatStateClosed()
    }

    private fun deserializeSecretChatStatePending(jsonObject: JsonObject): SecretChatStatePending {
        return SecretChatStatePending()
    }

    private fun deserializeSecretChatStateReady(jsonObject: JsonObject): SecretChatStateReady {
        return SecretChatStateReady()
    }

    private fun deserializeSentGiftRegular(jsonObject: JsonObject): SentGiftRegular {
        return SentGiftRegular(
            gift = jsonObject.getObject(key = "gift") { data -> deserializeGift(jsonObject = data) },
        )
    }

    private fun deserializeSentGiftUpgraded(jsonObject: JsonObject): SentGiftUpgraded {
        return SentGiftUpgraded(
            gift = jsonObject.getObject(key = "gift") { data -> deserializeUpgradedGift(jsonObject = data) },
        )
    }

    private fun deserializeSentWebAppMessage(jsonObject: JsonObject): SentWebAppMessage {
        return SentWebAppMessage(
            inlineMessageId = jsonObject.getString(key = "inline_message_id"),
        )
    }

    private fun deserializeSession(jsonObject: JsonObject): Session {
        return Session(
            id = jsonObject.getLong(key = "id"),
            isCurrent = jsonObject.getBoolean(key = "is_current"),
            isPasswordPending = jsonObject.getBoolean(key = "is_password_pending"),
            isUnconfirmed = jsonObject.getBoolean(key = "is_unconfirmed"),
            canAcceptSecretChats = jsonObject.getBoolean(key = "can_accept_secret_chats"),
            canAcceptCalls = jsonObject.getBoolean(key = "can_accept_calls"),
            type = jsonObject.getObject(key = "type") { data -> deserializeSessionType(jsonObject = data) },
            apiId = jsonObject.getInt(key = "api_id"),
            applicationName = jsonObject.getString(key = "application_name"),
            applicationVersion = jsonObject.getString(key = "application_version"),
            isOfficialApplication = jsonObject.getBoolean(key = "is_official_application"),
            deviceModel = jsonObject.getString(key = "device_model"),
            platform = jsonObject.getString(key = "platform"),
            systemVersion = jsonObject.getString(key = "system_version"),
            logInDate = jsonObject.getInt(key = "log_in_date"),
            lastActiveDate = jsonObject.getInt(key = "last_active_date"),
            ipAddress = jsonObject.getString(key = "ip_address"),
            location = jsonObject.getString(key = "location"),
        )
    }

    private fun deserializeSessionTypeAndroid(jsonObject: JsonObject): SessionTypeAndroid {
        return SessionTypeAndroid()
    }

    private fun deserializeSessionTypeApple(jsonObject: JsonObject): SessionTypeApple {
        return SessionTypeApple()
    }

    private fun deserializeSessionTypeBrave(jsonObject: JsonObject): SessionTypeBrave {
        return SessionTypeBrave()
    }

    private fun deserializeSessionTypeChrome(jsonObject: JsonObject): SessionTypeChrome {
        return SessionTypeChrome()
    }

    private fun deserializeSessionTypeEdge(jsonObject: JsonObject): SessionTypeEdge {
        return SessionTypeEdge()
    }

    private fun deserializeSessionTypeFirefox(jsonObject: JsonObject): SessionTypeFirefox {
        return SessionTypeFirefox()
    }

    private fun deserializeSessionTypeIpad(jsonObject: JsonObject): SessionTypeIpad {
        return SessionTypeIpad()
    }

    private fun deserializeSessionTypeIphone(jsonObject: JsonObject): SessionTypeIphone {
        return SessionTypeIphone()
    }

    private fun deserializeSessionTypeLinux(jsonObject: JsonObject): SessionTypeLinux {
        return SessionTypeLinux()
    }

    private fun deserializeSessionTypeMac(jsonObject: JsonObject): SessionTypeMac {
        return SessionTypeMac()
    }

    private fun deserializeSessionTypeOpera(jsonObject: JsonObject): SessionTypeOpera {
        return SessionTypeOpera()
    }

    private fun deserializeSessionTypeSafari(jsonObject: JsonObject): SessionTypeSafari {
        return SessionTypeSafari()
    }

    private fun deserializeSessionTypeUbuntu(jsonObject: JsonObject): SessionTypeUbuntu {
        return SessionTypeUbuntu()
    }

    private fun deserializeSessionTypeUnknown(jsonObject: JsonObject): SessionTypeUnknown {
        return SessionTypeUnknown()
    }

    private fun deserializeSessionTypeVivaldi(jsonObject: JsonObject): SessionTypeVivaldi {
        return SessionTypeVivaldi()
    }

    private fun deserializeSessionTypeWindows(jsonObject: JsonObject): SessionTypeWindows {
        return SessionTypeWindows()
    }

    private fun deserializeSessionTypeXbox(jsonObject: JsonObject): SessionTypeXbox {
        return SessionTypeXbox()
    }

    private fun deserializeSessions(jsonObject: JsonObject): Sessions {
        return Sessions(
            sessions = jsonObject.getObjects(key = "sessions") { data -> deserializeSession(jsonObject = data) },
            inactiveSessionTtlDays = jsonObject.getInt(key = "inactive_session_ttl_days"),
        )
    }

    private fun deserializeSharedChat(jsonObject: JsonObject): SharedChat {
        return SharedChat(
            chatId = jsonObject.getLong(key = "chat_id"),
            title = jsonObject.getString(key = "title"),
            username = jsonObject.getString(key = "username"),
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializePhoto(jsonObject = data) },
        )
    }

    private fun deserializeSharedUser(jsonObject: JsonObject): SharedUser {
        return SharedUser(
            userId = jsonObject.getLong(key = "user_id"),
            firstName = jsonObject.getString(key = "first_name"),
            lastName = jsonObject.getString(key = "last_name"),
            username = jsonObject.getString(key = "username"),
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializePhoto(jsonObject = data) },
        )
    }

    private fun deserializeShippingOption(jsonObject: JsonObject): ShippingOption {
        return ShippingOption(
            id = jsonObject.getString(key = "id"),
            title = jsonObject.getString(key = "title"),
            priceParts = jsonObject.getObjects(key = "price_parts") { data -> deserializeLabeledPricePart(jsonObject = data) },
        )
    }

    private fun deserializeSpeechRecognitionResultError(jsonObject: JsonObject): SpeechRecognitionResultError {
        return SpeechRecognitionResultError(
            error = jsonObject.getObject(key = "error") { data -> deserializeError(jsonObject = data) },
        )
    }

    private fun deserializeSpeechRecognitionResultPending(jsonObject: JsonObject): SpeechRecognitionResultPending {
        return SpeechRecognitionResultPending(
            partialText = jsonObject.getString(key = "partial_text"),
        )
    }

    private fun deserializeSpeechRecognitionResultText(jsonObject: JsonObject): SpeechRecognitionResultText {
        return SpeechRecognitionResultText(
            text = jsonObject.getString(key = "text"),
        )
    }

    private fun deserializeSponsoredChat(jsonObject: JsonObject): SponsoredChat {
        return SponsoredChat(
            uniqueId = jsonObject.getLong(key = "unique_id"),
            chatId = jsonObject.getLong(key = "chat_id"),
            sponsorInfo = jsonObject.getString(key = "sponsor_info"),
            additionalInfo = jsonObject.getString(key = "additional_info"),
        )
    }

    private fun deserializeSponsoredChats(jsonObject: JsonObject): SponsoredChats {
        return SponsoredChats(
            chats = jsonObject.getObjects(key = "chats") { data -> deserializeSponsoredChat(jsonObject = data) },
        )
    }

    private fun deserializeSponsoredMessage(jsonObject: JsonObject): SponsoredMessage {
        return SponsoredMessage(
            messageId = jsonObject.getLong(key = "message_id"),
            isRecommended = jsonObject.getBoolean(key = "is_recommended"),
            canBeReported = jsonObject.getBoolean(key = "can_be_reported"),
            content = jsonObject.getObject(key = "content") { data -> deserializeMessageContent(jsonObject = data) },
            sponsor = jsonObject.getObject(key = "sponsor") { data -> deserializeAdvertisementSponsor(jsonObject = data) },
            title = jsonObject.getString(key = "title"),
            buttonText = jsonObject.getString(key = "button_text"),
            accentColorId = jsonObject.getInt(key = "accent_color_id"),
            backgroundCustomEmojiId = jsonObject.getLong(key = "background_custom_emoji_id"),
            additionalInfo = jsonObject.getString(key = "additional_info"),
        )
    }

    private fun deserializeSponsoredMessages(jsonObject: JsonObject): SponsoredMessages {
        return SponsoredMessages(
            messages = jsonObject.getObjects(key = "messages") { data -> deserializeSponsoredMessage(jsonObject = data) },
            messagesBetween = jsonObject.getInt(key = "messages_between"),
        )
    }

    private fun deserializeStarAmount(jsonObject: JsonObject): StarAmount {
        return StarAmount(
            starCount = jsonObject.getLong(key = "star_count"),
            nanostarCount = jsonObject.getInt(key = "nanostar_count"),
        )
    }

    private fun deserializeStarCount(jsonObject: JsonObject): StarCount {
        return StarCount(
            starCount = jsonObject.getLong(key = "star_count"),
        )
    }

    private fun deserializeStarGiveawayPaymentOption(jsonObject: JsonObject): StarGiveawayPaymentOption {
        return StarGiveawayPaymentOption(
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            starCount = jsonObject.getLong(key = "star_count"),
            storeProductId = jsonObject.getString(key = "store_product_id"),
            yearlyBoostCount = jsonObject.getInt(key = "yearly_boost_count"),
            winnerOptions = jsonObject.getObjects(key = "winner_options") { data -> deserializeStarGiveawayWinnerOption(jsonObject = data) },
            isDefault = jsonObject.getBoolean(key = "is_default"),
            isAdditional = jsonObject.getBoolean(key = "is_additional"),
        )
    }

    private fun deserializeStarGiveawayPaymentOptions(jsonObject: JsonObject): StarGiveawayPaymentOptions {
        return StarGiveawayPaymentOptions(
            options = jsonObject.getObjects(key = "options") { data -> deserializeStarGiveawayPaymentOption(jsonObject = data) },
        )
    }

    private fun deserializeStarGiveawayWinnerOption(jsonObject: JsonObject): StarGiveawayWinnerOption {
        return StarGiveawayWinnerOption(
            winnerCount = jsonObject.getInt(key = "winner_count"),
            wonStarCount = jsonObject.getLong(key = "won_star_count"),
            isDefault = jsonObject.getBoolean(key = "is_default"),
        )
    }

    private fun deserializeStarPaymentOption(jsonObject: JsonObject): StarPaymentOption {
        return StarPaymentOption(
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            starCount = jsonObject.getLong(key = "star_count"),
            storeProductId = jsonObject.getString(key = "store_product_id"),
            isAdditional = jsonObject.getBoolean(key = "is_additional"),
        )
    }

    private fun deserializeStarPaymentOptions(jsonObject: JsonObject): StarPaymentOptions {
        return StarPaymentOptions(
            options = jsonObject.getObjects(key = "options") { data -> deserializeStarPaymentOption(jsonObject = data) },
        )
    }

    private fun deserializeStarRevenueStatistics(jsonObject: JsonObject): StarRevenueStatistics {
        return StarRevenueStatistics(
            revenueByDayGraph = jsonObject.getObject(key = "revenue_by_day_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            status = jsonObject.getObject(key = "status") { data -> deserializeStarRevenueStatus(jsonObject = data) },
            usdRate = jsonObject.getDouble(key = "usd_rate"),
        )
    }

    private fun deserializeStarRevenueStatus(jsonObject: JsonObject): StarRevenueStatus {
        return StarRevenueStatus(
            totalAmount = jsonObject.getObject(key = "total_amount") { data -> deserializeStarAmount(jsonObject = data) },
            currentAmount = jsonObject.getObject(key = "current_amount") { data -> deserializeStarAmount(jsonObject = data) },
            availableAmount = jsonObject.getObject(key = "available_amount") { data -> deserializeStarAmount(jsonObject = data) },
            withdrawalEnabled = jsonObject.getBoolean(key = "withdrawal_enabled"),
            nextWithdrawalIn = jsonObject.getInt(key = "next_withdrawal_in"),
        )
    }

    private fun deserializeStarSubscription(jsonObject: JsonObject): StarSubscription {
        return StarSubscription(
            id = jsonObject.getString(key = "id"),
            chatId = jsonObject.getLong(key = "chat_id"),
            expirationDate = jsonObject.getInt(key = "expiration_date"),
            isCanceled = jsonObject.getBoolean(key = "is_canceled"),
            isExpiring = jsonObject.getBoolean(key = "is_expiring"),
            pricing = jsonObject.getObject(key = "pricing") { data -> deserializeStarSubscriptionPricing(jsonObject = data) },
            type = jsonObject.getObject(key = "type") { data -> deserializeStarSubscriptionType(jsonObject = data) },
        )
    }

    private fun deserializeStarSubscriptionPricing(jsonObject: JsonObject): StarSubscriptionPricing {
        return StarSubscriptionPricing(
            period = jsonObject.getInt(key = "period"),
            starCount = jsonObject.getLong(key = "star_count"),
        )
    }

    private fun deserializeStarSubscriptionTypeBot(jsonObject: JsonObject): StarSubscriptionTypeBot {
        return StarSubscriptionTypeBot(
            isCanceledByBot = jsonObject.getBoolean(key = "is_canceled_by_bot"),
            title = jsonObject.getString(key = "title"),
            photo = jsonObject.getObject(key = "photo") { data -> deserializePhoto(jsonObject = data) },
            invoiceLink = jsonObject.getString(key = "invoice_link"),
        )
    }

    private fun deserializeStarSubscriptionTypeChannel(jsonObject: JsonObject): StarSubscriptionTypeChannel {
        return StarSubscriptionTypeChannel(
            canReuse = jsonObject.getBoolean(key = "can_reuse"),
            inviteLink = jsonObject.getString(key = "invite_link"),
        )
    }

    private fun deserializeStarSubscriptions(jsonObject: JsonObject): StarSubscriptions {
        return StarSubscriptions(
            starAmount = jsonObject.getObject(key = "star_amount") { data -> deserializeStarAmount(jsonObject = data) },
            subscriptions = jsonObject.getObjects(key = "subscriptions") { data -> deserializeStarSubscription(jsonObject = data) },
            requiredStarCount = jsonObject.getLong(key = "required_star_count"),
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializeStarTransaction(jsonObject: JsonObject): StarTransaction {
        return StarTransaction(
            id = jsonObject.getString(key = "id"),
            starAmount = jsonObject.getObject(key = "star_amount") { data -> deserializeStarAmount(jsonObject = data) },
            isRefund = jsonObject.getBoolean(key = "is_refund"),
            date = jsonObject.getInt(key = "date"),
            type = jsonObject.getObject(key = "type") { data -> deserializeStarTransactionType(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionDirectionIncoming(jsonObject: JsonObject): StarTransactionDirectionIncoming {
        return StarTransactionDirectionIncoming()
    }

    private fun deserializeStarTransactionDirectionOutgoing(jsonObject: JsonObject): StarTransactionDirectionOutgoing {
        return StarTransactionDirectionOutgoing()
    }

    private fun deserializeStarTransactionTypeAffiliateProgramCommission(jsonObject: JsonObject): StarTransactionTypeAffiliateProgramCommission {
        return StarTransactionTypeAffiliateProgramCommission(
            chatId = jsonObject.getLong(key = "chat_id"),
            commissionPerMille = jsonObject.getInt(key = "commission_per_mille"),
        )
    }

    private fun deserializeStarTransactionTypeAppStoreDeposit(jsonObject: JsonObject): StarTransactionTypeAppStoreDeposit {
        return StarTransactionTypeAppStoreDeposit()
    }

    private fun deserializeStarTransactionTypeBotInvoicePurchase(jsonObject: JsonObject): StarTransactionTypeBotInvoicePurchase {
        return StarTransactionTypeBotInvoicePurchase(
            userId = jsonObject.getLong(key = "user_id"),
            productInfo = jsonObject.getObject(key = "product_info") { data -> deserializeProductInfo(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeBotInvoiceSale(jsonObject: JsonObject): StarTransactionTypeBotInvoiceSale {
        return StarTransactionTypeBotInvoiceSale(
            userId = jsonObject.getLong(key = "user_id"),
            productInfo = jsonObject.getObject(key = "product_info") { data -> deserializeProductInfo(jsonObject = data) },
            invoicePayload = jsonObject.getBytes(key = "invoice_payload"),
            affiliate = jsonObject.getObjectNullable(key = "affiliate") { data -> deserializeAffiliateInfo(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeBotPaidMediaPurchase(jsonObject: JsonObject): StarTransactionTypeBotPaidMediaPurchase {
        return StarTransactionTypeBotPaidMediaPurchase(
            userId = jsonObject.getLong(key = "user_id"),
            media = jsonObject.getObjects(key = "media") { data -> deserializePaidMedia(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeBotPaidMediaSale(jsonObject: JsonObject): StarTransactionTypeBotPaidMediaSale {
        return StarTransactionTypeBotPaidMediaSale(
            userId = jsonObject.getLong(key = "user_id"),
            media = jsonObject.getObjects(key = "media") { data -> deserializePaidMedia(jsonObject = data) },
            payload = jsonObject.getString(key = "payload"),
            affiliate = jsonObject.getObjectNullable(key = "affiliate") { data -> deserializeAffiliateInfo(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeBotSubscriptionPurchase(jsonObject: JsonObject): StarTransactionTypeBotSubscriptionPurchase {
        return StarTransactionTypeBotSubscriptionPurchase(
            userId = jsonObject.getLong(key = "user_id"),
            subscriptionPeriod = jsonObject.getInt(key = "subscription_period"),
            productInfo = jsonObject.getObject(key = "product_info") { data -> deserializeProductInfo(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeBotSubscriptionSale(jsonObject: JsonObject): StarTransactionTypeBotSubscriptionSale {
        return StarTransactionTypeBotSubscriptionSale(
            userId = jsonObject.getLong(key = "user_id"),
            subscriptionPeriod = jsonObject.getInt(key = "subscription_period"),
            productInfo = jsonObject.getObject(key = "product_info") { data -> deserializeProductInfo(jsonObject = data) },
            invoicePayload = jsonObject.getBytes(key = "invoice_payload"),
            affiliate = jsonObject.getObjectNullable(key = "affiliate") { data -> deserializeAffiliateInfo(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeBusinessBotTransferReceive(jsonObject: JsonObject): StarTransactionTypeBusinessBotTransferReceive {
        return StarTransactionTypeBusinessBotTransferReceive(
            userId = jsonObject.getLong(key = "user_id"),
        )
    }

    private fun deserializeStarTransactionTypeBusinessBotTransferSend(jsonObject: JsonObject): StarTransactionTypeBusinessBotTransferSend {
        return StarTransactionTypeBusinessBotTransferSend(
            userId = jsonObject.getLong(key = "user_id"),
        )
    }

    private fun deserializeStarTransactionTypeChannelPaidMediaPurchase(jsonObject: JsonObject): StarTransactionTypeChannelPaidMediaPurchase {
        return StarTransactionTypeChannelPaidMediaPurchase(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            media = jsonObject.getObjects(key = "media") { data -> deserializePaidMedia(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeChannelPaidMediaSale(jsonObject: JsonObject): StarTransactionTypeChannelPaidMediaSale {
        return StarTransactionTypeChannelPaidMediaSale(
            userId = jsonObject.getLong(key = "user_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            media = jsonObject.getObjects(key = "media") { data -> deserializePaidMedia(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeChannelPaidReactionReceive(jsonObject: JsonObject): StarTransactionTypeChannelPaidReactionReceive {
        return StarTransactionTypeChannelPaidReactionReceive(
            userId = jsonObject.getLong(key = "user_id"),
            messageId = jsonObject.getLong(key = "message_id"),
        )
    }

    private fun deserializeStarTransactionTypeChannelPaidReactionSend(jsonObject: JsonObject): StarTransactionTypeChannelPaidReactionSend {
        return StarTransactionTypeChannelPaidReactionSend(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
        )
    }

    private fun deserializeStarTransactionTypeChannelSubscriptionPurchase(jsonObject: JsonObject): StarTransactionTypeChannelSubscriptionPurchase {
        return StarTransactionTypeChannelSubscriptionPurchase(
            chatId = jsonObject.getLong(key = "chat_id"),
            subscriptionPeriod = jsonObject.getInt(key = "subscription_period"),
        )
    }

    private fun deserializeStarTransactionTypeChannelSubscriptionSale(jsonObject: JsonObject): StarTransactionTypeChannelSubscriptionSale {
        return StarTransactionTypeChannelSubscriptionSale(
            userId = jsonObject.getLong(key = "user_id"),
            subscriptionPeriod = jsonObject.getInt(key = "subscription_period"),
        )
    }

    private fun deserializeStarTransactionTypeFragmentDeposit(jsonObject: JsonObject): StarTransactionTypeFragmentDeposit {
        return StarTransactionTypeFragmentDeposit()
    }

    private fun deserializeStarTransactionTypeFragmentWithdrawal(jsonObject: JsonObject): StarTransactionTypeFragmentWithdrawal {
        return StarTransactionTypeFragmentWithdrawal(
            withdrawalState = jsonObject.getObjectNullable(key = "withdrawal_state") { data -> deserializeRevenueWithdrawalState(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeGiftPurchase(jsonObject: JsonObject): StarTransactionTypeGiftPurchase {
        return StarTransactionTypeGiftPurchase(
            ownerId = jsonObject.getObject(key = "owner_id") { data -> deserializeMessageSender(jsonObject = data) },
            gift = jsonObject.getObject(key = "gift") { data -> deserializeGift(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeGiftSale(jsonObject: JsonObject): StarTransactionTypeGiftSale {
        return StarTransactionTypeGiftSale(
            userId = jsonObject.getLong(key = "user_id"),
            gift = jsonObject.getObject(key = "gift") { data -> deserializeGift(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeGiftTransfer(jsonObject: JsonObject): StarTransactionTypeGiftTransfer {
        return StarTransactionTypeGiftTransfer(
            ownerId = jsonObject.getObject(key = "owner_id") { data -> deserializeMessageSender(jsonObject = data) },
            gift = jsonObject.getObject(key = "gift") { data -> deserializeUpgradedGift(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeGiftUpgrade(jsonObject: JsonObject): StarTransactionTypeGiftUpgrade {
        return StarTransactionTypeGiftUpgrade(
            userId = jsonObject.getLong(key = "user_id"),
            gift = jsonObject.getObject(key = "gift") { data -> deserializeUpgradedGift(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeGiveawayDeposit(jsonObject: JsonObject): StarTransactionTypeGiveawayDeposit {
        return StarTransactionTypeGiveawayDeposit(
            chatId = jsonObject.getLong(key = "chat_id"),
            giveawayMessageId = jsonObject.getLong(key = "giveaway_message_id"),
        )
    }

    private fun deserializeStarTransactionTypeGooglePlayDeposit(jsonObject: JsonObject): StarTransactionTypeGooglePlayDeposit {
        return StarTransactionTypeGooglePlayDeposit()
    }

    private fun deserializeStarTransactionTypePaidMessageReceive(jsonObject: JsonObject): StarTransactionTypePaidMessageReceive {
        return StarTransactionTypePaidMessageReceive(
            senderId = jsonObject.getObject(key = "sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            messageCount = jsonObject.getInt(key = "message_count"),
            commissionPerMille = jsonObject.getInt(key = "commission_per_mille"),
            commissionStarAmount = jsonObject.getObject(key = "commission_star_amount") { data -> deserializeStarAmount(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypePaidMessageSend(jsonObject: JsonObject): StarTransactionTypePaidMessageSend {
        return StarTransactionTypePaidMessageSend(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageCount = jsonObject.getInt(key = "message_count"),
        )
    }

    private fun deserializeStarTransactionTypePremiumBotDeposit(jsonObject: JsonObject): StarTransactionTypePremiumBotDeposit {
        return StarTransactionTypePremiumBotDeposit()
    }

    private fun deserializeStarTransactionTypePremiumPurchase(jsonObject: JsonObject): StarTransactionTypePremiumPurchase {
        return StarTransactionTypePremiumPurchase(
            userId = jsonObject.getLong(key = "user_id"),
            monthCount = jsonObject.getInt(key = "month_count"),
            sticker = jsonObject.getObjectNullable(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeTelegramAdsWithdrawal(jsonObject: JsonObject): StarTransactionTypeTelegramAdsWithdrawal {
        return StarTransactionTypeTelegramAdsWithdrawal()
    }

    private fun deserializeStarTransactionTypeTelegramApiUsage(jsonObject: JsonObject): StarTransactionTypeTelegramApiUsage {
        return StarTransactionTypeTelegramApiUsage(
            requestCount = jsonObject.getInt(key = "request_count"),
        )
    }

    private fun deserializeStarTransactionTypeUnsupported(jsonObject: JsonObject): StarTransactionTypeUnsupported {
        return StarTransactionTypeUnsupported()
    }

    private fun deserializeStarTransactionTypeUpgradedGiftPurchase(jsonObject: JsonObject): StarTransactionTypeUpgradedGiftPurchase {
        return StarTransactionTypeUpgradedGiftPurchase(
            userId = jsonObject.getLong(key = "user_id"),
            gift = jsonObject.getObject(key = "gift") { data -> deserializeUpgradedGift(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeUpgradedGiftSale(jsonObject: JsonObject): StarTransactionTypeUpgradedGiftSale {
        return StarTransactionTypeUpgradedGiftSale(
            userId = jsonObject.getLong(key = "user_id"),
            gift = jsonObject.getObject(key = "gift") { data -> deserializeUpgradedGift(jsonObject = data) },
            affiliate = jsonObject.getObject(key = "affiliate") { data -> deserializeAffiliateInfo(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactionTypeUserDeposit(jsonObject: JsonObject): StarTransactionTypeUserDeposit {
        return StarTransactionTypeUserDeposit(
            userId = jsonObject.getLong(key = "user_id"),
            sticker = jsonObject.getObjectNullable(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeStarTransactions(jsonObject: JsonObject): StarTransactions {
        return StarTransactions(
            starAmount = jsonObject.getObject(key = "star_amount") { data -> deserializeStarAmount(jsonObject = data) },
            transactions = jsonObject.getObjects(key = "transactions") { data -> deserializeStarTransaction(jsonObject = data) },
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializeStatisticalGraphAsync(jsonObject: JsonObject): StatisticalGraphAsync {
        return StatisticalGraphAsync(
            token = jsonObject.getString(key = "token"),
        )
    }

    private fun deserializeStatisticalGraphData(jsonObject: JsonObject): StatisticalGraphData {
        return StatisticalGraphData(
            jsonData = jsonObject.getString(key = "json_data"),
            zoomToken = jsonObject.getString(key = "zoom_token"),
        )
    }

    private fun deserializeStatisticalGraphError(jsonObject: JsonObject): StatisticalGraphError {
        return StatisticalGraphError(
            errorMessage = jsonObject.getString(key = "error_message"),
        )
    }

    private fun deserializeStatisticalValue(jsonObject: JsonObject): StatisticalValue {
        return StatisticalValue(
            value = jsonObject.getDouble(key = "value"),
            previousValue = jsonObject.getDouble(key = "previous_value"),
            growthRatePercentage = jsonObject.getDouble(key = "growth_rate_percentage"),
        )
    }

    private fun deserializeSticker(jsonObject: JsonObject): Sticker {
        return Sticker(
            id = jsonObject.getLong(key = "id"),
            setId = jsonObject.getLong(key = "set_id"),
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            emoji = jsonObject.getString(key = "emoji"),
            format = jsonObject.getObject(key = "format") { data -> deserializeStickerFormat(jsonObject = data) },
            fullType = jsonObject.getObject(key = "full_type") { data -> deserializeStickerFullType(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeThumbnail(jsonObject = data) },
            sticker = jsonObject.getObject(key = "sticker") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeStickerFormatTgs(jsonObject: JsonObject): StickerFormatTgs {
        return StickerFormatTgs()
    }

    private fun deserializeStickerFormatWebm(jsonObject: JsonObject): StickerFormatWebm {
        return StickerFormatWebm()
    }

    private fun deserializeStickerFormatWebp(jsonObject: JsonObject): StickerFormatWebp {
        return StickerFormatWebp()
    }

    private fun deserializeStickerFullTypeCustomEmoji(jsonObject: JsonObject): StickerFullTypeCustomEmoji {
        return StickerFullTypeCustomEmoji(
            customEmojiId = jsonObject.getLong(key = "custom_emoji_id"),
            needsRepainting = jsonObject.getBoolean(key = "needs_repainting"),
        )
    }

    private fun deserializeStickerFullTypeMask(jsonObject: JsonObject): StickerFullTypeMask {
        return StickerFullTypeMask(
            maskPosition = jsonObject.getObjectNullable(key = "mask_position") { data -> deserializeMaskPosition(jsonObject = data) },
        )
    }

    private fun deserializeStickerFullTypeRegular(jsonObject: JsonObject): StickerFullTypeRegular {
        return StickerFullTypeRegular(
            premiumAnimation = jsonObject.getObjectNullable(key = "premium_animation") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeStickerSet(jsonObject: JsonObject): StickerSet {
        return StickerSet(
            id = jsonObject.getLong(key = "id"),
            title = jsonObject.getString(key = "title"),
            name = jsonObject.getString(key = "name"),
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeThumbnail(jsonObject = data) },
            thumbnailOutline = jsonObject.getObjectNullable(key = "thumbnail_outline") { data -> deserializeOutline(jsonObject = data) },
            isOwned = jsonObject.getBoolean(key = "is_owned"),
            isInstalled = jsonObject.getBoolean(key = "is_installed"),
            isArchived = jsonObject.getBoolean(key = "is_archived"),
            isOfficial = jsonObject.getBoolean(key = "is_official"),
            stickerType = jsonObject.getObject(key = "sticker_type") { data -> deserializeStickerType(jsonObject = data) },
            needsRepainting = jsonObject.getBoolean(key = "needs_repainting"),
            isAllowedAsChatEmojiStatus = jsonObject.getBoolean(key = "is_allowed_as_chat_emoji_status"),
            isViewed = jsonObject.getBoolean(key = "is_viewed"),
            stickers = jsonObject.getObjects(key = "stickers") { data -> deserializeSticker(jsonObject = data) },
            emojis = jsonObject.getObjects(key = "emojis") { data -> deserializeEmojis(jsonObject = data) },
        )
    }

    private fun deserializeStickerSetInfo(jsonObject: JsonObject): StickerSetInfo {
        return StickerSetInfo(
            id = jsonObject.getLong(key = "id"),
            title = jsonObject.getString(key = "title"),
            name = jsonObject.getString(key = "name"),
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeThumbnail(jsonObject = data) },
            thumbnailOutline = jsonObject.getObjectNullable(key = "thumbnail_outline") { data -> deserializeOutline(jsonObject = data) },
            isOwned = jsonObject.getBoolean(key = "is_owned"),
            isInstalled = jsonObject.getBoolean(key = "is_installed"),
            isArchived = jsonObject.getBoolean(key = "is_archived"),
            isOfficial = jsonObject.getBoolean(key = "is_official"),
            stickerType = jsonObject.getObject(key = "sticker_type") { data -> deserializeStickerType(jsonObject = data) },
            needsRepainting = jsonObject.getBoolean(key = "needs_repainting"),
            isAllowedAsChatEmojiStatus = jsonObject.getBoolean(key = "is_allowed_as_chat_emoji_status"),
            isViewed = jsonObject.getBoolean(key = "is_viewed"),
            size = jsonObject.getInt(key = "size"),
            covers = jsonObject.getObjects(key = "covers") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeStickerSets(jsonObject: JsonObject): StickerSets {
        return StickerSets(
            totalCount = jsonObject.getInt(key = "total_count"),
            sets = jsonObject.getObjects(key = "sets") { data -> deserializeStickerSetInfo(jsonObject = data) },
        )
    }

    private fun deserializeStickerTypeCustomEmoji(jsonObject: JsonObject): StickerTypeCustomEmoji {
        return StickerTypeCustomEmoji()
    }

    private fun deserializeStickerTypeMask(jsonObject: JsonObject): StickerTypeMask {
        return StickerTypeMask()
    }

    private fun deserializeStickerTypeRegular(jsonObject: JsonObject): StickerTypeRegular {
        return StickerTypeRegular()
    }

    private fun deserializeStickers(jsonObject: JsonObject): Stickers {
        return Stickers(
            stickers = jsonObject.getObjects(key = "stickers") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeStorageStatistics(jsonObject: JsonObject): StorageStatistics {
        return StorageStatistics(
            size = jsonObject.getLong(key = "size"),
            count = jsonObject.getInt(key = "count"),
            byChat = jsonObject.getObjects(key = "by_chat") { data -> deserializeStorageStatisticsByChat(jsonObject = data) },
        )
    }

    private fun deserializeStorageStatisticsByChat(jsonObject: JsonObject): StorageStatisticsByChat {
        return StorageStatisticsByChat(
            chatId = jsonObject.getLong(key = "chat_id"),
            size = jsonObject.getLong(key = "size"),
            count = jsonObject.getInt(key = "count"),
            byFileType = jsonObject.getObjects(key = "by_file_type") { data -> deserializeStorageStatisticsByFileType(jsonObject = data) },
        )
    }

    private fun deserializeStorageStatisticsByFileType(jsonObject: JsonObject): StorageStatisticsByFileType {
        return StorageStatisticsByFileType(
            fileType = jsonObject.getObject(key = "file_type") { data -> deserializeFileType(jsonObject = data) },
            size = jsonObject.getLong(key = "size"),
            count = jsonObject.getInt(key = "count"),
        )
    }

    private fun deserializeStorageStatisticsFast(jsonObject: JsonObject): StorageStatisticsFast {
        return StorageStatisticsFast(
            filesSize = jsonObject.getLong(key = "files_size"),
            fileCount = jsonObject.getInt(key = "file_count"),
            databaseSize = jsonObject.getLong(key = "database_size"),
            languagePackDatabaseSize = jsonObject.getLong(key = "language_pack_database_size"),
            logSize = jsonObject.getLong(key = "log_size"),
        )
    }

    private fun deserializeStorePaymentPurposeGiftedStars(jsonObject: JsonObject): StorePaymentPurposeGiftedStars {
        return StorePaymentPurposeGiftedStars(
            userId = jsonObject.getLong(key = "user_id"),
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            starCount = jsonObject.getLong(key = "star_count"),
        )
    }

    private fun deserializeStorePaymentPurposePremiumGift(jsonObject: JsonObject): StorePaymentPurposePremiumGift {
        return StorePaymentPurposePremiumGift(
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            userId = jsonObject.getLong(key = "user_id"),
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializeStorePaymentPurposePremiumGiftCodes(jsonObject: JsonObject): StorePaymentPurposePremiumGiftCodes {
        return StorePaymentPurposePremiumGiftCodes(
            boostedChatId = jsonObject.getLong(key = "boosted_chat_id"),
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            userIds = jsonObject.getLongs(key = "user_ids"),
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializeStorePaymentPurposePremiumGiveaway(jsonObject: JsonObject): StorePaymentPurposePremiumGiveaway {
        return StorePaymentPurposePremiumGiveaway(
            parameters = jsonObject.getObject(key = "parameters") { data -> deserializeGiveawayParameters(jsonObject = data) },
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
        )
    }

    private fun deserializeStorePaymentPurposePremiumSubscription(jsonObject: JsonObject): StorePaymentPurposePremiumSubscription {
        return StorePaymentPurposePremiumSubscription(
            isRestore = jsonObject.getBoolean(key = "is_restore"),
            isUpgrade = jsonObject.getBoolean(key = "is_upgrade"),
        )
    }

    private fun deserializeStorePaymentPurposeStarGiveaway(jsonObject: JsonObject): StorePaymentPurposeStarGiveaway {
        return StorePaymentPurposeStarGiveaway(
            parameters = jsonObject.getObject(key = "parameters") { data -> deserializeGiveawayParameters(jsonObject = data) },
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            winnerCount = jsonObject.getInt(key = "winner_count"),
            starCount = jsonObject.getLong(key = "star_count"),
        )
    }

    private fun deserializeStorePaymentPurposeStars(jsonObject: JsonObject): StorePaymentPurposeStars {
        return StorePaymentPurposeStars(
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            starCount = jsonObject.getLong(key = "star_count"),
        )
    }

    private fun deserializeStoreTransactionAppStore(jsonObject: JsonObject): StoreTransactionAppStore {
        return StoreTransactionAppStore(
            receipt = jsonObject.getBytes(key = "receipt"),
        )
    }

    private fun deserializeStoreTransactionGooglePlay(jsonObject: JsonObject): StoreTransactionGooglePlay {
        return StoreTransactionGooglePlay(
            packageName = jsonObject.getString(key = "package_name"),
            storeProductId = jsonObject.getString(key = "store_product_id"),
            purchaseToken = jsonObject.getString(key = "purchase_token"),
        )
    }

    private fun deserializeStories(jsonObject: JsonObject): Stories {
        return Stories(
            totalCount = jsonObject.getInt(key = "total_count"),
            stories = jsonObject.getObjects(key = "stories") { data -> deserializeStory(jsonObject = data) },
            pinnedStoryIds = jsonObject.getInts(key = "pinned_story_ids"),
        )
    }

    private fun deserializeStory(jsonObject: JsonObject): Story {
        return Story(
            id = jsonObject.getInt(key = "id"),
            posterChatId = jsonObject.getLong(key = "poster_chat_id"),
            posterId = jsonObject.getObjectNullable(key = "poster_id") { data -> deserializeMessageSender(jsonObject = data) },
            date = jsonObject.getInt(key = "date"),
            isBeingPosted = jsonObject.getBoolean(key = "is_being_posted"),
            isBeingEdited = jsonObject.getBoolean(key = "is_being_edited"),
            isEdited = jsonObject.getBoolean(key = "is_edited"),
            isPostedToChatPage = jsonObject.getBoolean(key = "is_posted_to_chat_page"),
            isVisibleOnlyForSelf = jsonObject.getBoolean(key = "is_visible_only_for_self"),
            canBeDeleted = jsonObject.getBoolean(key = "can_be_deleted"),
            canBeEdited = jsonObject.getBoolean(key = "can_be_edited"),
            canBeForwarded = jsonObject.getBoolean(key = "can_be_forwarded"),
            canBeReplied = jsonObject.getBoolean(key = "can_be_replied"),
            canToggleIsPostedToChatPage = jsonObject.getBoolean(key = "can_toggle_is_posted_to_chat_page"),
            canGetStatistics = jsonObject.getBoolean(key = "can_get_statistics"),
            canGetInteractions = jsonObject.getBoolean(key = "can_get_interactions"),
            hasExpiredViewers = jsonObject.getBoolean(key = "has_expired_viewers"),
            repostInfo = jsonObject.getObjectNullable(key = "repost_info") { data -> deserializeStoryRepostInfo(jsonObject = data) },
            interactionInfo = jsonObject.getObjectNullable(key = "interaction_info") { data -> deserializeStoryInteractionInfo(jsonObject = data) },
            chosenReactionType = jsonObject.getObjectNullable(key = "chosen_reaction_type") { data -> deserializeReactionType(jsonObject = data) },
            privacySettings = jsonObject.getObject(key = "privacy_settings") { data -> deserializeStoryPrivacySettings(jsonObject = data) },
            content = jsonObject.getObject(key = "content") { data -> deserializeStoryContent(jsonObject = data) },
            areas = jsonObject.getObjects(key = "areas") { data -> deserializeStoryArea(jsonObject = data) },
            caption = jsonObject.getObject(key = "caption") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializeStoryArea(jsonObject: JsonObject): StoryArea {
        return StoryArea(
            position = jsonObject.getObject(key = "position") { data -> deserializeStoryAreaPosition(jsonObject = data) },
            type = jsonObject.getObject(key = "type") { data -> deserializeStoryAreaType(jsonObject = data) },
        )
    }

    private fun deserializeStoryAreaPosition(jsonObject: JsonObject): StoryAreaPosition {
        return StoryAreaPosition(
            xPercentage = jsonObject.getDouble(key = "x_percentage"),
            yPercentage = jsonObject.getDouble(key = "y_percentage"),
            widthPercentage = jsonObject.getDouble(key = "width_percentage"),
            heightPercentage = jsonObject.getDouble(key = "height_percentage"),
            rotationAngle = jsonObject.getDouble(key = "rotation_angle"),
            cornerRadiusPercentage = jsonObject.getDouble(key = "corner_radius_percentage"),
        )
    }

    private fun deserializeStoryAreaTypeLink(jsonObject: JsonObject): StoryAreaTypeLink {
        return StoryAreaTypeLink(
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeStoryAreaTypeLocation(jsonObject: JsonObject): StoryAreaTypeLocation {
        return StoryAreaTypeLocation(
            location = jsonObject.getObject(key = "location") { data -> deserializeLocation(jsonObject = data) },
            address = jsonObject.getObjectNullable(key = "address") { data -> deserializeLocationAddress(jsonObject = data) },
        )
    }

    private fun deserializeStoryAreaTypeMessage(jsonObject: JsonObject): StoryAreaTypeMessage {
        return StoryAreaTypeMessage(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
        )
    }

    private fun deserializeStoryAreaTypeSuggestedReaction(jsonObject: JsonObject): StoryAreaTypeSuggestedReaction {
        return StoryAreaTypeSuggestedReaction(
            reactionType = jsonObject.getObject(key = "reaction_type") { data -> deserializeReactionType(jsonObject = data) },
            totalCount = jsonObject.getInt(key = "total_count"),
            isDark = jsonObject.getBoolean(key = "is_dark"),
            isFlipped = jsonObject.getBoolean(key = "is_flipped"),
        )
    }

    private fun deserializeStoryAreaTypeUpgradedGift(jsonObject: JsonObject): StoryAreaTypeUpgradedGift {
        return StoryAreaTypeUpgradedGift(
            giftName = jsonObject.getString(key = "gift_name"),
        )
    }

    private fun deserializeStoryAreaTypeVenue(jsonObject: JsonObject): StoryAreaTypeVenue {
        return StoryAreaTypeVenue(
            venue = jsonObject.getObject(key = "venue") { data -> deserializeVenue(jsonObject = data) },
        )
    }

    private fun deserializeStoryAreaTypeWeather(jsonObject: JsonObject): StoryAreaTypeWeather {
        return StoryAreaTypeWeather(
            temperature = jsonObject.getDouble(key = "temperature"),
            emoji = jsonObject.getString(key = "emoji"),
            backgroundColor = jsonObject.getInt(key = "background_color"),
        )
    }

    private fun deserializeStoryContentPhoto(jsonObject: JsonObject): StoryContentPhoto {
        return StoryContentPhoto(
            photo = jsonObject.getObject(key = "photo") { data -> deserializePhoto(jsonObject = data) },
        )
    }

    private fun deserializeStoryContentUnsupported(jsonObject: JsonObject): StoryContentUnsupported {
        return StoryContentUnsupported()
    }

    private fun deserializeStoryContentVideo(jsonObject: JsonObject): StoryContentVideo {
        return StoryContentVideo(
            video = jsonObject.getObject(key = "video") { data -> deserializeStoryVideo(jsonObject = data) },
            alternativeVideo = jsonObject.getObjectNullable(key = "alternative_video") { data -> deserializeStoryVideo(jsonObject = data) },
        )
    }

    private fun deserializeStoryFullId(jsonObject: JsonObject): StoryFullId {
        return StoryFullId(
            posterChatId = jsonObject.getLong(key = "poster_chat_id"),
            storyId = jsonObject.getInt(key = "story_id"),
        )
    }

    private fun deserializeStoryInfo(jsonObject: JsonObject): StoryInfo {
        return StoryInfo(
            storyId = jsonObject.getInt(key = "story_id"),
            date = jsonObject.getInt(key = "date"),
            isForCloseFriends = jsonObject.getBoolean(key = "is_for_close_friends"),
        )
    }

    private fun deserializeStoryInteraction(jsonObject: JsonObject): StoryInteraction {
        return StoryInteraction(
            actorId = jsonObject.getObject(key = "actor_id") { data -> deserializeMessageSender(jsonObject = data) },
            interactionDate = jsonObject.getInt(key = "interaction_date"),
            blockList = jsonObject.getObjectNullable(key = "block_list") { data -> deserializeBlockList(jsonObject = data) },
            type = jsonObject.getObject(key = "type") { data -> deserializeStoryInteractionType(jsonObject = data) },
        )
    }

    private fun deserializeStoryInteractionInfo(jsonObject: JsonObject): StoryInteractionInfo {
        return StoryInteractionInfo(
            viewCount = jsonObject.getInt(key = "view_count"),
            forwardCount = jsonObject.getInt(key = "forward_count"),
            reactionCount = jsonObject.getInt(key = "reaction_count"),
            recentViewerUserIds = jsonObject.getLongs(key = "recent_viewer_user_ids"),
        )
    }

    private fun deserializeStoryInteractionTypeForward(jsonObject: JsonObject): StoryInteractionTypeForward {
        return StoryInteractionTypeForward(
            message = jsonObject.getObject(key = "message") { data -> deserializeMessage(jsonObject = data) },
        )
    }

    private fun deserializeStoryInteractionTypeRepost(jsonObject: JsonObject): StoryInteractionTypeRepost {
        return StoryInteractionTypeRepost(
            story = jsonObject.getObject(key = "story") { data -> deserializeStory(jsonObject = data) },
        )
    }

    private fun deserializeStoryInteractionTypeView(jsonObject: JsonObject): StoryInteractionTypeView {
        return StoryInteractionTypeView(
            chosenReactionType = jsonObject.getObjectNullable(key = "chosen_reaction_type") { data -> deserializeReactionType(jsonObject = data) },
        )
    }

    private fun deserializeStoryInteractions(jsonObject: JsonObject): StoryInteractions {
        return StoryInteractions(
            totalCount = jsonObject.getInt(key = "total_count"),
            totalForwardCount = jsonObject.getInt(key = "total_forward_count"),
            totalReactionCount = jsonObject.getInt(key = "total_reaction_count"),
            interactions = jsonObject.getObjects(key = "interactions") { data -> deserializeStoryInteraction(jsonObject = data) },
            nextOffset = jsonObject.getString(key = "next_offset"),
        )
    }

    private fun deserializeStoryListArchive(jsonObject: JsonObject): StoryListArchive {
        return StoryListArchive()
    }

    private fun deserializeStoryListMain(jsonObject: JsonObject): StoryListMain {
        return StoryListMain()
    }

    private fun deserializeStoryOriginHiddenUser(jsonObject: JsonObject): StoryOriginHiddenUser {
        return StoryOriginHiddenUser(
            posterName = jsonObject.getString(key = "poster_name"),
        )
    }

    private fun deserializeStoryOriginPublicStory(jsonObject: JsonObject): StoryOriginPublicStory {
        return StoryOriginPublicStory(
            chatId = jsonObject.getLong(key = "chat_id"),
            storyId = jsonObject.getInt(key = "story_id"),
        )
    }

    private fun deserializeStoryPrivacySettingsCloseFriends(jsonObject: JsonObject): StoryPrivacySettingsCloseFriends {
        return StoryPrivacySettingsCloseFriends()
    }

    private fun deserializeStoryPrivacySettingsContacts(jsonObject: JsonObject): StoryPrivacySettingsContacts {
        return StoryPrivacySettingsContacts(
            exceptUserIds = jsonObject.getLongs(key = "except_user_ids"),
        )
    }

    private fun deserializeStoryPrivacySettingsEveryone(jsonObject: JsonObject): StoryPrivacySettingsEveryone {
        return StoryPrivacySettingsEveryone(
            exceptUserIds = jsonObject.getLongs(key = "except_user_ids"),
        )
    }

    private fun deserializeStoryPrivacySettingsSelectedUsers(jsonObject: JsonObject): StoryPrivacySettingsSelectedUsers {
        return StoryPrivacySettingsSelectedUsers(
            userIds = jsonObject.getLongs(key = "user_ids"),
        )
    }

    private fun deserializeStoryRepostInfo(jsonObject: JsonObject): StoryRepostInfo {
        return StoryRepostInfo(
            origin = jsonObject.getObject(key = "origin") { data -> deserializeStoryOrigin(jsonObject = data) },
            isContentModified = jsonObject.getBoolean(key = "is_content_modified"),
        )
    }

    private fun deserializeStoryStatistics(jsonObject: JsonObject): StoryStatistics {
        return StoryStatistics(
            storyInteractionGraph = jsonObject.getObject(key = "story_interaction_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
            storyReactionGraph = jsonObject.getObject(key = "story_reaction_graph") { data -> deserializeStatisticalGraph(jsonObject = data) },
        )
    }

    private fun deserializeStoryVideo(jsonObject: JsonObject): StoryVideo {
        return StoryVideo(
            duration = jsonObject.getDouble(key = "duration"),
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            hasStickers = jsonObject.getBoolean(key = "has_stickers"),
            isAnimation = jsonObject.getBoolean(key = "is_animation"),
            minithumbnail = jsonObject.getObjectNullable(key = "minithumbnail") { data -> deserializeMinithumbnail(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeThumbnail(jsonObject = data) },
            preloadPrefixSize = jsonObject.getInt(key = "preload_prefix_size"),
            coverFrameTimestamp = jsonObject.getDouble(key = "cover_frame_timestamp"),
            video = jsonObject.getObject(key = "video") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeSuggestedActionCheckPassword(jsonObject: JsonObject): SuggestedActionCheckPassword {
        return SuggestedActionCheckPassword()
    }

    private fun deserializeSuggestedActionCheckPhoneNumber(jsonObject: JsonObject): SuggestedActionCheckPhoneNumber {
        return SuggestedActionCheckPhoneNumber()
    }

    private fun deserializeSuggestedActionConvertToBroadcastGroup(jsonObject: JsonObject): SuggestedActionConvertToBroadcastGroup {
        return SuggestedActionConvertToBroadcastGroup(
            supergroupId = jsonObject.getLong(key = "supergroup_id"),
        )
    }

    private fun deserializeSuggestedActionCustom(jsonObject: JsonObject): SuggestedActionCustom {
        return SuggestedActionCustom(
            name = jsonObject.getString(key = "name"),
            title = jsonObject.getObject(key = "title") { data -> deserializeFormattedText(jsonObject = data) },
            description = jsonObject.getObject(key = "description") { data -> deserializeFormattedText(jsonObject = data) },
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeSuggestedActionEnableArchiveAndMuteNewChats(jsonObject: JsonObject): SuggestedActionEnableArchiveAndMuteNewChats {
        return SuggestedActionEnableArchiveAndMuteNewChats()
    }

    private fun deserializeSuggestedActionExtendPremium(jsonObject: JsonObject): SuggestedActionExtendPremium {
        return SuggestedActionExtendPremium(
            managePremiumSubscriptionUrl = jsonObject.getString(key = "manage_premium_subscription_url"),
        )
    }

    private fun deserializeSuggestedActionExtendStarSubscriptions(jsonObject: JsonObject): SuggestedActionExtendStarSubscriptions {
        return SuggestedActionExtendStarSubscriptions()
    }

    private fun deserializeSuggestedActionGiftPremiumForChristmas(jsonObject: JsonObject): SuggestedActionGiftPremiumForChristmas {
        return SuggestedActionGiftPremiumForChristmas()
    }

    private fun deserializeSuggestedActionRestorePremium(jsonObject: JsonObject): SuggestedActionRestorePremium {
        return SuggestedActionRestorePremium()
    }

    private fun deserializeSuggestedActionSetBirthdate(jsonObject: JsonObject): SuggestedActionSetBirthdate {
        return SuggestedActionSetBirthdate()
    }

    private fun deserializeSuggestedActionSetPassword(jsonObject: JsonObject): SuggestedActionSetPassword {
        return SuggestedActionSetPassword(
            authorizationDelay = jsonObject.getInt(key = "authorization_delay"),
        )
    }

    private fun deserializeSuggestedActionSetProfilePhoto(jsonObject: JsonObject): SuggestedActionSetProfilePhoto {
        return SuggestedActionSetProfilePhoto()
    }

    private fun deserializeSuggestedActionSubscribeToAnnualPremium(jsonObject: JsonObject): SuggestedActionSubscribeToAnnualPremium {
        return SuggestedActionSubscribeToAnnualPremium()
    }

    private fun deserializeSuggestedActionUpgradePremium(jsonObject: JsonObject): SuggestedActionUpgradePremium {
        return SuggestedActionUpgradePremium()
    }

    private fun deserializeSuggestedActionViewChecksHint(jsonObject: JsonObject): SuggestedActionViewChecksHint {
        return SuggestedActionViewChecksHint()
    }

    private fun deserializeSupergroup(jsonObject: JsonObject): Supergroup {
        return Supergroup(
            id = jsonObject.getLong(key = "id"),
            usernames = jsonObject.getObjectNullable(key = "usernames") { data -> deserializeUsernames(jsonObject = data) },
            date = jsonObject.getInt(key = "date"),
            status = jsonObject.getObject(key = "status") { data -> deserializeChatMemberStatus(jsonObject = data) },
            memberCount = jsonObject.getInt(key = "member_count"),
            boostLevel = jsonObject.getInt(key = "boost_level"),
            hasAutomaticTranslation = jsonObject.getBoolean(key = "has_automatic_translation"),
            hasLinkedChat = jsonObject.getBoolean(key = "has_linked_chat"),
            hasLocation = jsonObject.getBoolean(key = "has_location"),
            signMessages = jsonObject.getBoolean(key = "sign_messages"),
            showMessageSender = jsonObject.getBoolean(key = "show_message_sender"),
            joinToSendMessages = jsonObject.getBoolean(key = "join_to_send_messages"),
            joinByRequest = jsonObject.getBoolean(key = "join_by_request"),
            isSlowModeEnabled = jsonObject.getBoolean(key = "is_slow_mode_enabled"),
            isChannel = jsonObject.getBoolean(key = "is_channel"),
            isBroadcastGroup = jsonObject.getBoolean(key = "is_broadcast_group"),
            isForum = jsonObject.getBoolean(key = "is_forum"),
            isDirectMessagesGroup = jsonObject.getBoolean(key = "is_direct_messages_group"),
            isAdministeredDirectMessagesGroup = jsonObject.getBoolean(key = "is_administered_direct_messages_group"),
            verificationStatus = jsonObject.getObjectNullable(key = "verification_status") { data -> deserializeVerificationStatus(jsonObject = data) },
            hasDirectMessagesGroup = jsonObject.getBoolean(key = "has_direct_messages_group"),
            hasForumTabs = jsonObject.getBoolean(key = "has_forum_tabs"),
            hasSensitiveContent = jsonObject.getBoolean(key = "has_sensitive_content"),
            restrictionReason = jsonObject.getString(key = "restriction_reason"),
            paidMessageStarCount = jsonObject.getLong(key = "paid_message_star_count"),
            hasActiveStories = jsonObject.getBoolean(key = "has_active_stories"),
            hasUnreadActiveStories = jsonObject.getBoolean(key = "has_unread_active_stories"),
        )
    }

    private fun deserializeSupergroupFullInfo(jsonObject: JsonObject): SupergroupFullInfo {
        return SupergroupFullInfo(
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializeChatPhoto(jsonObject = data) },
            description = jsonObject.getString(key = "description"),
            memberCount = jsonObject.getInt(key = "member_count"),
            administratorCount = jsonObject.getInt(key = "administrator_count"),
            restrictedCount = jsonObject.getInt(key = "restricted_count"),
            bannedCount = jsonObject.getInt(key = "banned_count"),
            linkedChatId = jsonObject.getLong(key = "linked_chat_id"),
            directMessagesChatId = jsonObject.getLong(key = "direct_messages_chat_id"),
            slowModeDelay = jsonObject.getInt(key = "slow_mode_delay"),
            slowModeDelayExpiresIn = jsonObject.getDouble(key = "slow_mode_delay_expires_in"),
            canEnablePaidMessages = jsonObject.getBoolean(key = "can_enable_paid_messages"),
            canEnablePaidReaction = jsonObject.getBoolean(key = "can_enable_paid_reaction"),
            canGetMembers = jsonObject.getBoolean(key = "can_get_members"),
            hasHiddenMembers = jsonObject.getBoolean(key = "has_hidden_members"),
            canHideMembers = jsonObject.getBoolean(key = "can_hide_members"),
            canSetStickerSet = jsonObject.getBoolean(key = "can_set_sticker_set"),
            canSetLocation = jsonObject.getBoolean(key = "can_set_location"),
            canGetStatistics = jsonObject.getBoolean(key = "can_get_statistics"),
            canGetRevenueStatistics = jsonObject.getBoolean(key = "can_get_revenue_statistics"),
            canGetStarRevenueStatistics = jsonObject.getBoolean(key = "can_get_star_revenue_statistics"),
            canSendGift = jsonObject.getBoolean(key = "can_send_gift"),
            canToggleAggressiveAntiSpam = jsonObject.getBoolean(key = "can_toggle_aggressive_anti_spam"),
            isAllHistoryAvailable = jsonObject.getBoolean(key = "is_all_history_available"),
            canHaveSponsoredMessages = jsonObject.getBoolean(key = "can_have_sponsored_messages"),
            hasAggressiveAntiSpamEnabled = jsonObject.getBoolean(key = "has_aggressive_anti_spam_enabled"),
            hasPaidMediaAllowed = jsonObject.getBoolean(key = "has_paid_media_allowed"),
            hasPinnedStories = jsonObject.getBoolean(key = "has_pinned_stories"),
            giftCount = jsonObject.getInt(key = "gift_count"),
            myBoostCount = jsonObject.getInt(key = "my_boost_count"),
            unrestrictBoostCount = jsonObject.getInt(key = "unrestrict_boost_count"),
            outgoingPaidMessageStarCount = jsonObject.getLong(key = "outgoing_paid_message_star_count"),
            stickerSetId = jsonObject.getLong(key = "sticker_set_id"),
            customEmojiStickerSetId = jsonObject.getLong(key = "custom_emoji_sticker_set_id"),
            location = jsonObject.getObjectNullable(key = "location") { data -> deserializeChatLocation(jsonObject = data) },
            inviteLink = jsonObject.getObjectNullable(key = "invite_link") { data -> deserializeChatInviteLink(jsonObject = data) },
            botCommands = jsonObject.getObjects(key = "bot_commands") { data -> deserializeBotCommands(jsonObject = data) },
            botVerification = jsonObject.getObjectNullable(key = "bot_verification") { data -> deserializeBotVerification(jsonObject = data) },
            upgradedFromBasicGroupId = jsonObject.getLong(key = "upgraded_from_basic_group_id"),
            upgradedFromMaxMessageId = jsonObject.getLong(key = "upgraded_from_max_message_id"),
        )
    }

    private fun deserializeSupergroupMembersFilterAdministrators(jsonObject: JsonObject): SupergroupMembersFilterAdministrators {
        return SupergroupMembersFilterAdministrators()
    }

    private fun deserializeSupergroupMembersFilterBanned(jsonObject: JsonObject): SupergroupMembersFilterBanned {
        return SupergroupMembersFilterBanned(
            query = jsonObject.getString(key = "query"),
        )
    }

    private fun deserializeSupergroupMembersFilterBots(jsonObject: JsonObject): SupergroupMembersFilterBots {
        return SupergroupMembersFilterBots()
    }

    private fun deserializeSupergroupMembersFilterContacts(jsonObject: JsonObject): SupergroupMembersFilterContacts {
        return SupergroupMembersFilterContacts(
            query = jsonObject.getString(key = "query"),
        )
    }

    private fun deserializeSupergroupMembersFilterMention(jsonObject: JsonObject): SupergroupMembersFilterMention {
        return SupergroupMembersFilterMention(
            query = jsonObject.getString(key = "query"),
            messageThreadId = jsonObject.getLong(key = "message_thread_id"),
        )
    }

    private fun deserializeSupergroupMembersFilterRecent(jsonObject: JsonObject): SupergroupMembersFilterRecent {
        return SupergroupMembersFilterRecent()
    }

    private fun deserializeSupergroupMembersFilterRestricted(jsonObject: JsonObject): SupergroupMembersFilterRestricted {
        return SupergroupMembersFilterRestricted(
            query = jsonObject.getString(key = "query"),
        )
    }

    private fun deserializeSupergroupMembersFilterSearch(jsonObject: JsonObject): SupergroupMembersFilterSearch {
        return SupergroupMembersFilterSearch(
            query = jsonObject.getString(key = "query"),
        )
    }

    private fun deserializeTMeUrl(jsonObject: JsonObject): TMeUrl {
        return TMeUrl(
            url = jsonObject.getString(key = "url"),
            type = jsonObject.getObject(key = "type") { data -> deserializeTMeUrlType(jsonObject = data) },
        )
    }

    private fun deserializeTMeUrlTypeChatInvite(jsonObject: JsonObject): TMeUrlTypeChatInvite {
        return TMeUrlTypeChatInvite(
            info = jsonObject.getObject(key = "info") { data -> deserializeChatInviteLinkInfo(jsonObject = data) },
        )
    }

    private fun deserializeTMeUrlTypeStickerSet(jsonObject: JsonObject): TMeUrlTypeStickerSet {
        return TMeUrlTypeStickerSet(
            stickerSetId = jsonObject.getLong(key = "sticker_set_id"),
        )
    }

    private fun deserializeTMeUrlTypeSupergroup(jsonObject: JsonObject): TMeUrlTypeSupergroup {
        return TMeUrlTypeSupergroup(
            supergroupId = jsonObject.getLong(key = "supergroup_id"),
        )
    }

    private fun deserializeTMeUrlTypeUser(jsonObject: JsonObject): TMeUrlTypeUser {
        return TMeUrlTypeUser(
            userId = jsonObject.getLong(key = "user_id"),
        )
    }

    private fun deserializeTMeUrls(jsonObject: JsonObject): TMeUrls {
        return TMeUrls(
            urls = jsonObject.getObjects(key = "urls") { data -> deserializeTMeUrl(jsonObject = data) },
        )
    }

    private fun deserializeTargetChatChosen(jsonObject: JsonObject): TargetChatChosen {
        return TargetChatChosen(
            types = jsonObject.getObject(key = "types") { data -> deserializeTargetChatTypes(jsonObject = data) },
        )
    }

    private fun deserializeTargetChatCurrent(jsonObject: JsonObject): TargetChatCurrent {
        return TargetChatCurrent()
    }

    private fun deserializeTargetChatInternalLink(jsonObject: JsonObject): TargetChatInternalLink {
        return TargetChatInternalLink(
            link = jsonObject.getObject(key = "link") { data -> deserializeInternalLinkType(jsonObject = data) },
        )
    }

    private fun deserializeTargetChatTypes(jsonObject: JsonObject): TargetChatTypes {
        return TargetChatTypes(
            allowUserChats = jsonObject.getBoolean(key = "allow_user_chats"),
            allowBotChats = jsonObject.getBoolean(key = "allow_bot_chats"),
            allowGroupChats = jsonObject.getBoolean(key = "allow_group_chats"),
            allowChannelChats = jsonObject.getBoolean(key = "allow_channel_chats"),
        )
    }

    private fun deserializeTelegramPaymentPurposeGiftedStars(jsonObject: JsonObject): TelegramPaymentPurposeGiftedStars {
        return TelegramPaymentPurposeGiftedStars(
            userId = jsonObject.getLong(key = "user_id"),
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            starCount = jsonObject.getLong(key = "star_count"),
        )
    }

    private fun deserializeTelegramPaymentPurposeJoinChat(jsonObject: JsonObject): TelegramPaymentPurposeJoinChat {
        return TelegramPaymentPurposeJoinChat(
            inviteLink = jsonObject.getString(key = "invite_link"),
        )
    }

    private fun deserializeTelegramPaymentPurposePremiumGift(jsonObject: JsonObject): TelegramPaymentPurposePremiumGift {
        return TelegramPaymentPurposePremiumGift(
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            userId = jsonObject.getLong(key = "user_id"),
            monthCount = jsonObject.getInt(key = "month_count"),
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializeTelegramPaymentPurposePremiumGiftCodes(jsonObject: JsonObject): TelegramPaymentPurposePremiumGiftCodes {
        return TelegramPaymentPurposePremiumGiftCodes(
            boostedChatId = jsonObject.getLong(key = "boosted_chat_id"),
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            userIds = jsonObject.getLongs(key = "user_ids"),
            monthCount = jsonObject.getInt(key = "month_count"),
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
        )
    }

    private fun deserializeTelegramPaymentPurposePremiumGiveaway(jsonObject: JsonObject): TelegramPaymentPurposePremiumGiveaway {
        return TelegramPaymentPurposePremiumGiveaway(
            parameters = jsonObject.getObject(key = "parameters") { data -> deserializeGiveawayParameters(jsonObject = data) },
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            winnerCount = jsonObject.getInt(key = "winner_count"),
            monthCount = jsonObject.getInt(key = "month_count"),
        )
    }

    private fun deserializeTelegramPaymentPurposeStarGiveaway(jsonObject: JsonObject): TelegramPaymentPurposeStarGiveaway {
        return TelegramPaymentPurposeStarGiveaway(
            parameters = jsonObject.getObject(key = "parameters") { data -> deserializeGiveawayParameters(jsonObject = data) },
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            winnerCount = jsonObject.getInt(key = "winner_count"),
            starCount = jsonObject.getLong(key = "star_count"),
        )
    }

    private fun deserializeTelegramPaymentPurposeStars(jsonObject: JsonObject): TelegramPaymentPurposeStars {
        return TelegramPaymentPurposeStars(
            currency = jsonObject.getString(key = "currency"),
            amount = jsonObject.getLong(key = "amount"),
            starCount = jsonObject.getLong(key = "star_count"),
        )
    }

    private fun deserializeTemporaryPasswordState(jsonObject: JsonObject): TemporaryPasswordState {
        return TemporaryPasswordState(
            hasPassword = jsonObject.getBoolean(key = "has_password"),
            validFor = jsonObject.getInt(key = "valid_for"),
        )
    }

    private fun deserializeTermsOfService(jsonObject: JsonObject): TermsOfService {
        return TermsOfService(
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            minUserAge = jsonObject.getInt(key = "min_user_age"),
            showPopup = jsonObject.getBoolean(key = "show_popup"),
        )
    }

    private fun deserializeTestBytes(jsonObject: JsonObject): TestBytes {
        return TestBytes(
            value = jsonObject.getBytes(key = "value"),
        )
    }

    private fun deserializeTestInt(jsonObject: JsonObject): TestInt {
        return TestInt(
            value = jsonObject.getInt(key = "value"),
        )
    }

    private fun deserializeTestString(jsonObject: JsonObject): TestString {
        return TestString(
            value = jsonObject.getString(key = "value"),
        )
    }

    private fun deserializeTestVectorInt(jsonObject: JsonObject): TestVectorInt {
        return TestVectorInt(
            value = jsonObject.getInts(key = "value"),
        )
    }

    private fun deserializeTestVectorIntObject(jsonObject: JsonObject): TestVectorIntObject {
        return TestVectorIntObject(
            value = jsonObject.getObjects(key = "value") { data -> deserializeTestInt(jsonObject = data) },
        )
    }

    private fun deserializeTestVectorString(jsonObject: JsonObject): TestVectorString {
        return TestVectorString(
            value = jsonObject.getStrings(key = "value"),
        )
    }

    private fun deserializeTestVectorStringObject(jsonObject: JsonObject): TestVectorStringObject {
        return TestVectorStringObject(
            value = jsonObject.getObjects(key = "value") { data -> deserializeTestString(jsonObject = data) },
        )
    }

    private fun deserializeText(jsonObject: JsonObject): Text {
        return Text(
            text = jsonObject.getString(key = "text"),
        )
    }

    private fun deserializeTextEntities(jsonObject: JsonObject): TextEntities {
        return TextEntities(
            entities = jsonObject.getObjects(key = "entities") { data -> deserializeTextEntity(jsonObject = data) },
        )
    }

    private fun deserializeTextEntity(jsonObject: JsonObject): TextEntity {
        return TextEntity(
            offset = jsonObject.getInt(key = "offset"),
            length = jsonObject.getInt(key = "length"),
            type = jsonObject.getObject(key = "type") { data -> deserializeTextEntityType(jsonObject = data) },
        )
    }

    private fun deserializeTextEntityTypeBankCardNumber(jsonObject: JsonObject): TextEntityTypeBankCardNumber {
        return TextEntityTypeBankCardNumber()
    }

    private fun deserializeTextEntityTypeBlockQuote(jsonObject: JsonObject): TextEntityTypeBlockQuote {
        return TextEntityTypeBlockQuote()
    }

    private fun deserializeTextEntityTypeBold(jsonObject: JsonObject): TextEntityTypeBold {
        return TextEntityTypeBold()
    }

    private fun deserializeTextEntityTypeBotCommand(jsonObject: JsonObject): TextEntityTypeBotCommand {
        return TextEntityTypeBotCommand()
    }

    private fun deserializeTextEntityTypeCashtag(jsonObject: JsonObject): TextEntityTypeCashtag {
        return TextEntityTypeCashtag()
    }

    private fun deserializeTextEntityTypeCode(jsonObject: JsonObject): TextEntityTypeCode {
        return TextEntityTypeCode()
    }

    private fun deserializeTextEntityTypeCustomEmoji(jsonObject: JsonObject): TextEntityTypeCustomEmoji {
        return TextEntityTypeCustomEmoji(
            customEmojiId = jsonObject.getLong(key = "custom_emoji_id"),
        )
    }

    private fun deserializeTextEntityTypeEmailAddress(jsonObject: JsonObject): TextEntityTypeEmailAddress {
        return TextEntityTypeEmailAddress()
    }

    private fun deserializeTextEntityTypeExpandableBlockQuote(jsonObject: JsonObject): TextEntityTypeExpandableBlockQuote {
        return TextEntityTypeExpandableBlockQuote()
    }

    private fun deserializeTextEntityTypeHashtag(jsonObject: JsonObject): TextEntityTypeHashtag {
        return TextEntityTypeHashtag()
    }

    private fun deserializeTextEntityTypeItalic(jsonObject: JsonObject): TextEntityTypeItalic {
        return TextEntityTypeItalic()
    }

    private fun deserializeTextEntityTypeMediaTimestamp(jsonObject: JsonObject): TextEntityTypeMediaTimestamp {
        return TextEntityTypeMediaTimestamp(
            mediaTimestamp = jsonObject.getInt(key = "media_timestamp"),
        )
    }

    private fun deserializeTextEntityTypeMention(jsonObject: JsonObject): TextEntityTypeMention {
        return TextEntityTypeMention()
    }

    private fun deserializeTextEntityTypeMentionName(jsonObject: JsonObject): TextEntityTypeMentionName {
        return TextEntityTypeMentionName(
            userId = jsonObject.getLong(key = "user_id"),
        )
    }

    private fun deserializeTextEntityTypePhoneNumber(jsonObject: JsonObject): TextEntityTypePhoneNumber {
        return TextEntityTypePhoneNumber()
    }

    private fun deserializeTextEntityTypePre(jsonObject: JsonObject): TextEntityTypePre {
        return TextEntityTypePre()
    }

    private fun deserializeTextEntityTypePreCode(jsonObject: JsonObject): TextEntityTypePreCode {
        return TextEntityTypePreCode(
            language = jsonObject.getString(key = "language"),
        )
    }

    private fun deserializeTextEntityTypeSpoiler(jsonObject: JsonObject): TextEntityTypeSpoiler {
        return TextEntityTypeSpoiler()
    }

    private fun deserializeTextEntityTypeStrikethrough(jsonObject: JsonObject): TextEntityTypeStrikethrough {
        return TextEntityTypeStrikethrough()
    }

    private fun deserializeTextEntityTypeTextUrl(jsonObject: JsonObject): TextEntityTypeTextUrl {
        return TextEntityTypeTextUrl(
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeTextEntityTypeUnderline(jsonObject: JsonObject): TextEntityTypeUnderline {
        return TextEntityTypeUnderline()
    }

    private fun deserializeTextEntityTypeUrl(jsonObject: JsonObject): TextEntityTypeUrl {
        return TextEntityTypeUrl()
    }

    private fun deserializeTextParseModeHTML(jsonObject: JsonObject): TextParseModeHTML {
        return TextParseModeHTML()
    }

    private fun deserializeTextParseModeMarkdown(jsonObject: JsonObject): TextParseModeMarkdown {
        return TextParseModeMarkdown(
            version = jsonObject.getInt(key = "version"),
        )
    }

    private fun deserializeTextQuote(jsonObject: JsonObject): TextQuote {
        return TextQuote(
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            position = jsonObject.getInt(key = "position"),
            isManual = jsonObject.getBoolean(key = "is_manual"),
        )
    }

    private fun deserializeThemeParameters(jsonObject: JsonObject): ThemeParameters {
        return ThemeParameters(
            backgroundColor = jsonObject.getInt(key = "background_color"),
            secondaryBackgroundColor = jsonObject.getInt(key = "secondary_background_color"),
            headerBackgroundColor = jsonObject.getInt(key = "header_background_color"),
            bottomBarBackgroundColor = jsonObject.getInt(key = "bottom_bar_background_color"),
            sectionBackgroundColor = jsonObject.getInt(key = "section_background_color"),
            sectionSeparatorColor = jsonObject.getInt(key = "section_separator_color"),
            textColor = jsonObject.getInt(key = "text_color"),
            accentTextColor = jsonObject.getInt(key = "accent_text_color"),
            sectionHeaderTextColor = jsonObject.getInt(key = "section_header_text_color"),
            subtitleTextColor = jsonObject.getInt(key = "subtitle_text_color"),
            destructiveTextColor = jsonObject.getInt(key = "destructive_text_color"),
            hintColor = jsonObject.getInt(key = "hint_color"),
            linkColor = jsonObject.getInt(key = "link_color"),
            buttonColor = jsonObject.getInt(key = "button_color"),
            buttonTextColor = jsonObject.getInt(key = "button_text_color"),
        )
    }

    private fun deserializeThemeSettings(jsonObject: JsonObject): ThemeSettings {
        return ThemeSettings(
            accentColor = jsonObject.getInt(key = "accent_color"),
            background = jsonObject.getObjectNullable(key = "background") { data -> deserializeBackground(jsonObject = data) },
            outgoingMessageFill = jsonObject.getObject(key = "outgoing_message_fill") { data -> deserializeBackgroundFill(jsonObject = data) },
            animateOutgoingMessageFill = jsonObject.getBoolean(key = "animate_outgoing_message_fill"),
            outgoingMessageAccentColor = jsonObject.getInt(key = "outgoing_message_accent_color"),
        )
    }

    private fun deserializeThumbnail(jsonObject: JsonObject): Thumbnail {
        return Thumbnail(
            format = jsonObject.getObject(key = "format") { data -> deserializeThumbnailFormat(jsonObject = data) },
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            file = jsonObject.getObject(key = "file") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeThumbnailFormatGif(jsonObject: JsonObject): ThumbnailFormatGif {
        return ThumbnailFormatGif()
    }

    private fun deserializeThumbnailFormatJpeg(jsonObject: JsonObject): ThumbnailFormatJpeg {
        return ThumbnailFormatJpeg()
    }

    private fun deserializeThumbnailFormatMpeg4(jsonObject: JsonObject): ThumbnailFormatMpeg4 {
        return ThumbnailFormatMpeg4()
    }

    private fun deserializeThumbnailFormatPng(jsonObject: JsonObject): ThumbnailFormatPng {
        return ThumbnailFormatPng()
    }

    private fun deserializeThumbnailFormatTgs(jsonObject: JsonObject): ThumbnailFormatTgs {
        return ThumbnailFormatTgs()
    }

    private fun deserializeThumbnailFormatWebm(jsonObject: JsonObject): ThumbnailFormatWebm {
        return ThumbnailFormatWebm()
    }

    private fun deserializeThumbnailFormatWebp(jsonObject: JsonObject): ThumbnailFormatWebp {
        return ThumbnailFormatWebp()
    }

    private fun deserializeTimeZone(jsonObject: JsonObject): TimeZone {
        return TimeZone(
            id = jsonObject.getString(key = "id"),
            name = jsonObject.getString(key = "name"),
            utcTimeOffset = jsonObject.getInt(key = "utc_time_offset"),
        )
    }

    private fun deserializeTimeZones(jsonObject: JsonObject): TimeZones {
        return TimeZones(
            timeZones = jsonObject.getObjects(key = "time_zones") { data -> deserializeTimeZone(jsonObject = data) },
        )
    }

    private fun deserializeTopChatCategoryBots(jsonObject: JsonObject): TopChatCategoryBots {
        return TopChatCategoryBots()
    }

    private fun deserializeTopChatCategoryCalls(jsonObject: JsonObject): TopChatCategoryCalls {
        return TopChatCategoryCalls()
    }

    private fun deserializeTopChatCategoryChannels(jsonObject: JsonObject): TopChatCategoryChannels {
        return TopChatCategoryChannels()
    }

    private fun deserializeTopChatCategoryForwardChats(jsonObject: JsonObject): TopChatCategoryForwardChats {
        return TopChatCategoryForwardChats()
    }

    private fun deserializeTopChatCategoryGroups(jsonObject: JsonObject): TopChatCategoryGroups {
        return TopChatCategoryGroups()
    }

    private fun deserializeTopChatCategoryInlineBots(jsonObject: JsonObject): TopChatCategoryInlineBots {
        return TopChatCategoryInlineBots()
    }

    private fun deserializeTopChatCategoryUsers(jsonObject: JsonObject): TopChatCategoryUsers {
        return TopChatCategoryUsers()
    }

    private fun deserializeTopChatCategoryWebAppBots(jsonObject: JsonObject): TopChatCategoryWebAppBots {
        return TopChatCategoryWebAppBots()
    }

    private fun deserializeTrendingStickerSets(jsonObject: JsonObject): TrendingStickerSets {
        return TrendingStickerSets(
            totalCount = jsonObject.getInt(key = "total_count"),
            sets = jsonObject.getObjects(key = "sets") { data -> deserializeStickerSetInfo(jsonObject = data) },
            isPremium = jsonObject.getBoolean(key = "is_premium"),
        )
    }

    private fun deserializeUnconfirmedSession(jsonObject: JsonObject): UnconfirmedSession {
        return UnconfirmedSession(
            id = jsonObject.getLong(key = "id"),
            logInDate = jsonObject.getInt(key = "log_in_date"),
            deviceModel = jsonObject.getString(key = "device_model"),
            location = jsonObject.getString(key = "location"),
        )
    }

    private fun deserializeUnreadReaction(jsonObject: JsonObject): UnreadReaction {
        return UnreadReaction(
            type = jsonObject.getObject(key = "type") { data -> deserializeReactionType(jsonObject = data) },
            senderId = jsonObject.getObject(key = "sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            isBig = jsonObject.getBoolean(key = "is_big"),
        )
    }

    private fun deserializeUpdateAccentColors(jsonObject: JsonObject): UpdateAccentColors {
        return UpdateAccentColors(
            colors = jsonObject.getObjects(key = "colors") { data -> deserializeAccentColor(jsonObject = data) },
            availableAccentColorIds = jsonObject.getInts(key = "available_accent_color_ids"),
        )
    }

    private fun deserializeUpdateActiveEmojiReactions(jsonObject: JsonObject): UpdateActiveEmojiReactions {
        return UpdateActiveEmojiReactions(
            emojis = jsonObject.getStrings(key = "emojis"),
        )
    }

    private fun deserializeUpdateActiveLiveLocationMessages(jsonObject: JsonObject): UpdateActiveLiveLocationMessages {
        return UpdateActiveLiveLocationMessages(
            messages = jsonObject.getObjects(key = "messages") { data -> deserializeMessage(jsonObject = data) },
        )
    }

    private fun deserializeUpdateActiveNotifications(jsonObject: JsonObject): UpdateActiveNotifications {
        return UpdateActiveNotifications(
            groups = jsonObject.getObjects(key = "groups") { data -> deserializeNotificationGroup(jsonObject = data) },
        )
    }

    private fun deserializeUpdateAnimatedEmojiMessageClicked(jsonObject: JsonObject): UpdateAnimatedEmojiMessageClicked {
        return UpdateAnimatedEmojiMessageClicked(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            sticker = jsonObject.getObject(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
        )
    }

    private fun deserializeUpdateAnimationSearchParameters(jsonObject: JsonObject): UpdateAnimationSearchParameters {
        return UpdateAnimationSearchParameters(
            provider = jsonObject.getString(key = "provider"),
            emojis = jsonObject.getStrings(key = "emojis"),
        )
    }

    private fun deserializeUpdateApplicationRecaptchaVerificationRequired(jsonObject: JsonObject): UpdateApplicationRecaptchaVerificationRequired {
        return UpdateApplicationRecaptchaVerificationRequired(
            verificationId = jsonObject.getLong(key = "verification_id"),
            action = jsonObject.getString(key = "action"),
            recaptchaKeyId = jsonObject.getString(key = "recaptcha_key_id"),
        )
    }

    private fun deserializeUpdateApplicationVerificationRequired(jsonObject: JsonObject): UpdateApplicationVerificationRequired {
        return UpdateApplicationVerificationRequired(
            verificationId = jsonObject.getLong(key = "verification_id"),
            nonce = jsonObject.getString(key = "nonce"),
            cloudProjectNumber = jsonObject.getLong(key = "cloud_project_number"),
        )
    }

    private fun deserializeUpdateAttachmentMenuBots(jsonObject: JsonObject): UpdateAttachmentMenuBots {
        return UpdateAttachmentMenuBots(
            bots = jsonObject.getObjects(key = "bots") { data -> deserializeAttachmentMenuBot(jsonObject = data) },
        )
    }

    private fun deserializeUpdateAuthorizationState(jsonObject: JsonObject): UpdateAuthorizationState {
        return UpdateAuthorizationState(
            authorizationState = jsonObject.getObject(key = "authorization_state") { data -> deserializeAuthorizationState(jsonObject = data) },
        )
    }

    private fun deserializeUpdateAutosaveSettings(jsonObject: JsonObject): UpdateAutosaveSettings {
        return UpdateAutosaveSettings(
            scope = jsonObject.getObject(key = "scope") { data -> deserializeAutosaveSettingsScope(jsonObject = data) },
            settings = jsonObject.getObjectNullable(key = "settings") { data -> deserializeScopeAutosaveSettings(jsonObject = data) },
        )
    }

    private fun deserializeUpdateAvailableMessageEffects(jsonObject: JsonObject): UpdateAvailableMessageEffects {
        return UpdateAvailableMessageEffects(
            reactionEffectIds = jsonObject.getLongs(key = "reaction_effect_ids"),
            stickerEffectIds = jsonObject.getLongs(key = "sticker_effect_ids"),
        )
    }

    private fun deserializeUpdateBasicGroup(jsonObject: JsonObject): UpdateBasicGroup {
        return UpdateBasicGroup(
            basicGroup = jsonObject.getObject(key = "basic_group") { data -> deserializeBasicGroup(jsonObject = data) },
        )
    }

    private fun deserializeUpdateBasicGroupFullInfo(jsonObject: JsonObject): UpdateBasicGroupFullInfo {
        return UpdateBasicGroupFullInfo(
            basicGroupId = jsonObject.getLong(key = "basic_group_id"),
            basicGroupFullInfo = jsonObject.getObject(key = "basic_group_full_info") { data -> deserializeBasicGroupFullInfo(jsonObject = data) },
        )
    }

    private fun deserializeUpdateBusinessConnection(jsonObject: JsonObject): UpdateBusinessConnection {
        return UpdateBusinessConnection(
            connection = jsonObject.getObject(key = "connection") { data -> deserializeBusinessConnection(jsonObject = data) },
        )
    }

    private fun deserializeUpdateBusinessMessageEdited(jsonObject: JsonObject): UpdateBusinessMessageEdited {
        return UpdateBusinessMessageEdited(
            connectionId = jsonObject.getString(key = "connection_id"),
            message = jsonObject.getObject(key = "message") { data -> deserializeBusinessMessage(jsonObject = data) },
        )
    }

    private fun deserializeUpdateBusinessMessagesDeleted(jsonObject: JsonObject): UpdateBusinessMessagesDeleted {
        return UpdateBusinessMessagesDeleted(
            connectionId = jsonObject.getString(key = "connection_id"),
            chatId = jsonObject.getLong(key = "chat_id"),
            messageIds = jsonObject.getLongs(key = "message_ids"),
        )
    }

    private fun deserializeUpdateCall(jsonObject: JsonObject): UpdateCall {
        return UpdateCall(
            call = jsonObject.getObject(key = "call") { data -> deserializeCall(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatAccentColors(jsonObject: JsonObject): UpdateChatAccentColors {
        return UpdateChatAccentColors(
            chatId = jsonObject.getLong(key = "chat_id"),
            accentColorId = jsonObject.getInt(key = "accent_color_id"),
            backgroundCustomEmojiId = jsonObject.getLong(key = "background_custom_emoji_id"),
            profileAccentColorId = jsonObject.getInt(key = "profile_accent_color_id"),
            profileBackgroundCustomEmojiId = jsonObject.getLong(key = "profile_background_custom_emoji_id"),
        )
    }

    private fun deserializeUpdateChatAction(jsonObject: JsonObject): UpdateChatAction {
        return UpdateChatAction(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageThreadId = jsonObject.getLong(key = "message_thread_id"),
            senderId = jsonObject.getObject(key = "sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            action = jsonObject.getObject(key = "action") { data -> deserializeChatAction(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatActionBar(jsonObject: JsonObject): UpdateChatActionBar {
        return UpdateChatActionBar(
            chatId = jsonObject.getLong(key = "chat_id"),
            actionBar = jsonObject.getObjectNullable(key = "action_bar") { data -> deserializeChatActionBar(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatActiveStories(jsonObject: JsonObject): UpdateChatActiveStories {
        return UpdateChatActiveStories(
            activeStories = jsonObject.getObject(key = "active_stories") { data -> deserializeChatActiveStories(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatAddedToList(jsonObject: JsonObject): UpdateChatAddedToList {
        return UpdateChatAddedToList(
            chatId = jsonObject.getLong(key = "chat_id"),
            chatList = jsonObject.getObject(key = "chat_list") { data -> deserializeChatList(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatAvailableReactions(jsonObject: JsonObject): UpdateChatAvailableReactions {
        return UpdateChatAvailableReactions(
            chatId = jsonObject.getLong(key = "chat_id"),
            availableReactions = jsonObject.getObject(key = "available_reactions") { data -> deserializeChatAvailableReactions(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatBackground(jsonObject: JsonObject): UpdateChatBackground {
        return UpdateChatBackground(
            chatId = jsonObject.getLong(key = "chat_id"),
            background = jsonObject.getObjectNullable(key = "background") { data -> deserializeChatBackground(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatBlockList(jsonObject: JsonObject): UpdateChatBlockList {
        return UpdateChatBlockList(
            chatId = jsonObject.getLong(key = "chat_id"),
            blockList = jsonObject.getObjectNullable(key = "block_list") { data -> deserializeBlockList(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatBoost(jsonObject: JsonObject): UpdateChatBoost {
        return UpdateChatBoost(
            chatId = jsonObject.getLong(key = "chat_id"),
            boost = jsonObject.getObject(key = "boost") { data -> deserializeChatBoost(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatBusinessBotManageBar(jsonObject: JsonObject): UpdateChatBusinessBotManageBar {
        return UpdateChatBusinessBotManageBar(
            chatId = jsonObject.getLong(key = "chat_id"),
            businessBotManageBar = jsonObject.getObjectNullable(key = "business_bot_manage_bar") { data -> deserializeBusinessBotManageBar(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatDefaultDisableNotification(jsonObject: JsonObject): UpdateChatDefaultDisableNotification {
        return UpdateChatDefaultDisableNotification(
            chatId = jsonObject.getLong(key = "chat_id"),
            defaultDisableNotification = jsonObject.getBoolean(key = "default_disable_notification"),
        )
    }

    private fun deserializeUpdateChatDraftMessage(jsonObject: JsonObject): UpdateChatDraftMessage {
        return UpdateChatDraftMessage(
            chatId = jsonObject.getLong(key = "chat_id"),
            draftMessage = jsonObject.getObjectNullable(key = "draft_message") { data -> deserializeDraftMessage(jsonObject = data) },
            positions = jsonObject.getObjects(key = "positions") { data -> deserializeChatPosition(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatEmojiStatus(jsonObject: JsonObject): UpdateChatEmojiStatus {
        return UpdateChatEmojiStatus(
            chatId = jsonObject.getLong(key = "chat_id"),
            emojiStatus = jsonObject.getObjectNullable(key = "emoji_status") { data -> deserializeEmojiStatus(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatFolders(jsonObject: JsonObject): UpdateChatFolders {
        return UpdateChatFolders(
            chatFolders = jsonObject.getObjects(key = "chat_folders") { data -> deserializeChatFolderInfo(jsonObject = data) },
            mainChatListPosition = jsonObject.getInt(key = "main_chat_list_position"),
            areTagsEnabled = jsonObject.getBoolean(key = "are_tags_enabled"),
        )
    }

    private fun deserializeUpdateChatHasProtectedContent(jsonObject: JsonObject): UpdateChatHasProtectedContent {
        return UpdateChatHasProtectedContent(
            chatId = jsonObject.getLong(key = "chat_id"),
            hasProtectedContent = jsonObject.getBoolean(key = "has_protected_content"),
        )
    }

    private fun deserializeUpdateChatHasScheduledMessages(jsonObject: JsonObject): UpdateChatHasScheduledMessages {
        return UpdateChatHasScheduledMessages(
            chatId = jsonObject.getLong(key = "chat_id"),
            hasScheduledMessages = jsonObject.getBoolean(key = "has_scheduled_messages"),
        )
    }

    private fun deserializeUpdateChatIsMarkedAsUnread(jsonObject: JsonObject): UpdateChatIsMarkedAsUnread {
        return UpdateChatIsMarkedAsUnread(
            chatId = jsonObject.getLong(key = "chat_id"),
            isMarkedAsUnread = jsonObject.getBoolean(key = "is_marked_as_unread"),
        )
    }

    private fun deserializeUpdateChatIsTranslatable(jsonObject: JsonObject): UpdateChatIsTranslatable {
        return UpdateChatIsTranslatable(
            chatId = jsonObject.getLong(key = "chat_id"),
            isTranslatable = jsonObject.getBoolean(key = "is_translatable"),
        )
    }

    private fun deserializeUpdateChatLastMessage(jsonObject: JsonObject): UpdateChatLastMessage {
        return UpdateChatLastMessage(
            chatId = jsonObject.getLong(key = "chat_id"),
            lastMessage = jsonObject.getObjectNullable(key = "last_message") { data -> deserializeMessage(jsonObject = data) },
            positions = jsonObject.getObjects(key = "positions") { data -> deserializeChatPosition(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatMember(jsonObject: JsonObject): UpdateChatMember {
        return UpdateChatMember(
            chatId = jsonObject.getLong(key = "chat_id"),
            actorUserId = jsonObject.getLong(key = "actor_user_id"),
            date = jsonObject.getInt(key = "date"),
            inviteLink = jsonObject.getObjectNullable(key = "invite_link") { data -> deserializeChatInviteLink(jsonObject = data) },
            viaJoinRequest = jsonObject.getBoolean(key = "via_join_request"),
            viaChatFolderInviteLink = jsonObject.getBoolean(key = "via_chat_folder_invite_link"),
            oldChatMember = jsonObject.getObject(key = "old_chat_member") { data -> deserializeChatMember(jsonObject = data) },
            newChatMember = jsonObject.getObject(key = "new_chat_member") { data -> deserializeChatMember(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatMessageAutoDeleteTime(jsonObject: JsonObject): UpdateChatMessageAutoDeleteTime {
        return UpdateChatMessageAutoDeleteTime(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageAutoDeleteTime = jsonObject.getInt(key = "message_auto_delete_time"),
        )
    }

    private fun deserializeUpdateChatMessageSender(jsonObject: JsonObject): UpdateChatMessageSender {
        return UpdateChatMessageSender(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageSenderId = jsonObject.getObjectNullable(key = "message_sender_id") { data -> deserializeMessageSender(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatNotificationSettings(jsonObject: JsonObject): UpdateChatNotificationSettings {
        return UpdateChatNotificationSettings(
            chatId = jsonObject.getLong(key = "chat_id"),
            notificationSettings = jsonObject.getObject(key = "notification_settings") { data -> deserializeChatNotificationSettings(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatOnlineMemberCount(jsonObject: JsonObject): UpdateChatOnlineMemberCount {
        return UpdateChatOnlineMemberCount(
            chatId = jsonObject.getLong(key = "chat_id"),
            onlineMemberCount = jsonObject.getInt(key = "online_member_count"),
        )
    }

    private fun deserializeUpdateChatPendingJoinRequests(jsonObject: JsonObject): UpdateChatPendingJoinRequests {
        return UpdateChatPendingJoinRequests(
            chatId = jsonObject.getLong(key = "chat_id"),
            pendingJoinRequests = jsonObject.getObjectNullable(key = "pending_join_requests") { data -> deserializeChatJoinRequestsInfo(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatPermissions(jsonObject: JsonObject): UpdateChatPermissions {
        return UpdateChatPermissions(
            chatId = jsonObject.getLong(key = "chat_id"),
            permissions = jsonObject.getObject(key = "permissions") { data -> deserializeChatPermissions(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatPhoto(jsonObject: JsonObject): UpdateChatPhoto {
        return UpdateChatPhoto(
            chatId = jsonObject.getLong(key = "chat_id"),
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializeChatPhotoInfo(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatPosition(jsonObject: JsonObject): UpdateChatPosition {
        return UpdateChatPosition(
            chatId = jsonObject.getLong(key = "chat_id"),
            position = jsonObject.getObject(key = "position") { data -> deserializeChatPosition(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatReadInbox(jsonObject: JsonObject): UpdateChatReadInbox {
        return UpdateChatReadInbox(
            chatId = jsonObject.getLong(key = "chat_id"),
            lastReadInboxMessageId = jsonObject.getLong(key = "last_read_inbox_message_id"),
            unreadCount = jsonObject.getInt(key = "unread_count"),
        )
    }

    private fun deserializeUpdateChatReadOutbox(jsonObject: JsonObject): UpdateChatReadOutbox {
        return UpdateChatReadOutbox(
            chatId = jsonObject.getLong(key = "chat_id"),
            lastReadOutboxMessageId = jsonObject.getLong(key = "last_read_outbox_message_id"),
        )
    }

    private fun deserializeUpdateChatRemovedFromList(jsonObject: JsonObject): UpdateChatRemovedFromList {
        return UpdateChatRemovedFromList(
            chatId = jsonObject.getLong(key = "chat_id"),
            chatList = jsonObject.getObject(key = "chat_list") { data -> deserializeChatList(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatReplyMarkup(jsonObject: JsonObject): UpdateChatReplyMarkup {
        return UpdateChatReplyMarkup(
            chatId = jsonObject.getLong(key = "chat_id"),
            replyMarkupMessageId = jsonObject.getLong(key = "reply_markup_message_id"),
        )
    }

    private fun deserializeUpdateChatRevenueAmount(jsonObject: JsonObject): UpdateChatRevenueAmount {
        return UpdateChatRevenueAmount(
            chatId = jsonObject.getLong(key = "chat_id"),
            revenueAmount = jsonObject.getObject(key = "revenue_amount") { data -> deserializeChatRevenueAmount(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatTheme(jsonObject: JsonObject): UpdateChatTheme {
        return UpdateChatTheme(
            chatId = jsonObject.getLong(key = "chat_id"),
            themeName = jsonObject.getString(key = "theme_name"),
        )
    }

    private fun deserializeUpdateChatThemes(jsonObject: JsonObject): UpdateChatThemes {
        return UpdateChatThemes(
            chatThemes = jsonObject.getObjects(key = "chat_themes") { data -> deserializeChatTheme(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatTitle(jsonObject: JsonObject): UpdateChatTitle {
        return UpdateChatTitle(
            chatId = jsonObject.getLong(key = "chat_id"),
            title = jsonObject.getString(key = "title"),
        )
    }

    private fun deserializeUpdateChatUnreadMentionCount(jsonObject: JsonObject): UpdateChatUnreadMentionCount {
        return UpdateChatUnreadMentionCount(
            chatId = jsonObject.getLong(key = "chat_id"),
            unreadMentionCount = jsonObject.getInt(key = "unread_mention_count"),
        )
    }

    private fun deserializeUpdateChatUnreadReactionCount(jsonObject: JsonObject): UpdateChatUnreadReactionCount {
        return UpdateChatUnreadReactionCount(
            chatId = jsonObject.getLong(key = "chat_id"),
            unreadReactionCount = jsonObject.getInt(key = "unread_reaction_count"),
        )
    }

    private fun deserializeUpdateChatVideoChat(jsonObject: JsonObject): UpdateChatVideoChat {
        return UpdateChatVideoChat(
            chatId = jsonObject.getLong(key = "chat_id"),
            videoChat = jsonObject.getObject(key = "video_chat") { data -> deserializeVideoChat(jsonObject = data) },
        )
    }

    private fun deserializeUpdateChatViewAsTopics(jsonObject: JsonObject): UpdateChatViewAsTopics {
        return UpdateChatViewAsTopics(
            chatId = jsonObject.getLong(key = "chat_id"),
            viewAsTopics = jsonObject.getBoolean(key = "view_as_topics"),
        )
    }

    private fun deserializeUpdateConnectionState(jsonObject: JsonObject): UpdateConnectionState {
        return UpdateConnectionState(
            state = jsonObject.getObject(key = "state") { data -> deserializeConnectionState(jsonObject = data) },
        )
    }

    private fun deserializeUpdateContactCloseBirthdays(jsonObject: JsonObject): UpdateContactCloseBirthdays {
        return UpdateContactCloseBirthdays(
            closeBirthdayUsers = jsonObject.getObjects(key = "close_birthday_users") { data -> deserializeCloseBirthdayUser(jsonObject = data) },
        )
    }

    private fun deserializeUpdateDefaultBackground(jsonObject: JsonObject): UpdateDefaultBackground {
        return UpdateDefaultBackground(
            forDarkTheme = jsonObject.getBoolean(key = "for_dark_theme"),
            background = jsonObject.getObjectNullable(key = "background") { data -> deserializeBackground(jsonObject = data) },
        )
    }

    private fun deserializeUpdateDefaultPaidReactionType(jsonObject: JsonObject): UpdateDefaultPaidReactionType {
        return UpdateDefaultPaidReactionType(
            type = jsonObject.getObject(key = "type") { data -> deserializePaidReactionType(jsonObject = data) },
        )
    }

    private fun deserializeUpdateDefaultReactionType(jsonObject: JsonObject): UpdateDefaultReactionType {
        return UpdateDefaultReactionType(
            reactionType = jsonObject.getObject(key = "reaction_type") { data -> deserializeReactionType(jsonObject = data) },
        )
    }

    private fun deserializeUpdateDeleteMessages(jsonObject: JsonObject): UpdateDeleteMessages {
        return UpdateDeleteMessages(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageIds = jsonObject.getLongs(key = "message_ids"),
            isPermanent = jsonObject.getBoolean(key = "is_permanent"),
            fromCache = jsonObject.getBoolean(key = "from_cache"),
        )
    }

    private fun deserializeUpdateDiceEmojis(jsonObject: JsonObject): UpdateDiceEmojis {
        return UpdateDiceEmojis(
            emojis = jsonObject.getStrings(key = "emojis"),
        )
    }

    private fun deserializeUpdateDirectMessagesChatTopic(jsonObject: JsonObject): UpdateDirectMessagesChatTopic {
        return UpdateDirectMessagesChatTopic(
            topic = jsonObject.getObject(key = "topic") { data -> deserializeDirectMessagesChatTopic(jsonObject = data) },
        )
    }

    private fun deserializeUpdateFavoriteStickers(jsonObject: JsonObject): UpdateFavoriteStickers {
        return UpdateFavoriteStickers(
            stickerIds = jsonObject.getInts(key = "sticker_ids"),
        )
    }

    private fun deserializeUpdateFile(jsonObject: JsonObject): UpdateFile {
        return UpdateFile(
            file = jsonObject.getObject(key = "file") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeUpdateFileAddedToDownloads(jsonObject: JsonObject): UpdateFileAddedToDownloads {
        return UpdateFileAddedToDownloads(
            fileDownload = jsonObject.getObject(key = "file_download") { data -> deserializeFileDownload(jsonObject = data) },
            counts = jsonObject.getObject(key = "counts") { data -> deserializeDownloadedFileCounts(jsonObject = data) },
        )
    }

    private fun deserializeUpdateFileDownload(jsonObject: JsonObject): UpdateFileDownload {
        return UpdateFileDownload(
            fileId = jsonObject.getInt(key = "file_id"),
            completeDate = jsonObject.getInt(key = "complete_date"),
            isPaused = jsonObject.getBoolean(key = "is_paused"),
            counts = jsonObject.getObject(key = "counts") { data -> deserializeDownloadedFileCounts(jsonObject = data) },
        )
    }

    private fun deserializeUpdateFileDownloads(jsonObject: JsonObject): UpdateFileDownloads {
        return UpdateFileDownloads(
            totalSize = jsonObject.getLong(key = "total_size"),
            totalCount = jsonObject.getInt(key = "total_count"),
            downloadedSize = jsonObject.getLong(key = "downloaded_size"),
        )
    }

    private fun deserializeUpdateFileGenerationStart(jsonObject: JsonObject): UpdateFileGenerationStart {
        return UpdateFileGenerationStart(
            generationId = jsonObject.getLong(key = "generation_id"),
            originalPath = jsonObject.getString(key = "original_path"),
            destinationPath = jsonObject.getString(key = "destination_path"),
            conversion = jsonObject.getString(key = "conversion"),
        )
    }

    private fun deserializeUpdateFileGenerationStop(jsonObject: JsonObject): UpdateFileGenerationStop {
        return UpdateFileGenerationStop(
            generationId = jsonObject.getLong(key = "generation_id"),
        )
    }

    private fun deserializeUpdateFileRemovedFromDownloads(jsonObject: JsonObject): UpdateFileRemovedFromDownloads {
        return UpdateFileRemovedFromDownloads(
            fileId = jsonObject.getInt(key = "file_id"),
            counts = jsonObject.getObject(key = "counts") { data -> deserializeDownloadedFileCounts(jsonObject = data) },
        )
    }

    private fun deserializeUpdateForumTopic(jsonObject: JsonObject): UpdateForumTopic {
        return UpdateForumTopic(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageThreadId = jsonObject.getLong(key = "message_thread_id"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
            lastReadInboxMessageId = jsonObject.getLong(key = "last_read_inbox_message_id"),
            lastReadOutboxMessageId = jsonObject.getLong(key = "last_read_outbox_message_id"),
            unreadMentionCount = jsonObject.getInt(key = "unread_mention_count"),
            unreadReactionCount = jsonObject.getInt(key = "unread_reaction_count"),
            notificationSettings = jsonObject.getObject(key = "notification_settings") { data -> deserializeChatNotificationSettings(jsonObject = data) },
        )
    }

    private fun deserializeUpdateForumTopicInfo(jsonObject: JsonObject): UpdateForumTopicInfo {
        return UpdateForumTopicInfo(
            info = jsonObject.getObject(key = "info") { data -> deserializeForumTopicInfo(jsonObject = data) },
        )
    }

    private fun deserializeUpdateFreezeState(jsonObject: JsonObject): UpdateFreezeState {
        return UpdateFreezeState(
            isFrozen = jsonObject.getBoolean(key = "is_frozen"),
            freezingDate = jsonObject.getInt(key = "freezing_date"),
            deletionDate = jsonObject.getInt(key = "deletion_date"),
            appealLink = jsonObject.getString(key = "appeal_link"),
        )
    }

    private fun deserializeUpdateGroupCall(jsonObject: JsonObject): UpdateGroupCall {
        return UpdateGroupCall(
            groupCall = jsonObject.getObject(key = "group_call") { data -> deserializeGroupCall(jsonObject = data) },
        )
    }

    private fun deserializeUpdateGroupCallParticipant(jsonObject: JsonObject): UpdateGroupCallParticipant {
        return UpdateGroupCallParticipant(
            groupCallId = jsonObject.getInt(key = "group_call_id"),
            participant = jsonObject.getObject(key = "participant") { data -> deserializeGroupCallParticipant(jsonObject = data) },
        )
    }

    private fun deserializeUpdateGroupCallParticipants(jsonObject: JsonObject): UpdateGroupCallParticipants {
        return UpdateGroupCallParticipants(
            groupCallId = jsonObject.getInt(key = "group_call_id"),
            participantUserIds = jsonObject.getLongs(key = "participant_user_ids"),
        )
    }

    private fun deserializeUpdateGroupCallVerificationState(jsonObject: JsonObject): UpdateGroupCallVerificationState {
        return UpdateGroupCallVerificationState(
            groupCallId = jsonObject.getInt(key = "group_call_id"),
            generation = jsonObject.getInt(key = "generation"),
            emojis = jsonObject.getStrings(key = "emojis"),
        )
    }

    private fun deserializeUpdateHavePendingNotifications(jsonObject: JsonObject): UpdateHavePendingNotifications {
        return UpdateHavePendingNotifications(
            haveDelayedNotifications = jsonObject.getBoolean(key = "have_delayed_notifications"),
            haveUnreceivedNotifications = jsonObject.getBoolean(key = "have_unreceived_notifications"),
        )
    }

    private fun deserializeUpdateInstalledStickerSets(jsonObject: JsonObject): UpdateInstalledStickerSets {
        return UpdateInstalledStickerSets(
            stickerType = jsonObject.getObject(key = "sticker_type") { data -> deserializeStickerType(jsonObject = data) },
            stickerSetIds = jsonObject.getLongs(key = "sticker_set_ids"),
        )
    }

    private fun deserializeUpdateLanguagePackStrings(jsonObject: JsonObject): UpdateLanguagePackStrings {
        return UpdateLanguagePackStrings(
            localizationTarget = jsonObject.getString(key = "localization_target"),
            languagePackId = jsonObject.getString(key = "language_pack_id"),
            strings = jsonObject.getObjects(key = "strings") { data -> deserializeLanguagePackString(jsonObject = data) },
        )
    }

    private fun deserializeUpdateMessageContent(jsonObject: JsonObject): UpdateMessageContent {
        return UpdateMessageContent(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            newContent = jsonObject.getObject(key = "new_content") { data -> deserializeMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeUpdateMessageContentOpened(jsonObject: JsonObject): UpdateMessageContentOpened {
        return UpdateMessageContentOpened(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
        )
    }

    private fun deserializeUpdateMessageEdited(jsonObject: JsonObject): UpdateMessageEdited {
        return UpdateMessageEdited(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            editDate = jsonObject.getInt(key = "edit_date"),
            replyMarkup = jsonObject.getObjectNullable(key = "reply_markup") { data -> deserializeReplyMarkup(jsonObject = data) },
        )
    }

    private fun deserializeUpdateMessageFactCheck(jsonObject: JsonObject): UpdateMessageFactCheck {
        return UpdateMessageFactCheck(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            factCheck = jsonObject.getObject(key = "fact_check") { data -> deserializeFactCheck(jsonObject = data) },
        )
    }

    private fun deserializeUpdateMessageInteractionInfo(jsonObject: JsonObject): UpdateMessageInteractionInfo {
        return UpdateMessageInteractionInfo(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            interactionInfo = jsonObject.getObjectNullable(key = "interaction_info") { data -> deserializeMessageInteractionInfo(jsonObject = data) },
        )
    }

    private fun deserializeUpdateMessageIsPinned(jsonObject: JsonObject): UpdateMessageIsPinned {
        return UpdateMessageIsPinned(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            isPinned = jsonObject.getBoolean(key = "is_pinned"),
        )
    }

    private fun deserializeUpdateMessageLiveLocationViewed(jsonObject: JsonObject): UpdateMessageLiveLocationViewed {
        return UpdateMessageLiveLocationViewed(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
        )
    }

    private fun deserializeUpdateMessageMentionRead(jsonObject: JsonObject): UpdateMessageMentionRead {
        return UpdateMessageMentionRead(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            unreadMentionCount = jsonObject.getInt(key = "unread_mention_count"),
        )
    }

    private fun deserializeUpdateMessageReaction(jsonObject: JsonObject): UpdateMessageReaction {
        return UpdateMessageReaction(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            actorId = jsonObject.getObject(key = "actor_id") { data -> deserializeMessageSender(jsonObject = data) },
            date = jsonObject.getInt(key = "date"),
            oldReactionTypes = jsonObject.getObjects(key = "old_reaction_types") { data -> deserializeReactionType(jsonObject = data) },
            newReactionTypes = jsonObject.getObjects(key = "new_reaction_types") { data -> deserializeReactionType(jsonObject = data) },
        )
    }

    private fun deserializeUpdateMessageReactions(jsonObject: JsonObject): UpdateMessageReactions {
        return UpdateMessageReactions(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            date = jsonObject.getInt(key = "date"),
            reactions = jsonObject.getObjects(key = "reactions") { data -> deserializeMessageReaction(jsonObject = data) },
        )
    }

    private fun deserializeUpdateMessageSendAcknowledged(jsonObject: JsonObject): UpdateMessageSendAcknowledged {
        return UpdateMessageSendAcknowledged(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
        )
    }

    private fun deserializeUpdateMessageSendFailed(jsonObject: JsonObject): UpdateMessageSendFailed {
        return UpdateMessageSendFailed(
            message = jsonObject.getObject(key = "message") { data -> deserializeMessage(jsonObject = data) },
            oldMessageId = jsonObject.getLong(key = "old_message_id"),
            error = jsonObject.getObject(key = "error") { data -> deserializeError(jsonObject = data) },
        )
    }

    private fun deserializeUpdateMessageSendSucceeded(jsonObject: JsonObject): UpdateMessageSendSucceeded {
        return UpdateMessageSendSucceeded(
            message = jsonObject.getObject(key = "message") { data -> deserializeMessage(jsonObject = data) },
            oldMessageId = jsonObject.getLong(key = "old_message_id"),
        )
    }

    private fun deserializeUpdateMessageUnreadReactions(jsonObject: JsonObject): UpdateMessageUnreadReactions {
        return UpdateMessageUnreadReactions(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            unreadReactions = jsonObject.getObjects(key = "unread_reactions") { data -> deserializeUnreadReaction(jsonObject = data) },
            unreadReactionCount = jsonObject.getInt(key = "unread_reaction_count"),
        )
    }

    private fun deserializeUpdateNewBusinessCallbackQuery(jsonObject: JsonObject): UpdateNewBusinessCallbackQuery {
        return UpdateNewBusinessCallbackQuery(
            id = jsonObject.getLong(key = "id"),
            senderUserId = jsonObject.getLong(key = "sender_user_id"),
            connectionId = jsonObject.getString(key = "connection_id"),
            message = jsonObject.getObject(key = "message") { data -> deserializeBusinessMessage(jsonObject = data) },
            chatInstance = jsonObject.getLong(key = "chat_instance"),
            payload = jsonObject.getObject(key = "payload") { data -> deserializeCallbackQueryPayload(jsonObject = data) },
        )
    }

    private fun deserializeUpdateNewBusinessMessage(jsonObject: JsonObject): UpdateNewBusinessMessage {
        return UpdateNewBusinessMessage(
            connectionId = jsonObject.getString(key = "connection_id"),
            message = jsonObject.getObject(key = "message") { data -> deserializeBusinessMessage(jsonObject = data) },
        )
    }

    private fun deserializeUpdateNewCallSignalingData(jsonObject: JsonObject): UpdateNewCallSignalingData {
        return UpdateNewCallSignalingData(
            callId = jsonObject.getInt(key = "call_id"),
            data = jsonObject.getBytes(key = "data"),
        )
    }

    private fun deserializeUpdateNewCallbackQuery(jsonObject: JsonObject): UpdateNewCallbackQuery {
        return UpdateNewCallbackQuery(
            id = jsonObject.getLong(key = "id"),
            senderUserId = jsonObject.getLong(key = "sender_user_id"),
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
            chatInstance = jsonObject.getLong(key = "chat_instance"),
            payload = jsonObject.getObject(key = "payload") { data -> deserializeCallbackQueryPayload(jsonObject = data) },
        )
    }

    private fun deserializeUpdateNewChat(jsonObject: JsonObject): UpdateNewChat {
        return UpdateNewChat(
            chat = jsonObject.getObject(key = "chat") { data -> deserializeChat(jsonObject = data) },
        )
    }

    private fun deserializeUpdateNewChatJoinRequest(jsonObject: JsonObject): UpdateNewChatJoinRequest {
        return UpdateNewChatJoinRequest(
            chatId = jsonObject.getLong(key = "chat_id"),
            request = jsonObject.getObject(key = "request") { data -> deserializeChatJoinRequest(jsonObject = data) },
            userChatId = jsonObject.getLong(key = "user_chat_id"),
            inviteLink = jsonObject.getObjectNullable(key = "invite_link") { data -> deserializeChatInviteLink(jsonObject = data) },
        )
    }

    private fun deserializeUpdateNewChosenInlineResult(jsonObject: JsonObject): UpdateNewChosenInlineResult {
        return UpdateNewChosenInlineResult(
            senderUserId = jsonObject.getLong(key = "sender_user_id"),
            userLocation = jsonObject.getObjectNullable(key = "user_location") { data -> deserializeLocation(jsonObject = data) },
            query = jsonObject.getString(key = "query"),
            resultId = jsonObject.getString(key = "result_id"),
            inlineMessageId = jsonObject.getString(key = "inline_message_id"),
        )
    }

    private fun deserializeUpdateNewCustomEvent(jsonObject: JsonObject): UpdateNewCustomEvent {
        return UpdateNewCustomEvent(
            event = jsonObject.getString(key = "event"),
        )
    }

    private fun deserializeUpdateNewCustomQuery(jsonObject: JsonObject): UpdateNewCustomQuery {
        return UpdateNewCustomQuery(
            id = jsonObject.getLong(key = "id"),
            data = jsonObject.getString(key = "data"),
            timeout = jsonObject.getInt(key = "timeout"),
        )
    }

    private fun deserializeUpdateNewInlineCallbackQuery(jsonObject: JsonObject): UpdateNewInlineCallbackQuery {
        return UpdateNewInlineCallbackQuery(
            id = jsonObject.getLong(key = "id"),
            senderUserId = jsonObject.getLong(key = "sender_user_id"),
            inlineMessageId = jsonObject.getString(key = "inline_message_id"),
            chatInstance = jsonObject.getLong(key = "chat_instance"),
            payload = jsonObject.getObject(key = "payload") { data -> deserializeCallbackQueryPayload(jsonObject = data) },
        )
    }

    private fun deserializeUpdateNewInlineQuery(jsonObject: JsonObject): UpdateNewInlineQuery {
        return UpdateNewInlineQuery(
            id = jsonObject.getLong(key = "id"),
            senderUserId = jsonObject.getLong(key = "sender_user_id"),
            userLocation = jsonObject.getObjectNullable(key = "user_location") { data -> deserializeLocation(jsonObject = data) },
            chatType = jsonObject.getObjectNullable(key = "chat_type") { data -> deserializeChatType(jsonObject = data) },
            query = jsonObject.getString(key = "query"),
            offset = jsonObject.getString(key = "offset"),
        )
    }

    private fun deserializeUpdateNewMessage(jsonObject: JsonObject): UpdateNewMessage {
        return UpdateNewMessage(
            message = jsonObject.getObject(key = "message") { data -> deserializeMessage(jsonObject = data) },
        )
    }

    private fun deserializeUpdateNewPreCheckoutQuery(jsonObject: JsonObject): UpdateNewPreCheckoutQuery {
        return UpdateNewPreCheckoutQuery(
            id = jsonObject.getLong(key = "id"),
            senderUserId = jsonObject.getLong(key = "sender_user_id"),
            currency = jsonObject.getString(key = "currency"),
            totalAmount = jsonObject.getLong(key = "total_amount"),
            invoicePayload = jsonObject.getBytes(key = "invoice_payload"),
            shippingOptionId = jsonObject.getString(key = "shipping_option_id"),
            orderInfo = jsonObject.getObjectNullable(key = "order_info") { data -> deserializeOrderInfo(jsonObject = data) },
        )
    }

    private fun deserializeUpdateNewShippingQuery(jsonObject: JsonObject): UpdateNewShippingQuery {
        return UpdateNewShippingQuery(
            id = jsonObject.getLong(key = "id"),
            senderUserId = jsonObject.getLong(key = "sender_user_id"),
            invoicePayload = jsonObject.getString(key = "invoice_payload"),
            shippingAddress = jsonObject.getObject(key = "shipping_address") { data -> deserializeAddress(jsonObject = data) },
        )
    }

    private fun deserializeUpdateNotification(jsonObject: JsonObject): UpdateNotification {
        return UpdateNotification(
            notificationGroupId = jsonObject.getInt(key = "notification_group_id"),
            notification = jsonObject.getObject(key = "notification") { data -> deserializeNotification(jsonObject = data) },
        )
    }

    private fun deserializeUpdateNotificationGroup(jsonObject: JsonObject): UpdateNotificationGroup {
        return UpdateNotificationGroup(
            notificationGroupId = jsonObject.getInt(key = "notification_group_id"),
            type = jsonObject.getObject(key = "type") { data -> deserializeNotificationGroupType(jsonObject = data) },
            chatId = jsonObject.getLong(key = "chat_id"),
            notificationSettingsChatId = jsonObject.getLong(key = "notification_settings_chat_id"),
            notificationSoundId = jsonObject.getLong(key = "notification_sound_id"),
            totalCount = jsonObject.getInt(key = "total_count"),
            addedNotifications = jsonObject.getObjects(key = "added_notifications") { data -> deserializeNotification(jsonObject = data) },
            removedNotificationIds = jsonObject.getInts(key = "removed_notification_ids"),
        )
    }

    private fun deserializeUpdateOption(jsonObject: JsonObject): UpdateOption {
        return UpdateOption(
            name = jsonObject.getString(key = "name"),
            value = jsonObject.getObject(key = "value") { data -> deserializeOptionValue(jsonObject = data) },
        )
    }

    private fun deserializeUpdateOwnedStarCount(jsonObject: JsonObject): UpdateOwnedStarCount {
        return UpdateOwnedStarCount(
            starAmount = jsonObject.getObject(key = "star_amount") { data -> deserializeStarAmount(jsonObject = data) },
        )
    }

    private fun deserializeUpdatePaidMediaPurchased(jsonObject: JsonObject): UpdatePaidMediaPurchased {
        return UpdatePaidMediaPurchased(
            userId = jsonObject.getLong(key = "user_id"),
            payload = jsonObject.getString(key = "payload"),
        )
    }

    private fun deserializeUpdatePoll(jsonObject: JsonObject): UpdatePoll {
        return UpdatePoll(
            poll = jsonObject.getObject(key = "poll") { data -> deserializePoll(jsonObject = data) },
        )
    }

    private fun deserializeUpdatePollAnswer(jsonObject: JsonObject): UpdatePollAnswer {
        return UpdatePollAnswer(
            pollId = jsonObject.getLong(key = "poll_id"),
            voterId = jsonObject.getObject(key = "voter_id") { data -> deserializeMessageSender(jsonObject = data) },
            optionIds = jsonObject.getInts(key = "option_ids"),
        )
    }

    private fun deserializeUpdateProfileAccentColors(jsonObject: JsonObject): UpdateProfileAccentColors {
        return UpdateProfileAccentColors(
            colors = jsonObject.getObjects(key = "colors") { data -> deserializeProfileAccentColor(jsonObject = data) },
            availableAccentColorIds = jsonObject.getInts(key = "available_accent_color_ids"),
        )
    }

    private fun deserializeUpdateQuickReplyShortcut(jsonObject: JsonObject): UpdateQuickReplyShortcut {
        return UpdateQuickReplyShortcut(
            shortcut = jsonObject.getObject(key = "shortcut") { data -> deserializeQuickReplyShortcut(jsonObject = data) },
        )
    }

    private fun deserializeUpdateQuickReplyShortcutDeleted(jsonObject: JsonObject): UpdateQuickReplyShortcutDeleted {
        return UpdateQuickReplyShortcutDeleted(
            shortcutId = jsonObject.getInt(key = "shortcut_id"),
        )
    }

    private fun deserializeUpdateQuickReplyShortcutMessages(jsonObject: JsonObject): UpdateQuickReplyShortcutMessages {
        return UpdateQuickReplyShortcutMessages(
            shortcutId = jsonObject.getInt(key = "shortcut_id"),
            messages = jsonObject.getObjects(key = "messages") { data -> deserializeQuickReplyMessage(jsonObject = data) },
        )
    }

    private fun deserializeUpdateQuickReplyShortcuts(jsonObject: JsonObject): UpdateQuickReplyShortcuts {
        return UpdateQuickReplyShortcuts(
            shortcutIds = jsonObject.getInts(key = "shortcut_ids"),
        )
    }

    private fun deserializeUpdateReactionNotificationSettings(jsonObject: JsonObject): UpdateReactionNotificationSettings {
        return UpdateReactionNotificationSettings(
            notificationSettings = jsonObject.getObject(key = "notification_settings") { data -> deserializeReactionNotificationSettings(jsonObject = data) },
        )
    }

    private fun deserializeUpdateRecentStickers(jsonObject: JsonObject): UpdateRecentStickers {
        return UpdateRecentStickers(
            isAttached = jsonObject.getBoolean(key = "is_attached"),
            stickerIds = jsonObject.getInts(key = "sticker_ids"),
        )
    }

    private fun deserializeUpdateSavedAnimations(jsonObject: JsonObject): UpdateSavedAnimations {
        return UpdateSavedAnimations(
            animationIds = jsonObject.getInts(key = "animation_ids"),
        )
    }

    private fun deserializeUpdateSavedMessagesTags(jsonObject: JsonObject): UpdateSavedMessagesTags {
        return UpdateSavedMessagesTags(
            savedMessagesTopicId = jsonObject.getLong(key = "saved_messages_topic_id"),
            tags = jsonObject.getObject(key = "tags") { data -> deserializeSavedMessagesTags(jsonObject = data) },
        )
    }

    private fun deserializeUpdateSavedMessagesTopic(jsonObject: JsonObject): UpdateSavedMessagesTopic {
        return UpdateSavedMessagesTopic(
            topic = jsonObject.getObject(key = "topic") { data -> deserializeSavedMessagesTopic(jsonObject = data) },
        )
    }

    private fun deserializeUpdateSavedMessagesTopicCount(jsonObject: JsonObject): UpdateSavedMessagesTopicCount {
        return UpdateSavedMessagesTopicCount(
            topicCount = jsonObject.getInt(key = "topic_count"),
        )
    }

    private fun deserializeUpdateSavedNotificationSounds(jsonObject: JsonObject): UpdateSavedNotificationSounds {
        return UpdateSavedNotificationSounds(
            notificationSoundIds = jsonObject.getLongs(key = "notification_sound_ids"),
        )
    }

    private fun deserializeUpdateScopeNotificationSettings(jsonObject: JsonObject): UpdateScopeNotificationSettings {
        return UpdateScopeNotificationSettings(
            scope = jsonObject.getObject(key = "scope") { data -> deserializeNotificationSettingsScope(jsonObject = data) },
            notificationSettings = jsonObject.getObject(key = "notification_settings") { data -> deserializeScopeNotificationSettings(jsonObject = data) },
        )
    }

    private fun deserializeUpdateSecretChat(jsonObject: JsonObject): UpdateSecretChat {
        return UpdateSecretChat(
            secretChat = jsonObject.getObject(key = "secret_chat") { data -> deserializeSecretChat(jsonObject = data) },
        )
    }

    private fun deserializeUpdateServiceNotification(jsonObject: JsonObject): UpdateServiceNotification {
        return UpdateServiceNotification(
            type = jsonObject.getString(key = "type"),
            content = jsonObject.getObject(key = "content") { data -> deserializeMessageContent(jsonObject = data) },
        )
    }

    private fun deserializeUpdateSpeechRecognitionTrial(jsonObject: JsonObject): UpdateSpeechRecognitionTrial {
        return UpdateSpeechRecognitionTrial(
            maxMediaDuration = jsonObject.getInt(key = "max_media_duration"),
            weeklyCount = jsonObject.getInt(key = "weekly_count"),
            leftCount = jsonObject.getInt(key = "left_count"),
            nextResetDate = jsonObject.getInt(key = "next_reset_date"),
        )
    }

    private fun deserializeUpdateSpeedLimitNotification(jsonObject: JsonObject): UpdateSpeedLimitNotification {
        return UpdateSpeedLimitNotification(
            isUpload = jsonObject.getBoolean(key = "is_upload"),
        )
    }

    private fun deserializeUpdateStarRevenueStatus(jsonObject: JsonObject): UpdateStarRevenueStatus {
        return UpdateStarRevenueStatus(
            ownerId = jsonObject.getObject(key = "owner_id") { data -> deserializeMessageSender(jsonObject = data) },
            status = jsonObject.getObject(key = "status") { data -> deserializeStarRevenueStatus(jsonObject = data) },
        )
    }

    private fun deserializeUpdateStickerSet(jsonObject: JsonObject): UpdateStickerSet {
        return UpdateStickerSet(
            stickerSet = jsonObject.getObject(key = "sticker_set") { data -> deserializeStickerSet(jsonObject = data) },
        )
    }

    private fun deserializeUpdateStory(jsonObject: JsonObject): UpdateStory {
        return UpdateStory(
            story = jsonObject.getObject(key = "story") { data -> deserializeStory(jsonObject = data) },
        )
    }

    private fun deserializeUpdateStoryDeleted(jsonObject: JsonObject): UpdateStoryDeleted {
        return UpdateStoryDeleted(
            storyPosterChatId = jsonObject.getLong(key = "story_poster_chat_id"),
            storyId = jsonObject.getInt(key = "story_id"),
        )
    }

    private fun deserializeUpdateStoryListChatCount(jsonObject: JsonObject): UpdateStoryListChatCount {
        return UpdateStoryListChatCount(
            storyList = jsonObject.getObject(key = "story_list") { data -> deserializeStoryList(jsonObject = data) },
            chatCount = jsonObject.getInt(key = "chat_count"),
        )
    }

    private fun deserializeUpdateStoryPostFailed(jsonObject: JsonObject): UpdateStoryPostFailed {
        return UpdateStoryPostFailed(
            story = jsonObject.getObject(key = "story") { data -> deserializeStory(jsonObject = data) },
            error = jsonObject.getObject(key = "error") { data -> deserializeError(jsonObject = data) },
            errorType = jsonObject.getObjectNullable(key = "error_type") { data -> deserializeCanPostStoryResult(jsonObject = data) },
        )
    }

    private fun deserializeUpdateStoryPostSucceeded(jsonObject: JsonObject): UpdateStoryPostSucceeded {
        return UpdateStoryPostSucceeded(
            story = jsonObject.getObject(key = "story") { data -> deserializeStory(jsonObject = data) },
            oldStoryId = jsonObject.getInt(key = "old_story_id"),
        )
    }

    private fun deserializeUpdateStoryStealthMode(jsonObject: JsonObject): UpdateStoryStealthMode {
        return UpdateStoryStealthMode(
            activeUntilDate = jsonObject.getInt(key = "active_until_date"),
            cooldownUntilDate = jsonObject.getInt(key = "cooldown_until_date"),
        )
    }

    private fun deserializeUpdateSuggestedActions(jsonObject: JsonObject): UpdateSuggestedActions {
        return UpdateSuggestedActions(
            addedActions = jsonObject.getObjects(key = "added_actions") { data -> deserializeSuggestedAction(jsonObject = data) },
            removedActions = jsonObject.getObjects(key = "removed_actions") { data -> deserializeSuggestedAction(jsonObject = data) },
        )
    }

    private fun deserializeUpdateSupergroup(jsonObject: JsonObject): UpdateSupergroup {
        return UpdateSupergroup(
            supergroup = jsonObject.getObject(key = "supergroup") { data -> deserializeSupergroup(jsonObject = data) },
        )
    }

    private fun deserializeUpdateSupergroupFullInfo(jsonObject: JsonObject): UpdateSupergroupFullInfo {
        return UpdateSupergroupFullInfo(
            supergroupId = jsonObject.getLong(key = "supergroup_id"),
            supergroupFullInfo = jsonObject.getObject(key = "supergroup_full_info") { data -> deserializeSupergroupFullInfo(jsonObject = data) },
        )
    }

    private fun deserializeUpdateTermsOfService(jsonObject: JsonObject): UpdateTermsOfService {
        return UpdateTermsOfService(
            termsOfServiceId = jsonObject.getString(key = "terms_of_service_id"),
            termsOfService = jsonObject.getObject(key = "terms_of_service") { data -> deserializeTermsOfService(jsonObject = data) },
        )
    }

    private fun deserializeUpdateTopicMessageCount(jsonObject: JsonObject): UpdateTopicMessageCount {
        return UpdateTopicMessageCount(
            chatId = jsonObject.getLong(key = "chat_id"),
            topicId = jsonObject.getObject(key = "topic_id") { data -> deserializeMessageTopic(jsonObject = data) },
            messageCount = jsonObject.getInt(key = "message_count"),
        )
    }

    private fun deserializeUpdateTrendingStickerSets(jsonObject: JsonObject): UpdateTrendingStickerSets {
        return UpdateTrendingStickerSets(
            stickerType = jsonObject.getObject(key = "sticker_type") { data -> deserializeStickerType(jsonObject = data) },
            stickerSets = jsonObject.getObject(key = "sticker_sets") { data -> deserializeTrendingStickerSets(jsonObject = data) },
        )
    }

    private fun deserializeUpdateUnconfirmedSession(jsonObject: JsonObject): UpdateUnconfirmedSession {
        return UpdateUnconfirmedSession(
            session = jsonObject.getObjectNullable(key = "session") { data -> deserializeUnconfirmedSession(jsonObject = data) },
        )
    }

    private fun deserializeUpdateUnreadChatCount(jsonObject: JsonObject): UpdateUnreadChatCount {
        return UpdateUnreadChatCount(
            chatList = jsonObject.getObject(key = "chat_list") { data -> deserializeChatList(jsonObject = data) },
            totalCount = jsonObject.getInt(key = "total_count"),
            unreadCount = jsonObject.getInt(key = "unread_count"),
            unreadUnmutedCount = jsonObject.getInt(key = "unread_unmuted_count"),
            markedAsUnreadCount = jsonObject.getInt(key = "marked_as_unread_count"),
            markedAsUnreadUnmutedCount = jsonObject.getInt(key = "marked_as_unread_unmuted_count"),
        )
    }

    private fun deserializeUpdateUnreadMessageCount(jsonObject: JsonObject): UpdateUnreadMessageCount {
        return UpdateUnreadMessageCount(
            chatList = jsonObject.getObject(key = "chat_list") { data -> deserializeChatList(jsonObject = data) },
            unreadCount = jsonObject.getInt(key = "unread_count"),
            unreadUnmutedCount = jsonObject.getInt(key = "unread_unmuted_count"),
        )
    }

    private fun deserializeUpdateUser(jsonObject: JsonObject): UpdateUser {
        return UpdateUser(
            user = jsonObject.getObject(key = "user") { data -> deserializeUser(jsonObject = data) },
        )
    }

    private fun deserializeUpdateUserFullInfo(jsonObject: JsonObject): UpdateUserFullInfo {
        return UpdateUserFullInfo(
            userId = jsonObject.getLong(key = "user_id"),
            userFullInfo = jsonObject.getObject(key = "user_full_info") { data -> deserializeUserFullInfo(jsonObject = data) },
        )
    }

    private fun deserializeUpdateUserPrivacySettingRules(jsonObject: JsonObject): UpdateUserPrivacySettingRules {
        return UpdateUserPrivacySettingRules(
            setting = jsonObject.getObject(key = "setting") { data -> deserializeUserPrivacySetting(jsonObject = data) },
            rules = jsonObject.getObject(key = "rules") { data -> deserializeUserPrivacySettingRules(jsonObject = data) },
        )
    }

    private fun deserializeUpdateUserStatus(jsonObject: JsonObject): UpdateUserStatus {
        return UpdateUserStatus(
            userId = jsonObject.getLong(key = "user_id"),
            status = jsonObject.getObject(key = "status") { data -> deserializeUserStatus(jsonObject = data) },
        )
    }

    private fun deserializeUpdateVideoPublished(jsonObject: JsonObject): UpdateVideoPublished {
        return UpdateVideoPublished(
            chatId = jsonObject.getLong(key = "chat_id"),
            messageId = jsonObject.getLong(key = "message_id"),
        )
    }

    private fun deserializeUpdateWebAppMessageSent(jsonObject: JsonObject): UpdateWebAppMessageSent {
        return UpdateWebAppMessageSent(
            webAppLaunchId = jsonObject.getLong(key = "web_app_launch_id"),
        )
    }

    private fun deserializeUpdates(jsonObject: JsonObject): Updates {
        return Updates(
            updates = jsonObject.getObjects(key = "updates") { data -> deserializeUpdate(jsonObject = data) },
        )
    }

    private fun deserializeUpgradeGiftResult(jsonObject: JsonObject): UpgradeGiftResult {
        return UpgradeGiftResult(
            gift = jsonObject.getObject(key = "gift") { data -> deserializeUpgradedGift(jsonObject = data) },
            receivedGiftId = jsonObject.getString(key = "received_gift_id"),
            isSaved = jsonObject.getBoolean(key = "is_saved"),
            canBeTransferred = jsonObject.getBoolean(key = "can_be_transferred"),
            transferStarCount = jsonObject.getLong(key = "transfer_star_count"),
            nextTransferDate = jsonObject.getInt(key = "next_transfer_date"),
            nextResaleDate = jsonObject.getInt(key = "next_resale_date"),
            exportDate = jsonObject.getInt(key = "export_date"),
        )
    }

    private fun deserializeUpgradedGift(jsonObject: JsonObject): UpgradedGift {
        return UpgradedGift(
            id = jsonObject.getLong(key = "id"),
            title = jsonObject.getString(key = "title"),
            name = jsonObject.getString(key = "name"),
            number = jsonObject.getInt(key = "number"),
            totalUpgradedCount = jsonObject.getInt(key = "total_upgraded_count"),
            maxUpgradedCount = jsonObject.getInt(key = "max_upgraded_count"),
            ownerId = jsonObject.getObjectNullable(key = "owner_id") { data -> deserializeMessageSender(jsonObject = data) },
            ownerAddress = jsonObject.getString(key = "owner_address"),
            ownerName = jsonObject.getString(key = "owner_name"),
            giftAddress = jsonObject.getString(key = "gift_address"),
            model = jsonObject.getObject(key = "model") { data -> deserializeUpgradedGiftModel(jsonObject = data) },
            symbol = jsonObject.getObject(key = "symbol") { data -> deserializeUpgradedGiftSymbol(jsonObject = data) },
            backdrop = jsonObject.getObject(key = "backdrop") { data -> deserializeUpgradedGiftBackdrop(jsonObject = data) },
            originalDetails = jsonObject.getObjectNullable(key = "original_details") { data -> deserializeUpgradedGiftOriginalDetails(jsonObject = data) },
            resaleStarCount = jsonObject.getLong(key = "resale_star_count"),
        )
    }

    private fun deserializeUpgradedGiftAttributeIdBackdrop(jsonObject: JsonObject): UpgradedGiftAttributeIdBackdrop {
        return UpgradedGiftAttributeIdBackdrop(
            backdropId = jsonObject.getInt(key = "backdrop_id"),
        )
    }

    private fun deserializeUpgradedGiftAttributeIdModel(jsonObject: JsonObject): UpgradedGiftAttributeIdModel {
        return UpgradedGiftAttributeIdModel(
            stickerId = jsonObject.getLong(key = "sticker_id"),
        )
    }

    private fun deserializeUpgradedGiftAttributeIdSymbol(jsonObject: JsonObject): UpgradedGiftAttributeIdSymbol {
        return UpgradedGiftAttributeIdSymbol(
            stickerId = jsonObject.getLong(key = "sticker_id"),
        )
    }

    private fun deserializeUpgradedGiftBackdrop(jsonObject: JsonObject): UpgradedGiftBackdrop {
        return UpgradedGiftBackdrop(
            id = jsonObject.getInt(key = "id"),
            name = jsonObject.getString(key = "name"),
            colors = jsonObject.getObject(key = "colors") { data -> deserializeUpgradedGiftBackdropColors(jsonObject = data) },
            rarityPerMille = jsonObject.getInt(key = "rarity_per_mille"),
        )
    }

    private fun deserializeUpgradedGiftBackdropColors(jsonObject: JsonObject): UpgradedGiftBackdropColors {
        return UpgradedGiftBackdropColors(
            centerColor = jsonObject.getInt(key = "center_color"),
            edgeColor = jsonObject.getInt(key = "edge_color"),
            symbolColor = jsonObject.getInt(key = "symbol_color"),
            textColor = jsonObject.getInt(key = "text_color"),
        )
    }

    private fun deserializeUpgradedGiftBackdropCount(jsonObject: JsonObject): UpgradedGiftBackdropCount {
        return UpgradedGiftBackdropCount(
            backdrop = jsonObject.getObject(key = "backdrop") { data -> deserializeUpgradedGiftBackdrop(jsonObject = data) },
            totalCount = jsonObject.getInt(key = "total_count"),
        )
    }

    private fun deserializeUpgradedGiftModel(jsonObject: JsonObject): UpgradedGiftModel {
        return UpgradedGiftModel(
            name = jsonObject.getString(key = "name"),
            sticker = jsonObject.getObject(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
            rarityPerMille = jsonObject.getInt(key = "rarity_per_mille"),
        )
    }

    private fun deserializeUpgradedGiftModelCount(jsonObject: JsonObject): UpgradedGiftModelCount {
        return UpgradedGiftModelCount(
            model = jsonObject.getObject(key = "model") { data -> deserializeUpgradedGiftModel(jsonObject = data) },
            totalCount = jsonObject.getInt(key = "total_count"),
        )
    }

    private fun deserializeUpgradedGiftOriginalDetails(jsonObject: JsonObject): UpgradedGiftOriginalDetails {
        return UpgradedGiftOriginalDetails(
            senderId = jsonObject.getObjectNullable(key = "sender_id") { data -> deserializeMessageSender(jsonObject = data) },
            receiverId = jsonObject.getObject(key = "receiver_id") { data -> deserializeMessageSender(jsonObject = data) },
            text = jsonObject.getObject(key = "text") { data -> deserializeFormattedText(jsonObject = data) },
            date = jsonObject.getInt(key = "date"),
        )
    }

    private fun deserializeUpgradedGiftSymbol(jsonObject: JsonObject): UpgradedGiftSymbol {
        return UpgradedGiftSymbol(
            name = jsonObject.getString(key = "name"),
            sticker = jsonObject.getObject(key = "sticker") { data -> deserializeSticker(jsonObject = data) },
            rarityPerMille = jsonObject.getInt(key = "rarity_per_mille"),
        )
    }

    private fun deserializeUpgradedGiftSymbolCount(jsonObject: JsonObject): UpgradedGiftSymbolCount {
        return UpgradedGiftSymbolCount(
            symbol = jsonObject.getObject(key = "symbol") { data -> deserializeUpgradedGiftSymbol(jsonObject = data) },
            totalCount = jsonObject.getInt(key = "total_count"),
        )
    }

    private fun deserializeUser(jsonObject: JsonObject): User {
        return User(
            id = jsonObject.getLong(key = "id"),
            firstName = jsonObject.getString(key = "first_name"),
            lastName = jsonObject.getString(key = "last_name"),
            usernames = jsonObject.getObjectNullable(key = "usernames") { data -> deserializeUsernames(jsonObject = data) },
            phoneNumber = jsonObject.getString(key = "phone_number"),
            status = jsonObject.getObject(key = "status") { data -> deserializeUserStatus(jsonObject = data) },
            profilePhoto = jsonObject.getObjectNullable(key = "profile_photo") { data -> deserializeProfilePhoto(jsonObject = data) },
            accentColorId = jsonObject.getInt(key = "accent_color_id"),
            backgroundCustomEmojiId = jsonObject.getLong(key = "background_custom_emoji_id"),
            profileAccentColorId = jsonObject.getInt(key = "profile_accent_color_id"),
            profileBackgroundCustomEmojiId = jsonObject.getLong(key = "profile_background_custom_emoji_id"),
            emojiStatus = jsonObject.getObjectNullable(key = "emoji_status") { data -> deserializeEmojiStatus(jsonObject = data) },
            isContact = jsonObject.getBoolean(key = "is_contact"),
            isMutualContact = jsonObject.getBoolean(key = "is_mutual_contact"),
            isCloseFriend = jsonObject.getBoolean(key = "is_close_friend"),
            verificationStatus = jsonObject.getObjectNullable(key = "verification_status") { data -> deserializeVerificationStatus(jsonObject = data) },
            isPremium = jsonObject.getBoolean(key = "is_premium"),
            isSupport = jsonObject.getBoolean(key = "is_support"),
            restrictionReason = jsonObject.getString(key = "restriction_reason"),
            hasActiveStories = jsonObject.getBoolean(key = "has_active_stories"),
            hasUnreadActiveStories = jsonObject.getBoolean(key = "has_unread_active_stories"),
            restrictsNewChats = jsonObject.getBoolean(key = "restricts_new_chats"),
            paidMessageStarCount = jsonObject.getLong(key = "paid_message_star_count"),
            haveAccess = jsonObject.getBoolean(key = "have_access"),
            type = jsonObject.getObject(key = "type") { data -> deserializeUserType(jsonObject = data) },
            languageCode = jsonObject.getString(key = "language_code"),
            addedToAttachmentMenu = jsonObject.getBoolean(key = "added_to_attachment_menu"),
        )
    }

    private fun deserializeUserFullInfo(jsonObject: JsonObject): UserFullInfo {
        return UserFullInfo(
            personalPhoto = jsonObject.getObjectNullable(key = "personal_photo") { data -> deserializeChatPhoto(jsonObject = data) },
            photo = jsonObject.getObjectNullable(key = "photo") { data -> deserializeChatPhoto(jsonObject = data) },
            publicPhoto = jsonObject.getObjectNullable(key = "public_photo") { data -> deserializeChatPhoto(jsonObject = data) },
            blockList = jsonObject.getObjectNullable(key = "block_list") { data -> deserializeBlockList(jsonObject = data) },
            canBeCalled = jsonObject.getBoolean(key = "can_be_called"),
            supportsVideoCalls = jsonObject.getBoolean(key = "supports_video_calls"),
            hasPrivateCalls = jsonObject.getBoolean(key = "has_private_calls"),
            hasPrivateForwards = jsonObject.getBoolean(key = "has_private_forwards"),
            hasRestrictedVoiceAndVideoNoteMessages = jsonObject.getBoolean(key = "has_restricted_voice_and_video_note_messages"),
            hasPostedToProfileStories = jsonObject.getBoolean(key = "has_posted_to_profile_stories"),
            hasSponsoredMessagesEnabled = jsonObject.getBoolean(key = "has_sponsored_messages_enabled"),
            needPhoneNumberPrivacyException = jsonObject.getBoolean(key = "need_phone_number_privacy_exception"),
            setChatBackground = jsonObject.getBoolean(key = "set_chat_background"),
            bio = jsonObject.getObjectNullable(key = "bio") { data -> deserializeFormattedText(jsonObject = data) },
            birthdate = jsonObject.getObjectNullable(key = "birthdate") { data -> deserializeBirthdate(jsonObject = data) },
            personalChatId = jsonObject.getLong(key = "personal_chat_id"),
            giftCount = jsonObject.getInt(key = "gift_count"),
            groupInCommonCount = jsonObject.getInt(key = "group_in_common_count"),
            incomingPaidMessageStarCount = jsonObject.getLong(key = "incoming_paid_message_star_count"),
            outgoingPaidMessageStarCount = jsonObject.getLong(key = "outgoing_paid_message_star_count"),
            giftSettings = jsonObject.getObject(key = "gift_settings") { data -> deserializeGiftSettings(jsonObject = data) },
            botVerification = jsonObject.getObjectNullable(key = "bot_verification") { data -> deserializeBotVerification(jsonObject = data) },
            businessInfo = jsonObject.getObjectNullable(key = "business_info") { data -> deserializeBusinessInfo(jsonObject = data) },
            botInfo = jsonObject.getObjectNullable(key = "bot_info") { data -> deserializeBotInfo(jsonObject = data) },
        )
    }

    private fun deserializeUserLink(jsonObject: JsonObject): UserLink {
        return UserLink(
            url = jsonObject.getString(key = "url"),
            expiresIn = jsonObject.getInt(key = "expires_in"),
        )
    }

    private fun deserializeUserPrivacySettingAllowCalls(jsonObject: JsonObject): UserPrivacySettingAllowCalls {
        return UserPrivacySettingAllowCalls()
    }

    private fun deserializeUserPrivacySettingAllowChatInvites(jsonObject: JsonObject): UserPrivacySettingAllowChatInvites {
        return UserPrivacySettingAllowChatInvites()
    }

    private fun deserializeUserPrivacySettingAllowFindingByPhoneNumber(jsonObject: JsonObject): UserPrivacySettingAllowFindingByPhoneNumber {
        return UserPrivacySettingAllowFindingByPhoneNumber()
    }

    private fun deserializeUserPrivacySettingAllowPeerToPeerCalls(jsonObject: JsonObject): UserPrivacySettingAllowPeerToPeerCalls {
        return UserPrivacySettingAllowPeerToPeerCalls()
    }

    private fun deserializeUserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages(jsonObject: JsonObject): UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages {
        return UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages()
    }

    private fun deserializeUserPrivacySettingAllowUnpaidMessages(jsonObject: JsonObject): UserPrivacySettingAllowUnpaidMessages {
        return UserPrivacySettingAllowUnpaidMessages()
    }

    private fun deserializeUserPrivacySettingAutosaveGifts(jsonObject: JsonObject): UserPrivacySettingAutosaveGifts {
        return UserPrivacySettingAutosaveGifts()
    }

    private fun deserializeUserPrivacySettingRuleAllowAll(jsonObject: JsonObject): UserPrivacySettingRuleAllowAll {
        return UserPrivacySettingRuleAllowAll()
    }

    private fun deserializeUserPrivacySettingRuleAllowBots(jsonObject: JsonObject): UserPrivacySettingRuleAllowBots {
        return UserPrivacySettingRuleAllowBots()
    }

    private fun deserializeUserPrivacySettingRuleAllowChatMembers(jsonObject: JsonObject): UserPrivacySettingRuleAllowChatMembers {
        return UserPrivacySettingRuleAllowChatMembers(
            chatIds = jsonObject.getLongs(key = "chat_ids"),
        )
    }

    private fun deserializeUserPrivacySettingRuleAllowContacts(jsonObject: JsonObject): UserPrivacySettingRuleAllowContacts {
        return UserPrivacySettingRuleAllowContacts()
    }

    private fun deserializeUserPrivacySettingRuleAllowPremiumUsers(jsonObject: JsonObject): UserPrivacySettingRuleAllowPremiumUsers {
        return UserPrivacySettingRuleAllowPremiumUsers()
    }

    private fun deserializeUserPrivacySettingRuleAllowUsers(jsonObject: JsonObject): UserPrivacySettingRuleAllowUsers {
        return UserPrivacySettingRuleAllowUsers(
            userIds = jsonObject.getLongs(key = "user_ids"),
        )
    }

    private fun deserializeUserPrivacySettingRuleRestrictAll(jsonObject: JsonObject): UserPrivacySettingRuleRestrictAll {
        return UserPrivacySettingRuleRestrictAll()
    }

    private fun deserializeUserPrivacySettingRuleRestrictBots(jsonObject: JsonObject): UserPrivacySettingRuleRestrictBots {
        return UserPrivacySettingRuleRestrictBots()
    }

    private fun deserializeUserPrivacySettingRuleRestrictChatMembers(jsonObject: JsonObject): UserPrivacySettingRuleRestrictChatMembers {
        return UserPrivacySettingRuleRestrictChatMembers(
            chatIds = jsonObject.getLongs(key = "chat_ids"),
        )
    }

    private fun deserializeUserPrivacySettingRuleRestrictContacts(jsonObject: JsonObject): UserPrivacySettingRuleRestrictContacts {
        return UserPrivacySettingRuleRestrictContacts()
    }

    private fun deserializeUserPrivacySettingRuleRestrictUsers(jsonObject: JsonObject): UserPrivacySettingRuleRestrictUsers {
        return UserPrivacySettingRuleRestrictUsers(
            userIds = jsonObject.getLongs(key = "user_ids"),
        )
    }

    private fun deserializeUserPrivacySettingRules(jsonObject: JsonObject): UserPrivacySettingRules {
        return UserPrivacySettingRules(
            rules = jsonObject.getObjects(key = "rules") { data -> deserializeUserPrivacySettingRule(jsonObject = data) },
        )
    }

    private fun deserializeUserPrivacySettingShowBio(jsonObject: JsonObject): UserPrivacySettingShowBio {
        return UserPrivacySettingShowBio()
    }

    private fun deserializeUserPrivacySettingShowBirthdate(jsonObject: JsonObject): UserPrivacySettingShowBirthdate {
        return UserPrivacySettingShowBirthdate()
    }

    private fun deserializeUserPrivacySettingShowLinkInForwardedMessages(jsonObject: JsonObject): UserPrivacySettingShowLinkInForwardedMessages {
        return UserPrivacySettingShowLinkInForwardedMessages()
    }

    private fun deserializeUserPrivacySettingShowPhoneNumber(jsonObject: JsonObject): UserPrivacySettingShowPhoneNumber {
        return UserPrivacySettingShowPhoneNumber()
    }

    private fun deserializeUserPrivacySettingShowProfilePhoto(jsonObject: JsonObject): UserPrivacySettingShowProfilePhoto {
        return UserPrivacySettingShowProfilePhoto()
    }

    private fun deserializeUserPrivacySettingShowStatus(jsonObject: JsonObject): UserPrivacySettingShowStatus {
        return UserPrivacySettingShowStatus()
    }

    private fun deserializeUserStatusEmpty(jsonObject: JsonObject): UserStatusEmpty {
        return UserStatusEmpty()
    }

    private fun deserializeUserStatusLastMonth(jsonObject: JsonObject): UserStatusLastMonth {
        return UserStatusLastMonth(
            byMyPrivacySettings = jsonObject.getBoolean(key = "by_my_privacy_settings"),
        )
    }

    private fun deserializeUserStatusLastWeek(jsonObject: JsonObject): UserStatusLastWeek {
        return UserStatusLastWeek(
            byMyPrivacySettings = jsonObject.getBoolean(key = "by_my_privacy_settings"),
        )
    }

    private fun deserializeUserStatusOffline(jsonObject: JsonObject): UserStatusOffline {
        return UserStatusOffline(
            wasOnline = jsonObject.getInt(key = "was_online"),
        )
    }

    private fun deserializeUserStatusOnline(jsonObject: JsonObject): UserStatusOnline {
        return UserStatusOnline(
            expires = jsonObject.getInt(key = "expires"),
        )
    }

    private fun deserializeUserStatusRecently(jsonObject: JsonObject): UserStatusRecently {
        return UserStatusRecently(
            byMyPrivacySettings = jsonObject.getBoolean(key = "by_my_privacy_settings"),
        )
    }

    private fun deserializeUserSupportInfo(jsonObject: JsonObject): UserSupportInfo {
        return UserSupportInfo(
            message = jsonObject.getObject(key = "message") { data -> deserializeFormattedText(jsonObject = data) },
            author = jsonObject.getString(key = "author"),
            date = jsonObject.getInt(key = "date"),
        )
    }

    private fun deserializeUserTypeBot(jsonObject: JsonObject): UserTypeBot {
        return UserTypeBot(
            canBeEdited = jsonObject.getBoolean(key = "can_be_edited"),
            canJoinGroups = jsonObject.getBoolean(key = "can_join_groups"),
            canReadAllGroupMessages = jsonObject.getBoolean(key = "can_read_all_group_messages"),
            hasMainWebApp = jsonObject.getBoolean(key = "has_main_web_app"),
            isInline = jsonObject.getBoolean(key = "is_inline"),
            inlineQueryPlaceholder = jsonObject.getString(key = "inline_query_placeholder"),
            needLocation = jsonObject.getBoolean(key = "need_location"),
            canConnectToBusiness = jsonObject.getBoolean(key = "can_connect_to_business"),
            canBeAddedToAttachmentMenu = jsonObject.getBoolean(key = "can_be_added_to_attachment_menu"),
            activeUserCount = jsonObject.getInt(key = "active_user_count"),
        )
    }

    private fun deserializeUserTypeDeleted(jsonObject: JsonObject): UserTypeDeleted {
        return UserTypeDeleted()
    }

    private fun deserializeUserTypeRegular(jsonObject: JsonObject): UserTypeRegular {
        return UserTypeRegular()
    }

    private fun deserializeUserTypeUnknown(jsonObject: JsonObject): UserTypeUnknown {
        return UserTypeUnknown()
    }

    private fun deserializeUsernames(jsonObject: JsonObject): Usernames {
        return Usernames(
            activeUsernames = jsonObject.getStrings(key = "active_usernames"),
            disabledUsernames = jsonObject.getStrings(key = "disabled_usernames"),
            editableUsername = jsonObject.getString(key = "editable_username"),
        )
    }

    private fun deserializeUsers(jsonObject: JsonObject): Users {
        return Users(
            totalCount = jsonObject.getInt(key = "total_count"),
            userIds = jsonObject.getLongs(key = "user_ids"),
        )
    }

    private fun deserializeValidatedOrderInfo(jsonObject: JsonObject): ValidatedOrderInfo {
        return ValidatedOrderInfo(
            orderInfoId = jsonObject.getString(key = "order_info_id"),
            shippingOptions = jsonObject.getObjects(key = "shipping_options") { data -> deserializeShippingOption(jsonObject = data) },
        )
    }

    private fun deserializeVectorPathCommandCubicBezierCurve(jsonObject: JsonObject): VectorPathCommandCubicBezierCurve {
        return VectorPathCommandCubicBezierCurve(
            startControlPoint = jsonObject.getObject(key = "start_control_point") { data -> deserializePoint(jsonObject = data) },
            endControlPoint = jsonObject.getObject(key = "end_control_point") { data -> deserializePoint(jsonObject = data) },
            endPoint = jsonObject.getObject(key = "end_point") { data -> deserializePoint(jsonObject = data) },
        )
    }

    private fun deserializeVectorPathCommandLine(jsonObject: JsonObject): VectorPathCommandLine {
        return VectorPathCommandLine(
            endPoint = jsonObject.getObject(key = "end_point") { data -> deserializePoint(jsonObject = data) },
        )
    }

    private fun deserializeVenue(jsonObject: JsonObject): Venue {
        return Venue(
            location = jsonObject.getObject(key = "location") { data -> deserializeLocation(jsonObject = data) },
            title = jsonObject.getString(key = "title"),
            address = jsonObject.getString(key = "address"),
            provider = jsonObject.getString(key = "provider"),
            id = jsonObject.getString(key = "id"),
            type = jsonObject.getString(key = "type"),
        )
    }

    private fun deserializeVerificationStatus(jsonObject: JsonObject): VerificationStatus {
        return VerificationStatus(
            isVerified = jsonObject.getBoolean(key = "is_verified"),
            isScam = jsonObject.getBoolean(key = "is_scam"),
            isFake = jsonObject.getBoolean(key = "is_fake"),
            botVerificationIconCustomEmojiId = jsonObject.getLong(key = "bot_verification_icon_custom_emoji_id"),
        )
    }

    private fun deserializeVideo(jsonObject: JsonObject): Video {
        return Video(
            duration = jsonObject.getInt(key = "duration"),
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            fileName = jsonObject.getString(key = "file_name"),
            mimeType = jsonObject.getString(key = "mime_type"),
            hasStickers = jsonObject.getBoolean(key = "has_stickers"),
            supportsStreaming = jsonObject.getBoolean(key = "supports_streaming"),
            minithumbnail = jsonObject.getObjectNullable(key = "minithumbnail") { data -> deserializeMinithumbnail(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeThumbnail(jsonObject = data) },
            video = jsonObject.getObject(key = "video") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeVideoChat(jsonObject: JsonObject): VideoChat {
        return VideoChat(
            groupCallId = jsonObject.getInt(key = "group_call_id"),
            hasParticipants = jsonObject.getBoolean(key = "has_participants"),
            defaultParticipantId = jsonObject.getObjectNullable(key = "default_participant_id") { data -> deserializeMessageSender(jsonObject = data) },
        )
    }

    private fun deserializeVideoChatStream(jsonObject: JsonObject): VideoChatStream {
        return VideoChatStream(
            channelId = jsonObject.getInt(key = "channel_id"),
            scale = jsonObject.getInt(key = "scale"),
            timeOffset = jsonObject.getLong(key = "time_offset"),
        )
    }

    private fun deserializeVideoChatStreams(jsonObject: JsonObject): VideoChatStreams {
        return VideoChatStreams(
            streams = jsonObject.getObjects(key = "streams") { data -> deserializeVideoChatStream(jsonObject = data) },
        )
    }

    private fun deserializeVideoMessageAdvertisement(jsonObject: JsonObject): VideoMessageAdvertisement {
        return VideoMessageAdvertisement(
            uniqueId = jsonObject.getLong(key = "unique_id"),
            text = jsonObject.getString(key = "text"),
            minDisplayDuration = jsonObject.getInt(key = "min_display_duration"),
            maxDisplayDuration = jsonObject.getInt(key = "max_display_duration"),
            canBeReported = jsonObject.getBoolean(key = "can_be_reported"),
            sponsor = jsonObject.getObject(key = "sponsor") { data -> deserializeAdvertisementSponsor(jsonObject = data) },
            title = jsonObject.getString(key = "title"),
            additionalInfo = jsonObject.getString(key = "additional_info"),
        )
    }

    private fun deserializeVideoMessageAdvertisements(jsonObject: JsonObject): VideoMessageAdvertisements {
        return VideoMessageAdvertisements(
            advertisements = jsonObject.getObjects(key = "advertisements") { data -> deserializeVideoMessageAdvertisement(jsonObject = data) },
            startDelay = jsonObject.getInt(key = "start_delay"),
            betweenDelay = jsonObject.getInt(key = "between_delay"),
        )
    }

    private fun deserializeVideoNote(jsonObject: JsonObject): VideoNote {
        return VideoNote(
            duration = jsonObject.getInt(key = "duration"),
            waveform = jsonObject.getBytes(key = "waveform"),
            length = jsonObject.getInt(key = "length"),
            minithumbnail = jsonObject.getObjectNullable(key = "minithumbnail") { data -> deserializeMinithumbnail(jsonObject = data) },
            thumbnail = jsonObject.getObjectNullable(key = "thumbnail") { data -> deserializeThumbnail(jsonObject = data) },
            speechRecognitionResult = jsonObject.getObjectNullable(key = "speech_recognition_result") { data -> deserializeSpeechRecognitionResult(jsonObject = data) },
            video = jsonObject.getObject(key = "video") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeVideoStoryboard(jsonObject: JsonObject): VideoStoryboard {
        return VideoStoryboard(
            storyboardFile = jsonObject.getObject(key = "storyboard_file") { data -> deserializeFile(jsonObject = data) },
            width = jsonObject.getInt(key = "width"),
            height = jsonObject.getInt(key = "height"),
            mapFile = jsonObject.getObject(key = "map_file") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeVoiceNote(jsonObject: JsonObject): VoiceNote {
        return VoiceNote(
            duration = jsonObject.getInt(key = "duration"),
            waveform = jsonObject.getBytes(key = "waveform"),
            mimeType = jsonObject.getString(key = "mime_type"),
            speechRecognitionResult = jsonObject.getObjectNullable(key = "speech_recognition_result") { data -> deserializeSpeechRecognitionResult(jsonObject = data) },
            voice = jsonObject.getObject(key = "voice") { data -> deserializeFile(jsonObject = data) },
        )
    }

    private fun deserializeWebApp(jsonObject: JsonObject): WebApp {
        return WebApp(
            shortName = jsonObject.getString(key = "short_name"),
            title = jsonObject.getString(key = "title"),
            description = jsonObject.getString(key = "description"),
            photo = jsonObject.getObject(key = "photo") { data -> deserializePhoto(jsonObject = data) },
            animation = jsonObject.getObjectNullable(key = "animation") { data -> deserializeAnimation(jsonObject = data) },
        )
    }

    private fun deserializeWebAppInfo(jsonObject: JsonObject): WebAppInfo {
        return WebAppInfo(
            launchId = jsonObject.getLong(key = "launch_id"),
            url = jsonObject.getString(key = "url"),
        )
    }

    private fun deserializeWebAppOpenModeCompact(jsonObject: JsonObject): WebAppOpenModeCompact {
        return WebAppOpenModeCompact()
    }

    private fun deserializeWebAppOpenModeFullScreen(jsonObject: JsonObject): WebAppOpenModeFullScreen {
        return WebAppOpenModeFullScreen()
    }

    private fun deserializeWebAppOpenModeFullSize(jsonObject: JsonObject): WebAppOpenModeFullSize {
        return WebAppOpenModeFullSize()
    }

    private fun deserializeWebAppOpenParameters(jsonObject: JsonObject): WebAppOpenParameters {
        return WebAppOpenParameters(
            theme = jsonObject.getObjectNullable(key = "theme") { data -> deserializeThemeParameters(jsonObject = data) },
            applicationName = jsonObject.getString(key = "application_name"),
            mode = jsonObject.getObjectNullable(key = "mode") { data -> deserializeWebAppOpenMode(jsonObject = data) },
        )
    }

    private fun deserializeWebPageInstantView(jsonObject: JsonObject): WebPageInstantView {
        return WebPageInstantView(
            pageBlocks = jsonObject.getObjects(key = "page_blocks") { data -> deserializePageBlock(jsonObject = data) },
            viewCount = jsonObject.getInt(key = "view_count"),
            version = jsonObject.getInt(key = "version"),
            isRtl = jsonObject.getBoolean(key = "is_rtl"),
            isFull = jsonObject.getBoolean(key = "is_full"),
            feedbackLink = jsonObject.getObject(key = "feedback_link") { data -> deserializeInternalLinkType(jsonObject = data) },
        )
    }
}
