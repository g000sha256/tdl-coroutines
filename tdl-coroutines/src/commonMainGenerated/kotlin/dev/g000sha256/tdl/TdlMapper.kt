/*
 * Copyright 2025 Georgii Ippolitov (g000sha256)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dev.g000sha256.tdl

import dev.g000sha256.tdl.dto.AccentColor
import dev.g000sha256.tdl.dto.AcceptedGiftTypes
import dev.g000sha256.tdl.dto.AccountInfo
import dev.g000sha256.tdl.dto.AccountTtl
import dev.g000sha256.tdl.dto.AddedReaction
import dev.g000sha256.tdl.dto.AddedReactions
import dev.g000sha256.tdl.dto.Address
import dev.g000sha256.tdl.dto.AdvertisementSponsor
import dev.g000sha256.tdl.dto.AffiliateInfo
import dev.g000sha256.tdl.dto.AffiliateProgramInfo
import dev.g000sha256.tdl.dto.AffiliateProgramParameters
import dev.g000sha256.tdl.dto.AffiliateProgramSortOrder
import dev.g000sha256.tdl.dto.AffiliateProgramSortOrderCreationDate
import dev.g000sha256.tdl.dto.AffiliateProgramSortOrderProfitability
import dev.g000sha256.tdl.dto.AffiliateProgramSortOrderRevenue
import dev.g000sha256.tdl.dto.AffiliateType
import dev.g000sha256.tdl.dto.AffiliateTypeBot
import dev.g000sha256.tdl.dto.AffiliateTypeChannel
import dev.g000sha256.tdl.dto.AffiliateTypeCurrentUser
import dev.g000sha256.tdl.dto.AlternativeVideo
import dev.g000sha256.tdl.dto.AnimatedChatPhoto
import dev.g000sha256.tdl.dto.AnimatedEmoji
import dev.g000sha256.tdl.dto.Animation
import dev.g000sha256.tdl.dto.Animations
import dev.g000sha256.tdl.dto.ArchiveChatListSettings
import dev.g000sha256.tdl.dto.AttachmentMenuBot
import dev.g000sha256.tdl.dto.AttachmentMenuBotColor
import dev.g000sha256.tdl.dto.Audio
import dev.g000sha256.tdl.dto.AuthenticationCodeInfo
import dev.g000sha256.tdl.dto.AuthenticationCodeType
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeCall
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeFirebaseAndroid
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeFirebaseIos
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeFlashCall
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeFragment
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeMissedCall
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeSms
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeSmsPhrase
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeSmsWord
import dev.g000sha256.tdl.dto.AuthenticationCodeTypeTelegramMessage
import dev.g000sha256.tdl.dto.AuthorizationState
import dev.g000sha256.tdl.dto.AuthorizationStateClosed
import dev.g000sha256.tdl.dto.AuthorizationStateClosing
import dev.g000sha256.tdl.dto.AuthorizationStateLoggingOut
import dev.g000sha256.tdl.dto.AuthorizationStateReady
import dev.g000sha256.tdl.dto.AuthorizationStateWaitCode
import dev.g000sha256.tdl.dto.AuthorizationStateWaitEmailAddress
import dev.g000sha256.tdl.dto.AuthorizationStateWaitEmailCode
import dev.g000sha256.tdl.dto.AuthorizationStateWaitOtherDeviceConfirmation
import dev.g000sha256.tdl.dto.AuthorizationStateWaitPassword
import dev.g000sha256.tdl.dto.AuthorizationStateWaitPhoneNumber
import dev.g000sha256.tdl.dto.AuthorizationStateWaitPremiumPurchase
import dev.g000sha256.tdl.dto.AuthorizationStateWaitRegistration
import dev.g000sha256.tdl.dto.AuthorizationStateWaitTdlibParameters
import dev.g000sha256.tdl.dto.AutoDownloadSettings
import dev.g000sha256.tdl.dto.AutoDownloadSettingsPresets
import dev.g000sha256.tdl.dto.AutosaveSettings
import dev.g000sha256.tdl.dto.AutosaveSettingsException
import dev.g000sha256.tdl.dto.AutosaveSettingsScope
import dev.g000sha256.tdl.dto.AutosaveSettingsScopeChannelChats
import dev.g000sha256.tdl.dto.AutosaveSettingsScopeChat
import dev.g000sha256.tdl.dto.AutosaveSettingsScopeGroupChats
import dev.g000sha256.tdl.dto.AutosaveSettingsScopePrivateChats
import dev.g000sha256.tdl.dto.AvailableGift
import dev.g000sha256.tdl.dto.AvailableGifts
import dev.g000sha256.tdl.dto.AvailableReaction
import dev.g000sha256.tdl.dto.AvailableReactions
import dev.g000sha256.tdl.dto.Background
import dev.g000sha256.tdl.dto.BackgroundFill
import dev.g000sha256.tdl.dto.BackgroundFillFreeformGradient
import dev.g000sha256.tdl.dto.BackgroundFillGradient
import dev.g000sha256.tdl.dto.BackgroundFillSolid
import dev.g000sha256.tdl.dto.BackgroundType
import dev.g000sha256.tdl.dto.BackgroundTypeChatTheme
import dev.g000sha256.tdl.dto.BackgroundTypeFill
import dev.g000sha256.tdl.dto.BackgroundTypePattern
import dev.g000sha256.tdl.dto.BackgroundTypeWallpaper
import dev.g000sha256.tdl.dto.Backgrounds
import dev.g000sha256.tdl.dto.BankCardActionOpenUrl
import dev.g000sha256.tdl.dto.BankCardInfo
import dev.g000sha256.tdl.dto.BasicGroup
import dev.g000sha256.tdl.dto.BasicGroupFullInfo
import dev.g000sha256.tdl.dto.Birthdate
import dev.g000sha256.tdl.dto.BlockList
import dev.g000sha256.tdl.dto.BlockListMain
import dev.g000sha256.tdl.dto.BlockListStories
import dev.g000sha256.tdl.dto.BotCommand
import dev.g000sha256.tdl.dto.BotCommandScope
import dev.g000sha256.tdl.dto.BotCommandScopeAllChatAdministrators
import dev.g000sha256.tdl.dto.BotCommandScopeAllGroupChats
import dev.g000sha256.tdl.dto.BotCommandScopeAllPrivateChats
import dev.g000sha256.tdl.dto.BotCommandScopeChat
import dev.g000sha256.tdl.dto.BotCommandScopeChatAdministrators
import dev.g000sha256.tdl.dto.BotCommandScopeChatMember
import dev.g000sha256.tdl.dto.BotCommandScopeDefault
import dev.g000sha256.tdl.dto.BotCommands
import dev.g000sha256.tdl.dto.BotInfo
import dev.g000sha256.tdl.dto.BotMediaPreview
import dev.g000sha256.tdl.dto.BotMediaPreviewInfo
import dev.g000sha256.tdl.dto.BotMediaPreviews
import dev.g000sha256.tdl.dto.BotMenuButton
import dev.g000sha256.tdl.dto.BotVerification
import dev.g000sha256.tdl.dto.BotVerificationParameters
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReason
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReasonAcceptedRequest
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReasonAddedToAttachmentMenu
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReasonConnectedWebsite
import dev.g000sha256.tdl.dto.BotWriteAccessAllowReasonLaunchedWebApp
import dev.g000sha256.tdl.dto.BusinessAwayMessageSchedule
import dev.g000sha256.tdl.dto.BusinessAwayMessageScheduleAlways
import dev.g000sha256.tdl.dto.BusinessAwayMessageScheduleCustom
import dev.g000sha256.tdl.dto.BusinessAwayMessageScheduleOutsideOfOpeningHours
import dev.g000sha256.tdl.dto.BusinessAwayMessageSettings
import dev.g000sha256.tdl.dto.BusinessBotManageBar
import dev.g000sha256.tdl.dto.BusinessBotRights
import dev.g000sha256.tdl.dto.BusinessChatLink
import dev.g000sha256.tdl.dto.BusinessChatLinkInfo
import dev.g000sha256.tdl.dto.BusinessChatLinks
import dev.g000sha256.tdl.dto.BusinessConnectedBot
import dev.g000sha256.tdl.dto.BusinessConnection
import dev.g000sha256.tdl.dto.BusinessFeature
import dev.g000sha256.tdl.dto.BusinessFeatureAccountLinks
import dev.g000sha256.tdl.dto.BusinessFeatureAwayMessage
import dev.g000sha256.tdl.dto.BusinessFeatureBots
import dev.g000sha256.tdl.dto.BusinessFeatureChatFolderTags
import dev.g000sha256.tdl.dto.BusinessFeatureEmojiStatus
import dev.g000sha256.tdl.dto.BusinessFeatureGreetingMessage
import dev.g000sha256.tdl.dto.BusinessFeatureLocation
import dev.g000sha256.tdl.dto.BusinessFeatureOpeningHours
import dev.g000sha256.tdl.dto.BusinessFeaturePromotionAnimation
import dev.g000sha256.tdl.dto.BusinessFeatureQuickReplies
import dev.g000sha256.tdl.dto.BusinessFeatureStartPage
import dev.g000sha256.tdl.dto.BusinessFeatureUpgradedStories
import dev.g000sha256.tdl.dto.BusinessFeatures
import dev.g000sha256.tdl.dto.BusinessGreetingMessageSettings
import dev.g000sha256.tdl.dto.BusinessInfo
import dev.g000sha256.tdl.dto.BusinessLocation
import dev.g000sha256.tdl.dto.BusinessMessage
import dev.g000sha256.tdl.dto.BusinessMessages
import dev.g000sha256.tdl.dto.BusinessOpeningHours
import dev.g000sha256.tdl.dto.BusinessOpeningHoursInterval
import dev.g000sha256.tdl.dto.BusinessRecipients
import dev.g000sha256.tdl.dto.BusinessStartPage
import dev.g000sha256.tdl.dto.Call
import dev.g000sha256.tdl.dto.CallDiscardReason
import dev.g000sha256.tdl.dto.CallDiscardReasonDeclined
import dev.g000sha256.tdl.dto.CallDiscardReasonDisconnected
import dev.g000sha256.tdl.dto.CallDiscardReasonEmpty
import dev.g000sha256.tdl.dto.CallDiscardReasonHungUp
import dev.g000sha256.tdl.dto.CallDiscardReasonMissed
import dev.g000sha256.tdl.dto.CallDiscardReasonUpgradeToGroupCall
import dev.g000sha256.tdl.dto.CallId
import dev.g000sha256.tdl.dto.CallProblem
import dev.g000sha256.tdl.dto.CallProblemDistortedSpeech
import dev.g000sha256.tdl.dto.CallProblemDistortedVideo
import dev.g000sha256.tdl.dto.CallProblemDropped
import dev.g000sha256.tdl.dto.CallProblemEcho
import dev.g000sha256.tdl.dto.CallProblemInterruptions
import dev.g000sha256.tdl.dto.CallProblemNoise
import dev.g000sha256.tdl.dto.CallProblemPixelatedVideo
import dev.g000sha256.tdl.dto.CallProblemSilentLocal
import dev.g000sha256.tdl.dto.CallProblemSilentRemote
import dev.g000sha256.tdl.dto.CallProtocol
import dev.g000sha256.tdl.dto.CallServer
import dev.g000sha256.tdl.dto.CallServerType
import dev.g000sha256.tdl.dto.CallServerTypeTelegramReflector
import dev.g000sha256.tdl.dto.CallServerTypeWebrtc
import dev.g000sha256.tdl.dto.CallState
import dev.g000sha256.tdl.dto.CallStateDiscarded
import dev.g000sha256.tdl.dto.CallStateError
import dev.g000sha256.tdl.dto.CallStateExchangingKeys
import dev.g000sha256.tdl.dto.CallStateHangingUp
import dev.g000sha256.tdl.dto.CallStatePending
import dev.g000sha256.tdl.dto.CallStateReady
import dev.g000sha256.tdl.dto.CallbackQueryAnswer
import dev.g000sha256.tdl.dto.CallbackQueryPayload
import dev.g000sha256.tdl.dto.CallbackQueryPayloadData
import dev.g000sha256.tdl.dto.CallbackQueryPayloadDataWithPassword
import dev.g000sha256.tdl.dto.CallbackQueryPayloadGame
import dev.g000sha256.tdl.dto.CanPostStoryResult
import dev.g000sha256.tdl.dto.CanPostStoryResultActiveStoryLimitExceeded
import dev.g000sha256.tdl.dto.CanPostStoryResultBoostNeeded
import dev.g000sha256.tdl.dto.CanPostStoryResultMonthlyLimitExceeded
import dev.g000sha256.tdl.dto.CanPostStoryResultOk
import dev.g000sha256.tdl.dto.CanPostStoryResultPremiumNeeded
import dev.g000sha256.tdl.dto.CanPostStoryResultWeeklyLimitExceeded
import dev.g000sha256.tdl.dto.CanSendMessageToUserResult
import dev.g000sha256.tdl.dto.CanSendMessageToUserResultOk
import dev.g000sha256.tdl.dto.CanSendMessageToUserResultUserHasPaidMessages
import dev.g000sha256.tdl.dto.CanSendMessageToUserResultUserIsDeleted
import dev.g000sha256.tdl.dto.CanSendMessageToUserResultUserRestrictsNewChats
import dev.g000sha256.tdl.dto.CanTransferOwnershipResult
import dev.g000sha256.tdl.dto.CanTransferOwnershipResultOk
import dev.g000sha256.tdl.dto.CanTransferOwnershipResultPasswordNeeded
import dev.g000sha256.tdl.dto.CanTransferOwnershipResultPasswordTooFresh
import dev.g000sha256.tdl.dto.CanTransferOwnershipResultSessionTooFresh
import dev.g000sha256.tdl.dto.Chat
import dev.g000sha256.tdl.dto.ChatAction
import dev.g000sha256.tdl.dto.ChatActionBar
import dev.g000sha256.tdl.dto.ChatActionBarAddContact
import dev.g000sha256.tdl.dto.ChatActionBarInviteMembers
import dev.g000sha256.tdl.dto.ChatActionBarJoinRequest
import dev.g000sha256.tdl.dto.ChatActionBarReportAddBlock
import dev.g000sha256.tdl.dto.ChatActionBarReportSpam
import dev.g000sha256.tdl.dto.ChatActionBarSharePhoneNumber
import dev.g000sha256.tdl.dto.ChatActionCancel
import dev.g000sha256.tdl.dto.ChatActionChoosingContact
import dev.g000sha256.tdl.dto.ChatActionChoosingLocation
import dev.g000sha256.tdl.dto.ChatActionChoosingSticker
import dev.g000sha256.tdl.dto.ChatActionRecordingVideo
import dev.g000sha256.tdl.dto.ChatActionRecordingVideoNote
import dev.g000sha256.tdl.dto.ChatActionRecordingVoiceNote
import dev.g000sha256.tdl.dto.ChatActionStartPlayingGame
import dev.g000sha256.tdl.dto.ChatActionTyping
import dev.g000sha256.tdl.dto.ChatActionUploadingDocument
import dev.g000sha256.tdl.dto.ChatActionUploadingPhoto
import dev.g000sha256.tdl.dto.ChatActionUploadingVideo
import dev.g000sha256.tdl.dto.ChatActionUploadingVideoNote
import dev.g000sha256.tdl.dto.ChatActionUploadingVoiceNote
import dev.g000sha256.tdl.dto.ChatActionWatchingAnimations
import dev.g000sha256.tdl.dto.ChatActiveStories
import dev.g000sha256.tdl.dto.ChatAdministrator
import dev.g000sha256.tdl.dto.ChatAdministratorRights
import dev.g000sha256.tdl.dto.ChatAdministrators
import dev.g000sha256.tdl.dto.ChatAvailableReactions
import dev.g000sha256.tdl.dto.ChatAvailableReactionsAll
import dev.g000sha256.tdl.dto.ChatAvailableReactionsSome
import dev.g000sha256.tdl.dto.ChatBackground
import dev.g000sha256.tdl.dto.ChatBoost
import dev.g000sha256.tdl.dto.ChatBoostFeatures
import dev.g000sha256.tdl.dto.ChatBoostLevelFeatures
import dev.g000sha256.tdl.dto.ChatBoostLink
import dev.g000sha256.tdl.dto.ChatBoostLinkInfo
import dev.g000sha256.tdl.dto.ChatBoostSlot
import dev.g000sha256.tdl.dto.ChatBoostSlots
import dev.g000sha256.tdl.dto.ChatBoostSource
import dev.g000sha256.tdl.dto.ChatBoostSourceGiftCode
import dev.g000sha256.tdl.dto.ChatBoostSourceGiveaway
import dev.g000sha256.tdl.dto.ChatBoostSourcePremium
import dev.g000sha256.tdl.dto.ChatBoostStatus
import dev.g000sha256.tdl.dto.ChatEvent
import dev.g000sha256.tdl.dto.ChatEventAccentColorChanged
import dev.g000sha256.tdl.dto.ChatEventAction
import dev.g000sha256.tdl.dto.ChatEventActiveUsernamesChanged
import dev.g000sha256.tdl.dto.ChatEventAutomaticTranslationToggled
import dev.g000sha256.tdl.dto.ChatEventAvailableReactionsChanged
import dev.g000sha256.tdl.dto.ChatEventBackgroundChanged
import dev.g000sha256.tdl.dto.ChatEventCustomEmojiStickerSetChanged
import dev.g000sha256.tdl.dto.ChatEventDescriptionChanged
import dev.g000sha256.tdl.dto.ChatEventEmojiStatusChanged
import dev.g000sha256.tdl.dto.ChatEventForumTopicCreated
import dev.g000sha256.tdl.dto.ChatEventForumTopicDeleted
import dev.g000sha256.tdl.dto.ChatEventForumTopicEdited
import dev.g000sha256.tdl.dto.ChatEventForumTopicPinned
import dev.g000sha256.tdl.dto.ChatEventForumTopicToggleIsClosed
import dev.g000sha256.tdl.dto.ChatEventForumTopicToggleIsHidden
import dev.g000sha256.tdl.dto.ChatEventHasAggressiveAntiSpamEnabledToggled
import dev.g000sha256.tdl.dto.ChatEventHasProtectedContentToggled
import dev.g000sha256.tdl.dto.ChatEventInviteLinkDeleted
import dev.g000sha256.tdl.dto.ChatEventInviteLinkEdited
import dev.g000sha256.tdl.dto.ChatEventInviteLinkRevoked
import dev.g000sha256.tdl.dto.ChatEventInvitesToggled
import dev.g000sha256.tdl.dto.ChatEventIsAllHistoryAvailableToggled
import dev.g000sha256.tdl.dto.ChatEventIsForumToggled
import dev.g000sha256.tdl.dto.ChatEventLinkedChatChanged
import dev.g000sha256.tdl.dto.ChatEventLocationChanged
import dev.g000sha256.tdl.dto.ChatEventLogFilters
import dev.g000sha256.tdl.dto.ChatEventMemberInvited
import dev.g000sha256.tdl.dto.ChatEventMemberJoined
import dev.g000sha256.tdl.dto.ChatEventMemberJoinedByInviteLink
import dev.g000sha256.tdl.dto.ChatEventMemberJoinedByRequest
import dev.g000sha256.tdl.dto.ChatEventMemberLeft
import dev.g000sha256.tdl.dto.ChatEventMemberPromoted
import dev.g000sha256.tdl.dto.ChatEventMemberRestricted
import dev.g000sha256.tdl.dto.ChatEventMemberSubscriptionExtended
import dev.g000sha256.tdl.dto.ChatEventMessageAutoDeleteTimeChanged
import dev.g000sha256.tdl.dto.ChatEventMessageDeleted
import dev.g000sha256.tdl.dto.ChatEventMessageEdited
import dev.g000sha256.tdl.dto.ChatEventMessagePinned
import dev.g000sha256.tdl.dto.ChatEventMessageUnpinned
import dev.g000sha256.tdl.dto.ChatEventPermissionsChanged
import dev.g000sha256.tdl.dto.ChatEventPhotoChanged
import dev.g000sha256.tdl.dto.ChatEventPollStopped
import dev.g000sha256.tdl.dto.ChatEventProfileAccentColorChanged
import dev.g000sha256.tdl.dto.ChatEventShowMessageSenderToggled
import dev.g000sha256.tdl.dto.ChatEventSignMessagesToggled
import dev.g000sha256.tdl.dto.ChatEventSlowModeDelayChanged
import dev.g000sha256.tdl.dto.ChatEventStickerSetChanged
import dev.g000sha256.tdl.dto.ChatEventTitleChanged
import dev.g000sha256.tdl.dto.ChatEventUsernameChanged
import dev.g000sha256.tdl.dto.ChatEventVideoChatCreated
import dev.g000sha256.tdl.dto.ChatEventVideoChatEnded
import dev.g000sha256.tdl.dto.ChatEventVideoChatMuteNewParticipantsToggled
import dev.g000sha256.tdl.dto.ChatEventVideoChatParticipantIsMutedToggled
import dev.g000sha256.tdl.dto.ChatEventVideoChatParticipantVolumeLevelChanged
import dev.g000sha256.tdl.dto.ChatEvents
import dev.g000sha256.tdl.dto.ChatFolder
import dev.g000sha256.tdl.dto.ChatFolderIcon
import dev.g000sha256.tdl.dto.ChatFolderInfo
import dev.g000sha256.tdl.dto.ChatFolderInviteLink
import dev.g000sha256.tdl.dto.ChatFolderInviteLinkInfo
import dev.g000sha256.tdl.dto.ChatFolderInviteLinks
import dev.g000sha256.tdl.dto.ChatFolderName
import dev.g000sha256.tdl.dto.ChatInviteLink
import dev.g000sha256.tdl.dto.ChatInviteLinkCount
import dev.g000sha256.tdl.dto.ChatInviteLinkCounts
import dev.g000sha256.tdl.dto.ChatInviteLinkInfo
import dev.g000sha256.tdl.dto.ChatInviteLinkMember
import dev.g000sha256.tdl.dto.ChatInviteLinkMembers
import dev.g000sha256.tdl.dto.ChatInviteLinkSubscriptionInfo
import dev.g000sha256.tdl.dto.ChatInviteLinks
import dev.g000sha256.tdl.dto.ChatJoinRequest
import dev.g000sha256.tdl.dto.ChatJoinRequests
import dev.g000sha256.tdl.dto.ChatJoinRequestsInfo
import dev.g000sha256.tdl.dto.ChatList
import dev.g000sha256.tdl.dto.ChatListArchive
import dev.g000sha256.tdl.dto.ChatListFolder
import dev.g000sha256.tdl.dto.ChatListMain
import dev.g000sha256.tdl.dto.ChatLists
import dev.g000sha256.tdl.dto.ChatLocation
import dev.g000sha256.tdl.dto.ChatMember
import dev.g000sha256.tdl.dto.ChatMemberStatus
import dev.g000sha256.tdl.dto.ChatMemberStatusAdministrator
import dev.g000sha256.tdl.dto.ChatMemberStatusBanned
import dev.g000sha256.tdl.dto.ChatMemberStatusCreator
import dev.g000sha256.tdl.dto.ChatMemberStatusLeft
import dev.g000sha256.tdl.dto.ChatMemberStatusMember
import dev.g000sha256.tdl.dto.ChatMemberStatusRestricted
import dev.g000sha256.tdl.dto.ChatMembers
import dev.g000sha256.tdl.dto.ChatMembersFilter
import dev.g000sha256.tdl.dto.ChatMembersFilterAdministrators
import dev.g000sha256.tdl.dto.ChatMembersFilterBanned
import dev.g000sha256.tdl.dto.ChatMembersFilterBots
import dev.g000sha256.tdl.dto.ChatMembersFilterContacts
import dev.g000sha256.tdl.dto.ChatMembersFilterMembers
import dev.g000sha256.tdl.dto.ChatMembersFilterMention
import dev.g000sha256.tdl.dto.ChatMembersFilterRestricted
import dev.g000sha256.tdl.dto.ChatMessageSender
import dev.g000sha256.tdl.dto.ChatMessageSenders
import dev.g000sha256.tdl.dto.ChatNotificationSettings
import dev.g000sha256.tdl.dto.ChatPermissions
import dev.g000sha256.tdl.dto.ChatPhoto
import dev.g000sha256.tdl.dto.ChatPhotoInfo
import dev.g000sha256.tdl.dto.ChatPhotoSticker
import dev.g000sha256.tdl.dto.ChatPhotoStickerType
import dev.g000sha256.tdl.dto.ChatPhotoStickerTypeCustomEmoji
import dev.g000sha256.tdl.dto.ChatPhotoStickerTypeRegularOrMask
import dev.g000sha256.tdl.dto.ChatPhotos
import dev.g000sha256.tdl.dto.ChatPosition
import dev.g000sha256.tdl.dto.ChatRevenueAmount
import dev.g000sha256.tdl.dto.ChatRevenueStatistics
import dev.g000sha256.tdl.dto.ChatRevenueTransaction
import dev.g000sha256.tdl.dto.ChatRevenueTransactionType
import dev.g000sha256.tdl.dto.ChatRevenueTransactionTypeEarnings
import dev.g000sha256.tdl.dto.ChatRevenueTransactionTypeRefund
import dev.g000sha256.tdl.dto.ChatRevenueTransactionTypeWithdrawal
import dev.g000sha256.tdl.dto.ChatRevenueTransactions
import dev.g000sha256.tdl.dto.ChatSource
import dev.g000sha256.tdl.dto.ChatSourceMtprotoProxy
import dev.g000sha256.tdl.dto.ChatSourcePublicServiceAnnouncement
import dev.g000sha256.tdl.dto.ChatStatistics
import dev.g000sha256.tdl.dto.ChatStatisticsAdministratorActionsInfo
import dev.g000sha256.tdl.dto.ChatStatisticsChannel
import dev.g000sha256.tdl.dto.ChatStatisticsInteractionInfo
import dev.g000sha256.tdl.dto.ChatStatisticsInviterInfo
import dev.g000sha256.tdl.dto.ChatStatisticsMessageSenderInfo
import dev.g000sha256.tdl.dto.ChatStatisticsObjectType
import dev.g000sha256.tdl.dto.ChatStatisticsObjectTypeMessage
import dev.g000sha256.tdl.dto.ChatStatisticsObjectTypeStory
import dev.g000sha256.tdl.dto.ChatStatisticsSupergroup
import dev.g000sha256.tdl.dto.ChatTheme
import dev.g000sha256.tdl.dto.ChatType
import dev.g000sha256.tdl.dto.ChatTypeBasicGroup
import dev.g000sha256.tdl.dto.ChatTypePrivate
import dev.g000sha256.tdl.dto.ChatTypeSecret
import dev.g000sha256.tdl.dto.ChatTypeSupergroup
import dev.g000sha256.tdl.dto.Chats
import dev.g000sha256.tdl.dto.CheckChatUsernameResult
import dev.g000sha256.tdl.dto.CheckChatUsernameResultOk
import dev.g000sha256.tdl.dto.CheckChatUsernameResultPublicChatsTooMany
import dev.g000sha256.tdl.dto.CheckChatUsernameResultPublicGroupsUnavailable
import dev.g000sha256.tdl.dto.CheckChatUsernameResultUsernameInvalid
import dev.g000sha256.tdl.dto.CheckChatUsernameResultUsernameOccupied
import dev.g000sha256.tdl.dto.CheckChatUsernameResultUsernamePurchasable
import dev.g000sha256.tdl.dto.CheckStickerSetNameResult
import dev.g000sha256.tdl.dto.CheckStickerSetNameResultNameInvalid
import dev.g000sha256.tdl.dto.CheckStickerSetNameResultNameOccupied
import dev.g000sha256.tdl.dto.CheckStickerSetNameResultOk
import dev.g000sha256.tdl.dto.Checklist
import dev.g000sha256.tdl.dto.ChecklistTask
import dev.g000sha256.tdl.dto.CloseBirthdayUser
import dev.g000sha256.tdl.dto.ClosedVectorPath
import dev.g000sha256.tdl.dto.CollectibleItemInfo
import dev.g000sha256.tdl.dto.CollectibleItemType
import dev.g000sha256.tdl.dto.CollectibleItemTypePhoneNumber
import dev.g000sha256.tdl.dto.CollectibleItemTypeUsername
import dev.g000sha256.tdl.dto.ConnectedAffiliateProgram
import dev.g000sha256.tdl.dto.ConnectedAffiliatePrograms
import dev.g000sha256.tdl.dto.ConnectedWebsite
import dev.g000sha256.tdl.dto.ConnectedWebsites
import dev.g000sha256.tdl.dto.ConnectionState
import dev.g000sha256.tdl.dto.ConnectionStateConnecting
import dev.g000sha256.tdl.dto.ConnectionStateConnectingToProxy
import dev.g000sha256.tdl.dto.ConnectionStateReady
import dev.g000sha256.tdl.dto.ConnectionStateUpdating
import dev.g000sha256.tdl.dto.ConnectionStateWaitingForNetwork
import dev.g000sha256.tdl.dto.Contact
import dev.g000sha256.tdl.dto.Count
import dev.g000sha256.tdl.dto.Countries
import dev.g000sha256.tdl.dto.CountryInfo
import dev.g000sha256.tdl.dto.CreatedBasicGroupChat
import dev.g000sha256.tdl.dto.CurrentWeather
import dev.g000sha256.tdl.dto.CustomRequestResult
import dev.g000sha256.tdl.dto.Data
import dev.g000sha256.tdl.dto.DatabaseStatistics
import dev.g000sha256.tdl.dto.Date
import dev.g000sha256.tdl.dto.DateRange
import dev.g000sha256.tdl.dto.DatedFile
import dev.g000sha256.tdl.dto.DeepLinkInfo
import dev.g000sha256.tdl.dto.DeviceToken
import dev.g000sha256.tdl.dto.DeviceTokenApplePush
import dev.g000sha256.tdl.dto.DeviceTokenApplePushVoIP
import dev.g000sha256.tdl.dto.DeviceTokenBlackBerryPush
import dev.g000sha256.tdl.dto.DeviceTokenFirebaseCloudMessaging
import dev.g000sha256.tdl.dto.DeviceTokenHuaweiPush
import dev.g000sha256.tdl.dto.DeviceTokenMicrosoftPush
import dev.g000sha256.tdl.dto.DeviceTokenMicrosoftPushVoIP
import dev.g000sha256.tdl.dto.DeviceTokenSimplePush
import dev.g000sha256.tdl.dto.DeviceTokenTizenPush
import dev.g000sha256.tdl.dto.DeviceTokenUbuntuPush
import dev.g000sha256.tdl.dto.DeviceTokenWebPush
import dev.g000sha256.tdl.dto.DeviceTokenWindowsPush
import dev.g000sha256.tdl.dto.DiceStickers
import dev.g000sha256.tdl.dto.DiceStickersRegular
import dev.g000sha256.tdl.dto.DiceStickersSlotMachine
import dev.g000sha256.tdl.dto.DirectMessagesChatTopic
import dev.g000sha256.tdl.dto.Document
import dev.g000sha256.tdl.dto.DownloadedFileCounts
import dev.g000sha256.tdl.dto.DraftMessage
import dev.g000sha256.tdl.dto.EmailAddressAuthentication
import dev.g000sha256.tdl.dto.EmailAddressAuthenticationAppleId
import dev.g000sha256.tdl.dto.EmailAddressAuthenticationCode
import dev.g000sha256.tdl.dto.EmailAddressAuthenticationCodeInfo
import dev.g000sha256.tdl.dto.EmailAddressAuthenticationGoogleId
import dev.g000sha256.tdl.dto.EmailAddressResetState
import dev.g000sha256.tdl.dto.EmailAddressResetStateAvailable
import dev.g000sha256.tdl.dto.EmailAddressResetStatePending
import dev.g000sha256.tdl.dto.EmojiCategories
import dev.g000sha256.tdl.dto.EmojiCategory
import dev.g000sha256.tdl.dto.EmojiCategorySource
import dev.g000sha256.tdl.dto.EmojiCategorySourcePremium
import dev.g000sha256.tdl.dto.EmojiCategorySourceSearch
import dev.g000sha256.tdl.dto.EmojiCategoryType
import dev.g000sha256.tdl.dto.EmojiCategoryTypeChatPhoto
import dev.g000sha256.tdl.dto.EmojiCategoryTypeDefault
import dev.g000sha256.tdl.dto.EmojiCategoryTypeEmojiStatus
import dev.g000sha256.tdl.dto.EmojiCategoryTypeRegularStickers
import dev.g000sha256.tdl.dto.EmojiKeyword
import dev.g000sha256.tdl.dto.EmojiKeywords
import dev.g000sha256.tdl.dto.EmojiReaction
import dev.g000sha256.tdl.dto.EmojiStatus
import dev.g000sha256.tdl.dto.EmojiStatusCustomEmojis
import dev.g000sha256.tdl.dto.EmojiStatusType
import dev.g000sha256.tdl.dto.EmojiStatusTypeCustomEmoji
import dev.g000sha256.tdl.dto.EmojiStatusTypeUpgradedGift
import dev.g000sha256.tdl.dto.EmojiStatuses
import dev.g000sha256.tdl.dto.Emojis
import dev.g000sha256.tdl.dto.EncryptedCredentials
import dev.g000sha256.tdl.dto.EncryptedPassportElement
import dev.g000sha256.tdl.dto.Error
import dev.g000sha256.tdl.dto.FactCheck
import dev.g000sha256.tdl.dto.FailedToAddMember
import dev.g000sha256.tdl.dto.FailedToAddMembers
import dev.g000sha256.tdl.dto.File
import dev.g000sha256.tdl.dto.FileDownload
import dev.g000sha256.tdl.dto.FileDownloadedPrefixSize
import dev.g000sha256.tdl.dto.FileType
import dev.g000sha256.tdl.dto.FileTypeAnimation
import dev.g000sha256.tdl.dto.FileTypeAudio
import dev.g000sha256.tdl.dto.FileTypeDocument
import dev.g000sha256.tdl.dto.FileTypeNone
import dev.g000sha256.tdl.dto.FileTypeNotificationSound
import dev.g000sha256.tdl.dto.FileTypePhoto
import dev.g000sha256.tdl.dto.FileTypePhotoStory
import dev.g000sha256.tdl.dto.FileTypeProfilePhoto
import dev.g000sha256.tdl.dto.FileTypeSecret
import dev.g000sha256.tdl.dto.FileTypeSecretThumbnail
import dev.g000sha256.tdl.dto.FileTypeSecure
import dev.g000sha256.tdl.dto.FileTypeSelfDestructingPhoto
import dev.g000sha256.tdl.dto.FileTypeSelfDestructingVideo
import dev.g000sha256.tdl.dto.FileTypeSelfDestructingVideoNote
import dev.g000sha256.tdl.dto.FileTypeSelfDestructingVoiceNote
import dev.g000sha256.tdl.dto.FileTypeSticker
import dev.g000sha256.tdl.dto.FileTypeThumbnail
import dev.g000sha256.tdl.dto.FileTypeUnknown
import dev.g000sha256.tdl.dto.FileTypeVideo
import dev.g000sha256.tdl.dto.FileTypeVideoNote
import dev.g000sha256.tdl.dto.FileTypeVideoStory
import dev.g000sha256.tdl.dto.FileTypeVoiceNote
import dev.g000sha256.tdl.dto.FileTypeWallpaper
import dev.g000sha256.tdl.dto.FirebaseAuthenticationSettings
import dev.g000sha256.tdl.dto.FirebaseAuthenticationSettingsAndroid
import dev.g000sha256.tdl.dto.FirebaseAuthenticationSettingsIos
import dev.g000sha256.tdl.dto.FirebaseDeviceVerificationParameters
import dev.g000sha256.tdl.dto.FirebaseDeviceVerificationParametersPlayIntegrity
import dev.g000sha256.tdl.dto.FirebaseDeviceVerificationParametersSafetyNet
import dev.g000sha256.tdl.dto.FormattedText
import dev.g000sha256.tdl.dto.ForumTopic
import dev.g000sha256.tdl.dto.ForumTopicIcon
import dev.g000sha256.tdl.dto.ForumTopicInfo
import dev.g000sha256.tdl.dto.ForumTopics
import dev.g000sha256.tdl.dto.ForwardSource
import dev.g000sha256.tdl.dto.FoundAffiliateProgram
import dev.g000sha256.tdl.dto.FoundAffiliatePrograms
import dev.g000sha256.tdl.dto.FoundChatBoosts
import dev.g000sha256.tdl.dto.FoundChatMessages
import dev.g000sha256.tdl.dto.FoundFileDownloads
import dev.g000sha256.tdl.dto.FoundMessages
import dev.g000sha256.tdl.dto.FoundPosition
import dev.g000sha256.tdl.dto.FoundPositions
import dev.g000sha256.tdl.dto.FoundStories
import dev.g000sha256.tdl.dto.FoundUsers
import dev.g000sha256.tdl.dto.FoundWebApp
import dev.g000sha256.tdl.dto.Game
import dev.g000sha256.tdl.dto.GameHighScore
import dev.g000sha256.tdl.dto.GameHighScores
import dev.g000sha256.tdl.dto.Gift
import dev.g000sha256.tdl.dto.GiftForResale
import dev.g000sha256.tdl.dto.GiftForResaleOrder
import dev.g000sha256.tdl.dto.GiftForResaleOrderNumber
import dev.g000sha256.tdl.dto.GiftForResaleOrderPrice
import dev.g000sha256.tdl.dto.GiftForResaleOrderPriceChangeDate
import dev.g000sha256.tdl.dto.GiftSettings
import dev.g000sha256.tdl.dto.GiftUpgradePreview
import dev.g000sha256.tdl.dto.GiftsForResale
import dev.g000sha256.tdl.dto.GiveawayInfo
import dev.g000sha256.tdl.dto.GiveawayInfoCompleted
import dev.g000sha256.tdl.dto.GiveawayInfoOngoing
import dev.g000sha256.tdl.dto.GiveawayParameters
import dev.g000sha256.tdl.dto.GiveawayParticipantStatus
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusAdministrator
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusAlreadyWasMember
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusDisallowedCountry
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusEligible
import dev.g000sha256.tdl.dto.GiveawayParticipantStatusParticipating
import dev.g000sha256.tdl.dto.GiveawayPrize
import dev.g000sha256.tdl.dto.GiveawayPrizePremium
import dev.g000sha256.tdl.dto.GiveawayPrizeStars
import dev.g000sha256.tdl.dto.GroupCall
import dev.g000sha256.tdl.dto.GroupCallDataChannel
import dev.g000sha256.tdl.dto.GroupCallDataChannelMain
import dev.g000sha256.tdl.dto.GroupCallDataChannelScreenSharing
import dev.g000sha256.tdl.dto.GroupCallId
import dev.g000sha256.tdl.dto.GroupCallInfo
import dev.g000sha256.tdl.dto.GroupCallJoinParameters
import dev.g000sha256.tdl.dto.GroupCallParticipant
import dev.g000sha256.tdl.dto.GroupCallParticipantVideoInfo
import dev.g000sha256.tdl.dto.GroupCallParticipants
import dev.g000sha256.tdl.dto.GroupCallRecentSpeaker
import dev.g000sha256.tdl.dto.GroupCallVideoQuality
import dev.g000sha256.tdl.dto.GroupCallVideoQualityFull
import dev.g000sha256.tdl.dto.GroupCallVideoQualityMedium
import dev.g000sha256.tdl.dto.GroupCallVideoQualityThumbnail
import dev.g000sha256.tdl.dto.GroupCallVideoSourceGroup
import dev.g000sha256.tdl.dto.Hashtags
import dev.g000sha256.tdl.dto.HttpUrl
import dev.g000sha256.tdl.dto.IdentityDocument
import dev.g000sha256.tdl.dto.ImportedContacts
import dev.g000sha256.tdl.dto.InlineKeyboardButton
import dev.g000sha256.tdl.dto.InlineKeyboardButtonType
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeBuy
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeCallback
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeCallbackGame
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeCallbackWithPassword
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeCopyText
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeLoginUrl
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeSwitchInline
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeUrl
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeUser
import dev.g000sha256.tdl.dto.InlineKeyboardButtonTypeWebApp
import dev.g000sha256.tdl.dto.InlineQueryResult
import dev.g000sha256.tdl.dto.InlineQueryResultAnimation
import dev.g000sha256.tdl.dto.InlineQueryResultArticle
import dev.g000sha256.tdl.dto.InlineQueryResultAudio
import dev.g000sha256.tdl.dto.InlineQueryResultContact
import dev.g000sha256.tdl.dto.InlineQueryResultDocument
import dev.g000sha256.tdl.dto.InlineQueryResultGame
import dev.g000sha256.tdl.dto.InlineQueryResultLocation
import dev.g000sha256.tdl.dto.InlineQueryResultPhoto
import dev.g000sha256.tdl.dto.InlineQueryResultSticker
import dev.g000sha256.tdl.dto.InlineQueryResultVenue
import dev.g000sha256.tdl.dto.InlineQueryResultVideo
import dev.g000sha256.tdl.dto.InlineQueryResultVoiceNote
import dev.g000sha256.tdl.dto.InlineQueryResults
import dev.g000sha256.tdl.dto.InlineQueryResultsButton
import dev.g000sha256.tdl.dto.InlineQueryResultsButtonType
import dev.g000sha256.tdl.dto.InlineQueryResultsButtonTypeStartBot
import dev.g000sha256.tdl.dto.InlineQueryResultsButtonTypeWebApp
import dev.g000sha256.tdl.dto.InputBackground
import dev.g000sha256.tdl.dto.InputBackgroundLocal
import dev.g000sha256.tdl.dto.InputBackgroundPrevious
import dev.g000sha256.tdl.dto.InputBackgroundRemote
import dev.g000sha256.tdl.dto.InputBusinessChatLink
import dev.g000sha256.tdl.dto.InputBusinessStartPage
import dev.g000sha256.tdl.dto.InputChatPhoto
import dev.g000sha256.tdl.dto.InputChatPhotoAnimation
import dev.g000sha256.tdl.dto.InputChatPhotoPrevious
import dev.g000sha256.tdl.dto.InputChatPhotoStatic
import dev.g000sha256.tdl.dto.InputChatPhotoSticker
import dev.g000sha256.tdl.dto.InputChecklist
import dev.g000sha256.tdl.dto.InputChecklistTask
import dev.g000sha256.tdl.dto.InputCredentials
import dev.g000sha256.tdl.dto.InputCredentialsApplePay
import dev.g000sha256.tdl.dto.InputCredentialsGooglePay
import dev.g000sha256.tdl.dto.InputCredentialsNew
import dev.g000sha256.tdl.dto.InputCredentialsSaved
import dev.g000sha256.tdl.dto.InputFile
import dev.g000sha256.tdl.dto.InputFileGenerated
import dev.g000sha256.tdl.dto.InputFileId
import dev.g000sha256.tdl.dto.InputFileLocal
import dev.g000sha256.tdl.dto.InputFileRemote
import dev.g000sha256.tdl.dto.InputGroupCall
import dev.g000sha256.tdl.dto.InputGroupCallLink
import dev.g000sha256.tdl.dto.InputGroupCallMessage
import dev.g000sha256.tdl.dto.InputIdentityDocument
import dev.g000sha256.tdl.dto.InputInlineQueryResult
import dev.g000sha256.tdl.dto.InputInlineQueryResultAnimation
import dev.g000sha256.tdl.dto.InputInlineQueryResultArticle
import dev.g000sha256.tdl.dto.InputInlineQueryResultAudio
import dev.g000sha256.tdl.dto.InputInlineQueryResultContact
import dev.g000sha256.tdl.dto.InputInlineQueryResultDocument
import dev.g000sha256.tdl.dto.InputInlineQueryResultGame
import dev.g000sha256.tdl.dto.InputInlineQueryResultLocation
import dev.g000sha256.tdl.dto.InputInlineQueryResultPhoto
import dev.g000sha256.tdl.dto.InputInlineQueryResultSticker
import dev.g000sha256.tdl.dto.InputInlineQueryResultVenue
import dev.g000sha256.tdl.dto.InputInlineQueryResultVideo
import dev.g000sha256.tdl.dto.InputInlineQueryResultVoiceNote
import dev.g000sha256.tdl.dto.InputInvoice
import dev.g000sha256.tdl.dto.InputInvoiceMessage
import dev.g000sha256.tdl.dto.InputInvoiceName
import dev.g000sha256.tdl.dto.InputInvoiceTelegram
import dev.g000sha256.tdl.dto.InputMessageAnimation
import dev.g000sha256.tdl.dto.InputMessageAudio
import dev.g000sha256.tdl.dto.InputMessageChecklist
import dev.g000sha256.tdl.dto.InputMessageContact
import dev.g000sha256.tdl.dto.InputMessageContent
import dev.g000sha256.tdl.dto.InputMessageDice
import dev.g000sha256.tdl.dto.InputMessageDocument
import dev.g000sha256.tdl.dto.InputMessageForwarded
import dev.g000sha256.tdl.dto.InputMessageGame
import dev.g000sha256.tdl.dto.InputMessageInvoice
import dev.g000sha256.tdl.dto.InputMessageLocation
import dev.g000sha256.tdl.dto.InputMessagePaidMedia
import dev.g000sha256.tdl.dto.InputMessagePhoto
import dev.g000sha256.tdl.dto.InputMessagePoll
import dev.g000sha256.tdl.dto.InputMessageReplyTo
import dev.g000sha256.tdl.dto.InputMessageReplyToExternalMessage
import dev.g000sha256.tdl.dto.InputMessageReplyToMessage
import dev.g000sha256.tdl.dto.InputMessageReplyToStory
import dev.g000sha256.tdl.dto.InputMessageSticker
import dev.g000sha256.tdl.dto.InputMessageStory
import dev.g000sha256.tdl.dto.InputMessageText
import dev.g000sha256.tdl.dto.InputMessageVenue
import dev.g000sha256.tdl.dto.InputMessageVideo
import dev.g000sha256.tdl.dto.InputMessageVideoNote
import dev.g000sha256.tdl.dto.InputMessageVoiceNote
import dev.g000sha256.tdl.dto.InputPaidMedia
import dev.g000sha256.tdl.dto.InputPaidMediaType
import dev.g000sha256.tdl.dto.InputPaidMediaTypePhoto
import dev.g000sha256.tdl.dto.InputPaidMediaTypeVideo
import dev.g000sha256.tdl.dto.InputPassportElement
import dev.g000sha256.tdl.dto.InputPassportElementAddress
import dev.g000sha256.tdl.dto.InputPassportElementBankStatement
import dev.g000sha256.tdl.dto.InputPassportElementDriverLicense
import dev.g000sha256.tdl.dto.InputPassportElementEmailAddress
import dev.g000sha256.tdl.dto.InputPassportElementError
import dev.g000sha256.tdl.dto.InputPassportElementErrorSource
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceDataField
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceFile
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceFiles
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceFrontSide
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceReverseSide
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceSelfie
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceTranslationFile
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceTranslationFiles
import dev.g000sha256.tdl.dto.InputPassportElementErrorSourceUnspecified
import dev.g000sha256.tdl.dto.InputPassportElementIdentityCard
import dev.g000sha256.tdl.dto.InputPassportElementInternalPassport
import dev.g000sha256.tdl.dto.InputPassportElementPassport
import dev.g000sha256.tdl.dto.InputPassportElementPassportRegistration
import dev.g000sha256.tdl.dto.InputPassportElementPersonalDetails
import dev.g000sha256.tdl.dto.InputPassportElementPhoneNumber
import dev.g000sha256.tdl.dto.InputPassportElementRentalAgreement
import dev.g000sha256.tdl.dto.InputPassportElementTemporaryRegistration
import dev.g000sha256.tdl.dto.InputPassportElementUtilityBill
import dev.g000sha256.tdl.dto.InputPersonalDocument
import dev.g000sha256.tdl.dto.InputSticker
import dev.g000sha256.tdl.dto.InputStoryArea
import dev.g000sha256.tdl.dto.InputStoryAreaType
import dev.g000sha256.tdl.dto.InputStoryAreaTypeFoundVenue
import dev.g000sha256.tdl.dto.InputStoryAreaTypeLink
import dev.g000sha256.tdl.dto.InputStoryAreaTypeLocation
import dev.g000sha256.tdl.dto.InputStoryAreaTypeMessage
import dev.g000sha256.tdl.dto.InputStoryAreaTypePreviousVenue
import dev.g000sha256.tdl.dto.InputStoryAreaTypeSuggestedReaction
import dev.g000sha256.tdl.dto.InputStoryAreaTypeUpgradedGift
import dev.g000sha256.tdl.dto.InputStoryAreaTypeWeather
import dev.g000sha256.tdl.dto.InputStoryAreas
import dev.g000sha256.tdl.dto.InputStoryContent
import dev.g000sha256.tdl.dto.InputStoryContentPhoto
import dev.g000sha256.tdl.dto.InputStoryContentVideo
import dev.g000sha256.tdl.dto.InputTextQuote
import dev.g000sha256.tdl.dto.InputThumbnail
import dev.g000sha256.tdl.dto.InternalLinkType
import dev.g000sha256.tdl.dto.InternalLinkTypeActiveSessions
import dev.g000sha256.tdl.dto.InternalLinkTypeAttachmentMenuBot
import dev.g000sha256.tdl.dto.InternalLinkTypeAuthenticationCode
import dev.g000sha256.tdl.dto.InternalLinkTypeBackground
import dev.g000sha256.tdl.dto.InternalLinkTypeBotAddToChannel
import dev.g000sha256.tdl.dto.InternalLinkTypeBotStart
import dev.g000sha256.tdl.dto.InternalLinkTypeBotStartInGroup
import dev.g000sha256.tdl.dto.InternalLinkTypeBusinessChat
import dev.g000sha256.tdl.dto.InternalLinkTypeBuyStars
import dev.g000sha256.tdl.dto.InternalLinkTypeChangePhoneNumber
import dev.g000sha256.tdl.dto.InternalLinkTypeChatAffiliateProgram
import dev.g000sha256.tdl.dto.InternalLinkTypeChatBoost
import dev.g000sha256.tdl.dto.InternalLinkTypeChatFolderInvite
import dev.g000sha256.tdl.dto.InternalLinkTypeChatFolderSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeChatInvite
import dev.g000sha256.tdl.dto.InternalLinkTypeDefaultMessageAutoDeleteTimerSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeEditProfileSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeGame
import dev.g000sha256.tdl.dto.InternalLinkTypeGroupCall
import dev.g000sha256.tdl.dto.InternalLinkTypeInstantView
import dev.g000sha256.tdl.dto.InternalLinkTypeInvoice
import dev.g000sha256.tdl.dto.InternalLinkTypeLanguagePack
import dev.g000sha256.tdl.dto.InternalLinkTypeLanguageSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeMainWebApp
import dev.g000sha256.tdl.dto.InternalLinkTypeMessage
import dev.g000sha256.tdl.dto.InternalLinkTypeMessageDraft
import dev.g000sha256.tdl.dto.InternalLinkTypeMyStars
import dev.g000sha256.tdl.dto.InternalLinkTypePassportDataRequest
import dev.g000sha256.tdl.dto.InternalLinkTypePhoneNumberConfirmation
import dev.g000sha256.tdl.dto.InternalLinkTypePremiumFeatures
import dev.g000sha256.tdl.dto.InternalLinkTypePremiumGift
import dev.g000sha256.tdl.dto.InternalLinkTypePremiumGiftCode
import dev.g000sha256.tdl.dto.InternalLinkTypePrivacyAndSecuritySettings
import dev.g000sha256.tdl.dto.InternalLinkTypeProxy
import dev.g000sha256.tdl.dto.InternalLinkTypePublicChat
import dev.g000sha256.tdl.dto.InternalLinkTypeQrCodeAuthentication
import dev.g000sha256.tdl.dto.InternalLinkTypeRestorePurchases
import dev.g000sha256.tdl.dto.InternalLinkTypeSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeStickerSet
import dev.g000sha256.tdl.dto.InternalLinkTypeStory
import dev.g000sha256.tdl.dto.InternalLinkTypeTheme
import dev.g000sha256.tdl.dto.InternalLinkTypeThemeSettings
import dev.g000sha256.tdl.dto.InternalLinkTypeUnknownDeepLink
import dev.g000sha256.tdl.dto.InternalLinkTypeUnsupportedProxy
import dev.g000sha256.tdl.dto.InternalLinkTypeUpgradedGift
import dev.g000sha256.tdl.dto.InternalLinkTypeUserPhoneNumber
import dev.g000sha256.tdl.dto.InternalLinkTypeUserToken
import dev.g000sha256.tdl.dto.InternalLinkTypeVideoChat
import dev.g000sha256.tdl.dto.InternalLinkTypeWebApp
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResult
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResultSuccess
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResultUserAlreadyParticipant
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResultUserPrivacyRestricted
import dev.g000sha256.tdl.dto.InviteGroupCallParticipantResultUserWasBanned
import dev.g000sha256.tdl.dto.InviteLinkChatType
import dev.g000sha256.tdl.dto.InviteLinkChatTypeBasicGroup
import dev.g000sha256.tdl.dto.InviteLinkChatTypeChannel
import dev.g000sha256.tdl.dto.InviteLinkChatTypeSupergroup
import dev.g000sha256.tdl.dto.Invoice
import dev.g000sha256.tdl.dto.JsonObjectMember
import dev.g000sha256.tdl.dto.JsonValue
import dev.g000sha256.tdl.dto.JsonValueArray
import dev.g000sha256.tdl.dto.JsonValueBoolean
import dev.g000sha256.tdl.dto.JsonValueNull
import dev.g000sha256.tdl.dto.JsonValueNumber
import dev.g000sha256.tdl.dto.JsonValueObject
import dev.g000sha256.tdl.dto.JsonValueString
import dev.g000sha256.tdl.dto.KeyboardButton
import dev.g000sha256.tdl.dto.KeyboardButtonType
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestChat
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestLocation
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestPhoneNumber
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestPoll
import dev.g000sha256.tdl.dto.KeyboardButtonTypeRequestUsers
import dev.g000sha256.tdl.dto.KeyboardButtonTypeText
import dev.g000sha256.tdl.dto.KeyboardButtonTypeWebApp
import dev.g000sha256.tdl.dto.LabeledPricePart
import dev.g000sha256.tdl.dto.LanguagePackInfo
import dev.g000sha256.tdl.dto.LanguagePackString
import dev.g000sha256.tdl.dto.LanguagePackStringValue
import dev.g000sha256.tdl.dto.LanguagePackStringValueDeleted
import dev.g000sha256.tdl.dto.LanguagePackStringValueOrdinary
import dev.g000sha256.tdl.dto.LanguagePackStringValuePluralized
import dev.g000sha256.tdl.dto.LanguagePackStrings
import dev.g000sha256.tdl.dto.LinkPreview
import dev.g000sha256.tdl.dto.LinkPreviewAlbumMedia
import dev.g000sha256.tdl.dto.LinkPreviewAlbumMediaPhoto
import dev.g000sha256.tdl.dto.LinkPreviewAlbumMediaVideo
import dev.g000sha256.tdl.dto.LinkPreviewOptions
import dev.g000sha256.tdl.dto.LinkPreviewType
import dev.g000sha256.tdl.dto.LinkPreviewTypeAlbum
import dev.g000sha256.tdl.dto.LinkPreviewTypeAnimation
import dev.g000sha256.tdl.dto.LinkPreviewTypeApp
import dev.g000sha256.tdl.dto.LinkPreviewTypeArticle
import dev.g000sha256.tdl.dto.LinkPreviewTypeAudio
import dev.g000sha256.tdl.dto.LinkPreviewTypeBackground
import dev.g000sha256.tdl.dto.LinkPreviewTypeChannelBoost
import dev.g000sha256.tdl.dto.LinkPreviewTypeChat
import dev.g000sha256.tdl.dto.LinkPreviewTypeDocument
import dev.g000sha256.tdl.dto.LinkPreviewTypeEmbeddedAnimationPlayer
import dev.g000sha256.tdl.dto.LinkPreviewTypeEmbeddedAudioPlayer
import dev.g000sha256.tdl.dto.LinkPreviewTypeEmbeddedVideoPlayer
import dev.g000sha256.tdl.dto.LinkPreviewTypeExternalAudio
import dev.g000sha256.tdl.dto.LinkPreviewTypeExternalVideo
import dev.g000sha256.tdl.dto.LinkPreviewTypeGroupCall
import dev.g000sha256.tdl.dto.LinkPreviewTypeInvoice
import dev.g000sha256.tdl.dto.LinkPreviewTypeMessage
import dev.g000sha256.tdl.dto.LinkPreviewTypePhoto
import dev.g000sha256.tdl.dto.LinkPreviewTypePremiumGiftCode
import dev.g000sha256.tdl.dto.LinkPreviewTypeShareableChatFolder
import dev.g000sha256.tdl.dto.LinkPreviewTypeSticker
import dev.g000sha256.tdl.dto.LinkPreviewTypeStickerSet
import dev.g000sha256.tdl.dto.LinkPreviewTypeStory
import dev.g000sha256.tdl.dto.LinkPreviewTypeSupergroupBoost
import dev.g000sha256.tdl.dto.LinkPreviewTypeTheme
import dev.g000sha256.tdl.dto.LinkPreviewTypeUnsupported
import dev.g000sha256.tdl.dto.LinkPreviewTypeUpgradedGift
import dev.g000sha256.tdl.dto.LinkPreviewTypeUser
import dev.g000sha256.tdl.dto.LinkPreviewTypeVideo
import dev.g000sha256.tdl.dto.LinkPreviewTypeVideoChat
import dev.g000sha256.tdl.dto.LinkPreviewTypeVideoNote
import dev.g000sha256.tdl.dto.LinkPreviewTypeVoiceNote
import dev.g000sha256.tdl.dto.LinkPreviewTypeWebApp
import dev.g000sha256.tdl.dto.LocalFile
import dev.g000sha256.tdl.dto.LocalizationTargetInfo
import dev.g000sha256.tdl.dto.Location
import dev.g000sha256.tdl.dto.LocationAddress
import dev.g000sha256.tdl.dto.LogStream
import dev.g000sha256.tdl.dto.LogStreamDefault
import dev.g000sha256.tdl.dto.LogStreamEmpty
import dev.g000sha256.tdl.dto.LogStreamFile
import dev.g000sha256.tdl.dto.LogTags
import dev.g000sha256.tdl.dto.LogVerbosityLevel
import dev.g000sha256.tdl.dto.LoginUrlInfo
import dev.g000sha256.tdl.dto.LoginUrlInfoOpen
import dev.g000sha256.tdl.dto.LoginUrlInfoRequestConfirmation
import dev.g000sha256.tdl.dto.MainWebApp
import dev.g000sha256.tdl.dto.MaskPoint
import dev.g000sha256.tdl.dto.MaskPointChin
import dev.g000sha256.tdl.dto.MaskPointEyes
import dev.g000sha256.tdl.dto.MaskPointForehead
import dev.g000sha256.tdl.dto.MaskPointMouth
import dev.g000sha256.tdl.dto.MaskPosition
import dev.g000sha256.tdl.dto.Message
import dev.g000sha256.tdl.dto.MessageAnimatedEmoji
import dev.g000sha256.tdl.dto.MessageAnimation
import dev.g000sha256.tdl.dto.MessageAudio
import dev.g000sha256.tdl.dto.MessageAutoDeleteTime
import dev.g000sha256.tdl.dto.MessageBasicGroupChatCreate
import dev.g000sha256.tdl.dto.MessageBotWriteAccessAllowed
import dev.g000sha256.tdl.dto.MessageCalendar
import dev.g000sha256.tdl.dto.MessageCalendarDay
import dev.g000sha256.tdl.dto.MessageCall
import dev.g000sha256.tdl.dto.MessageChatAddMembers
import dev.g000sha256.tdl.dto.MessageChatBoost
import dev.g000sha256.tdl.dto.MessageChatChangePhoto
import dev.g000sha256.tdl.dto.MessageChatChangeTitle
import dev.g000sha256.tdl.dto.MessageChatDeleteMember
import dev.g000sha256.tdl.dto.MessageChatDeletePhoto
import dev.g000sha256.tdl.dto.MessageChatJoinByLink
import dev.g000sha256.tdl.dto.MessageChatJoinByRequest
import dev.g000sha256.tdl.dto.MessageChatSetBackground
import dev.g000sha256.tdl.dto.MessageChatSetMessageAutoDeleteTime
import dev.g000sha256.tdl.dto.MessageChatSetTheme
import dev.g000sha256.tdl.dto.MessageChatShared
import dev.g000sha256.tdl.dto.MessageChatUpgradeFrom
import dev.g000sha256.tdl.dto.MessageChatUpgradeTo
import dev.g000sha256.tdl.dto.MessageChecklist
import dev.g000sha256.tdl.dto.MessageChecklistTasksAdded
import dev.g000sha256.tdl.dto.MessageChecklistTasksDone
import dev.g000sha256.tdl.dto.MessageContact
import dev.g000sha256.tdl.dto.MessageContactRegistered
import dev.g000sha256.tdl.dto.MessageContent
import dev.g000sha256.tdl.dto.MessageCopyOptions
import dev.g000sha256.tdl.dto.MessageCustomServiceAction
import dev.g000sha256.tdl.dto.MessageDice
import dev.g000sha256.tdl.dto.MessageDirectMessagePriceChanged
import dev.g000sha256.tdl.dto.MessageDocument
import dev.g000sha256.tdl.dto.MessageEffect
import dev.g000sha256.tdl.dto.MessageEffectType
import dev.g000sha256.tdl.dto.MessageEffectTypeEmojiReaction
import dev.g000sha256.tdl.dto.MessageEffectTypePremiumSticker
import dev.g000sha256.tdl.dto.MessageExpiredPhoto
import dev.g000sha256.tdl.dto.MessageExpiredVideo
import dev.g000sha256.tdl.dto.MessageExpiredVideoNote
import dev.g000sha256.tdl.dto.MessageExpiredVoiceNote
import dev.g000sha256.tdl.dto.MessageFileType
import dev.g000sha256.tdl.dto.MessageFileTypeGroup
import dev.g000sha256.tdl.dto.MessageFileTypePrivate
import dev.g000sha256.tdl.dto.MessageFileTypeUnknown
import dev.g000sha256.tdl.dto.MessageForumTopicCreated
import dev.g000sha256.tdl.dto.MessageForumTopicEdited
import dev.g000sha256.tdl.dto.MessageForumTopicIsClosedToggled
import dev.g000sha256.tdl.dto.MessageForumTopicIsHiddenToggled
import dev.g000sha256.tdl.dto.MessageForwardInfo
import dev.g000sha256.tdl.dto.MessageGame
import dev.g000sha256.tdl.dto.MessageGameScore
import dev.g000sha256.tdl.dto.MessageGift
import dev.g000sha256.tdl.dto.MessageGiftedPremium
import dev.g000sha256.tdl.dto.MessageGiftedStars
import dev.g000sha256.tdl.dto.MessageGiveaway
import dev.g000sha256.tdl.dto.MessageGiveawayCompleted
import dev.g000sha256.tdl.dto.MessageGiveawayCreated
import dev.g000sha256.tdl.dto.MessageGiveawayPrizeStars
import dev.g000sha256.tdl.dto.MessageGiveawayWinners
import dev.g000sha256.tdl.dto.MessageGroupCall
import dev.g000sha256.tdl.dto.MessageImportInfo
import dev.g000sha256.tdl.dto.MessageInteractionInfo
import dev.g000sha256.tdl.dto.MessageInviteVideoChatParticipants
import dev.g000sha256.tdl.dto.MessageInvoice
import dev.g000sha256.tdl.dto.MessageLink
import dev.g000sha256.tdl.dto.MessageLinkInfo
import dev.g000sha256.tdl.dto.MessageLocation
import dev.g000sha256.tdl.dto.MessageOrigin
import dev.g000sha256.tdl.dto.MessageOriginChannel
import dev.g000sha256.tdl.dto.MessageOriginChat
import dev.g000sha256.tdl.dto.MessageOriginHiddenUser
import dev.g000sha256.tdl.dto.MessageOriginUser
import dev.g000sha256.tdl.dto.MessagePaidMedia
import dev.g000sha256.tdl.dto.MessagePaidMessagePriceChanged
import dev.g000sha256.tdl.dto.MessagePaidMessagesRefunded
import dev.g000sha256.tdl.dto.MessagePassportDataReceived
import dev.g000sha256.tdl.dto.MessagePassportDataSent
import dev.g000sha256.tdl.dto.MessagePaymentRefunded
import dev.g000sha256.tdl.dto.MessagePaymentSuccessful
import dev.g000sha256.tdl.dto.MessagePaymentSuccessfulBot
import dev.g000sha256.tdl.dto.MessagePhoto
import dev.g000sha256.tdl.dto.MessagePinMessage
import dev.g000sha256.tdl.dto.MessagePoll
import dev.g000sha256.tdl.dto.MessagePosition
import dev.g000sha256.tdl.dto.MessagePositions
import dev.g000sha256.tdl.dto.MessagePremiumGiftCode
import dev.g000sha256.tdl.dto.MessageProperties
import dev.g000sha256.tdl.dto.MessageProximityAlertTriggered
import dev.g000sha256.tdl.dto.MessageReaction
import dev.g000sha256.tdl.dto.MessageReactions
import dev.g000sha256.tdl.dto.MessageReadDate
import dev.g000sha256.tdl.dto.MessageReadDateMyPrivacyRestricted
import dev.g000sha256.tdl.dto.MessageReadDateRead
import dev.g000sha256.tdl.dto.MessageReadDateTooOld
import dev.g000sha256.tdl.dto.MessageReadDateUnread
import dev.g000sha256.tdl.dto.MessageReadDateUserPrivacyRestricted
import dev.g000sha256.tdl.dto.MessageRefundedUpgradedGift
import dev.g000sha256.tdl.dto.MessageReplyInfo
import dev.g000sha256.tdl.dto.MessageReplyTo
import dev.g000sha256.tdl.dto.MessageReplyToMessage
import dev.g000sha256.tdl.dto.MessageReplyToStory
import dev.g000sha256.tdl.dto.MessageSchedulingState
import dev.g000sha256.tdl.dto.MessageSchedulingStateSendAtDate
import dev.g000sha256.tdl.dto.MessageSchedulingStateSendWhenOnline
import dev.g000sha256.tdl.dto.MessageSchedulingStateSendWhenVideoProcessed
import dev.g000sha256.tdl.dto.MessageScreenshotTaken
import dev.g000sha256.tdl.dto.MessageSelfDestructType
import dev.g000sha256.tdl.dto.MessageSelfDestructTypeImmediately
import dev.g000sha256.tdl.dto.MessageSelfDestructTypeTimer
import dev.g000sha256.tdl.dto.MessageSendOptions
import dev.g000sha256.tdl.dto.MessageSender
import dev.g000sha256.tdl.dto.MessageSenderChat
import dev.g000sha256.tdl.dto.MessageSenderUser
import dev.g000sha256.tdl.dto.MessageSenders
import dev.g000sha256.tdl.dto.MessageSendingState
import dev.g000sha256.tdl.dto.MessageSendingStateFailed
import dev.g000sha256.tdl.dto.MessageSendingStatePending
import dev.g000sha256.tdl.dto.MessageSource
import dev.g000sha256.tdl.dto.MessageSourceChatEventLog
import dev.g000sha256.tdl.dto.MessageSourceChatHistory
import dev.g000sha256.tdl.dto.MessageSourceChatList
import dev.g000sha256.tdl.dto.MessageSourceDirectMessagesChatTopicHistory
import dev.g000sha256.tdl.dto.MessageSourceForumTopicHistory
import dev.g000sha256.tdl.dto.MessageSourceHistoryPreview
import dev.g000sha256.tdl.dto.MessageSourceMessageThreadHistory
import dev.g000sha256.tdl.dto.MessageSourceNotification
import dev.g000sha256.tdl.dto.MessageSourceOther
import dev.g000sha256.tdl.dto.MessageSourceScreenshot
import dev.g000sha256.tdl.dto.MessageSourceSearch
import dev.g000sha256.tdl.dto.MessageStatistics
import dev.g000sha256.tdl.dto.MessageSticker
import dev.g000sha256.tdl.dto.MessageStory
import dev.g000sha256.tdl.dto.MessageSuggestProfilePhoto
import dev.g000sha256.tdl.dto.MessageSupergroupChatCreate
import dev.g000sha256.tdl.dto.MessageText
import dev.g000sha256.tdl.dto.MessageThreadInfo
import dev.g000sha256.tdl.dto.MessageTopic
import dev.g000sha256.tdl.dto.MessageTopicDirectMessages
import dev.g000sha256.tdl.dto.MessageTopicForum
import dev.g000sha256.tdl.dto.MessageTopicSavedMessages
import dev.g000sha256.tdl.dto.MessageUnsupported
import dev.g000sha256.tdl.dto.MessageUpgradedGift
import dev.g000sha256.tdl.dto.MessageUsersShared
import dev.g000sha256.tdl.dto.MessageVenue
import dev.g000sha256.tdl.dto.MessageVideo
import dev.g000sha256.tdl.dto.MessageVideoChatEnded
import dev.g000sha256.tdl.dto.MessageVideoChatScheduled
import dev.g000sha256.tdl.dto.MessageVideoChatStarted
import dev.g000sha256.tdl.dto.MessageVideoNote
import dev.g000sha256.tdl.dto.MessageViewer
import dev.g000sha256.tdl.dto.MessageViewers
import dev.g000sha256.tdl.dto.MessageVoiceNote
import dev.g000sha256.tdl.dto.MessageWebAppDataReceived
import dev.g000sha256.tdl.dto.MessageWebAppDataSent
import dev.g000sha256.tdl.dto.Messages
import dev.g000sha256.tdl.dto.Minithumbnail
import dev.g000sha256.tdl.dto.NetworkStatistics
import dev.g000sha256.tdl.dto.NetworkStatisticsEntry
import dev.g000sha256.tdl.dto.NetworkStatisticsEntryCall
import dev.g000sha256.tdl.dto.NetworkStatisticsEntryFile
import dev.g000sha256.tdl.dto.NetworkType
import dev.g000sha256.tdl.dto.NetworkTypeMobile
import dev.g000sha256.tdl.dto.NetworkTypeMobileRoaming
import dev.g000sha256.tdl.dto.NetworkTypeNone
import dev.g000sha256.tdl.dto.NetworkTypeOther
import dev.g000sha256.tdl.dto.NetworkTypeWiFi
import dev.g000sha256.tdl.dto.NewChatPrivacySettings
import dev.g000sha256.tdl.dto.Notification
import dev.g000sha256.tdl.dto.NotificationGroup
import dev.g000sha256.tdl.dto.NotificationGroupType
import dev.g000sha256.tdl.dto.NotificationGroupTypeCalls
import dev.g000sha256.tdl.dto.NotificationGroupTypeMentions
import dev.g000sha256.tdl.dto.NotificationGroupTypeMessages
import dev.g000sha256.tdl.dto.NotificationGroupTypeSecretChat
import dev.g000sha256.tdl.dto.NotificationSettingsScope
import dev.g000sha256.tdl.dto.NotificationSettingsScopeChannelChats
import dev.g000sha256.tdl.dto.NotificationSettingsScopeGroupChats
import dev.g000sha256.tdl.dto.NotificationSettingsScopePrivateChats
import dev.g000sha256.tdl.dto.NotificationSound
import dev.g000sha256.tdl.dto.NotificationSounds
import dev.g000sha256.tdl.dto.NotificationType
import dev.g000sha256.tdl.dto.NotificationTypeNewCall
import dev.g000sha256.tdl.dto.NotificationTypeNewMessage
import dev.g000sha256.tdl.dto.NotificationTypeNewPushMessage
import dev.g000sha256.tdl.dto.NotificationTypeNewSecretChat
import dev.g000sha256.tdl.dto.Ok
import dev.g000sha256.tdl.dto.OptionValue
import dev.g000sha256.tdl.dto.OptionValueBoolean
import dev.g000sha256.tdl.dto.OptionValueEmpty
import dev.g000sha256.tdl.dto.OptionValueInteger
import dev.g000sha256.tdl.dto.OptionValueString
import dev.g000sha256.tdl.dto.OrderInfo
import dev.g000sha256.tdl.dto.Outline
import dev.g000sha256.tdl.dto.PageBlock
import dev.g000sha256.tdl.dto.PageBlockAnchor
import dev.g000sha256.tdl.dto.PageBlockAnimation
import dev.g000sha256.tdl.dto.PageBlockAudio
import dev.g000sha256.tdl.dto.PageBlockAuthorDate
import dev.g000sha256.tdl.dto.PageBlockBlockQuote
import dev.g000sha256.tdl.dto.PageBlockCaption
import dev.g000sha256.tdl.dto.PageBlockChatLink
import dev.g000sha256.tdl.dto.PageBlockCollage
import dev.g000sha256.tdl.dto.PageBlockCover
import dev.g000sha256.tdl.dto.PageBlockDetails
import dev.g000sha256.tdl.dto.PageBlockDivider
import dev.g000sha256.tdl.dto.PageBlockEmbedded
import dev.g000sha256.tdl.dto.PageBlockEmbeddedPost
import dev.g000sha256.tdl.dto.PageBlockFooter
import dev.g000sha256.tdl.dto.PageBlockHeader
import dev.g000sha256.tdl.dto.PageBlockHorizontalAlignment
import dev.g000sha256.tdl.dto.PageBlockHorizontalAlignmentCenter
import dev.g000sha256.tdl.dto.PageBlockHorizontalAlignmentLeft
import dev.g000sha256.tdl.dto.PageBlockHorizontalAlignmentRight
import dev.g000sha256.tdl.dto.PageBlockKicker
import dev.g000sha256.tdl.dto.PageBlockList
import dev.g000sha256.tdl.dto.PageBlockListItem
import dev.g000sha256.tdl.dto.PageBlockMap
import dev.g000sha256.tdl.dto.PageBlockParagraph
import dev.g000sha256.tdl.dto.PageBlockPhoto
import dev.g000sha256.tdl.dto.PageBlockPreformatted
import dev.g000sha256.tdl.dto.PageBlockPullQuote
import dev.g000sha256.tdl.dto.PageBlockRelatedArticle
import dev.g000sha256.tdl.dto.PageBlockRelatedArticles
import dev.g000sha256.tdl.dto.PageBlockSlideshow
import dev.g000sha256.tdl.dto.PageBlockSubheader
import dev.g000sha256.tdl.dto.PageBlockSubtitle
import dev.g000sha256.tdl.dto.PageBlockTable
import dev.g000sha256.tdl.dto.PageBlockTableCell
import dev.g000sha256.tdl.dto.PageBlockTitle
import dev.g000sha256.tdl.dto.PageBlockVerticalAlignment
import dev.g000sha256.tdl.dto.PageBlockVerticalAlignmentBottom
import dev.g000sha256.tdl.dto.PageBlockVerticalAlignmentMiddle
import dev.g000sha256.tdl.dto.PageBlockVerticalAlignmentTop
import dev.g000sha256.tdl.dto.PageBlockVideo
import dev.g000sha256.tdl.dto.PageBlockVoiceNote
import dev.g000sha256.tdl.dto.PaidMedia
import dev.g000sha256.tdl.dto.PaidMediaPhoto
import dev.g000sha256.tdl.dto.PaidMediaPreview
import dev.g000sha256.tdl.dto.PaidMediaUnsupported
import dev.g000sha256.tdl.dto.PaidMediaVideo
import dev.g000sha256.tdl.dto.PaidReactionType
import dev.g000sha256.tdl.dto.PaidReactionTypeAnonymous
import dev.g000sha256.tdl.dto.PaidReactionTypeChat
import dev.g000sha256.tdl.dto.PaidReactionTypeRegular
import dev.g000sha256.tdl.dto.PaidReactor
import dev.g000sha256.tdl.dto.PassportAuthorizationForm
import dev.g000sha256.tdl.dto.PassportElement
import dev.g000sha256.tdl.dto.PassportElementAddress
import dev.g000sha256.tdl.dto.PassportElementBankStatement
import dev.g000sha256.tdl.dto.PassportElementDriverLicense
import dev.g000sha256.tdl.dto.PassportElementEmailAddress
import dev.g000sha256.tdl.dto.PassportElementError
import dev.g000sha256.tdl.dto.PassportElementErrorSource
import dev.g000sha256.tdl.dto.PassportElementErrorSourceDataField
import dev.g000sha256.tdl.dto.PassportElementErrorSourceFile
import dev.g000sha256.tdl.dto.PassportElementErrorSourceFiles
import dev.g000sha256.tdl.dto.PassportElementErrorSourceFrontSide
import dev.g000sha256.tdl.dto.PassportElementErrorSourceReverseSide
import dev.g000sha256.tdl.dto.PassportElementErrorSourceSelfie
import dev.g000sha256.tdl.dto.PassportElementErrorSourceTranslationFile
import dev.g000sha256.tdl.dto.PassportElementErrorSourceTranslationFiles
import dev.g000sha256.tdl.dto.PassportElementErrorSourceUnspecified
import dev.g000sha256.tdl.dto.PassportElementIdentityCard
import dev.g000sha256.tdl.dto.PassportElementInternalPassport
import dev.g000sha256.tdl.dto.PassportElementPassport
import dev.g000sha256.tdl.dto.PassportElementPassportRegistration
import dev.g000sha256.tdl.dto.PassportElementPersonalDetails
import dev.g000sha256.tdl.dto.PassportElementPhoneNumber
import dev.g000sha256.tdl.dto.PassportElementRentalAgreement
import dev.g000sha256.tdl.dto.PassportElementTemporaryRegistration
import dev.g000sha256.tdl.dto.PassportElementType
import dev.g000sha256.tdl.dto.PassportElementTypeAddress
import dev.g000sha256.tdl.dto.PassportElementTypeBankStatement
import dev.g000sha256.tdl.dto.PassportElementTypeDriverLicense
import dev.g000sha256.tdl.dto.PassportElementTypeEmailAddress
import dev.g000sha256.tdl.dto.PassportElementTypeIdentityCard
import dev.g000sha256.tdl.dto.PassportElementTypeInternalPassport
import dev.g000sha256.tdl.dto.PassportElementTypePassport
import dev.g000sha256.tdl.dto.PassportElementTypePassportRegistration
import dev.g000sha256.tdl.dto.PassportElementTypePersonalDetails
import dev.g000sha256.tdl.dto.PassportElementTypePhoneNumber
import dev.g000sha256.tdl.dto.PassportElementTypeRentalAgreement
import dev.g000sha256.tdl.dto.PassportElementTypeTemporaryRegistration
import dev.g000sha256.tdl.dto.PassportElementTypeUtilityBill
import dev.g000sha256.tdl.dto.PassportElementUtilityBill
import dev.g000sha256.tdl.dto.PassportElements
import dev.g000sha256.tdl.dto.PassportElementsWithErrors
import dev.g000sha256.tdl.dto.PassportRequiredElement
import dev.g000sha256.tdl.dto.PassportSuitableElement
import dev.g000sha256.tdl.dto.PasswordState
import dev.g000sha256.tdl.dto.PaymentForm
import dev.g000sha256.tdl.dto.PaymentFormType
import dev.g000sha256.tdl.dto.PaymentFormTypeRegular
import dev.g000sha256.tdl.dto.PaymentFormTypeStarSubscription
import dev.g000sha256.tdl.dto.PaymentFormTypeStars
import dev.g000sha256.tdl.dto.PaymentOption
import dev.g000sha256.tdl.dto.PaymentProvider
import dev.g000sha256.tdl.dto.PaymentProviderOther
import dev.g000sha256.tdl.dto.PaymentProviderSmartGlocal
import dev.g000sha256.tdl.dto.PaymentProviderStripe
import dev.g000sha256.tdl.dto.PaymentReceipt
import dev.g000sha256.tdl.dto.PaymentReceiptType
import dev.g000sha256.tdl.dto.PaymentReceiptTypeRegular
import dev.g000sha256.tdl.dto.PaymentReceiptTypeStars
import dev.g000sha256.tdl.dto.PaymentResult
import dev.g000sha256.tdl.dto.PersonalDetails
import dev.g000sha256.tdl.dto.PersonalDocument
import dev.g000sha256.tdl.dto.PhoneNumberAuthenticationSettings
import dev.g000sha256.tdl.dto.PhoneNumberCodeType
import dev.g000sha256.tdl.dto.PhoneNumberCodeTypeChange
import dev.g000sha256.tdl.dto.PhoneNumberCodeTypeConfirmOwnership
import dev.g000sha256.tdl.dto.PhoneNumberCodeTypeVerify
import dev.g000sha256.tdl.dto.PhoneNumberInfo
import dev.g000sha256.tdl.dto.Photo
import dev.g000sha256.tdl.dto.PhotoSize
import dev.g000sha256.tdl.dto.Point
import dev.g000sha256.tdl.dto.Poll
import dev.g000sha256.tdl.dto.PollOption
import dev.g000sha256.tdl.dto.PollType
import dev.g000sha256.tdl.dto.PollTypeQuiz
import dev.g000sha256.tdl.dto.PollTypeRegular
import dev.g000sha256.tdl.dto.PremiumFeature
import dev.g000sha256.tdl.dto.PremiumFeatureAccentColor
import dev.g000sha256.tdl.dto.PremiumFeatureAdvancedChatManagement
import dev.g000sha256.tdl.dto.PremiumFeatureAnimatedProfilePhoto
import dev.g000sha256.tdl.dto.PremiumFeatureAppIcons
import dev.g000sha256.tdl.dto.PremiumFeatureBackgroundForBoth
import dev.g000sha256.tdl.dto.PremiumFeatureBusiness
import dev.g000sha256.tdl.dto.PremiumFeatureChatBoost
import dev.g000sha256.tdl.dto.PremiumFeatureChecklists
import dev.g000sha256.tdl.dto.PremiumFeatureCustomEmoji
import dev.g000sha256.tdl.dto.PremiumFeatureDisabledAds
import dev.g000sha256.tdl.dto.PremiumFeatureEmojiStatus
import dev.g000sha256.tdl.dto.PremiumFeatureForumTopicIcon
import dev.g000sha256.tdl.dto.PremiumFeatureImprovedDownloadSpeed
import dev.g000sha256.tdl.dto.PremiumFeatureIncreasedLimits
import dev.g000sha256.tdl.dto.PremiumFeatureIncreasedUploadFileSize
import dev.g000sha256.tdl.dto.PremiumFeatureLastSeenTimes
import dev.g000sha256.tdl.dto.PremiumFeatureMessageEffects
import dev.g000sha256.tdl.dto.PremiumFeatureMessagePrivacy
import dev.g000sha256.tdl.dto.PremiumFeatureProfileBadge
import dev.g000sha256.tdl.dto.PremiumFeaturePromotionAnimation
import dev.g000sha256.tdl.dto.PremiumFeatureRealTimeChatTranslation
import dev.g000sha256.tdl.dto.PremiumFeatureSavedMessagesTags
import dev.g000sha256.tdl.dto.PremiumFeatureUniqueReactions
import dev.g000sha256.tdl.dto.PremiumFeatureUniqueStickers
import dev.g000sha256.tdl.dto.PremiumFeatureUpgradedStories
import dev.g000sha256.tdl.dto.PremiumFeatureVoiceRecognition
import dev.g000sha256.tdl.dto.PremiumFeatures
import dev.g000sha256.tdl.dto.PremiumGiftCodeInfo
import dev.g000sha256.tdl.dto.PremiumGiftPaymentOption
import dev.g000sha256.tdl.dto.PremiumGiftPaymentOptions
import dev.g000sha256.tdl.dto.PremiumGiveawayPaymentOption
import dev.g000sha256.tdl.dto.PremiumGiveawayPaymentOptions
import dev.g000sha256.tdl.dto.PremiumLimit
import dev.g000sha256.tdl.dto.PremiumLimitType
import dev.g000sha256.tdl.dto.PremiumLimitTypeActiveStoryCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeBioLength
import dev.g000sha256.tdl.dto.PremiumLimitTypeCaptionLength
import dev.g000sha256.tdl.dto.PremiumLimitTypeChatFolderChosenChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeChatFolderCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeChatFolderInviteLinkCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeCreatedPublicChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeFavoriteStickerCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeMonthlyPostedStoryCount
import dev.g000sha256.tdl.dto.PremiumLimitTypePinnedArchivedChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypePinnedChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypePinnedSavedMessagesTopicCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeSavedAnimationCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeShareableChatFolderCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeSimilarChatCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeStoryCaptionLength
import dev.g000sha256.tdl.dto.PremiumLimitTypeStorySuggestedReactionAreaCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeSupergroupCount
import dev.g000sha256.tdl.dto.PremiumLimitTypeWeeklyPostedStoryCount
import dev.g000sha256.tdl.dto.PremiumPaymentOption
import dev.g000sha256.tdl.dto.PremiumSource
import dev.g000sha256.tdl.dto.PremiumSourceBusinessFeature
import dev.g000sha256.tdl.dto.PremiumSourceFeature
import dev.g000sha256.tdl.dto.PremiumSourceLimitExceeded
import dev.g000sha256.tdl.dto.PremiumSourceLink
import dev.g000sha256.tdl.dto.PremiumSourceSettings
import dev.g000sha256.tdl.dto.PremiumSourceStoryFeature
import dev.g000sha256.tdl.dto.PremiumState
import dev.g000sha256.tdl.dto.PremiumStatePaymentOption
import dev.g000sha256.tdl.dto.PremiumStoryFeature
import dev.g000sha256.tdl.dto.PremiumStoryFeatureCustomExpirationDuration
import dev.g000sha256.tdl.dto.PremiumStoryFeatureLinksAndFormatting
import dev.g000sha256.tdl.dto.PremiumStoryFeaturePermanentViewsHistory
import dev.g000sha256.tdl.dto.PremiumStoryFeaturePriorityOrder
import dev.g000sha256.tdl.dto.PremiumStoryFeatureSaveStories
import dev.g000sha256.tdl.dto.PremiumStoryFeatureStealthMode
import dev.g000sha256.tdl.dto.PremiumStoryFeatureVideoQuality
import dev.g000sha256.tdl.dto.PrepaidGiveaway
import dev.g000sha256.tdl.dto.PreparedInlineMessage
import dev.g000sha256.tdl.dto.PreparedInlineMessageId
import dev.g000sha256.tdl.dto.ProductInfo
import dev.g000sha256.tdl.dto.ProfileAccentColor
import dev.g000sha256.tdl.dto.ProfileAccentColors
import dev.g000sha256.tdl.dto.ProfilePhoto
import dev.g000sha256.tdl.dto.Proxies
import dev.g000sha256.tdl.dto.Proxy
import dev.g000sha256.tdl.dto.ProxyType
import dev.g000sha256.tdl.dto.ProxyTypeHttp
import dev.g000sha256.tdl.dto.ProxyTypeMtproto
import dev.g000sha256.tdl.dto.ProxyTypeSocks5
import dev.g000sha256.tdl.dto.PublicChatType
import dev.g000sha256.tdl.dto.PublicChatTypeHasUsername
import dev.g000sha256.tdl.dto.PublicChatTypeIsLocationBased
import dev.g000sha256.tdl.dto.PublicForward
import dev.g000sha256.tdl.dto.PublicForwardMessage
import dev.g000sha256.tdl.dto.PublicForwardStory
import dev.g000sha256.tdl.dto.PublicForwards
import dev.g000sha256.tdl.dto.PushMessageContent
import dev.g000sha256.tdl.dto.PushMessageContentAnimation
import dev.g000sha256.tdl.dto.PushMessageContentAudio
import dev.g000sha256.tdl.dto.PushMessageContentBasicGroupChatCreate
import dev.g000sha256.tdl.dto.PushMessageContentChatAddMembers
import dev.g000sha256.tdl.dto.PushMessageContentChatChangePhoto
import dev.g000sha256.tdl.dto.PushMessageContentChatChangeTitle
import dev.g000sha256.tdl.dto.PushMessageContentChatDeleteMember
import dev.g000sha256.tdl.dto.PushMessageContentChatJoinByLink
import dev.g000sha256.tdl.dto.PushMessageContentChatJoinByRequest
import dev.g000sha256.tdl.dto.PushMessageContentChatSetBackground
import dev.g000sha256.tdl.dto.PushMessageContentChatSetTheme
import dev.g000sha256.tdl.dto.PushMessageContentChecklist
import dev.g000sha256.tdl.dto.PushMessageContentChecklistTasksAdded
import dev.g000sha256.tdl.dto.PushMessageContentChecklistTasksDone
import dev.g000sha256.tdl.dto.PushMessageContentContact
import dev.g000sha256.tdl.dto.PushMessageContentContactRegistered
import dev.g000sha256.tdl.dto.PushMessageContentDocument
import dev.g000sha256.tdl.dto.PushMessageContentGame
import dev.g000sha256.tdl.dto.PushMessageContentGameScore
import dev.g000sha256.tdl.dto.PushMessageContentGift
import dev.g000sha256.tdl.dto.PushMessageContentGiveaway
import dev.g000sha256.tdl.dto.PushMessageContentHidden
import dev.g000sha256.tdl.dto.PushMessageContentInviteVideoChatParticipants
import dev.g000sha256.tdl.dto.PushMessageContentInvoice
import dev.g000sha256.tdl.dto.PushMessageContentLocation
import dev.g000sha256.tdl.dto.PushMessageContentMediaAlbum
import dev.g000sha256.tdl.dto.PushMessageContentMessageForwards
import dev.g000sha256.tdl.dto.PushMessageContentPaidMedia
import dev.g000sha256.tdl.dto.PushMessageContentPhoto
import dev.g000sha256.tdl.dto.PushMessageContentPoll
import dev.g000sha256.tdl.dto.PushMessageContentPremiumGiftCode
import dev.g000sha256.tdl.dto.PushMessageContentProximityAlertTriggered
import dev.g000sha256.tdl.dto.PushMessageContentRecurringPayment
import dev.g000sha256.tdl.dto.PushMessageContentScreenshotTaken
import dev.g000sha256.tdl.dto.PushMessageContentSticker
import dev.g000sha256.tdl.dto.PushMessageContentStory
import dev.g000sha256.tdl.dto.PushMessageContentSuggestProfilePhoto
import dev.g000sha256.tdl.dto.PushMessageContentText
import dev.g000sha256.tdl.dto.PushMessageContentUpgradedGift
import dev.g000sha256.tdl.dto.PushMessageContentVideo
import dev.g000sha256.tdl.dto.PushMessageContentVideoChatEnded
import dev.g000sha256.tdl.dto.PushMessageContentVideoChatStarted
import dev.g000sha256.tdl.dto.PushMessageContentVideoNote
import dev.g000sha256.tdl.dto.PushMessageContentVoiceNote
import dev.g000sha256.tdl.dto.PushReceiverId
import dev.g000sha256.tdl.dto.QuickReplyMessage
import dev.g000sha256.tdl.dto.QuickReplyMessages
import dev.g000sha256.tdl.dto.QuickReplyShortcut
import dev.g000sha256.tdl.dto.ReactionNotificationSettings
import dev.g000sha256.tdl.dto.ReactionNotificationSource
import dev.g000sha256.tdl.dto.ReactionNotificationSourceAll
import dev.g000sha256.tdl.dto.ReactionNotificationSourceContacts
import dev.g000sha256.tdl.dto.ReactionNotificationSourceNone
import dev.g000sha256.tdl.dto.ReactionType
import dev.g000sha256.tdl.dto.ReactionTypeCustomEmoji
import dev.g000sha256.tdl.dto.ReactionTypeEmoji
import dev.g000sha256.tdl.dto.ReactionTypePaid
import dev.g000sha256.tdl.dto.ReactionUnavailabilityReason
import dev.g000sha256.tdl.dto.ReactionUnavailabilityReasonAnonymousAdministrator
import dev.g000sha256.tdl.dto.ReactionUnavailabilityReasonGuest
import dev.g000sha256.tdl.dto.ReadDatePrivacySettings
import dev.g000sha256.tdl.dto.ReceivedGift
import dev.g000sha256.tdl.dto.ReceivedGifts
import dev.g000sha256.tdl.dto.RecommendedChatFolder
import dev.g000sha256.tdl.dto.RecommendedChatFolders
import dev.g000sha256.tdl.dto.RecoveryEmailAddress
import dev.g000sha256.tdl.dto.RemoteFile
import dev.g000sha256.tdl.dto.ReplyMarkup
import dev.g000sha256.tdl.dto.ReplyMarkupForceReply
import dev.g000sha256.tdl.dto.ReplyMarkupInlineKeyboard
import dev.g000sha256.tdl.dto.ReplyMarkupRemoveKeyboard
import dev.g000sha256.tdl.dto.ReplyMarkupShowKeyboard
import dev.g000sha256.tdl.dto.ReportChatResult
import dev.g000sha256.tdl.dto.ReportChatResultMessagesRequired
import dev.g000sha256.tdl.dto.ReportChatResultOk
import dev.g000sha256.tdl.dto.ReportChatResultOptionRequired
import dev.g000sha256.tdl.dto.ReportChatResultTextRequired
import dev.g000sha256.tdl.dto.ReportOption
import dev.g000sha256.tdl.dto.ReportReason
import dev.g000sha256.tdl.dto.ReportReasonChildAbuse
import dev.g000sha256.tdl.dto.ReportReasonCopyright
import dev.g000sha256.tdl.dto.ReportReasonCustom
import dev.g000sha256.tdl.dto.ReportReasonFake
import dev.g000sha256.tdl.dto.ReportReasonIllegalDrugs
import dev.g000sha256.tdl.dto.ReportReasonPersonalDetails
import dev.g000sha256.tdl.dto.ReportReasonPornography
import dev.g000sha256.tdl.dto.ReportReasonSpam
import dev.g000sha256.tdl.dto.ReportReasonUnrelatedLocation
import dev.g000sha256.tdl.dto.ReportReasonViolence
import dev.g000sha256.tdl.dto.ReportSponsoredResult
import dev.g000sha256.tdl.dto.ReportSponsoredResultAdsHidden
import dev.g000sha256.tdl.dto.ReportSponsoredResultFailed
import dev.g000sha256.tdl.dto.ReportSponsoredResultOk
import dev.g000sha256.tdl.dto.ReportSponsoredResultOptionRequired
import dev.g000sha256.tdl.dto.ReportSponsoredResultPremiumRequired
import dev.g000sha256.tdl.dto.ReportStoryResult
import dev.g000sha256.tdl.dto.ReportStoryResultOk
import dev.g000sha256.tdl.dto.ReportStoryResultOptionRequired
import dev.g000sha256.tdl.dto.ReportStoryResultTextRequired
import dev.g000sha256.tdl.dto.ResendCodeReason
import dev.g000sha256.tdl.dto.ResendCodeReasonUserRequest
import dev.g000sha256.tdl.dto.ResendCodeReasonVerificationFailed
import dev.g000sha256.tdl.dto.ResetPasswordResult
import dev.g000sha256.tdl.dto.ResetPasswordResultDeclined
import dev.g000sha256.tdl.dto.ResetPasswordResultOk
import dev.g000sha256.tdl.dto.ResetPasswordResultPending
import dev.g000sha256.tdl.dto.RevenueWithdrawalState
import dev.g000sha256.tdl.dto.RevenueWithdrawalStateFailed
import dev.g000sha256.tdl.dto.RevenueWithdrawalStatePending
import dev.g000sha256.tdl.dto.RevenueWithdrawalStateSucceeded
import dev.g000sha256.tdl.dto.RichText
import dev.g000sha256.tdl.dto.RichTextAnchor
import dev.g000sha256.tdl.dto.RichTextAnchorLink
import dev.g000sha256.tdl.dto.RichTextBold
import dev.g000sha256.tdl.dto.RichTextEmailAddress
import dev.g000sha256.tdl.dto.RichTextFixed
import dev.g000sha256.tdl.dto.RichTextIcon
import dev.g000sha256.tdl.dto.RichTextItalic
import dev.g000sha256.tdl.dto.RichTextMarked
import dev.g000sha256.tdl.dto.RichTextPhoneNumber
import dev.g000sha256.tdl.dto.RichTextPlain
import dev.g000sha256.tdl.dto.RichTextReference
import dev.g000sha256.tdl.dto.RichTextStrikethrough
import dev.g000sha256.tdl.dto.RichTextSubscript
import dev.g000sha256.tdl.dto.RichTextSuperscript
import dev.g000sha256.tdl.dto.RichTextUnderline
import dev.g000sha256.tdl.dto.RichTextUrl
import dev.g000sha256.tdl.dto.RichTexts
import dev.g000sha256.tdl.dto.RtmpUrl
import dev.g000sha256.tdl.dto.SavedCredentials
import dev.g000sha256.tdl.dto.SavedMessagesTag
import dev.g000sha256.tdl.dto.SavedMessagesTags
import dev.g000sha256.tdl.dto.SavedMessagesTopic
import dev.g000sha256.tdl.dto.SavedMessagesTopicType
import dev.g000sha256.tdl.dto.SavedMessagesTopicTypeAuthorHidden
import dev.g000sha256.tdl.dto.SavedMessagesTopicTypeMyNotes
import dev.g000sha256.tdl.dto.SavedMessagesTopicTypeSavedFromChat
import dev.g000sha256.tdl.dto.ScopeAutosaveSettings
import dev.g000sha256.tdl.dto.ScopeNotificationSettings
import dev.g000sha256.tdl.dto.SearchMessagesChatTypeFilter
import dev.g000sha256.tdl.dto.SearchMessagesChatTypeFilterChannel
import dev.g000sha256.tdl.dto.SearchMessagesChatTypeFilterGroup
import dev.g000sha256.tdl.dto.SearchMessagesChatTypeFilterPrivate
import dev.g000sha256.tdl.dto.SearchMessagesFilter
import dev.g000sha256.tdl.dto.SearchMessagesFilterAnimation
import dev.g000sha256.tdl.dto.SearchMessagesFilterAudio
import dev.g000sha256.tdl.dto.SearchMessagesFilterChatPhoto
import dev.g000sha256.tdl.dto.SearchMessagesFilterDocument
import dev.g000sha256.tdl.dto.SearchMessagesFilterEmpty
import dev.g000sha256.tdl.dto.SearchMessagesFilterFailedToSend
import dev.g000sha256.tdl.dto.SearchMessagesFilterMention
import dev.g000sha256.tdl.dto.SearchMessagesFilterPhoto
import dev.g000sha256.tdl.dto.SearchMessagesFilterPhotoAndVideo
import dev.g000sha256.tdl.dto.SearchMessagesFilterPinned
import dev.g000sha256.tdl.dto.SearchMessagesFilterUnreadMention
import dev.g000sha256.tdl.dto.SearchMessagesFilterUnreadReaction
import dev.g000sha256.tdl.dto.SearchMessagesFilterUrl
import dev.g000sha256.tdl.dto.SearchMessagesFilterVideo
import dev.g000sha256.tdl.dto.SearchMessagesFilterVideoNote
import dev.g000sha256.tdl.dto.SearchMessagesFilterVoiceAndVideoNote
import dev.g000sha256.tdl.dto.SearchMessagesFilterVoiceNote
import dev.g000sha256.tdl.dto.Seconds
import dev.g000sha256.tdl.dto.SecretChat
import dev.g000sha256.tdl.dto.SecretChatState
import dev.g000sha256.tdl.dto.SecretChatStateClosed
import dev.g000sha256.tdl.dto.SecretChatStatePending
import dev.g000sha256.tdl.dto.SecretChatStateReady
import dev.g000sha256.tdl.dto.SentGift
import dev.g000sha256.tdl.dto.SentGiftRegular
import dev.g000sha256.tdl.dto.SentGiftUpgraded
import dev.g000sha256.tdl.dto.SentWebAppMessage
import dev.g000sha256.tdl.dto.Session
import dev.g000sha256.tdl.dto.SessionType
import dev.g000sha256.tdl.dto.SessionTypeAndroid
import dev.g000sha256.tdl.dto.SessionTypeApple
import dev.g000sha256.tdl.dto.SessionTypeBrave
import dev.g000sha256.tdl.dto.SessionTypeChrome
import dev.g000sha256.tdl.dto.SessionTypeEdge
import dev.g000sha256.tdl.dto.SessionTypeFirefox
import dev.g000sha256.tdl.dto.SessionTypeIpad
import dev.g000sha256.tdl.dto.SessionTypeIphone
import dev.g000sha256.tdl.dto.SessionTypeLinux
import dev.g000sha256.tdl.dto.SessionTypeMac
import dev.g000sha256.tdl.dto.SessionTypeOpera
import dev.g000sha256.tdl.dto.SessionTypeSafari
import dev.g000sha256.tdl.dto.SessionTypeUbuntu
import dev.g000sha256.tdl.dto.SessionTypeUnknown
import dev.g000sha256.tdl.dto.SessionTypeVivaldi
import dev.g000sha256.tdl.dto.SessionTypeWindows
import dev.g000sha256.tdl.dto.SessionTypeXbox
import dev.g000sha256.tdl.dto.Sessions
import dev.g000sha256.tdl.dto.SharedChat
import dev.g000sha256.tdl.dto.SharedUser
import dev.g000sha256.tdl.dto.ShippingOption
import dev.g000sha256.tdl.dto.SpeechRecognitionResult
import dev.g000sha256.tdl.dto.SpeechRecognitionResultError
import dev.g000sha256.tdl.dto.SpeechRecognitionResultPending
import dev.g000sha256.tdl.dto.SpeechRecognitionResultText
import dev.g000sha256.tdl.dto.SponsoredChat
import dev.g000sha256.tdl.dto.SponsoredChats
import dev.g000sha256.tdl.dto.SponsoredMessage
import dev.g000sha256.tdl.dto.SponsoredMessages
import dev.g000sha256.tdl.dto.StarAmount
import dev.g000sha256.tdl.dto.StarCount
import dev.g000sha256.tdl.dto.StarGiveawayPaymentOption
import dev.g000sha256.tdl.dto.StarGiveawayPaymentOptions
import dev.g000sha256.tdl.dto.StarGiveawayWinnerOption
import dev.g000sha256.tdl.dto.StarPaymentOption
import dev.g000sha256.tdl.dto.StarPaymentOptions
import dev.g000sha256.tdl.dto.StarRevenueStatistics
import dev.g000sha256.tdl.dto.StarRevenueStatus
import dev.g000sha256.tdl.dto.StarSubscription
import dev.g000sha256.tdl.dto.StarSubscriptionPricing
import dev.g000sha256.tdl.dto.StarSubscriptionType
import dev.g000sha256.tdl.dto.StarSubscriptionTypeBot
import dev.g000sha256.tdl.dto.StarSubscriptionTypeChannel
import dev.g000sha256.tdl.dto.StarSubscriptions
import dev.g000sha256.tdl.dto.StarTransaction
import dev.g000sha256.tdl.dto.StarTransactionDirection
import dev.g000sha256.tdl.dto.StarTransactionDirectionIncoming
import dev.g000sha256.tdl.dto.StarTransactionDirectionOutgoing
import dev.g000sha256.tdl.dto.StarTransactionType
import dev.g000sha256.tdl.dto.StarTransactionTypeAffiliateProgramCommission
import dev.g000sha256.tdl.dto.StarTransactionTypeAppStoreDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypeBotInvoicePurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeBotInvoiceSale
import dev.g000sha256.tdl.dto.StarTransactionTypeBotPaidMediaPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeBotPaidMediaSale
import dev.g000sha256.tdl.dto.StarTransactionTypeBotSubscriptionPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeBotSubscriptionSale
import dev.g000sha256.tdl.dto.StarTransactionTypeBusinessBotTransferReceive
import dev.g000sha256.tdl.dto.StarTransactionTypeBusinessBotTransferSend
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelPaidMediaPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelPaidMediaSale
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelPaidReactionReceive
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelPaidReactionSend
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelSubscriptionPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeChannelSubscriptionSale
import dev.g000sha256.tdl.dto.StarTransactionTypeFragmentDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypeFragmentWithdrawal
import dev.g000sha256.tdl.dto.StarTransactionTypeGiftPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeGiftSale
import dev.g000sha256.tdl.dto.StarTransactionTypeGiftTransfer
import dev.g000sha256.tdl.dto.StarTransactionTypeGiftUpgrade
import dev.g000sha256.tdl.dto.StarTransactionTypeGiveawayDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypeGooglePlayDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypePaidMessageReceive
import dev.g000sha256.tdl.dto.StarTransactionTypePaidMessageSend
import dev.g000sha256.tdl.dto.StarTransactionTypePremiumBotDeposit
import dev.g000sha256.tdl.dto.StarTransactionTypePremiumPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeTelegramAdsWithdrawal
import dev.g000sha256.tdl.dto.StarTransactionTypeTelegramApiUsage
import dev.g000sha256.tdl.dto.StarTransactionTypeUnsupported
import dev.g000sha256.tdl.dto.StarTransactionTypeUpgradedGiftPurchase
import dev.g000sha256.tdl.dto.StarTransactionTypeUpgradedGiftSale
import dev.g000sha256.tdl.dto.StarTransactionTypeUserDeposit
import dev.g000sha256.tdl.dto.StarTransactions
import dev.g000sha256.tdl.dto.StatisticalGraph
import dev.g000sha256.tdl.dto.StatisticalGraphAsync
import dev.g000sha256.tdl.dto.StatisticalGraphData
import dev.g000sha256.tdl.dto.StatisticalGraphError
import dev.g000sha256.tdl.dto.StatisticalValue
import dev.g000sha256.tdl.dto.Sticker
import dev.g000sha256.tdl.dto.StickerFormat
import dev.g000sha256.tdl.dto.StickerFormatTgs
import dev.g000sha256.tdl.dto.StickerFormatWebm
import dev.g000sha256.tdl.dto.StickerFormatWebp
import dev.g000sha256.tdl.dto.StickerFullType
import dev.g000sha256.tdl.dto.StickerFullTypeCustomEmoji
import dev.g000sha256.tdl.dto.StickerFullTypeMask
import dev.g000sha256.tdl.dto.StickerFullTypeRegular
import dev.g000sha256.tdl.dto.StickerSet
import dev.g000sha256.tdl.dto.StickerSetInfo
import dev.g000sha256.tdl.dto.StickerSets
import dev.g000sha256.tdl.dto.StickerType
import dev.g000sha256.tdl.dto.StickerTypeCustomEmoji
import dev.g000sha256.tdl.dto.StickerTypeMask
import dev.g000sha256.tdl.dto.StickerTypeRegular
import dev.g000sha256.tdl.dto.Stickers
import dev.g000sha256.tdl.dto.StorageStatistics
import dev.g000sha256.tdl.dto.StorageStatisticsByChat
import dev.g000sha256.tdl.dto.StorageStatisticsByFileType
import dev.g000sha256.tdl.dto.StorageStatisticsFast
import dev.g000sha256.tdl.dto.StorePaymentPurpose
import dev.g000sha256.tdl.dto.StorePaymentPurposeGiftedStars
import dev.g000sha256.tdl.dto.StorePaymentPurposePremiumGift
import dev.g000sha256.tdl.dto.StorePaymentPurposePremiumGiftCodes
import dev.g000sha256.tdl.dto.StorePaymentPurposePremiumGiveaway
import dev.g000sha256.tdl.dto.StorePaymentPurposePremiumSubscription
import dev.g000sha256.tdl.dto.StorePaymentPurposeStarGiveaway
import dev.g000sha256.tdl.dto.StorePaymentPurposeStars
import dev.g000sha256.tdl.dto.StoreTransaction
import dev.g000sha256.tdl.dto.StoreTransactionAppStore
import dev.g000sha256.tdl.dto.StoreTransactionGooglePlay
import dev.g000sha256.tdl.dto.Stories
import dev.g000sha256.tdl.dto.Story
import dev.g000sha256.tdl.dto.StoryArea
import dev.g000sha256.tdl.dto.StoryAreaPosition
import dev.g000sha256.tdl.dto.StoryAreaType
import dev.g000sha256.tdl.dto.StoryAreaTypeLink
import dev.g000sha256.tdl.dto.StoryAreaTypeLocation
import dev.g000sha256.tdl.dto.StoryAreaTypeMessage
import dev.g000sha256.tdl.dto.StoryAreaTypeSuggestedReaction
import dev.g000sha256.tdl.dto.StoryAreaTypeUpgradedGift
import dev.g000sha256.tdl.dto.StoryAreaTypeVenue
import dev.g000sha256.tdl.dto.StoryAreaTypeWeather
import dev.g000sha256.tdl.dto.StoryContent
import dev.g000sha256.tdl.dto.StoryContentPhoto
import dev.g000sha256.tdl.dto.StoryContentUnsupported
import dev.g000sha256.tdl.dto.StoryContentVideo
import dev.g000sha256.tdl.dto.StoryFullId
import dev.g000sha256.tdl.dto.StoryInfo
import dev.g000sha256.tdl.dto.StoryInteraction
import dev.g000sha256.tdl.dto.StoryInteractionInfo
import dev.g000sha256.tdl.dto.StoryInteractionType
import dev.g000sha256.tdl.dto.StoryInteractionTypeForward
import dev.g000sha256.tdl.dto.StoryInteractionTypeRepost
import dev.g000sha256.tdl.dto.StoryInteractionTypeView
import dev.g000sha256.tdl.dto.StoryInteractions
import dev.g000sha256.tdl.dto.StoryList
import dev.g000sha256.tdl.dto.StoryListArchive
import dev.g000sha256.tdl.dto.StoryListMain
import dev.g000sha256.tdl.dto.StoryOrigin
import dev.g000sha256.tdl.dto.StoryOriginHiddenUser
import dev.g000sha256.tdl.dto.StoryOriginPublicStory
import dev.g000sha256.tdl.dto.StoryPrivacySettings
import dev.g000sha256.tdl.dto.StoryPrivacySettingsCloseFriends
import dev.g000sha256.tdl.dto.StoryPrivacySettingsContacts
import dev.g000sha256.tdl.dto.StoryPrivacySettingsEveryone
import dev.g000sha256.tdl.dto.StoryPrivacySettingsSelectedUsers
import dev.g000sha256.tdl.dto.StoryRepostInfo
import dev.g000sha256.tdl.dto.StoryStatistics
import dev.g000sha256.tdl.dto.StoryVideo
import dev.g000sha256.tdl.dto.SuggestedAction
import dev.g000sha256.tdl.dto.SuggestedActionCheckPassword
import dev.g000sha256.tdl.dto.SuggestedActionCheckPhoneNumber
import dev.g000sha256.tdl.dto.SuggestedActionConvertToBroadcastGroup
import dev.g000sha256.tdl.dto.SuggestedActionCustom
import dev.g000sha256.tdl.dto.SuggestedActionEnableArchiveAndMuteNewChats
import dev.g000sha256.tdl.dto.SuggestedActionExtendPremium
import dev.g000sha256.tdl.dto.SuggestedActionExtendStarSubscriptions
import dev.g000sha256.tdl.dto.SuggestedActionGiftPremiumForChristmas
import dev.g000sha256.tdl.dto.SuggestedActionRestorePremium
import dev.g000sha256.tdl.dto.SuggestedActionSetBirthdate
import dev.g000sha256.tdl.dto.SuggestedActionSetPassword
import dev.g000sha256.tdl.dto.SuggestedActionSetProfilePhoto
import dev.g000sha256.tdl.dto.SuggestedActionSubscribeToAnnualPremium
import dev.g000sha256.tdl.dto.SuggestedActionUpgradePremium
import dev.g000sha256.tdl.dto.SuggestedActionViewChecksHint
import dev.g000sha256.tdl.dto.Supergroup
import dev.g000sha256.tdl.dto.SupergroupFullInfo
import dev.g000sha256.tdl.dto.SupergroupMembersFilter
import dev.g000sha256.tdl.dto.SupergroupMembersFilterAdministrators
import dev.g000sha256.tdl.dto.SupergroupMembersFilterBanned
import dev.g000sha256.tdl.dto.SupergroupMembersFilterBots
import dev.g000sha256.tdl.dto.SupergroupMembersFilterContacts
import dev.g000sha256.tdl.dto.SupergroupMembersFilterMention
import dev.g000sha256.tdl.dto.SupergroupMembersFilterRecent
import dev.g000sha256.tdl.dto.SupergroupMembersFilterRestricted
import dev.g000sha256.tdl.dto.SupergroupMembersFilterSearch
import dev.g000sha256.tdl.dto.TMeUrl
import dev.g000sha256.tdl.dto.TMeUrlType
import dev.g000sha256.tdl.dto.TMeUrlTypeChatInvite
import dev.g000sha256.tdl.dto.TMeUrlTypeStickerSet
import dev.g000sha256.tdl.dto.TMeUrlTypeSupergroup
import dev.g000sha256.tdl.dto.TMeUrlTypeUser
import dev.g000sha256.tdl.dto.TMeUrls
import dev.g000sha256.tdl.dto.TargetChat
import dev.g000sha256.tdl.dto.TargetChatChosen
import dev.g000sha256.tdl.dto.TargetChatCurrent
import dev.g000sha256.tdl.dto.TargetChatInternalLink
import dev.g000sha256.tdl.dto.TargetChatTypes
import dev.g000sha256.tdl.dto.TelegramPaymentPurpose
import dev.g000sha256.tdl.dto.TelegramPaymentPurposeGiftedStars
import dev.g000sha256.tdl.dto.TelegramPaymentPurposeJoinChat
import dev.g000sha256.tdl.dto.TelegramPaymentPurposePremiumGift
import dev.g000sha256.tdl.dto.TelegramPaymentPurposePremiumGiftCodes
import dev.g000sha256.tdl.dto.TelegramPaymentPurposePremiumGiveaway
import dev.g000sha256.tdl.dto.TelegramPaymentPurposeStarGiveaway
import dev.g000sha256.tdl.dto.TelegramPaymentPurposeStars
import dev.g000sha256.tdl.dto.TemporaryPasswordState
import dev.g000sha256.tdl.dto.TermsOfService
import dev.g000sha256.tdl.dto.TestBytes
import dev.g000sha256.tdl.dto.TestInt
import dev.g000sha256.tdl.dto.TestString
import dev.g000sha256.tdl.dto.TestVectorInt
import dev.g000sha256.tdl.dto.TestVectorIntObject
import dev.g000sha256.tdl.dto.TestVectorString
import dev.g000sha256.tdl.dto.TestVectorStringObject
import dev.g000sha256.tdl.dto.Text
import dev.g000sha256.tdl.dto.TextEntities
import dev.g000sha256.tdl.dto.TextEntity
import dev.g000sha256.tdl.dto.TextEntityType
import dev.g000sha256.tdl.dto.TextEntityTypeBankCardNumber
import dev.g000sha256.tdl.dto.TextEntityTypeBlockQuote
import dev.g000sha256.tdl.dto.TextEntityTypeBold
import dev.g000sha256.tdl.dto.TextEntityTypeBotCommand
import dev.g000sha256.tdl.dto.TextEntityTypeCashtag
import dev.g000sha256.tdl.dto.TextEntityTypeCode
import dev.g000sha256.tdl.dto.TextEntityTypeCustomEmoji
import dev.g000sha256.tdl.dto.TextEntityTypeEmailAddress
import dev.g000sha256.tdl.dto.TextEntityTypeExpandableBlockQuote
import dev.g000sha256.tdl.dto.TextEntityTypeHashtag
import dev.g000sha256.tdl.dto.TextEntityTypeItalic
import dev.g000sha256.tdl.dto.TextEntityTypeMediaTimestamp
import dev.g000sha256.tdl.dto.TextEntityTypeMention
import dev.g000sha256.tdl.dto.TextEntityTypeMentionName
import dev.g000sha256.tdl.dto.TextEntityTypePhoneNumber
import dev.g000sha256.tdl.dto.TextEntityTypePre
import dev.g000sha256.tdl.dto.TextEntityTypePreCode
import dev.g000sha256.tdl.dto.TextEntityTypeSpoiler
import dev.g000sha256.tdl.dto.TextEntityTypeStrikethrough
import dev.g000sha256.tdl.dto.TextEntityTypeTextUrl
import dev.g000sha256.tdl.dto.TextEntityTypeUnderline
import dev.g000sha256.tdl.dto.TextEntityTypeUrl
import dev.g000sha256.tdl.dto.TextParseMode
import dev.g000sha256.tdl.dto.TextParseModeHTML
import dev.g000sha256.tdl.dto.TextParseModeMarkdown
import dev.g000sha256.tdl.dto.TextQuote
import dev.g000sha256.tdl.dto.ThemeParameters
import dev.g000sha256.tdl.dto.ThemeSettings
import dev.g000sha256.tdl.dto.Thumbnail
import dev.g000sha256.tdl.dto.ThumbnailFormat
import dev.g000sha256.tdl.dto.ThumbnailFormatGif
import dev.g000sha256.tdl.dto.ThumbnailFormatJpeg
import dev.g000sha256.tdl.dto.ThumbnailFormatMpeg4
import dev.g000sha256.tdl.dto.ThumbnailFormatPng
import dev.g000sha256.tdl.dto.ThumbnailFormatTgs
import dev.g000sha256.tdl.dto.ThumbnailFormatWebm
import dev.g000sha256.tdl.dto.ThumbnailFormatWebp
import dev.g000sha256.tdl.dto.TimeZone
import dev.g000sha256.tdl.dto.TimeZones
import dev.g000sha256.tdl.dto.TopChatCategory
import dev.g000sha256.tdl.dto.TopChatCategoryBots
import dev.g000sha256.tdl.dto.TopChatCategoryCalls
import dev.g000sha256.tdl.dto.TopChatCategoryChannels
import dev.g000sha256.tdl.dto.TopChatCategoryForwardChats
import dev.g000sha256.tdl.dto.TopChatCategoryGroups
import dev.g000sha256.tdl.dto.TopChatCategoryInlineBots
import dev.g000sha256.tdl.dto.TopChatCategoryUsers
import dev.g000sha256.tdl.dto.TopChatCategoryWebAppBots
import dev.g000sha256.tdl.dto.TrendingStickerSets
import dev.g000sha256.tdl.dto.UnconfirmedSession
import dev.g000sha256.tdl.dto.UnreadReaction
import dev.g000sha256.tdl.dto.Update
import dev.g000sha256.tdl.dto.UpdateAccentColors
import dev.g000sha256.tdl.dto.UpdateActiveEmojiReactions
import dev.g000sha256.tdl.dto.UpdateActiveLiveLocationMessages
import dev.g000sha256.tdl.dto.UpdateActiveNotifications
import dev.g000sha256.tdl.dto.UpdateAnimatedEmojiMessageClicked
import dev.g000sha256.tdl.dto.UpdateAnimationSearchParameters
import dev.g000sha256.tdl.dto.UpdateApplicationRecaptchaVerificationRequired
import dev.g000sha256.tdl.dto.UpdateApplicationVerificationRequired
import dev.g000sha256.tdl.dto.UpdateAttachmentMenuBots
import dev.g000sha256.tdl.dto.UpdateAuthorizationState
import dev.g000sha256.tdl.dto.UpdateAutosaveSettings
import dev.g000sha256.tdl.dto.UpdateAvailableMessageEffects
import dev.g000sha256.tdl.dto.UpdateBasicGroup
import dev.g000sha256.tdl.dto.UpdateBasicGroupFullInfo
import dev.g000sha256.tdl.dto.UpdateBusinessConnection
import dev.g000sha256.tdl.dto.UpdateBusinessMessageEdited
import dev.g000sha256.tdl.dto.UpdateBusinessMessagesDeleted
import dev.g000sha256.tdl.dto.UpdateCall
import dev.g000sha256.tdl.dto.UpdateChatAccentColors
import dev.g000sha256.tdl.dto.UpdateChatAction
import dev.g000sha256.tdl.dto.UpdateChatActionBar
import dev.g000sha256.tdl.dto.UpdateChatActiveStories
import dev.g000sha256.tdl.dto.UpdateChatAddedToList
import dev.g000sha256.tdl.dto.UpdateChatAvailableReactions
import dev.g000sha256.tdl.dto.UpdateChatBackground
import dev.g000sha256.tdl.dto.UpdateChatBlockList
import dev.g000sha256.tdl.dto.UpdateChatBoost
import dev.g000sha256.tdl.dto.UpdateChatBusinessBotManageBar
import dev.g000sha256.tdl.dto.UpdateChatDefaultDisableNotification
import dev.g000sha256.tdl.dto.UpdateChatDraftMessage
import dev.g000sha256.tdl.dto.UpdateChatEmojiStatus
import dev.g000sha256.tdl.dto.UpdateChatFolders
import dev.g000sha256.tdl.dto.UpdateChatHasProtectedContent
import dev.g000sha256.tdl.dto.UpdateChatHasScheduledMessages
import dev.g000sha256.tdl.dto.UpdateChatIsMarkedAsUnread
import dev.g000sha256.tdl.dto.UpdateChatIsTranslatable
import dev.g000sha256.tdl.dto.UpdateChatLastMessage
import dev.g000sha256.tdl.dto.UpdateChatMember
import dev.g000sha256.tdl.dto.UpdateChatMessageAutoDeleteTime
import dev.g000sha256.tdl.dto.UpdateChatMessageSender
import dev.g000sha256.tdl.dto.UpdateChatNotificationSettings
import dev.g000sha256.tdl.dto.UpdateChatOnlineMemberCount
import dev.g000sha256.tdl.dto.UpdateChatPendingJoinRequests
import dev.g000sha256.tdl.dto.UpdateChatPermissions
import dev.g000sha256.tdl.dto.UpdateChatPhoto
import dev.g000sha256.tdl.dto.UpdateChatPosition
import dev.g000sha256.tdl.dto.UpdateChatReadInbox
import dev.g000sha256.tdl.dto.UpdateChatReadOutbox
import dev.g000sha256.tdl.dto.UpdateChatRemovedFromList
import dev.g000sha256.tdl.dto.UpdateChatReplyMarkup
import dev.g000sha256.tdl.dto.UpdateChatRevenueAmount
import dev.g000sha256.tdl.dto.UpdateChatTheme
import dev.g000sha256.tdl.dto.UpdateChatThemes
import dev.g000sha256.tdl.dto.UpdateChatTitle
import dev.g000sha256.tdl.dto.UpdateChatUnreadMentionCount
import dev.g000sha256.tdl.dto.UpdateChatUnreadReactionCount
import dev.g000sha256.tdl.dto.UpdateChatVideoChat
import dev.g000sha256.tdl.dto.UpdateChatViewAsTopics
import dev.g000sha256.tdl.dto.UpdateConnectionState
import dev.g000sha256.tdl.dto.UpdateContactCloseBirthdays
import dev.g000sha256.tdl.dto.UpdateDefaultBackground
import dev.g000sha256.tdl.dto.UpdateDefaultPaidReactionType
import dev.g000sha256.tdl.dto.UpdateDefaultReactionType
import dev.g000sha256.tdl.dto.UpdateDeleteMessages
import dev.g000sha256.tdl.dto.UpdateDiceEmojis
import dev.g000sha256.tdl.dto.UpdateDirectMessagesChatTopic
import dev.g000sha256.tdl.dto.UpdateFavoriteStickers
import dev.g000sha256.tdl.dto.UpdateFile
import dev.g000sha256.tdl.dto.UpdateFileAddedToDownloads
import dev.g000sha256.tdl.dto.UpdateFileDownload
import dev.g000sha256.tdl.dto.UpdateFileDownloads
import dev.g000sha256.tdl.dto.UpdateFileGenerationStart
import dev.g000sha256.tdl.dto.UpdateFileGenerationStop
import dev.g000sha256.tdl.dto.UpdateFileRemovedFromDownloads
import dev.g000sha256.tdl.dto.UpdateForumTopic
import dev.g000sha256.tdl.dto.UpdateForumTopicInfo
import dev.g000sha256.tdl.dto.UpdateFreezeState
import dev.g000sha256.tdl.dto.UpdateGroupCall
import dev.g000sha256.tdl.dto.UpdateGroupCallParticipant
import dev.g000sha256.tdl.dto.UpdateGroupCallParticipants
import dev.g000sha256.tdl.dto.UpdateGroupCallVerificationState
import dev.g000sha256.tdl.dto.UpdateHavePendingNotifications
import dev.g000sha256.tdl.dto.UpdateInstalledStickerSets
import dev.g000sha256.tdl.dto.UpdateLanguagePackStrings
import dev.g000sha256.tdl.dto.UpdateMessageContent
import dev.g000sha256.tdl.dto.UpdateMessageContentOpened
import dev.g000sha256.tdl.dto.UpdateMessageEdited
import dev.g000sha256.tdl.dto.UpdateMessageFactCheck
import dev.g000sha256.tdl.dto.UpdateMessageInteractionInfo
import dev.g000sha256.tdl.dto.UpdateMessageIsPinned
import dev.g000sha256.tdl.dto.UpdateMessageLiveLocationViewed
import dev.g000sha256.tdl.dto.UpdateMessageMentionRead
import dev.g000sha256.tdl.dto.UpdateMessageReaction
import dev.g000sha256.tdl.dto.UpdateMessageReactions
import dev.g000sha256.tdl.dto.UpdateMessageSendAcknowledged
import dev.g000sha256.tdl.dto.UpdateMessageSendFailed
import dev.g000sha256.tdl.dto.UpdateMessageSendSucceeded
import dev.g000sha256.tdl.dto.UpdateMessageUnreadReactions
import dev.g000sha256.tdl.dto.UpdateNewBusinessCallbackQuery
import dev.g000sha256.tdl.dto.UpdateNewBusinessMessage
import dev.g000sha256.tdl.dto.UpdateNewCallSignalingData
import dev.g000sha256.tdl.dto.UpdateNewCallbackQuery
import dev.g000sha256.tdl.dto.UpdateNewChat
import dev.g000sha256.tdl.dto.UpdateNewChatJoinRequest
import dev.g000sha256.tdl.dto.UpdateNewChosenInlineResult
import dev.g000sha256.tdl.dto.UpdateNewCustomEvent
import dev.g000sha256.tdl.dto.UpdateNewCustomQuery
import dev.g000sha256.tdl.dto.UpdateNewInlineCallbackQuery
import dev.g000sha256.tdl.dto.UpdateNewInlineQuery
import dev.g000sha256.tdl.dto.UpdateNewMessage
import dev.g000sha256.tdl.dto.UpdateNewPreCheckoutQuery
import dev.g000sha256.tdl.dto.UpdateNewShippingQuery
import dev.g000sha256.tdl.dto.UpdateNotification
import dev.g000sha256.tdl.dto.UpdateNotificationGroup
import dev.g000sha256.tdl.dto.UpdateOption
import dev.g000sha256.tdl.dto.UpdateOwnedStarCount
import dev.g000sha256.tdl.dto.UpdatePaidMediaPurchased
import dev.g000sha256.tdl.dto.UpdatePoll
import dev.g000sha256.tdl.dto.UpdatePollAnswer
import dev.g000sha256.tdl.dto.UpdateProfileAccentColors
import dev.g000sha256.tdl.dto.UpdateQuickReplyShortcut
import dev.g000sha256.tdl.dto.UpdateQuickReplyShortcutDeleted
import dev.g000sha256.tdl.dto.UpdateQuickReplyShortcutMessages
import dev.g000sha256.tdl.dto.UpdateQuickReplyShortcuts
import dev.g000sha256.tdl.dto.UpdateReactionNotificationSettings
import dev.g000sha256.tdl.dto.UpdateRecentStickers
import dev.g000sha256.tdl.dto.UpdateSavedAnimations
import dev.g000sha256.tdl.dto.UpdateSavedMessagesTags
import dev.g000sha256.tdl.dto.UpdateSavedMessagesTopic
import dev.g000sha256.tdl.dto.UpdateSavedMessagesTopicCount
import dev.g000sha256.tdl.dto.UpdateSavedNotificationSounds
import dev.g000sha256.tdl.dto.UpdateScopeNotificationSettings
import dev.g000sha256.tdl.dto.UpdateSecretChat
import dev.g000sha256.tdl.dto.UpdateServiceNotification
import dev.g000sha256.tdl.dto.UpdateSpeechRecognitionTrial
import dev.g000sha256.tdl.dto.UpdateSpeedLimitNotification
import dev.g000sha256.tdl.dto.UpdateStarRevenueStatus
import dev.g000sha256.tdl.dto.UpdateStickerSet
import dev.g000sha256.tdl.dto.UpdateStory
import dev.g000sha256.tdl.dto.UpdateStoryDeleted
import dev.g000sha256.tdl.dto.UpdateStoryListChatCount
import dev.g000sha256.tdl.dto.UpdateStoryPostFailed
import dev.g000sha256.tdl.dto.UpdateStoryPostSucceeded
import dev.g000sha256.tdl.dto.UpdateStoryStealthMode
import dev.g000sha256.tdl.dto.UpdateSuggestedActions
import dev.g000sha256.tdl.dto.UpdateSupergroup
import dev.g000sha256.tdl.dto.UpdateSupergroupFullInfo
import dev.g000sha256.tdl.dto.UpdateTermsOfService
import dev.g000sha256.tdl.dto.UpdateTopicMessageCount
import dev.g000sha256.tdl.dto.UpdateTrendingStickerSets
import dev.g000sha256.tdl.dto.UpdateUnconfirmedSession
import dev.g000sha256.tdl.dto.UpdateUnreadChatCount
import dev.g000sha256.tdl.dto.UpdateUnreadMessageCount
import dev.g000sha256.tdl.dto.UpdateUser
import dev.g000sha256.tdl.dto.UpdateUserFullInfo
import dev.g000sha256.tdl.dto.UpdateUserPrivacySettingRules
import dev.g000sha256.tdl.dto.UpdateUserStatus
import dev.g000sha256.tdl.dto.UpdateVideoPublished
import dev.g000sha256.tdl.dto.UpdateWebAppMessageSent
import dev.g000sha256.tdl.dto.Updates
import dev.g000sha256.tdl.dto.UpgradeGiftResult
import dev.g000sha256.tdl.dto.UpgradedGift
import dev.g000sha256.tdl.dto.UpgradedGiftAttributeId
import dev.g000sha256.tdl.dto.UpgradedGiftAttributeIdBackdrop
import dev.g000sha256.tdl.dto.UpgradedGiftAttributeIdModel
import dev.g000sha256.tdl.dto.UpgradedGiftAttributeIdSymbol
import dev.g000sha256.tdl.dto.UpgradedGiftBackdrop
import dev.g000sha256.tdl.dto.UpgradedGiftBackdropColors
import dev.g000sha256.tdl.dto.UpgradedGiftBackdropCount
import dev.g000sha256.tdl.dto.UpgradedGiftModel
import dev.g000sha256.tdl.dto.UpgradedGiftModelCount
import dev.g000sha256.tdl.dto.UpgradedGiftOriginalDetails
import dev.g000sha256.tdl.dto.UpgradedGiftSymbol
import dev.g000sha256.tdl.dto.UpgradedGiftSymbolCount
import dev.g000sha256.tdl.dto.User
import dev.g000sha256.tdl.dto.UserFullInfo
import dev.g000sha256.tdl.dto.UserLink
import dev.g000sha256.tdl.dto.UserPrivacySetting
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowCalls
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowChatInvites
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowFindingByPhoneNumber
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowPeerToPeerCalls
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages
import dev.g000sha256.tdl.dto.UserPrivacySettingAllowUnpaidMessages
import dev.g000sha256.tdl.dto.UserPrivacySettingAutosaveGifts
import dev.g000sha256.tdl.dto.UserPrivacySettingRule
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowAll
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowBots
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowChatMembers
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowContacts
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowPremiumUsers
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleAllowUsers
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictAll
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictBots
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictChatMembers
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictContacts
import dev.g000sha256.tdl.dto.UserPrivacySettingRuleRestrictUsers
import dev.g000sha256.tdl.dto.UserPrivacySettingRules
import dev.g000sha256.tdl.dto.UserPrivacySettingShowBio
import dev.g000sha256.tdl.dto.UserPrivacySettingShowBirthdate
import dev.g000sha256.tdl.dto.UserPrivacySettingShowLinkInForwardedMessages
import dev.g000sha256.tdl.dto.UserPrivacySettingShowPhoneNumber
import dev.g000sha256.tdl.dto.UserPrivacySettingShowProfilePhoto
import dev.g000sha256.tdl.dto.UserPrivacySettingShowStatus
import dev.g000sha256.tdl.dto.UserStatus
import dev.g000sha256.tdl.dto.UserStatusEmpty
import dev.g000sha256.tdl.dto.UserStatusLastMonth
import dev.g000sha256.tdl.dto.UserStatusLastWeek
import dev.g000sha256.tdl.dto.UserStatusOffline
import dev.g000sha256.tdl.dto.UserStatusOnline
import dev.g000sha256.tdl.dto.UserStatusRecently
import dev.g000sha256.tdl.dto.UserSupportInfo
import dev.g000sha256.tdl.dto.UserType
import dev.g000sha256.tdl.dto.UserTypeBot
import dev.g000sha256.tdl.dto.UserTypeDeleted
import dev.g000sha256.tdl.dto.UserTypeRegular
import dev.g000sha256.tdl.dto.UserTypeUnknown
import dev.g000sha256.tdl.dto.Usernames
import dev.g000sha256.tdl.dto.Users
import dev.g000sha256.tdl.dto.ValidatedOrderInfo
import dev.g000sha256.tdl.dto.VectorPathCommand
import dev.g000sha256.tdl.dto.VectorPathCommandCubicBezierCurve
import dev.g000sha256.tdl.dto.VectorPathCommandLine
import dev.g000sha256.tdl.dto.Venue
import dev.g000sha256.tdl.dto.VerificationStatus
import dev.g000sha256.tdl.dto.Video
import dev.g000sha256.tdl.dto.VideoChat
import dev.g000sha256.tdl.dto.VideoChatStream
import dev.g000sha256.tdl.dto.VideoChatStreams
import dev.g000sha256.tdl.dto.VideoMessageAdvertisement
import dev.g000sha256.tdl.dto.VideoMessageAdvertisements
import dev.g000sha256.tdl.dto.VideoNote
import dev.g000sha256.tdl.dto.VideoStoryboard
import dev.g000sha256.tdl.dto.VoiceNote
import dev.g000sha256.tdl.dto.WebApp
import dev.g000sha256.tdl.dto.WebAppInfo
import dev.g000sha256.tdl.dto.WebAppOpenMode
import dev.g000sha256.tdl.dto.WebAppOpenModeCompact
import dev.g000sha256.tdl.dto.WebAppOpenModeFullScreen
import dev.g000sha256.tdl.dto.WebAppOpenModeFullSize
import dev.g000sha256.tdl.dto.WebAppOpenParameters
import dev.g000sha256.tdl.dto.WebPageInstantView
import org.drinkless.tdlib.TdApi

internal class TdlMapper {
    fun map(dto: TdApi.AccentColor): AccentColor {
        return AccentColor(
            id = dto.id,
            builtInAccentColorId = dto.builtInAccentColorId,
            lightThemeColors = dto.lightThemeColors,
            darkThemeColors = dto.darkThemeColors,
            minChannelChatBoostLevel = dto.minChannelChatBoostLevel,
        )
    }

    fun map(dto: AccentColor): TdApi.AccentColor {
        return TdApi.AccentColor(
            id = dto.id,
            builtInAccentColorId = dto.builtInAccentColorId,
            lightThemeColors = dto.lightThemeColors,
            darkThemeColors = dto.darkThemeColors,
            minChannelChatBoostLevel = dto.minChannelChatBoostLevel,
        )
    }

    fun map(dto: TdApi.AcceptedGiftTypes): AcceptedGiftTypes {
        return AcceptedGiftTypes(
            unlimitedGifts = dto.unlimitedGifts,
            limitedGifts = dto.limitedGifts,
            upgradedGifts = dto.upgradedGifts,
            premiumSubscription = dto.premiumSubscription,
        )
    }

    fun map(dto: AcceptedGiftTypes): TdApi.AcceptedGiftTypes {
        return TdApi.AcceptedGiftTypes(
            unlimitedGifts = dto.unlimitedGifts,
            limitedGifts = dto.limitedGifts,
            upgradedGifts = dto.upgradedGifts,
            premiumSubscription = dto.premiumSubscription,
        )
    }

    fun map(dto: TdApi.AccountInfo): AccountInfo {
        return AccountInfo(
            registrationMonth = dto.registrationMonth,
            registrationYear = dto.registrationYear,
            phoneNumberCountryCode = dto.phoneNumberCountryCode,
            lastNameChangeDate = dto.lastNameChangeDate,
            lastPhotoChangeDate = dto.lastPhotoChangeDate,
        )
    }

    fun map(dto: AccountInfo): TdApi.AccountInfo {
        return TdApi.AccountInfo(
            registrationMonth = dto.registrationMonth,
            registrationYear = dto.registrationYear,
            phoneNumberCountryCode = dto.phoneNumberCountryCode,
            lastNameChangeDate = dto.lastNameChangeDate,
            lastPhotoChangeDate = dto.lastPhotoChangeDate,
        )
    }

    fun map(dto: TdApi.AccountTtl): AccountTtl {
        return AccountTtl(
            days = dto.days,
        )
    }

    fun map(dto: AccountTtl): TdApi.AccountTtl {
        return TdApi.AccountTtl(
            days = dto.days,
        )
    }

    fun map(dto: TdApi.AddedReaction): AddedReaction {
        return AddedReaction(
            type = map(dto.type),
            senderId = map(dto.senderId),
            isOutgoing = dto.isOutgoing,
            date = dto.date,
        )
    }

    fun map(dto: AddedReaction): TdApi.AddedReaction {
        return TdApi.AddedReaction(
            type = map(dto.type),
            senderId = map(dto.senderId),
            isOutgoing = dto.isOutgoing,
            date = dto.date,
        )
    }

    fun map(dto: TdApi.AddedReactions): AddedReactions {
        return AddedReactions(
            totalCount = dto.totalCount,
            reactions = dto.reactions.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: AddedReactions): TdApi.AddedReactions {
        return TdApi.AddedReactions(
            totalCount = dto.totalCount,
            reactions = dto.reactions.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.Address): Address {
        return Address(
            countryCode = dto.countryCode,
            state = dto.state,
            city = dto.city,
            streetLine1 = dto.streetLine1,
            streetLine2 = dto.streetLine2,
            postalCode = dto.postalCode,
        )
    }

    fun map(dto: Address): TdApi.Address {
        return TdApi.Address(
            countryCode = dto.countryCode,
            state = dto.state,
            city = dto.city,
            streetLine1 = dto.streetLine1,
            streetLine2 = dto.streetLine2,
            postalCode = dto.postalCode,
        )
    }

    fun map(dto: TdApi.AdvertisementSponsor): AdvertisementSponsor {
        return AdvertisementSponsor(
            url = dto.url,
            photo = dto.photo?.let { map(it) },
            info = dto.info,
        )
    }

    fun map(dto: AdvertisementSponsor): TdApi.AdvertisementSponsor {
        return TdApi.AdvertisementSponsor(
            url = dto.url,
            photo = dto.photo?.let { map(it) },
            info = dto.info,
        )
    }

    fun map(dto: TdApi.AffiliateInfo): AffiliateInfo {
        return AffiliateInfo(
            commissionPerMille = dto.commissionPerMille,
            affiliateChatId = dto.affiliateChatId,
            starAmount = map(dto.starAmount),
        )
    }

    fun map(dto: AffiliateInfo): TdApi.AffiliateInfo {
        return TdApi.AffiliateInfo(
            commissionPerMille = dto.commissionPerMille,
            affiliateChatId = dto.affiliateChatId,
            starAmount = map(dto.starAmount),
        )
    }

    fun map(dto: TdApi.AffiliateProgramInfo): AffiliateProgramInfo {
        return AffiliateProgramInfo(
            parameters = map(dto.parameters),
            endDate = dto.endDate,
            dailyRevenuePerUserAmount = map(dto.dailyRevenuePerUserAmount),
        )
    }

    fun map(dto: AffiliateProgramInfo): TdApi.AffiliateProgramInfo {
        return TdApi.AffiliateProgramInfo(
            parameters = map(dto.parameters),
            endDate = dto.endDate,
            dailyRevenuePerUserAmount = map(dto.dailyRevenuePerUserAmount),
        )
    }

    fun map(dto: TdApi.AffiliateProgramParameters): AffiliateProgramParameters {
        return AffiliateProgramParameters(
            commissionPerMille = dto.commissionPerMille,
            monthCount = dto.monthCount,
        )
    }

    fun map(dto: AffiliateProgramParameters): TdApi.AffiliateProgramParameters {
        return TdApi.AffiliateProgramParameters(
            commissionPerMille = dto.commissionPerMille,
            monthCount = dto.monthCount,
        )
    }

    fun map(dto: TdApi.AffiliateProgramSortOrder): AffiliateProgramSortOrder {
        when (dto) {
            is TdApi.AffiliateProgramSortOrderProfitability -> return map(dto)
            is TdApi.AffiliateProgramSortOrderCreationDate -> return map(dto)
            is TdApi.AffiliateProgramSortOrderRevenue -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.AffiliateProgramSortOrderProfitability): AffiliateProgramSortOrderProfitability {
        return AffiliateProgramSortOrderProfitability()
    }

    fun map(dto: TdApi.AffiliateProgramSortOrderCreationDate): AffiliateProgramSortOrderCreationDate {
        return AffiliateProgramSortOrderCreationDate()
    }

    fun map(dto: TdApi.AffiliateProgramSortOrderRevenue): AffiliateProgramSortOrderRevenue {
        return AffiliateProgramSortOrderRevenue()
    }

    fun map(dto: AffiliateProgramSortOrder): TdApi.AffiliateProgramSortOrder {
        when (dto) {
            is AffiliateProgramSortOrderProfitability -> return map(dto)
            is AffiliateProgramSortOrderCreationDate -> return map(dto)
            is AffiliateProgramSortOrderRevenue -> return map(dto)
        }
    }

    fun map(dto: AffiliateProgramSortOrderProfitability): TdApi.AffiliateProgramSortOrderProfitability {
        return TdApi.AffiliateProgramSortOrderProfitability()
    }

    fun map(dto: AffiliateProgramSortOrderCreationDate): TdApi.AffiliateProgramSortOrderCreationDate {
        return TdApi.AffiliateProgramSortOrderCreationDate()
    }

    fun map(dto: AffiliateProgramSortOrderRevenue): TdApi.AffiliateProgramSortOrderRevenue {
        return TdApi.AffiliateProgramSortOrderRevenue()
    }

    fun map(dto: TdApi.AffiliateType): AffiliateType {
        when (dto) {
            is TdApi.AffiliateTypeCurrentUser -> return map(dto)
            is TdApi.AffiliateTypeBot -> return map(dto)
            is TdApi.AffiliateTypeChannel -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.AffiliateTypeCurrentUser): AffiliateTypeCurrentUser {
        return AffiliateTypeCurrentUser()
    }

    fun map(dto: TdApi.AffiliateTypeBot): AffiliateTypeBot {
        return AffiliateTypeBot(
            userId = dto.userId,
        )
    }

    fun map(dto: TdApi.AffiliateTypeChannel): AffiliateTypeChannel {
        return AffiliateTypeChannel(
            chatId = dto.chatId,
        )
    }

    fun map(dto: AffiliateType): TdApi.AffiliateType {
        when (dto) {
            is AffiliateTypeCurrentUser -> return map(dto)
            is AffiliateTypeBot -> return map(dto)
            is AffiliateTypeChannel -> return map(dto)
        }
    }

    fun map(dto: AffiliateTypeCurrentUser): TdApi.AffiliateTypeCurrentUser {
        return TdApi.AffiliateTypeCurrentUser()
    }

    fun map(dto: AffiliateTypeBot): TdApi.AffiliateTypeBot {
        return TdApi.AffiliateTypeBot(
            userId = dto.userId,
        )
    }

    fun map(dto: AffiliateTypeChannel): TdApi.AffiliateTypeChannel {
        return TdApi.AffiliateTypeChannel(
            chatId = dto.chatId,
        )
    }

    fun map(dto: TdApi.AlternativeVideo): AlternativeVideo {
        return AlternativeVideo(
            id = dto.id,
            width = dto.width,
            height = dto.height,
            codec = dto.codec,
            hlsFile = map(dto.hlsFile),
            video = map(dto.video),
        )
    }

    fun map(dto: AlternativeVideo): TdApi.AlternativeVideo {
        return TdApi.AlternativeVideo(
            id = dto.id,
            width = dto.width,
            height = dto.height,
            codec = dto.codec,
            hlsFile = map(dto.hlsFile),
            video = map(dto.video),
        )
    }

    fun map(dto: TdApi.AnimatedChatPhoto): AnimatedChatPhoto {
        return AnimatedChatPhoto(
            length = dto.length,
            file = map(dto.file),
            mainFrameTimestamp = dto.mainFrameTimestamp,
        )
    }

    fun map(dto: AnimatedChatPhoto): TdApi.AnimatedChatPhoto {
        return TdApi.AnimatedChatPhoto(
            length = dto.length,
            file = map(dto.file),
            mainFrameTimestamp = dto.mainFrameTimestamp,
        )
    }

    fun map(dto: TdApi.AnimatedEmoji): AnimatedEmoji {
        return AnimatedEmoji(
            sticker = dto.sticker?.let { map(it) },
            stickerWidth = dto.stickerWidth,
            stickerHeight = dto.stickerHeight,
            fitzpatrickType = dto.fitzpatrickType,
            sound = dto.sound?.let { map(it) },
        )
    }

    fun map(dto: AnimatedEmoji): TdApi.AnimatedEmoji {
        return TdApi.AnimatedEmoji(
            sticker = dto.sticker?.let { map(it) },
            stickerWidth = dto.stickerWidth,
            stickerHeight = dto.stickerHeight,
            fitzpatrickType = dto.fitzpatrickType,
            sound = dto.sound?.let { map(it) },
        )
    }

    fun map(dto: TdApi.Animation): Animation {
        return Animation(
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
            fileName = dto.fileName,
            mimeType = dto.mimeType,
            hasStickers = dto.hasStickers,
            minithumbnail = dto.minithumbnail?.let { map(it) },
            thumbnail = dto.thumbnail?.let { map(it) },
            animation = map(dto.animation),
        )
    }

    fun map(dto: Animation): TdApi.Animation {
        return TdApi.Animation(
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
            fileName = dto.fileName,
            mimeType = dto.mimeType,
            hasStickers = dto.hasStickers,
            minithumbnail = dto.minithumbnail?.let { map(it) },
            thumbnail = dto.thumbnail?.let { map(it) },
            animation = map(dto.animation),
        )
    }

    fun map(dto: TdApi.Animations): Animations {
        return Animations(
            animations = dto.animations.mapArray { map(it) },
        )
    }

    fun map(dto: Animations): TdApi.Animations {
        return TdApi.Animations(
            animations = dto.animations.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ArchiveChatListSettings): ArchiveChatListSettings {
        return ArchiveChatListSettings(
            archiveAndMuteNewChatsFromUnknownUsers = dto.archiveAndMuteNewChatsFromUnknownUsers,
            keepUnmutedChatsArchived = dto.keepUnmutedChatsArchived,
            keepChatsFromFoldersArchived = dto.keepChatsFromFoldersArchived,
        )
    }

    fun map(dto: ArchiveChatListSettings): TdApi.ArchiveChatListSettings {
        return TdApi.ArchiveChatListSettings(
            archiveAndMuteNewChatsFromUnknownUsers = dto.archiveAndMuteNewChatsFromUnknownUsers,
            keepUnmutedChatsArchived = dto.keepUnmutedChatsArchived,
            keepChatsFromFoldersArchived = dto.keepChatsFromFoldersArchived,
        )
    }

    fun map(dto: TdApi.AttachmentMenuBot): AttachmentMenuBot {
        return AttachmentMenuBot(
            botUserId = dto.botUserId,
            supportsSelfChat = dto.supportsSelfChat,
            supportsUserChats = dto.supportsUserChats,
            supportsBotChats = dto.supportsBotChats,
            supportsGroupChats = dto.supportsGroupChats,
            supportsChannelChats = dto.supportsChannelChats,
            requestWriteAccess = dto.requestWriteAccess,
            isAdded = dto.isAdded,
            showInAttachmentMenu = dto.showInAttachmentMenu,
            showInSideMenu = dto.showInSideMenu,
            showDisclaimerInSideMenu = dto.showDisclaimerInSideMenu,
            name = dto.name,
            nameColor = dto.nameColor?.let { map(it) },
            defaultIcon = dto.defaultIcon?.let { map(it) },
            iosStaticIcon = dto.iosStaticIcon?.let { map(it) },
            iosAnimatedIcon = dto.iosAnimatedIcon?.let { map(it) },
            iosSideMenuIcon = dto.iosSideMenuIcon?.let { map(it) },
            androidIcon = dto.androidIcon?.let { map(it) },
            androidSideMenuIcon = dto.androidSideMenuIcon?.let { map(it) },
            macosIcon = dto.macosIcon?.let { map(it) },
            macosSideMenuIcon = dto.macosSideMenuIcon?.let { map(it) },
            iconColor = dto.iconColor?.let { map(it) },
            webAppPlaceholder = dto.webAppPlaceholder?.let { map(it) },
        )
    }

    fun map(dto: AttachmentMenuBot): TdApi.AttachmentMenuBot {
        return TdApi.AttachmentMenuBot(
            botUserId = dto.botUserId,
            supportsSelfChat = dto.supportsSelfChat,
            supportsUserChats = dto.supportsUserChats,
            supportsBotChats = dto.supportsBotChats,
            supportsGroupChats = dto.supportsGroupChats,
            supportsChannelChats = dto.supportsChannelChats,
            requestWriteAccess = dto.requestWriteAccess,
            isAdded = dto.isAdded,
            showInAttachmentMenu = dto.showInAttachmentMenu,
            showInSideMenu = dto.showInSideMenu,
            showDisclaimerInSideMenu = dto.showDisclaimerInSideMenu,
            name = dto.name,
            nameColor = dto.nameColor?.let { map(it) },
            defaultIcon = dto.defaultIcon?.let { map(it) },
            iosStaticIcon = dto.iosStaticIcon?.let { map(it) },
            iosAnimatedIcon = dto.iosAnimatedIcon?.let { map(it) },
            iosSideMenuIcon = dto.iosSideMenuIcon?.let { map(it) },
            androidIcon = dto.androidIcon?.let { map(it) },
            androidSideMenuIcon = dto.androidSideMenuIcon?.let { map(it) },
            macosIcon = dto.macosIcon?.let { map(it) },
            macosSideMenuIcon = dto.macosSideMenuIcon?.let { map(it) },
            iconColor = dto.iconColor?.let { map(it) },
            webAppPlaceholder = dto.webAppPlaceholder?.let { map(it) },
        )
    }

    fun map(dto: TdApi.AttachmentMenuBotColor): AttachmentMenuBotColor {
        return AttachmentMenuBotColor(
            lightColor = dto.lightColor,
            darkColor = dto.darkColor,
        )
    }

    fun map(dto: AttachmentMenuBotColor): TdApi.AttachmentMenuBotColor {
        return TdApi.AttachmentMenuBotColor(
            lightColor = dto.lightColor,
            darkColor = dto.darkColor,
        )
    }

    fun map(dto: TdApi.Audio): Audio {
        return Audio(
            duration = dto.duration,
            title = dto.title,
            performer = dto.performer,
            fileName = dto.fileName,
            mimeType = dto.mimeType,
            albumCoverMinithumbnail = dto.albumCoverMinithumbnail?.let { map(it) },
            albumCoverThumbnail = dto.albumCoverThumbnail?.let { map(it) },
            externalAlbumCovers = dto.externalAlbumCovers.mapArray { map(it) },
            audio = map(dto.audio),
        )
    }

    fun map(dto: Audio): TdApi.Audio {
        return TdApi.Audio(
            duration = dto.duration,
            title = dto.title,
            performer = dto.performer,
            fileName = dto.fileName,
            mimeType = dto.mimeType,
            albumCoverMinithumbnail = dto.albumCoverMinithumbnail?.let { map(it) },
            albumCoverThumbnail = dto.albumCoverThumbnail?.let { map(it) },
            externalAlbumCovers = dto.externalAlbumCovers.mapArray { map(it) },
            audio = map(dto.audio),
        )
    }

    fun map(dto: TdApi.AuthenticationCodeInfo): AuthenticationCodeInfo {
        return AuthenticationCodeInfo(
            phoneNumber = dto.phoneNumber,
            type = map(dto.type),
            nextType = dto.nextType?.let { map(it) },
            timeout = dto.timeout,
        )
    }

    fun map(dto: AuthenticationCodeInfo): TdApi.AuthenticationCodeInfo {
        return TdApi.AuthenticationCodeInfo(
            phoneNumber = dto.phoneNumber,
            type = map(dto.type),
            nextType = dto.nextType?.let { map(it) },
            timeout = dto.timeout,
        )
    }

    fun map(dto: TdApi.AuthenticationCodeType): AuthenticationCodeType {
        when (dto) {
            is TdApi.AuthenticationCodeTypeTelegramMessage -> return map(dto)
            is TdApi.AuthenticationCodeTypeSms -> return map(dto)
            is TdApi.AuthenticationCodeTypeSmsWord -> return map(dto)
            is TdApi.AuthenticationCodeTypeSmsPhrase -> return map(dto)
            is TdApi.AuthenticationCodeTypeCall -> return map(dto)
            is TdApi.AuthenticationCodeTypeFlashCall -> return map(dto)
            is TdApi.AuthenticationCodeTypeMissedCall -> return map(dto)
            is TdApi.AuthenticationCodeTypeFragment -> return map(dto)
            is TdApi.AuthenticationCodeTypeFirebaseAndroid -> return map(dto)
            is TdApi.AuthenticationCodeTypeFirebaseIos -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.AuthenticationCodeTypeTelegramMessage): AuthenticationCodeTypeTelegramMessage {
        return AuthenticationCodeTypeTelegramMessage(
            length = dto.length,
        )
    }

    fun map(dto: TdApi.AuthenticationCodeTypeSms): AuthenticationCodeTypeSms {
        return AuthenticationCodeTypeSms(
            length = dto.length,
        )
    }

    fun map(dto: TdApi.AuthenticationCodeTypeSmsWord): AuthenticationCodeTypeSmsWord {
        return AuthenticationCodeTypeSmsWord(
            firstLetter = dto.firstLetter,
        )
    }

    fun map(dto: TdApi.AuthenticationCodeTypeSmsPhrase): AuthenticationCodeTypeSmsPhrase {
        return AuthenticationCodeTypeSmsPhrase(
            firstWord = dto.firstWord,
        )
    }

    fun map(dto: TdApi.AuthenticationCodeTypeCall): AuthenticationCodeTypeCall {
        return AuthenticationCodeTypeCall(
            length = dto.length,
        )
    }

    fun map(dto: TdApi.AuthenticationCodeTypeFlashCall): AuthenticationCodeTypeFlashCall {
        return AuthenticationCodeTypeFlashCall(
            pattern = dto.pattern,
        )
    }

    fun map(dto: TdApi.AuthenticationCodeTypeMissedCall): AuthenticationCodeTypeMissedCall {
        return AuthenticationCodeTypeMissedCall(
            phoneNumberPrefix = dto.phoneNumberPrefix,
            length = dto.length,
        )
    }

    fun map(dto: TdApi.AuthenticationCodeTypeFragment): AuthenticationCodeTypeFragment {
        return AuthenticationCodeTypeFragment(
            url = dto.url,
            length = dto.length,
        )
    }

    fun map(dto: TdApi.AuthenticationCodeTypeFirebaseAndroid): AuthenticationCodeTypeFirebaseAndroid {
        return AuthenticationCodeTypeFirebaseAndroid(
            deviceVerificationParameters = map(dto.deviceVerificationParameters),
            length = dto.length,
        )
    }

    fun map(dto: TdApi.AuthenticationCodeTypeFirebaseIos): AuthenticationCodeTypeFirebaseIos {
        return AuthenticationCodeTypeFirebaseIos(
            receipt = dto.receipt,
            pushTimeout = dto.pushTimeout,
            length = dto.length,
        )
    }

    fun map(dto: AuthenticationCodeType): TdApi.AuthenticationCodeType {
        when (dto) {
            is AuthenticationCodeTypeTelegramMessage -> return map(dto)
            is AuthenticationCodeTypeSms -> return map(dto)
            is AuthenticationCodeTypeSmsWord -> return map(dto)
            is AuthenticationCodeTypeSmsPhrase -> return map(dto)
            is AuthenticationCodeTypeCall -> return map(dto)
            is AuthenticationCodeTypeFlashCall -> return map(dto)
            is AuthenticationCodeTypeMissedCall -> return map(dto)
            is AuthenticationCodeTypeFragment -> return map(dto)
            is AuthenticationCodeTypeFirebaseAndroid -> return map(dto)
            is AuthenticationCodeTypeFirebaseIos -> return map(dto)
        }
    }

    fun map(dto: AuthenticationCodeTypeTelegramMessage): TdApi.AuthenticationCodeTypeTelegramMessage {
        return TdApi.AuthenticationCodeTypeTelegramMessage(
            length = dto.length,
        )
    }

    fun map(dto: AuthenticationCodeTypeSms): TdApi.AuthenticationCodeTypeSms {
        return TdApi.AuthenticationCodeTypeSms(
            length = dto.length,
        )
    }

    fun map(dto: AuthenticationCodeTypeSmsWord): TdApi.AuthenticationCodeTypeSmsWord {
        return TdApi.AuthenticationCodeTypeSmsWord(
            firstLetter = dto.firstLetter,
        )
    }

    fun map(dto: AuthenticationCodeTypeSmsPhrase): TdApi.AuthenticationCodeTypeSmsPhrase {
        return TdApi.AuthenticationCodeTypeSmsPhrase(
            firstWord = dto.firstWord,
        )
    }

    fun map(dto: AuthenticationCodeTypeCall): TdApi.AuthenticationCodeTypeCall {
        return TdApi.AuthenticationCodeTypeCall(
            length = dto.length,
        )
    }

    fun map(dto: AuthenticationCodeTypeFlashCall): TdApi.AuthenticationCodeTypeFlashCall {
        return TdApi.AuthenticationCodeTypeFlashCall(
            pattern = dto.pattern,
        )
    }

    fun map(dto: AuthenticationCodeTypeMissedCall): TdApi.AuthenticationCodeTypeMissedCall {
        return TdApi.AuthenticationCodeTypeMissedCall(
            phoneNumberPrefix = dto.phoneNumberPrefix,
            length = dto.length,
        )
    }

    fun map(dto: AuthenticationCodeTypeFragment): TdApi.AuthenticationCodeTypeFragment {
        return TdApi.AuthenticationCodeTypeFragment(
            url = dto.url,
            length = dto.length,
        )
    }

    fun map(dto: AuthenticationCodeTypeFirebaseAndroid): TdApi.AuthenticationCodeTypeFirebaseAndroid {
        return TdApi.AuthenticationCodeTypeFirebaseAndroid(
            deviceVerificationParameters = map(dto.deviceVerificationParameters),
            length = dto.length,
        )
    }

    fun map(dto: AuthenticationCodeTypeFirebaseIos): TdApi.AuthenticationCodeTypeFirebaseIos {
        return TdApi.AuthenticationCodeTypeFirebaseIos(
            receipt = dto.receipt,
            pushTimeout = dto.pushTimeout,
            length = dto.length,
        )
    }

    fun map(dto: TdApi.AuthorizationState): AuthorizationState {
        when (dto) {
            is TdApi.AuthorizationStateWaitTdlibParameters -> return map(dto)
            is TdApi.AuthorizationStateWaitPhoneNumber -> return map(dto)
            is TdApi.AuthorizationStateWaitPremiumPurchase -> return map(dto)
            is TdApi.AuthorizationStateWaitEmailAddress -> return map(dto)
            is TdApi.AuthorizationStateWaitEmailCode -> return map(dto)
            is TdApi.AuthorizationStateWaitCode -> return map(dto)
            is TdApi.AuthorizationStateWaitOtherDeviceConfirmation -> return map(dto)
            is TdApi.AuthorizationStateWaitRegistration -> return map(dto)
            is TdApi.AuthorizationStateWaitPassword -> return map(dto)
            is TdApi.AuthorizationStateReady -> return map(dto)
            is TdApi.AuthorizationStateLoggingOut -> return map(dto)
            is TdApi.AuthorizationStateClosing -> return map(dto)
            is TdApi.AuthorizationStateClosed -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.AuthorizationStateWaitTdlibParameters): AuthorizationStateWaitTdlibParameters {
        return AuthorizationStateWaitTdlibParameters()
    }

    fun map(dto: TdApi.AuthorizationStateWaitPhoneNumber): AuthorizationStateWaitPhoneNumber {
        return AuthorizationStateWaitPhoneNumber()
    }

    fun map(dto: TdApi.AuthorizationStateWaitPremiumPurchase): AuthorizationStateWaitPremiumPurchase {
        return AuthorizationStateWaitPremiumPurchase(
            storeProductId = dto.storeProductId,
        )
    }

    fun map(dto: TdApi.AuthorizationStateWaitEmailAddress): AuthorizationStateWaitEmailAddress {
        return AuthorizationStateWaitEmailAddress(
            allowAppleId = dto.allowAppleId,
            allowGoogleId = dto.allowGoogleId,
        )
    }

    fun map(dto: TdApi.AuthorizationStateWaitEmailCode): AuthorizationStateWaitEmailCode {
        return AuthorizationStateWaitEmailCode(
            allowAppleId = dto.allowAppleId,
            allowGoogleId = dto.allowGoogleId,
            codeInfo = map(dto.codeInfo),
            emailAddressResetState = dto.emailAddressResetState?.let { map(it) },
        )
    }

    fun map(dto: TdApi.AuthorizationStateWaitCode): AuthorizationStateWaitCode {
        return AuthorizationStateWaitCode(
            codeInfo = map(dto.codeInfo),
        )
    }

    fun map(dto: TdApi.AuthorizationStateWaitOtherDeviceConfirmation): AuthorizationStateWaitOtherDeviceConfirmation {
        return AuthorizationStateWaitOtherDeviceConfirmation(
            link = dto.link,
        )
    }

    fun map(dto: TdApi.AuthorizationStateWaitRegistration): AuthorizationStateWaitRegistration {
        return AuthorizationStateWaitRegistration(
            termsOfService = map(dto.termsOfService),
        )
    }

    fun map(dto: TdApi.AuthorizationStateWaitPassword): AuthorizationStateWaitPassword {
        return AuthorizationStateWaitPassword(
            passwordHint = dto.passwordHint,
            hasRecoveryEmailAddress = dto.hasRecoveryEmailAddress,
            hasPassportData = dto.hasPassportData,
            recoveryEmailAddressPattern = dto.recoveryEmailAddressPattern,
        )
    }

    fun map(dto: TdApi.AuthorizationStateReady): AuthorizationStateReady {
        return AuthorizationStateReady()
    }

    fun map(dto: TdApi.AuthorizationStateLoggingOut): AuthorizationStateLoggingOut {
        return AuthorizationStateLoggingOut()
    }

    fun map(dto: TdApi.AuthorizationStateClosing): AuthorizationStateClosing {
        return AuthorizationStateClosing()
    }

    fun map(dto: TdApi.AuthorizationStateClosed): AuthorizationStateClosed {
        return AuthorizationStateClosed()
    }

    fun map(dto: AuthorizationState): TdApi.AuthorizationState {
        when (dto) {
            is AuthorizationStateWaitTdlibParameters -> return map(dto)
            is AuthorizationStateWaitPhoneNumber -> return map(dto)
            is AuthorizationStateWaitPremiumPurchase -> return map(dto)
            is AuthorizationStateWaitEmailAddress -> return map(dto)
            is AuthorizationStateWaitEmailCode -> return map(dto)
            is AuthorizationStateWaitCode -> return map(dto)
            is AuthorizationStateWaitOtherDeviceConfirmation -> return map(dto)
            is AuthorizationStateWaitRegistration -> return map(dto)
            is AuthorizationStateWaitPassword -> return map(dto)
            is AuthorizationStateReady -> return map(dto)
            is AuthorizationStateLoggingOut -> return map(dto)
            is AuthorizationStateClosing -> return map(dto)
            is AuthorizationStateClosed -> return map(dto)
        }
    }

    fun map(dto: AuthorizationStateWaitTdlibParameters): TdApi.AuthorizationStateWaitTdlibParameters {
        return TdApi.AuthorizationStateWaitTdlibParameters()
    }

    fun map(dto: AuthorizationStateWaitPhoneNumber): TdApi.AuthorizationStateWaitPhoneNumber {
        return TdApi.AuthorizationStateWaitPhoneNumber()
    }

    fun map(dto: AuthorizationStateWaitPremiumPurchase): TdApi.AuthorizationStateWaitPremiumPurchase {
        return TdApi.AuthorizationStateWaitPremiumPurchase(
            storeProductId = dto.storeProductId,
        )
    }

    fun map(dto: AuthorizationStateWaitEmailAddress): TdApi.AuthorizationStateWaitEmailAddress {
        return TdApi.AuthorizationStateWaitEmailAddress(
            allowAppleId = dto.allowAppleId,
            allowGoogleId = dto.allowGoogleId,
        )
    }

    fun map(dto: AuthorizationStateWaitEmailCode): TdApi.AuthorizationStateWaitEmailCode {
        return TdApi.AuthorizationStateWaitEmailCode(
            allowAppleId = dto.allowAppleId,
            allowGoogleId = dto.allowGoogleId,
            codeInfo = map(dto.codeInfo),
            emailAddressResetState = dto.emailAddressResetState?.let { map(it) },
        )
    }

    fun map(dto: AuthorizationStateWaitCode): TdApi.AuthorizationStateWaitCode {
        return TdApi.AuthorizationStateWaitCode(
            codeInfo = map(dto.codeInfo),
        )
    }

    fun map(dto: AuthorizationStateWaitOtherDeviceConfirmation): TdApi.AuthorizationStateWaitOtherDeviceConfirmation {
        return TdApi.AuthorizationStateWaitOtherDeviceConfirmation(
            link = dto.link,
        )
    }

    fun map(dto: AuthorizationStateWaitRegistration): TdApi.AuthorizationStateWaitRegistration {
        return TdApi.AuthorizationStateWaitRegistration(
            termsOfService = map(dto.termsOfService),
        )
    }

    fun map(dto: AuthorizationStateWaitPassword): TdApi.AuthorizationStateWaitPassword {
        return TdApi.AuthorizationStateWaitPassword(
            passwordHint = dto.passwordHint,
            hasRecoveryEmailAddress = dto.hasRecoveryEmailAddress,
            hasPassportData = dto.hasPassportData,
            recoveryEmailAddressPattern = dto.recoveryEmailAddressPattern,
        )
    }

    fun map(dto: AuthorizationStateReady): TdApi.AuthorizationStateReady {
        return TdApi.AuthorizationStateReady()
    }

    fun map(dto: AuthorizationStateLoggingOut): TdApi.AuthorizationStateLoggingOut {
        return TdApi.AuthorizationStateLoggingOut()
    }

    fun map(dto: AuthorizationStateClosing): TdApi.AuthorizationStateClosing {
        return TdApi.AuthorizationStateClosing()
    }

    fun map(dto: AuthorizationStateClosed): TdApi.AuthorizationStateClosed {
        return TdApi.AuthorizationStateClosed()
    }

    fun map(dto: TdApi.AutoDownloadSettings): AutoDownloadSettings {
        return AutoDownloadSettings(
            isAutoDownloadEnabled = dto.isAutoDownloadEnabled,
            maxPhotoFileSize = dto.maxPhotoFileSize,
            maxVideoFileSize = dto.maxVideoFileSize,
            maxOtherFileSize = dto.maxOtherFileSize,
            videoUploadBitrate = dto.videoUploadBitrate,
            preloadLargeVideos = dto.preloadLargeVideos,
            preloadNextAudio = dto.preloadNextAudio,
            preloadStories = dto.preloadStories,
            useLessDataForCalls = dto.useLessDataForCalls,
        )
    }

    fun map(dto: AutoDownloadSettings): TdApi.AutoDownloadSettings {
        return TdApi.AutoDownloadSettings(
            isAutoDownloadEnabled = dto.isAutoDownloadEnabled,
            maxPhotoFileSize = dto.maxPhotoFileSize,
            maxVideoFileSize = dto.maxVideoFileSize,
            maxOtherFileSize = dto.maxOtherFileSize,
            videoUploadBitrate = dto.videoUploadBitrate,
            preloadLargeVideos = dto.preloadLargeVideos,
            preloadNextAudio = dto.preloadNextAudio,
            preloadStories = dto.preloadStories,
            useLessDataForCalls = dto.useLessDataForCalls,
        )
    }

    fun map(dto: TdApi.AutoDownloadSettingsPresets): AutoDownloadSettingsPresets {
        return AutoDownloadSettingsPresets(
            low = map(dto.low),
            medium = map(dto.medium),
            high = map(dto.high),
        )
    }

    fun map(dto: AutoDownloadSettingsPresets): TdApi.AutoDownloadSettingsPresets {
        return TdApi.AutoDownloadSettingsPresets(
            low = map(dto.low),
            medium = map(dto.medium),
            high = map(dto.high),
        )
    }

    fun map(dto: TdApi.AutosaveSettings): AutosaveSettings {
        return AutosaveSettings(
            privateChatSettings = map(dto.privateChatSettings),
            groupSettings = map(dto.groupSettings),
            channelSettings = map(dto.channelSettings),
            exceptions = dto.exceptions.mapArray { map(it) },
        )
    }

    fun map(dto: AutosaveSettings): TdApi.AutosaveSettings {
        return TdApi.AutosaveSettings(
            privateChatSettings = map(dto.privateChatSettings),
            groupSettings = map(dto.groupSettings),
            channelSettings = map(dto.channelSettings),
            exceptions = dto.exceptions.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.AutosaveSettingsException): AutosaveSettingsException {
        return AutosaveSettingsException(
            chatId = dto.chatId,
            settings = map(dto.settings),
        )
    }

    fun map(dto: AutosaveSettingsException): TdApi.AutosaveSettingsException {
        return TdApi.AutosaveSettingsException(
            chatId = dto.chatId,
            settings = map(dto.settings),
        )
    }

    fun map(dto: TdApi.AutosaveSettingsScope): AutosaveSettingsScope {
        when (dto) {
            is TdApi.AutosaveSettingsScopePrivateChats -> return map(dto)
            is TdApi.AutosaveSettingsScopeGroupChats -> return map(dto)
            is TdApi.AutosaveSettingsScopeChannelChats -> return map(dto)
            is TdApi.AutosaveSettingsScopeChat -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.AutosaveSettingsScopePrivateChats): AutosaveSettingsScopePrivateChats {
        return AutosaveSettingsScopePrivateChats()
    }

    fun map(dto: TdApi.AutosaveSettingsScopeGroupChats): AutosaveSettingsScopeGroupChats {
        return AutosaveSettingsScopeGroupChats()
    }

    fun map(dto: TdApi.AutosaveSettingsScopeChannelChats): AutosaveSettingsScopeChannelChats {
        return AutosaveSettingsScopeChannelChats()
    }

    fun map(dto: TdApi.AutosaveSettingsScopeChat): AutosaveSettingsScopeChat {
        return AutosaveSettingsScopeChat(
            chatId = dto.chatId,
        )
    }

    fun map(dto: AutosaveSettingsScope): TdApi.AutosaveSettingsScope {
        when (dto) {
            is AutosaveSettingsScopePrivateChats -> return map(dto)
            is AutosaveSettingsScopeGroupChats -> return map(dto)
            is AutosaveSettingsScopeChannelChats -> return map(dto)
            is AutosaveSettingsScopeChat -> return map(dto)
        }
    }

    fun map(dto: AutosaveSettingsScopePrivateChats): TdApi.AutosaveSettingsScopePrivateChats {
        return TdApi.AutosaveSettingsScopePrivateChats()
    }

    fun map(dto: AutosaveSettingsScopeGroupChats): TdApi.AutosaveSettingsScopeGroupChats {
        return TdApi.AutosaveSettingsScopeGroupChats()
    }

    fun map(dto: AutosaveSettingsScopeChannelChats): TdApi.AutosaveSettingsScopeChannelChats {
        return TdApi.AutosaveSettingsScopeChannelChats()
    }

    fun map(dto: AutosaveSettingsScopeChat): TdApi.AutosaveSettingsScopeChat {
        return TdApi.AutosaveSettingsScopeChat(
            chatId = dto.chatId,
        )
    }

    fun map(dto: TdApi.AvailableGift): AvailableGift {
        return AvailableGift(
            gift = map(dto.gift),
            resaleCount = dto.resaleCount,
            minResaleStarCount = dto.minResaleStarCount,
            title = dto.title,
        )
    }

    fun map(dto: AvailableGift): TdApi.AvailableGift {
        return TdApi.AvailableGift(
            gift = map(dto.gift),
            resaleCount = dto.resaleCount,
            minResaleStarCount = dto.minResaleStarCount,
            title = dto.title,
        )
    }

    fun map(dto: TdApi.AvailableGifts): AvailableGifts {
        return AvailableGifts(
            gifts = dto.gifts.mapArray { map(it) },
        )
    }

    fun map(dto: AvailableGifts): TdApi.AvailableGifts {
        return TdApi.AvailableGifts(
            gifts = dto.gifts.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.AvailableReaction): AvailableReaction {
        return AvailableReaction(
            type = map(dto.type),
            needsPremium = dto.needsPremium,
        )
    }

    fun map(dto: AvailableReaction): TdApi.AvailableReaction {
        return TdApi.AvailableReaction(
            type = map(dto.type),
            needsPremium = dto.needsPremium,
        )
    }

    fun map(dto: TdApi.AvailableReactions): AvailableReactions {
        return AvailableReactions(
            topReactions = dto.topReactions.mapArray { map(it) },
            recentReactions = dto.recentReactions.mapArray { map(it) },
            popularReactions = dto.popularReactions.mapArray { map(it) },
            allowCustomEmoji = dto.allowCustomEmoji,
            areTags = dto.areTags,
            unavailabilityReason = dto.unavailabilityReason?.let { map(it) },
        )
    }

    fun map(dto: AvailableReactions): TdApi.AvailableReactions {
        return TdApi.AvailableReactions(
            topReactions = dto.topReactions.mapArray { map(it) },
            recentReactions = dto.recentReactions.mapArray { map(it) },
            popularReactions = dto.popularReactions.mapArray { map(it) },
            allowCustomEmoji = dto.allowCustomEmoji,
            areTags = dto.areTags,
            unavailabilityReason = dto.unavailabilityReason?.let { map(it) },
        )
    }

    fun map(dto: TdApi.Background): Background {
        return Background(
            id = dto.id,
            isDefault = dto.isDefault,
            isDark = dto.isDark,
            name = dto.name,
            document = dto.document?.let { map(it) },
            type = map(dto.type),
        )
    }

    fun map(dto: Background): TdApi.Background {
        return TdApi.Background(
            id = dto.id,
            isDefault = dto.isDefault,
            isDark = dto.isDark,
            name = dto.name,
            document = dto.document?.let { map(it) },
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.BackgroundFill): BackgroundFill {
        when (dto) {
            is TdApi.BackgroundFillSolid -> return map(dto)
            is TdApi.BackgroundFillGradient -> return map(dto)
            is TdApi.BackgroundFillFreeformGradient -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.BackgroundFillSolid): BackgroundFillSolid {
        return BackgroundFillSolid(
            color = dto.color,
        )
    }

    fun map(dto: TdApi.BackgroundFillGradient): BackgroundFillGradient {
        return BackgroundFillGradient(
            topColor = dto.topColor,
            bottomColor = dto.bottomColor,
            rotationAngle = dto.rotationAngle,
        )
    }

    fun map(dto: TdApi.BackgroundFillFreeformGradient): BackgroundFillFreeformGradient {
        return BackgroundFillFreeformGradient(
            colors = dto.colors,
        )
    }

    fun map(dto: BackgroundFill): TdApi.BackgroundFill {
        when (dto) {
            is BackgroundFillSolid -> return map(dto)
            is BackgroundFillGradient -> return map(dto)
            is BackgroundFillFreeformGradient -> return map(dto)
        }
    }

    fun map(dto: BackgroundFillSolid): TdApi.BackgroundFillSolid {
        return TdApi.BackgroundFillSolid(
            color = dto.color,
        )
    }

    fun map(dto: BackgroundFillGradient): TdApi.BackgroundFillGradient {
        return TdApi.BackgroundFillGradient(
            topColor = dto.topColor,
            bottomColor = dto.bottomColor,
            rotationAngle = dto.rotationAngle,
        )
    }

    fun map(dto: BackgroundFillFreeformGradient): TdApi.BackgroundFillFreeformGradient {
        return TdApi.BackgroundFillFreeformGradient(
            colors = dto.colors,
        )
    }

    fun map(dto: TdApi.BackgroundType): BackgroundType {
        when (dto) {
            is TdApi.BackgroundTypeWallpaper -> return map(dto)
            is TdApi.BackgroundTypePattern -> return map(dto)
            is TdApi.BackgroundTypeFill -> return map(dto)
            is TdApi.BackgroundTypeChatTheme -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.BackgroundTypeWallpaper): BackgroundTypeWallpaper {
        return BackgroundTypeWallpaper(
            isBlurred = dto.isBlurred,
            isMoving = dto.isMoving,
        )
    }

    fun map(dto: TdApi.BackgroundTypePattern): BackgroundTypePattern {
        return BackgroundTypePattern(
            fill = map(dto.fill),
            intensity = dto.intensity,
            isInverted = dto.isInverted,
            isMoving = dto.isMoving,
        )
    }

    fun map(dto: TdApi.BackgroundTypeFill): BackgroundTypeFill {
        return BackgroundTypeFill(
            fill = map(dto.fill),
        )
    }

    fun map(dto: TdApi.BackgroundTypeChatTheme): BackgroundTypeChatTheme {
        return BackgroundTypeChatTheme(
            themeName = dto.themeName,
        )
    }

    fun map(dto: BackgroundType): TdApi.BackgroundType {
        when (dto) {
            is BackgroundTypeWallpaper -> return map(dto)
            is BackgroundTypePattern -> return map(dto)
            is BackgroundTypeFill -> return map(dto)
            is BackgroundTypeChatTheme -> return map(dto)
        }
    }

    fun map(dto: BackgroundTypeWallpaper): TdApi.BackgroundTypeWallpaper {
        return TdApi.BackgroundTypeWallpaper(
            isBlurred = dto.isBlurred,
            isMoving = dto.isMoving,
        )
    }

    fun map(dto: BackgroundTypePattern): TdApi.BackgroundTypePattern {
        return TdApi.BackgroundTypePattern(
            fill = map(dto.fill),
            intensity = dto.intensity,
            isInverted = dto.isInverted,
            isMoving = dto.isMoving,
        )
    }

    fun map(dto: BackgroundTypeFill): TdApi.BackgroundTypeFill {
        return TdApi.BackgroundTypeFill(
            fill = map(dto.fill),
        )
    }

    fun map(dto: BackgroundTypeChatTheme): TdApi.BackgroundTypeChatTheme {
        return TdApi.BackgroundTypeChatTheme(
            themeName = dto.themeName,
        )
    }

    fun map(dto: TdApi.Backgrounds): Backgrounds {
        return Backgrounds(
            backgrounds = dto.backgrounds.mapArray { map(it) },
        )
    }

    fun map(dto: Backgrounds): TdApi.Backgrounds {
        return TdApi.Backgrounds(
            backgrounds = dto.backgrounds.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.BankCardActionOpenUrl): BankCardActionOpenUrl {
        return BankCardActionOpenUrl(
            text = dto.text,
            url = dto.url,
        )
    }

    fun map(dto: BankCardActionOpenUrl): TdApi.BankCardActionOpenUrl {
        return TdApi.BankCardActionOpenUrl(
            text = dto.text,
            url = dto.url,
        )
    }

    fun map(dto: TdApi.BankCardInfo): BankCardInfo {
        return BankCardInfo(
            title = dto.title,
            actions = dto.actions.mapArray { map(it) },
        )
    }

    fun map(dto: BankCardInfo): TdApi.BankCardInfo {
        return TdApi.BankCardInfo(
            title = dto.title,
            actions = dto.actions.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.BasicGroup): BasicGroup {
        return BasicGroup(
            id = dto.id,
            memberCount = dto.memberCount,
            status = map(dto.status),
            isActive = dto.isActive,
            upgradedToSupergroupId = dto.upgradedToSupergroupId,
        )
    }

    fun map(dto: BasicGroup): TdApi.BasicGroup {
        return TdApi.BasicGroup(
            id = dto.id,
            memberCount = dto.memberCount,
            status = map(dto.status),
            isActive = dto.isActive,
            upgradedToSupergroupId = dto.upgradedToSupergroupId,
        )
    }

    fun map(dto: TdApi.BasicGroupFullInfo): BasicGroupFullInfo {
        return BasicGroupFullInfo(
            photo = dto.photo?.let { map(it) },
            description = dto.description,
            creatorUserId = dto.creatorUserId,
            members = dto.members.mapArray { map(it) },
            canHideMembers = dto.canHideMembers,
            canToggleAggressiveAntiSpam = dto.canToggleAggressiveAntiSpam,
            inviteLink = dto.inviteLink?.let { map(it) },
            botCommands = dto.botCommands.mapArray { map(it) },
        )
    }

    fun map(dto: BasicGroupFullInfo): TdApi.BasicGroupFullInfo {
        return TdApi.BasicGroupFullInfo(
            photo = dto.photo?.let { map(it) },
            description = dto.description,
            creatorUserId = dto.creatorUserId,
            members = dto.members.mapArray { map(it) },
            canHideMembers = dto.canHideMembers,
            canToggleAggressiveAntiSpam = dto.canToggleAggressiveAntiSpam,
            inviteLink = dto.inviteLink?.let { map(it) },
            botCommands = dto.botCommands.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.Birthdate): Birthdate {
        return Birthdate(
            day = dto.day,
            month = dto.month,
            year = dto.year,
        )
    }

    fun map(dto: Birthdate): TdApi.Birthdate {
        return TdApi.Birthdate(
            day = dto.day,
            month = dto.month,
            year = dto.year,
        )
    }

    fun map(dto: TdApi.BlockList): BlockList {
        when (dto) {
            is TdApi.BlockListMain -> return map(dto)
            is TdApi.BlockListStories -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.BlockListMain): BlockListMain {
        return BlockListMain()
    }

    fun map(dto: TdApi.BlockListStories): BlockListStories {
        return BlockListStories()
    }

    fun map(dto: BlockList): TdApi.BlockList {
        when (dto) {
            is BlockListMain -> return map(dto)
            is BlockListStories -> return map(dto)
        }
    }

    fun map(dto: BlockListMain): TdApi.BlockListMain {
        return TdApi.BlockListMain()
    }

    fun map(dto: BlockListStories): TdApi.BlockListStories {
        return TdApi.BlockListStories()
    }

    fun map(dto: TdApi.BotCommand): BotCommand {
        return BotCommand(
            command = dto.command,
            description = dto.description,
        )
    }

    fun map(dto: BotCommand): TdApi.BotCommand {
        return TdApi.BotCommand(
            command = dto.command,
            description = dto.description,
        )
    }

    fun map(dto: TdApi.BotCommandScope): BotCommandScope {
        when (dto) {
            is TdApi.BotCommandScopeDefault -> return map(dto)
            is TdApi.BotCommandScopeAllPrivateChats -> return map(dto)
            is TdApi.BotCommandScopeAllGroupChats -> return map(dto)
            is TdApi.BotCommandScopeAllChatAdministrators -> return map(dto)
            is TdApi.BotCommandScopeChat -> return map(dto)
            is TdApi.BotCommandScopeChatAdministrators -> return map(dto)
            is TdApi.BotCommandScopeChatMember -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.BotCommandScopeDefault): BotCommandScopeDefault {
        return BotCommandScopeDefault()
    }

    fun map(dto: TdApi.BotCommandScopeAllPrivateChats): BotCommandScopeAllPrivateChats {
        return BotCommandScopeAllPrivateChats()
    }

    fun map(dto: TdApi.BotCommandScopeAllGroupChats): BotCommandScopeAllGroupChats {
        return BotCommandScopeAllGroupChats()
    }

    fun map(dto: TdApi.BotCommandScopeAllChatAdministrators): BotCommandScopeAllChatAdministrators {
        return BotCommandScopeAllChatAdministrators()
    }

    fun map(dto: TdApi.BotCommandScopeChat): BotCommandScopeChat {
        return BotCommandScopeChat(
            chatId = dto.chatId,
        )
    }

    fun map(dto: TdApi.BotCommandScopeChatAdministrators): BotCommandScopeChatAdministrators {
        return BotCommandScopeChatAdministrators(
            chatId = dto.chatId,
        )
    }

    fun map(dto: TdApi.BotCommandScopeChatMember): BotCommandScopeChatMember {
        return BotCommandScopeChatMember(
            chatId = dto.chatId,
            userId = dto.userId,
        )
    }

    fun map(dto: BotCommandScope): TdApi.BotCommandScope {
        when (dto) {
            is BotCommandScopeDefault -> return map(dto)
            is BotCommandScopeAllPrivateChats -> return map(dto)
            is BotCommandScopeAllGroupChats -> return map(dto)
            is BotCommandScopeAllChatAdministrators -> return map(dto)
            is BotCommandScopeChat -> return map(dto)
            is BotCommandScopeChatAdministrators -> return map(dto)
            is BotCommandScopeChatMember -> return map(dto)
        }
    }

    fun map(dto: BotCommandScopeDefault): TdApi.BotCommandScopeDefault {
        return TdApi.BotCommandScopeDefault()
    }

    fun map(dto: BotCommandScopeAllPrivateChats): TdApi.BotCommandScopeAllPrivateChats {
        return TdApi.BotCommandScopeAllPrivateChats()
    }

    fun map(dto: BotCommandScopeAllGroupChats): TdApi.BotCommandScopeAllGroupChats {
        return TdApi.BotCommandScopeAllGroupChats()
    }

    fun map(dto: BotCommandScopeAllChatAdministrators): TdApi.BotCommandScopeAllChatAdministrators {
        return TdApi.BotCommandScopeAllChatAdministrators()
    }

    fun map(dto: BotCommandScopeChat): TdApi.BotCommandScopeChat {
        return TdApi.BotCommandScopeChat(
            chatId = dto.chatId,
        )
    }

    fun map(dto: BotCommandScopeChatAdministrators): TdApi.BotCommandScopeChatAdministrators {
        return TdApi.BotCommandScopeChatAdministrators(
            chatId = dto.chatId,
        )
    }

    fun map(dto: BotCommandScopeChatMember): TdApi.BotCommandScopeChatMember {
        return TdApi.BotCommandScopeChatMember(
            chatId = dto.chatId,
            userId = dto.userId,
        )
    }

    fun map(dto: TdApi.BotCommands): BotCommands {
        return BotCommands(
            botUserId = dto.botUserId,
            commands = dto.commands.mapArray { map(it) },
        )
    }

    fun map(dto: BotCommands): TdApi.BotCommands {
        return TdApi.BotCommands(
            botUserId = dto.botUserId,
            commands = dto.commands.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.BotInfo): BotInfo {
        return BotInfo(
            shortDescription = dto.shortDescription,
            description = dto.description,
            photo = dto.photo?.let { map(it) },
            animation = dto.animation?.let { map(it) },
            menuButton = dto.menuButton?.let { map(it) },
            commands = dto.commands.mapArray { map(it) },
            privacyPolicyUrl = dto.privacyPolicyUrl,
            defaultGroupAdministratorRights = dto.defaultGroupAdministratorRights?.let { map(it) },
            defaultChannelAdministratorRights = dto.defaultChannelAdministratorRights?.let { map(it) },
            affiliateProgram = dto.affiliateProgram?.let { map(it) },
            webAppBackgroundLightColor = dto.webAppBackgroundLightColor,
            webAppBackgroundDarkColor = dto.webAppBackgroundDarkColor,
            webAppHeaderLightColor = dto.webAppHeaderLightColor,
            webAppHeaderDarkColor = dto.webAppHeaderDarkColor,
            verificationParameters = dto.verificationParameters?.let { map(it) },
            canGetRevenueStatistics = dto.canGetRevenueStatistics,
            canManageEmojiStatus = dto.canManageEmojiStatus,
            hasMediaPreviews = dto.hasMediaPreviews,
            editCommandsLink = dto.editCommandsLink?.let { map(it) },
            editDescriptionLink = dto.editDescriptionLink?.let { map(it) },
            editDescriptionMediaLink = dto.editDescriptionMediaLink?.let { map(it) },
            editSettingsLink = dto.editSettingsLink?.let { map(it) },
        )
    }

    fun map(dto: BotInfo): TdApi.BotInfo {
        return TdApi.BotInfo(
            shortDescription = dto.shortDescription,
            description = dto.description,
            photo = dto.photo?.let { map(it) },
            animation = dto.animation?.let { map(it) },
            menuButton = dto.menuButton?.let { map(it) },
            commands = dto.commands.mapArray { map(it) },
            privacyPolicyUrl = dto.privacyPolicyUrl,
            defaultGroupAdministratorRights = dto.defaultGroupAdministratorRights?.let { map(it) },
            defaultChannelAdministratorRights = dto.defaultChannelAdministratorRights?.let { map(it) },
            affiliateProgram = dto.affiliateProgram?.let { map(it) },
            webAppBackgroundLightColor = dto.webAppBackgroundLightColor,
            webAppBackgroundDarkColor = dto.webAppBackgroundDarkColor,
            webAppHeaderLightColor = dto.webAppHeaderLightColor,
            webAppHeaderDarkColor = dto.webAppHeaderDarkColor,
            verificationParameters = dto.verificationParameters?.let { map(it) },
            canGetRevenueStatistics = dto.canGetRevenueStatistics,
            canManageEmojiStatus = dto.canManageEmojiStatus,
            hasMediaPreviews = dto.hasMediaPreviews,
            editCommandsLink = dto.editCommandsLink?.let { map(it) },
            editDescriptionLink = dto.editDescriptionLink?.let { map(it) },
            editDescriptionMediaLink = dto.editDescriptionMediaLink?.let { map(it) },
            editSettingsLink = dto.editSettingsLink?.let { map(it) },
        )
    }

    fun map(dto: TdApi.BotMediaPreview): BotMediaPreview {
        return BotMediaPreview(
            date = dto.date,
            content = map(dto.content),
        )
    }

    fun map(dto: BotMediaPreview): TdApi.BotMediaPreview {
        return TdApi.BotMediaPreview(
            date = dto.date,
            content = map(dto.content),
        )
    }

    fun map(dto: TdApi.BotMediaPreviewInfo): BotMediaPreviewInfo {
        return BotMediaPreviewInfo(
            previews = dto.previews.mapArray { map(it) },
            languageCodes = dto.languageCodes,
        )
    }

    fun map(dto: BotMediaPreviewInfo): TdApi.BotMediaPreviewInfo {
        return TdApi.BotMediaPreviewInfo(
            previews = dto.previews.mapArray { map(it) },
            languageCodes = dto.languageCodes,
        )
    }

    fun map(dto: TdApi.BotMediaPreviews): BotMediaPreviews {
        return BotMediaPreviews(
            previews = dto.previews.mapArray { map(it) },
        )
    }

    fun map(dto: BotMediaPreviews): TdApi.BotMediaPreviews {
        return TdApi.BotMediaPreviews(
            previews = dto.previews.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.BotMenuButton): BotMenuButton {
        return BotMenuButton(
            text = dto.text,
            url = dto.url,
        )
    }

    fun map(dto: BotMenuButton): TdApi.BotMenuButton {
        return TdApi.BotMenuButton(
            text = dto.text,
            url = dto.url,
        )
    }

    fun map(dto: TdApi.BotVerification): BotVerification {
        return BotVerification(
            botUserId = dto.botUserId,
            iconCustomEmojiId = dto.iconCustomEmojiId,
            customDescription = map(dto.customDescription),
        )
    }

    fun map(dto: BotVerification): TdApi.BotVerification {
        return TdApi.BotVerification(
            botUserId = dto.botUserId,
            iconCustomEmojiId = dto.iconCustomEmojiId,
            customDescription = map(dto.customDescription),
        )
    }

    fun map(dto: TdApi.BotVerificationParameters): BotVerificationParameters {
        return BotVerificationParameters(
            iconCustomEmojiId = dto.iconCustomEmojiId,
            organizationName = dto.organizationName,
            defaultCustomDescription = dto.defaultCustomDescription?.let { map(it) },
            canSetCustomDescription = dto.canSetCustomDescription,
        )
    }

    fun map(dto: BotVerificationParameters): TdApi.BotVerificationParameters {
        return TdApi.BotVerificationParameters(
            iconCustomEmojiId = dto.iconCustomEmojiId,
            organizationName = dto.organizationName,
            defaultCustomDescription = dto.defaultCustomDescription?.let { map(it) },
            canSetCustomDescription = dto.canSetCustomDescription,
        )
    }

    fun map(dto: TdApi.BotWriteAccessAllowReason): BotWriteAccessAllowReason {
        when (dto) {
            is TdApi.BotWriteAccessAllowReasonConnectedWebsite -> return map(dto)
            is TdApi.BotWriteAccessAllowReasonAddedToAttachmentMenu -> return map(dto)
            is TdApi.BotWriteAccessAllowReasonLaunchedWebApp -> return map(dto)
            is TdApi.BotWriteAccessAllowReasonAcceptedRequest -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.BotWriteAccessAllowReasonConnectedWebsite): BotWriteAccessAllowReasonConnectedWebsite {
        return BotWriteAccessAllowReasonConnectedWebsite(
            domainName = dto.domainName,
        )
    }

    fun map(dto: TdApi.BotWriteAccessAllowReasonAddedToAttachmentMenu): BotWriteAccessAllowReasonAddedToAttachmentMenu {
        return BotWriteAccessAllowReasonAddedToAttachmentMenu()
    }

    fun map(dto: TdApi.BotWriteAccessAllowReasonLaunchedWebApp): BotWriteAccessAllowReasonLaunchedWebApp {
        return BotWriteAccessAllowReasonLaunchedWebApp(
            webApp = map(dto.webApp),
        )
    }

    fun map(dto: TdApi.BotWriteAccessAllowReasonAcceptedRequest): BotWriteAccessAllowReasonAcceptedRequest {
        return BotWriteAccessAllowReasonAcceptedRequest()
    }

    fun map(dto: BotWriteAccessAllowReason): TdApi.BotWriteAccessAllowReason {
        when (dto) {
            is BotWriteAccessAllowReasonConnectedWebsite -> return map(dto)
            is BotWriteAccessAllowReasonAddedToAttachmentMenu -> return map(dto)
            is BotWriteAccessAllowReasonLaunchedWebApp -> return map(dto)
            is BotWriteAccessAllowReasonAcceptedRequest -> return map(dto)
        }
    }

    fun map(dto: BotWriteAccessAllowReasonConnectedWebsite): TdApi.BotWriteAccessAllowReasonConnectedWebsite {
        return TdApi.BotWriteAccessAllowReasonConnectedWebsite(
            domainName = dto.domainName,
        )
    }

    fun map(dto: BotWriteAccessAllowReasonAddedToAttachmentMenu): TdApi.BotWriteAccessAllowReasonAddedToAttachmentMenu {
        return TdApi.BotWriteAccessAllowReasonAddedToAttachmentMenu()
    }

    fun map(dto: BotWriteAccessAllowReasonLaunchedWebApp): TdApi.BotWriteAccessAllowReasonLaunchedWebApp {
        return TdApi.BotWriteAccessAllowReasonLaunchedWebApp(
            webApp = map(dto.webApp),
        )
    }

    fun map(dto: BotWriteAccessAllowReasonAcceptedRequest): TdApi.BotWriteAccessAllowReasonAcceptedRequest {
        return TdApi.BotWriteAccessAllowReasonAcceptedRequest()
    }

    fun map(dto: TdApi.BusinessAwayMessageSchedule): BusinessAwayMessageSchedule {
        when (dto) {
            is TdApi.BusinessAwayMessageScheduleAlways -> return map(dto)
            is TdApi.BusinessAwayMessageScheduleOutsideOfOpeningHours -> return map(dto)
            is TdApi.BusinessAwayMessageScheduleCustom -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.BusinessAwayMessageScheduleAlways): BusinessAwayMessageScheduleAlways {
        return BusinessAwayMessageScheduleAlways()
    }

    fun map(dto: TdApi.BusinessAwayMessageScheduleOutsideOfOpeningHours): BusinessAwayMessageScheduleOutsideOfOpeningHours {
        return BusinessAwayMessageScheduleOutsideOfOpeningHours()
    }

    fun map(dto: TdApi.BusinessAwayMessageScheduleCustom): BusinessAwayMessageScheduleCustom {
        return BusinessAwayMessageScheduleCustom(
            startDate = dto.startDate,
            endDate = dto.endDate,
        )
    }

    fun map(dto: BusinessAwayMessageSchedule): TdApi.BusinessAwayMessageSchedule {
        when (dto) {
            is BusinessAwayMessageScheduleAlways -> return map(dto)
            is BusinessAwayMessageScheduleOutsideOfOpeningHours -> return map(dto)
            is BusinessAwayMessageScheduleCustom -> return map(dto)
        }
    }

    fun map(dto: BusinessAwayMessageScheduleAlways): TdApi.BusinessAwayMessageScheduleAlways {
        return TdApi.BusinessAwayMessageScheduleAlways()
    }

    fun map(dto: BusinessAwayMessageScheduleOutsideOfOpeningHours): TdApi.BusinessAwayMessageScheduleOutsideOfOpeningHours {
        return TdApi.BusinessAwayMessageScheduleOutsideOfOpeningHours()
    }

    fun map(dto: BusinessAwayMessageScheduleCustom): TdApi.BusinessAwayMessageScheduleCustom {
        return TdApi.BusinessAwayMessageScheduleCustom(
            startDate = dto.startDate,
            endDate = dto.endDate,
        )
    }

    fun map(dto: TdApi.BusinessAwayMessageSettings): BusinessAwayMessageSettings {
        return BusinessAwayMessageSettings(
            shortcutId = dto.shortcutId,
            recipients = map(dto.recipients),
            schedule = map(dto.schedule),
            offlineOnly = dto.offlineOnly,
        )
    }

    fun map(dto: BusinessAwayMessageSettings): TdApi.BusinessAwayMessageSettings {
        return TdApi.BusinessAwayMessageSettings(
            shortcutId = dto.shortcutId,
            recipients = map(dto.recipients),
            schedule = map(dto.schedule),
            offlineOnly = dto.offlineOnly,
        )
    }

    fun map(dto: TdApi.BusinessBotManageBar): BusinessBotManageBar {
        return BusinessBotManageBar(
            botUserId = dto.botUserId,
            manageUrl = dto.manageUrl,
            isBotPaused = dto.isBotPaused,
            canBotReply = dto.canBotReply,
        )
    }

    fun map(dto: BusinessBotManageBar): TdApi.BusinessBotManageBar {
        return TdApi.BusinessBotManageBar(
            botUserId = dto.botUserId,
            manageUrl = dto.manageUrl,
            isBotPaused = dto.isBotPaused,
            canBotReply = dto.canBotReply,
        )
    }

    fun map(dto: TdApi.BusinessBotRights): BusinessBotRights {
        return BusinessBotRights(
            canReply = dto.canReply,
            canReadMessages = dto.canReadMessages,
            canDeleteSentMessages = dto.canDeleteSentMessages,
            canDeleteAllMessages = dto.canDeleteAllMessages,
            canEditName = dto.canEditName,
            canEditBio = dto.canEditBio,
            canEditProfilePhoto = dto.canEditProfilePhoto,
            canEditUsername = dto.canEditUsername,
            canViewGiftsAndStars = dto.canViewGiftsAndStars,
            canSellGifts = dto.canSellGifts,
            canChangeGiftSettings = dto.canChangeGiftSettings,
            canTransferAndUpgradeGifts = dto.canTransferAndUpgradeGifts,
            canTransferStars = dto.canTransferStars,
            canManageStories = dto.canManageStories,
        )
    }

    fun map(dto: BusinessBotRights): TdApi.BusinessBotRights {
        return TdApi.BusinessBotRights(
            canReply = dto.canReply,
            canReadMessages = dto.canReadMessages,
            canDeleteSentMessages = dto.canDeleteSentMessages,
            canDeleteAllMessages = dto.canDeleteAllMessages,
            canEditName = dto.canEditName,
            canEditBio = dto.canEditBio,
            canEditProfilePhoto = dto.canEditProfilePhoto,
            canEditUsername = dto.canEditUsername,
            canViewGiftsAndStars = dto.canViewGiftsAndStars,
            canSellGifts = dto.canSellGifts,
            canChangeGiftSettings = dto.canChangeGiftSettings,
            canTransferAndUpgradeGifts = dto.canTransferAndUpgradeGifts,
            canTransferStars = dto.canTransferStars,
            canManageStories = dto.canManageStories,
        )
    }

    fun map(dto: TdApi.BusinessChatLink): BusinessChatLink {
        return BusinessChatLink(
            link = dto.link,
            text = map(dto.text),
            title = dto.title,
            viewCount = dto.viewCount,
        )
    }

    fun map(dto: BusinessChatLink): TdApi.BusinessChatLink {
        return TdApi.BusinessChatLink(
            link = dto.link,
            text = map(dto.text),
            title = dto.title,
            viewCount = dto.viewCount,
        )
    }

    fun map(dto: TdApi.BusinessChatLinkInfo): BusinessChatLinkInfo {
        return BusinessChatLinkInfo(
            chatId = dto.chatId,
            text = map(dto.text),
        )
    }

    fun map(dto: BusinessChatLinkInfo): TdApi.BusinessChatLinkInfo {
        return TdApi.BusinessChatLinkInfo(
            chatId = dto.chatId,
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.BusinessChatLinks): BusinessChatLinks {
        return BusinessChatLinks(
            links = dto.links.mapArray { map(it) },
        )
    }

    fun map(dto: BusinessChatLinks): TdApi.BusinessChatLinks {
        return TdApi.BusinessChatLinks(
            links = dto.links.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.BusinessConnectedBot): BusinessConnectedBot {
        return BusinessConnectedBot(
            botUserId = dto.botUserId,
            recipients = map(dto.recipients),
            rights = map(dto.rights),
        )
    }

    fun map(dto: BusinessConnectedBot): TdApi.BusinessConnectedBot {
        return TdApi.BusinessConnectedBot(
            botUserId = dto.botUserId,
            recipients = map(dto.recipients),
            rights = map(dto.rights),
        )
    }

    fun map(dto: TdApi.BusinessConnection): BusinessConnection {
        return BusinessConnection(
            id = dto.id,
            userId = dto.userId,
            userChatId = dto.userChatId,
            date = dto.date,
            rights = dto.rights?.let { map(it) },
            isEnabled = dto.isEnabled,
        )
    }

    fun map(dto: BusinessConnection): TdApi.BusinessConnection {
        return TdApi.BusinessConnection(
            id = dto.id,
            userId = dto.userId,
            userChatId = dto.userChatId,
            date = dto.date,
            rights = dto.rights?.let { map(it) },
            isEnabled = dto.isEnabled,
        )
    }

    fun map(dto: TdApi.BusinessFeature): BusinessFeature {
        when (dto) {
            is TdApi.BusinessFeatureLocation -> return map(dto)
            is TdApi.BusinessFeatureOpeningHours -> return map(dto)
            is TdApi.BusinessFeatureQuickReplies -> return map(dto)
            is TdApi.BusinessFeatureGreetingMessage -> return map(dto)
            is TdApi.BusinessFeatureAwayMessage -> return map(dto)
            is TdApi.BusinessFeatureAccountLinks -> return map(dto)
            is TdApi.BusinessFeatureStartPage -> return map(dto)
            is TdApi.BusinessFeatureBots -> return map(dto)
            is TdApi.BusinessFeatureEmojiStatus -> return map(dto)
            is TdApi.BusinessFeatureChatFolderTags -> return map(dto)
            is TdApi.BusinessFeatureUpgradedStories -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.BusinessFeatureLocation): BusinessFeatureLocation {
        return BusinessFeatureLocation()
    }

    fun map(dto: TdApi.BusinessFeatureOpeningHours): BusinessFeatureOpeningHours {
        return BusinessFeatureOpeningHours()
    }

    fun map(dto: TdApi.BusinessFeatureQuickReplies): BusinessFeatureQuickReplies {
        return BusinessFeatureQuickReplies()
    }

    fun map(dto: TdApi.BusinessFeatureGreetingMessage): BusinessFeatureGreetingMessage {
        return BusinessFeatureGreetingMessage()
    }

    fun map(dto: TdApi.BusinessFeatureAwayMessage): BusinessFeatureAwayMessage {
        return BusinessFeatureAwayMessage()
    }

    fun map(dto: TdApi.BusinessFeatureAccountLinks): BusinessFeatureAccountLinks {
        return BusinessFeatureAccountLinks()
    }

    fun map(dto: TdApi.BusinessFeatureStartPage): BusinessFeatureStartPage {
        return BusinessFeatureStartPage()
    }

    fun map(dto: TdApi.BusinessFeatureBots): BusinessFeatureBots {
        return BusinessFeatureBots()
    }

    fun map(dto: TdApi.BusinessFeatureEmojiStatus): BusinessFeatureEmojiStatus {
        return BusinessFeatureEmojiStatus()
    }

    fun map(dto: TdApi.BusinessFeatureChatFolderTags): BusinessFeatureChatFolderTags {
        return BusinessFeatureChatFolderTags()
    }

    fun map(dto: TdApi.BusinessFeatureUpgradedStories): BusinessFeatureUpgradedStories {
        return BusinessFeatureUpgradedStories()
    }

    fun map(dto: BusinessFeature): TdApi.BusinessFeature {
        when (dto) {
            is BusinessFeatureLocation -> return map(dto)
            is BusinessFeatureOpeningHours -> return map(dto)
            is BusinessFeatureQuickReplies -> return map(dto)
            is BusinessFeatureGreetingMessage -> return map(dto)
            is BusinessFeatureAwayMessage -> return map(dto)
            is BusinessFeatureAccountLinks -> return map(dto)
            is BusinessFeatureStartPage -> return map(dto)
            is BusinessFeatureBots -> return map(dto)
            is BusinessFeatureEmojiStatus -> return map(dto)
            is BusinessFeatureChatFolderTags -> return map(dto)
            is BusinessFeatureUpgradedStories -> return map(dto)
        }
    }

    fun map(dto: BusinessFeatureLocation): TdApi.BusinessFeatureLocation {
        return TdApi.BusinessFeatureLocation()
    }

    fun map(dto: BusinessFeatureOpeningHours): TdApi.BusinessFeatureOpeningHours {
        return TdApi.BusinessFeatureOpeningHours()
    }

    fun map(dto: BusinessFeatureQuickReplies): TdApi.BusinessFeatureQuickReplies {
        return TdApi.BusinessFeatureQuickReplies()
    }

    fun map(dto: BusinessFeatureGreetingMessage): TdApi.BusinessFeatureGreetingMessage {
        return TdApi.BusinessFeatureGreetingMessage()
    }

    fun map(dto: BusinessFeatureAwayMessage): TdApi.BusinessFeatureAwayMessage {
        return TdApi.BusinessFeatureAwayMessage()
    }

    fun map(dto: BusinessFeatureAccountLinks): TdApi.BusinessFeatureAccountLinks {
        return TdApi.BusinessFeatureAccountLinks()
    }

    fun map(dto: BusinessFeatureStartPage): TdApi.BusinessFeatureStartPage {
        return TdApi.BusinessFeatureStartPage()
    }

    fun map(dto: BusinessFeatureBots): TdApi.BusinessFeatureBots {
        return TdApi.BusinessFeatureBots()
    }

    fun map(dto: BusinessFeatureEmojiStatus): TdApi.BusinessFeatureEmojiStatus {
        return TdApi.BusinessFeatureEmojiStatus()
    }

    fun map(dto: BusinessFeatureChatFolderTags): TdApi.BusinessFeatureChatFolderTags {
        return TdApi.BusinessFeatureChatFolderTags()
    }

    fun map(dto: BusinessFeatureUpgradedStories): TdApi.BusinessFeatureUpgradedStories {
        return TdApi.BusinessFeatureUpgradedStories()
    }

    fun map(dto: TdApi.BusinessFeaturePromotionAnimation): BusinessFeaturePromotionAnimation {
        return BusinessFeaturePromotionAnimation(
            feature = map(dto.feature),
            animation = map(dto.animation),
        )
    }

    fun map(dto: BusinessFeaturePromotionAnimation): TdApi.BusinessFeaturePromotionAnimation {
        return TdApi.BusinessFeaturePromotionAnimation(
            feature = map(dto.feature),
            animation = map(dto.animation),
        )
    }

    fun map(dto: TdApi.BusinessFeatures): BusinessFeatures {
        return BusinessFeatures(
            features = dto.features.mapArray { map(it) },
        )
    }

    fun map(dto: BusinessFeatures): TdApi.BusinessFeatures {
        return TdApi.BusinessFeatures(
            features = dto.features.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.BusinessGreetingMessageSettings): BusinessGreetingMessageSettings {
        return BusinessGreetingMessageSettings(
            shortcutId = dto.shortcutId,
            recipients = map(dto.recipients),
            inactivityDays = dto.inactivityDays,
        )
    }

    fun map(dto: BusinessGreetingMessageSettings): TdApi.BusinessGreetingMessageSettings {
        return TdApi.BusinessGreetingMessageSettings(
            shortcutId = dto.shortcutId,
            recipients = map(dto.recipients),
            inactivityDays = dto.inactivityDays,
        )
    }

    fun map(dto: TdApi.BusinessInfo): BusinessInfo {
        return BusinessInfo(
            location = dto.location?.let { map(it) },
            openingHours = dto.openingHours?.let { map(it) },
            localOpeningHours = dto.localOpeningHours?.let { map(it) },
            nextOpenIn = dto.nextOpenIn,
            nextCloseIn = dto.nextCloseIn,
            greetingMessageSettings = dto.greetingMessageSettings?.let { map(it) },
            awayMessageSettings = dto.awayMessageSettings?.let { map(it) },
            startPage = dto.startPage?.let { map(it) },
        )
    }

    fun map(dto: BusinessInfo): TdApi.BusinessInfo {
        return TdApi.BusinessInfo(
            location = dto.location?.let { map(it) },
            openingHours = dto.openingHours?.let { map(it) },
            localOpeningHours = dto.localOpeningHours?.let { map(it) },
            nextOpenIn = dto.nextOpenIn,
            nextCloseIn = dto.nextCloseIn,
            greetingMessageSettings = dto.greetingMessageSettings?.let { map(it) },
            awayMessageSettings = dto.awayMessageSettings?.let { map(it) },
            startPage = dto.startPage?.let { map(it) },
        )
    }

    fun map(dto: TdApi.BusinessLocation): BusinessLocation {
        return BusinessLocation(
            location = dto.location?.let { map(it) },
            address = dto.address,
        )
    }

    fun map(dto: BusinessLocation): TdApi.BusinessLocation {
        return TdApi.BusinessLocation(
            location = dto.location?.let { map(it) },
            address = dto.address,
        )
    }

    fun map(dto: TdApi.BusinessMessage): BusinessMessage {
        return BusinessMessage(
            message = map(dto.message),
            replyToMessage = dto.replyToMessage?.let { map(it) },
        )
    }

    fun map(dto: BusinessMessage): TdApi.BusinessMessage {
        return TdApi.BusinessMessage(
            message = map(dto.message),
            replyToMessage = dto.replyToMessage?.let { map(it) },
        )
    }

    fun map(dto: TdApi.BusinessMessages): BusinessMessages {
        return BusinessMessages(
            messages = dto.messages.mapArray { map(it) },
        )
    }

    fun map(dto: BusinessMessages): TdApi.BusinessMessages {
        return TdApi.BusinessMessages(
            messages = dto.messages.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.BusinessOpeningHours): BusinessOpeningHours {
        return BusinessOpeningHours(
            timeZoneId = dto.timeZoneId,
            openingHours = dto.openingHours.mapArray { map(it) },
        )
    }

    fun map(dto: BusinessOpeningHours): TdApi.BusinessOpeningHours {
        return TdApi.BusinessOpeningHours(
            timeZoneId = dto.timeZoneId,
            openingHours = dto.openingHours.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.BusinessOpeningHoursInterval): BusinessOpeningHoursInterval {
        return BusinessOpeningHoursInterval(
            startMinute = dto.startMinute,
            endMinute = dto.endMinute,
        )
    }

    fun map(dto: BusinessOpeningHoursInterval): TdApi.BusinessOpeningHoursInterval {
        return TdApi.BusinessOpeningHoursInterval(
            startMinute = dto.startMinute,
            endMinute = dto.endMinute,
        )
    }

    fun map(dto: TdApi.BusinessRecipients): BusinessRecipients {
        return BusinessRecipients(
            chatIds = dto.chatIds,
            excludedChatIds = dto.excludedChatIds,
            selectExistingChats = dto.selectExistingChats,
            selectNewChats = dto.selectNewChats,
            selectContacts = dto.selectContacts,
            selectNonContacts = dto.selectNonContacts,
            excludeSelected = dto.excludeSelected,
        )
    }

    fun map(dto: BusinessRecipients): TdApi.BusinessRecipients {
        return TdApi.BusinessRecipients(
            chatIds = dto.chatIds,
            excludedChatIds = dto.excludedChatIds,
            selectExistingChats = dto.selectExistingChats,
            selectNewChats = dto.selectNewChats,
            selectContacts = dto.selectContacts,
            selectNonContacts = dto.selectNonContacts,
            excludeSelected = dto.excludeSelected,
        )
    }

    fun map(dto: TdApi.BusinessStartPage): BusinessStartPage {
        return BusinessStartPage(
            title = dto.title,
            message = dto.message,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: BusinessStartPage): TdApi.BusinessStartPage {
        return TdApi.BusinessStartPage(
            title = dto.title,
            message = dto.message,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: TdApi.Call): Call {
        return Call(
            id = dto.id,
            userId = dto.userId,
            isOutgoing = dto.isOutgoing,
            isVideo = dto.isVideo,
            state = map(dto.state),
        )
    }

    fun map(dto: Call): TdApi.Call {
        return TdApi.Call(
            id = dto.id,
            userId = dto.userId,
            isOutgoing = dto.isOutgoing,
            isVideo = dto.isVideo,
            state = map(dto.state),
        )
    }

    fun map(dto: TdApi.CallDiscardReason): CallDiscardReason {
        when (dto) {
            is TdApi.CallDiscardReasonEmpty -> return map(dto)
            is TdApi.CallDiscardReasonMissed -> return map(dto)
            is TdApi.CallDiscardReasonDeclined -> return map(dto)
            is TdApi.CallDiscardReasonDisconnected -> return map(dto)
            is TdApi.CallDiscardReasonHungUp -> return map(dto)
            is TdApi.CallDiscardReasonUpgradeToGroupCall -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.CallDiscardReasonEmpty): CallDiscardReasonEmpty {
        return CallDiscardReasonEmpty()
    }

    fun map(dto: TdApi.CallDiscardReasonMissed): CallDiscardReasonMissed {
        return CallDiscardReasonMissed()
    }

    fun map(dto: TdApi.CallDiscardReasonDeclined): CallDiscardReasonDeclined {
        return CallDiscardReasonDeclined()
    }

    fun map(dto: TdApi.CallDiscardReasonDisconnected): CallDiscardReasonDisconnected {
        return CallDiscardReasonDisconnected()
    }

    fun map(dto: TdApi.CallDiscardReasonHungUp): CallDiscardReasonHungUp {
        return CallDiscardReasonHungUp()
    }

    fun map(dto: TdApi.CallDiscardReasonUpgradeToGroupCall): CallDiscardReasonUpgradeToGroupCall {
        return CallDiscardReasonUpgradeToGroupCall(
            inviteLink = dto.inviteLink,
        )
    }

    fun map(dto: CallDiscardReason): TdApi.CallDiscardReason {
        when (dto) {
            is CallDiscardReasonEmpty -> return map(dto)
            is CallDiscardReasonMissed -> return map(dto)
            is CallDiscardReasonDeclined -> return map(dto)
            is CallDiscardReasonDisconnected -> return map(dto)
            is CallDiscardReasonHungUp -> return map(dto)
            is CallDiscardReasonUpgradeToGroupCall -> return map(dto)
        }
    }

    fun map(dto: CallDiscardReasonEmpty): TdApi.CallDiscardReasonEmpty {
        return TdApi.CallDiscardReasonEmpty()
    }

    fun map(dto: CallDiscardReasonMissed): TdApi.CallDiscardReasonMissed {
        return TdApi.CallDiscardReasonMissed()
    }

    fun map(dto: CallDiscardReasonDeclined): TdApi.CallDiscardReasonDeclined {
        return TdApi.CallDiscardReasonDeclined()
    }

    fun map(dto: CallDiscardReasonDisconnected): TdApi.CallDiscardReasonDisconnected {
        return TdApi.CallDiscardReasonDisconnected()
    }

    fun map(dto: CallDiscardReasonHungUp): TdApi.CallDiscardReasonHungUp {
        return TdApi.CallDiscardReasonHungUp()
    }

    fun map(dto: CallDiscardReasonUpgradeToGroupCall): TdApi.CallDiscardReasonUpgradeToGroupCall {
        return TdApi.CallDiscardReasonUpgradeToGroupCall(
            inviteLink = dto.inviteLink,
        )
    }

    fun map(dto: TdApi.CallId): CallId {
        return CallId(
            id = dto.id,
        )
    }

    fun map(dto: CallId): TdApi.CallId {
        return TdApi.CallId(
            id = dto.id,
        )
    }

    fun map(dto: TdApi.CallProblem): CallProblem {
        when (dto) {
            is TdApi.CallProblemEcho -> return map(dto)
            is TdApi.CallProblemNoise -> return map(dto)
            is TdApi.CallProblemInterruptions -> return map(dto)
            is TdApi.CallProblemDistortedSpeech -> return map(dto)
            is TdApi.CallProblemSilentLocal -> return map(dto)
            is TdApi.CallProblemSilentRemote -> return map(dto)
            is TdApi.CallProblemDropped -> return map(dto)
            is TdApi.CallProblemDistortedVideo -> return map(dto)
            is TdApi.CallProblemPixelatedVideo -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.CallProblemEcho): CallProblemEcho {
        return CallProblemEcho()
    }

    fun map(dto: TdApi.CallProblemNoise): CallProblemNoise {
        return CallProblemNoise()
    }

    fun map(dto: TdApi.CallProblemInterruptions): CallProblemInterruptions {
        return CallProblemInterruptions()
    }

    fun map(dto: TdApi.CallProblemDistortedSpeech): CallProblemDistortedSpeech {
        return CallProblemDistortedSpeech()
    }

    fun map(dto: TdApi.CallProblemSilentLocal): CallProblemSilentLocal {
        return CallProblemSilentLocal()
    }

    fun map(dto: TdApi.CallProblemSilentRemote): CallProblemSilentRemote {
        return CallProblemSilentRemote()
    }

    fun map(dto: TdApi.CallProblemDropped): CallProblemDropped {
        return CallProblemDropped()
    }

    fun map(dto: TdApi.CallProblemDistortedVideo): CallProblemDistortedVideo {
        return CallProblemDistortedVideo()
    }

    fun map(dto: TdApi.CallProblemPixelatedVideo): CallProblemPixelatedVideo {
        return CallProblemPixelatedVideo()
    }

    fun map(dto: CallProblem): TdApi.CallProblem {
        when (dto) {
            is CallProblemEcho -> return map(dto)
            is CallProblemNoise -> return map(dto)
            is CallProblemInterruptions -> return map(dto)
            is CallProblemDistortedSpeech -> return map(dto)
            is CallProblemSilentLocal -> return map(dto)
            is CallProblemSilentRemote -> return map(dto)
            is CallProblemDropped -> return map(dto)
            is CallProblemDistortedVideo -> return map(dto)
            is CallProblemPixelatedVideo -> return map(dto)
        }
    }

    fun map(dto: CallProblemEcho): TdApi.CallProblemEcho {
        return TdApi.CallProblemEcho()
    }

    fun map(dto: CallProblemNoise): TdApi.CallProblemNoise {
        return TdApi.CallProblemNoise()
    }

    fun map(dto: CallProblemInterruptions): TdApi.CallProblemInterruptions {
        return TdApi.CallProblemInterruptions()
    }

    fun map(dto: CallProblemDistortedSpeech): TdApi.CallProblemDistortedSpeech {
        return TdApi.CallProblemDistortedSpeech()
    }

    fun map(dto: CallProblemSilentLocal): TdApi.CallProblemSilentLocal {
        return TdApi.CallProblemSilentLocal()
    }

    fun map(dto: CallProblemSilentRemote): TdApi.CallProblemSilentRemote {
        return TdApi.CallProblemSilentRemote()
    }

    fun map(dto: CallProblemDropped): TdApi.CallProblemDropped {
        return TdApi.CallProblemDropped()
    }

    fun map(dto: CallProblemDistortedVideo): TdApi.CallProblemDistortedVideo {
        return TdApi.CallProblemDistortedVideo()
    }

    fun map(dto: CallProblemPixelatedVideo): TdApi.CallProblemPixelatedVideo {
        return TdApi.CallProblemPixelatedVideo()
    }

    fun map(dto: TdApi.CallProtocol): CallProtocol {
        return CallProtocol(
            udpP2p = dto.udpP2p,
            udpReflector = dto.udpReflector,
            minLayer = dto.minLayer,
            maxLayer = dto.maxLayer,
            libraryVersions = dto.libraryVersions,
        )
    }

    fun map(dto: CallProtocol): TdApi.CallProtocol {
        return TdApi.CallProtocol(
            udpP2p = dto.udpP2p,
            udpReflector = dto.udpReflector,
            minLayer = dto.minLayer,
            maxLayer = dto.maxLayer,
            libraryVersions = dto.libraryVersions,
        )
    }

    fun map(dto: TdApi.CallServer): CallServer {
        return CallServer(
            id = dto.id,
            ipAddress = dto.ipAddress,
            ipv6Address = dto.ipv6Address,
            port = dto.port,
            type = map(dto.type),
        )
    }

    fun map(dto: CallServer): TdApi.CallServer {
        return TdApi.CallServer(
            id = dto.id,
            ipAddress = dto.ipAddress,
            ipv6Address = dto.ipv6Address,
            port = dto.port,
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.CallServerType): CallServerType {
        when (dto) {
            is TdApi.CallServerTypeTelegramReflector -> return map(dto)
            is TdApi.CallServerTypeWebrtc -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.CallServerTypeTelegramReflector): CallServerTypeTelegramReflector {
        return CallServerTypeTelegramReflector(
            peerTag = dto.peerTag,
            isTcp = dto.isTcp,
        )
    }

    fun map(dto: TdApi.CallServerTypeWebrtc): CallServerTypeWebrtc {
        return CallServerTypeWebrtc(
            username = dto.username,
            password = dto.password,
            supportsTurn = dto.supportsTurn,
            supportsStun = dto.supportsStun,
        )
    }

    fun map(dto: CallServerType): TdApi.CallServerType {
        when (dto) {
            is CallServerTypeTelegramReflector -> return map(dto)
            is CallServerTypeWebrtc -> return map(dto)
        }
    }

    fun map(dto: CallServerTypeTelegramReflector): TdApi.CallServerTypeTelegramReflector {
        return TdApi.CallServerTypeTelegramReflector(
            peerTag = dto.peerTag,
            isTcp = dto.isTcp,
        )
    }

    fun map(dto: CallServerTypeWebrtc): TdApi.CallServerTypeWebrtc {
        return TdApi.CallServerTypeWebrtc(
            username = dto.username,
            password = dto.password,
            supportsTurn = dto.supportsTurn,
            supportsStun = dto.supportsStun,
        )
    }

    fun map(dto: TdApi.CallState): CallState {
        when (dto) {
            is TdApi.CallStatePending -> return map(dto)
            is TdApi.CallStateExchangingKeys -> return map(dto)
            is TdApi.CallStateReady -> return map(dto)
            is TdApi.CallStateHangingUp -> return map(dto)
            is TdApi.CallStateDiscarded -> return map(dto)
            is TdApi.CallStateError -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.CallStatePending): CallStatePending {
        return CallStatePending(
            isCreated = dto.isCreated,
            isReceived = dto.isReceived,
        )
    }

    fun map(dto: TdApi.CallStateExchangingKeys): CallStateExchangingKeys {
        return CallStateExchangingKeys()
    }

    fun map(dto: TdApi.CallStateReady): CallStateReady {
        return CallStateReady(
            protocol = map(dto.protocol),
            servers = dto.servers.mapArray { map(it) },
            config = dto.config,
            encryptionKey = dto.encryptionKey,
            emojis = dto.emojis,
            allowP2p = dto.allowP2p,
            isGroupCallSupported = dto.isGroupCallSupported,
            customParameters = dto.customParameters,
        )
    }

    fun map(dto: TdApi.CallStateHangingUp): CallStateHangingUp {
        return CallStateHangingUp()
    }

    fun map(dto: TdApi.CallStateDiscarded): CallStateDiscarded {
        return CallStateDiscarded(
            reason = map(dto.reason),
            needRating = dto.needRating,
            needDebugInformation = dto.needDebugInformation,
            needLog = dto.needLog,
        )
    }

    fun map(dto: TdApi.CallStateError): CallStateError {
        return CallStateError(
            error = map(dto.error),
        )
    }

    fun map(dto: CallState): TdApi.CallState {
        when (dto) {
            is CallStatePending -> return map(dto)
            is CallStateExchangingKeys -> return map(dto)
            is CallStateReady -> return map(dto)
            is CallStateHangingUp -> return map(dto)
            is CallStateDiscarded -> return map(dto)
            is CallStateError -> return map(dto)
        }
    }

    fun map(dto: CallStatePending): TdApi.CallStatePending {
        return TdApi.CallStatePending(
            isCreated = dto.isCreated,
            isReceived = dto.isReceived,
        )
    }

    fun map(dto: CallStateExchangingKeys): TdApi.CallStateExchangingKeys {
        return TdApi.CallStateExchangingKeys()
    }

    fun map(dto: CallStateReady): TdApi.CallStateReady {
        return TdApi.CallStateReady(
            protocol = map(dto.protocol),
            servers = dto.servers.mapArray { map(it) },
            config = dto.config,
            encryptionKey = dto.encryptionKey,
            emojis = dto.emojis,
            allowP2p = dto.allowP2p,
            isGroupCallSupported = dto.isGroupCallSupported,
            customParameters = dto.customParameters,
        )
    }

    fun map(dto: CallStateHangingUp): TdApi.CallStateHangingUp {
        return TdApi.CallStateHangingUp()
    }

    fun map(dto: CallStateDiscarded): TdApi.CallStateDiscarded {
        return TdApi.CallStateDiscarded(
            reason = map(dto.reason),
            needRating = dto.needRating,
            needDebugInformation = dto.needDebugInformation,
            needLog = dto.needLog,
        )
    }

    fun map(dto: CallStateError): TdApi.CallStateError {
        return TdApi.CallStateError(
            error = map(dto.error),
        )
    }

    fun map(dto: TdApi.CallbackQueryAnswer): CallbackQueryAnswer {
        return CallbackQueryAnswer(
            text = dto.text,
            showAlert = dto.showAlert,
            url = dto.url,
        )
    }

    fun map(dto: CallbackQueryAnswer): TdApi.CallbackQueryAnswer {
        return TdApi.CallbackQueryAnswer(
            text = dto.text,
            showAlert = dto.showAlert,
            url = dto.url,
        )
    }

    fun map(dto: TdApi.CallbackQueryPayload): CallbackQueryPayload {
        when (dto) {
            is TdApi.CallbackQueryPayloadData -> return map(dto)
            is TdApi.CallbackQueryPayloadDataWithPassword -> return map(dto)
            is TdApi.CallbackQueryPayloadGame -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.CallbackQueryPayloadData): CallbackQueryPayloadData {
        return CallbackQueryPayloadData(
            data = dto.data,
        )
    }

    fun map(dto: TdApi.CallbackQueryPayloadDataWithPassword): CallbackQueryPayloadDataWithPassword {
        return CallbackQueryPayloadDataWithPassword(
            password = dto.password,
            data = dto.data,
        )
    }

    fun map(dto: TdApi.CallbackQueryPayloadGame): CallbackQueryPayloadGame {
        return CallbackQueryPayloadGame(
            gameShortName = dto.gameShortName,
        )
    }

    fun map(dto: CallbackQueryPayload): TdApi.CallbackQueryPayload {
        when (dto) {
            is CallbackQueryPayloadData -> return map(dto)
            is CallbackQueryPayloadDataWithPassword -> return map(dto)
            is CallbackQueryPayloadGame -> return map(dto)
        }
    }

    fun map(dto: CallbackQueryPayloadData): TdApi.CallbackQueryPayloadData {
        return TdApi.CallbackQueryPayloadData(
            data = dto.data,
        )
    }

    fun map(dto: CallbackQueryPayloadDataWithPassword): TdApi.CallbackQueryPayloadDataWithPassword {
        return TdApi.CallbackQueryPayloadDataWithPassword(
            password = dto.password,
            data = dto.data,
        )
    }

    fun map(dto: CallbackQueryPayloadGame): TdApi.CallbackQueryPayloadGame {
        return TdApi.CallbackQueryPayloadGame(
            gameShortName = dto.gameShortName,
        )
    }

    fun map(dto: TdApi.CanPostStoryResult): CanPostStoryResult {
        when (dto) {
            is TdApi.CanPostStoryResultOk -> return map(dto)
            is TdApi.CanPostStoryResultPremiumNeeded -> return map(dto)
            is TdApi.CanPostStoryResultBoostNeeded -> return map(dto)
            is TdApi.CanPostStoryResultActiveStoryLimitExceeded -> return map(dto)
            is TdApi.CanPostStoryResultWeeklyLimitExceeded -> return map(dto)
            is TdApi.CanPostStoryResultMonthlyLimitExceeded -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.CanPostStoryResultOk): CanPostStoryResultOk {
        return CanPostStoryResultOk(
            storyCount = dto.storyCount,
        )
    }

    fun map(dto: TdApi.CanPostStoryResultPremiumNeeded): CanPostStoryResultPremiumNeeded {
        return CanPostStoryResultPremiumNeeded()
    }

    fun map(dto: TdApi.CanPostStoryResultBoostNeeded): CanPostStoryResultBoostNeeded {
        return CanPostStoryResultBoostNeeded()
    }

    fun map(dto: TdApi.CanPostStoryResultActiveStoryLimitExceeded): CanPostStoryResultActiveStoryLimitExceeded {
        return CanPostStoryResultActiveStoryLimitExceeded()
    }

    fun map(dto: TdApi.CanPostStoryResultWeeklyLimitExceeded): CanPostStoryResultWeeklyLimitExceeded {
        return CanPostStoryResultWeeklyLimitExceeded(
            retryAfter = dto.retryAfter,
        )
    }

    fun map(dto: TdApi.CanPostStoryResultMonthlyLimitExceeded): CanPostStoryResultMonthlyLimitExceeded {
        return CanPostStoryResultMonthlyLimitExceeded(
            retryAfter = dto.retryAfter,
        )
    }

    fun map(dto: CanPostStoryResult): TdApi.CanPostStoryResult {
        when (dto) {
            is CanPostStoryResultOk -> return map(dto)
            is CanPostStoryResultPremiumNeeded -> return map(dto)
            is CanPostStoryResultBoostNeeded -> return map(dto)
            is CanPostStoryResultActiveStoryLimitExceeded -> return map(dto)
            is CanPostStoryResultWeeklyLimitExceeded -> return map(dto)
            is CanPostStoryResultMonthlyLimitExceeded -> return map(dto)
        }
    }

    fun map(dto: CanPostStoryResultOk): TdApi.CanPostStoryResultOk {
        return TdApi.CanPostStoryResultOk(
            storyCount = dto.storyCount,
        )
    }

    fun map(dto: CanPostStoryResultPremiumNeeded): TdApi.CanPostStoryResultPremiumNeeded {
        return TdApi.CanPostStoryResultPremiumNeeded()
    }

    fun map(dto: CanPostStoryResultBoostNeeded): TdApi.CanPostStoryResultBoostNeeded {
        return TdApi.CanPostStoryResultBoostNeeded()
    }

    fun map(dto: CanPostStoryResultActiveStoryLimitExceeded): TdApi.CanPostStoryResultActiveStoryLimitExceeded {
        return TdApi.CanPostStoryResultActiveStoryLimitExceeded()
    }

    fun map(dto: CanPostStoryResultWeeklyLimitExceeded): TdApi.CanPostStoryResultWeeklyLimitExceeded {
        return TdApi.CanPostStoryResultWeeklyLimitExceeded(
            retryAfter = dto.retryAfter,
        )
    }

    fun map(dto: CanPostStoryResultMonthlyLimitExceeded): TdApi.CanPostStoryResultMonthlyLimitExceeded {
        return TdApi.CanPostStoryResultMonthlyLimitExceeded(
            retryAfter = dto.retryAfter,
        )
    }

    fun map(dto: TdApi.CanSendMessageToUserResult): CanSendMessageToUserResult {
        when (dto) {
            is TdApi.CanSendMessageToUserResultOk -> return map(dto)
            is TdApi.CanSendMessageToUserResultUserHasPaidMessages -> return map(dto)
            is TdApi.CanSendMessageToUserResultUserIsDeleted -> return map(dto)
            is TdApi.CanSendMessageToUserResultUserRestrictsNewChats -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.CanSendMessageToUserResultOk): CanSendMessageToUserResultOk {
        return CanSendMessageToUserResultOk()
    }

    fun map(dto: TdApi.CanSendMessageToUserResultUserHasPaidMessages): CanSendMessageToUserResultUserHasPaidMessages {
        return CanSendMessageToUserResultUserHasPaidMessages(
            outgoingPaidMessageStarCount = dto.outgoingPaidMessageStarCount,
        )
    }

    fun map(dto: TdApi.CanSendMessageToUserResultUserIsDeleted): CanSendMessageToUserResultUserIsDeleted {
        return CanSendMessageToUserResultUserIsDeleted()
    }

    fun map(dto: TdApi.CanSendMessageToUserResultUserRestrictsNewChats): CanSendMessageToUserResultUserRestrictsNewChats {
        return CanSendMessageToUserResultUserRestrictsNewChats()
    }

    fun map(dto: CanSendMessageToUserResult): TdApi.CanSendMessageToUserResult {
        when (dto) {
            is CanSendMessageToUserResultOk -> return map(dto)
            is CanSendMessageToUserResultUserHasPaidMessages -> return map(dto)
            is CanSendMessageToUserResultUserIsDeleted -> return map(dto)
            is CanSendMessageToUserResultUserRestrictsNewChats -> return map(dto)
        }
    }

    fun map(dto: CanSendMessageToUserResultOk): TdApi.CanSendMessageToUserResultOk {
        return TdApi.CanSendMessageToUserResultOk()
    }

    fun map(dto: CanSendMessageToUserResultUserHasPaidMessages): TdApi.CanSendMessageToUserResultUserHasPaidMessages {
        return TdApi.CanSendMessageToUserResultUserHasPaidMessages(
            outgoingPaidMessageStarCount = dto.outgoingPaidMessageStarCount,
        )
    }

    fun map(dto: CanSendMessageToUserResultUserIsDeleted): TdApi.CanSendMessageToUserResultUserIsDeleted {
        return TdApi.CanSendMessageToUserResultUserIsDeleted()
    }

    fun map(dto: CanSendMessageToUserResultUserRestrictsNewChats): TdApi.CanSendMessageToUserResultUserRestrictsNewChats {
        return TdApi.CanSendMessageToUserResultUserRestrictsNewChats()
    }

    fun map(dto: TdApi.CanTransferOwnershipResult): CanTransferOwnershipResult {
        when (dto) {
            is TdApi.CanTransferOwnershipResultOk -> return map(dto)
            is TdApi.CanTransferOwnershipResultPasswordNeeded -> return map(dto)
            is TdApi.CanTransferOwnershipResultPasswordTooFresh -> return map(dto)
            is TdApi.CanTransferOwnershipResultSessionTooFresh -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.CanTransferOwnershipResultOk): CanTransferOwnershipResultOk {
        return CanTransferOwnershipResultOk()
    }

    fun map(dto: TdApi.CanTransferOwnershipResultPasswordNeeded): CanTransferOwnershipResultPasswordNeeded {
        return CanTransferOwnershipResultPasswordNeeded()
    }

    fun map(dto: TdApi.CanTransferOwnershipResultPasswordTooFresh): CanTransferOwnershipResultPasswordTooFresh {
        return CanTransferOwnershipResultPasswordTooFresh(
            retryAfter = dto.retryAfter,
        )
    }

    fun map(dto: TdApi.CanTransferOwnershipResultSessionTooFresh): CanTransferOwnershipResultSessionTooFresh {
        return CanTransferOwnershipResultSessionTooFresh(
            retryAfter = dto.retryAfter,
        )
    }

    fun map(dto: CanTransferOwnershipResult): TdApi.CanTransferOwnershipResult {
        when (dto) {
            is CanTransferOwnershipResultOk -> return map(dto)
            is CanTransferOwnershipResultPasswordNeeded -> return map(dto)
            is CanTransferOwnershipResultPasswordTooFresh -> return map(dto)
            is CanTransferOwnershipResultSessionTooFresh -> return map(dto)
        }
    }

    fun map(dto: CanTransferOwnershipResultOk): TdApi.CanTransferOwnershipResultOk {
        return TdApi.CanTransferOwnershipResultOk()
    }

    fun map(dto: CanTransferOwnershipResultPasswordNeeded): TdApi.CanTransferOwnershipResultPasswordNeeded {
        return TdApi.CanTransferOwnershipResultPasswordNeeded()
    }

    fun map(dto: CanTransferOwnershipResultPasswordTooFresh): TdApi.CanTransferOwnershipResultPasswordTooFresh {
        return TdApi.CanTransferOwnershipResultPasswordTooFresh(
            retryAfter = dto.retryAfter,
        )
    }

    fun map(dto: CanTransferOwnershipResultSessionTooFresh): TdApi.CanTransferOwnershipResultSessionTooFresh {
        return TdApi.CanTransferOwnershipResultSessionTooFresh(
            retryAfter = dto.retryAfter,
        )
    }

    fun map(dto: TdApi.Chat): Chat {
        return Chat(
            id = dto.id,
            type = map(dto.type),
            title = dto.title,
            photo = dto.photo?.let { map(it) },
            accentColorId = dto.accentColorId,
            backgroundCustomEmojiId = dto.backgroundCustomEmojiId,
            profileAccentColorId = dto.profileAccentColorId,
            profileBackgroundCustomEmojiId = dto.profileBackgroundCustomEmojiId,
            permissions = map(dto.permissions),
            lastMessage = dto.lastMessage?.let { map(it) },
            positions = dto.positions.mapArray { map(it) },
            chatLists = dto.chatLists.mapArray { map(it) },
            messageSenderId = dto.messageSenderId?.let { map(it) },
            blockList = dto.blockList?.let { map(it) },
            hasProtectedContent = dto.hasProtectedContent,
            isTranslatable = dto.isTranslatable,
            isMarkedAsUnread = dto.isMarkedAsUnread,
            viewAsTopics = dto.viewAsTopics,
            hasScheduledMessages = dto.hasScheduledMessages,
            canBeDeletedOnlyForSelf = dto.canBeDeletedOnlyForSelf,
            canBeDeletedForAllUsers = dto.canBeDeletedForAllUsers,
            canBeReported = dto.canBeReported,
            defaultDisableNotification = dto.defaultDisableNotification,
            unreadCount = dto.unreadCount,
            lastReadInboxMessageId = dto.lastReadInboxMessageId,
            lastReadOutboxMessageId = dto.lastReadOutboxMessageId,
            unreadMentionCount = dto.unreadMentionCount,
            unreadReactionCount = dto.unreadReactionCount,
            notificationSettings = map(dto.notificationSettings),
            availableReactions = map(dto.availableReactions),
            messageAutoDeleteTime = dto.messageAutoDeleteTime,
            emojiStatus = dto.emojiStatus?.let { map(it) },
            background = dto.background?.let { map(it) },
            themeName = dto.themeName,
            actionBar = dto.actionBar?.let { map(it) },
            businessBotManageBar = dto.businessBotManageBar?.let { map(it) },
            videoChat = map(dto.videoChat),
            pendingJoinRequests = dto.pendingJoinRequests?.let { map(it) },
            replyMarkupMessageId = dto.replyMarkupMessageId,
            draftMessage = dto.draftMessage?.let { map(it) },
            clientData = dto.clientData,
        )
    }

    fun map(dto: Chat): TdApi.Chat {
        return TdApi.Chat(
            id = dto.id,
            type = map(dto.type),
            title = dto.title,
            photo = dto.photo?.let { map(it) },
            accentColorId = dto.accentColorId,
            backgroundCustomEmojiId = dto.backgroundCustomEmojiId,
            profileAccentColorId = dto.profileAccentColorId,
            profileBackgroundCustomEmojiId = dto.profileBackgroundCustomEmojiId,
            permissions = map(dto.permissions),
            lastMessage = dto.lastMessage?.let { map(it) },
            positions = dto.positions.mapArray { map(it) },
            chatLists = dto.chatLists.mapArray { map(it) },
            messageSenderId = dto.messageSenderId?.let { map(it) },
            blockList = dto.blockList?.let { map(it) },
            hasProtectedContent = dto.hasProtectedContent,
            isTranslatable = dto.isTranslatable,
            isMarkedAsUnread = dto.isMarkedAsUnread,
            viewAsTopics = dto.viewAsTopics,
            hasScheduledMessages = dto.hasScheduledMessages,
            canBeDeletedOnlyForSelf = dto.canBeDeletedOnlyForSelf,
            canBeDeletedForAllUsers = dto.canBeDeletedForAllUsers,
            canBeReported = dto.canBeReported,
            defaultDisableNotification = dto.defaultDisableNotification,
            unreadCount = dto.unreadCount,
            lastReadInboxMessageId = dto.lastReadInboxMessageId,
            lastReadOutboxMessageId = dto.lastReadOutboxMessageId,
            unreadMentionCount = dto.unreadMentionCount,
            unreadReactionCount = dto.unreadReactionCount,
            notificationSettings = map(dto.notificationSettings),
            availableReactions = map(dto.availableReactions),
            messageAutoDeleteTime = dto.messageAutoDeleteTime,
            emojiStatus = dto.emojiStatus?.let { map(it) },
            background = dto.background?.let { map(it) },
            themeName = dto.themeName,
            actionBar = dto.actionBar?.let { map(it) },
            businessBotManageBar = dto.businessBotManageBar?.let { map(it) },
            videoChat = map(dto.videoChat),
            pendingJoinRequests = dto.pendingJoinRequests?.let { map(it) },
            replyMarkupMessageId = dto.replyMarkupMessageId,
            draftMessage = dto.draftMessage?.let { map(it) },
            clientData = dto.clientData,
        )
    }

    fun map(dto: TdApi.ChatAction): ChatAction {
        when (dto) {
            is TdApi.ChatActionTyping -> return map(dto)
            is TdApi.ChatActionRecordingVideo -> return map(dto)
            is TdApi.ChatActionUploadingVideo -> return map(dto)
            is TdApi.ChatActionRecordingVoiceNote -> return map(dto)
            is TdApi.ChatActionUploadingVoiceNote -> return map(dto)
            is TdApi.ChatActionUploadingPhoto -> return map(dto)
            is TdApi.ChatActionUploadingDocument -> return map(dto)
            is TdApi.ChatActionChoosingSticker -> return map(dto)
            is TdApi.ChatActionChoosingLocation -> return map(dto)
            is TdApi.ChatActionChoosingContact -> return map(dto)
            is TdApi.ChatActionStartPlayingGame -> return map(dto)
            is TdApi.ChatActionRecordingVideoNote -> return map(dto)
            is TdApi.ChatActionUploadingVideoNote -> return map(dto)
            is TdApi.ChatActionWatchingAnimations -> return map(dto)
            is TdApi.ChatActionCancel -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ChatActionTyping): ChatActionTyping {
        return ChatActionTyping()
    }

    fun map(dto: TdApi.ChatActionRecordingVideo): ChatActionRecordingVideo {
        return ChatActionRecordingVideo()
    }

    fun map(dto: TdApi.ChatActionUploadingVideo): ChatActionUploadingVideo {
        return ChatActionUploadingVideo(
            progress = dto.progress,
        )
    }

    fun map(dto: TdApi.ChatActionRecordingVoiceNote): ChatActionRecordingVoiceNote {
        return ChatActionRecordingVoiceNote()
    }

    fun map(dto: TdApi.ChatActionUploadingVoiceNote): ChatActionUploadingVoiceNote {
        return ChatActionUploadingVoiceNote(
            progress = dto.progress,
        )
    }

    fun map(dto: TdApi.ChatActionUploadingPhoto): ChatActionUploadingPhoto {
        return ChatActionUploadingPhoto(
            progress = dto.progress,
        )
    }

    fun map(dto: TdApi.ChatActionUploadingDocument): ChatActionUploadingDocument {
        return ChatActionUploadingDocument(
            progress = dto.progress,
        )
    }

    fun map(dto: TdApi.ChatActionChoosingSticker): ChatActionChoosingSticker {
        return ChatActionChoosingSticker()
    }

    fun map(dto: TdApi.ChatActionChoosingLocation): ChatActionChoosingLocation {
        return ChatActionChoosingLocation()
    }

    fun map(dto: TdApi.ChatActionChoosingContact): ChatActionChoosingContact {
        return ChatActionChoosingContact()
    }

    fun map(dto: TdApi.ChatActionStartPlayingGame): ChatActionStartPlayingGame {
        return ChatActionStartPlayingGame()
    }

    fun map(dto: TdApi.ChatActionRecordingVideoNote): ChatActionRecordingVideoNote {
        return ChatActionRecordingVideoNote()
    }

    fun map(dto: TdApi.ChatActionUploadingVideoNote): ChatActionUploadingVideoNote {
        return ChatActionUploadingVideoNote(
            progress = dto.progress,
        )
    }

    fun map(dto: TdApi.ChatActionWatchingAnimations): ChatActionWatchingAnimations {
        return ChatActionWatchingAnimations(
            emoji = dto.emoji,
        )
    }

    fun map(dto: TdApi.ChatActionCancel): ChatActionCancel {
        return ChatActionCancel()
    }

    fun map(dto: ChatAction): TdApi.ChatAction {
        when (dto) {
            is ChatActionTyping -> return map(dto)
            is ChatActionRecordingVideo -> return map(dto)
            is ChatActionUploadingVideo -> return map(dto)
            is ChatActionRecordingVoiceNote -> return map(dto)
            is ChatActionUploadingVoiceNote -> return map(dto)
            is ChatActionUploadingPhoto -> return map(dto)
            is ChatActionUploadingDocument -> return map(dto)
            is ChatActionChoosingSticker -> return map(dto)
            is ChatActionChoosingLocation -> return map(dto)
            is ChatActionChoosingContact -> return map(dto)
            is ChatActionStartPlayingGame -> return map(dto)
            is ChatActionRecordingVideoNote -> return map(dto)
            is ChatActionUploadingVideoNote -> return map(dto)
            is ChatActionWatchingAnimations -> return map(dto)
            is ChatActionCancel -> return map(dto)
        }
    }

    fun map(dto: ChatActionTyping): TdApi.ChatActionTyping {
        return TdApi.ChatActionTyping()
    }

    fun map(dto: ChatActionRecordingVideo): TdApi.ChatActionRecordingVideo {
        return TdApi.ChatActionRecordingVideo()
    }

    fun map(dto: ChatActionUploadingVideo): TdApi.ChatActionUploadingVideo {
        return TdApi.ChatActionUploadingVideo(
            progress = dto.progress,
        )
    }

    fun map(dto: ChatActionRecordingVoiceNote): TdApi.ChatActionRecordingVoiceNote {
        return TdApi.ChatActionRecordingVoiceNote()
    }

    fun map(dto: ChatActionUploadingVoiceNote): TdApi.ChatActionUploadingVoiceNote {
        return TdApi.ChatActionUploadingVoiceNote(
            progress = dto.progress,
        )
    }

    fun map(dto: ChatActionUploadingPhoto): TdApi.ChatActionUploadingPhoto {
        return TdApi.ChatActionUploadingPhoto(
            progress = dto.progress,
        )
    }

    fun map(dto: ChatActionUploadingDocument): TdApi.ChatActionUploadingDocument {
        return TdApi.ChatActionUploadingDocument(
            progress = dto.progress,
        )
    }

    fun map(dto: ChatActionChoosingSticker): TdApi.ChatActionChoosingSticker {
        return TdApi.ChatActionChoosingSticker()
    }

    fun map(dto: ChatActionChoosingLocation): TdApi.ChatActionChoosingLocation {
        return TdApi.ChatActionChoosingLocation()
    }

    fun map(dto: ChatActionChoosingContact): TdApi.ChatActionChoosingContact {
        return TdApi.ChatActionChoosingContact()
    }

    fun map(dto: ChatActionStartPlayingGame): TdApi.ChatActionStartPlayingGame {
        return TdApi.ChatActionStartPlayingGame()
    }

    fun map(dto: ChatActionRecordingVideoNote): TdApi.ChatActionRecordingVideoNote {
        return TdApi.ChatActionRecordingVideoNote()
    }

    fun map(dto: ChatActionUploadingVideoNote): TdApi.ChatActionUploadingVideoNote {
        return TdApi.ChatActionUploadingVideoNote(
            progress = dto.progress,
        )
    }

    fun map(dto: ChatActionWatchingAnimations): TdApi.ChatActionWatchingAnimations {
        return TdApi.ChatActionWatchingAnimations(
            emoji = dto.emoji,
        )
    }

    fun map(dto: ChatActionCancel): TdApi.ChatActionCancel {
        return TdApi.ChatActionCancel()
    }

    fun map(dto: TdApi.ChatActionBar): ChatActionBar {
        when (dto) {
            is TdApi.ChatActionBarReportSpam -> return map(dto)
            is TdApi.ChatActionBarInviteMembers -> return map(dto)
            is TdApi.ChatActionBarReportAddBlock -> return map(dto)
            is TdApi.ChatActionBarAddContact -> return map(dto)
            is TdApi.ChatActionBarSharePhoneNumber -> return map(dto)
            is TdApi.ChatActionBarJoinRequest -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ChatActionBarReportSpam): ChatActionBarReportSpam {
        return ChatActionBarReportSpam(
            canUnarchive = dto.canUnarchive,
        )
    }

    fun map(dto: TdApi.ChatActionBarInviteMembers): ChatActionBarInviteMembers {
        return ChatActionBarInviteMembers()
    }

    fun map(dto: TdApi.ChatActionBarReportAddBlock): ChatActionBarReportAddBlock {
        return ChatActionBarReportAddBlock(
            canUnarchive = dto.canUnarchive,
            accountInfo = dto.accountInfo?.let { map(it) },
        )
    }

    fun map(dto: TdApi.ChatActionBarAddContact): ChatActionBarAddContact {
        return ChatActionBarAddContact()
    }

    fun map(dto: TdApi.ChatActionBarSharePhoneNumber): ChatActionBarSharePhoneNumber {
        return ChatActionBarSharePhoneNumber()
    }

    fun map(dto: TdApi.ChatActionBarJoinRequest): ChatActionBarJoinRequest {
        return ChatActionBarJoinRequest(
            title = dto.title,
            isChannel = dto.isChannel,
            requestDate = dto.requestDate,
        )
    }

    fun map(dto: ChatActionBar): TdApi.ChatActionBar {
        when (dto) {
            is ChatActionBarReportSpam -> return map(dto)
            is ChatActionBarInviteMembers -> return map(dto)
            is ChatActionBarReportAddBlock -> return map(dto)
            is ChatActionBarAddContact -> return map(dto)
            is ChatActionBarSharePhoneNumber -> return map(dto)
            is ChatActionBarJoinRequest -> return map(dto)
        }
    }

    fun map(dto: ChatActionBarReportSpam): TdApi.ChatActionBarReportSpam {
        return TdApi.ChatActionBarReportSpam(
            canUnarchive = dto.canUnarchive,
        )
    }

    fun map(dto: ChatActionBarInviteMembers): TdApi.ChatActionBarInviteMembers {
        return TdApi.ChatActionBarInviteMembers()
    }

    fun map(dto: ChatActionBarReportAddBlock): TdApi.ChatActionBarReportAddBlock {
        return TdApi.ChatActionBarReportAddBlock(
            canUnarchive = dto.canUnarchive,
            accountInfo = dto.accountInfo?.let { map(it) },
        )
    }

    fun map(dto: ChatActionBarAddContact): TdApi.ChatActionBarAddContact {
        return TdApi.ChatActionBarAddContact()
    }

    fun map(dto: ChatActionBarSharePhoneNumber): TdApi.ChatActionBarSharePhoneNumber {
        return TdApi.ChatActionBarSharePhoneNumber()
    }

    fun map(dto: ChatActionBarJoinRequest): TdApi.ChatActionBarJoinRequest {
        return TdApi.ChatActionBarJoinRequest(
            title = dto.title,
            isChannel = dto.isChannel,
            requestDate = dto.requestDate,
        )
    }

    fun map(dto: TdApi.ChatActiveStories): ChatActiveStories {
        return ChatActiveStories(
            chatId = dto.chatId,
            list = dto.list?.let { map(it) },
            order = dto.order,
            maxReadStoryId = dto.maxReadStoryId,
            stories = dto.stories.mapArray { map(it) },
        )
    }

    fun map(dto: ChatActiveStories): TdApi.ChatActiveStories {
        return TdApi.ChatActiveStories(
            chatId = dto.chatId,
            list = dto.list?.let { map(it) },
            order = dto.order,
            maxReadStoryId = dto.maxReadStoryId,
            stories = dto.stories.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatAdministrator): ChatAdministrator {
        return ChatAdministrator(
            userId = dto.userId,
            customTitle = dto.customTitle,
            isOwner = dto.isOwner,
        )
    }

    fun map(dto: ChatAdministrator): TdApi.ChatAdministrator {
        return TdApi.ChatAdministrator(
            userId = dto.userId,
            customTitle = dto.customTitle,
            isOwner = dto.isOwner,
        )
    }

    fun map(dto: TdApi.ChatAdministratorRights): ChatAdministratorRights {
        return ChatAdministratorRights(
            canManageChat = dto.canManageChat,
            canChangeInfo = dto.canChangeInfo,
            canPostMessages = dto.canPostMessages,
            canEditMessages = dto.canEditMessages,
            canDeleteMessages = dto.canDeleteMessages,
            canInviteUsers = dto.canInviteUsers,
            canRestrictMembers = dto.canRestrictMembers,
            canPinMessages = dto.canPinMessages,
            canManageTopics = dto.canManageTopics,
            canPromoteMembers = dto.canPromoteMembers,
            canManageVideoChats = dto.canManageVideoChats,
            canPostStories = dto.canPostStories,
            canEditStories = dto.canEditStories,
            canDeleteStories = dto.canDeleteStories,
            isAnonymous = dto.isAnonymous,
        )
    }

    fun map(dto: ChatAdministratorRights): TdApi.ChatAdministratorRights {
        return TdApi.ChatAdministratorRights(
            canManageChat = dto.canManageChat,
            canChangeInfo = dto.canChangeInfo,
            canPostMessages = dto.canPostMessages,
            canEditMessages = dto.canEditMessages,
            canDeleteMessages = dto.canDeleteMessages,
            canInviteUsers = dto.canInviteUsers,
            canRestrictMembers = dto.canRestrictMembers,
            canPinMessages = dto.canPinMessages,
            canManageTopics = dto.canManageTopics,
            canPromoteMembers = dto.canPromoteMembers,
            canManageVideoChats = dto.canManageVideoChats,
            canPostStories = dto.canPostStories,
            canEditStories = dto.canEditStories,
            canDeleteStories = dto.canDeleteStories,
            isAnonymous = dto.isAnonymous,
        )
    }

    fun map(dto: TdApi.ChatAdministrators): ChatAdministrators {
        return ChatAdministrators(
            administrators = dto.administrators.mapArray { map(it) },
        )
    }

    fun map(dto: ChatAdministrators): TdApi.ChatAdministrators {
        return TdApi.ChatAdministrators(
            administrators = dto.administrators.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatAvailableReactions): ChatAvailableReactions {
        when (dto) {
            is TdApi.ChatAvailableReactionsAll -> return map(dto)
            is TdApi.ChatAvailableReactionsSome -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ChatAvailableReactionsAll): ChatAvailableReactionsAll {
        return ChatAvailableReactionsAll(
            maxReactionCount = dto.maxReactionCount,
        )
    }

    fun map(dto: TdApi.ChatAvailableReactionsSome): ChatAvailableReactionsSome {
        return ChatAvailableReactionsSome(
            reactions = dto.reactions.mapArray { map(it) },
            maxReactionCount = dto.maxReactionCount,
        )
    }

    fun map(dto: ChatAvailableReactions): TdApi.ChatAvailableReactions {
        when (dto) {
            is ChatAvailableReactionsAll -> return map(dto)
            is ChatAvailableReactionsSome -> return map(dto)
        }
    }

    fun map(dto: ChatAvailableReactionsAll): TdApi.ChatAvailableReactionsAll {
        return TdApi.ChatAvailableReactionsAll(
            maxReactionCount = dto.maxReactionCount,
        )
    }

    fun map(dto: ChatAvailableReactionsSome): TdApi.ChatAvailableReactionsSome {
        return TdApi.ChatAvailableReactionsSome(
            reactions = dto.reactions.mapArray { map(it) },
            maxReactionCount = dto.maxReactionCount,
        )
    }

    fun map(dto: TdApi.ChatBackground): ChatBackground {
        return ChatBackground(
            background = map(dto.background),
            darkThemeDimming = dto.darkThemeDimming,
        )
    }

    fun map(dto: ChatBackground): TdApi.ChatBackground {
        return TdApi.ChatBackground(
            background = map(dto.background),
            darkThemeDimming = dto.darkThemeDimming,
        )
    }

    fun map(dto: TdApi.ChatBoost): ChatBoost {
        return ChatBoost(
            id = dto.id,
            count = dto.count,
            source = map(dto.source),
            startDate = dto.startDate,
            expirationDate = dto.expirationDate,
        )
    }

    fun map(dto: ChatBoost): TdApi.ChatBoost {
        return TdApi.ChatBoost(
            id = dto.id,
            count = dto.count,
            source = map(dto.source),
            startDate = dto.startDate,
            expirationDate = dto.expirationDate,
        )
    }

    fun map(dto: TdApi.ChatBoostFeatures): ChatBoostFeatures {
        return ChatBoostFeatures(
            features = dto.features.mapArray { map(it) },
            minProfileBackgroundCustomEmojiBoostLevel = dto.minProfileBackgroundCustomEmojiBoostLevel,
            minBackgroundCustomEmojiBoostLevel = dto.minBackgroundCustomEmojiBoostLevel,
            minEmojiStatusBoostLevel = dto.minEmojiStatusBoostLevel,
            minChatThemeBackgroundBoostLevel = dto.minChatThemeBackgroundBoostLevel,
            minCustomBackgroundBoostLevel = dto.minCustomBackgroundBoostLevel,
            minCustomEmojiStickerSetBoostLevel = dto.minCustomEmojiStickerSetBoostLevel,
            minAutomaticTranslationBoostLevel = dto.minAutomaticTranslationBoostLevel,
            minSpeechRecognitionBoostLevel = dto.minSpeechRecognitionBoostLevel,
            minSponsoredMessageDisableBoostLevel = dto.minSponsoredMessageDisableBoostLevel,
        )
    }

    fun map(dto: ChatBoostFeatures): TdApi.ChatBoostFeatures {
        return TdApi.ChatBoostFeatures(
            features = dto.features.mapArray { map(it) },
            minProfileBackgroundCustomEmojiBoostLevel = dto.minProfileBackgroundCustomEmojiBoostLevel,
            minBackgroundCustomEmojiBoostLevel = dto.minBackgroundCustomEmojiBoostLevel,
            minEmojiStatusBoostLevel = dto.minEmojiStatusBoostLevel,
            minChatThemeBackgroundBoostLevel = dto.minChatThemeBackgroundBoostLevel,
            minCustomBackgroundBoostLevel = dto.minCustomBackgroundBoostLevel,
            minCustomEmojiStickerSetBoostLevel = dto.minCustomEmojiStickerSetBoostLevel,
            minAutomaticTranslationBoostLevel = dto.minAutomaticTranslationBoostLevel,
            minSpeechRecognitionBoostLevel = dto.minSpeechRecognitionBoostLevel,
            minSponsoredMessageDisableBoostLevel = dto.minSponsoredMessageDisableBoostLevel,
        )
    }

    fun map(dto: TdApi.ChatBoostLevelFeatures): ChatBoostLevelFeatures {
        return ChatBoostLevelFeatures(
            level = dto.level,
            storyPerDayCount = dto.storyPerDayCount,
            customEmojiReactionCount = dto.customEmojiReactionCount,
            titleColorCount = dto.titleColorCount,
            profileAccentColorCount = dto.profileAccentColorCount,
            canSetProfileBackgroundCustomEmoji = dto.canSetProfileBackgroundCustomEmoji,
            accentColorCount = dto.accentColorCount,
            canSetBackgroundCustomEmoji = dto.canSetBackgroundCustomEmoji,
            canSetEmojiStatus = dto.canSetEmojiStatus,
            chatThemeBackgroundCount = dto.chatThemeBackgroundCount,
            canSetCustomBackground = dto.canSetCustomBackground,
            canSetCustomEmojiStickerSet = dto.canSetCustomEmojiStickerSet,
            canEnableAutomaticTranslation = dto.canEnableAutomaticTranslation,
            canRecognizeSpeech = dto.canRecognizeSpeech,
            canDisableSponsoredMessages = dto.canDisableSponsoredMessages,
        )
    }

    fun map(dto: ChatBoostLevelFeatures): TdApi.ChatBoostLevelFeatures {
        return TdApi.ChatBoostLevelFeatures(
            level = dto.level,
            storyPerDayCount = dto.storyPerDayCount,
            customEmojiReactionCount = dto.customEmojiReactionCount,
            titleColorCount = dto.titleColorCount,
            profileAccentColorCount = dto.profileAccentColorCount,
            canSetProfileBackgroundCustomEmoji = dto.canSetProfileBackgroundCustomEmoji,
            accentColorCount = dto.accentColorCount,
            canSetBackgroundCustomEmoji = dto.canSetBackgroundCustomEmoji,
            canSetEmojiStatus = dto.canSetEmojiStatus,
            chatThemeBackgroundCount = dto.chatThemeBackgroundCount,
            canSetCustomBackground = dto.canSetCustomBackground,
            canSetCustomEmojiStickerSet = dto.canSetCustomEmojiStickerSet,
            canEnableAutomaticTranslation = dto.canEnableAutomaticTranslation,
            canRecognizeSpeech = dto.canRecognizeSpeech,
            canDisableSponsoredMessages = dto.canDisableSponsoredMessages,
        )
    }

    fun map(dto: TdApi.ChatBoostLink): ChatBoostLink {
        return ChatBoostLink(
            link = dto.link,
            isPublic = dto.isPublic,
        )
    }

    fun map(dto: ChatBoostLink): TdApi.ChatBoostLink {
        return TdApi.ChatBoostLink(
            link = dto.link,
            isPublic = dto.isPublic,
        )
    }

    fun map(dto: TdApi.ChatBoostLinkInfo): ChatBoostLinkInfo {
        return ChatBoostLinkInfo(
            isPublic = dto.isPublic,
            chatId = dto.chatId,
        )
    }

    fun map(dto: ChatBoostLinkInfo): TdApi.ChatBoostLinkInfo {
        return TdApi.ChatBoostLinkInfo(
            isPublic = dto.isPublic,
            chatId = dto.chatId,
        )
    }

    fun map(dto: TdApi.ChatBoostSlot): ChatBoostSlot {
        return ChatBoostSlot(
            slotId = dto.slotId,
            currentlyBoostedChatId = dto.currentlyBoostedChatId,
            startDate = dto.startDate,
            expirationDate = dto.expirationDate,
            cooldownUntilDate = dto.cooldownUntilDate,
        )
    }

    fun map(dto: ChatBoostSlot): TdApi.ChatBoostSlot {
        return TdApi.ChatBoostSlot(
            slotId = dto.slotId,
            currentlyBoostedChatId = dto.currentlyBoostedChatId,
            startDate = dto.startDate,
            expirationDate = dto.expirationDate,
            cooldownUntilDate = dto.cooldownUntilDate,
        )
    }

    fun map(dto: TdApi.ChatBoostSlots): ChatBoostSlots {
        return ChatBoostSlots(
            slots = dto.slots.mapArray { map(it) },
        )
    }

    fun map(dto: ChatBoostSlots): TdApi.ChatBoostSlots {
        return TdApi.ChatBoostSlots(
            slots = dto.slots.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatBoostSource): ChatBoostSource {
        when (dto) {
            is TdApi.ChatBoostSourceGiftCode -> return map(dto)
            is TdApi.ChatBoostSourceGiveaway -> return map(dto)
            is TdApi.ChatBoostSourcePremium -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ChatBoostSourceGiftCode): ChatBoostSourceGiftCode {
        return ChatBoostSourceGiftCode(
            userId = dto.userId,
            giftCode = dto.giftCode,
        )
    }

    fun map(dto: TdApi.ChatBoostSourceGiveaway): ChatBoostSourceGiveaway {
        return ChatBoostSourceGiveaway(
            userId = dto.userId,
            giftCode = dto.giftCode,
            starCount = dto.starCount,
            giveawayMessageId = dto.giveawayMessageId,
            isUnclaimed = dto.isUnclaimed,
        )
    }

    fun map(dto: TdApi.ChatBoostSourcePremium): ChatBoostSourcePremium {
        return ChatBoostSourcePremium(
            userId = dto.userId,
        )
    }

    fun map(dto: ChatBoostSource): TdApi.ChatBoostSource {
        when (dto) {
            is ChatBoostSourceGiftCode -> return map(dto)
            is ChatBoostSourceGiveaway -> return map(dto)
            is ChatBoostSourcePremium -> return map(dto)
        }
    }

    fun map(dto: ChatBoostSourceGiftCode): TdApi.ChatBoostSourceGiftCode {
        return TdApi.ChatBoostSourceGiftCode(
            userId = dto.userId,
            giftCode = dto.giftCode,
        )
    }

    fun map(dto: ChatBoostSourceGiveaway): TdApi.ChatBoostSourceGiveaway {
        return TdApi.ChatBoostSourceGiveaway(
            userId = dto.userId,
            giftCode = dto.giftCode,
            starCount = dto.starCount,
            giveawayMessageId = dto.giveawayMessageId,
            isUnclaimed = dto.isUnclaimed,
        )
    }

    fun map(dto: ChatBoostSourcePremium): TdApi.ChatBoostSourcePremium {
        return TdApi.ChatBoostSourcePremium(
            userId = dto.userId,
        )
    }

    fun map(dto: TdApi.ChatBoostStatus): ChatBoostStatus {
        return ChatBoostStatus(
            boostUrl = dto.boostUrl,
            appliedSlotIds = dto.appliedSlotIds,
            level = dto.level,
            giftCodeBoostCount = dto.giftCodeBoostCount,
            boostCount = dto.boostCount,
            currentLevelBoostCount = dto.currentLevelBoostCount,
            nextLevelBoostCount = dto.nextLevelBoostCount,
            premiumMemberCount = dto.premiumMemberCount,
            premiumMemberPercentage = dto.premiumMemberPercentage,
            prepaidGiveaways = dto.prepaidGiveaways.mapArray { map(it) },
        )
    }

    fun map(dto: ChatBoostStatus): TdApi.ChatBoostStatus {
        return TdApi.ChatBoostStatus(
            boostUrl = dto.boostUrl,
            appliedSlotIds = dto.appliedSlotIds,
            level = dto.level,
            giftCodeBoostCount = dto.giftCodeBoostCount,
            boostCount = dto.boostCount,
            currentLevelBoostCount = dto.currentLevelBoostCount,
            nextLevelBoostCount = dto.nextLevelBoostCount,
            premiumMemberCount = dto.premiumMemberCount,
            premiumMemberPercentage = dto.premiumMemberPercentage,
            prepaidGiveaways = dto.prepaidGiveaways.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatEvent): ChatEvent {
        return ChatEvent(
            id = dto.id,
            date = dto.date,
            memberId = map(dto.memberId),
            action = map(dto.action),
        )
    }

    fun map(dto: ChatEvent): TdApi.ChatEvent {
        return TdApi.ChatEvent(
            id = dto.id,
            date = dto.date,
            memberId = map(dto.memberId),
            action = map(dto.action),
        )
    }

    fun map(dto: TdApi.ChatEventAction): ChatEventAction {
        when (dto) {
            is TdApi.ChatEventMessageEdited -> return map(dto)
            is TdApi.ChatEventMessageDeleted -> return map(dto)
            is TdApi.ChatEventMessagePinned -> return map(dto)
            is TdApi.ChatEventMessageUnpinned -> return map(dto)
            is TdApi.ChatEventPollStopped -> return map(dto)
            is TdApi.ChatEventMemberJoined -> return map(dto)
            is TdApi.ChatEventMemberJoinedByInviteLink -> return map(dto)
            is TdApi.ChatEventMemberJoinedByRequest -> return map(dto)
            is TdApi.ChatEventMemberInvited -> return map(dto)
            is TdApi.ChatEventMemberLeft -> return map(dto)
            is TdApi.ChatEventMemberPromoted -> return map(dto)
            is TdApi.ChatEventMemberRestricted -> return map(dto)
            is TdApi.ChatEventMemberSubscriptionExtended -> return map(dto)
            is TdApi.ChatEventAvailableReactionsChanged -> return map(dto)
            is TdApi.ChatEventBackgroundChanged -> return map(dto)
            is TdApi.ChatEventDescriptionChanged -> return map(dto)
            is TdApi.ChatEventEmojiStatusChanged -> return map(dto)
            is TdApi.ChatEventLinkedChatChanged -> return map(dto)
            is TdApi.ChatEventLocationChanged -> return map(dto)
            is TdApi.ChatEventMessageAutoDeleteTimeChanged -> return map(dto)
            is TdApi.ChatEventPermissionsChanged -> return map(dto)
            is TdApi.ChatEventPhotoChanged -> return map(dto)
            is TdApi.ChatEventSlowModeDelayChanged -> return map(dto)
            is TdApi.ChatEventStickerSetChanged -> return map(dto)
            is TdApi.ChatEventCustomEmojiStickerSetChanged -> return map(dto)
            is TdApi.ChatEventTitleChanged -> return map(dto)
            is TdApi.ChatEventUsernameChanged -> return map(dto)
            is TdApi.ChatEventActiveUsernamesChanged -> return map(dto)
            is TdApi.ChatEventAccentColorChanged -> return map(dto)
            is TdApi.ChatEventProfileAccentColorChanged -> return map(dto)
            is TdApi.ChatEventHasProtectedContentToggled -> return map(dto)
            is TdApi.ChatEventInvitesToggled -> return map(dto)
            is TdApi.ChatEventIsAllHistoryAvailableToggled -> return map(dto)
            is TdApi.ChatEventHasAggressiveAntiSpamEnabledToggled -> return map(dto)
            is TdApi.ChatEventSignMessagesToggled -> return map(dto)
            is TdApi.ChatEventShowMessageSenderToggled -> return map(dto)
            is TdApi.ChatEventAutomaticTranslationToggled -> return map(dto)
            is TdApi.ChatEventInviteLinkEdited -> return map(dto)
            is TdApi.ChatEventInviteLinkRevoked -> return map(dto)
            is TdApi.ChatEventInviteLinkDeleted -> return map(dto)
            is TdApi.ChatEventVideoChatCreated -> return map(dto)
            is TdApi.ChatEventVideoChatEnded -> return map(dto)
            is TdApi.ChatEventVideoChatMuteNewParticipantsToggled -> return map(dto)
            is TdApi.ChatEventVideoChatParticipantIsMutedToggled -> return map(dto)
            is TdApi.ChatEventVideoChatParticipantVolumeLevelChanged -> return map(dto)
            is TdApi.ChatEventIsForumToggled -> return map(dto)
            is TdApi.ChatEventForumTopicCreated -> return map(dto)
            is TdApi.ChatEventForumTopicEdited -> return map(dto)
            is TdApi.ChatEventForumTopicToggleIsClosed -> return map(dto)
            is TdApi.ChatEventForumTopicToggleIsHidden -> return map(dto)
            is TdApi.ChatEventForumTopicDeleted -> return map(dto)
            is TdApi.ChatEventForumTopicPinned -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ChatEventMessageEdited): ChatEventMessageEdited {
        return ChatEventMessageEdited(
            oldMessage = map(dto.oldMessage),
            newMessage = map(dto.newMessage),
        )
    }

    fun map(dto: TdApi.ChatEventMessageDeleted): ChatEventMessageDeleted {
        return ChatEventMessageDeleted(
            message = map(dto.message),
            canReportAntiSpamFalsePositive = dto.canReportAntiSpamFalsePositive,
        )
    }

    fun map(dto: TdApi.ChatEventMessagePinned): ChatEventMessagePinned {
        return ChatEventMessagePinned(
            message = map(dto.message),
        )
    }

    fun map(dto: TdApi.ChatEventMessageUnpinned): ChatEventMessageUnpinned {
        return ChatEventMessageUnpinned(
            message = map(dto.message),
        )
    }

    fun map(dto: TdApi.ChatEventPollStopped): ChatEventPollStopped {
        return ChatEventPollStopped(
            message = map(dto.message),
        )
    }

    fun map(dto: TdApi.ChatEventMemberJoined): ChatEventMemberJoined {
        return ChatEventMemberJoined()
    }

    fun map(dto: TdApi.ChatEventMemberJoinedByInviteLink): ChatEventMemberJoinedByInviteLink {
        return ChatEventMemberJoinedByInviteLink(
            inviteLink = map(dto.inviteLink),
            viaChatFolderInviteLink = dto.viaChatFolderInviteLink,
        )
    }

    fun map(dto: TdApi.ChatEventMemberJoinedByRequest): ChatEventMemberJoinedByRequest {
        return ChatEventMemberJoinedByRequest(
            approverUserId = dto.approverUserId,
            inviteLink = dto.inviteLink?.let { map(it) },
        )
    }

    fun map(dto: TdApi.ChatEventMemberInvited): ChatEventMemberInvited {
        return ChatEventMemberInvited(
            userId = dto.userId,
            status = map(dto.status),
        )
    }

    fun map(dto: TdApi.ChatEventMemberLeft): ChatEventMemberLeft {
        return ChatEventMemberLeft()
    }

    fun map(dto: TdApi.ChatEventMemberPromoted): ChatEventMemberPromoted {
        return ChatEventMemberPromoted(
            userId = dto.userId,
            oldStatus = map(dto.oldStatus),
            newStatus = map(dto.newStatus),
        )
    }

    fun map(dto: TdApi.ChatEventMemberRestricted): ChatEventMemberRestricted {
        return ChatEventMemberRestricted(
            memberId = map(dto.memberId),
            oldStatus = map(dto.oldStatus),
            newStatus = map(dto.newStatus),
        )
    }

    fun map(dto: TdApi.ChatEventMemberSubscriptionExtended): ChatEventMemberSubscriptionExtended {
        return ChatEventMemberSubscriptionExtended(
            userId = dto.userId,
            oldStatus = map(dto.oldStatus),
            newStatus = map(dto.newStatus),
        )
    }

    fun map(dto: TdApi.ChatEventAvailableReactionsChanged): ChatEventAvailableReactionsChanged {
        return ChatEventAvailableReactionsChanged(
            oldAvailableReactions = map(dto.oldAvailableReactions),
            newAvailableReactions = map(dto.newAvailableReactions),
        )
    }

    fun map(dto: TdApi.ChatEventBackgroundChanged): ChatEventBackgroundChanged {
        return ChatEventBackgroundChanged(
            oldBackground = dto.oldBackground?.let { map(it) },
            newBackground = dto.newBackground?.let { map(it) },
        )
    }

    fun map(dto: TdApi.ChatEventDescriptionChanged): ChatEventDescriptionChanged {
        return ChatEventDescriptionChanged(
            oldDescription = dto.oldDescription,
            newDescription = dto.newDescription,
        )
    }

    fun map(dto: TdApi.ChatEventEmojiStatusChanged): ChatEventEmojiStatusChanged {
        return ChatEventEmojiStatusChanged(
            oldEmojiStatus = dto.oldEmojiStatus?.let { map(it) },
            newEmojiStatus = dto.newEmojiStatus?.let { map(it) },
        )
    }

    fun map(dto: TdApi.ChatEventLinkedChatChanged): ChatEventLinkedChatChanged {
        return ChatEventLinkedChatChanged(
            oldLinkedChatId = dto.oldLinkedChatId,
            newLinkedChatId = dto.newLinkedChatId,
        )
    }

    fun map(dto: TdApi.ChatEventLocationChanged): ChatEventLocationChanged {
        return ChatEventLocationChanged(
            oldLocation = dto.oldLocation?.let { map(it) },
            newLocation = dto.newLocation?.let { map(it) },
        )
    }

    fun map(dto: TdApi.ChatEventMessageAutoDeleteTimeChanged): ChatEventMessageAutoDeleteTimeChanged {
        return ChatEventMessageAutoDeleteTimeChanged(
            oldMessageAutoDeleteTime = dto.oldMessageAutoDeleteTime,
            newMessageAutoDeleteTime = dto.newMessageAutoDeleteTime,
        )
    }

    fun map(dto: TdApi.ChatEventPermissionsChanged): ChatEventPermissionsChanged {
        return ChatEventPermissionsChanged(
            oldPermissions = map(dto.oldPermissions),
            newPermissions = map(dto.newPermissions),
        )
    }

    fun map(dto: TdApi.ChatEventPhotoChanged): ChatEventPhotoChanged {
        return ChatEventPhotoChanged(
            oldPhoto = dto.oldPhoto?.let { map(it) },
            newPhoto = dto.newPhoto?.let { map(it) },
        )
    }

    fun map(dto: TdApi.ChatEventSlowModeDelayChanged): ChatEventSlowModeDelayChanged {
        return ChatEventSlowModeDelayChanged(
            oldSlowModeDelay = dto.oldSlowModeDelay,
            newSlowModeDelay = dto.newSlowModeDelay,
        )
    }

    fun map(dto: TdApi.ChatEventStickerSetChanged): ChatEventStickerSetChanged {
        return ChatEventStickerSetChanged(
            oldStickerSetId = dto.oldStickerSetId,
            newStickerSetId = dto.newStickerSetId,
        )
    }

    fun map(dto: TdApi.ChatEventCustomEmojiStickerSetChanged): ChatEventCustomEmojiStickerSetChanged {
        return ChatEventCustomEmojiStickerSetChanged(
            oldStickerSetId = dto.oldStickerSetId,
            newStickerSetId = dto.newStickerSetId,
        )
    }

    fun map(dto: TdApi.ChatEventTitleChanged): ChatEventTitleChanged {
        return ChatEventTitleChanged(
            oldTitle = dto.oldTitle,
            newTitle = dto.newTitle,
        )
    }

    fun map(dto: TdApi.ChatEventUsernameChanged): ChatEventUsernameChanged {
        return ChatEventUsernameChanged(
            oldUsername = dto.oldUsername,
            newUsername = dto.newUsername,
        )
    }

    fun map(dto: TdApi.ChatEventActiveUsernamesChanged): ChatEventActiveUsernamesChanged {
        return ChatEventActiveUsernamesChanged(
            oldUsernames = dto.oldUsernames,
            newUsernames = dto.newUsernames,
        )
    }

    fun map(dto: TdApi.ChatEventAccentColorChanged): ChatEventAccentColorChanged {
        return ChatEventAccentColorChanged(
            oldAccentColorId = dto.oldAccentColorId,
            oldBackgroundCustomEmojiId = dto.oldBackgroundCustomEmojiId,
            newAccentColorId = dto.newAccentColorId,
            newBackgroundCustomEmojiId = dto.newBackgroundCustomEmojiId,
        )
    }

    fun map(dto: TdApi.ChatEventProfileAccentColorChanged): ChatEventProfileAccentColorChanged {
        return ChatEventProfileAccentColorChanged(
            oldProfileAccentColorId = dto.oldProfileAccentColorId,
            oldProfileBackgroundCustomEmojiId = dto.oldProfileBackgroundCustomEmojiId,
            newProfileAccentColorId = dto.newProfileAccentColorId,
            newProfileBackgroundCustomEmojiId = dto.newProfileBackgroundCustomEmojiId,
        )
    }

    fun map(dto: TdApi.ChatEventHasProtectedContentToggled): ChatEventHasProtectedContentToggled {
        return ChatEventHasProtectedContentToggled(
            hasProtectedContent = dto.hasProtectedContent,
        )
    }

    fun map(dto: TdApi.ChatEventInvitesToggled): ChatEventInvitesToggled {
        return ChatEventInvitesToggled(
            canInviteUsers = dto.canInviteUsers,
        )
    }

    fun map(dto: TdApi.ChatEventIsAllHistoryAvailableToggled): ChatEventIsAllHistoryAvailableToggled {
        return ChatEventIsAllHistoryAvailableToggled(
            isAllHistoryAvailable = dto.isAllHistoryAvailable,
        )
    }

    fun map(dto: TdApi.ChatEventHasAggressiveAntiSpamEnabledToggled): ChatEventHasAggressiveAntiSpamEnabledToggled {
        return ChatEventHasAggressiveAntiSpamEnabledToggled(
            hasAggressiveAntiSpamEnabled = dto.hasAggressiveAntiSpamEnabled,
        )
    }

    fun map(dto: TdApi.ChatEventSignMessagesToggled): ChatEventSignMessagesToggled {
        return ChatEventSignMessagesToggled(
            signMessages = dto.signMessages,
        )
    }

    fun map(dto: TdApi.ChatEventShowMessageSenderToggled): ChatEventShowMessageSenderToggled {
        return ChatEventShowMessageSenderToggled(
            showMessageSender = dto.showMessageSender,
        )
    }

    fun map(dto: TdApi.ChatEventAutomaticTranslationToggled): ChatEventAutomaticTranslationToggled {
        return ChatEventAutomaticTranslationToggled(
            hasAutomaticTranslation = dto.hasAutomaticTranslation,
        )
    }

    fun map(dto: TdApi.ChatEventInviteLinkEdited): ChatEventInviteLinkEdited {
        return ChatEventInviteLinkEdited(
            oldInviteLink = map(dto.oldInviteLink),
            newInviteLink = map(dto.newInviteLink),
        )
    }

    fun map(dto: TdApi.ChatEventInviteLinkRevoked): ChatEventInviteLinkRevoked {
        return ChatEventInviteLinkRevoked(
            inviteLink = map(dto.inviteLink),
        )
    }

    fun map(dto: TdApi.ChatEventInviteLinkDeleted): ChatEventInviteLinkDeleted {
        return ChatEventInviteLinkDeleted(
            inviteLink = map(dto.inviteLink),
        )
    }

    fun map(dto: TdApi.ChatEventVideoChatCreated): ChatEventVideoChatCreated {
        return ChatEventVideoChatCreated(
            groupCallId = dto.groupCallId,
        )
    }

    fun map(dto: TdApi.ChatEventVideoChatEnded): ChatEventVideoChatEnded {
        return ChatEventVideoChatEnded(
            groupCallId = dto.groupCallId,
        )
    }

    fun map(dto: TdApi.ChatEventVideoChatMuteNewParticipantsToggled): ChatEventVideoChatMuteNewParticipantsToggled {
        return ChatEventVideoChatMuteNewParticipantsToggled(
            muteNewParticipants = dto.muteNewParticipants,
        )
    }

    fun map(dto: TdApi.ChatEventVideoChatParticipantIsMutedToggled): ChatEventVideoChatParticipantIsMutedToggled {
        return ChatEventVideoChatParticipantIsMutedToggled(
            participantId = map(dto.participantId),
            isMuted = dto.isMuted,
        )
    }

    fun map(dto: TdApi.ChatEventVideoChatParticipantVolumeLevelChanged): ChatEventVideoChatParticipantVolumeLevelChanged {
        return ChatEventVideoChatParticipantVolumeLevelChanged(
            participantId = map(dto.participantId),
            volumeLevel = dto.volumeLevel,
        )
    }

    fun map(dto: TdApi.ChatEventIsForumToggled): ChatEventIsForumToggled {
        return ChatEventIsForumToggled(
            isForum = dto.isForum,
        )
    }

    fun map(dto: TdApi.ChatEventForumTopicCreated): ChatEventForumTopicCreated {
        return ChatEventForumTopicCreated(
            topicInfo = map(dto.topicInfo),
        )
    }

    fun map(dto: TdApi.ChatEventForumTopicEdited): ChatEventForumTopicEdited {
        return ChatEventForumTopicEdited(
            oldTopicInfo = map(dto.oldTopicInfo),
            newTopicInfo = map(dto.newTopicInfo),
        )
    }

    fun map(dto: TdApi.ChatEventForumTopicToggleIsClosed): ChatEventForumTopicToggleIsClosed {
        return ChatEventForumTopicToggleIsClosed(
            topicInfo = map(dto.topicInfo),
        )
    }

    fun map(dto: TdApi.ChatEventForumTopicToggleIsHidden): ChatEventForumTopicToggleIsHidden {
        return ChatEventForumTopicToggleIsHidden(
            topicInfo = map(dto.topicInfo),
        )
    }

    fun map(dto: TdApi.ChatEventForumTopicDeleted): ChatEventForumTopicDeleted {
        return ChatEventForumTopicDeleted(
            topicInfo = map(dto.topicInfo),
        )
    }

    fun map(dto: TdApi.ChatEventForumTopicPinned): ChatEventForumTopicPinned {
        return ChatEventForumTopicPinned(
            oldTopicInfo = dto.oldTopicInfo?.let { map(it) },
            newTopicInfo = dto.newTopicInfo?.let { map(it) },
        )
    }

    fun map(dto: ChatEventAction): TdApi.ChatEventAction {
        when (dto) {
            is ChatEventMessageEdited -> return map(dto)
            is ChatEventMessageDeleted -> return map(dto)
            is ChatEventMessagePinned -> return map(dto)
            is ChatEventMessageUnpinned -> return map(dto)
            is ChatEventPollStopped -> return map(dto)
            is ChatEventMemberJoined -> return map(dto)
            is ChatEventMemberJoinedByInviteLink -> return map(dto)
            is ChatEventMemberJoinedByRequest -> return map(dto)
            is ChatEventMemberInvited -> return map(dto)
            is ChatEventMemberLeft -> return map(dto)
            is ChatEventMemberPromoted -> return map(dto)
            is ChatEventMemberRestricted -> return map(dto)
            is ChatEventMemberSubscriptionExtended -> return map(dto)
            is ChatEventAvailableReactionsChanged -> return map(dto)
            is ChatEventBackgroundChanged -> return map(dto)
            is ChatEventDescriptionChanged -> return map(dto)
            is ChatEventEmojiStatusChanged -> return map(dto)
            is ChatEventLinkedChatChanged -> return map(dto)
            is ChatEventLocationChanged -> return map(dto)
            is ChatEventMessageAutoDeleteTimeChanged -> return map(dto)
            is ChatEventPermissionsChanged -> return map(dto)
            is ChatEventPhotoChanged -> return map(dto)
            is ChatEventSlowModeDelayChanged -> return map(dto)
            is ChatEventStickerSetChanged -> return map(dto)
            is ChatEventCustomEmojiStickerSetChanged -> return map(dto)
            is ChatEventTitleChanged -> return map(dto)
            is ChatEventUsernameChanged -> return map(dto)
            is ChatEventActiveUsernamesChanged -> return map(dto)
            is ChatEventAccentColorChanged -> return map(dto)
            is ChatEventProfileAccentColorChanged -> return map(dto)
            is ChatEventHasProtectedContentToggled -> return map(dto)
            is ChatEventInvitesToggled -> return map(dto)
            is ChatEventIsAllHistoryAvailableToggled -> return map(dto)
            is ChatEventHasAggressiveAntiSpamEnabledToggled -> return map(dto)
            is ChatEventSignMessagesToggled -> return map(dto)
            is ChatEventShowMessageSenderToggled -> return map(dto)
            is ChatEventAutomaticTranslationToggled -> return map(dto)
            is ChatEventInviteLinkEdited -> return map(dto)
            is ChatEventInviteLinkRevoked -> return map(dto)
            is ChatEventInviteLinkDeleted -> return map(dto)
            is ChatEventVideoChatCreated -> return map(dto)
            is ChatEventVideoChatEnded -> return map(dto)
            is ChatEventVideoChatMuteNewParticipantsToggled -> return map(dto)
            is ChatEventVideoChatParticipantIsMutedToggled -> return map(dto)
            is ChatEventVideoChatParticipantVolumeLevelChanged -> return map(dto)
            is ChatEventIsForumToggled -> return map(dto)
            is ChatEventForumTopicCreated -> return map(dto)
            is ChatEventForumTopicEdited -> return map(dto)
            is ChatEventForumTopicToggleIsClosed -> return map(dto)
            is ChatEventForumTopicToggleIsHidden -> return map(dto)
            is ChatEventForumTopicDeleted -> return map(dto)
            is ChatEventForumTopicPinned -> return map(dto)
        }
    }

    fun map(dto: ChatEventMessageEdited): TdApi.ChatEventMessageEdited {
        return TdApi.ChatEventMessageEdited(
            oldMessage = map(dto.oldMessage),
            newMessage = map(dto.newMessage),
        )
    }

    fun map(dto: ChatEventMessageDeleted): TdApi.ChatEventMessageDeleted {
        return TdApi.ChatEventMessageDeleted(
            message = map(dto.message),
            canReportAntiSpamFalsePositive = dto.canReportAntiSpamFalsePositive,
        )
    }

    fun map(dto: ChatEventMessagePinned): TdApi.ChatEventMessagePinned {
        return TdApi.ChatEventMessagePinned(
            message = map(dto.message),
        )
    }

    fun map(dto: ChatEventMessageUnpinned): TdApi.ChatEventMessageUnpinned {
        return TdApi.ChatEventMessageUnpinned(
            message = map(dto.message),
        )
    }

    fun map(dto: ChatEventPollStopped): TdApi.ChatEventPollStopped {
        return TdApi.ChatEventPollStopped(
            message = map(dto.message),
        )
    }

    fun map(dto: ChatEventMemberJoined): TdApi.ChatEventMemberJoined {
        return TdApi.ChatEventMemberJoined()
    }

    fun map(dto: ChatEventMemberJoinedByInviteLink): TdApi.ChatEventMemberJoinedByInviteLink {
        return TdApi.ChatEventMemberJoinedByInviteLink(
            inviteLink = map(dto.inviteLink),
            viaChatFolderInviteLink = dto.viaChatFolderInviteLink,
        )
    }

    fun map(dto: ChatEventMemberJoinedByRequest): TdApi.ChatEventMemberJoinedByRequest {
        return TdApi.ChatEventMemberJoinedByRequest(
            approverUserId = dto.approverUserId,
            inviteLink = dto.inviteLink?.let { map(it) },
        )
    }

    fun map(dto: ChatEventMemberInvited): TdApi.ChatEventMemberInvited {
        return TdApi.ChatEventMemberInvited(
            userId = dto.userId,
            status = map(dto.status),
        )
    }

    fun map(dto: ChatEventMemberLeft): TdApi.ChatEventMemberLeft {
        return TdApi.ChatEventMemberLeft()
    }

    fun map(dto: ChatEventMemberPromoted): TdApi.ChatEventMemberPromoted {
        return TdApi.ChatEventMemberPromoted(
            userId = dto.userId,
            oldStatus = map(dto.oldStatus),
            newStatus = map(dto.newStatus),
        )
    }

    fun map(dto: ChatEventMemberRestricted): TdApi.ChatEventMemberRestricted {
        return TdApi.ChatEventMemberRestricted(
            memberId = map(dto.memberId),
            oldStatus = map(dto.oldStatus),
            newStatus = map(dto.newStatus),
        )
    }

    fun map(dto: ChatEventMemberSubscriptionExtended): TdApi.ChatEventMemberSubscriptionExtended {
        return TdApi.ChatEventMemberSubscriptionExtended(
            userId = dto.userId,
            oldStatus = map(dto.oldStatus),
            newStatus = map(dto.newStatus),
        )
    }

    fun map(dto: ChatEventAvailableReactionsChanged): TdApi.ChatEventAvailableReactionsChanged {
        return TdApi.ChatEventAvailableReactionsChanged(
            oldAvailableReactions = map(dto.oldAvailableReactions),
            newAvailableReactions = map(dto.newAvailableReactions),
        )
    }

    fun map(dto: ChatEventBackgroundChanged): TdApi.ChatEventBackgroundChanged {
        return TdApi.ChatEventBackgroundChanged(
            oldBackground = dto.oldBackground?.let { map(it) },
            newBackground = dto.newBackground?.let { map(it) },
        )
    }

    fun map(dto: ChatEventDescriptionChanged): TdApi.ChatEventDescriptionChanged {
        return TdApi.ChatEventDescriptionChanged(
            oldDescription = dto.oldDescription,
            newDescription = dto.newDescription,
        )
    }

    fun map(dto: ChatEventEmojiStatusChanged): TdApi.ChatEventEmojiStatusChanged {
        return TdApi.ChatEventEmojiStatusChanged(
            oldEmojiStatus = dto.oldEmojiStatus?.let { map(it) },
            newEmojiStatus = dto.newEmojiStatus?.let { map(it) },
        )
    }

    fun map(dto: ChatEventLinkedChatChanged): TdApi.ChatEventLinkedChatChanged {
        return TdApi.ChatEventLinkedChatChanged(
            oldLinkedChatId = dto.oldLinkedChatId,
            newLinkedChatId = dto.newLinkedChatId,
        )
    }

    fun map(dto: ChatEventLocationChanged): TdApi.ChatEventLocationChanged {
        return TdApi.ChatEventLocationChanged(
            oldLocation = dto.oldLocation?.let { map(it) },
            newLocation = dto.newLocation?.let { map(it) },
        )
    }

    fun map(dto: ChatEventMessageAutoDeleteTimeChanged): TdApi.ChatEventMessageAutoDeleteTimeChanged {
        return TdApi.ChatEventMessageAutoDeleteTimeChanged(
            oldMessageAutoDeleteTime = dto.oldMessageAutoDeleteTime,
            newMessageAutoDeleteTime = dto.newMessageAutoDeleteTime,
        )
    }

    fun map(dto: ChatEventPermissionsChanged): TdApi.ChatEventPermissionsChanged {
        return TdApi.ChatEventPermissionsChanged(
            oldPermissions = map(dto.oldPermissions),
            newPermissions = map(dto.newPermissions),
        )
    }

    fun map(dto: ChatEventPhotoChanged): TdApi.ChatEventPhotoChanged {
        return TdApi.ChatEventPhotoChanged(
            oldPhoto = dto.oldPhoto?.let { map(it) },
            newPhoto = dto.newPhoto?.let { map(it) },
        )
    }

    fun map(dto: ChatEventSlowModeDelayChanged): TdApi.ChatEventSlowModeDelayChanged {
        return TdApi.ChatEventSlowModeDelayChanged(
            oldSlowModeDelay = dto.oldSlowModeDelay,
            newSlowModeDelay = dto.newSlowModeDelay,
        )
    }

    fun map(dto: ChatEventStickerSetChanged): TdApi.ChatEventStickerSetChanged {
        return TdApi.ChatEventStickerSetChanged(
            oldStickerSetId = dto.oldStickerSetId,
            newStickerSetId = dto.newStickerSetId,
        )
    }

    fun map(dto: ChatEventCustomEmojiStickerSetChanged): TdApi.ChatEventCustomEmojiStickerSetChanged {
        return TdApi.ChatEventCustomEmojiStickerSetChanged(
            oldStickerSetId = dto.oldStickerSetId,
            newStickerSetId = dto.newStickerSetId,
        )
    }

    fun map(dto: ChatEventTitleChanged): TdApi.ChatEventTitleChanged {
        return TdApi.ChatEventTitleChanged(
            oldTitle = dto.oldTitle,
            newTitle = dto.newTitle,
        )
    }

    fun map(dto: ChatEventUsernameChanged): TdApi.ChatEventUsernameChanged {
        return TdApi.ChatEventUsernameChanged(
            oldUsername = dto.oldUsername,
            newUsername = dto.newUsername,
        )
    }

    fun map(dto: ChatEventActiveUsernamesChanged): TdApi.ChatEventActiveUsernamesChanged {
        return TdApi.ChatEventActiveUsernamesChanged(
            oldUsernames = dto.oldUsernames,
            newUsernames = dto.newUsernames,
        )
    }

    fun map(dto: ChatEventAccentColorChanged): TdApi.ChatEventAccentColorChanged {
        return TdApi.ChatEventAccentColorChanged(
            oldAccentColorId = dto.oldAccentColorId,
            oldBackgroundCustomEmojiId = dto.oldBackgroundCustomEmojiId,
            newAccentColorId = dto.newAccentColorId,
            newBackgroundCustomEmojiId = dto.newBackgroundCustomEmojiId,
        )
    }

    fun map(dto: ChatEventProfileAccentColorChanged): TdApi.ChatEventProfileAccentColorChanged {
        return TdApi.ChatEventProfileAccentColorChanged(
            oldProfileAccentColorId = dto.oldProfileAccentColorId,
            oldProfileBackgroundCustomEmojiId = dto.oldProfileBackgroundCustomEmojiId,
            newProfileAccentColorId = dto.newProfileAccentColorId,
            newProfileBackgroundCustomEmojiId = dto.newProfileBackgroundCustomEmojiId,
        )
    }

    fun map(dto: ChatEventHasProtectedContentToggled): TdApi.ChatEventHasProtectedContentToggled {
        return TdApi.ChatEventHasProtectedContentToggled(
            hasProtectedContent = dto.hasProtectedContent,
        )
    }

    fun map(dto: ChatEventInvitesToggled): TdApi.ChatEventInvitesToggled {
        return TdApi.ChatEventInvitesToggled(
            canInviteUsers = dto.canInviteUsers,
        )
    }

    fun map(dto: ChatEventIsAllHistoryAvailableToggled): TdApi.ChatEventIsAllHistoryAvailableToggled {
        return TdApi.ChatEventIsAllHistoryAvailableToggled(
            isAllHistoryAvailable = dto.isAllHistoryAvailable,
        )
    }

    fun map(dto: ChatEventHasAggressiveAntiSpamEnabledToggled): TdApi.ChatEventHasAggressiveAntiSpamEnabledToggled {
        return TdApi.ChatEventHasAggressiveAntiSpamEnabledToggled(
            hasAggressiveAntiSpamEnabled = dto.hasAggressiveAntiSpamEnabled,
        )
    }

    fun map(dto: ChatEventSignMessagesToggled): TdApi.ChatEventSignMessagesToggled {
        return TdApi.ChatEventSignMessagesToggled(
            signMessages = dto.signMessages,
        )
    }

    fun map(dto: ChatEventShowMessageSenderToggled): TdApi.ChatEventShowMessageSenderToggled {
        return TdApi.ChatEventShowMessageSenderToggled(
            showMessageSender = dto.showMessageSender,
        )
    }

    fun map(dto: ChatEventAutomaticTranslationToggled): TdApi.ChatEventAutomaticTranslationToggled {
        return TdApi.ChatEventAutomaticTranslationToggled(
            hasAutomaticTranslation = dto.hasAutomaticTranslation,
        )
    }

    fun map(dto: ChatEventInviteLinkEdited): TdApi.ChatEventInviteLinkEdited {
        return TdApi.ChatEventInviteLinkEdited(
            oldInviteLink = map(dto.oldInviteLink),
            newInviteLink = map(dto.newInviteLink),
        )
    }

    fun map(dto: ChatEventInviteLinkRevoked): TdApi.ChatEventInviteLinkRevoked {
        return TdApi.ChatEventInviteLinkRevoked(
            inviteLink = map(dto.inviteLink),
        )
    }

    fun map(dto: ChatEventInviteLinkDeleted): TdApi.ChatEventInviteLinkDeleted {
        return TdApi.ChatEventInviteLinkDeleted(
            inviteLink = map(dto.inviteLink),
        )
    }

    fun map(dto: ChatEventVideoChatCreated): TdApi.ChatEventVideoChatCreated {
        return TdApi.ChatEventVideoChatCreated(
            groupCallId = dto.groupCallId,
        )
    }

    fun map(dto: ChatEventVideoChatEnded): TdApi.ChatEventVideoChatEnded {
        return TdApi.ChatEventVideoChatEnded(
            groupCallId = dto.groupCallId,
        )
    }

    fun map(dto: ChatEventVideoChatMuteNewParticipantsToggled): TdApi.ChatEventVideoChatMuteNewParticipantsToggled {
        return TdApi.ChatEventVideoChatMuteNewParticipantsToggled(
            muteNewParticipants = dto.muteNewParticipants,
        )
    }

    fun map(dto: ChatEventVideoChatParticipantIsMutedToggled): TdApi.ChatEventVideoChatParticipantIsMutedToggled {
        return TdApi.ChatEventVideoChatParticipantIsMutedToggled(
            participantId = map(dto.participantId),
            isMuted = dto.isMuted,
        )
    }

    fun map(dto: ChatEventVideoChatParticipantVolumeLevelChanged): TdApi.ChatEventVideoChatParticipantVolumeLevelChanged {
        return TdApi.ChatEventVideoChatParticipantVolumeLevelChanged(
            participantId = map(dto.participantId),
            volumeLevel = dto.volumeLevel,
        )
    }

    fun map(dto: ChatEventIsForumToggled): TdApi.ChatEventIsForumToggled {
        return TdApi.ChatEventIsForumToggled(
            isForum = dto.isForum,
        )
    }

    fun map(dto: ChatEventForumTopicCreated): TdApi.ChatEventForumTopicCreated {
        return TdApi.ChatEventForumTopicCreated(
            topicInfo = map(dto.topicInfo),
        )
    }

    fun map(dto: ChatEventForumTopicEdited): TdApi.ChatEventForumTopicEdited {
        return TdApi.ChatEventForumTopicEdited(
            oldTopicInfo = map(dto.oldTopicInfo),
            newTopicInfo = map(dto.newTopicInfo),
        )
    }

    fun map(dto: ChatEventForumTopicToggleIsClosed): TdApi.ChatEventForumTopicToggleIsClosed {
        return TdApi.ChatEventForumTopicToggleIsClosed(
            topicInfo = map(dto.topicInfo),
        )
    }

    fun map(dto: ChatEventForumTopicToggleIsHidden): TdApi.ChatEventForumTopicToggleIsHidden {
        return TdApi.ChatEventForumTopicToggleIsHidden(
            topicInfo = map(dto.topicInfo),
        )
    }

    fun map(dto: ChatEventForumTopicDeleted): TdApi.ChatEventForumTopicDeleted {
        return TdApi.ChatEventForumTopicDeleted(
            topicInfo = map(dto.topicInfo),
        )
    }

    fun map(dto: ChatEventForumTopicPinned): TdApi.ChatEventForumTopicPinned {
        return TdApi.ChatEventForumTopicPinned(
            oldTopicInfo = dto.oldTopicInfo?.let { map(it) },
            newTopicInfo = dto.newTopicInfo?.let { map(it) },
        )
    }

    fun map(dto: TdApi.ChatEventLogFilters): ChatEventLogFilters {
        return ChatEventLogFilters(
            messageEdits = dto.messageEdits,
            messageDeletions = dto.messageDeletions,
            messagePins = dto.messagePins,
            memberJoins = dto.memberJoins,
            memberLeaves = dto.memberLeaves,
            memberInvites = dto.memberInvites,
            memberPromotions = dto.memberPromotions,
            memberRestrictions = dto.memberRestrictions,
            infoChanges = dto.infoChanges,
            settingChanges = dto.settingChanges,
            inviteLinkChanges = dto.inviteLinkChanges,
            videoChatChanges = dto.videoChatChanges,
            forumChanges = dto.forumChanges,
            subscriptionExtensions = dto.subscriptionExtensions,
        )
    }

    fun map(dto: ChatEventLogFilters): TdApi.ChatEventLogFilters {
        return TdApi.ChatEventLogFilters(
            messageEdits = dto.messageEdits,
            messageDeletions = dto.messageDeletions,
            messagePins = dto.messagePins,
            memberJoins = dto.memberJoins,
            memberLeaves = dto.memberLeaves,
            memberInvites = dto.memberInvites,
            memberPromotions = dto.memberPromotions,
            memberRestrictions = dto.memberRestrictions,
            infoChanges = dto.infoChanges,
            settingChanges = dto.settingChanges,
            inviteLinkChanges = dto.inviteLinkChanges,
            videoChatChanges = dto.videoChatChanges,
            forumChanges = dto.forumChanges,
            subscriptionExtensions = dto.subscriptionExtensions,
        )
    }

    fun map(dto: TdApi.ChatEvents): ChatEvents {
        return ChatEvents(
            events = dto.events.mapArray { map(it) },
        )
    }

    fun map(dto: ChatEvents): TdApi.ChatEvents {
        return TdApi.ChatEvents(
            events = dto.events.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatFolder): ChatFolder {
        return ChatFolder(
            name = map(dto.name),
            icon = dto.icon?.let { map(it) },
            colorId = dto.colorId,
            isShareable = dto.isShareable,
            pinnedChatIds = dto.pinnedChatIds,
            includedChatIds = dto.includedChatIds,
            excludedChatIds = dto.excludedChatIds,
            excludeMuted = dto.excludeMuted,
            excludeRead = dto.excludeRead,
            excludeArchived = dto.excludeArchived,
            includeContacts = dto.includeContacts,
            includeNonContacts = dto.includeNonContacts,
            includeBots = dto.includeBots,
            includeGroups = dto.includeGroups,
            includeChannels = dto.includeChannels,
        )
    }

    fun map(dto: ChatFolder): TdApi.ChatFolder {
        return TdApi.ChatFolder(
            name = map(dto.name),
            icon = dto.icon?.let { map(it) },
            colorId = dto.colorId,
            isShareable = dto.isShareable,
            pinnedChatIds = dto.pinnedChatIds,
            includedChatIds = dto.includedChatIds,
            excludedChatIds = dto.excludedChatIds,
            excludeMuted = dto.excludeMuted,
            excludeRead = dto.excludeRead,
            excludeArchived = dto.excludeArchived,
            includeContacts = dto.includeContacts,
            includeNonContacts = dto.includeNonContacts,
            includeBots = dto.includeBots,
            includeGroups = dto.includeGroups,
            includeChannels = dto.includeChannels,
        )
    }

    fun map(dto: TdApi.ChatFolderIcon): ChatFolderIcon {
        return ChatFolderIcon(
            name = dto.name,
        )
    }

    fun map(dto: ChatFolderIcon): TdApi.ChatFolderIcon {
        return TdApi.ChatFolderIcon(
            name = dto.name,
        )
    }

    fun map(dto: TdApi.ChatFolderInfo): ChatFolderInfo {
        return ChatFolderInfo(
            id = dto.id,
            name = map(dto.name),
            icon = map(dto.icon),
            colorId = dto.colorId,
            isShareable = dto.isShareable,
            hasMyInviteLinks = dto.hasMyInviteLinks,
        )
    }

    fun map(dto: ChatFolderInfo): TdApi.ChatFolderInfo {
        return TdApi.ChatFolderInfo(
            id = dto.id,
            name = map(dto.name),
            icon = map(dto.icon),
            colorId = dto.colorId,
            isShareable = dto.isShareable,
            hasMyInviteLinks = dto.hasMyInviteLinks,
        )
    }

    fun map(dto: TdApi.ChatFolderInviteLink): ChatFolderInviteLink {
        return ChatFolderInviteLink(
            inviteLink = dto.inviteLink,
            name = dto.name,
            chatIds = dto.chatIds,
        )
    }

    fun map(dto: ChatFolderInviteLink): TdApi.ChatFolderInviteLink {
        return TdApi.ChatFolderInviteLink(
            inviteLink = dto.inviteLink,
            name = dto.name,
            chatIds = dto.chatIds,
        )
    }

    fun map(dto: TdApi.ChatFolderInviteLinkInfo): ChatFolderInviteLinkInfo {
        return ChatFolderInviteLinkInfo(
            chatFolderInfo = map(dto.chatFolderInfo),
            missingChatIds = dto.missingChatIds,
            addedChatIds = dto.addedChatIds,
        )
    }

    fun map(dto: ChatFolderInviteLinkInfo): TdApi.ChatFolderInviteLinkInfo {
        return TdApi.ChatFolderInviteLinkInfo(
            chatFolderInfo = map(dto.chatFolderInfo),
            missingChatIds = dto.missingChatIds,
            addedChatIds = dto.addedChatIds,
        )
    }

    fun map(dto: TdApi.ChatFolderInviteLinks): ChatFolderInviteLinks {
        return ChatFolderInviteLinks(
            inviteLinks = dto.inviteLinks.mapArray { map(it) },
        )
    }

    fun map(dto: ChatFolderInviteLinks): TdApi.ChatFolderInviteLinks {
        return TdApi.ChatFolderInviteLinks(
            inviteLinks = dto.inviteLinks.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatFolderName): ChatFolderName {
        return ChatFolderName(
            text = map(dto.text),
            animateCustomEmoji = dto.animateCustomEmoji,
        )
    }

    fun map(dto: ChatFolderName): TdApi.ChatFolderName {
        return TdApi.ChatFolderName(
            text = map(dto.text),
            animateCustomEmoji = dto.animateCustomEmoji,
        )
    }

    fun map(dto: TdApi.ChatInviteLink): ChatInviteLink {
        return ChatInviteLink(
            inviteLink = dto.inviteLink,
            name = dto.name,
            creatorUserId = dto.creatorUserId,
            date = dto.date,
            editDate = dto.editDate,
            expirationDate = dto.expirationDate,
            subscriptionPricing = dto.subscriptionPricing?.let { map(it) },
            memberLimit = dto.memberLimit,
            memberCount = dto.memberCount,
            expiredMemberCount = dto.expiredMemberCount,
            pendingJoinRequestCount = dto.pendingJoinRequestCount,
            createsJoinRequest = dto.createsJoinRequest,
            isPrimary = dto.isPrimary,
            isRevoked = dto.isRevoked,
        )
    }

    fun map(dto: ChatInviteLink): TdApi.ChatInviteLink {
        return TdApi.ChatInviteLink(
            inviteLink = dto.inviteLink,
            name = dto.name,
            creatorUserId = dto.creatorUserId,
            date = dto.date,
            editDate = dto.editDate,
            expirationDate = dto.expirationDate,
            subscriptionPricing = dto.subscriptionPricing?.let { map(it) },
            memberLimit = dto.memberLimit,
            memberCount = dto.memberCount,
            expiredMemberCount = dto.expiredMemberCount,
            pendingJoinRequestCount = dto.pendingJoinRequestCount,
            createsJoinRequest = dto.createsJoinRequest,
            isPrimary = dto.isPrimary,
            isRevoked = dto.isRevoked,
        )
    }

    fun map(dto: TdApi.ChatInviteLinkCount): ChatInviteLinkCount {
        return ChatInviteLinkCount(
            userId = dto.userId,
            inviteLinkCount = dto.inviteLinkCount,
            revokedInviteLinkCount = dto.revokedInviteLinkCount,
        )
    }

    fun map(dto: ChatInviteLinkCount): TdApi.ChatInviteLinkCount {
        return TdApi.ChatInviteLinkCount(
            userId = dto.userId,
            inviteLinkCount = dto.inviteLinkCount,
            revokedInviteLinkCount = dto.revokedInviteLinkCount,
        )
    }

    fun map(dto: TdApi.ChatInviteLinkCounts): ChatInviteLinkCounts {
        return ChatInviteLinkCounts(
            inviteLinkCounts = dto.inviteLinkCounts.mapArray { map(it) },
        )
    }

    fun map(dto: ChatInviteLinkCounts): TdApi.ChatInviteLinkCounts {
        return TdApi.ChatInviteLinkCounts(
            inviteLinkCounts = dto.inviteLinkCounts.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatInviteLinkInfo): ChatInviteLinkInfo {
        return ChatInviteLinkInfo(
            chatId = dto.chatId,
            accessibleFor = dto.accessibleFor,
            type = map(dto.type),
            title = dto.title,
            photo = dto.photo?.let { map(it) },
            accentColorId = dto.accentColorId,
            description = dto.description,
            memberCount = dto.memberCount,
            memberUserIds = dto.memberUserIds,
            subscriptionInfo = dto.subscriptionInfo?.let { map(it) },
            createsJoinRequest = dto.createsJoinRequest,
            isPublic = dto.isPublic,
            verificationStatus = dto.verificationStatus?.let { map(it) },
        )
    }

    fun map(dto: ChatInviteLinkInfo): TdApi.ChatInviteLinkInfo {
        return TdApi.ChatInviteLinkInfo(
            chatId = dto.chatId,
            accessibleFor = dto.accessibleFor,
            type = map(dto.type),
            title = dto.title,
            photo = dto.photo?.let { map(it) },
            accentColorId = dto.accentColorId,
            description = dto.description,
            memberCount = dto.memberCount,
            memberUserIds = dto.memberUserIds,
            subscriptionInfo = dto.subscriptionInfo?.let { map(it) },
            createsJoinRequest = dto.createsJoinRequest,
            isPublic = dto.isPublic,
            verificationStatus = dto.verificationStatus?.let { map(it) },
        )
    }

    fun map(dto: TdApi.ChatInviteLinkMember): ChatInviteLinkMember {
        return ChatInviteLinkMember(
            userId = dto.userId,
            joinedChatDate = dto.joinedChatDate,
            viaChatFolderInviteLink = dto.viaChatFolderInviteLink,
            approverUserId = dto.approverUserId,
        )
    }

    fun map(dto: ChatInviteLinkMember): TdApi.ChatInviteLinkMember {
        return TdApi.ChatInviteLinkMember(
            userId = dto.userId,
            joinedChatDate = dto.joinedChatDate,
            viaChatFolderInviteLink = dto.viaChatFolderInviteLink,
            approverUserId = dto.approverUserId,
        )
    }

    fun map(dto: TdApi.ChatInviteLinkMembers): ChatInviteLinkMembers {
        return ChatInviteLinkMembers(
            totalCount = dto.totalCount,
            members = dto.members.mapArray { map(it) },
        )
    }

    fun map(dto: ChatInviteLinkMembers): TdApi.ChatInviteLinkMembers {
        return TdApi.ChatInviteLinkMembers(
            totalCount = dto.totalCount,
            members = dto.members.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatInviteLinkSubscriptionInfo): ChatInviteLinkSubscriptionInfo {
        return ChatInviteLinkSubscriptionInfo(
            pricing = map(dto.pricing),
            canReuse = dto.canReuse,
            formId = dto.formId,
        )
    }

    fun map(dto: ChatInviteLinkSubscriptionInfo): TdApi.ChatInviteLinkSubscriptionInfo {
        return TdApi.ChatInviteLinkSubscriptionInfo(
            pricing = map(dto.pricing),
            canReuse = dto.canReuse,
            formId = dto.formId,
        )
    }

    fun map(dto: TdApi.ChatInviteLinks): ChatInviteLinks {
        return ChatInviteLinks(
            totalCount = dto.totalCount,
            inviteLinks = dto.inviteLinks.mapArray { map(it) },
        )
    }

    fun map(dto: ChatInviteLinks): TdApi.ChatInviteLinks {
        return TdApi.ChatInviteLinks(
            totalCount = dto.totalCount,
            inviteLinks = dto.inviteLinks.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatJoinRequest): ChatJoinRequest {
        return ChatJoinRequest(
            userId = dto.userId,
            date = dto.date,
            bio = dto.bio,
        )
    }

    fun map(dto: ChatJoinRequest): TdApi.ChatJoinRequest {
        return TdApi.ChatJoinRequest(
            userId = dto.userId,
            date = dto.date,
            bio = dto.bio,
        )
    }

    fun map(dto: TdApi.ChatJoinRequests): ChatJoinRequests {
        return ChatJoinRequests(
            totalCount = dto.totalCount,
            requests = dto.requests.mapArray { map(it) },
        )
    }

    fun map(dto: ChatJoinRequests): TdApi.ChatJoinRequests {
        return TdApi.ChatJoinRequests(
            totalCount = dto.totalCount,
            requests = dto.requests.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatJoinRequestsInfo): ChatJoinRequestsInfo {
        return ChatJoinRequestsInfo(
            totalCount = dto.totalCount,
            userIds = dto.userIds,
        )
    }

    fun map(dto: ChatJoinRequestsInfo): TdApi.ChatJoinRequestsInfo {
        return TdApi.ChatJoinRequestsInfo(
            totalCount = dto.totalCount,
            userIds = dto.userIds,
        )
    }

    fun map(dto: TdApi.ChatList): ChatList {
        when (dto) {
            is TdApi.ChatListMain -> return map(dto)
            is TdApi.ChatListArchive -> return map(dto)
            is TdApi.ChatListFolder -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ChatListMain): ChatListMain {
        return ChatListMain()
    }

    fun map(dto: TdApi.ChatListArchive): ChatListArchive {
        return ChatListArchive()
    }

    fun map(dto: TdApi.ChatListFolder): ChatListFolder {
        return ChatListFolder(
            chatFolderId = dto.chatFolderId,
        )
    }

    fun map(dto: ChatList): TdApi.ChatList {
        when (dto) {
            is ChatListMain -> return map(dto)
            is ChatListArchive -> return map(dto)
            is ChatListFolder -> return map(dto)
        }
    }

    fun map(dto: ChatListMain): TdApi.ChatListMain {
        return TdApi.ChatListMain()
    }

    fun map(dto: ChatListArchive): TdApi.ChatListArchive {
        return TdApi.ChatListArchive()
    }

    fun map(dto: ChatListFolder): TdApi.ChatListFolder {
        return TdApi.ChatListFolder(
            chatFolderId = dto.chatFolderId,
        )
    }

    fun map(dto: TdApi.ChatLists): ChatLists {
        return ChatLists(
            chatLists = dto.chatLists.mapArray { map(it) },
        )
    }

    fun map(dto: ChatLists): TdApi.ChatLists {
        return TdApi.ChatLists(
            chatLists = dto.chatLists.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatLocation): ChatLocation {
        return ChatLocation(
            location = map(dto.location),
            address = dto.address,
        )
    }

    fun map(dto: ChatLocation): TdApi.ChatLocation {
        return TdApi.ChatLocation(
            location = map(dto.location),
            address = dto.address,
        )
    }

    fun map(dto: TdApi.ChatMember): ChatMember {
        return ChatMember(
            memberId = map(dto.memberId),
            inviterUserId = dto.inviterUserId,
            joinedChatDate = dto.joinedChatDate,
            status = map(dto.status),
        )
    }

    fun map(dto: ChatMember): TdApi.ChatMember {
        return TdApi.ChatMember(
            memberId = map(dto.memberId),
            inviterUserId = dto.inviterUserId,
            joinedChatDate = dto.joinedChatDate,
            status = map(dto.status),
        )
    }

    fun map(dto: TdApi.ChatMemberStatus): ChatMemberStatus {
        when (dto) {
            is TdApi.ChatMemberStatusCreator -> return map(dto)
            is TdApi.ChatMemberStatusAdministrator -> return map(dto)
            is TdApi.ChatMemberStatusMember -> return map(dto)
            is TdApi.ChatMemberStatusRestricted -> return map(dto)
            is TdApi.ChatMemberStatusLeft -> return map(dto)
            is TdApi.ChatMemberStatusBanned -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ChatMemberStatusCreator): ChatMemberStatusCreator {
        return ChatMemberStatusCreator(
            customTitle = dto.customTitle,
            isAnonymous = dto.isAnonymous,
            isMember = dto.isMember,
        )
    }

    fun map(dto: TdApi.ChatMemberStatusAdministrator): ChatMemberStatusAdministrator {
        return ChatMemberStatusAdministrator(
            customTitle = dto.customTitle,
            canBeEdited = dto.canBeEdited,
            rights = map(dto.rights),
        )
    }

    fun map(dto: TdApi.ChatMemberStatusMember): ChatMemberStatusMember {
        return ChatMemberStatusMember(
            memberUntilDate = dto.memberUntilDate,
        )
    }

    fun map(dto: TdApi.ChatMemberStatusRestricted): ChatMemberStatusRestricted {
        return ChatMemberStatusRestricted(
            isMember = dto.isMember,
            restrictedUntilDate = dto.restrictedUntilDate,
            permissions = map(dto.permissions),
        )
    }

    fun map(dto: TdApi.ChatMemberStatusLeft): ChatMemberStatusLeft {
        return ChatMemberStatusLeft()
    }

    fun map(dto: TdApi.ChatMemberStatusBanned): ChatMemberStatusBanned {
        return ChatMemberStatusBanned(
            bannedUntilDate = dto.bannedUntilDate,
        )
    }

    fun map(dto: ChatMemberStatus): TdApi.ChatMemberStatus {
        when (dto) {
            is ChatMemberStatusCreator -> return map(dto)
            is ChatMemberStatusAdministrator -> return map(dto)
            is ChatMemberStatusMember -> return map(dto)
            is ChatMemberStatusRestricted -> return map(dto)
            is ChatMemberStatusLeft -> return map(dto)
            is ChatMemberStatusBanned -> return map(dto)
        }
    }

    fun map(dto: ChatMemberStatusCreator): TdApi.ChatMemberStatusCreator {
        return TdApi.ChatMemberStatusCreator(
            customTitle = dto.customTitle,
            isAnonymous = dto.isAnonymous,
            isMember = dto.isMember,
        )
    }

    fun map(dto: ChatMemberStatusAdministrator): TdApi.ChatMemberStatusAdministrator {
        return TdApi.ChatMemberStatusAdministrator(
            customTitle = dto.customTitle,
            canBeEdited = dto.canBeEdited,
            rights = map(dto.rights),
        )
    }

    fun map(dto: ChatMemberStatusMember): TdApi.ChatMemberStatusMember {
        return TdApi.ChatMemberStatusMember(
            memberUntilDate = dto.memberUntilDate,
        )
    }

    fun map(dto: ChatMemberStatusRestricted): TdApi.ChatMemberStatusRestricted {
        return TdApi.ChatMemberStatusRestricted(
            isMember = dto.isMember,
            restrictedUntilDate = dto.restrictedUntilDate,
            permissions = map(dto.permissions),
        )
    }

    fun map(dto: ChatMemberStatusLeft): TdApi.ChatMemberStatusLeft {
        return TdApi.ChatMemberStatusLeft()
    }

    fun map(dto: ChatMemberStatusBanned): TdApi.ChatMemberStatusBanned {
        return TdApi.ChatMemberStatusBanned(
            bannedUntilDate = dto.bannedUntilDate,
        )
    }

    fun map(dto: TdApi.ChatMembers): ChatMembers {
        return ChatMembers(
            totalCount = dto.totalCount,
            members = dto.members.mapArray { map(it) },
        )
    }

    fun map(dto: ChatMembers): TdApi.ChatMembers {
        return TdApi.ChatMembers(
            totalCount = dto.totalCount,
            members = dto.members.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatMembersFilter): ChatMembersFilter {
        when (dto) {
            is TdApi.ChatMembersFilterContacts -> return map(dto)
            is TdApi.ChatMembersFilterAdministrators -> return map(dto)
            is TdApi.ChatMembersFilterMembers -> return map(dto)
            is TdApi.ChatMembersFilterMention -> return map(dto)
            is TdApi.ChatMembersFilterRestricted -> return map(dto)
            is TdApi.ChatMembersFilterBanned -> return map(dto)
            is TdApi.ChatMembersFilterBots -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ChatMembersFilterContacts): ChatMembersFilterContacts {
        return ChatMembersFilterContacts()
    }

    fun map(dto: TdApi.ChatMembersFilterAdministrators): ChatMembersFilterAdministrators {
        return ChatMembersFilterAdministrators()
    }

    fun map(dto: TdApi.ChatMembersFilterMembers): ChatMembersFilterMembers {
        return ChatMembersFilterMembers()
    }

    fun map(dto: TdApi.ChatMembersFilterMention): ChatMembersFilterMention {
        return ChatMembersFilterMention(
            messageThreadId = dto.messageThreadId,
        )
    }

    fun map(dto: TdApi.ChatMembersFilterRestricted): ChatMembersFilterRestricted {
        return ChatMembersFilterRestricted()
    }

    fun map(dto: TdApi.ChatMembersFilterBanned): ChatMembersFilterBanned {
        return ChatMembersFilterBanned()
    }

    fun map(dto: TdApi.ChatMembersFilterBots): ChatMembersFilterBots {
        return ChatMembersFilterBots()
    }

    fun map(dto: ChatMembersFilter): TdApi.ChatMembersFilter {
        when (dto) {
            is ChatMembersFilterContacts -> return map(dto)
            is ChatMembersFilterAdministrators -> return map(dto)
            is ChatMembersFilterMembers -> return map(dto)
            is ChatMembersFilterMention -> return map(dto)
            is ChatMembersFilterRestricted -> return map(dto)
            is ChatMembersFilterBanned -> return map(dto)
            is ChatMembersFilterBots -> return map(dto)
        }
    }

    fun map(dto: ChatMembersFilterContacts): TdApi.ChatMembersFilterContacts {
        return TdApi.ChatMembersFilterContacts()
    }

    fun map(dto: ChatMembersFilterAdministrators): TdApi.ChatMembersFilterAdministrators {
        return TdApi.ChatMembersFilterAdministrators()
    }

    fun map(dto: ChatMembersFilterMembers): TdApi.ChatMembersFilterMembers {
        return TdApi.ChatMembersFilterMembers()
    }

    fun map(dto: ChatMembersFilterMention): TdApi.ChatMembersFilterMention {
        return TdApi.ChatMembersFilterMention(
            messageThreadId = dto.messageThreadId,
        )
    }

    fun map(dto: ChatMembersFilterRestricted): TdApi.ChatMembersFilterRestricted {
        return TdApi.ChatMembersFilterRestricted()
    }

    fun map(dto: ChatMembersFilterBanned): TdApi.ChatMembersFilterBanned {
        return TdApi.ChatMembersFilterBanned()
    }

    fun map(dto: ChatMembersFilterBots): TdApi.ChatMembersFilterBots {
        return TdApi.ChatMembersFilterBots()
    }

    fun map(dto: TdApi.ChatMessageSender): ChatMessageSender {
        return ChatMessageSender(
            sender = map(dto.sender),
            needsPremium = dto.needsPremium,
        )
    }

    fun map(dto: ChatMessageSender): TdApi.ChatMessageSender {
        return TdApi.ChatMessageSender(
            sender = map(dto.sender),
            needsPremium = dto.needsPremium,
        )
    }

    fun map(dto: TdApi.ChatMessageSenders): ChatMessageSenders {
        return ChatMessageSenders(
            senders = dto.senders.mapArray { map(it) },
        )
    }

    fun map(dto: ChatMessageSenders): TdApi.ChatMessageSenders {
        return TdApi.ChatMessageSenders(
            senders = dto.senders.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatNotificationSettings): ChatNotificationSettings {
        return ChatNotificationSettings(
            useDefaultMuteFor = dto.useDefaultMuteFor,
            muteFor = dto.muteFor,
            useDefaultSound = dto.useDefaultSound,
            soundId = dto.soundId,
            useDefaultShowPreview = dto.useDefaultShowPreview,
            showPreview = dto.showPreview,
            useDefaultMuteStories = dto.useDefaultMuteStories,
            muteStories = dto.muteStories,
            useDefaultStorySound = dto.useDefaultStorySound,
            storySoundId = dto.storySoundId,
            useDefaultShowStoryPoster = dto.useDefaultShowStoryPoster,
            showStoryPoster = dto.showStoryPoster,
            useDefaultDisablePinnedMessageNotifications = dto.useDefaultDisablePinnedMessageNotifications,
            disablePinnedMessageNotifications = dto.disablePinnedMessageNotifications,
            useDefaultDisableMentionNotifications = dto.useDefaultDisableMentionNotifications,
            disableMentionNotifications = dto.disableMentionNotifications,
        )
    }

    fun map(dto: ChatNotificationSettings): TdApi.ChatNotificationSettings {
        return TdApi.ChatNotificationSettings(
            useDefaultMuteFor = dto.useDefaultMuteFor,
            muteFor = dto.muteFor,
            useDefaultSound = dto.useDefaultSound,
            soundId = dto.soundId,
            useDefaultShowPreview = dto.useDefaultShowPreview,
            showPreview = dto.showPreview,
            useDefaultMuteStories = dto.useDefaultMuteStories,
            muteStories = dto.muteStories,
            useDefaultStorySound = dto.useDefaultStorySound,
            storySoundId = dto.storySoundId,
            useDefaultShowStoryPoster = dto.useDefaultShowStoryPoster,
            showStoryPoster = dto.showStoryPoster,
            useDefaultDisablePinnedMessageNotifications = dto.useDefaultDisablePinnedMessageNotifications,
            disablePinnedMessageNotifications = dto.disablePinnedMessageNotifications,
            useDefaultDisableMentionNotifications = dto.useDefaultDisableMentionNotifications,
            disableMentionNotifications = dto.disableMentionNotifications,
        )
    }

    fun map(dto: TdApi.ChatPermissions): ChatPermissions {
        return ChatPermissions(
            canSendBasicMessages = dto.canSendBasicMessages,
            canSendAudios = dto.canSendAudios,
            canSendDocuments = dto.canSendDocuments,
            canSendPhotos = dto.canSendPhotos,
            canSendVideos = dto.canSendVideos,
            canSendVideoNotes = dto.canSendVideoNotes,
            canSendVoiceNotes = dto.canSendVoiceNotes,
            canSendPolls = dto.canSendPolls,
            canSendOtherMessages = dto.canSendOtherMessages,
            canAddLinkPreviews = dto.canAddLinkPreviews,
            canChangeInfo = dto.canChangeInfo,
            canInviteUsers = dto.canInviteUsers,
            canPinMessages = dto.canPinMessages,
            canCreateTopics = dto.canCreateTopics,
        )
    }

    fun map(dto: ChatPermissions): TdApi.ChatPermissions {
        return TdApi.ChatPermissions(
            canSendBasicMessages = dto.canSendBasicMessages,
            canSendAudios = dto.canSendAudios,
            canSendDocuments = dto.canSendDocuments,
            canSendPhotos = dto.canSendPhotos,
            canSendVideos = dto.canSendVideos,
            canSendVideoNotes = dto.canSendVideoNotes,
            canSendVoiceNotes = dto.canSendVoiceNotes,
            canSendPolls = dto.canSendPolls,
            canSendOtherMessages = dto.canSendOtherMessages,
            canAddLinkPreviews = dto.canAddLinkPreviews,
            canChangeInfo = dto.canChangeInfo,
            canInviteUsers = dto.canInviteUsers,
            canPinMessages = dto.canPinMessages,
            canCreateTopics = dto.canCreateTopics,
        )
    }

    fun map(dto: TdApi.ChatPhoto): ChatPhoto {
        return ChatPhoto(
            id = dto.id,
            addedDate = dto.addedDate,
            minithumbnail = dto.minithumbnail?.let { map(it) },
            sizes = dto.sizes.mapArray { map(it) },
            animation = dto.animation?.let { map(it) },
            smallAnimation = dto.smallAnimation?.let { map(it) },
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: ChatPhoto): TdApi.ChatPhoto {
        return TdApi.ChatPhoto(
            id = dto.id,
            addedDate = dto.addedDate,
            minithumbnail = dto.minithumbnail?.let { map(it) },
            sizes = dto.sizes.mapArray { map(it) },
            animation = dto.animation?.let { map(it) },
            smallAnimation = dto.smallAnimation?.let { map(it) },
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: TdApi.ChatPhotoInfo): ChatPhotoInfo {
        return ChatPhotoInfo(
            small = map(dto.small),
            big = map(dto.big),
            minithumbnail = dto.minithumbnail?.let { map(it) },
            hasAnimation = dto.hasAnimation,
            isPersonal = dto.isPersonal,
        )
    }

    fun map(dto: ChatPhotoInfo): TdApi.ChatPhotoInfo {
        return TdApi.ChatPhotoInfo(
            small = map(dto.small),
            big = map(dto.big),
            minithumbnail = dto.minithumbnail?.let { map(it) },
            hasAnimation = dto.hasAnimation,
            isPersonal = dto.isPersonal,
        )
    }

    fun map(dto: TdApi.ChatPhotoSticker): ChatPhotoSticker {
        return ChatPhotoSticker(
            type = map(dto.type),
            backgroundFill = map(dto.backgroundFill),
        )
    }

    fun map(dto: ChatPhotoSticker): TdApi.ChatPhotoSticker {
        return TdApi.ChatPhotoSticker(
            type = map(dto.type),
            backgroundFill = map(dto.backgroundFill),
        )
    }

    fun map(dto: TdApi.ChatPhotoStickerType): ChatPhotoStickerType {
        when (dto) {
            is TdApi.ChatPhotoStickerTypeRegularOrMask -> return map(dto)
            is TdApi.ChatPhotoStickerTypeCustomEmoji -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ChatPhotoStickerTypeRegularOrMask): ChatPhotoStickerTypeRegularOrMask {
        return ChatPhotoStickerTypeRegularOrMask(
            stickerSetId = dto.stickerSetId,
            stickerId = dto.stickerId,
        )
    }

    fun map(dto: TdApi.ChatPhotoStickerTypeCustomEmoji): ChatPhotoStickerTypeCustomEmoji {
        return ChatPhotoStickerTypeCustomEmoji(
            customEmojiId = dto.customEmojiId,
        )
    }

    fun map(dto: ChatPhotoStickerType): TdApi.ChatPhotoStickerType {
        when (dto) {
            is ChatPhotoStickerTypeRegularOrMask -> return map(dto)
            is ChatPhotoStickerTypeCustomEmoji -> return map(dto)
        }
    }

    fun map(dto: ChatPhotoStickerTypeRegularOrMask): TdApi.ChatPhotoStickerTypeRegularOrMask {
        return TdApi.ChatPhotoStickerTypeRegularOrMask(
            stickerSetId = dto.stickerSetId,
            stickerId = dto.stickerId,
        )
    }

    fun map(dto: ChatPhotoStickerTypeCustomEmoji): TdApi.ChatPhotoStickerTypeCustomEmoji {
        return TdApi.ChatPhotoStickerTypeCustomEmoji(
            customEmojiId = dto.customEmojiId,
        )
    }

    fun map(dto: TdApi.ChatPhotos): ChatPhotos {
        return ChatPhotos(
            totalCount = dto.totalCount,
            photos = dto.photos.mapArray { map(it) },
        )
    }

    fun map(dto: ChatPhotos): TdApi.ChatPhotos {
        return TdApi.ChatPhotos(
            totalCount = dto.totalCount,
            photos = dto.photos.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatPosition): ChatPosition {
        return ChatPosition(
            list = map(dto.list),
            order = dto.order,
            isPinned = dto.isPinned,
            source = dto.source?.let { map(it) },
        )
    }

    fun map(dto: ChatPosition): TdApi.ChatPosition {
        return TdApi.ChatPosition(
            list = map(dto.list),
            order = dto.order,
            isPinned = dto.isPinned,
            source = dto.source?.let { map(it) },
        )
    }

    fun map(dto: TdApi.ChatRevenueAmount): ChatRevenueAmount {
        return ChatRevenueAmount(
            cryptocurrency = dto.cryptocurrency,
            totalAmount = dto.totalAmount,
            balanceAmount = dto.balanceAmount,
            availableAmount = dto.availableAmount,
            withdrawalEnabled = dto.withdrawalEnabled,
        )
    }

    fun map(dto: ChatRevenueAmount): TdApi.ChatRevenueAmount {
        return TdApi.ChatRevenueAmount(
            cryptocurrency = dto.cryptocurrency,
            totalAmount = dto.totalAmount,
            balanceAmount = dto.balanceAmount,
            availableAmount = dto.availableAmount,
            withdrawalEnabled = dto.withdrawalEnabled,
        )
    }

    fun map(dto: TdApi.ChatRevenueStatistics): ChatRevenueStatistics {
        return ChatRevenueStatistics(
            revenueByHourGraph = map(dto.revenueByHourGraph),
            revenueGraph = map(dto.revenueGraph),
            revenueAmount = map(dto.revenueAmount),
            usdRate = dto.usdRate,
        )
    }

    fun map(dto: ChatRevenueStatistics): TdApi.ChatRevenueStatistics {
        return TdApi.ChatRevenueStatistics(
            revenueByHourGraph = map(dto.revenueByHourGraph),
            revenueGraph = map(dto.revenueGraph),
            revenueAmount = map(dto.revenueAmount),
            usdRate = dto.usdRate,
        )
    }

    fun map(dto: TdApi.ChatRevenueTransaction): ChatRevenueTransaction {
        return ChatRevenueTransaction(
            cryptocurrency = dto.cryptocurrency,
            cryptocurrencyAmount = dto.cryptocurrencyAmount,
            type = map(dto.type),
        )
    }

    fun map(dto: ChatRevenueTransaction): TdApi.ChatRevenueTransaction {
        return TdApi.ChatRevenueTransaction(
            cryptocurrency = dto.cryptocurrency,
            cryptocurrencyAmount = dto.cryptocurrencyAmount,
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.ChatRevenueTransactionType): ChatRevenueTransactionType {
        when (dto) {
            is TdApi.ChatRevenueTransactionTypeEarnings -> return map(dto)
            is TdApi.ChatRevenueTransactionTypeWithdrawal -> return map(dto)
            is TdApi.ChatRevenueTransactionTypeRefund -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ChatRevenueTransactionTypeEarnings): ChatRevenueTransactionTypeEarnings {
        return ChatRevenueTransactionTypeEarnings(
            startDate = dto.startDate,
            endDate = dto.endDate,
        )
    }

    fun map(dto: TdApi.ChatRevenueTransactionTypeWithdrawal): ChatRevenueTransactionTypeWithdrawal {
        return ChatRevenueTransactionTypeWithdrawal(
            withdrawalDate = dto.withdrawalDate,
            provider = dto.provider,
            state = map(dto.state),
        )
    }

    fun map(dto: TdApi.ChatRevenueTransactionTypeRefund): ChatRevenueTransactionTypeRefund {
        return ChatRevenueTransactionTypeRefund(
            refundDate = dto.refundDate,
            provider = dto.provider,
        )
    }

    fun map(dto: ChatRevenueTransactionType): TdApi.ChatRevenueTransactionType {
        when (dto) {
            is ChatRevenueTransactionTypeEarnings -> return map(dto)
            is ChatRevenueTransactionTypeWithdrawal -> return map(dto)
            is ChatRevenueTransactionTypeRefund -> return map(dto)
        }
    }

    fun map(dto: ChatRevenueTransactionTypeEarnings): TdApi.ChatRevenueTransactionTypeEarnings {
        return TdApi.ChatRevenueTransactionTypeEarnings(
            startDate = dto.startDate,
            endDate = dto.endDate,
        )
    }

    fun map(dto: ChatRevenueTransactionTypeWithdrawal): TdApi.ChatRevenueTransactionTypeWithdrawal {
        return TdApi.ChatRevenueTransactionTypeWithdrawal(
            withdrawalDate = dto.withdrawalDate,
            provider = dto.provider,
            state = map(dto.state),
        )
    }

    fun map(dto: ChatRevenueTransactionTypeRefund): TdApi.ChatRevenueTransactionTypeRefund {
        return TdApi.ChatRevenueTransactionTypeRefund(
            refundDate = dto.refundDate,
            provider = dto.provider,
        )
    }

    fun map(dto: TdApi.ChatRevenueTransactions): ChatRevenueTransactions {
        return ChatRevenueTransactions(
            totalCount = dto.totalCount,
            transactions = dto.transactions.mapArray { map(it) },
        )
    }

    fun map(dto: ChatRevenueTransactions): TdApi.ChatRevenueTransactions {
        return TdApi.ChatRevenueTransactions(
            totalCount = dto.totalCount,
            transactions = dto.transactions.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatSource): ChatSource {
        when (dto) {
            is TdApi.ChatSourceMtprotoProxy -> return map(dto)
            is TdApi.ChatSourcePublicServiceAnnouncement -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ChatSourceMtprotoProxy): ChatSourceMtprotoProxy {
        return ChatSourceMtprotoProxy()
    }

    fun map(dto: TdApi.ChatSourcePublicServiceAnnouncement): ChatSourcePublicServiceAnnouncement {
        return ChatSourcePublicServiceAnnouncement(
            type = dto.type,
            text = dto.text,
        )
    }

    fun map(dto: ChatSource): TdApi.ChatSource {
        when (dto) {
            is ChatSourceMtprotoProxy -> return map(dto)
            is ChatSourcePublicServiceAnnouncement -> return map(dto)
        }
    }

    fun map(dto: ChatSourceMtprotoProxy): TdApi.ChatSourceMtprotoProxy {
        return TdApi.ChatSourceMtprotoProxy()
    }

    fun map(dto: ChatSourcePublicServiceAnnouncement): TdApi.ChatSourcePublicServiceAnnouncement {
        return TdApi.ChatSourcePublicServiceAnnouncement(
            type = dto.type,
            text = dto.text,
        )
    }

    fun map(dto: TdApi.ChatStatistics): ChatStatistics {
        when (dto) {
            is TdApi.ChatStatisticsSupergroup -> return map(dto)
            is TdApi.ChatStatisticsChannel -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ChatStatisticsSupergroup): ChatStatisticsSupergroup {
        return ChatStatisticsSupergroup(
            period = map(dto.period),
            memberCount = map(dto.memberCount),
            messageCount = map(dto.messageCount),
            viewerCount = map(dto.viewerCount),
            senderCount = map(dto.senderCount),
            memberCountGraph = map(dto.memberCountGraph),
            joinGraph = map(dto.joinGraph),
            joinBySourceGraph = map(dto.joinBySourceGraph),
            languageGraph = map(dto.languageGraph),
            messageContentGraph = map(dto.messageContentGraph),
            actionGraph = map(dto.actionGraph),
            dayGraph = map(dto.dayGraph),
            weekGraph = map(dto.weekGraph),
            topSenders = dto.topSenders.mapArray { map(it) },
            topAdministrators = dto.topAdministrators.mapArray { map(it) },
            topInviters = dto.topInviters.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatStatisticsChannel): ChatStatisticsChannel {
        return ChatStatisticsChannel(
            period = map(dto.period),
            memberCount = map(dto.memberCount),
            meanMessageViewCount = map(dto.meanMessageViewCount),
            meanMessageShareCount = map(dto.meanMessageShareCount),
            meanMessageReactionCount = map(dto.meanMessageReactionCount),
            meanStoryViewCount = map(dto.meanStoryViewCount),
            meanStoryShareCount = map(dto.meanStoryShareCount),
            meanStoryReactionCount = map(dto.meanStoryReactionCount),
            enabledNotificationsPercentage = dto.enabledNotificationsPercentage,
            memberCountGraph = map(dto.memberCountGraph),
            joinGraph = map(dto.joinGraph),
            muteGraph = map(dto.muteGraph),
            viewCountByHourGraph = map(dto.viewCountByHourGraph),
            viewCountBySourceGraph = map(dto.viewCountBySourceGraph),
            joinBySourceGraph = map(dto.joinBySourceGraph),
            languageGraph = map(dto.languageGraph),
            messageInteractionGraph = map(dto.messageInteractionGraph),
            messageReactionGraph = map(dto.messageReactionGraph),
            storyInteractionGraph = map(dto.storyInteractionGraph),
            storyReactionGraph = map(dto.storyReactionGraph),
            instantViewInteractionGraph = map(dto.instantViewInteractionGraph),
            recentInteractions = dto.recentInteractions.mapArray { map(it) },
        )
    }

    fun map(dto: ChatStatistics): TdApi.ChatStatistics {
        when (dto) {
            is ChatStatisticsSupergroup -> return map(dto)
            is ChatStatisticsChannel -> return map(dto)
        }
    }

    fun map(dto: ChatStatisticsSupergroup): TdApi.ChatStatisticsSupergroup {
        return TdApi.ChatStatisticsSupergroup(
            period = map(dto.period),
            memberCount = map(dto.memberCount),
            messageCount = map(dto.messageCount),
            viewerCount = map(dto.viewerCount),
            senderCount = map(dto.senderCount),
            memberCountGraph = map(dto.memberCountGraph),
            joinGraph = map(dto.joinGraph),
            joinBySourceGraph = map(dto.joinBySourceGraph),
            languageGraph = map(dto.languageGraph),
            messageContentGraph = map(dto.messageContentGraph),
            actionGraph = map(dto.actionGraph),
            dayGraph = map(dto.dayGraph),
            weekGraph = map(dto.weekGraph),
            topSenders = dto.topSenders.mapArray { map(it) },
            topAdministrators = dto.topAdministrators.mapArray { map(it) },
            topInviters = dto.topInviters.mapArray { map(it) },
        )
    }

    fun map(dto: ChatStatisticsChannel): TdApi.ChatStatisticsChannel {
        return TdApi.ChatStatisticsChannel(
            period = map(dto.period),
            memberCount = map(dto.memberCount),
            meanMessageViewCount = map(dto.meanMessageViewCount),
            meanMessageShareCount = map(dto.meanMessageShareCount),
            meanMessageReactionCount = map(dto.meanMessageReactionCount),
            meanStoryViewCount = map(dto.meanStoryViewCount),
            meanStoryShareCount = map(dto.meanStoryShareCount),
            meanStoryReactionCount = map(dto.meanStoryReactionCount),
            enabledNotificationsPercentage = dto.enabledNotificationsPercentage,
            memberCountGraph = map(dto.memberCountGraph),
            joinGraph = map(dto.joinGraph),
            muteGraph = map(dto.muteGraph),
            viewCountByHourGraph = map(dto.viewCountByHourGraph),
            viewCountBySourceGraph = map(dto.viewCountBySourceGraph),
            joinBySourceGraph = map(dto.joinBySourceGraph),
            languageGraph = map(dto.languageGraph),
            messageInteractionGraph = map(dto.messageInteractionGraph),
            messageReactionGraph = map(dto.messageReactionGraph),
            storyInteractionGraph = map(dto.storyInteractionGraph),
            storyReactionGraph = map(dto.storyReactionGraph),
            instantViewInteractionGraph = map(dto.instantViewInteractionGraph),
            recentInteractions = dto.recentInteractions.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ChatStatisticsAdministratorActionsInfo): ChatStatisticsAdministratorActionsInfo {
        return ChatStatisticsAdministratorActionsInfo(
            userId = dto.userId,
            deletedMessageCount = dto.deletedMessageCount,
            bannedUserCount = dto.bannedUserCount,
            restrictedUserCount = dto.restrictedUserCount,
        )
    }

    fun map(dto: ChatStatisticsAdministratorActionsInfo): TdApi.ChatStatisticsAdministratorActionsInfo {
        return TdApi.ChatStatisticsAdministratorActionsInfo(
            userId = dto.userId,
            deletedMessageCount = dto.deletedMessageCount,
            bannedUserCount = dto.bannedUserCount,
            restrictedUserCount = dto.restrictedUserCount,
        )
    }

    fun map(dto: TdApi.ChatStatisticsInteractionInfo): ChatStatisticsInteractionInfo {
        return ChatStatisticsInteractionInfo(
            objectType = map(dto.objectType),
            viewCount = dto.viewCount,
            forwardCount = dto.forwardCount,
            reactionCount = dto.reactionCount,
        )
    }

    fun map(dto: ChatStatisticsInteractionInfo): TdApi.ChatStatisticsInteractionInfo {
        return TdApi.ChatStatisticsInteractionInfo(
            objectType = map(dto.objectType),
            viewCount = dto.viewCount,
            forwardCount = dto.forwardCount,
            reactionCount = dto.reactionCount,
        )
    }

    fun map(dto: TdApi.ChatStatisticsInviterInfo): ChatStatisticsInviterInfo {
        return ChatStatisticsInviterInfo(
            userId = dto.userId,
            addedMemberCount = dto.addedMemberCount,
        )
    }

    fun map(dto: ChatStatisticsInviterInfo): TdApi.ChatStatisticsInviterInfo {
        return TdApi.ChatStatisticsInviterInfo(
            userId = dto.userId,
            addedMemberCount = dto.addedMemberCount,
        )
    }

    fun map(dto: TdApi.ChatStatisticsMessageSenderInfo): ChatStatisticsMessageSenderInfo {
        return ChatStatisticsMessageSenderInfo(
            userId = dto.userId,
            sentMessageCount = dto.sentMessageCount,
            averageCharacterCount = dto.averageCharacterCount,
        )
    }

    fun map(dto: ChatStatisticsMessageSenderInfo): TdApi.ChatStatisticsMessageSenderInfo {
        return TdApi.ChatStatisticsMessageSenderInfo(
            userId = dto.userId,
            sentMessageCount = dto.sentMessageCount,
            averageCharacterCount = dto.averageCharacterCount,
        )
    }

    fun map(dto: TdApi.ChatStatisticsObjectType): ChatStatisticsObjectType {
        when (dto) {
            is TdApi.ChatStatisticsObjectTypeMessage -> return map(dto)
            is TdApi.ChatStatisticsObjectTypeStory -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ChatStatisticsObjectTypeMessage): ChatStatisticsObjectTypeMessage {
        return ChatStatisticsObjectTypeMessage(
            messageId = dto.messageId,
        )
    }

    fun map(dto: TdApi.ChatStatisticsObjectTypeStory): ChatStatisticsObjectTypeStory {
        return ChatStatisticsObjectTypeStory(
            storyId = dto.storyId,
        )
    }

    fun map(dto: ChatStatisticsObjectType): TdApi.ChatStatisticsObjectType {
        when (dto) {
            is ChatStatisticsObjectTypeMessage -> return map(dto)
            is ChatStatisticsObjectTypeStory -> return map(dto)
        }
    }

    fun map(dto: ChatStatisticsObjectTypeMessage): TdApi.ChatStatisticsObjectTypeMessage {
        return TdApi.ChatStatisticsObjectTypeMessage(
            messageId = dto.messageId,
        )
    }

    fun map(dto: ChatStatisticsObjectTypeStory): TdApi.ChatStatisticsObjectTypeStory {
        return TdApi.ChatStatisticsObjectTypeStory(
            storyId = dto.storyId,
        )
    }

    fun map(dto: TdApi.ChatTheme): ChatTheme {
        return ChatTheme(
            name = dto.name,
            lightSettings = map(dto.lightSettings),
            darkSettings = map(dto.darkSettings),
        )
    }

    fun map(dto: ChatTheme): TdApi.ChatTheme {
        return TdApi.ChatTheme(
            name = dto.name,
            lightSettings = map(dto.lightSettings),
            darkSettings = map(dto.darkSettings),
        )
    }

    fun map(dto: TdApi.ChatType): ChatType {
        when (dto) {
            is TdApi.ChatTypePrivate -> return map(dto)
            is TdApi.ChatTypeBasicGroup -> return map(dto)
            is TdApi.ChatTypeSupergroup -> return map(dto)
            is TdApi.ChatTypeSecret -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ChatTypePrivate): ChatTypePrivate {
        return ChatTypePrivate(
            userId = dto.userId,
        )
    }

    fun map(dto: TdApi.ChatTypeBasicGroup): ChatTypeBasicGroup {
        return ChatTypeBasicGroup(
            basicGroupId = dto.basicGroupId,
        )
    }

    fun map(dto: TdApi.ChatTypeSupergroup): ChatTypeSupergroup {
        return ChatTypeSupergroup(
            supergroupId = dto.supergroupId,
            isChannel = dto.isChannel,
        )
    }

    fun map(dto: TdApi.ChatTypeSecret): ChatTypeSecret {
        return ChatTypeSecret(
            secretChatId = dto.secretChatId,
            userId = dto.userId,
        )
    }

    fun map(dto: ChatType): TdApi.ChatType {
        when (dto) {
            is ChatTypePrivate -> return map(dto)
            is ChatTypeBasicGroup -> return map(dto)
            is ChatTypeSupergroup -> return map(dto)
            is ChatTypeSecret -> return map(dto)
        }
    }

    fun map(dto: ChatTypePrivate): TdApi.ChatTypePrivate {
        return TdApi.ChatTypePrivate(
            userId = dto.userId,
        )
    }

    fun map(dto: ChatTypeBasicGroup): TdApi.ChatTypeBasicGroup {
        return TdApi.ChatTypeBasicGroup(
            basicGroupId = dto.basicGroupId,
        )
    }

    fun map(dto: ChatTypeSupergroup): TdApi.ChatTypeSupergroup {
        return TdApi.ChatTypeSupergroup(
            supergroupId = dto.supergroupId,
            isChannel = dto.isChannel,
        )
    }

    fun map(dto: ChatTypeSecret): TdApi.ChatTypeSecret {
        return TdApi.ChatTypeSecret(
            secretChatId = dto.secretChatId,
            userId = dto.userId,
        )
    }

    fun map(dto: TdApi.Chats): Chats {
        return Chats(
            totalCount = dto.totalCount,
            chatIds = dto.chatIds,
        )
    }

    fun map(dto: Chats): TdApi.Chats {
        return TdApi.Chats(
            totalCount = dto.totalCount,
            chatIds = dto.chatIds,
        )
    }

    fun map(dto: TdApi.CheckChatUsernameResult): CheckChatUsernameResult {
        when (dto) {
            is TdApi.CheckChatUsernameResultOk -> return map(dto)
            is TdApi.CheckChatUsernameResultUsernameInvalid -> return map(dto)
            is TdApi.CheckChatUsernameResultUsernameOccupied -> return map(dto)
            is TdApi.CheckChatUsernameResultUsernamePurchasable -> return map(dto)
            is TdApi.CheckChatUsernameResultPublicChatsTooMany -> return map(dto)
            is TdApi.CheckChatUsernameResultPublicGroupsUnavailable -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.CheckChatUsernameResultOk): CheckChatUsernameResultOk {
        return CheckChatUsernameResultOk()
    }

    fun map(dto: TdApi.CheckChatUsernameResultUsernameInvalid): CheckChatUsernameResultUsernameInvalid {
        return CheckChatUsernameResultUsernameInvalid()
    }

    fun map(dto: TdApi.CheckChatUsernameResultUsernameOccupied): CheckChatUsernameResultUsernameOccupied {
        return CheckChatUsernameResultUsernameOccupied()
    }

    fun map(dto: TdApi.CheckChatUsernameResultUsernamePurchasable): CheckChatUsernameResultUsernamePurchasable {
        return CheckChatUsernameResultUsernamePurchasable()
    }

    fun map(dto: TdApi.CheckChatUsernameResultPublicChatsTooMany): CheckChatUsernameResultPublicChatsTooMany {
        return CheckChatUsernameResultPublicChatsTooMany()
    }

    fun map(dto: TdApi.CheckChatUsernameResultPublicGroupsUnavailable): CheckChatUsernameResultPublicGroupsUnavailable {
        return CheckChatUsernameResultPublicGroupsUnavailable()
    }

    fun map(dto: CheckChatUsernameResult): TdApi.CheckChatUsernameResult {
        when (dto) {
            is CheckChatUsernameResultOk -> return map(dto)
            is CheckChatUsernameResultUsernameInvalid -> return map(dto)
            is CheckChatUsernameResultUsernameOccupied -> return map(dto)
            is CheckChatUsernameResultUsernamePurchasable -> return map(dto)
            is CheckChatUsernameResultPublicChatsTooMany -> return map(dto)
            is CheckChatUsernameResultPublicGroupsUnavailable -> return map(dto)
        }
    }

    fun map(dto: CheckChatUsernameResultOk): TdApi.CheckChatUsernameResultOk {
        return TdApi.CheckChatUsernameResultOk()
    }

    fun map(dto: CheckChatUsernameResultUsernameInvalid): TdApi.CheckChatUsernameResultUsernameInvalid {
        return TdApi.CheckChatUsernameResultUsernameInvalid()
    }

    fun map(dto: CheckChatUsernameResultUsernameOccupied): TdApi.CheckChatUsernameResultUsernameOccupied {
        return TdApi.CheckChatUsernameResultUsernameOccupied()
    }

    fun map(dto: CheckChatUsernameResultUsernamePurchasable): TdApi.CheckChatUsernameResultUsernamePurchasable {
        return TdApi.CheckChatUsernameResultUsernamePurchasable()
    }

    fun map(dto: CheckChatUsernameResultPublicChatsTooMany): TdApi.CheckChatUsernameResultPublicChatsTooMany {
        return TdApi.CheckChatUsernameResultPublicChatsTooMany()
    }

    fun map(dto: CheckChatUsernameResultPublicGroupsUnavailable): TdApi.CheckChatUsernameResultPublicGroupsUnavailable {
        return TdApi.CheckChatUsernameResultPublicGroupsUnavailable()
    }

    fun map(dto: TdApi.CheckStickerSetNameResult): CheckStickerSetNameResult {
        when (dto) {
            is TdApi.CheckStickerSetNameResultOk -> return map(dto)
            is TdApi.CheckStickerSetNameResultNameInvalid -> return map(dto)
            is TdApi.CheckStickerSetNameResultNameOccupied -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.CheckStickerSetNameResultOk): CheckStickerSetNameResultOk {
        return CheckStickerSetNameResultOk()
    }

    fun map(dto: TdApi.CheckStickerSetNameResultNameInvalid): CheckStickerSetNameResultNameInvalid {
        return CheckStickerSetNameResultNameInvalid()
    }

    fun map(dto: TdApi.CheckStickerSetNameResultNameOccupied): CheckStickerSetNameResultNameOccupied {
        return CheckStickerSetNameResultNameOccupied()
    }

    fun map(dto: CheckStickerSetNameResult): TdApi.CheckStickerSetNameResult {
        when (dto) {
            is CheckStickerSetNameResultOk -> return map(dto)
            is CheckStickerSetNameResultNameInvalid -> return map(dto)
            is CheckStickerSetNameResultNameOccupied -> return map(dto)
        }
    }

    fun map(dto: CheckStickerSetNameResultOk): TdApi.CheckStickerSetNameResultOk {
        return TdApi.CheckStickerSetNameResultOk()
    }

    fun map(dto: CheckStickerSetNameResultNameInvalid): TdApi.CheckStickerSetNameResultNameInvalid {
        return TdApi.CheckStickerSetNameResultNameInvalid()
    }

    fun map(dto: CheckStickerSetNameResultNameOccupied): TdApi.CheckStickerSetNameResultNameOccupied {
        return TdApi.CheckStickerSetNameResultNameOccupied()
    }

    fun map(dto: TdApi.Checklist): Checklist {
        return Checklist(
            title = map(dto.title),
            tasks = dto.tasks.mapArray { map(it) },
            othersCanAddTasks = dto.othersCanAddTasks,
            canAddTasks = dto.canAddTasks,
            othersCanMarkTasksAsDone = dto.othersCanMarkTasksAsDone,
            canMarkTasksAsDone = dto.canMarkTasksAsDone,
        )
    }

    fun map(dto: Checklist): TdApi.Checklist {
        return TdApi.Checklist(
            title = map(dto.title),
            tasks = dto.tasks.mapArray { map(it) },
            othersCanAddTasks = dto.othersCanAddTasks,
            canAddTasks = dto.canAddTasks,
            othersCanMarkTasksAsDone = dto.othersCanMarkTasksAsDone,
            canMarkTasksAsDone = dto.canMarkTasksAsDone,
        )
    }

    fun map(dto: TdApi.ChecklistTask): ChecklistTask {
        return ChecklistTask(
            id = dto.id,
            text = map(dto.text),
            completedByUserId = dto.completedByUserId,
            completionDate = dto.completionDate,
        )
    }

    fun map(dto: ChecklistTask): TdApi.ChecklistTask {
        return TdApi.ChecklistTask(
            id = dto.id,
            text = map(dto.text),
            completedByUserId = dto.completedByUserId,
            completionDate = dto.completionDate,
        )
    }

    fun map(dto: TdApi.CloseBirthdayUser): CloseBirthdayUser {
        return CloseBirthdayUser(
            userId = dto.userId,
            birthdate = map(dto.birthdate),
        )
    }

    fun map(dto: CloseBirthdayUser): TdApi.CloseBirthdayUser {
        return TdApi.CloseBirthdayUser(
            userId = dto.userId,
            birthdate = map(dto.birthdate),
        )
    }

    fun map(dto: TdApi.ClosedVectorPath): ClosedVectorPath {
        return ClosedVectorPath(
            commands = dto.commands.mapArray { map(it) },
        )
    }

    fun map(dto: ClosedVectorPath): TdApi.ClosedVectorPath {
        return TdApi.ClosedVectorPath(
            commands = dto.commands.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.CollectibleItemInfo): CollectibleItemInfo {
        return CollectibleItemInfo(
            purchaseDate = dto.purchaseDate,
            currency = dto.currency,
            amount = dto.amount,
            cryptocurrency = dto.cryptocurrency,
            cryptocurrencyAmount = dto.cryptocurrencyAmount,
            url = dto.url,
        )
    }

    fun map(dto: CollectibleItemInfo): TdApi.CollectibleItemInfo {
        return TdApi.CollectibleItemInfo(
            purchaseDate = dto.purchaseDate,
            currency = dto.currency,
            amount = dto.amount,
            cryptocurrency = dto.cryptocurrency,
            cryptocurrencyAmount = dto.cryptocurrencyAmount,
            url = dto.url,
        )
    }

    fun map(dto: TdApi.CollectibleItemType): CollectibleItemType {
        when (dto) {
            is TdApi.CollectibleItemTypeUsername -> return map(dto)
            is TdApi.CollectibleItemTypePhoneNumber -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.CollectibleItemTypeUsername): CollectibleItemTypeUsername {
        return CollectibleItemTypeUsername(
            username = dto.username,
        )
    }

    fun map(dto: TdApi.CollectibleItemTypePhoneNumber): CollectibleItemTypePhoneNumber {
        return CollectibleItemTypePhoneNumber(
            phoneNumber = dto.phoneNumber,
        )
    }

    fun map(dto: CollectibleItemType): TdApi.CollectibleItemType {
        when (dto) {
            is CollectibleItemTypeUsername -> return map(dto)
            is CollectibleItemTypePhoneNumber -> return map(dto)
        }
    }

    fun map(dto: CollectibleItemTypeUsername): TdApi.CollectibleItemTypeUsername {
        return TdApi.CollectibleItemTypeUsername(
            username = dto.username,
        )
    }

    fun map(dto: CollectibleItemTypePhoneNumber): TdApi.CollectibleItemTypePhoneNumber {
        return TdApi.CollectibleItemTypePhoneNumber(
            phoneNumber = dto.phoneNumber,
        )
    }

    fun map(dto: TdApi.ConnectedAffiliateProgram): ConnectedAffiliateProgram {
        return ConnectedAffiliateProgram(
            url = dto.url,
            botUserId = dto.botUserId,
            parameters = map(dto.parameters),
            connectionDate = dto.connectionDate,
            isDisconnected = dto.isDisconnected,
            userCount = dto.userCount,
            revenueStarCount = dto.revenueStarCount,
        )
    }

    fun map(dto: ConnectedAffiliateProgram): TdApi.ConnectedAffiliateProgram {
        return TdApi.ConnectedAffiliateProgram(
            url = dto.url,
            botUserId = dto.botUserId,
            parameters = map(dto.parameters),
            connectionDate = dto.connectionDate,
            isDisconnected = dto.isDisconnected,
            userCount = dto.userCount,
            revenueStarCount = dto.revenueStarCount,
        )
    }

    fun map(dto: TdApi.ConnectedAffiliatePrograms): ConnectedAffiliatePrograms {
        return ConnectedAffiliatePrograms(
            totalCount = dto.totalCount,
            programs = dto.programs.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: ConnectedAffiliatePrograms): TdApi.ConnectedAffiliatePrograms {
        return TdApi.ConnectedAffiliatePrograms(
            totalCount = dto.totalCount,
            programs = dto.programs.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.ConnectedWebsite): ConnectedWebsite {
        return ConnectedWebsite(
            id = dto.id,
            domainName = dto.domainName,
            botUserId = dto.botUserId,
            browser = dto.browser,
            platform = dto.platform,
            logInDate = dto.logInDate,
            lastActiveDate = dto.lastActiveDate,
            ipAddress = dto.ipAddress,
            location = dto.location,
        )
    }

    fun map(dto: ConnectedWebsite): TdApi.ConnectedWebsite {
        return TdApi.ConnectedWebsite(
            id = dto.id,
            domainName = dto.domainName,
            botUserId = dto.botUserId,
            browser = dto.browser,
            platform = dto.platform,
            logInDate = dto.logInDate,
            lastActiveDate = dto.lastActiveDate,
            ipAddress = dto.ipAddress,
            location = dto.location,
        )
    }

    fun map(dto: TdApi.ConnectedWebsites): ConnectedWebsites {
        return ConnectedWebsites(
            websites = dto.websites.mapArray { map(it) },
        )
    }

    fun map(dto: ConnectedWebsites): TdApi.ConnectedWebsites {
        return TdApi.ConnectedWebsites(
            websites = dto.websites.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ConnectionState): ConnectionState {
        when (dto) {
            is TdApi.ConnectionStateWaitingForNetwork -> return map(dto)
            is TdApi.ConnectionStateConnectingToProxy -> return map(dto)
            is TdApi.ConnectionStateConnecting -> return map(dto)
            is TdApi.ConnectionStateUpdating -> return map(dto)
            is TdApi.ConnectionStateReady -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ConnectionStateWaitingForNetwork): ConnectionStateWaitingForNetwork {
        return ConnectionStateWaitingForNetwork()
    }

    fun map(dto: TdApi.ConnectionStateConnectingToProxy): ConnectionStateConnectingToProxy {
        return ConnectionStateConnectingToProxy()
    }

    fun map(dto: TdApi.ConnectionStateConnecting): ConnectionStateConnecting {
        return ConnectionStateConnecting()
    }

    fun map(dto: TdApi.ConnectionStateUpdating): ConnectionStateUpdating {
        return ConnectionStateUpdating()
    }

    fun map(dto: TdApi.ConnectionStateReady): ConnectionStateReady {
        return ConnectionStateReady()
    }

    fun map(dto: ConnectionState): TdApi.ConnectionState {
        when (dto) {
            is ConnectionStateWaitingForNetwork -> return map(dto)
            is ConnectionStateConnectingToProxy -> return map(dto)
            is ConnectionStateConnecting -> return map(dto)
            is ConnectionStateUpdating -> return map(dto)
            is ConnectionStateReady -> return map(dto)
        }
    }

    fun map(dto: ConnectionStateWaitingForNetwork): TdApi.ConnectionStateWaitingForNetwork {
        return TdApi.ConnectionStateWaitingForNetwork()
    }

    fun map(dto: ConnectionStateConnectingToProxy): TdApi.ConnectionStateConnectingToProxy {
        return TdApi.ConnectionStateConnectingToProxy()
    }

    fun map(dto: ConnectionStateConnecting): TdApi.ConnectionStateConnecting {
        return TdApi.ConnectionStateConnecting()
    }

    fun map(dto: ConnectionStateUpdating): TdApi.ConnectionStateUpdating {
        return TdApi.ConnectionStateUpdating()
    }

    fun map(dto: ConnectionStateReady): TdApi.ConnectionStateReady {
        return TdApi.ConnectionStateReady()
    }

    fun map(dto: TdApi.Contact): Contact {
        return Contact(
            phoneNumber = dto.phoneNumber,
            firstName = dto.firstName,
            lastName = dto.lastName,
            vcard = dto.vcard,
            userId = dto.userId,
        )
    }

    fun map(dto: Contact): TdApi.Contact {
        return TdApi.Contact(
            phoneNumber = dto.phoneNumber,
            firstName = dto.firstName,
            lastName = dto.lastName,
            vcard = dto.vcard,
            userId = dto.userId,
        )
    }

    fun map(dto: TdApi.Count): Count {
        return Count(
            count = dto.count,
        )
    }

    fun map(dto: Count): TdApi.Count {
        return TdApi.Count(
            count = dto.count,
        )
    }

    fun map(dto: TdApi.Countries): Countries {
        return Countries(
            countries = dto.countries.mapArray { map(it) },
        )
    }

    fun map(dto: Countries): TdApi.Countries {
        return TdApi.Countries(
            countries = dto.countries.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.CountryInfo): CountryInfo {
        return CountryInfo(
            countryCode = dto.countryCode,
            name = dto.name,
            englishName = dto.englishName,
            isHidden = dto.isHidden,
            callingCodes = dto.callingCodes,
        )
    }

    fun map(dto: CountryInfo): TdApi.CountryInfo {
        return TdApi.CountryInfo(
            countryCode = dto.countryCode,
            name = dto.name,
            englishName = dto.englishName,
            isHidden = dto.isHidden,
            callingCodes = dto.callingCodes,
        )
    }

    fun map(dto: TdApi.CreatedBasicGroupChat): CreatedBasicGroupChat {
        return CreatedBasicGroupChat(
            chatId = dto.chatId,
            failedToAddMembers = map(dto.failedToAddMembers),
        )
    }

    fun map(dto: CreatedBasicGroupChat): TdApi.CreatedBasicGroupChat {
        return TdApi.CreatedBasicGroupChat(
            chatId = dto.chatId,
            failedToAddMembers = map(dto.failedToAddMembers),
        )
    }

    fun map(dto: TdApi.CurrentWeather): CurrentWeather {
        return CurrentWeather(
            temperature = dto.temperature,
            emoji = dto.emoji,
        )
    }

    fun map(dto: CurrentWeather): TdApi.CurrentWeather {
        return TdApi.CurrentWeather(
            temperature = dto.temperature,
            emoji = dto.emoji,
        )
    }

    fun map(dto: TdApi.CustomRequestResult): CustomRequestResult {
        return CustomRequestResult(
            result = dto.result,
        )
    }

    fun map(dto: CustomRequestResult): TdApi.CustomRequestResult {
        return TdApi.CustomRequestResult(
            result = dto.result,
        )
    }

    fun map(dto: TdApi.Data): Data {
        return Data(
            data = dto.data,
        )
    }

    fun map(dto: Data): TdApi.Data {
        return TdApi.Data(
            data = dto.data,
        )
    }

    fun map(dto: TdApi.DatabaseStatistics): DatabaseStatistics {
        return DatabaseStatistics(
            statistics = dto.statistics,
        )
    }

    fun map(dto: DatabaseStatistics): TdApi.DatabaseStatistics {
        return TdApi.DatabaseStatistics(
            statistics = dto.statistics,
        )
    }

    fun map(dto: TdApi.Date): Date {
        return Date(
            day = dto.day,
            month = dto.month,
            year = dto.year,
        )
    }

    fun map(dto: Date): TdApi.Date {
        return TdApi.Date(
            day = dto.day,
            month = dto.month,
            year = dto.year,
        )
    }

    fun map(dto: TdApi.DateRange): DateRange {
        return DateRange(
            startDate = dto.startDate,
            endDate = dto.endDate,
        )
    }

    fun map(dto: DateRange): TdApi.DateRange {
        return TdApi.DateRange(
            startDate = dto.startDate,
            endDate = dto.endDate,
        )
    }

    fun map(dto: TdApi.DatedFile): DatedFile {
        return DatedFile(
            file = map(dto.file),
            date = dto.date,
        )
    }

    fun map(dto: DatedFile): TdApi.DatedFile {
        return TdApi.DatedFile(
            file = map(dto.file),
            date = dto.date,
        )
    }

    fun map(dto: TdApi.DeepLinkInfo): DeepLinkInfo {
        return DeepLinkInfo(
            text = map(dto.text),
            needUpdateApplication = dto.needUpdateApplication,
        )
    }

    fun map(dto: DeepLinkInfo): TdApi.DeepLinkInfo {
        return TdApi.DeepLinkInfo(
            text = map(dto.text),
            needUpdateApplication = dto.needUpdateApplication,
        )
    }

    fun map(dto: TdApi.DeviceToken): DeviceToken {
        when (dto) {
            is TdApi.DeviceTokenFirebaseCloudMessaging -> return map(dto)
            is TdApi.DeviceTokenApplePush -> return map(dto)
            is TdApi.DeviceTokenApplePushVoIP -> return map(dto)
            is TdApi.DeviceTokenWindowsPush -> return map(dto)
            is TdApi.DeviceTokenMicrosoftPush -> return map(dto)
            is TdApi.DeviceTokenMicrosoftPushVoIP -> return map(dto)
            is TdApi.DeviceTokenWebPush -> return map(dto)
            is TdApi.DeviceTokenSimplePush -> return map(dto)
            is TdApi.DeviceTokenUbuntuPush -> return map(dto)
            is TdApi.DeviceTokenBlackBerryPush -> return map(dto)
            is TdApi.DeviceTokenTizenPush -> return map(dto)
            is TdApi.DeviceTokenHuaweiPush -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.DeviceTokenFirebaseCloudMessaging): DeviceTokenFirebaseCloudMessaging {
        return DeviceTokenFirebaseCloudMessaging(
            token = dto.token,
            encrypt = dto.encrypt,
        )
    }

    fun map(dto: TdApi.DeviceTokenApplePush): DeviceTokenApplePush {
        return DeviceTokenApplePush(
            deviceToken = dto.deviceToken,
            isAppSandbox = dto.isAppSandbox,
        )
    }

    fun map(dto: TdApi.DeviceTokenApplePushVoIP): DeviceTokenApplePushVoIP {
        return DeviceTokenApplePushVoIP(
            deviceToken = dto.deviceToken,
            isAppSandbox = dto.isAppSandbox,
            encrypt = dto.encrypt,
        )
    }

    fun map(dto: TdApi.DeviceTokenWindowsPush): DeviceTokenWindowsPush {
        return DeviceTokenWindowsPush(
            accessToken = dto.accessToken,
        )
    }

    fun map(dto: TdApi.DeviceTokenMicrosoftPush): DeviceTokenMicrosoftPush {
        return DeviceTokenMicrosoftPush(
            channelUri = dto.channelUri,
        )
    }

    fun map(dto: TdApi.DeviceTokenMicrosoftPushVoIP): DeviceTokenMicrosoftPushVoIP {
        return DeviceTokenMicrosoftPushVoIP(
            channelUri = dto.channelUri,
        )
    }

    fun map(dto: TdApi.DeviceTokenWebPush): DeviceTokenWebPush {
        return DeviceTokenWebPush(
            endpoint = dto.endpoint,
            p256dhBase64url = dto.p256dhBase64url,
            authBase64url = dto.authBase64url,
        )
    }

    fun map(dto: TdApi.DeviceTokenSimplePush): DeviceTokenSimplePush {
        return DeviceTokenSimplePush(
            endpoint = dto.endpoint,
        )
    }

    fun map(dto: TdApi.DeviceTokenUbuntuPush): DeviceTokenUbuntuPush {
        return DeviceTokenUbuntuPush(
            token = dto.token,
        )
    }

    fun map(dto: TdApi.DeviceTokenBlackBerryPush): DeviceTokenBlackBerryPush {
        return DeviceTokenBlackBerryPush(
            token = dto.token,
        )
    }

    fun map(dto: TdApi.DeviceTokenTizenPush): DeviceTokenTizenPush {
        return DeviceTokenTizenPush(
            regId = dto.regId,
        )
    }

    fun map(dto: TdApi.DeviceTokenHuaweiPush): DeviceTokenHuaweiPush {
        return DeviceTokenHuaweiPush(
            token = dto.token,
            encrypt = dto.encrypt,
        )
    }

    fun map(dto: DeviceToken): TdApi.DeviceToken {
        when (dto) {
            is DeviceTokenFirebaseCloudMessaging -> return map(dto)
            is DeviceTokenApplePush -> return map(dto)
            is DeviceTokenApplePushVoIP -> return map(dto)
            is DeviceTokenWindowsPush -> return map(dto)
            is DeviceTokenMicrosoftPush -> return map(dto)
            is DeviceTokenMicrosoftPushVoIP -> return map(dto)
            is DeviceTokenWebPush -> return map(dto)
            is DeviceTokenSimplePush -> return map(dto)
            is DeviceTokenUbuntuPush -> return map(dto)
            is DeviceTokenBlackBerryPush -> return map(dto)
            is DeviceTokenTizenPush -> return map(dto)
            is DeviceTokenHuaweiPush -> return map(dto)
        }
    }

    fun map(dto: DeviceTokenFirebaseCloudMessaging): TdApi.DeviceTokenFirebaseCloudMessaging {
        return TdApi.DeviceTokenFirebaseCloudMessaging(
            token = dto.token,
            encrypt = dto.encrypt,
        )
    }

    fun map(dto: DeviceTokenApplePush): TdApi.DeviceTokenApplePush {
        return TdApi.DeviceTokenApplePush(
            deviceToken = dto.deviceToken,
            isAppSandbox = dto.isAppSandbox,
        )
    }

    fun map(dto: DeviceTokenApplePushVoIP): TdApi.DeviceTokenApplePushVoIP {
        return TdApi.DeviceTokenApplePushVoIP(
            deviceToken = dto.deviceToken,
            isAppSandbox = dto.isAppSandbox,
            encrypt = dto.encrypt,
        )
    }

    fun map(dto: DeviceTokenWindowsPush): TdApi.DeviceTokenWindowsPush {
        return TdApi.DeviceTokenWindowsPush(
            accessToken = dto.accessToken,
        )
    }

    fun map(dto: DeviceTokenMicrosoftPush): TdApi.DeviceTokenMicrosoftPush {
        return TdApi.DeviceTokenMicrosoftPush(
            channelUri = dto.channelUri,
        )
    }

    fun map(dto: DeviceTokenMicrosoftPushVoIP): TdApi.DeviceTokenMicrosoftPushVoIP {
        return TdApi.DeviceTokenMicrosoftPushVoIP(
            channelUri = dto.channelUri,
        )
    }

    fun map(dto: DeviceTokenWebPush): TdApi.DeviceTokenWebPush {
        return TdApi.DeviceTokenWebPush(
            endpoint = dto.endpoint,
            p256dhBase64url = dto.p256dhBase64url,
            authBase64url = dto.authBase64url,
        )
    }

    fun map(dto: DeviceTokenSimplePush): TdApi.DeviceTokenSimplePush {
        return TdApi.DeviceTokenSimplePush(
            endpoint = dto.endpoint,
        )
    }

    fun map(dto: DeviceTokenUbuntuPush): TdApi.DeviceTokenUbuntuPush {
        return TdApi.DeviceTokenUbuntuPush(
            token = dto.token,
        )
    }

    fun map(dto: DeviceTokenBlackBerryPush): TdApi.DeviceTokenBlackBerryPush {
        return TdApi.DeviceTokenBlackBerryPush(
            token = dto.token,
        )
    }

    fun map(dto: DeviceTokenTizenPush): TdApi.DeviceTokenTizenPush {
        return TdApi.DeviceTokenTizenPush(
            regId = dto.regId,
        )
    }

    fun map(dto: DeviceTokenHuaweiPush): TdApi.DeviceTokenHuaweiPush {
        return TdApi.DeviceTokenHuaweiPush(
            token = dto.token,
            encrypt = dto.encrypt,
        )
    }

    fun map(dto: TdApi.DiceStickers): DiceStickers {
        when (dto) {
            is TdApi.DiceStickersRegular -> return map(dto)
            is TdApi.DiceStickersSlotMachine -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.DiceStickersRegular): DiceStickersRegular {
        return DiceStickersRegular(
            sticker = map(dto.sticker),
        )
    }

    fun map(dto: TdApi.DiceStickersSlotMachine): DiceStickersSlotMachine {
        return DiceStickersSlotMachine(
            background = map(dto.background),
            lever = map(dto.lever),
            leftReel = map(dto.leftReel),
            centerReel = map(dto.centerReel),
            rightReel = map(dto.rightReel),
        )
    }

    fun map(dto: DiceStickers): TdApi.DiceStickers {
        when (dto) {
            is DiceStickersRegular -> return map(dto)
            is DiceStickersSlotMachine -> return map(dto)
        }
    }

    fun map(dto: DiceStickersRegular): TdApi.DiceStickersRegular {
        return TdApi.DiceStickersRegular(
            sticker = map(dto.sticker),
        )
    }

    fun map(dto: DiceStickersSlotMachine): TdApi.DiceStickersSlotMachine {
        return TdApi.DiceStickersSlotMachine(
            background = map(dto.background),
            lever = map(dto.lever),
            leftReel = map(dto.leftReel),
            centerReel = map(dto.centerReel),
            rightReel = map(dto.rightReel),
        )
    }

    fun map(dto: TdApi.DirectMessagesChatTopic): DirectMessagesChatTopic {
        return DirectMessagesChatTopic(
            chatId = dto.chatId,
            id = dto.id,
            senderId = map(dto.senderId),
            order = dto.order,
            canSendUnpaidMessages = dto.canSendUnpaidMessages,
            isMarkedAsUnread = dto.isMarkedAsUnread,
            unreadCount = dto.unreadCount,
            lastReadInboxMessageId = dto.lastReadInboxMessageId,
            lastReadOutboxMessageId = dto.lastReadOutboxMessageId,
            unreadReactionCount = dto.unreadReactionCount,
            lastMessage = dto.lastMessage?.let { map(it) },
            draftMessage = dto.draftMessage?.let { map(it) },
        )
    }

    fun map(dto: DirectMessagesChatTopic): TdApi.DirectMessagesChatTopic {
        return TdApi.DirectMessagesChatTopic(
            chatId = dto.chatId,
            id = dto.id,
            senderId = map(dto.senderId),
            order = dto.order,
            canSendUnpaidMessages = dto.canSendUnpaidMessages,
            isMarkedAsUnread = dto.isMarkedAsUnread,
            unreadCount = dto.unreadCount,
            lastReadInboxMessageId = dto.lastReadInboxMessageId,
            lastReadOutboxMessageId = dto.lastReadOutboxMessageId,
            unreadReactionCount = dto.unreadReactionCount,
            lastMessage = dto.lastMessage?.let { map(it) },
            draftMessage = dto.draftMessage?.let { map(it) },
        )
    }

    fun map(dto: TdApi.Document): Document {
        return Document(
            fileName = dto.fileName,
            mimeType = dto.mimeType,
            minithumbnail = dto.minithumbnail?.let { map(it) },
            thumbnail = dto.thumbnail?.let { map(it) },
            document = map(dto.document),
        )
    }

    fun map(dto: Document): TdApi.Document {
        return TdApi.Document(
            fileName = dto.fileName,
            mimeType = dto.mimeType,
            minithumbnail = dto.minithumbnail?.let { map(it) },
            thumbnail = dto.thumbnail?.let { map(it) },
            document = map(dto.document),
        )
    }

    fun map(dto: TdApi.DownloadedFileCounts): DownloadedFileCounts {
        return DownloadedFileCounts(
            activeCount = dto.activeCount,
            pausedCount = dto.pausedCount,
            completedCount = dto.completedCount,
        )
    }

    fun map(dto: DownloadedFileCounts): TdApi.DownloadedFileCounts {
        return TdApi.DownloadedFileCounts(
            activeCount = dto.activeCount,
            pausedCount = dto.pausedCount,
            completedCount = dto.completedCount,
        )
    }

    fun map(dto: TdApi.DraftMessage): DraftMessage {
        return DraftMessage(
            replyTo = dto.replyTo?.let { map(it) },
            date = dto.date,
            inputMessageText = map(dto.inputMessageText),
            effectId = dto.effectId,
        )
    }

    fun map(dto: DraftMessage): TdApi.DraftMessage {
        return TdApi.DraftMessage(
            replyTo = dto.replyTo?.let { map(it) },
            date = dto.date,
            inputMessageText = map(dto.inputMessageText),
            effectId = dto.effectId,
        )
    }

    fun map(dto: TdApi.EmailAddressAuthentication): EmailAddressAuthentication {
        when (dto) {
            is TdApi.EmailAddressAuthenticationCode -> return map(dto)
            is TdApi.EmailAddressAuthenticationAppleId -> return map(dto)
            is TdApi.EmailAddressAuthenticationGoogleId -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.EmailAddressAuthenticationCode): EmailAddressAuthenticationCode {
        return EmailAddressAuthenticationCode(
            code = dto.code,
        )
    }

    fun map(dto: TdApi.EmailAddressAuthenticationAppleId): EmailAddressAuthenticationAppleId {
        return EmailAddressAuthenticationAppleId(
            token = dto.token,
        )
    }

    fun map(dto: TdApi.EmailAddressAuthenticationGoogleId): EmailAddressAuthenticationGoogleId {
        return EmailAddressAuthenticationGoogleId(
            token = dto.token,
        )
    }

    fun map(dto: EmailAddressAuthentication): TdApi.EmailAddressAuthentication {
        when (dto) {
            is EmailAddressAuthenticationCode -> return map(dto)
            is EmailAddressAuthenticationAppleId -> return map(dto)
            is EmailAddressAuthenticationGoogleId -> return map(dto)
        }
    }

    fun map(dto: EmailAddressAuthenticationCode): TdApi.EmailAddressAuthenticationCode {
        return TdApi.EmailAddressAuthenticationCode(
            code = dto.code,
        )
    }

    fun map(dto: EmailAddressAuthenticationAppleId): TdApi.EmailAddressAuthenticationAppleId {
        return TdApi.EmailAddressAuthenticationAppleId(
            token = dto.token,
        )
    }

    fun map(dto: EmailAddressAuthenticationGoogleId): TdApi.EmailAddressAuthenticationGoogleId {
        return TdApi.EmailAddressAuthenticationGoogleId(
            token = dto.token,
        )
    }

    fun map(dto: TdApi.EmailAddressAuthenticationCodeInfo): EmailAddressAuthenticationCodeInfo {
        return EmailAddressAuthenticationCodeInfo(
            emailAddressPattern = dto.emailAddressPattern,
            length = dto.length,
        )
    }

    fun map(dto: EmailAddressAuthenticationCodeInfo): TdApi.EmailAddressAuthenticationCodeInfo {
        return TdApi.EmailAddressAuthenticationCodeInfo(
            emailAddressPattern = dto.emailAddressPattern,
            length = dto.length,
        )
    }

    fun map(dto: TdApi.EmailAddressResetState): EmailAddressResetState {
        when (dto) {
            is TdApi.EmailAddressResetStateAvailable -> return map(dto)
            is TdApi.EmailAddressResetStatePending -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.EmailAddressResetStateAvailable): EmailAddressResetStateAvailable {
        return EmailAddressResetStateAvailable(
            waitPeriod = dto.waitPeriod,
        )
    }

    fun map(dto: TdApi.EmailAddressResetStatePending): EmailAddressResetStatePending {
        return EmailAddressResetStatePending(
            resetIn = dto.resetIn,
        )
    }

    fun map(dto: EmailAddressResetState): TdApi.EmailAddressResetState {
        when (dto) {
            is EmailAddressResetStateAvailable -> return map(dto)
            is EmailAddressResetStatePending -> return map(dto)
        }
    }

    fun map(dto: EmailAddressResetStateAvailable): TdApi.EmailAddressResetStateAvailable {
        return TdApi.EmailAddressResetStateAvailable(
            waitPeriod = dto.waitPeriod,
        )
    }

    fun map(dto: EmailAddressResetStatePending): TdApi.EmailAddressResetStatePending {
        return TdApi.EmailAddressResetStatePending(
            resetIn = dto.resetIn,
        )
    }

    fun map(dto: TdApi.EmojiCategories): EmojiCategories {
        return EmojiCategories(
            categories = dto.categories.mapArray { map(it) },
        )
    }

    fun map(dto: EmojiCategories): TdApi.EmojiCategories {
        return TdApi.EmojiCategories(
            categories = dto.categories.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.EmojiCategory): EmojiCategory {
        return EmojiCategory(
            name = dto.name,
            icon = map(dto.icon),
            source = map(dto.source),
            isGreeting = dto.isGreeting,
        )
    }

    fun map(dto: EmojiCategory): TdApi.EmojiCategory {
        return TdApi.EmojiCategory(
            name = dto.name,
            icon = map(dto.icon),
            source = map(dto.source),
            isGreeting = dto.isGreeting,
        )
    }

    fun map(dto: TdApi.EmojiCategorySource): EmojiCategorySource {
        when (dto) {
            is TdApi.EmojiCategorySourceSearch -> return map(dto)
            is TdApi.EmojiCategorySourcePremium -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.EmojiCategorySourceSearch): EmojiCategorySourceSearch {
        return EmojiCategorySourceSearch(
            emojis = dto.emojis,
        )
    }

    fun map(dto: TdApi.EmojiCategorySourcePremium): EmojiCategorySourcePremium {
        return EmojiCategorySourcePremium()
    }

    fun map(dto: EmojiCategorySource): TdApi.EmojiCategorySource {
        when (dto) {
            is EmojiCategorySourceSearch -> return map(dto)
            is EmojiCategorySourcePremium -> return map(dto)
        }
    }

    fun map(dto: EmojiCategorySourceSearch): TdApi.EmojiCategorySourceSearch {
        return TdApi.EmojiCategorySourceSearch(
            emojis = dto.emojis,
        )
    }

    fun map(dto: EmojiCategorySourcePremium): TdApi.EmojiCategorySourcePremium {
        return TdApi.EmojiCategorySourcePremium()
    }

    fun map(dto: TdApi.EmojiCategoryType): EmojiCategoryType {
        when (dto) {
            is TdApi.EmojiCategoryTypeDefault -> return map(dto)
            is TdApi.EmojiCategoryTypeRegularStickers -> return map(dto)
            is TdApi.EmojiCategoryTypeEmojiStatus -> return map(dto)
            is TdApi.EmojiCategoryTypeChatPhoto -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.EmojiCategoryTypeDefault): EmojiCategoryTypeDefault {
        return EmojiCategoryTypeDefault()
    }

    fun map(dto: TdApi.EmojiCategoryTypeRegularStickers): EmojiCategoryTypeRegularStickers {
        return EmojiCategoryTypeRegularStickers()
    }

    fun map(dto: TdApi.EmojiCategoryTypeEmojiStatus): EmojiCategoryTypeEmojiStatus {
        return EmojiCategoryTypeEmojiStatus()
    }

    fun map(dto: TdApi.EmojiCategoryTypeChatPhoto): EmojiCategoryTypeChatPhoto {
        return EmojiCategoryTypeChatPhoto()
    }

    fun map(dto: EmojiCategoryType): TdApi.EmojiCategoryType {
        when (dto) {
            is EmojiCategoryTypeDefault -> return map(dto)
            is EmojiCategoryTypeRegularStickers -> return map(dto)
            is EmojiCategoryTypeEmojiStatus -> return map(dto)
            is EmojiCategoryTypeChatPhoto -> return map(dto)
        }
    }

    fun map(dto: EmojiCategoryTypeDefault): TdApi.EmojiCategoryTypeDefault {
        return TdApi.EmojiCategoryTypeDefault()
    }

    fun map(dto: EmojiCategoryTypeRegularStickers): TdApi.EmojiCategoryTypeRegularStickers {
        return TdApi.EmojiCategoryTypeRegularStickers()
    }

    fun map(dto: EmojiCategoryTypeEmojiStatus): TdApi.EmojiCategoryTypeEmojiStatus {
        return TdApi.EmojiCategoryTypeEmojiStatus()
    }

    fun map(dto: EmojiCategoryTypeChatPhoto): TdApi.EmojiCategoryTypeChatPhoto {
        return TdApi.EmojiCategoryTypeChatPhoto()
    }

    fun map(dto: TdApi.EmojiKeyword): EmojiKeyword {
        return EmojiKeyword(
            emoji = dto.emoji,
            keyword = dto.keyword,
        )
    }

    fun map(dto: EmojiKeyword): TdApi.EmojiKeyword {
        return TdApi.EmojiKeyword(
            emoji = dto.emoji,
            keyword = dto.keyword,
        )
    }

    fun map(dto: TdApi.EmojiKeywords): EmojiKeywords {
        return EmojiKeywords(
            emojiKeywords = dto.emojiKeywords.mapArray { map(it) },
        )
    }

    fun map(dto: EmojiKeywords): TdApi.EmojiKeywords {
        return TdApi.EmojiKeywords(
            emojiKeywords = dto.emojiKeywords.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.EmojiReaction): EmojiReaction {
        return EmojiReaction(
            emoji = dto.emoji,
            title = dto.title,
            isActive = dto.isActive,
            staticIcon = map(dto.staticIcon),
            appearAnimation = map(dto.appearAnimation),
            selectAnimation = map(dto.selectAnimation),
            activateAnimation = map(dto.activateAnimation),
            effectAnimation = map(dto.effectAnimation),
            aroundAnimation = dto.aroundAnimation?.let { map(it) },
            centerAnimation = dto.centerAnimation?.let { map(it) },
        )
    }

    fun map(dto: EmojiReaction): TdApi.EmojiReaction {
        return TdApi.EmojiReaction(
            emoji = dto.emoji,
            title = dto.title,
            isActive = dto.isActive,
            staticIcon = map(dto.staticIcon),
            appearAnimation = map(dto.appearAnimation),
            selectAnimation = map(dto.selectAnimation),
            activateAnimation = map(dto.activateAnimation),
            effectAnimation = map(dto.effectAnimation),
            aroundAnimation = dto.aroundAnimation?.let { map(it) },
            centerAnimation = dto.centerAnimation?.let { map(it) },
        )
    }

    fun map(dto: TdApi.EmojiStatus): EmojiStatus {
        return EmojiStatus(
            type = map(dto.type),
            expirationDate = dto.expirationDate,
        )
    }

    fun map(dto: EmojiStatus): TdApi.EmojiStatus {
        return TdApi.EmojiStatus(
            type = map(dto.type),
            expirationDate = dto.expirationDate,
        )
    }

    fun map(dto: TdApi.EmojiStatusCustomEmojis): EmojiStatusCustomEmojis {
        return EmojiStatusCustomEmojis(
            customEmojiIds = dto.customEmojiIds,
        )
    }

    fun map(dto: EmojiStatusCustomEmojis): TdApi.EmojiStatusCustomEmojis {
        return TdApi.EmojiStatusCustomEmojis(
            customEmojiIds = dto.customEmojiIds,
        )
    }

    fun map(dto: TdApi.EmojiStatusType): EmojiStatusType {
        when (dto) {
            is TdApi.EmojiStatusTypeCustomEmoji -> return map(dto)
            is TdApi.EmojiStatusTypeUpgradedGift -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.EmojiStatusTypeCustomEmoji): EmojiStatusTypeCustomEmoji {
        return EmojiStatusTypeCustomEmoji(
            customEmojiId = dto.customEmojiId,
        )
    }

    fun map(dto: TdApi.EmojiStatusTypeUpgradedGift): EmojiStatusTypeUpgradedGift {
        return EmojiStatusTypeUpgradedGift(
            upgradedGiftId = dto.upgradedGiftId,
            giftTitle = dto.giftTitle,
            giftName = dto.giftName,
            modelCustomEmojiId = dto.modelCustomEmojiId,
            symbolCustomEmojiId = dto.symbolCustomEmojiId,
            backdropColors = map(dto.backdropColors),
        )
    }

    fun map(dto: EmojiStatusType): TdApi.EmojiStatusType {
        when (dto) {
            is EmojiStatusTypeCustomEmoji -> return map(dto)
            is EmojiStatusTypeUpgradedGift -> return map(dto)
        }
    }

    fun map(dto: EmojiStatusTypeCustomEmoji): TdApi.EmojiStatusTypeCustomEmoji {
        return TdApi.EmojiStatusTypeCustomEmoji(
            customEmojiId = dto.customEmojiId,
        )
    }

    fun map(dto: EmojiStatusTypeUpgradedGift): TdApi.EmojiStatusTypeUpgradedGift {
        return TdApi.EmojiStatusTypeUpgradedGift(
            upgradedGiftId = dto.upgradedGiftId,
            giftTitle = dto.giftTitle,
            giftName = dto.giftName,
            modelCustomEmojiId = dto.modelCustomEmojiId,
            symbolCustomEmojiId = dto.symbolCustomEmojiId,
            backdropColors = map(dto.backdropColors),
        )
    }

    fun map(dto: TdApi.EmojiStatuses): EmojiStatuses {
        return EmojiStatuses(
            emojiStatuses = dto.emojiStatuses.mapArray { map(it) },
        )
    }

    fun map(dto: EmojiStatuses): TdApi.EmojiStatuses {
        return TdApi.EmojiStatuses(
            emojiStatuses = dto.emojiStatuses.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.Emojis): Emojis {
        return Emojis(
            emojis = dto.emojis,
        )
    }

    fun map(dto: Emojis): TdApi.Emojis {
        return TdApi.Emojis(
            emojis = dto.emojis,
        )
    }

    fun map(dto: TdApi.EncryptedCredentials): EncryptedCredentials {
        return EncryptedCredentials(
            data = dto.data,
            hash = dto.hash,
            secret = dto.secret,
        )
    }

    fun map(dto: EncryptedCredentials): TdApi.EncryptedCredentials {
        return TdApi.EncryptedCredentials(
            data = dto.data,
            hash = dto.hash,
            secret = dto.secret,
        )
    }

    fun map(dto: TdApi.EncryptedPassportElement): EncryptedPassportElement {
        return EncryptedPassportElement(
            type = map(dto.type),
            data = dto.data,
            frontSide = map(dto.frontSide),
            reverseSide = dto.reverseSide?.let { map(it) },
            selfie = dto.selfie?.let { map(it) },
            translation = dto.translation.mapArray { map(it) },
            files = dto.files.mapArray { map(it) },
            value = dto.value,
            hash = dto.hash,
        )
    }

    fun map(dto: EncryptedPassportElement): TdApi.EncryptedPassportElement {
        return TdApi.EncryptedPassportElement(
            type = map(dto.type),
            data = dto.data,
            frontSide = map(dto.frontSide),
            reverseSide = dto.reverseSide?.let { map(it) },
            selfie = dto.selfie?.let { map(it) },
            translation = dto.translation.mapArray { map(it) },
            files = dto.files.mapArray { map(it) },
            value = dto.value,
            hash = dto.hash,
        )
    }

    fun map(dto: TdApi.Error): Error {
        return Error(
            code = dto.code,
            message = dto.message,
        )
    }

    fun map(dto: Error): TdApi.Error {
        return TdApi.Error(
            code = dto.code,
            message = dto.message,
        )
    }

    fun map(dto: TdApi.FactCheck): FactCheck {
        return FactCheck(
            text = map(dto.text),
            countryCode = dto.countryCode,
        )
    }

    fun map(dto: FactCheck): TdApi.FactCheck {
        return TdApi.FactCheck(
            text = map(dto.text),
            countryCode = dto.countryCode,
        )
    }

    fun map(dto: TdApi.FailedToAddMember): FailedToAddMember {
        return FailedToAddMember(
            userId = dto.userId,
            premiumWouldAllowInvite = dto.premiumWouldAllowInvite,
            premiumRequiredToSendMessages = dto.premiumRequiredToSendMessages,
        )
    }

    fun map(dto: FailedToAddMember): TdApi.FailedToAddMember {
        return TdApi.FailedToAddMember(
            userId = dto.userId,
            premiumWouldAllowInvite = dto.premiumWouldAllowInvite,
            premiumRequiredToSendMessages = dto.premiumRequiredToSendMessages,
        )
    }

    fun map(dto: TdApi.FailedToAddMembers): FailedToAddMembers {
        return FailedToAddMembers(
            failedToAddMembers = dto.failedToAddMembers.mapArray { map(it) },
        )
    }

    fun map(dto: FailedToAddMembers): TdApi.FailedToAddMembers {
        return TdApi.FailedToAddMembers(
            failedToAddMembers = dto.failedToAddMembers.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.File): File {
        return File(
            id = dto.id,
            size = dto.size,
            expectedSize = dto.expectedSize,
            local = map(dto.local),
            remote = map(dto.remote),
        )
    }

    fun map(dto: File): TdApi.File {
        return TdApi.File(
            id = dto.id,
            size = dto.size,
            expectedSize = dto.expectedSize,
            local = map(dto.local),
            remote = map(dto.remote),
        )
    }

    fun map(dto: TdApi.FileDownload): FileDownload {
        return FileDownload(
            fileId = dto.fileId,
            message = map(dto.message),
            addDate = dto.addDate,
            completeDate = dto.completeDate,
            isPaused = dto.isPaused,
        )
    }

    fun map(dto: FileDownload): TdApi.FileDownload {
        return TdApi.FileDownload(
            fileId = dto.fileId,
            message = map(dto.message),
            addDate = dto.addDate,
            completeDate = dto.completeDate,
            isPaused = dto.isPaused,
        )
    }

    fun map(dto: TdApi.FileDownloadedPrefixSize): FileDownloadedPrefixSize {
        return FileDownloadedPrefixSize(
            size = dto.size,
        )
    }

    fun map(dto: FileDownloadedPrefixSize): TdApi.FileDownloadedPrefixSize {
        return TdApi.FileDownloadedPrefixSize(
            size = dto.size,
        )
    }

    fun map(dto: TdApi.FileType): FileType {
        when (dto) {
            is TdApi.FileTypeNone -> return map(dto)
            is TdApi.FileTypeAnimation -> return map(dto)
            is TdApi.FileTypeAudio -> return map(dto)
            is TdApi.FileTypeDocument -> return map(dto)
            is TdApi.FileTypeNotificationSound -> return map(dto)
            is TdApi.FileTypePhoto -> return map(dto)
            is TdApi.FileTypePhotoStory -> return map(dto)
            is TdApi.FileTypeProfilePhoto -> return map(dto)
            is TdApi.FileTypeSecret -> return map(dto)
            is TdApi.FileTypeSecretThumbnail -> return map(dto)
            is TdApi.FileTypeSecure -> return map(dto)
            is TdApi.FileTypeSelfDestructingPhoto -> return map(dto)
            is TdApi.FileTypeSelfDestructingVideo -> return map(dto)
            is TdApi.FileTypeSelfDestructingVideoNote -> return map(dto)
            is TdApi.FileTypeSelfDestructingVoiceNote -> return map(dto)
            is TdApi.FileTypeSticker -> return map(dto)
            is TdApi.FileTypeThumbnail -> return map(dto)
            is TdApi.FileTypeUnknown -> return map(dto)
            is TdApi.FileTypeVideo -> return map(dto)
            is TdApi.FileTypeVideoNote -> return map(dto)
            is TdApi.FileTypeVideoStory -> return map(dto)
            is TdApi.FileTypeVoiceNote -> return map(dto)
            is TdApi.FileTypeWallpaper -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.FileTypeNone): FileTypeNone {
        return FileTypeNone()
    }

    fun map(dto: TdApi.FileTypeAnimation): FileTypeAnimation {
        return FileTypeAnimation()
    }

    fun map(dto: TdApi.FileTypeAudio): FileTypeAudio {
        return FileTypeAudio()
    }

    fun map(dto: TdApi.FileTypeDocument): FileTypeDocument {
        return FileTypeDocument()
    }

    fun map(dto: TdApi.FileTypeNotificationSound): FileTypeNotificationSound {
        return FileTypeNotificationSound()
    }

    fun map(dto: TdApi.FileTypePhoto): FileTypePhoto {
        return FileTypePhoto()
    }

    fun map(dto: TdApi.FileTypePhotoStory): FileTypePhotoStory {
        return FileTypePhotoStory()
    }

    fun map(dto: TdApi.FileTypeProfilePhoto): FileTypeProfilePhoto {
        return FileTypeProfilePhoto()
    }

    fun map(dto: TdApi.FileTypeSecret): FileTypeSecret {
        return FileTypeSecret()
    }

    fun map(dto: TdApi.FileTypeSecretThumbnail): FileTypeSecretThumbnail {
        return FileTypeSecretThumbnail()
    }

    fun map(dto: TdApi.FileTypeSecure): FileTypeSecure {
        return FileTypeSecure()
    }

    fun map(dto: TdApi.FileTypeSelfDestructingPhoto): FileTypeSelfDestructingPhoto {
        return FileTypeSelfDestructingPhoto()
    }

    fun map(dto: TdApi.FileTypeSelfDestructingVideo): FileTypeSelfDestructingVideo {
        return FileTypeSelfDestructingVideo()
    }

    fun map(dto: TdApi.FileTypeSelfDestructingVideoNote): FileTypeSelfDestructingVideoNote {
        return FileTypeSelfDestructingVideoNote()
    }

    fun map(dto: TdApi.FileTypeSelfDestructingVoiceNote): FileTypeSelfDestructingVoiceNote {
        return FileTypeSelfDestructingVoiceNote()
    }

    fun map(dto: TdApi.FileTypeSticker): FileTypeSticker {
        return FileTypeSticker()
    }

    fun map(dto: TdApi.FileTypeThumbnail): FileTypeThumbnail {
        return FileTypeThumbnail()
    }

    fun map(dto: TdApi.FileTypeUnknown): FileTypeUnknown {
        return FileTypeUnknown()
    }

    fun map(dto: TdApi.FileTypeVideo): FileTypeVideo {
        return FileTypeVideo()
    }

    fun map(dto: TdApi.FileTypeVideoNote): FileTypeVideoNote {
        return FileTypeVideoNote()
    }

    fun map(dto: TdApi.FileTypeVideoStory): FileTypeVideoStory {
        return FileTypeVideoStory()
    }

    fun map(dto: TdApi.FileTypeVoiceNote): FileTypeVoiceNote {
        return FileTypeVoiceNote()
    }

    fun map(dto: TdApi.FileTypeWallpaper): FileTypeWallpaper {
        return FileTypeWallpaper()
    }

    fun map(dto: FileType): TdApi.FileType {
        when (dto) {
            is FileTypeNone -> return map(dto)
            is FileTypeAnimation -> return map(dto)
            is FileTypeAudio -> return map(dto)
            is FileTypeDocument -> return map(dto)
            is FileTypeNotificationSound -> return map(dto)
            is FileTypePhoto -> return map(dto)
            is FileTypePhotoStory -> return map(dto)
            is FileTypeProfilePhoto -> return map(dto)
            is FileTypeSecret -> return map(dto)
            is FileTypeSecretThumbnail -> return map(dto)
            is FileTypeSecure -> return map(dto)
            is FileTypeSelfDestructingPhoto -> return map(dto)
            is FileTypeSelfDestructingVideo -> return map(dto)
            is FileTypeSelfDestructingVideoNote -> return map(dto)
            is FileTypeSelfDestructingVoiceNote -> return map(dto)
            is FileTypeSticker -> return map(dto)
            is FileTypeThumbnail -> return map(dto)
            is FileTypeUnknown -> return map(dto)
            is FileTypeVideo -> return map(dto)
            is FileTypeVideoNote -> return map(dto)
            is FileTypeVideoStory -> return map(dto)
            is FileTypeVoiceNote -> return map(dto)
            is FileTypeWallpaper -> return map(dto)
        }
    }

    fun map(dto: FileTypeNone): TdApi.FileTypeNone {
        return TdApi.FileTypeNone()
    }

    fun map(dto: FileTypeAnimation): TdApi.FileTypeAnimation {
        return TdApi.FileTypeAnimation()
    }

    fun map(dto: FileTypeAudio): TdApi.FileTypeAudio {
        return TdApi.FileTypeAudio()
    }

    fun map(dto: FileTypeDocument): TdApi.FileTypeDocument {
        return TdApi.FileTypeDocument()
    }

    fun map(dto: FileTypeNotificationSound): TdApi.FileTypeNotificationSound {
        return TdApi.FileTypeNotificationSound()
    }

    fun map(dto: FileTypePhoto): TdApi.FileTypePhoto {
        return TdApi.FileTypePhoto()
    }

    fun map(dto: FileTypePhotoStory): TdApi.FileTypePhotoStory {
        return TdApi.FileTypePhotoStory()
    }

    fun map(dto: FileTypeProfilePhoto): TdApi.FileTypeProfilePhoto {
        return TdApi.FileTypeProfilePhoto()
    }

    fun map(dto: FileTypeSecret): TdApi.FileTypeSecret {
        return TdApi.FileTypeSecret()
    }

    fun map(dto: FileTypeSecretThumbnail): TdApi.FileTypeSecretThumbnail {
        return TdApi.FileTypeSecretThumbnail()
    }

    fun map(dto: FileTypeSecure): TdApi.FileTypeSecure {
        return TdApi.FileTypeSecure()
    }

    fun map(dto: FileTypeSelfDestructingPhoto): TdApi.FileTypeSelfDestructingPhoto {
        return TdApi.FileTypeSelfDestructingPhoto()
    }

    fun map(dto: FileTypeSelfDestructingVideo): TdApi.FileTypeSelfDestructingVideo {
        return TdApi.FileTypeSelfDestructingVideo()
    }

    fun map(dto: FileTypeSelfDestructingVideoNote): TdApi.FileTypeSelfDestructingVideoNote {
        return TdApi.FileTypeSelfDestructingVideoNote()
    }

    fun map(dto: FileTypeSelfDestructingVoiceNote): TdApi.FileTypeSelfDestructingVoiceNote {
        return TdApi.FileTypeSelfDestructingVoiceNote()
    }

    fun map(dto: FileTypeSticker): TdApi.FileTypeSticker {
        return TdApi.FileTypeSticker()
    }

    fun map(dto: FileTypeThumbnail): TdApi.FileTypeThumbnail {
        return TdApi.FileTypeThumbnail()
    }

    fun map(dto: FileTypeUnknown): TdApi.FileTypeUnknown {
        return TdApi.FileTypeUnknown()
    }

    fun map(dto: FileTypeVideo): TdApi.FileTypeVideo {
        return TdApi.FileTypeVideo()
    }

    fun map(dto: FileTypeVideoNote): TdApi.FileTypeVideoNote {
        return TdApi.FileTypeVideoNote()
    }

    fun map(dto: FileTypeVideoStory): TdApi.FileTypeVideoStory {
        return TdApi.FileTypeVideoStory()
    }

    fun map(dto: FileTypeVoiceNote): TdApi.FileTypeVoiceNote {
        return TdApi.FileTypeVoiceNote()
    }

    fun map(dto: FileTypeWallpaper): TdApi.FileTypeWallpaper {
        return TdApi.FileTypeWallpaper()
    }

    fun map(dto: TdApi.FirebaseAuthenticationSettings): FirebaseAuthenticationSettings {
        when (dto) {
            is TdApi.FirebaseAuthenticationSettingsAndroid -> return map(dto)
            is TdApi.FirebaseAuthenticationSettingsIos -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.FirebaseAuthenticationSettingsAndroid): FirebaseAuthenticationSettingsAndroid {
        return FirebaseAuthenticationSettingsAndroid()
    }

    fun map(dto: TdApi.FirebaseAuthenticationSettingsIos): FirebaseAuthenticationSettingsIos {
        return FirebaseAuthenticationSettingsIos(
            deviceToken = dto.deviceToken,
            isAppSandbox = dto.isAppSandbox,
        )
    }

    fun map(dto: FirebaseAuthenticationSettings): TdApi.FirebaseAuthenticationSettings {
        when (dto) {
            is FirebaseAuthenticationSettingsAndroid -> return map(dto)
            is FirebaseAuthenticationSettingsIos -> return map(dto)
        }
    }

    fun map(dto: FirebaseAuthenticationSettingsAndroid): TdApi.FirebaseAuthenticationSettingsAndroid {
        return TdApi.FirebaseAuthenticationSettingsAndroid()
    }

    fun map(dto: FirebaseAuthenticationSettingsIos): TdApi.FirebaseAuthenticationSettingsIos {
        return TdApi.FirebaseAuthenticationSettingsIos(
            deviceToken = dto.deviceToken,
            isAppSandbox = dto.isAppSandbox,
        )
    }

    fun map(dto: TdApi.FirebaseDeviceVerificationParameters): FirebaseDeviceVerificationParameters {
        when (dto) {
            is TdApi.FirebaseDeviceVerificationParametersSafetyNet -> return map(dto)
            is TdApi.FirebaseDeviceVerificationParametersPlayIntegrity -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.FirebaseDeviceVerificationParametersSafetyNet): FirebaseDeviceVerificationParametersSafetyNet {
        return FirebaseDeviceVerificationParametersSafetyNet(
            nonce = dto.nonce,
        )
    }

    fun map(dto: TdApi.FirebaseDeviceVerificationParametersPlayIntegrity): FirebaseDeviceVerificationParametersPlayIntegrity {
        return FirebaseDeviceVerificationParametersPlayIntegrity(
            nonce = dto.nonce,
            cloudProjectNumber = dto.cloudProjectNumber,
        )
    }

    fun map(dto: FirebaseDeviceVerificationParameters): TdApi.FirebaseDeviceVerificationParameters {
        when (dto) {
            is FirebaseDeviceVerificationParametersSafetyNet -> return map(dto)
            is FirebaseDeviceVerificationParametersPlayIntegrity -> return map(dto)
        }
    }

    fun map(dto: FirebaseDeviceVerificationParametersSafetyNet): TdApi.FirebaseDeviceVerificationParametersSafetyNet {
        return TdApi.FirebaseDeviceVerificationParametersSafetyNet(
            nonce = dto.nonce,
        )
    }

    fun map(dto: FirebaseDeviceVerificationParametersPlayIntegrity): TdApi.FirebaseDeviceVerificationParametersPlayIntegrity {
        return TdApi.FirebaseDeviceVerificationParametersPlayIntegrity(
            nonce = dto.nonce,
            cloudProjectNumber = dto.cloudProjectNumber,
        )
    }

    fun map(dto: TdApi.FormattedText): FormattedText {
        return FormattedText(
            text = dto.text,
            entities = dto.entities.mapArray { map(it) },
        )
    }

    fun map(dto: FormattedText): TdApi.FormattedText {
        return TdApi.FormattedText(
            text = dto.text,
            entities = dto.entities.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ForumTopic): ForumTopic {
        return ForumTopic(
            info = map(dto.info),
            lastMessage = dto.lastMessage?.let { map(it) },
            order = dto.order,
            isPinned = dto.isPinned,
            unreadCount = dto.unreadCount,
            lastReadInboxMessageId = dto.lastReadInboxMessageId,
            lastReadOutboxMessageId = dto.lastReadOutboxMessageId,
            unreadMentionCount = dto.unreadMentionCount,
            unreadReactionCount = dto.unreadReactionCount,
            notificationSettings = map(dto.notificationSettings),
            draftMessage = dto.draftMessage?.let { map(it) },
        )
    }

    fun map(dto: ForumTopic): TdApi.ForumTopic {
        return TdApi.ForumTopic(
            info = map(dto.info),
            lastMessage = dto.lastMessage?.let { map(it) },
            order = dto.order,
            isPinned = dto.isPinned,
            unreadCount = dto.unreadCount,
            lastReadInboxMessageId = dto.lastReadInboxMessageId,
            lastReadOutboxMessageId = dto.lastReadOutboxMessageId,
            unreadMentionCount = dto.unreadMentionCount,
            unreadReactionCount = dto.unreadReactionCount,
            notificationSettings = map(dto.notificationSettings),
            draftMessage = dto.draftMessage?.let { map(it) },
        )
    }

    fun map(dto: TdApi.ForumTopicIcon): ForumTopicIcon {
        return ForumTopicIcon(
            color = dto.color,
            customEmojiId = dto.customEmojiId,
        )
    }

    fun map(dto: ForumTopicIcon): TdApi.ForumTopicIcon {
        return TdApi.ForumTopicIcon(
            color = dto.color,
            customEmojiId = dto.customEmojiId,
        )
    }

    fun map(dto: TdApi.ForumTopicInfo): ForumTopicInfo {
        return ForumTopicInfo(
            chatId = dto.chatId,
            forumTopicId = dto.forumTopicId,
            messageThreadId = dto.messageThreadId,
            name = dto.name,
            icon = map(dto.icon),
            creationDate = dto.creationDate,
            creatorId = map(dto.creatorId),
            isGeneral = dto.isGeneral,
            isOutgoing = dto.isOutgoing,
            isClosed = dto.isClosed,
            isHidden = dto.isHidden,
        )
    }

    fun map(dto: ForumTopicInfo): TdApi.ForumTopicInfo {
        return TdApi.ForumTopicInfo(
            chatId = dto.chatId,
            forumTopicId = dto.forumTopicId,
            messageThreadId = dto.messageThreadId,
            name = dto.name,
            icon = map(dto.icon),
            creationDate = dto.creationDate,
            creatorId = map(dto.creatorId),
            isGeneral = dto.isGeneral,
            isOutgoing = dto.isOutgoing,
            isClosed = dto.isClosed,
            isHidden = dto.isHidden,
        )
    }

    fun map(dto: TdApi.ForumTopics): ForumTopics {
        return ForumTopics(
            totalCount = dto.totalCount,
            topics = dto.topics.mapArray { map(it) },
            nextOffsetDate = dto.nextOffsetDate,
            nextOffsetMessageId = dto.nextOffsetMessageId,
            nextOffsetMessageThreadId = dto.nextOffsetMessageThreadId,
        )
    }

    fun map(dto: ForumTopics): TdApi.ForumTopics {
        return TdApi.ForumTopics(
            totalCount = dto.totalCount,
            topics = dto.topics.mapArray { map(it) },
            nextOffsetDate = dto.nextOffsetDate,
            nextOffsetMessageId = dto.nextOffsetMessageId,
            nextOffsetMessageThreadId = dto.nextOffsetMessageThreadId,
        )
    }

    fun map(dto: TdApi.ForwardSource): ForwardSource {
        return ForwardSource(
            chatId = dto.chatId,
            messageId = dto.messageId,
            senderId = dto.senderId?.let { map(it) },
            senderName = dto.senderName,
            date = dto.date,
            isOutgoing = dto.isOutgoing,
        )
    }

    fun map(dto: ForwardSource): TdApi.ForwardSource {
        return TdApi.ForwardSource(
            chatId = dto.chatId,
            messageId = dto.messageId,
            senderId = dto.senderId?.let { map(it) },
            senderName = dto.senderName,
            date = dto.date,
            isOutgoing = dto.isOutgoing,
        )
    }

    fun map(dto: TdApi.FoundAffiliateProgram): FoundAffiliateProgram {
        return FoundAffiliateProgram(
            botUserId = dto.botUserId,
            info = map(dto.info),
        )
    }

    fun map(dto: FoundAffiliateProgram): TdApi.FoundAffiliateProgram {
        return TdApi.FoundAffiliateProgram(
            botUserId = dto.botUserId,
            info = map(dto.info),
        )
    }

    fun map(dto: TdApi.FoundAffiliatePrograms): FoundAffiliatePrograms {
        return FoundAffiliatePrograms(
            totalCount = dto.totalCount,
            programs = dto.programs.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: FoundAffiliatePrograms): TdApi.FoundAffiliatePrograms {
        return TdApi.FoundAffiliatePrograms(
            totalCount = dto.totalCount,
            programs = dto.programs.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.FoundChatBoosts): FoundChatBoosts {
        return FoundChatBoosts(
            totalCount = dto.totalCount,
            boosts = dto.boosts.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: FoundChatBoosts): TdApi.FoundChatBoosts {
        return TdApi.FoundChatBoosts(
            totalCount = dto.totalCount,
            boosts = dto.boosts.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.FoundChatMessages): FoundChatMessages {
        return FoundChatMessages(
            totalCount = dto.totalCount,
            messages = dto.messages.mapArray { map(it) },
            nextFromMessageId = dto.nextFromMessageId,
        )
    }

    fun map(dto: FoundChatMessages): TdApi.FoundChatMessages {
        return TdApi.FoundChatMessages(
            totalCount = dto.totalCount,
            messages = dto.messages.mapArray { map(it) },
            nextFromMessageId = dto.nextFromMessageId,
        )
    }

    fun map(dto: TdApi.FoundFileDownloads): FoundFileDownloads {
        return FoundFileDownloads(
            totalCounts = map(dto.totalCounts),
            files = dto.files.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: FoundFileDownloads): TdApi.FoundFileDownloads {
        return TdApi.FoundFileDownloads(
            totalCounts = map(dto.totalCounts),
            files = dto.files.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.FoundMessages): FoundMessages {
        return FoundMessages(
            totalCount = dto.totalCount,
            messages = dto.messages.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: FoundMessages): TdApi.FoundMessages {
        return TdApi.FoundMessages(
            totalCount = dto.totalCount,
            messages = dto.messages.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.FoundPosition): FoundPosition {
        return FoundPosition(
            position = dto.position,
        )
    }

    fun map(dto: FoundPosition): TdApi.FoundPosition {
        return TdApi.FoundPosition(
            position = dto.position,
        )
    }

    fun map(dto: TdApi.FoundPositions): FoundPositions {
        return FoundPositions(
            totalCount = dto.totalCount,
            positions = dto.positions,
        )
    }

    fun map(dto: FoundPositions): TdApi.FoundPositions {
        return TdApi.FoundPositions(
            totalCount = dto.totalCount,
            positions = dto.positions,
        )
    }

    fun map(dto: TdApi.FoundStories): FoundStories {
        return FoundStories(
            totalCount = dto.totalCount,
            stories = dto.stories.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: FoundStories): TdApi.FoundStories {
        return TdApi.FoundStories(
            totalCount = dto.totalCount,
            stories = dto.stories.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.FoundUsers): FoundUsers {
        return FoundUsers(
            userIds = dto.userIds,
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: FoundUsers): TdApi.FoundUsers {
        return TdApi.FoundUsers(
            userIds = dto.userIds,
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.FoundWebApp): FoundWebApp {
        return FoundWebApp(
            webApp = map(dto.webApp),
            requestWriteAccess = dto.requestWriteAccess,
            skipConfirmation = dto.skipConfirmation,
        )
    }

    fun map(dto: FoundWebApp): TdApi.FoundWebApp {
        return TdApi.FoundWebApp(
            webApp = map(dto.webApp),
            requestWriteAccess = dto.requestWriteAccess,
            skipConfirmation = dto.skipConfirmation,
        )
    }

    fun map(dto: TdApi.Game): Game {
        return Game(
            id = dto.id,
            shortName = dto.shortName,
            title = dto.title,
            text = map(dto.text),
            description = dto.description,
            photo = map(dto.photo),
            animation = dto.animation?.let { map(it) },
        )
    }

    fun map(dto: Game): TdApi.Game {
        return TdApi.Game(
            id = dto.id,
            shortName = dto.shortName,
            title = dto.title,
            text = map(dto.text),
            description = dto.description,
            photo = map(dto.photo),
            animation = dto.animation?.let { map(it) },
        )
    }

    fun map(dto: TdApi.GameHighScore): GameHighScore {
        return GameHighScore(
            position = dto.position,
            userId = dto.userId,
            score = dto.score,
        )
    }

    fun map(dto: GameHighScore): TdApi.GameHighScore {
        return TdApi.GameHighScore(
            position = dto.position,
            userId = dto.userId,
            score = dto.score,
        )
    }

    fun map(dto: TdApi.GameHighScores): GameHighScores {
        return GameHighScores(
            scores = dto.scores.mapArray { map(it) },
        )
    }

    fun map(dto: GameHighScores): TdApi.GameHighScores {
        return TdApi.GameHighScores(
            scores = dto.scores.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.Gift): Gift {
        return Gift(
            id = dto.id,
            sticker = map(dto.sticker),
            starCount = dto.starCount,
            defaultSellStarCount = dto.defaultSellStarCount,
            upgradeStarCount = dto.upgradeStarCount,
            isForBirthday = dto.isForBirthday,
            remainingCount = dto.remainingCount,
            totalCount = dto.totalCount,
            firstSendDate = dto.firstSendDate,
            lastSendDate = dto.lastSendDate,
        )
    }

    fun map(dto: Gift): TdApi.Gift {
        return TdApi.Gift(
            id = dto.id,
            sticker = map(dto.sticker),
            starCount = dto.starCount,
            defaultSellStarCount = dto.defaultSellStarCount,
            upgradeStarCount = dto.upgradeStarCount,
            isForBirthday = dto.isForBirthday,
            remainingCount = dto.remainingCount,
            totalCount = dto.totalCount,
            firstSendDate = dto.firstSendDate,
            lastSendDate = dto.lastSendDate,
        )
    }

    fun map(dto: TdApi.GiftForResale): GiftForResale {
        return GiftForResale(
            gift = map(dto.gift),
            receivedGiftId = dto.receivedGiftId,
        )
    }

    fun map(dto: GiftForResale): TdApi.GiftForResale {
        return TdApi.GiftForResale(
            gift = map(dto.gift),
            receivedGiftId = dto.receivedGiftId,
        )
    }

    fun map(dto: TdApi.GiftForResaleOrder): GiftForResaleOrder {
        when (dto) {
            is TdApi.GiftForResaleOrderPrice -> return map(dto)
            is TdApi.GiftForResaleOrderPriceChangeDate -> return map(dto)
            is TdApi.GiftForResaleOrderNumber -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.GiftForResaleOrderPrice): GiftForResaleOrderPrice {
        return GiftForResaleOrderPrice()
    }

    fun map(dto: TdApi.GiftForResaleOrderPriceChangeDate): GiftForResaleOrderPriceChangeDate {
        return GiftForResaleOrderPriceChangeDate()
    }

    fun map(dto: TdApi.GiftForResaleOrderNumber): GiftForResaleOrderNumber {
        return GiftForResaleOrderNumber()
    }

    fun map(dto: GiftForResaleOrder): TdApi.GiftForResaleOrder {
        when (dto) {
            is GiftForResaleOrderPrice -> return map(dto)
            is GiftForResaleOrderPriceChangeDate -> return map(dto)
            is GiftForResaleOrderNumber -> return map(dto)
        }
    }

    fun map(dto: GiftForResaleOrderPrice): TdApi.GiftForResaleOrderPrice {
        return TdApi.GiftForResaleOrderPrice()
    }

    fun map(dto: GiftForResaleOrderPriceChangeDate): TdApi.GiftForResaleOrderPriceChangeDate {
        return TdApi.GiftForResaleOrderPriceChangeDate()
    }

    fun map(dto: GiftForResaleOrderNumber): TdApi.GiftForResaleOrderNumber {
        return TdApi.GiftForResaleOrderNumber()
    }

    fun map(dto: TdApi.GiftSettings): GiftSettings {
        return GiftSettings(
            showGiftButton = dto.showGiftButton,
            acceptedGiftTypes = map(dto.acceptedGiftTypes),
        )
    }

    fun map(dto: GiftSettings): TdApi.GiftSettings {
        return TdApi.GiftSettings(
            showGiftButton = dto.showGiftButton,
            acceptedGiftTypes = map(dto.acceptedGiftTypes),
        )
    }

    fun map(dto: TdApi.GiftUpgradePreview): GiftUpgradePreview {
        return GiftUpgradePreview(
            models = dto.models.mapArray { map(it) },
            symbols = dto.symbols.mapArray { map(it) },
            backdrops = dto.backdrops.mapArray { map(it) },
        )
    }

    fun map(dto: GiftUpgradePreview): TdApi.GiftUpgradePreview {
        return TdApi.GiftUpgradePreview(
            models = dto.models.mapArray { map(it) },
            symbols = dto.symbols.mapArray { map(it) },
            backdrops = dto.backdrops.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.GiftsForResale): GiftsForResale {
        return GiftsForResale(
            totalCount = dto.totalCount,
            gifts = dto.gifts.mapArray { map(it) },
            models = dto.models.mapArray { map(it) },
            symbols = dto.symbols.mapArray { map(it) },
            backdrops = dto.backdrops.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: GiftsForResale): TdApi.GiftsForResale {
        return TdApi.GiftsForResale(
            totalCount = dto.totalCount,
            gifts = dto.gifts.mapArray { map(it) },
            models = dto.models.mapArray { map(it) },
            symbols = dto.symbols.mapArray { map(it) },
            backdrops = dto.backdrops.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.GiveawayInfo): GiveawayInfo {
        when (dto) {
            is TdApi.GiveawayInfoOngoing -> return map(dto)
            is TdApi.GiveawayInfoCompleted -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.GiveawayInfoOngoing): GiveawayInfoOngoing {
        return GiveawayInfoOngoing(
            creationDate = dto.creationDate,
            status = map(dto.status),
            isEnded = dto.isEnded,
        )
    }

    fun map(dto: TdApi.GiveawayInfoCompleted): GiveawayInfoCompleted {
        return GiveawayInfoCompleted(
            creationDate = dto.creationDate,
            actualWinnersSelectionDate = dto.actualWinnersSelectionDate,
            wasRefunded = dto.wasRefunded,
            isWinner = dto.isWinner,
            winnerCount = dto.winnerCount,
            activationCount = dto.activationCount,
            giftCode = dto.giftCode,
            wonStarCount = dto.wonStarCount,
        )
    }

    fun map(dto: GiveawayInfo): TdApi.GiveawayInfo {
        when (dto) {
            is GiveawayInfoOngoing -> return map(dto)
            is GiveawayInfoCompleted -> return map(dto)
        }
    }

    fun map(dto: GiveawayInfoOngoing): TdApi.GiveawayInfoOngoing {
        return TdApi.GiveawayInfoOngoing(
            creationDate = dto.creationDate,
            status = map(dto.status),
            isEnded = dto.isEnded,
        )
    }

    fun map(dto: GiveawayInfoCompleted): TdApi.GiveawayInfoCompleted {
        return TdApi.GiveawayInfoCompleted(
            creationDate = dto.creationDate,
            actualWinnersSelectionDate = dto.actualWinnersSelectionDate,
            wasRefunded = dto.wasRefunded,
            isWinner = dto.isWinner,
            winnerCount = dto.winnerCount,
            activationCount = dto.activationCount,
            giftCode = dto.giftCode,
            wonStarCount = dto.wonStarCount,
        )
    }

    fun map(dto: TdApi.GiveawayParameters): GiveawayParameters {
        return GiveawayParameters(
            boostedChatId = dto.boostedChatId,
            additionalChatIds = dto.additionalChatIds,
            winnersSelectionDate = dto.winnersSelectionDate,
            onlyNewMembers = dto.onlyNewMembers,
            hasPublicWinners = dto.hasPublicWinners,
            countryCodes = dto.countryCodes,
            prizeDescription = dto.prizeDescription,
        )
    }

    fun map(dto: GiveawayParameters): TdApi.GiveawayParameters {
        return TdApi.GiveawayParameters(
            boostedChatId = dto.boostedChatId,
            additionalChatIds = dto.additionalChatIds,
            winnersSelectionDate = dto.winnersSelectionDate,
            onlyNewMembers = dto.onlyNewMembers,
            hasPublicWinners = dto.hasPublicWinners,
            countryCodes = dto.countryCodes,
            prizeDescription = dto.prizeDescription,
        )
    }

    fun map(dto: TdApi.GiveawayParticipantStatus): GiveawayParticipantStatus {
        when (dto) {
            is TdApi.GiveawayParticipantStatusEligible -> return map(dto)
            is TdApi.GiveawayParticipantStatusParticipating -> return map(dto)
            is TdApi.GiveawayParticipantStatusAlreadyWasMember -> return map(dto)
            is TdApi.GiveawayParticipantStatusAdministrator -> return map(dto)
            is TdApi.GiveawayParticipantStatusDisallowedCountry -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.GiveawayParticipantStatusEligible): GiveawayParticipantStatusEligible {
        return GiveawayParticipantStatusEligible()
    }

    fun map(dto: TdApi.GiveawayParticipantStatusParticipating): GiveawayParticipantStatusParticipating {
        return GiveawayParticipantStatusParticipating()
    }

    fun map(dto: TdApi.GiveawayParticipantStatusAlreadyWasMember): GiveawayParticipantStatusAlreadyWasMember {
        return GiveawayParticipantStatusAlreadyWasMember(
            joinedChatDate = dto.joinedChatDate,
        )
    }

    fun map(dto: TdApi.GiveawayParticipantStatusAdministrator): GiveawayParticipantStatusAdministrator {
        return GiveawayParticipantStatusAdministrator(
            chatId = dto.chatId,
        )
    }

    fun map(dto: TdApi.GiveawayParticipantStatusDisallowedCountry): GiveawayParticipantStatusDisallowedCountry {
        return GiveawayParticipantStatusDisallowedCountry(
            userCountryCode = dto.userCountryCode,
        )
    }

    fun map(dto: GiveawayParticipantStatus): TdApi.GiveawayParticipantStatus {
        when (dto) {
            is GiveawayParticipantStatusEligible -> return map(dto)
            is GiveawayParticipantStatusParticipating -> return map(dto)
            is GiveawayParticipantStatusAlreadyWasMember -> return map(dto)
            is GiveawayParticipantStatusAdministrator -> return map(dto)
            is GiveawayParticipantStatusDisallowedCountry -> return map(dto)
        }
    }

    fun map(dto: GiveawayParticipantStatusEligible): TdApi.GiveawayParticipantStatusEligible {
        return TdApi.GiveawayParticipantStatusEligible()
    }

    fun map(dto: GiveawayParticipantStatusParticipating): TdApi.GiveawayParticipantStatusParticipating {
        return TdApi.GiveawayParticipantStatusParticipating()
    }

    fun map(dto: GiveawayParticipantStatusAlreadyWasMember): TdApi.GiveawayParticipantStatusAlreadyWasMember {
        return TdApi.GiveawayParticipantStatusAlreadyWasMember(
            joinedChatDate = dto.joinedChatDate,
        )
    }

    fun map(dto: GiveawayParticipantStatusAdministrator): TdApi.GiveawayParticipantStatusAdministrator {
        return TdApi.GiveawayParticipantStatusAdministrator(
            chatId = dto.chatId,
        )
    }

    fun map(dto: GiveawayParticipantStatusDisallowedCountry): TdApi.GiveawayParticipantStatusDisallowedCountry {
        return TdApi.GiveawayParticipantStatusDisallowedCountry(
            userCountryCode = dto.userCountryCode,
        )
    }

    fun map(dto: TdApi.GiveawayPrize): GiveawayPrize {
        when (dto) {
            is TdApi.GiveawayPrizePremium -> return map(dto)
            is TdApi.GiveawayPrizeStars -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.GiveawayPrizePremium): GiveawayPrizePremium {
        return GiveawayPrizePremium(
            monthCount = dto.monthCount,
        )
    }

    fun map(dto: TdApi.GiveawayPrizeStars): GiveawayPrizeStars {
        return GiveawayPrizeStars(
            starCount = dto.starCount,
        )
    }

    fun map(dto: GiveawayPrize): TdApi.GiveawayPrize {
        when (dto) {
            is GiveawayPrizePremium -> return map(dto)
            is GiveawayPrizeStars -> return map(dto)
        }
    }

    fun map(dto: GiveawayPrizePremium): TdApi.GiveawayPrizePremium {
        return TdApi.GiveawayPrizePremium(
            monthCount = dto.monthCount,
        )
    }

    fun map(dto: GiveawayPrizeStars): TdApi.GiveawayPrizeStars {
        return TdApi.GiveawayPrizeStars(
            starCount = dto.starCount,
        )
    }

    fun map(dto: TdApi.GroupCall): GroupCall {
        return GroupCall(
            id = dto.id,
            title = dto.title,
            inviteLink = dto.inviteLink,
            scheduledStartDate = dto.scheduledStartDate,
            enabledStartNotification = dto.enabledStartNotification,
            isActive = dto.isActive,
            isVideoChat = dto.isVideoChat,
            isRtmpStream = dto.isRtmpStream,
            isJoined = dto.isJoined,
            needRejoin = dto.needRejoin,
            isOwned = dto.isOwned,
            canBeManaged = dto.canBeManaged,
            participantCount = dto.participantCount,
            hasHiddenListeners = dto.hasHiddenListeners,
            loadedAllParticipants = dto.loadedAllParticipants,
            recentSpeakers = dto.recentSpeakers.mapArray { map(it) },
            isMyVideoEnabled = dto.isMyVideoEnabled,
            isMyVideoPaused = dto.isMyVideoPaused,
            canEnableVideo = dto.canEnableVideo,
            muteNewParticipants = dto.muteNewParticipants,
            canToggleMuteNewParticipants = dto.canToggleMuteNewParticipants,
            recordDuration = dto.recordDuration,
            isVideoRecorded = dto.isVideoRecorded,
            duration = dto.duration,
        )
    }

    fun map(dto: GroupCall): TdApi.GroupCall {
        return TdApi.GroupCall(
            id = dto.id,
            title = dto.title,
            inviteLink = dto.inviteLink,
            scheduledStartDate = dto.scheduledStartDate,
            enabledStartNotification = dto.enabledStartNotification,
            isActive = dto.isActive,
            isVideoChat = dto.isVideoChat,
            isRtmpStream = dto.isRtmpStream,
            isJoined = dto.isJoined,
            needRejoin = dto.needRejoin,
            isOwned = dto.isOwned,
            canBeManaged = dto.canBeManaged,
            participantCount = dto.participantCount,
            hasHiddenListeners = dto.hasHiddenListeners,
            loadedAllParticipants = dto.loadedAllParticipants,
            recentSpeakers = dto.recentSpeakers.mapArray { map(it) },
            isMyVideoEnabled = dto.isMyVideoEnabled,
            isMyVideoPaused = dto.isMyVideoPaused,
            canEnableVideo = dto.canEnableVideo,
            muteNewParticipants = dto.muteNewParticipants,
            canToggleMuteNewParticipants = dto.canToggleMuteNewParticipants,
            recordDuration = dto.recordDuration,
            isVideoRecorded = dto.isVideoRecorded,
            duration = dto.duration,
        )
    }

    fun map(dto: TdApi.GroupCallDataChannel): GroupCallDataChannel {
        when (dto) {
            is TdApi.GroupCallDataChannelMain -> return map(dto)
            is TdApi.GroupCallDataChannelScreenSharing -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.GroupCallDataChannelMain): GroupCallDataChannelMain {
        return GroupCallDataChannelMain()
    }

    fun map(dto: TdApi.GroupCallDataChannelScreenSharing): GroupCallDataChannelScreenSharing {
        return GroupCallDataChannelScreenSharing()
    }

    fun map(dto: GroupCallDataChannel): TdApi.GroupCallDataChannel {
        when (dto) {
            is GroupCallDataChannelMain -> return map(dto)
            is GroupCallDataChannelScreenSharing -> return map(dto)
        }
    }

    fun map(dto: GroupCallDataChannelMain): TdApi.GroupCallDataChannelMain {
        return TdApi.GroupCallDataChannelMain()
    }

    fun map(dto: GroupCallDataChannelScreenSharing): TdApi.GroupCallDataChannelScreenSharing {
        return TdApi.GroupCallDataChannelScreenSharing()
    }

    fun map(dto: TdApi.GroupCallId): GroupCallId {
        return GroupCallId(
            id = dto.id,
        )
    }

    fun map(dto: GroupCallId): TdApi.GroupCallId {
        return TdApi.GroupCallId(
            id = dto.id,
        )
    }

    fun map(dto: TdApi.GroupCallInfo): GroupCallInfo {
        return GroupCallInfo(
            groupCallId = dto.groupCallId,
            joinPayload = dto.joinPayload,
        )
    }

    fun map(dto: GroupCallInfo): TdApi.GroupCallInfo {
        return TdApi.GroupCallInfo(
            groupCallId = dto.groupCallId,
            joinPayload = dto.joinPayload,
        )
    }

    fun map(dto: TdApi.GroupCallJoinParameters): GroupCallJoinParameters {
        return GroupCallJoinParameters(
            audioSourceId = dto.audioSourceId,
            payload = dto.payload,
            isMuted = dto.isMuted,
            isMyVideoEnabled = dto.isMyVideoEnabled,
        )
    }

    fun map(dto: GroupCallJoinParameters): TdApi.GroupCallJoinParameters {
        return TdApi.GroupCallJoinParameters(
            audioSourceId = dto.audioSourceId,
            payload = dto.payload,
            isMuted = dto.isMuted,
            isMyVideoEnabled = dto.isMyVideoEnabled,
        )
    }

    fun map(dto: TdApi.GroupCallParticipant): GroupCallParticipant {
        return GroupCallParticipant(
            participantId = map(dto.participantId),
            audioSourceId = dto.audioSourceId,
            screenSharingAudioSourceId = dto.screenSharingAudioSourceId,
            videoInfo = dto.videoInfo?.let { map(it) },
            screenSharingVideoInfo = dto.screenSharingVideoInfo?.let { map(it) },
            bio = dto.bio,
            isCurrentUser = dto.isCurrentUser,
            isSpeaking = dto.isSpeaking,
            isHandRaised = dto.isHandRaised,
            canBeMutedForAllUsers = dto.canBeMutedForAllUsers,
            canBeUnmutedForAllUsers = dto.canBeUnmutedForAllUsers,
            canBeMutedForCurrentUser = dto.canBeMutedForCurrentUser,
            canBeUnmutedForCurrentUser = dto.canBeUnmutedForCurrentUser,
            isMutedForAllUsers = dto.isMutedForAllUsers,
            isMutedForCurrentUser = dto.isMutedForCurrentUser,
            canUnmuteSelf = dto.canUnmuteSelf,
            volumeLevel = dto.volumeLevel,
            order = dto.order,
        )
    }

    fun map(dto: GroupCallParticipant): TdApi.GroupCallParticipant {
        return TdApi.GroupCallParticipant(
            participantId = map(dto.participantId),
            audioSourceId = dto.audioSourceId,
            screenSharingAudioSourceId = dto.screenSharingAudioSourceId,
            videoInfo = dto.videoInfo?.let { map(it) },
            screenSharingVideoInfo = dto.screenSharingVideoInfo?.let { map(it) },
            bio = dto.bio,
            isCurrentUser = dto.isCurrentUser,
            isSpeaking = dto.isSpeaking,
            isHandRaised = dto.isHandRaised,
            canBeMutedForAllUsers = dto.canBeMutedForAllUsers,
            canBeUnmutedForAllUsers = dto.canBeUnmutedForAllUsers,
            canBeMutedForCurrentUser = dto.canBeMutedForCurrentUser,
            canBeUnmutedForCurrentUser = dto.canBeUnmutedForCurrentUser,
            isMutedForAllUsers = dto.isMutedForAllUsers,
            isMutedForCurrentUser = dto.isMutedForCurrentUser,
            canUnmuteSelf = dto.canUnmuteSelf,
            volumeLevel = dto.volumeLevel,
            order = dto.order,
        )
    }

    fun map(dto: TdApi.GroupCallParticipantVideoInfo): GroupCallParticipantVideoInfo {
        return GroupCallParticipantVideoInfo(
            sourceGroups = dto.sourceGroups.mapArray { map(it) },
            endpointId = dto.endpointId,
            isPaused = dto.isPaused,
        )
    }

    fun map(dto: GroupCallParticipantVideoInfo): TdApi.GroupCallParticipantVideoInfo {
        return TdApi.GroupCallParticipantVideoInfo(
            sourceGroups = dto.sourceGroups.mapArray { map(it) },
            endpointId = dto.endpointId,
            isPaused = dto.isPaused,
        )
    }

    fun map(dto: TdApi.GroupCallParticipants): GroupCallParticipants {
        return GroupCallParticipants(
            totalCount = dto.totalCount,
            participantIds = dto.participantIds.mapArray { map(it) },
        )
    }

    fun map(dto: GroupCallParticipants): TdApi.GroupCallParticipants {
        return TdApi.GroupCallParticipants(
            totalCount = dto.totalCount,
            participantIds = dto.participantIds.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.GroupCallRecentSpeaker): GroupCallRecentSpeaker {
        return GroupCallRecentSpeaker(
            participantId = map(dto.participantId),
            isSpeaking = dto.isSpeaking,
        )
    }

    fun map(dto: GroupCallRecentSpeaker): TdApi.GroupCallRecentSpeaker {
        return TdApi.GroupCallRecentSpeaker(
            participantId = map(dto.participantId),
            isSpeaking = dto.isSpeaking,
        )
    }

    fun map(dto: TdApi.GroupCallVideoQuality): GroupCallVideoQuality {
        when (dto) {
            is TdApi.GroupCallVideoQualityThumbnail -> return map(dto)
            is TdApi.GroupCallVideoQualityMedium -> return map(dto)
            is TdApi.GroupCallVideoQualityFull -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.GroupCallVideoQualityThumbnail): GroupCallVideoQualityThumbnail {
        return GroupCallVideoQualityThumbnail()
    }

    fun map(dto: TdApi.GroupCallVideoQualityMedium): GroupCallVideoQualityMedium {
        return GroupCallVideoQualityMedium()
    }

    fun map(dto: TdApi.GroupCallVideoQualityFull): GroupCallVideoQualityFull {
        return GroupCallVideoQualityFull()
    }

    fun map(dto: GroupCallVideoQuality): TdApi.GroupCallVideoQuality {
        when (dto) {
            is GroupCallVideoQualityThumbnail -> return map(dto)
            is GroupCallVideoQualityMedium -> return map(dto)
            is GroupCallVideoQualityFull -> return map(dto)
        }
    }

    fun map(dto: GroupCallVideoQualityThumbnail): TdApi.GroupCallVideoQualityThumbnail {
        return TdApi.GroupCallVideoQualityThumbnail()
    }

    fun map(dto: GroupCallVideoQualityMedium): TdApi.GroupCallVideoQualityMedium {
        return TdApi.GroupCallVideoQualityMedium()
    }

    fun map(dto: GroupCallVideoQualityFull): TdApi.GroupCallVideoQualityFull {
        return TdApi.GroupCallVideoQualityFull()
    }

    fun map(dto: TdApi.GroupCallVideoSourceGroup): GroupCallVideoSourceGroup {
        return GroupCallVideoSourceGroup(
            semantics = dto.semantics,
            sourceIds = dto.sourceIds,
        )
    }

    fun map(dto: GroupCallVideoSourceGroup): TdApi.GroupCallVideoSourceGroup {
        return TdApi.GroupCallVideoSourceGroup(
            semantics = dto.semantics,
            sourceIds = dto.sourceIds,
        )
    }

    fun map(dto: TdApi.Hashtags): Hashtags {
        return Hashtags(
            hashtags = dto.hashtags,
        )
    }

    fun map(dto: Hashtags): TdApi.Hashtags {
        return TdApi.Hashtags(
            hashtags = dto.hashtags,
        )
    }

    fun map(dto: TdApi.HttpUrl): HttpUrl {
        return HttpUrl(
            url = dto.url,
        )
    }

    fun map(dto: HttpUrl): TdApi.HttpUrl {
        return TdApi.HttpUrl(
            url = dto.url,
        )
    }

    fun map(dto: TdApi.IdentityDocument): IdentityDocument {
        return IdentityDocument(
            number = dto.number,
            expirationDate = dto.expirationDate?.let { map(it) },
            frontSide = map(dto.frontSide),
            reverseSide = dto.reverseSide?.let { map(it) },
            selfie = dto.selfie?.let { map(it) },
            translation = dto.translation.mapArray { map(it) },
        )
    }

    fun map(dto: IdentityDocument): TdApi.IdentityDocument {
        return TdApi.IdentityDocument(
            number = dto.number,
            expirationDate = dto.expirationDate?.let { map(it) },
            frontSide = map(dto.frontSide),
            reverseSide = dto.reverseSide?.let { map(it) },
            selfie = dto.selfie?.let { map(it) },
            translation = dto.translation.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ImportedContacts): ImportedContacts {
        return ImportedContacts(
            userIds = dto.userIds,
            importerCount = dto.importerCount,
        )
    }

    fun map(dto: ImportedContacts): TdApi.ImportedContacts {
        return TdApi.ImportedContacts(
            userIds = dto.userIds,
            importerCount = dto.importerCount,
        )
    }

    fun map(dto: TdApi.InlineKeyboardButton): InlineKeyboardButton {
        return InlineKeyboardButton(
            text = dto.text,
            type = map(dto.type),
        )
    }

    fun map(dto: InlineKeyboardButton): TdApi.InlineKeyboardButton {
        return TdApi.InlineKeyboardButton(
            text = dto.text,
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.InlineKeyboardButtonType): InlineKeyboardButtonType {
        when (dto) {
            is TdApi.InlineKeyboardButtonTypeUrl -> return map(dto)
            is TdApi.InlineKeyboardButtonTypeLoginUrl -> return map(dto)
            is TdApi.InlineKeyboardButtonTypeWebApp -> return map(dto)
            is TdApi.InlineKeyboardButtonTypeCallback -> return map(dto)
            is TdApi.InlineKeyboardButtonTypeCallbackWithPassword -> return map(dto)
            is TdApi.InlineKeyboardButtonTypeCallbackGame -> return map(dto)
            is TdApi.InlineKeyboardButtonTypeSwitchInline -> return map(dto)
            is TdApi.InlineKeyboardButtonTypeBuy -> return map(dto)
            is TdApi.InlineKeyboardButtonTypeUser -> return map(dto)
            is TdApi.InlineKeyboardButtonTypeCopyText -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InlineKeyboardButtonTypeUrl): InlineKeyboardButtonTypeUrl {
        return InlineKeyboardButtonTypeUrl(
            url = dto.url,
        )
    }

    fun map(dto: TdApi.InlineKeyboardButtonTypeLoginUrl): InlineKeyboardButtonTypeLoginUrl {
        return InlineKeyboardButtonTypeLoginUrl(
            url = dto.url,
            id = dto.id,
            forwardText = dto.forwardText,
        )
    }

    fun map(dto: TdApi.InlineKeyboardButtonTypeWebApp): InlineKeyboardButtonTypeWebApp {
        return InlineKeyboardButtonTypeWebApp(
            url = dto.url,
        )
    }

    fun map(dto: TdApi.InlineKeyboardButtonTypeCallback): InlineKeyboardButtonTypeCallback {
        return InlineKeyboardButtonTypeCallback(
            data = dto.data,
        )
    }

    fun map(dto: TdApi.InlineKeyboardButtonTypeCallbackWithPassword): InlineKeyboardButtonTypeCallbackWithPassword {
        return InlineKeyboardButtonTypeCallbackWithPassword(
            data = dto.data,
        )
    }

    fun map(dto: TdApi.InlineKeyboardButtonTypeCallbackGame): InlineKeyboardButtonTypeCallbackGame {
        return InlineKeyboardButtonTypeCallbackGame()
    }

    fun map(dto: TdApi.InlineKeyboardButtonTypeSwitchInline): InlineKeyboardButtonTypeSwitchInline {
        return InlineKeyboardButtonTypeSwitchInline(
            query = dto.query,
            targetChat = map(dto.targetChat),
        )
    }

    fun map(dto: TdApi.InlineKeyboardButtonTypeBuy): InlineKeyboardButtonTypeBuy {
        return InlineKeyboardButtonTypeBuy()
    }

    fun map(dto: TdApi.InlineKeyboardButtonTypeUser): InlineKeyboardButtonTypeUser {
        return InlineKeyboardButtonTypeUser(
            userId = dto.userId,
        )
    }

    fun map(dto: TdApi.InlineKeyboardButtonTypeCopyText): InlineKeyboardButtonTypeCopyText {
        return InlineKeyboardButtonTypeCopyText(
            text = dto.text,
        )
    }

    fun map(dto: InlineKeyboardButtonType): TdApi.InlineKeyboardButtonType {
        when (dto) {
            is InlineKeyboardButtonTypeUrl -> return map(dto)
            is InlineKeyboardButtonTypeLoginUrl -> return map(dto)
            is InlineKeyboardButtonTypeWebApp -> return map(dto)
            is InlineKeyboardButtonTypeCallback -> return map(dto)
            is InlineKeyboardButtonTypeCallbackWithPassword -> return map(dto)
            is InlineKeyboardButtonTypeCallbackGame -> return map(dto)
            is InlineKeyboardButtonTypeSwitchInline -> return map(dto)
            is InlineKeyboardButtonTypeBuy -> return map(dto)
            is InlineKeyboardButtonTypeUser -> return map(dto)
            is InlineKeyboardButtonTypeCopyText -> return map(dto)
        }
    }

    fun map(dto: InlineKeyboardButtonTypeUrl): TdApi.InlineKeyboardButtonTypeUrl {
        return TdApi.InlineKeyboardButtonTypeUrl(
            url = dto.url,
        )
    }

    fun map(dto: InlineKeyboardButtonTypeLoginUrl): TdApi.InlineKeyboardButtonTypeLoginUrl {
        return TdApi.InlineKeyboardButtonTypeLoginUrl(
            url = dto.url,
            id = dto.id,
            forwardText = dto.forwardText,
        )
    }

    fun map(dto: InlineKeyboardButtonTypeWebApp): TdApi.InlineKeyboardButtonTypeWebApp {
        return TdApi.InlineKeyboardButtonTypeWebApp(
            url = dto.url,
        )
    }

    fun map(dto: InlineKeyboardButtonTypeCallback): TdApi.InlineKeyboardButtonTypeCallback {
        return TdApi.InlineKeyboardButtonTypeCallback(
            data = dto.data,
        )
    }

    fun map(dto: InlineKeyboardButtonTypeCallbackWithPassword): TdApi.InlineKeyboardButtonTypeCallbackWithPassword {
        return TdApi.InlineKeyboardButtonTypeCallbackWithPassword(
            data = dto.data,
        )
    }

    fun map(dto: InlineKeyboardButtonTypeCallbackGame): TdApi.InlineKeyboardButtonTypeCallbackGame {
        return TdApi.InlineKeyboardButtonTypeCallbackGame()
    }

    fun map(dto: InlineKeyboardButtonTypeSwitchInline): TdApi.InlineKeyboardButtonTypeSwitchInline {
        return TdApi.InlineKeyboardButtonTypeSwitchInline(
            query = dto.query,
            targetChat = map(dto.targetChat),
        )
    }

    fun map(dto: InlineKeyboardButtonTypeBuy): TdApi.InlineKeyboardButtonTypeBuy {
        return TdApi.InlineKeyboardButtonTypeBuy()
    }

    fun map(dto: InlineKeyboardButtonTypeUser): TdApi.InlineKeyboardButtonTypeUser {
        return TdApi.InlineKeyboardButtonTypeUser(
            userId = dto.userId,
        )
    }

    fun map(dto: InlineKeyboardButtonTypeCopyText): TdApi.InlineKeyboardButtonTypeCopyText {
        return TdApi.InlineKeyboardButtonTypeCopyText(
            text = dto.text,
        )
    }

    fun map(dto: TdApi.InlineQueryResult): InlineQueryResult {
        when (dto) {
            is TdApi.InlineQueryResultArticle -> return map(dto)
            is TdApi.InlineQueryResultContact -> return map(dto)
            is TdApi.InlineQueryResultLocation -> return map(dto)
            is TdApi.InlineQueryResultVenue -> return map(dto)
            is TdApi.InlineQueryResultGame -> return map(dto)
            is TdApi.InlineQueryResultAnimation -> return map(dto)
            is TdApi.InlineQueryResultAudio -> return map(dto)
            is TdApi.InlineQueryResultDocument -> return map(dto)
            is TdApi.InlineQueryResultPhoto -> return map(dto)
            is TdApi.InlineQueryResultSticker -> return map(dto)
            is TdApi.InlineQueryResultVideo -> return map(dto)
            is TdApi.InlineQueryResultVoiceNote -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InlineQueryResultArticle): InlineQueryResultArticle {
        return InlineQueryResultArticle(
            id = dto.id,
            url = dto.url,
            title = dto.title,
            description = dto.description,
            thumbnail = dto.thumbnail?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InlineQueryResultContact): InlineQueryResultContact {
        return InlineQueryResultContact(
            id = dto.id,
            contact = map(dto.contact),
            thumbnail = dto.thumbnail?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InlineQueryResultLocation): InlineQueryResultLocation {
        return InlineQueryResultLocation(
            id = dto.id,
            location = map(dto.location),
            title = dto.title,
            thumbnail = dto.thumbnail?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InlineQueryResultVenue): InlineQueryResultVenue {
        return InlineQueryResultVenue(
            id = dto.id,
            venue = map(dto.venue),
            thumbnail = dto.thumbnail?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InlineQueryResultGame): InlineQueryResultGame {
        return InlineQueryResultGame(
            id = dto.id,
            game = map(dto.game),
        )
    }

    fun map(dto: TdApi.InlineQueryResultAnimation): InlineQueryResultAnimation {
        return InlineQueryResultAnimation(
            id = dto.id,
            animation = map(dto.animation),
            title = dto.title,
        )
    }

    fun map(dto: TdApi.InlineQueryResultAudio): InlineQueryResultAudio {
        return InlineQueryResultAudio(
            id = dto.id,
            audio = map(dto.audio),
        )
    }

    fun map(dto: TdApi.InlineQueryResultDocument): InlineQueryResultDocument {
        return InlineQueryResultDocument(
            id = dto.id,
            document = map(dto.document),
            title = dto.title,
            description = dto.description,
        )
    }

    fun map(dto: TdApi.InlineQueryResultPhoto): InlineQueryResultPhoto {
        return InlineQueryResultPhoto(
            id = dto.id,
            photo = map(dto.photo),
            title = dto.title,
            description = dto.description,
        )
    }

    fun map(dto: TdApi.InlineQueryResultSticker): InlineQueryResultSticker {
        return InlineQueryResultSticker(
            id = dto.id,
            sticker = map(dto.sticker),
        )
    }

    fun map(dto: TdApi.InlineQueryResultVideo): InlineQueryResultVideo {
        return InlineQueryResultVideo(
            id = dto.id,
            video = map(dto.video),
            title = dto.title,
            description = dto.description,
        )
    }

    fun map(dto: TdApi.InlineQueryResultVoiceNote): InlineQueryResultVoiceNote {
        return InlineQueryResultVoiceNote(
            id = dto.id,
            voiceNote = map(dto.voiceNote),
            title = dto.title,
        )
    }

    fun map(dto: InlineQueryResult): TdApi.InlineQueryResult {
        when (dto) {
            is InlineQueryResultArticle -> return map(dto)
            is InlineQueryResultContact -> return map(dto)
            is InlineQueryResultLocation -> return map(dto)
            is InlineQueryResultVenue -> return map(dto)
            is InlineQueryResultGame -> return map(dto)
            is InlineQueryResultAnimation -> return map(dto)
            is InlineQueryResultAudio -> return map(dto)
            is InlineQueryResultDocument -> return map(dto)
            is InlineQueryResultPhoto -> return map(dto)
            is InlineQueryResultSticker -> return map(dto)
            is InlineQueryResultVideo -> return map(dto)
            is InlineQueryResultVoiceNote -> return map(dto)
        }
    }

    fun map(dto: InlineQueryResultArticle): TdApi.InlineQueryResultArticle {
        return TdApi.InlineQueryResultArticle(
            id = dto.id,
            url = dto.url,
            title = dto.title,
            description = dto.description,
            thumbnail = dto.thumbnail?.let { map(it) },
        )
    }

    fun map(dto: InlineQueryResultContact): TdApi.InlineQueryResultContact {
        return TdApi.InlineQueryResultContact(
            id = dto.id,
            contact = map(dto.contact),
            thumbnail = dto.thumbnail?.let { map(it) },
        )
    }

    fun map(dto: InlineQueryResultLocation): TdApi.InlineQueryResultLocation {
        return TdApi.InlineQueryResultLocation(
            id = dto.id,
            location = map(dto.location),
            title = dto.title,
            thumbnail = dto.thumbnail?.let { map(it) },
        )
    }

    fun map(dto: InlineQueryResultVenue): TdApi.InlineQueryResultVenue {
        return TdApi.InlineQueryResultVenue(
            id = dto.id,
            venue = map(dto.venue),
            thumbnail = dto.thumbnail?.let { map(it) },
        )
    }

    fun map(dto: InlineQueryResultGame): TdApi.InlineQueryResultGame {
        return TdApi.InlineQueryResultGame(
            id = dto.id,
            game = map(dto.game),
        )
    }

    fun map(dto: InlineQueryResultAnimation): TdApi.InlineQueryResultAnimation {
        return TdApi.InlineQueryResultAnimation(
            id = dto.id,
            animation = map(dto.animation),
            title = dto.title,
        )
    }

    fun map(dto: InlineQueryResultAudio): TdApi.InlineQueryResultAudio {
        return TdApi.InlineQueryResultAudio(
            id = dto.id,
            audio = map(dto.audio),
        )
    }

    fun map(dto: InlineQueryResultDocument): TdApi.InlineQueryResultDocument {
        return TdApi.InlineQueryResultDocument(
            id = dto.id,
            document = map(dto.document),
            title = dto.title,
            description = dto.description,
        )
    }

    fun map(dto: InlineQueryResultPhoto): TdApi.InlineQueryResultPhoto {
        return TdApi.InlineQueryResultPhoto(
            id = dto.id,
            photo = map(dto.photo),
            title = dto.title,
            description = dto.description,
        )
    }

    fun map(dto: InlineQueryResultSticker): TdApi.InlineQueryResultSticker {
        return TdApi.InlineQueryResultSticker(
            id = dto.id,
            sticker = map(dto.sticker),
        )
    }

    fun map(dto: InlineQueryResultVideo): TdApi.InlineQueryResultVideo {
        return TdApi.InlineQueryResultVideo(
            id = dto.id,
            video = map(dto.video),
            title = dto.title,
            description = dto.description,
        )
    }

    fun map(dto: InlineQueryResultVoiceNote): TdApi.InlineQueryResultVoiceNote {
        return TdApi.InlineQueryResultVoiceNote(
            id = dto.id,
            voiceNote = map(dto.voiceNote),
            title = dto.title,
        )
    }

    fun map(dto: TdApi.InlineQueryResults): InlineQueryResults {
        return InlineQueryResults(
            inlineQueryId = dto.inlineQueryId,
            button = dto.button?.let { map(it) },
            results = dto.results.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: InlineQueryResults): TdApi.InlineQueryResults {
        return TdApi.InlineQueryResults(
            inlineQueryId = dto.inlineQueryId,
            button = dto.button?.let { map(it) },
            results = dto.results.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.InlineQueryResultsButton): InlineQueryResultsButton {
        return InlineQueryResultsButton(
            text = dto.text,
            type = map(dto.type),
        )
    }

    fun map(dto: InlineQueryResultsButton): TdApi.InlineQueryResultsButton {
        return TdApi.InlineQueryResultsButton(
            text = dto.text,
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.InlineQueryResultsButtonType): InlineQueryResultsButtonType {
        when (dto) {
            is TdApi.InlineQueryResultsButtonTypeStartBot -> return map(dto)
            is TdApi.InlineQueryResultsButtonTypeWebApp -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InlineQueryResultsButtonTypeStartBot): InlineQueryResultsButtonTypeStartBot {
        return InlineQueryResultsButtonTypeStartBot(
            parameter = dto.parameter,
        )
    }

    fun map(dto: TdApi.InlineQueryResultsButtonTypeWebApp): InlineQueryResultsButtonTypeWebApp {
        return InlineQueryResultsButtonTypeWebApp(
            url = dto.url,
        )
    }

    fun map(dto: InlineQueryResultsButtonType): TdApi.InlineQueryResultsButtonType {
        when (dto) {
            is InlineQueryResultsButtonTypeStartBot -> return map(dto)
            is InlineQueryResultsButtonTypeWebApp -> return map(dto)
        }
    }

    fun map(dto: InlineQueryResultsButtonTypeStartBot): TdApi.InlineQueryResultsButtonTypeStartBot {
        return TdApi.InlineQueryResultsButtonTypeStartBot(
            parameter = dto.parameter,
        )
    }

    fun map(dto: InlineQueryResultsButtonTypeWebApp): TdApi.InlineQueryResultsButtonTypeWebApp {
        return TdApi.InlineQueryResultsButtonTypeWebApp(
            url = dto.url,
        )
    }

    fun map(dto: TdApi.InputBackground): InputBackground {
        when (dto) {
            is TdApi.InputBackgroundLocal -> return map(dto)
            is TdApi.InputBackgroundRemote -> return map(dto)
            is TdApi.InputBackgroundPrevious -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InputBackgroundLocal): InputBackgroundLocal {
        return InputBackgroundLocal(
            background = map(dto.background),
        )
    }

    fun map(dto: TdApi.InputBackgroundRemote): InputBackgroundRemote {
        return InputBackgroundRemote(
            backgroundId = dto.backgroundId,
        )
    }

    fun map(dto: TdApi.InputBackgroundPrevious): InputBackgroundPrevious {
        return InputBackgroundPrevious(
            messageId = dto.messageId,
        )
    }

    fun map(dto: InputBackground): TdApi.InputBackground {
        when (dto) {
            is InputBackgroundLocal -> return map(dto)
            is InputBackgroundRemote -> return map(dto)
            is InputBackgroundPrevious -> return map(dto)
        }
    }

    fun map(dto: InputBackgroundLocal): TdApi.InputBackgroundLocal {
        return TdApi.InputBackgroundLocal(
            background = map(dto.background),
        )
    }

    fun map(dto: InputBackgroundRemote): TdApi.InputBackgroundRemote {
        return TdApi.InputBackgroundRemote(
            backgroundId = dto.backgroundId,
        )
    }

    fun map(dto: InputBackgroundPrevious): TdApi.InputBackgroundPrevious {
        return TdApi.InputBackgroundPrevious(
            messageId = dto.messageId,
        )
    }

    fun map(dto: TdApi.InputBusinessChatLink): InputBusinessChatLink {
        return InputBusinessChatLink(
            text = map(dto.text),
            title = dto.title,
        )
    }

    fun map(dto: InputBusinessChatLink): TdApi.InputBusinessChatLink {
        return TdApi.InputBusinessChatLink(
            text = map(dto.text),
            title = dto.title,
        )
    }

    fun map(dto: TdApi.InputBusinessStartPage): InputBusinessStartPage {
        return InputBusinessStartPage(
            title = dto.title,
            message = dto.message,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: InputBusinessStartPage): TdApi.InputBusinessStartPage {
        return TdApi.InputBusinessStartPage(
            title = dto.title,
            message = dto.message,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InputChatPhoto): InputChatPhoto {
        when (dto) {
            is TdApi.InputChatPhotoPrevious -> return map(dto)
            is TdApi.InputChatPhotoStatic -> return map(dto)
            is TdApi.InputChatPhotoAnimation -> return map(dto)
            is TdApi.InputChatPhotoSticker -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InputChatPhotoPrevious): InputChatPhotoPrevious {
        return InputChatPhotoPrevious(
            chatPhotoId = dto.chatPhotoId,
        )
    }

    fun map(dto: TdApi.InputChatPhotoStatic): InputChatPhotoStatic {
        return InputChatPhotoStatic(
            photo = map(dto.photo),
        )
    }

    fun map(dto: TdApi.InputChatPhotoAnimation): InputChatPhotoAnimation {
        return InputChatPhotoAnimation(
            animation = map(dto.animation),
            mainFrameTimestamp = dto.mainFrameTimestamp,
        )
    }

    fun map(dto: TdApi.InputChatPhotoSticker): InputChatPhotoSticker {
        return InputChatPhotoSticker(
            sticker = map(dto.sticker),
        )
    }

    fun map(dto: InputChatPhoto): TdApi.InputChatPhoto {
        when (dto) {
            is InputChatPhotoPrevious -> return map(dto)
            is InputChatPhotoStatic -> return map(dto)
            is InputChatPhotoAnimation -> return map(dto)
            is InputChatPhotoSticker -> return map(dto)
        }
    }

    fun map(dto: InputChatPhotoPrevious): TdApi.InputChatPhotoPrevious {
        return TdApi.InputChatPhotoPrevious(
            chatPhotoId = dto.chatPhotoId,
        )
    }

    fun map(dto: InputChatPhotoStatic): TdApi.InputChatPhotoStatic {
        return TdApi.InputChatPhotoStatic(
            photo = map(dto.photo),
        )
    }

    fun map(dto: InputChatPhotoAnimation): TdApi.InputChatPhotoAnimation {
        return TdApi.InputChatPhotoAnimation(
            animation = map(dto.animation),
            mainFrameTimestamp = dto.mainFrameTimestamp,
        )
    }

    fun map(dto: InputChatPhotoSticker): TdApi.InputChatPhotoSticker {
        return TdApi.InputChatPhotoSticker(
            sticker = map(dto.sticker),
        )
    }

    fun map(dto: TdApi.InputChecklist): InputChecklist {
        return InputChecklist(
            title = map(dto.title),
            tasks = dto.tasks.mapArray { map(it) },
            othersCanAddTasks = dto.othersCanAddTasks,
            othersCanMarkTasksAsDone = dto.othersCanMarkTasksAsDone,
        )
    }

    fun map(dto: InputChecklist): TdApi.InputChecklist {
        return TdApi.InputChecklist(
            title = map(dto.title),
            tasks = dto.tasks.mapArray { map(it) },
            othersCanAddTasks = dto.othersCanAddTasks,
            othersCanMarkTasksAsDone = dto.othersCanMarkTasksAsDone,
        )
    }

    fun map(dto: TdApi.InputChecklistTask): InputChecklistTask {
        return InputChecklistTask(
            id = dto.id,
            text = map(dto.text),
        )
    }

    fun map(dto: InputChecklistTask): TdApi.InputChecklistTask {
        return TdApi.InputChecklistTask(
            id = dto.id,
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.InputCredentials): InputCredentials {
        when (dto) {
            is TdApi.InputCredentialsSaved -> return map(dto)
            is TdApi.InputCredentialsNew -> return map(dto)
            is TdApi.InputCredentialsApplePay -> return map(dto)
            is TdApi.InputCredentialsGooglePay -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InputCredentialsSaved): InputCredentialsSaved {
        return InputCredentialsSaved(
            savedCredentialsId = dto.savedCredentialsId,
        )
    }

    fun map(dto: TdApi.InputCredentialsNew): InputCredentialsNew {
        return InputCredentialsNew(
            data = dto.data,
            allowSave = dto.allowSave,
        )
    }

    fun map(dto: TdApi.InputCredentialsApplePay): InputCredentialsApplePay {
        return InputCredentialsApplePay(
            data = dto.data,
        )
    }

    fun map(dto: TdApi.InputCredentialsGooglePay): InputCredentialsGooglePay {
        return InputCredentialsGooglePay(
            data = dto.data,
        )
    }

    fun map(dto: InputCredentials): TdApi.InputCredentials {
        when (dto) {
            is InputCredentialsSaved -> return map(dto)
            is InputCredentialsNew -> return map(dto)
            is InputCredentialsApplePay -> return map(dto)
            is InputCredentialsGooglePay -> return map(dto)
        }
    }

    fun map(dto: InputCredentialsSaved): TdApi.InputCredentialsSaved {
        return TdApi.InputCredentialsSaved(
            savedCredentialsId = dto.savedCredentialsId,
        )
    }

    fun map(dto: InputCredentialsNew): TdApi.InputCredentialsNew {
        return TdApi.InputCredentialsNew(
            data = dto.data,
            allowSave = dto.allowSave,
        )
    }

    fun map(dto: InputCredentialsApplePay): TdApi.InputCredentialsApplePay {
        return TdApi.InputCredentialsApplePay(
            data = dto.data,
        )
    }

    fun map(dto: InputCredentialsGooglePay): TdApi.InputCredentialsGooglePay {
        return TdApi.InputCredentialsGooglePay(
            data = dto.data,
        )
    }

    fun map(dto: TdApi.InputFile): InputFile {
        when (dto) {
            is TdApi.InputFileId -> return map(dto)
            is TdApi.InputFileRemote -> return map(dto)
            is TdApi.InputFileLocal -> return map(dto)
            is TdApi.InputFileGenerated -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InputFileId): InputFileId {
        return InputFileId(
            id = dto.id,
        )
    }

    fun map(dto: TdApi.InputFileRemote): InputFileRemote {
        return InputFileRemote(
            id = dto.id,
        )
    }

    fun map(dto: TdApi.InputFileLocal): InputFileLocal {
        return InputFileLocal(
            path = dto.path,
        )
    }

    fun map(dto: TdApi.InputFileGenerated): InputFileGenerated {
        return InputFileGenerated(
            originalPath = dto.originalPath,
            conversion = dto.conversion,
            expectedSize = dto.expectedSize,
        )
    }

    fun map(dto: InputFile): TdApi.InputFile {
        when (dto) {
            is InputFileId -> return map(dto)
            is InputFileRemote -> return map(dto)
            is InputFileLocal -> return map(dto)
            is InputFileGenerated -> return map(dto)
        }
    }

    fun map(dto: InputFileId): TdApi.InputFileId {
        return TdApi.InputFileId(
            id = dto.id,
        )
    }

    fun map(dto: InputFileRemote): TdApi.InputFileRemote {
        return TdApi.InputFileRemote(
            id = dto.id,
        )
    }

    fun map(dto: InputFileLocal): TdApi.InputFileLocal {
        return TdApi.InputFileLocal(
            path = dto.path,
        )
    }

    fun map(dto: InputFileGenerated): TdApi.InputFileGenerated {
        return TdApi.InputFileGenerated(
            originalPath = dto.originalPath,
            conversion = dto.conversion,
            expectedSize = dto.expectedSize,
        )
    }

    fun map(dto: TdApi.InputGroupCall): InputGroupCall {
        when (dto) {
            is TdApi.InputGroupCallLink -> return map(dto)
            is TdApi.InputGroupCallMessage -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InputGroupCallLink): InputGroupCallLink {
        return InputGroupCallLink(
            link = dto.link,
        )
    }

    fun map(dto: TdApi.InputGroupCallMessage): InputGroupCallMessage {
        return InputGroupCallMessage(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: InputGroupCall): TdApi.InputGroupCall {
        when (dto) {
            is InputGroupCallLink -> return map(dto)
            is InputGroupCallMessage -> return map(dto)
        }
    }

    fun map(dto: InputGroupCallLink): TdApi.InputGroupCallLink {
        return TdApi.InputGroupCallLink(
            link = dto.link,
        )
    }

    fun map(dto: InputGroupCallMessage): TdApi.InputGroupCallMessage {
        return TdApi.InputGroupCallMessage(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: TdApi.InputIdentityDocument): InputIdentityDocument {
        return InputIdentityDocument(
            number = dto.number,
            expirationDate = dto.expirationDate?.let { map(it) },
            frontSide = map(dto.frontSide),
            reverseSide = dto.reverseSide?.let { map(it) },
            selfie = dto.selfie?.let { map(it) },
            translation = dto.translation.mapArray { map(it) },
        )
    }

    fun map(dto: InputIdentityDocument): TdApi.InputIdentityDocument {
        return TdApi.InputIdentityDocument(
            number = dto.number,
            expirationDate = dto.expirationDate?.let { map(it) },
            frontSide = map(dto.frontSide),
            reverseSide = dto.reverseSide?.let { map(it) },
            selfie = dto.selfie?.let { map(it) },
            translation = dto.translation.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.InputInlineQueryResult): InputInlineQueryResult {
        when (dto) {
            is TdApi.InputInlineQueryResultAnimation -> return map(dto)
            is TdApi.InputInlineQueryResultArticle -> return map(dto)
            is TdApi.InputInlineQueryResultAudio -> return map(dto)
            is TdApi.InputInlineQueryResultContact -> return map(dto)
            is TdApi.InputInlineQueryResultDocument -> return map(dto)
            is TdApi.InputInlineQueryResultGame -> return map(dto)
            is TdApi.InputInlineQueryResultLocation -> return map(dto)
            is TdApi.InputInlineQueryResultPhoto -> return map(dto)
            is TdApi.InputInlineQueryResultSticker -> return map(dto)
            is TdApi.InputInlineQueryResultVenue -> return map(dto)
            is TdApi.InputInlineQueryResultVideo -> return map(dto)
            is TdApi.InputInlineQueryResultVoiceNote -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InputInlineQueryResultAnimation): InputInlineQueryResultAnimation {
        return InputInlineQueryResultAnimation(
            id = dto.id,
            title = dto.title,
            thumbnailUrl = dto.thumbnailUrl,
            thumbnailMimeType = dto.thumbnailMimeType,
            videoUrl = dto.videoUrl,
            videoMimeType = dto.videoMimeType,
            videoDuration = dto.videoDuration,
            videoWidth = dto.videoWidth,
            videoHeight = dto.videoHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: TdApi.InputInlineQueryResultArticle): InputInlineQueryResultArticle {
        return InputInlineQueryResultArticle(
            id = dto.id,
            url = dto.url,
            title = dto.title,
            description = dto.description,
            thumbnailUrl = dto.thumbnailUrl,
            thumbnailWidth = dto.thumbnailWidth,
            thumbnailHeight = dto.thumbnailHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: TdApi.InputInlineQueryResultAudio): InputInlineQueryResultAudio {
        return InputInlineQueryResultAudio(
            id = dto.id,
            title = dto.title,
            performer = dto.performer,
            audioUrl = dto.audioUrl,
            audioDuration = dto.audioDuration,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: TdApi.InputInlineQueryResultContact): InputInlineQueryResultContact {
        return InputInlineQueryResultContact(
            id = dto.id,
            contact = map(dto.contact),
            thumbnailUrl = dto.thumbnailUrl,
            thumbnailWidth = dto.thumbnailWidth,
            thumbnailHeight = dto.thumbnailHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: TdApi.InputInlineQueryResultDocument): InputInlineQueryResultDocument {
        return InputInlineQueryResultDocument(
            id = dto.id,
            title = dto.title,
            description = dto.description,
            documentUrl = dto.documentUrl,
            mimeType = dto.mimeType,
            thumbnailUrl = dto.thumbnailUrl,
            thumbnailWidth = dto.thumbnailWidth,
            thumbnailHeight = dto.thumbnailHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: TdApi.InputInlineQueryResultGame): InputInlineQueryResultGame {
        return InputInlineQueryResultGame(
            id = dto.id,
            gameShortName = dto.gameShortName,
            replyMarkup = dto.replyMarkup?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InputInlineQueryResultLocation): InputInlineQueryResultLocation {
        return InputInlineQueryResultLocation(
            id = dto.id,
            location = map(dto.location),
            livePeriod = dto.livePeriod,
            title = dto.title,
            thumbnailUrl = dto.thumbnailUrl,
            thumbnailWidth = dto.thumbnailWidth,
            thumbnailHeight = dto.thumbnailHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: TdApi.InputInlineQueryResultPhoto): InputInlineQueryResultPhoto {
        return InputInlineQueryResultPhoto(
            id = dto.id,
            title = dto.title,
            description = dto.description,
            thumbnailUrl = dto.thumbnailUrl,
            photoUrl = dto.photoUrl,
            photoWidth = dto.photoWidth,
            photoHeight = dto.photoHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: TdApi.InputInlineQueryResultSticker): InputInlineQueryResultSticker {
        return InputInlineQueryResultSticker(
            id = dto.id,
            thumbnailUrl = dto.thumbnailUrl,
            stickerUrl = dto.stickerUrl,
            stickerWidth = dto.stickerWidth,
            stickerHeight = dto.stickerHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: TdApi.InputInlineQueryResultVenue): InputInlineQueryResultVenue {
        return InputInlineQueryResultVenue(
            id = dto.id,
            venue = map(dto.venue),
            thumbnailUrl = dto.thumbnailUrl,
            thumbnailWidth = dto.thumbnailWidth,
            thumbnailHeight = dto.thumbnailHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: TdApi.InputInlineQueryResultVideo): InputInlineQueryResultVideo {
        return InputInlineQueryResultVideo(
            id = dto.id,
            title = dto.title,
            description = dto.description,
            thumbnailUrl = dto.thumbnailUrl,
            videoUrl = dto.videoUrl,
            mimeType = dto.mimeType,
            videoWidth = dto.videoWidth,
            videoHeight = dto.videoHeight,
            videoDuration = dto.videoDuration,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: TdApi.InputInlineQueryResultVoiceNote): InputInlineQueryResultVoiceNote {
        return InputInlineQueryResultVoiceNote(
            id = dto.id,
            title = dto.title,
            voiceNoteUrl = dto.voiceNoteUrl,
            voiceNoteDuration = dto.voiceNoteDuration,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: InputInlineQueryResult): TdApi.InputInlineQueryResult {
        when (dto) {
            is InputInlineQueryResultAnimation -> return map(dto)
            is InputInlineQueryResultArticle -> return map(dto)
            is InputInlineQueryResultAudio -> return map(dto)
            is InputInlineQueryResultContact -> return map(dto)
            is InputInlineQueryResultDocument -> return map(dto)
            is InputInlineQueryResultGame -> return map(dto)
            is InputInlineQueryResultLocation -> return map(dto)
            is InputInlineQueryResultPhoto -> return map(dto)
            is InputInlineQueryResultSticker -> return map(dto)
            is InputInlineQueryResultVenue -> return map(dto)
            is InputInlineQueryResultVideo -> return map(dto)
            is InputInlineQueryResultVoiceNote -> return map(dto)
        }
    }

    fun map(dto: InputInlineQueryResultAnimation): TdApi.InputInlineQueryResultAnimation {
        return TdApi.InputInlineQueryResultAnimation(
            id = dto.id,
            title = dto.title,
            thumbnailUrl = dto.thumbnailUrl,
            thumbnailMimeType = dto.thumbnailMimeType,
            videoUrl = dto.videoUrl,
            videoMimeType = dto.videoMimeType,
            videoDuration = dto.videoDuration,
            videoWidth = dto.videoWidth,
            videoHeight = dto.videoHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: InputInlineQueryResultArticle): TdApi.InputInlineQueryResultArticle {
        return TdApi.InputInlineQueryResultArticle(
            id = dto.id,
            url = dto.url,
            title = dto.title,
            description = dto.description,
            thumbnailUrl = dto.thumbnailUrl,
            thumbnailWidth = dto.thumbnailWidth,
            thumbnailHeight = dto.thumbnailHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: InputInlineQueryResultAudio): TdApi.InputInlineQueryResultAudio {
        return TdApi.InputInlineQueryResultAudio(
            id = dto.id,
            title = dto.title,
            performer = dto.performer,
            audioUrl = dto.audioUrl,
            audioDuration = dto.audioDuration,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: InputInlineQueryResultContact): TdApi.InputInlineQueryResultContact {
        return TdApi.InputInlineQueryResultContact(
            id = dto.id,
            contact = map(dto.contact),
            thumbnailUrl = dto.thumbnailUrl,
            thumbnailWidth = dto.thumbnailWidth,
            thumbnailHeight = dto.thumbnailHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: InputInlineQueryResultDocument): TdApi.InputInlineQueryResultDocument {
        return TdApi.InputInlineQueryResultDocument(
            id = dto.id,
            title = dto.title,
            description = dto.description,
            documentUrl = dto.documentUrl,
            mimeType = dto.mimeType,
            thumbnailUrl = dto.thumbnailUrl,
            thumbnailWidth = dto.thumbnailWidth,
            thumbnailHeight = dto.thumbnailHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: InputInlineQueryResultGame): TdApi.InputInlineQueryResultGame {
        return TdApi.InputInlineQueryResultGame(
            id = dto.id,
            gameShortName = dto.gameShortName,
            replyMarkup = dto.replyMarkup?.let { map(it) },
        )
    }

    fun map(dto: InputInlineQueryResultLocation): TdApi.InputInlineQueryResultLocation {
        return TdApi.InputInlineQueryResultLocation(
            id = dto.id,
            location = map(dto.location),
            livePeriod = dto.livePeriod,
            title = dto.title,
            thumbnailUrl = dto.thumbnailUrl,
            thumbnailWidth = dto.thumbnailWidth,
            thumbnailHeight = dto.thumbnailHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: InputInlineQueryResultPhoto): TdApi.InputInlineQueryResultPhoto {
        return TdApi.InputInlineQueryResultPhoto(
            id = dto.id,
            title = dto.title,
            description = dto.description,
            thumbnailUrl = dto.thumbnailUrl,
            photoUrl = dto.photoUrl,
            photoWidth = dto.photoWidth,
            photoHeight = dto.photoHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: InputInlineQueryResultSticker): TdApi.InputInlineQueryResultSticker {
        return TdApi.InputInlineQueryResultSticker(
            id = dto.id,
            thumbnailUrl = dto.thumbnailUrl,
            stickerUrl = dto.stickerUrl,
            stickerWidth = dto.stickerWidth,
            stickerHeight = dto.stickerHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: InputInlineQueryResultVenue): TdApi.InputInlineQueryResultVenue {
        return TdApi.InputInlineQueryResultVenue(
            id = dto.id,
            venue = map(dto.venue),
            thumbnailUrl = dto.thumbnailUrl,
            thumbnailWidth = dto.thumbnailWidth,
            thumbnailHeight = dto.thumbnailHeight,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: InputInlineQueryResultVideo): TdApi.InputInlineQueryResultVideo {
        return TdApi.InputInlineQueryResultVideo(
            id = dto.id,
            title = dto.title,
            description = dto.description,
            thumbnailUrl = dto.thumbnailUrl,
            videoUrl = dto.videoUrl,
            mimeType = dto.mimeType,
            videoWidth = dto.videoWidth,
            videoHeight = dto.videoHeight,
            videoDuration = dto.videoDuration,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: InputInlineQueryResultVoiceNote): TdApi.InputInlineQueryResultVoiceNote {
        return TdApi.InputInlineQueryResultVoiceNote(
            id = dto.id,
            title = dto.title,
            voiceNoteUrl = dto.voiceNoteUrl,
            voiceNoteDuration = dto.voiceNoteDuration,
            replyMarkup = dto.replyMarkup?.let { map(it) },
            inputMessageContent = map(dto.inputMessageContent),
        )
    }

    fun map(dto: TdApi.InputInvoice): InputInvoice {
        when (dto) {
            is TdApi.InputInvoiceMessage -> return map(dto)
            is TdApi.InputInvoiceName -> return map(dto)
            is TdApi.InputInvoiceTelegram -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InputInvoiceMessage): InputInvoiceMessage {
        return InputInvoiceMessage(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: TdApi.InputInvoiceName): InputInvoiceName {
        return InputInvoiceName(
            name = dto.name,
        )
    }

    fun map(dto: TdApi.InputInvoiceTelegram): InputInvoiceTelegram {
        return InputInvoiceTelegram(
            purpose = map(dto.purpose),
        )
    }

    fun map(dto: InputInvoice): TdApi.InputInvoice {
        when (dto) {
            is InputInvoiceMessage -> return map(dto)
            is InputInvoiceName -> return map(dto)
            is InputInvoiceTelegram -> return map(dto)
        }
    }

    fun map(dto: InputInvoiceMessage): TdApi.InputInvoiceMessage {
        return TdApi.InputInvoiceMessage(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: InputInvoiceName): TdApi.InputInvoiceName {
        return TdApi.InputInvoiceName(
            name = dto.name,
        )
    }

    fun map(dto: InputInvoiceTelegram): TdApi.InputInvoiceTelegram {
        return TdApi.InputInvoiceTelegram(
            purpose = map(dto.purpose),
        )
    }

    fun map(dto: TdApi.InputMessageContent): InputMessageContent {
        when (dto) {
            is TdApi.InputMessageText -> return map(dto)
            is TdApi.InputMessageAnimation -> return map(dto)
            is TdApi.InputMessageAudio -> return map(dto)
            is TdApi.InputMessageDocument -> return map(dto)
            is TdApi.InputMessagePaidMedia -> return map(dto)
            is TdApi.InputMessagePhoto -> return map(dto)
            is TdApi.InputMessageSticker -> return map(dto)
            is TdApi.InputMessageVideo -> return map(dto)
            is TdApi.InputMessageVideoNote -> return map(dto)
            is TdApi.InputMessageVoiceNote -> return map(dto)
            is TdApi.InputMessageLocation -> return map(dto)
            is TdApi.InputMessageVenue -> return map(dto)
            is TdApi.InputMessageContact -> return map(dto)
            is TdApi.InputMessageDice -> return map(dto)
            is TdApi.InputMessageGame -> return map(dto)
            is TdApi.InputMessageInvoice -> return map(dto)
            is TdApi.InputMessagePoll -> return map(dto)
            is TdApi.InputMessageStory -> return map(dto)
            is TdApi.InputMessageChecklist -> return map(dto)
            is TdApi.InputMessageForwarded -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InputMessageText): InputMessageText {
        return InputMessageText(
            text = map(dto.text),
            linkPreviewOptions = dto.linkPreviewOptions?.let { map(it) },
            clearDraft = dto.clearDraft,
        )
    }

    fun map(dto: TdApi.InputMessageAnimation): InputMessageAnimation {
        return InputMessageAnimation(
            animation = map(dto.animation),
            thumbnail = dto.thumbnail?.let { map(it) },
            addedStickerFileIds = dto.addedStickerFileIds,
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
            caption = dto.caption?.let { map(it) },
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
            hasSpoiler = dto.hasSpoiler,
        )
    }

    fun map(dto: TdApi.InputMessageAudio): InputMessageAudio {
        return InputMessageAudio(
            audio = map(dto.audio),
            albumCoverThumbnail = dto.albumCoverThumbnail?.let { map(it) },
            duration = dto.duration,
            title = dto.title,
            performer = dto.performer,
            caption = dto.caption?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InputMessageDocument): InputMessageDocument {
        return InputMessageDocument(
            document = map(dto.document),
            thumbnail = dto.thumbnail?.let { map(it) },
            disableContentTypeDetection = dto.disableContentTypeDetection,
            caption = dto.caption?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InputMessagePaidMedia): InputMessagePaidMedia {
        return InputMessagePaidMedia(
            starCount = dto.starCount,
            paidMedia = dto.paidMedia.mapArray { map(it) },
            caption = dto.caption?.let { map(it) },
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
            payload = dto.payload,
        )
    }

    fun map(dto: TdApi.InputMessagePhoto): InputMessagePhoto {
        return InputMessagePhoto(
            photo = map(dto.photo),
            thumbnail = dto.thumbnail?.let { map(it) },
            addedStickerFileIds = dto.addedStickerFileIds,
            width = dto.width,
            height = dto.height,
            caption = dto.caption?.let { map(it) },
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
            selfDestructType = dto.selfDestructType?.let { map(it) },
            hasSpoiler = dto.hasSpoiler,
        )
    }

    fun map(dto: TdApi.InputMessageSticker): InputMessageSticker {
        return InputMessageSticker(
            sticker = map(dto.sticker),
            thumbnail = dto.thumbnail?.let { map(it) },
            width = dto.width,
            height = dto.height,
            emoji = dto.emoji,
        )
    }

    fun map(dto: TdApi.InputMessageVideo): InputMessageVideo {
        return InputMessageVideo(
            video = map(dto.video),
            thumbnail = dto.thumbnail?.let { map(it) },
            cover = dto.cover?.let { map(it) },
            startTimestamp = dto.startTimestamp,
            addedStickerFileIds = dto.addedStickerFileIds,
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
            supportsStreaming = dto.supportsStreaming,
            caption = dto.caption?.let { map(it) },
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
            selfDestructType = dto.selfDestructType?.let { map(it) },
            hasSpoiler = dto.hasSpoiler,
        )
    }

    fun map(dto: TdApi.InputMessageVideoNote): InputMessageVideoNote {
        return InputMessageVideoNote(
            videoNote = map(dto.videoNote),
            thumbnail = dto.thumbnail?.let { map(it) },
            duration = dto.duration,
            length = dto.length,
            selfDestructType = dto.selfDestructType?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InputMessageVoiceNote): InputMessageVoiceNote {
        return InputMessageVoiceNote(
            voiceNote = map(dto.voiceNote),
            duration = dto.duration,
            waveform = dto.waveform,
            caption = dto.caption?.let { map(it) },
            selfDestructType = dto.selfDestructType?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InputMessageLocation): InputMessageLocation {
        return InputMessageLocation(
            location = map(dto.location),
            livePeriod = dto.livePeriod,
            heading = dto.heading,
            proximityAlertRadius = dto.proximityAlertRadius,
        )
    }

    fun map(dto: TdApi.InputMessageVenue): InputMessageVenue {
        return InputMessageVenue(
            venue = map(dto.venue),
        )
    }

    fun map(dto: TdApi.InputMessageContact): InputMessageContact {
        return InputMessageContact(
            contact = map(dto.contact),
        )
    }

    fun map(dto: TdApi.InputMessageDice): InputMessageDice {
        return InputMessageDice(
            emoji = dto.emoji,
            clearDraft = dto.clearDraft,
        )
    }

    fun map(dto: TdApi.InputMessageGame): InputMessageGame {
        return InputMessageGame(
            botUserId = dto.botUserId,
            gameShortName = dto.gameShortName,
        )
    }

    fun map(dto: TdApi.InputMessageInvoice): InputMessageInvoice {
        return InputMessageInvoice(
            invoice = map(dto.invoice),
            title = dto.title,
            description = dto.description,
            photoUrl = dto.photoUrl,
            photoSize = dto.photoSize,
            photoWidth = dto.photoWidth,
            photoHeight = dto.photoHeight,
            payload = dto.payload,
            providerToken = dto.providerToken,
            providerData = dto.providerData,
            startParameter = dto.startParameter,
            paidMedia = dto.paidMedia?.let { map(it) },
            paidMediaCaption = dto.paidMediaCaption?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InputMessagePoll): InputMessagePoll {
        return InputMessagePoll(
            question = map(dto.question),
            options = dto.options.mapArray { map(it) },
            isAnonymous = dto.isAnonymous,
            type = map(dto.type),
            openPeriod = dto.openPeriod,
            closeDate = dto.closeDate,
            isClosed = dto.isClosed,
        )
    }

    fun map(dto: TdApi.InputMessageStory): InputMessageStory {
        return InputMessageStory(
            storyPosterChatId = dto.storyPosterChatId,
            storyId = dto.storyId,
        )
    }

    fun map(dto: TdApi.InputMessageChecklist): InputMessageChecklist {
        return InputMessageChecklist(
            checklist = map(dto.checklist),
        )
    }

    fun map(dto: TdApi.InputMessageForwarded): InputMessageForwarded {
        return InputMessageForwarded(
            fromChatId = dto.fromChatId,
            messageId = dto.messageId,
            inGameShare = dto.inGameShare,
            replaceVideoStartTimestamp = dto.replaceVideoStartTimestamp,
            newVideoStartTimestamp = dto.newVideoStartTimestamp,
            copyOptions = dto.copyOptions?.let { map(it) },
        )
    }

    fun map(dto: InputMessageContent): TdApi.InputMessageContent {
        when (dto) {
            is InputMessageText -> return map(dto)
            is InputMessageAnimation -> return map(dto)
            is InputMessageAudio -> return map(dto)
            is InputMessageDocument -> return map(dto)
            is InputMessagePaidMedia -> return map(dto)
            is InputMessagePhoto -> return map(dto)
            is InputMessageSticker -> return map(dto)
            is InputMessageVideo -> return map(dto)
            is InputMessageVideoNote -> return map(dto)
            is InputMessageVoiceNote -> return map(dto)
            is InputMessageLocation -> return map(dto)
            is InputMessageVenue -> return map(dto)
            is InputMessageContact -> return map(dto)
            is InputMessageDice -> return map(dto)
            is InputMessageGame -> return map(dto)
            is InputMessageInvoice -> return map(dto)
            is InputMessagePoll -> return map(dto)
            is InputMessageStory -> return map(dto)
            is InputMessageChecklist -> return map(dto)
            is InputMessageForwarded -> return map(dto)
        }
    }

    fun map(dto: InputMessageText): TdApi.InputMessageText {
        return TdApi.InputMessageText(
            text = map(dto.text),
            linkPreviewOptions = dto.linkPreviewOptions?.let { map(it) },
            clearDraft = dto.clearDraft,
        )
    }

    fun map(dto: InputMessageAnimation): TdApi.InputMessageAnimation {
        return TdApi.InputMessageAnimation(
            animation = map(dto.animation),
            thumbnail = dto.thumbnail?.let { map(it) },
            addedStickerFileIds = dto.addedStickerFileIds,
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
            caption = dto.caption?.let { map(it) },
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
            hasSpoiler = dto.hasSpoiler,
        )
    }

    fun map(dto: InputMessageAudio): TdApi.InputMessageAudio {
        return TdApi.InputMessageAudio(
            audio = map(dto.audio),
            albumCoverThumbnail = dto.albumCoverThumbnail?.let { map(it) },
            duration = dto.duration,
            title = dto.title,
            performer = dto.performer,
            caption = dto.caption?.let { map(it) },
        )
    }

    fun map(dto: InputMessageDocument): TdApi.InputMessageDocument {
        return TdApi.InputMessageDocument(
            document = map(dto.document),
            thumbnail = dto.thumbnail?.let { map(it) },
            disableContentTypeDetection = dto.disableContentTypeDetection,
            caption = dto.caption?.let { map(it) },
        )
    }

    fun map(dto: InputMessagePaidMedia): TdApi.InputMessagePaidMedia {
        return TdApi.InputMessagePaidMedia(
            starCount = dto.starCount,
            paidMedia = dto.paidMedia.mapArray { map(it) },
            caption = dto.caption?.let { map(it) },
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
            payload = dto.payload,
        )
    }

    fun map(dto: InputMessagePhoto): TdApi.InputMessagePhoto {
        return TdApi.InputMessagePhoto(
            photo = map(dto.photo),
            thumbnail = dto.thumbnail?.let { map(it) },
            addedStickerFileIds = dto.addedStickerFileIds,
            width = dto.width,
            height = dto.height,
            caption = dto.caption?.let { map(it) },
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
            selfDestructType = dto.selfDestructType?.let { map(it) },
            hasSpoiler = dto.hasSpoiler,
        )
    }

    fun map(dto: InputMessageSticker): TdApi.InputMessageSticker {
        return TdApi.InputMessageSticker(
            sticker = map(dto.sticker),
            thumbnail = dto.thumbnail?.let { map(it) },
            width = dto.width,
            height = dto.height,
            emoji = dto.emoji,
        )
    }

    fun map(dto: InputMessageVideo): TdApi.InputMessageVideo {
        return TdApi.InputMessageVideo(
            video = map(dto.video),
            thumbnail = dto.thumbnail?.let { map(it) },
            cover = dto.cover?.let { map(it) },
            startTimestamp = dto.startTimestamp,
            addedStickerFileIds = dto.addedStickerFileIds,
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
            supportsStreaming = dto.supportsStreaming,
            caption = dto.caption?.let { map(it) },
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
            selfDestructType = dto.selfDestructType?.let { map(it) },
            hasSpoiler = dto.hasSpoiler,
        )
    }

    fun map(dto: InputMessageVideoNote): TdApi.InputMessageVideoNote {
        return TdApi.InputMessageVideoNote(
            videoNote = map(dto.videoNote),
            thumbnail = dto.thumbnail?.let { map(it) },
            duration = dto.duration,
            length = dto.length,
            selfDestructType = dto.selfDestructType?.let { map(it) },
        )
    }

    fun map(dto: InputMessageVoiceNote): TdApi.InputMessageVoiceNote {
        return TdApi.InputMessageVoiceNote(
            voiceNote = map(dto.voiceNote),
            duration = dto.duration,
            waveform = dto.waveform,
            caption = dto.caption?.let { map(it) },
            selfDestructType = dto.selfDestructType?.let { map(it) },
        )
    }

    fun map(dto: InputMessageLocation): TdApi.InputMessageLocation {
        return TdApi.InputMessageLocation(
            location = map(dto.location),
            livePeriod = dto.livePeriod,
            heading = dto.heading,
            proximityAlertRadius = dto.proximityAlertRadius,
        )
    }

    fun map(dto: InputMessageVenue): TdApi.InputMessageVenue {
        return TdApi.InputMessageVenue(
            venue = map(dto.venue),
        )
    }

    fun map(dto: InputMessageContact): TdApi.InputMessageContact {
        return TdApi.InputMessageContact(
            contact = map(dto.contact),
        )
    }

    fun map(dto: InputMessageDice): TdApi.InputMessageDice {
        return TdApi.InputMessageDice(
            emoji = dto.emoji,
            clearDraft = dto.clearDraft,
        )
    }

    fun map(dto: InputMessageGame): TdApi.InputMessageGame {
        return TdApi.InputMessageGame(
            botUserId = dto.botUserId,
            gameShortName = dto.gameShortName,
        )
    }

    fun map(dto: InputMessageInvoice): TdApi.InputMessageInvoice {
        return TdApi.InputMessageInvoice(
            invoice = map(dto.invoice),
            title = dto.title,
            description = dto.description,
            photoUrl = dto.photoUrl,
            photoSize = dto.photoSize,
            photoWidth = dto.photoWidth,
            photoHeight = dto.photoHeight,
            payload = dto.payload,
            providerToken = dto.providerToken,
            providerData = dto.providerData,
            startParameter = dto.startParameter,
            paidMedia = dto.paidMedia?.let { map(it) },
            paidMediaCaption = dto.paidMediaCaption?.let { map(it) },
        )
    }

    fun map(dto: InputMessagePoll): TdApi.InputMessagePoll {
        return TdApi.InputMessagePoll(
            question = map(dto.question),
            options = dto.options.mapArray { map(it) },
            isAnonymous = dto.isAnonymous,
            type = map(dto.type),
            openPeriod = dto.openPeriod,
            closeDate = dto.closeDate,
            isClosed = dto.isClosed,
        )
    }

    fun map(dto: InputMessageStory): TdApi.InputMessageStory {
        return TdApi.InputMessageStory(
            storyPosterChatId = dto.storyPosterChatId,
            storyId = dto.storyId,
        )
    }

    fun map(dto: InputMessageChecklist): TdApi.InputMessageChecklist {
        return TdApi.InputMessageChecklist(
            checklist = map(dto.checklist),
        )
    }

    fun map(dto: InputMessageForwarded): TdApi.InputMessageForwarded {
        return TdApi.InputMessageForwarded(
            fromChatId = dto.fromChatId,
            messageId = dto.messageId,
            inGameShare = dto.inGameShare,
            replaceVideoStartTimestamp = dto.replaceVideoStartTimestamp,
            newVideoStartTimestamp = dto.newVideoStartTimestamp,
            copyOptions = dto.copyOptions?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InputMessageReplyTo): InputMessageReplyTo {
        when (dto) {
            is TdApi.InputMessageReplyToMessage -> return map(dto)
            is TdApi.InputMessageReplyToExternalMessage -> return map(dto)
            is TdApi.InputMessageReplyToStory -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InputMessageReplyToMessage): InputMessageReplyToMessage {
        return InputMessageReplyToMessage(
            messageId = dto.messageId,
            quote = dto.quote?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InputMessageReplyToExternalMessage): InputMessageReplyToExternalMessage {
        return InputMessageReplyToExternalMessage(
            chatId = dto.chatId,
            messageId = dto.messageId,
            quote = dto.quote?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InputMessageReplyToStory): InputMessageReplyToStory {
        return InputMessageReplyToStory(
            storyPosterChatId = dto.storyPosterChatId,
            storyId = dto.storyId,
        )
    }

    fun map(dto: InputMessageReplyTo): TdApi.InputMessageReplyTo {
        when (dto) {
            is InputMessageReplyToMessage -> return map(dto)
            is InputMessageReplyToExternalMessage -> return map(dto)
            is InputMessageReplyToStory -> return map(dto)
        }
    }

    fun map(dto: InputMessageReplyToMessage): TdApi.InputMessageReplyToMessage {
        return TdApi.InputMessageReplyToMessage(
            messageId = dto.messageId,
            quote = dto.quote?.let { map(it) },
        )
    }

    fun map(dto: InputMessageReplyToExternalMessage): TdApi.InputMessageReplyToExternalMessage {
        return TdApi.InputMessageReplyToExternalMessage(
            chatId = dto.chatId,
            messageId = dto.messageId,
            quote = dto.quote?.let { map(it) },
        )
    }

    fun map(dto: InputMessageReplyToStory): TdApi.InputMessageReplyToStory {
        return TdApi.InputMessageReplyToStory(
            storyPosterChatId = dto.storyPosterChatId,
            storyId = dto.storyId,
        )
    }

    fun map(dto: TdApi.InputPaidMedia): InputPaidMedia {
        return InputPaidMedia(
            type = map(dto.type),
            media = map(dto.media),
            thumbnail = dto.thumbnail?.let { map(it) },
            addedStickerFileIds = dto.addedStickerFileIds,
            width = dto.width,
            height = dto.height,
        )
    }

    fun map(dto: InputPaidMedia): TdApi.InputPaidMedia {
        return TdApi.InputPaidMedia(
            type = map(dto.type),
            media = map(dto.media),
            thumbnail = dto.thumbnail?.let { map(it) },
            addedStickerFileIds = dto.addedStickerFileIds,
            width = dto.width,
            height = dto.height,
        )
    }

    fun map(dto: TdApi.InputPaidMediaType): InputPaidMediaType {
        when (dto) {
            is TdApi.InputPaidMediaTypePhoto -> return map(dto)
            is TdApi.InputPaidMediaTypeVideo -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InputPaidMediaTypePhoto): InputPaidMediaTypePhoto {
        return InputPaidMediaTypePhoto()
    }

    fun map(dto: TdApi.InputPaidMediaTypeVideo): InputPaidMediaTypeVideo {
        return InputPaidMediaTypeVideo(
            cover = dto.cover?.let { map(it) },
            startTimestamp = dto.startTimestamp,
            duration = dto.duration,
            supportsStreaming = dto.supportsStreaming,
        )
    }

    fun map(dto: InputPaidMediaType): TdApi.InputPaidMediaType {
        when (dto) {
            is InputPaidMediaTypePhoto -> return map(dto)
            is InputPaidMediaTypeVideo -> return map(dto)
        }
    }

    fun map(dto: InputPaidMediaTypePhoto): TdApi.InputPaidMediaTypePhoto {
        return TdApi.InputPaidMediaTypePhoto()
    }

    fun map(dto: InputPaidMediaTypeVideo): TdApi.InputPaidMediaTypeVideo {
        return TdApi.InputPaidMediaTypeVideo(
            cover = dto.cover?.let { map(it) },
            startTimestamp = dto.startTimestamp,
            duration = dto.duration,
            supportsStreaming = dto.supportsStreaming,
        )
    }

    fun map(dto: TdApi.InputPassportElement): InputPassportElement {
        when (dto) {
            is TdApi.InputPassportElementPersonalDetails -> return map(dto)
            is TdApi.InputPassportElementPassport -> return map(dto)
            is TdApi.InputPassportElementDriverLicense -> return map(dto)
            is TdApi.InputPassportElementIdentityCard -> return map(dto)
            is TdApi.InputPassportElementInternalPassport -> return map(dto)
            is TdApi.InputPassportElementAddress -> return map(dto)
            is TdApi.InputPassportElementUtilityBill -> return map(dto)
            is TdApi.InputPassportElementBankStatement -> return map(dto)
            is TdApi.InputPassportElementRentalAgreement -> return map(dto)
            is TdApi.InputPassportElementPassportRegistration -> return map(dto)
            is TdApi.InputPassportElementTemporaryRegistration -> return map(dto)
            is TdApi.InputPassportElementPhoneNumber -> return map(dto)
            is TdApi.InputPassportElementEmailAddress -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InputPassportElementPersonalDetails): InputPassportElementPersonalDetails {
        return InputPassportElementPersonalDetails(
            personalDetails = map(dto.personalDetails),
        )
    }

    fun map(dto: TdApi.InputPassportElementPassport): InputPassportElementPassport {
        return InputPassportElementPassport(
            passport = map(dto.passport),
        )
    }

    fun map(dto: TdApi.InputPassportElementDriverLicense): InputPassportElementDriverLicense {
        return InputPassportElementDriverLicense(
            driverLicense = map(dto.driverLicense),
        )
    }

    fun map(dto: TdApi.InputPassportElementIdentityCard): InputPassportElementIdentityCard {
        return InputPassportElementIdentityCard(
            identityCard = map(dto.identityCard),
        )
    }

    fun map(dto: TdApi.InputPassportElementInternalPassport): InputPassportElementInternalPassport {
        return InputPassportElementInternalPassport(
            internalPassport = map(dto.internalPassport),
        )
    }

    fun map(dto: TdApi.InputPassportElementAddress): InputPassportElementAddress {
        return InputPassportElementAddress(
            address = map(dto.address),
        )
    }

    fun map(dto: TdApi.InputPassportElementUtilityBill): InputPassportElementUtilityBill {
        return InputPassportElementUtilityBill(
            utilityBill = map(dto.utilityBill),
        )
    }

    fun map(dto: TdApi.InputPassportElementBankStatement): InputPassportElementBankStatement {
        return InputPassportElementBankStatement(
            bankStatement = map(dto.bankStatement),
        )
    }

    fun map(dto: TdApi.InputPassportElementRentalAgreement): InputPassportElementRentalAgreement {
        return InputPassportElementRentalAgreement(
            rentalAgreement = map(dto.rentalAgreement),
        )
    }

    fun map(dto: TdApi.InputPassportElementPassportRegistration): InputPassportElementPassportRegistration {
        return InputPassportElementPassportRegistration(
            passportRegistration = map(dto.passportRegistration),
        )
    }

    fun map(dto: TdApi.InputPassportElementTemporaryRegistration): InputPassportElementTemporaryRegistration {
        return InputPassportElementTemporaryRegistration(
            temporaryRegistration = map(dto.temporaryRegistration),
        )
    }

    fun map(dto: TdApi.InputPassportElementPhoneNumber): InputPassportElementPhoneNumber {
        return InputPassportElementPhoneNumber(
            phoneNumber = dto.phoneNumber,
        )
    }

    fun map(dto: TdApi.InputPassportElementEmailAddress): InputPassportElementEmailAddress {
        return InputPassportElementEmailAddress(
            emailAddress = dto.emailAddress,
        )
    }

    fun map(dto: InputPassportElement): TdApi.InputPassportElement {
        when (dto) {
            is InputPassportElementPersonalDetails -> return map(dto)
            is InputPassportElementPassport -> return map(dto)
            is InputPassportElementDriverLicense -> return map(dto)
            is InputPassportElementIdentityCard -> return map(dto)
            is InputPassportElementInternalPassport -> return map(dto)
            is InputPassportElementAddress -> return map(dto)
            is InputPassportElementUtilityBill -> return map(dto)
            is InputPassportElementBankStatement -> return map(dto)
            is InputPassportElementRentalAgreement -> return map(dto)
            is InputPassportElementPassportRegistration -> return map(dto)
            is InputPassportElementTemporaryRegistration -> return map(dto)
            is InputPassportElementPhoneNumber -> return map(dto)
            is InputPassportElementEmailAddress -> return map(dto)
        }
    }

    fun map(dto: InputPassportElementPersonalDetails): TdApi.InputPassportElementPersonalDetails {
        return TdApi.InputPassportElementPersonalDetails(
            personalDetails = map(dto.personalDetails),
        )
    }

    fun map(dto: InputPassportElementPassport): TdApi.InputPassportElementPassport {
        return TdApi.InputPassportElementPassport(
            passport = map(dto.passport),
        )
    }

    fun map(dto: InputPassportElementDriverLicense): TdApi.InputPassportElementDriverLicense {
        return TdApi.InputPassportElementDriverLicense(
            driverLicense = map(dto.driverLicense),
        )
    }

    fun map(dto: InputPassportElementIdentityCard): TdApi.InputPassportElementIdentityCard {
        return TdApi.InputPassportElementIdentityCard(
            identityCard = map(dto.identityCard),
        )
    }

    fun map(dto: InputPassportElementInternalPassport): TdApi.InputPassportElementInternalPassport {
        return TdApi.InputPassportElementInternalPassport(
            internalPassport = map(dto.internalPassport),
        )
    }

    fun map(dto: InputPassportElementAddress): TdApi.InputPassportElementAddress {
        return TdApi.InputPassportElementAddress(
            address = map(dto.address),
        )
    }

    fun map(dto: InputPassportElementUtilityBill): TdApi.InputPassportElementUtilityBill {
        return TdApi.InputPassportElementUtilityBill(
            utilityBill = map(dto.utilityBill),
        )
    }

    fun map(dto: InputPassportElementBankStatement): TdApi.InputPassportElementBankStatement {
        return TdApi.InputPassportElementBankStatement(
            bankStatement = map(dto.bankStatement),
        )
    }

    fun map(dto: InputPassportElementRentalAgreement): TdApi.InputPassportElementRentalAgreement {
        return TdApi.InputPassportElementRentalAgreement(
            rentalAgreement = map(dto.rentalAgreement),
        )
    }

    fun map(dto: InputPassportElementPassportRegistration): TdApi.InputPassportElementPassportRegistration {
        return TdApi.InputPassportElementPassportRegistration(
            passportRegistration = map(dto.passportRegistration),
        )
    }

    fun map(dto: InputPassportElementTemporaryRegistration): TdApi.InputPassportElementTemporaryRegistration {
        return TdApi.InputPassportElementTemporaryRegistration(
            temporaryRegistration = map(dto.temporaryRegistration),
        )
    }

    fun map(dto: InputPassportElementPhoneNumber): TdApi.InputPassportElementPhoneNumber {
        return TdApi.InputPassportElementPhoneNumber(
            phoneNumber = dto.phoneNumber,
        )
    }

    fun map(dto: InputPassportElementEmailAddress): TdApi.InputPassportElementEmailAddress {
        return TdApi.InputPassportElementEmailAddress(
            emailAddress = dto.emailAddress,
        )
    }

    fun map(dto: TdApi.InputPassportElementError): InputPassportElementError {
        return InputPassportElementError(
            type = map(dto.type),
            message = dto.message,
            source = map(dto.source),
        )
    }

    fun map(dto: InputPassportElementError): TdApi.InputPassportElementError {
        return TdApi.InputPassportElementError(
            type = map(dto.type),
            message = dto.message,
            source = map(dto.source),
        )
    }

    fun map(dto: TdApi.InputPassportElementErrorSource): InputPassportElementErrorSource {
        when (dto) {
            is TdApi.InputPassportElementErrorSourceUnspecified -> return map(dto)
            is TdApi.InputPassportElementErrorSourceDataField -> return map(dto)
            is TdApi.InputPassportElementErrorSourceFrontSide -> return map(dto)
            is TdApi.InputPassportElementErrorSourceReverseSide -> return map(dto)
            is TdApi.InputPassportElementErrorSourceSelfie -> return map(dto)
            is TdApi.InputPassportElementErrorSourceTranslationFile -> return map(dto)
            is TdApi.InputPassportElementErrorSourceTranslationFiles -> return map(dto)
            is TdApi.InputPassportElementErrorSourceFile -> return map(dto)
            is TdApi.InputPassportElementErrorSourceFiles -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InputPassportElementErrorSourceUnspecified): InputPassportElementErrorSourceUnspecified {
        return InputPassportElementErrorSourceUnspecified(
            elementHash = dto.elementHash,
        )
    }

    fun map(dto: TdApi.InputPassportElementErrorSourceDataField): InputPassportElementErrorSourceDataField {
        return InputPassportElementErrorSourceDataField(
            fieldName = dto.fieldName,
            dataHash = dto.dataHash,
        )
    }

    fun map(dto: TdApi.InputPassportElementErrorSourceFrontSide): InputPassportElementErrorSourceFrontSide {
        return InputPassportElementErrorSourceFrontSide(
            fileHash = dto.fileHash,
        )
    }

    fun map(dto: TdApi.InputPassportElementErrorSourceReverseSide): InputPassportElementErrorSourceReverseSide {
        return InputPassportElementErrorSourceReverseSide(
            fileHash = dto.fileHash,
        )
    }

    fun map(dto: TdApi.InputPassportElementErrorSourceSelfie): InputPassportElementErrorSourceSelfie {
        return InputPassportElementErrorSourceSelfie(
            fileHash = dto.fileHash,
        )
    }

    fun map(dto: TdApi.InputPassportElementErrorSourceTranslationFile): InputPassportElementErrorSourceTranslationFile {
        return InputPassportElementErrorSourceTranslationFile(
            fileHash = dto.fileHash,
        )
    }

    fun map(dto: TdApi.InputPassportElementErrorSourceTranslationFiles): InputPassportElementErrorSourceTranslationFiles {
        return InputPassportElementErrorSourceTranslationFiles(
            fileHashes = dto.fileHashes,
        )
    }

    fun map(dto: TdApi.InputPassportElementErrorSourceFile): InputPassportElementErrorSourceFile {
        return InputPassportElementErrorSourceFile(
            fileHash = dto.fileHash,
        )
    }

    fun map(dto: TdApi.InputPassportElementErrorSourceFiles): InputPassportElementErrorSourceFiles {
        return InputPassportElementErrorSourceFiles(
            fileHashes = dto.fileHashes,
        )
    }

    fun map(dto: InputPassportElementErrorSource): TdApi.InputPassportElementErrorSource {
        when (dto) {
            is InputPassportElementErrorSourceUnspecified -> return map(dto)
            is InputPassportElementErrorSourceDataField -> return map(dto)
            is InputPassportElementErrorSourceFrontSide -> return map(dto)
            is InputPassportElementErrorSourceReverseSide -> return map(dto)
            is InputPassportElementErrorSourceSelfie -> return map(dto)
            is InputPassportElementErrorSourceTranslationFile -> return map(dto)
            is InputPassportElementErrorSourceTranslationFiles -> return map(dto)
            is InputPassportElementErrorSourceFile -> return map(dto)
            is InputPassportElementErrorSourceFiles -> return map(dto)
        }
    }

    fun map(dto: InputPassportElementErrorSourceUnspecified): TdApi.InputPassportElementErrorSourceUnspecified {
        return TdApi.InputPassportElementErrorSourceUnspecified(
            elementHash = dto.elementHash,
        )
    }

    fun map(dto: InputPassportElementErrorSourceDataField): TdApi.InputPassportElementErrorSourceDataField {
        return TdApi.InputPassportElementErrorSourceDataField(
            fieldName = dto.fieldName,
            dataHash = dto.dataHash,
        )
    }

    fun map(dto: InputPassportElementErrorSourceFrontSide): TdApi.InputPassportElementErrorSourceFrontSide {
        return TdApi.InputPassportElementErrorSourceFrontSide(
            fileHash = dto.fileHash,
        )
    }

    fun map(dto: InputPassportElementErrorSourceReverseSide): TdApi.InputPassportElementErrorSourceReverseSide {
        return TdApi.InputPassportElementErrorSourceReverseSide(
            fileHash = dto.fileHash,
        )
    }

    fun map(dto: InputPassportElementErrorSourceSelfie): TdApi.InputPassportElementErrorSourceSelfie {
        return TdApi.InputPassportElementErrorSourceSelfie(
            fileHash = dto.fileHash,
        )
    }

    fun map(dto: InputPassportElementErrorSourceTranslationFile): TdApi.InputPassportElementErrorSourceTranslationFile {
        return TdApi.InputPassportElementErrorSourceTranslationFile(
            fileHash = dto.fileHash,
        )
    }

    fun map(dto: InputPassportElementErrorSourceTranslationFiles): TdApi.InputPassportElementErrorSourceTranslationFiles {
        return TdApi.InputPassportElementErrorSourceTranslationFiles(
            fileHashes = dto.fileHashes,
        )
    }

    fun map(dto: InputPassportElementErrorSourceFile): TdApi.InputPassportElementErrorSourceFile {
        return TdApi.InputPassportElementErrorSourceFile(
            fileHash = dto.fileHash,
        )
    }

    fun map(dto: InputPassportElementErrorSourceFiles): TdApi.InputPassportElementErrorSourceFiles {
        return TdApi.InputPassportElementErrorSourceFiles(
            fileHashes = dto.fileHashes,
        )
    }

    fun map(dto: TdApi.InputPersonalDocument): InputPersonalDocument {
        return InputPersonalDocument(
            files = dto.files.mapArray { map(it) },
            translation = dto.translation.mapArray { map(it) },
        )
    }

    fun map(dto: InputPersonalDocument): TdApi.InputPersonalDocument {
        return TdApi.InputPersonalDocument(
            files = dto.files.mapArray { map(it) },
            translation = dto.translation.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.InputSticker): InputSticker {
        return InputSticker(
            sticker = map(dto.sticker),
            format = map(dto.format),
            emojis = dto.emojis,
            maskPosition = dto.maskPosition?.let { map(it) },
            keywords = dto.keywords,
        )
    }

    fun map(dto: InputSticker): TdApi.InputSticker {
        return TdApi.InputSticker(
            sticker = map(dto.sticker),
            format = map(dto.format),
            emojis = dto.emojis,
            maskPosition = dto.maskPosition?.let { map(it) },
            keywords = dto.keywords,
        )
    }

    fun map(dto: TdApi.InputStoryArea): InputStoryArea {
        return InputStoryArea(
            position = map(dto.position),
            type = map(dto.type),
        )
    }

    fun map(dto: InputStoryArea): TdApi.InputStoryArea {
        return TdApi.InputStoryArea(
            position = map(dto.position),
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.InputStoryAreaType): InputStoryAreaType {
        when (dto) {
            is TdApi.InputStoryAreaTypeLocation -> return map(dto)
            is TdApi.InputStoryAreaTypeFoundVenue -> return map(dto)
            is TdApi.InputStoryAreaTypePreviousVenue -> return map(dto)
            is TdApi.InputStoryAreaTypeSuggestedReaction -> return map(dto)
            is TdApi.InputStoryAreaTypeMessage -> return map(dto)
            is TdApi.InputStoryAreaTypeLink -> return map(dto)
            is TdApi.InputStoryAreaTypeWeather -> return map(dto)
            is TdApi.InputStoryAreaTypeUpgradedGift -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InputStoryAreaTypeLocation): InputStoryAreaTypeLocation {
        return InputStoryAreaTypeLocation(
            location = map(dto.location),
            address = dto.address?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InputStoryAreaTypeFoundVenue): InputStoryAreaTypeFoundVenue {
        return InputStoryAreaTypeFoundVenue(
            queryId = dto.queryId,
            resultId = dto.resultId,
        )
    }

    fun map(dto: TdApi.InputStoryAreaTypePreviousVenue): InputStoryAreaTypePreviousVenue {
        return InputStoryAreaTypePreviousVenue(
            venueProvider = dto.venueProvider,
            venueId = dto.venueId,
        )
    }

    fun map(dto: TdApi.InputStoryAreaTypeSuggestedReaction): InputStoryAreaTypeSuggestedReaction {
        return InputStoryAreaTypeSuggestedReaction(
            reactionType = map(dto.reactionType),
            isDark = dto.isDark,
            isFlipped = dto.isFlipped,
        )
    }

    fun map(dto: TdApi.InputStoryAreaTypeMessage): InputStoryAreaTypeMessage {
        return InputStoryAreaTypeMessage(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: TdApi.InputStoryAreaTypeLink): InputStoryAreaTypeLink {
        return InputStoryAreaTypeLink(
            url = dto.url,
        )
    }

    fun map(dto: TdApi.InputStoryAreaTypeWeather): InputStoryAreaTypeWeather {
        return InputStoryAreaTypeWeather(
            temperature = dto.temperature,
            emoji = dto.emoji,
            backgroundColor = dto.backgroundColor,
        )
    }

    fun map(dto: TdApi.InputStoryAreaTypeUpgradedGift): InputStoryAreaTypeUpgradedGift {
        return InputStoryAreaTypeUpgradedGift(
            giftName = dto.giftName,
        )
    }

    fun map(dto: InputStoryAreaType): TdApi.InputStoryAreaType {
        when (dto) {
            is InputStoryAreaTypeLocation -> return map(dto)
            is InputStoryAreaTypeFoundVenue -> return map(dto)
            is InputStoryAreaTypePreviousVenue -> return map(dto)
            is InputStoryAreaTypeSuggestedReaction -> return map(dto)
            is InputStoryAreaTypeMessage -> return map(dto)
            is InputStoryAreaTypeLink -> return map(dto)
            is InputStoryAreaTypeWeather -> return map(dto)
            is InputStoryAreaTypeUpgradedGift -> return map(dto)
        }
    }

    fun map(dto: InputStoryAreaTypeLocation): TdApi.InputStoryAreaTypeLocation {
        return TdApi.InputStoryAreaTypeLocation(
            location = map(dto.location),
            address = dto.address?.let { map(it) },
        )
    }

    fun map(dto: InputStoryAreaTypeFoundVenue): TdApi.InputStoryAreaTypeFoundVenue {
        return TdApi.InputStoryAreaTypeFoundVenue(
            queryId = dto.queryId,
            resultId = dto.resultId,
        )
    }

    fun map(dto: InputStoryAreaTypePreviousVenue): TdApi.InputStoryAreaTypePreviousVenue {
        return TdApi.InputStoryAreaTypePreviousVenue(
            venueProvider = dto.venueProvider,
            venueId = dto.venueId,
        )
    }

    fun map(dto: InputStoryAreaTypeSuggestedReaction): TdApi.InputStoryAreaTypeSuggestedReaction {
        return TdApi.InputStoryAreaTypeSuggestedReaction(
            reactionType = map(dto.reactionType),
            isDark = dto.isDark,
            isFlipped = dto.isFlipped,
        )
    }

    fun map(dto: InputStoryAreaTypeMessage): TdApi.InputStoryAreaTypeMessage {
        return TdApi.InputStoryAreaTypeMessage(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: InputStoryAreaTypeLink): TdApi.InputStoryAreaTypeLink {
        return TdApi.InputStoryAreaTypeLink(
            url = dto.url,
        )
    }

    fun map(dto: InputStoryAreaTypeWeather): TdApi.InputStoryAreaTypeWeather {
        return TdApi.InputStoryAreaTypeWeather(
            temperature = dto.temperature,
            emoji = dto.emoji,
            backgroundColor = dto.backgroundColor,
        )
    }

    fun map(dto: InputStoryAreaTypeUpgradedGift): TdApi.InputStoryAreaTypeUpgradedGift {
        return TdApi.InputStoryAreaTypeUpgradedGift(
            giftName = dto.giftName,
        )
    }

    fun map(dto: TdApi.InputStoryAreas): InputStoryAreas {
        return InputStoryAreas(
            areas = dto.areas.mapArray { map(it) },
        )
    }

    fun map(dto: InputStoryAreas): TdApi.InputStoryAreas {
        return TdApi.InputStoryAreas(
            areas = dto.areas.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.InputStoryContent): InputStoryContent {
        when (dto) {
            is TdApi.InputStoryContentPhoto -> return map(dto)
            is TdApi.InputStoryContentVideo -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InputStoryContentPhoto): InputStoryContentPhoto {
        return InputStoryContentPhoto(
            photo = map(dto.photo),
            addedStickerFileIds = dto.addedStickerFileIds,
        )
    }

    fun map(dto: TdApi.InputStoryContentVideo): InputStoryContentVideo {
        return InputStoryContentVideo(
            video = map(dto.video),
            addedStickerFileIds = dto.addedStickerFileIds,
            duration = dto.duration,
            coverFrameTimestamp = dto.coverFrameTimestamp,
            isAnimation = dto.isAnimation,
        )
    }

    fun map(dto: InputStoryContent): TdApi.InputStoryContent {
        when (dto) {
            is InputStoryContentPhoto -> return map(dto)
            is InputStoryContentVideo -> return map(dto)
        }
    }

    fun map(dto: InputStoryContentPhoto): TdApi.InputStoryContentPhoto {
        return TdApi.InputStoryContentPhoto(
            photo = map(dto.photo),
            addedStickerFileIds = dto.addedStickerFileIds,
        )
    }

    fun map(dto: InputStoryContentVideo): TdApi.InputStoryContentVideo {
        return TdApi.InputStoryContentVideo(
            video = map(dto.video),
            addedStickerFileIds = dto.addedStickerFileIds,
            duration = dto.duration,
            coverFrameTimestamp = dto.coverFrameTimestamp,
            isAnimation = dto.isAnimation,
        )
    }

    fun map(dto: TdApi.InputTextQuote): InputTextQuote {
        return InputTextQuote(
            text = map(dto.text),
            position = dto.position,
        )
    }

    fun map(dto: InputTextQuote): TdApi.InputTextQuote {
        return TdApi.InputTextQuote(
            text = map(dto.text),
            position = dto.position,
        )
    }

    fun map(dto: TdApi.InputThumbnail): InputThumbnail {
        return InputThumbnail(
            thumbnail = map(dto.thumbnail),
            width = dto.width,
            height = dto.height,
        )
    }

    fun map(dto: InputThumbnail): TdApi.InputThumbnail {
        return TdApi.InputThumbnail(
            thumbnail = map(dto.thumbnail),
            width = dto.width,
            height = dto.height,
        )
    }

    fun map(dto: TdApi.InternalLinkType): InternalLinkType {
        when (dto) {
            is TdApi.InternalLinkTypeActiveSessions -> return map(dto)
            is TdApi.InternalLinkTypeAttachmentMenuBot -> return map(dto)
            is TdApi.InternalLinkTypeAuthenticationCode -> return map(dto)
            is TdApi.InternalLinkTypeBackground -> return map(dto)
            is TdApi.InternalLinkTypeBotAddToChannel -> return map(dto)
            is TdApi.InternalLinkTypeBotStart -> return map(dto)
            is TdApi.InternalLinkTypeBotStartInGroup -> return map(dto)
            is TdApi.InternalLinkTypeBusinessChat -> return map(dto)
            is TdApi.InternalLinkTypeBuyStars -> return map(dto)
            is TdApi.InternalLinkTypeChangePhoneNumber -> return map(dto)
            is TdApi.InternalLinkTypeChatAffiliateProgram -> return map(dto)
            is TdApi.InternalLinkTypeChatBoost -> return map(dto)
            is TdApi.InternalLinkTypeChatFolderInvite -> return map(dto)
            is TdApi.InternalLinkTypeChatFolderSettings -> return map(dto)
            is TdApi.InternalLinkTypeChatInvite -> return map(dto)
            is TdApi.InternalLinkTypeDefaultMessageAutoDeleteTimerSettings -> return map(dto)
            is TdApi.InternalLinkTypeEditProfileSettings -> return map(dto)
            is TdApi.InternalLinkTypeGame -> return map(dto)
            is TdApi.InternalLinkTypeGroupCall -> return map(dto)
            is TdApi.InternalLinkTypeInstantView -> return map(dto)
            is TdApi.InternalLinkTypeInvoice -> return map(dto)
            is TdApi.InternalLinkTypeLanguagePack -> return map(dto)
            is TdApi.InternalLinkTypeLanguageSettings -> return map(dto)
            is TdApi.InternalLinkTypeMainWebApp -> return map(dto)
            is TdApi.InternalLinkTypeMessage -> return map(dto)
            is TdApi.InternalLinkTypeMessageDraft -> return map(dto)
            is TdApi.InternalLinkTypeMyStars -> return map(dto)
            is TdApi.InternalLinkTypePassportDataRequest -> return map(dto)
            is TdApi.InternalLinkTypePhoneNumberConfirmation -> return map(dto)
            is TdApi.InternalLinkTypePremiumFeatures -> return map(dto)
            is TdApi.InternalLinkTypePremiumGift -> return map(dto)
            is TdApi.InternalLinkTypePremiumGiftCode -> return map(dto)
            is TdApi.InternalLinkTypePrivacyAndSecuritySettings -> return map(dto)
            is TdApi.InternalLinkTypeProxy -> return map(dto)
            is TdApi.InternalLinkTypePublicChat -> return map(dto)
            is TdApi.InternalLinkTypeQrCodeAuthentication -> return map(dto)
            is TdApi.InternalLinkTypeRestorePurchases -> return map(dto)
            is TdApi.InternalLinkTypeSettings -> return map(dto)
            is TdApi.InternalLinkTypeStickerSet -> return map(dto)
            is TdApi.InternalLinkTypeStory -> return map(dto)
            is TdApi.InternalLinkTypeTheme -> return map(dto)
            is TdApi.InternalLinkTypeThemeSettings -> return map(dto)
            is TdApi.InternalLinkTypeUnknownDeepLink -> return map(dto)
            is TdApi.InternalLinkTypeUnsupportedProxy -> return map(dto)
            is TdApi.InternalLinkTypeUpgradedGift -> return map(dto)
            is TdApi.InternalLinkTypeUserPhoneNumber -> return map(dto)
            is TdApi.InternalLinkTypeUserToken -> return map(dto)
            is TdApi.InternalLinkTypeVideoChat -> return map(dto)
            is TdApi.InternalLinkTypeWebApp -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InternalLinkTypeActiveSessions): InternalLinkTypeActiveSessions {
        return InternalLinkTypeActiveSessions()
    }

    fun map(dto: TdApi.InternalLinkTypeAttachmentMenuBot): InternalLinkTypeAttachmentMenuBot {
        return InternalLinkTypeAttachmentMenuBot(
            targetChat = map(dto.targetChat),
            botUsername = dto.botUsername,
            url = dto.url,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeAuthenticationCode): InternalLinkTypeAuthenticationCode {
        return InternalLinkTypeAuthenticationCode(
            code = dto.code,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeBackground): InternalLinkTypeBackground {
        return InternalLinkTypeBackground(
            backgroundName = dto.backgroundName,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeBotAddToChannel): InternalLinkTypeBotAddToChannel {
        return InternalLinkTypeBotAddToChannel(
            botUsername = dto.botUsername,
            administratorRights = map(dto.administratorRights),
        )
    }

    fun map(dto: TdApi.InternalLinkTypeBotStart): InternalLinkTypeBotStart {
        return InternalLinkTypeBotStart(
            botUsername = dto.botUsername,
            startParameter = dto.startParameter,
            autostart = dto.autostart,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeBotStartInGroup): InternalLinkTypeBotStartInGroup {
        return InternalLinkTypeBotStartInGroup(
            botUsername = dto.botUsername,
            startParameter = dto.startParameter,
            administratorRights = dto.administratorRights?.let { map(it) },
        )
    }

    fun map(dto: TdApi.InternalLinkTypeBusinessChat): InternalLinkTypeBusinessChat {
        return InternalLinkTypeBusinessChat(
            linkName = dto.linkName,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeBuyStars): InternalLinkTypeBuyStars {
        return InternalLinkTypeBuyStars(
            starCount = dto.starCount,
            purpose = dto.purpose,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeChangePhoneNumber): InternalLinkTypeChangePhoneNumber {
        return InternalLinkTypeChangePhoneNumber()
    }

    fun map(dto: TdApi.InternalLinkTypeChatAffiliateProgram): InternalLinkTypeChatAffiliateProgram {
        return InternalLinkTypeChatAffiliateProgram(
            username = dto.username,
            referrer = dto.referrer,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeChatBoost): InternalLinkTypeChatBoost {
        return InternalLinkTypeChatBoost(
            url = dto.url,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeChatFolderInvite): InternalLinkTypeChatFolderInvite {
        return InternalLinkTypeChatFolderInvite(
            inviteLink = dto.inviteLink,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeChatFolderSettings): InternalLinkTypeChatFolderSettings {
        return InternalLinkTypeChatFolderSettings()
    }

    fun map(dto: TdApi.InternalLinkTypeChatInvite): InternalLinkTypeChatInvite {
        return InternalLinkTypeChatInvite(
            inviteLink = dto.inviteLink,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeDefaultMessageAutoDeleteTimerSettings): InternalLinkTypeDefaultMessageAutoDeleteTimerSettings {
        return InternalLinkTypeDefaultMessageAutoDeleteTimerSettings()
    }

    fun map(dto: TdApi.InternalLinkTypeEditProfileSettings): InternalLinkTypeEditProfileSettings {
        return InternalLinkTypeEditProfileSettings()
    }

    fun map(dto: TdApi.InternalLinkTypeGame): InternalLinkTypeGame {
        return InternalLinkTypeGame(
            botUsername = dto.botUsername,
            gameShortName = dto.gameShortName,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeGroupCall): InternalLinkTypeGroupCall {
        return InternalLinkTypeGroupCall(
            inviteLink = dto.inviteLink,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeInstantView): InternalLinkTypeInstantView {
        return InternalLinkTypeInstantView(
            url = dto.url,
            fallbackUrl = dto.fallbackUrl,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeInvoice): InternalLinkTypeInvoice {
        return InternalLinkTypeInvoice(
            invoiceName = dto.invoiceName,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeLanguagePack): InternalLinkTypeLanguagePack {
        return InternalLinkTypeLanguagePack(
            languagePackId = dto.languagePackId,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeLanguageSettings): InternalLinkTypeLanguageSettings {
        return InternalLinkTypeLanguageSettings()
    }

    fun map(dto: TdApi.InternalLinkTypeMainWebApp): InternalLinkTypeMainWebApp {
        return InternalLinkTypeMainWebApp(
            botUsername = dto.botUsername,
            startParameter = dto.startParameter,
            mode = map(dto.mode),
        )
    }

    fun map(dto: TdApi.InternalLinkTypeMessage): InternalLinkTypeMessage {
        return InternalLinkTypeMessage(
            url = dto.url,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeMessageDraft): InternalLinkTypeMessageDraft {
        return InternalLinkTypeMessageDraft(
            text = map(dto.text),
            containsLink = dto.containsLink,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeMyStars): InternalLinkTypeMyStars {
        return InternalLinkTypeMyStars()
    }

    fun map(dto: TdApi.InternalLinkTypePassportDataRequest): InternalLinkTypePassportDataRequest {
        return InternalLinkTypePassportDataRequest(
            botUserId = dto.botUserId,
            scope = dto.scope,
            publicKey = dto.publicKey,
            nonce = dto.nonce,
            callbackUrl = dto.callbackUrl,
        )
    }

    fun map(dto: TdApi.InternalLinkTypePhoneNumberConfirmation): InternalLinkTypePhoneNumberConfirmation {
        return InternalLinkTypePhoneNumberConfirmation(
            hash = dto.hash,
            phoneNumber = dto.phoneNumber,
        )
    }

    fun map(dto: TdApi.InternalLinkTypePremiumFeatures): InternalLinkTypePremiumFeatures {
        return InternalLinkTypePremiumFeatures(
            referrer = dto.referrer,
        )
    }

    fun map(dto: TdApi.InternalLinkTypePremiumGift): InternalLinkTypePremiumGift {
        return InternalLinkTypePremiumGift(
            referrer = dto.referrer,
        )
    }

    fun map(dto: TdApi.InternalLinkTypePremiumGiftCode): InternalLinkTypePremiumGiftCode {
        return InternalLinkTypePremiumGiftCode(
            code = dto.code,
        )
    }

    fun map(dto: TdApi.InternalLinkTypePrivacyAndSecuritySettings): InternalLinkTypePrivacyAndSecuritySettings {
        return InternalLinkTypePrivacyAndSecuritySettings()
    }

    fun map(dto: TdApi.InternalLinkTypeProxy): InternalLinkTypeProxy {
        return InternalLinkTypeProxy(
            server = dto.server,
            port = dto.port,
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.InternalLinkTypePublicChat): InternalLinkTypePublicChat {
        return InternalLinkTypePublicChat(
            chatUsername = dto.chatUsername,
            draftText = dto.draftText,
            openProfile = dto.openProfile,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeQrCodeAuthentication): InternalLinkTypeQrCodeAuthentication {
        return InternalLinkTypeQrCodeAuthentication()
    }

    fun map(dto: TdApi.InternalLinkTypeRestorePurchases): InternalLinkTypeRestorePurchases {
        return InternalLinkTypeRestorePurchases()
    }

    fun map(dto: TdApi.InternalLinkTypeSettings): InternalLinkTypeSettings {
        return InternalLinkTypeSettings()
    }

    fun map(dto: TdApi.InternalLinkTypeStickerSet): InternalLinkTypeStickerSet {
        return InternalLinkTypeStickerSet(
            stickerSetName = dto.stickerSetName,
            expectCustomEmoji = dto.expectCustomEmoji,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeStory): InternalLinkTypeStory {
        return InternalLinkTypeStory(
            storyPosterUsername = dto.storyPosterUsername,
            storyId = dto.storyId,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeTheme): InternalLinkTypeTheme {
        return InternalLinkTypeTheme(
            themeName = dto.themeName,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeThemeSettings): InternalLinkTypeThemeSettings {
        return InternalLinkTypeThemeSettings()
    }

    fun map(dto: TdApi.InternalLinkTypeUnknownDeepLink): InternalLinkTypeUnknownDeepLink {
        return InternalLinkTypeUnknownDeepLink(
            link = dto.link,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeUnsupportedProxy): InternalLinkTypeUnsupportedProxy {
        return InternalLinkTypeUnsupportedProxy()
    }

    fun map(dto: TdApi.InternalLinkTypeUpgradedGift): InternalLinkTypeUpgradedGift {
        return InternalLinkTypeUpgradedGift(
            name = dto.name,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeUserPhoneNumber): InternalLinkTypeUserPhoneNumber {
        return InternalLinkTypeUserPhoneNumber(
            phoneNumber = dto.phoneNumber,
            draftText = dto.draftText,
            openProfile = dto.openProfile,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeUserToken): InternalLinkTypeUserToken {
        return InternalLinkTypeUserToken(
            token = dto.token,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeVideoChat): InternalLinkTypeVideoChat {
        return InternalLinkTypeVideoChat(
            chatUsername = dto.chatUsername,
            inviteHash = dto.inviteHash,
            isLiveStream = dto.isLiveStream,
        )
    }

    fun map(dto: TdApi.InternalLinkTypeWebApp): InternalLinkTypeWebApp {
        return InternalLinkTypeWebApp(
            botUsername = dto.botUsername,
            webAppShortName = dto.webAppShortName,
            startParameter = dto.startParameter,
            mode = map(dto.mode),
        )
    }

    fun map(dto: InternalLinkType): TdApi.InternalLinkType {
        when (dto) {
            is InternalLinkTypeActiveSessions -> return map(dto)
            is InternalLinkTypeAttachmentMenuBot -> return map(dto)
            is InternalLinkTypeAuthenticationCode -> return map(dto)
            is InternalLinkTypeBackground -> return map(dto)
            is InternalLinkTypeBotAddToChannel -> return map(dto)
            is InternalLinkTypeBotStart -> return map(dto)
            is InternalLinkTypeBotStartInGroup -> return map(dto)
            is InternalLinkTypeBusinessChat -> return map(dto)
            is InternalLinkTypeBuyStars -> return map(dto)
            is InternalLinkTypeChangePhoneNumber -> return map(dto)
            is InternalLinkTypeChatAffiliateProgram -> return map(dto)
            is InternalLinkTypeChatBoost -> return map(dto)
            is InternalLinkTypeChatFolderInvite -> return map(dto)
            is InternalLinkTypeChatFolderSettings -> return map(dto)
            is InternalLinkTypeChatInvite -> return map(dto)
            is InternalLinkTypeDefaultMessageAutoDeleteTimerSettings -> return map(dto)
            is InternalLinkTypeEditProfileSettings -> return map(dto)
            is InternalLinkTypeGame -> return map(dto)
            is InternalLinkTypeGroupCall -> return map(dto)
            is InternalLinkTypeInstantView -> return map(dto)
            is InternalLinkTypeInvoice -> return map(dto)
            is InternalLinkTypeLanguagePack -> return map(dto)
            is InternalLinkTypeLanguageSettings -> return map(dto)
            is InternalLinkTypeMainWebApp -> return map(dto)
            is InternalLinkTypeMessage -> return map(dto)
            is InternalLinkTypeMessageDraft -> return map(dto)
            is InternalLinkTypeMyStars -> return map(dto)
            is InternalLinkTypePassportDataRequest -> return map(dto)
            is InternalLinkTypePhoneNumberConfirmation -> return map(dto)
            is InternalLinkTypePremiumFeatures -> return map(dto)
            is InternalLinkTypePremiumGift -> return map(dto)
            is InternalLinkTypePremiumGiftCode -> return map(dto)
            is InternalLinkTypePrivacyAndSecuritySettings -> return map(dto)
            is InternalLinkTypeProxy -> return map(dto)
            is InternalLinkTypePublicChat -> return map(dto)
            is InternalLinkTypeQrCodeAuthentication -> return map(dto)
            is InternalLinkTypeRestorePurchases -> return map(dto)
            is InternalLinkTypeSettings -> return map(dto)
            is InternalLinkTypeStickerSet -> return map(dto)
            is InternalLinkTypeStory -> return map(dto)
            is InternalLinkTypeTheme -> return map(dto)
            is InternalLinkTypeThemeSettings -> return map(dto)
            is InternalLinkTypeUnknownDeepLink -> return map(dto)
            is InternalLinkTypeUnsupportedProxy -> return map(dto)
            is InternalLinkTypeUpgradedGift -> return map(dto)
            is InternalLinkTypeUserPhoneNumber -> return map(dto)
            is InternalLinkTypeUserToken -> return map(dto)
            is InternalLinkTypeVideoChat -> return map(dto)
            is InternalLinkTypeWebApp -> return map(dto)
        }
    }

    fun map(dto: InternalLinkTypeActiveSessions): TdApi.InternalLinkTypeActiveSessions {
        return TdApi.InternalLinkTypeActiveSessions()
    }

    fun map(dto: InternalLinkTypeAttachmentMenuBot): TdApi.InternalLinkTypeAttachmentMenuBot {
        return TdApi.InternalLinkTypeAttachmentMenuBot(
            targetChat = map(dto.targetChat),
            botUsername = dto.botUsername,
            url = dto.url,
        )
    }

    fun map(dto: InternalLinkTypeAuthenticationCode): TdApi.InternalLinkTypeAuthenticationCode {
        return TdApi.InternalLinkTypeAuthenticationCode(
            code = dto.code,
        )
    }

    fun map(dto: InternalLinkTypeBackground): TdApi.InternalLinkTypeBackground {
        return TdApi.InternalLinkTypeBackground(
            backgroundName = dto.backgroundName,
        )
    }

    fun map(dto: InternalLinkTypeBotAddToChannel): TdApi.InternalLinkTypeBotAddToChannel {
        return TdApi.InternalLinkTypeBotAddToChannel(
            botUsername = dto.botUsername,
            administratorRights = map(dto.administratorRights),
        )
    }

    fun map(dto: InternalLinkTypeBotStart): TdApi.InternalLinkTypeBotStart {
        return TdApi.InternalLinkTypeBotStart(
            botUsername = dto.botUsername,
            startParameter = dto.startParameter,
            autostart = dto.autostart,
        )
    }

    fun map(dto: InternalLinkTypeBotStartInGroup): TdApi.InternalLinkTypeBotStartInGroup {
        return TdApi.InternalLinkTypeBotStartInGroup(
            botUsername = dto.botUsername,
            startParameter = dto.startParameter,
            administratorRights = dto.administratorRights?.let { map(it) },
        )
    }

    fun map(dto: InternalLinkTypeBusinessChat): TdApi.InternalLinkTypeBusinessChat {
        return TdApi.InternalLinkTypeBusinessChat(
            linkName = dto.linkName,
        )
    }

    fun map(dto: InternalLinkTypeBuyStars): TdApi.InternalLinkTypeBuyStars {
        return TdApi.InternalLinkTypeBuyStars(
            starCount = dto.starCount,
            purpose = dto.purpose,
        )
    }

    fun map(dto: InternalLinkTypeChangePhoneNumber): TdApi.InternalLinkTypeChangePhoneNumber {
        return TdApi.InternalLinkTypeChangePhoneNumber()
    }

    fun map(dto: InternalLinkTypeChatAffiliateProgram): TdApi.InternalLinkTypeChatAffiliateProgram {
        return TdApi.InternalLinkTypeChatAffiliateProgram(
            username = dto.username,
            referrer = dto.referrer,
        )
    }

    fun map(dto: InternalLinkTypeChatBoost): TdApi.InternalLinkTypeChatBoost {
        return TdApi.InternalLinkTypeChatBoost(
            url = dto.url,
        )
    }

    fun map(dto: InternalLinkTypeChatFolderInvite): TdApi.InternalLinkTypeChatFolderInvite {
        return TdApi.InternalLinkTypeChatFolderInvite(
            inviteLink = dto.inviteLink,
        )
    }

    fun map(dto: InternalLinkTypeChatFolderSettings): TdApi.InternalLinkTypeChatFolderSettings {
        return TdApi.InternalLinkTypeChatFolderSettings()
    }

    fun map(dto: InternalLinkTypeChatInvite): TdApi.InternalLinkTypeChatInvite {
        return TdApi.InternalLinkTypeChatInvite(
            inviteLink = dto.inviteLink,
        )
    }

    fun map(dto: InternalLinkTypeDefaultMessageAutoDeleteTimerSettings): TdApi.InternalLinkTypeDefaultMessageAutoDeleteTimerSettings {
        return TdApi.InternalLinkTypeDefaultMessageAutoDeleteTimerSettings()
    }

    fun map(dto: InternalLinkTypeEditProfileSettings): TdApi.InternalLinkTypeEditProfileSettings {
        return TdApi.InternalLinkTypeEditProfileSettings()
    }

    fun map(dto: InternalLinkTypeGame): TdApi.InternalLinkTypeGame {
        return TdApi.InternalLinkTypeGame(
            botUsername = dto.botUsername,
            gameShortName = dto.gameShortName,
        )
    }

    fun map(dto: InternalLinkTypeGroupCall): TdApi.InternalLinkTypeGroupCall {
        return TdApi.InternalLinkTypeGroupCall(
            inviteLink = dto.inviteLink,
        )
    }

    fun map(dto: InternalLinkTypeInstantView): TdApi.InternalLinkTypeInstantView {
        return TdApi.InternalLinkTypeInstantView(
            url = dto.url,
            fallbackUrl = dto.fallbackUrl,
        )
    }

    fun map(dto: InternalLinkTypeInvoice): TdApi.InternalLinkTypeInvoice {
        return TdApi.InternalLinkTypeInvoice(
            invoiceName = dto.invoiceName,
        )
    }

    fun map(dto: InternalLinkTypeLanguagePack): TdApi.InternalLinkTypeLanguagePack {
        return TdApi.InternalLinkTypeLanguagePack(
            languagePackId = dto.languagePackId,
        )
    }

    fun map(dto: InternalLinkTypeLanguageSettings): TdApi.InternalLinkTypeLanguageSettings {
        return TdApi.InternalLinkTypeLanguageSettings()
    }

    fun map(dto: InternalLinkTypeMainWebApp): TdApi.InternalLinkTypeMainWebApp {
        return TdApi.InternalLinkTypeMainWebApp(
            botUsername = dto.botUsername,
            startParameter = dto.startParameter,
            mode = map(dto.mode),
        )
    }

    fun map(dto: InternalLinkTypeMessage): TdApi.InternalLinkTypeMessage {
        return TdApi.InternalLinkTypeMessage(
            url = dto.url,
        )
    }

    fun map(dto: InternalLinkTypeMessageDraft): TdApi.InternalLinkTypeMessageDraft {
        return TdApi.InternalLinkTypeMessageDraft(
            text = map(dto.text),
            containsLink = dto.containsLink,
        )
    }

    fun map(dto: InternalLinkTypeMyStars): TdApi.InternalLinkTypeMyStars {
        return TdApi.InternalLinkTypeMyStars()
    }

    fun map(dto: InternalLinkTypePassportDataRequest): TdApi.InternalLinkTypePassportDataRequest {
        return TdApi.InternalLinkTypePassportDataRequest(
            botUserId = dto.botUserId,
            scope = dto.scope,
            publicKey = dto.publicKey,
            nonce = dto.nonce,
            callbackUrl = dto.callbackUrl,
        )
    }

    fun map(dto: InternalLinkTypePhoneNumberConfirmation): TdApi.InternalLinkTypePhoneNumberConfirmation {
        return TdApi.InternalLinkTypePhoneNumberConfirmation(
            hash = dto.hash,
            phoneNumber = dto.phoneNumber,
        )
    }

    fun map(dto: InternalLinkTypePremiumFeatures): TdApi.InternalLinkTypePremiumFeatures {
        return TdApi.InternalLinkTypePremiumFeatures(
            referrer = dto.referrer,
        )
    }

    fun map(dto: InternalLinkTypePremiumGift): TdApi.InternalLinkTypePremiumGift {
        return TdApi.InternalLinkTypePremiumGift(
            referrer = dto.referrer,
        )
    }

    fun map(dto: InternalLinkTypePremiumGiftCode): TdApi.InternalLinkTypePremiumGiftCode {
        return TdApi.InternalLinkTypePremiumGiftCode(
            code = dto.code,
        )
    }

    fun map(dto: InternalLinkTypePrivacyAndSecuritySettings): TdApi.InternalLinkTypePrivacyAndSecuritySettings {
        return TdApi.InternalLinkTypePrivacyAndSecuritySettings()
    }

    fun map(dto: InternalLinkTypeProxy): TdApi.InternalLinkTypeProxy {
        return TdApi.InternalLinkTypeProxy(
            server = dto.server,
            port = dto.port,
            type = map(dto.type),
        )
    }

    fun map(dto: InternalLinkTypePublicChat): TdApi.InternalLinkTypePublicChat {
        return TdApi.InternalLinkTypePublicChat(
            chatUsername = dto.chatUsername,
            draftText = dto.draftText,
            openProfile = dto.openProfile,
        )
    }

    fun map(dto: InternalLinkTypeQrCodeAuthentication): TdApi.InternalLinkTypeQrCodeAuthentication {
        return TdApi.InternalLinkTypeQrCodeAuthentication()
    }

    fun map(dto: InternalLinkTypeRestorePurchases): TdApi.InternalLinkTypeRestorePurchases {
        return TdApi.InternalLinkTypeRestorePurchases()
    }

    fun map(dto: InternalLinkTypeSettings): TdApi.InternalLinkTypeSettings {
        return TdApi.InternalLinkTypeSettings()
    }

    fun map(dto: InternalLinkTypeStickerSet): TdApi.InternalLinkTypeStickerSet {
        return TdApi.InternalLinkTypeStickerSet(
            stickerSetName = dto.stickerSetName,
            expectCustomEmoji = dto.expectCustomEmoji,
        )
    }

    fun map(dto: InternalLinkTypeStory): TdApi.InternalLinkTypeStory {
        return TdApi.InternalLinkTypeStory(
            storyPosterUsername = dto.storyPosterUsername,
            storyId = dto.storyId,
        )
    }

    fun map(dto: InternalLinkTypeTheme): TdApi.InternalLinkTypeTheme {
        return TdApi.InternalLinkTypeTheme(
            themeName = dto.themeName,
        )
    }

    fun map(dto: InternalLinkTypeThemeSettings): TdApi.InternalLinkTypeThemeSettings {
        return TdApi.InternalLinkTypeThemeSettings()
    }

    fun map(dto: InternalLinkTypeUnknownDeepLink): TdApi.InternalLinkTypeUnknownDeepLink {
        return TdApi.InternalLinkTypeUnknownDeepLink(
            link = dto.link,
        )
    }

    fun map(dto: InternalLinkTypeUnsupportedProxy): TdApi.InternalLinkTypeUnsupportedProxy {
        return TdApi.InternalLinkTypeUnsupportedProxy()
    }

    fun map(dto: InternalLinkTypeUpgradedGift): TdApi.InternalLinkTypeUpgradedGift {
        return TdApi.InternalLinkTypeUpgradedGift(
            name = dto.name,
        )
    }

    fun map(dto: InternalLinkTypeUserPhoneNumber): TdApi.InternalLinkTypeUserPhoneNumber {
        return TdApi.InternalLinkTypeUserPhoneNumber(
            phoneNumber = dto.phoneNumber,
            draftText = dto.draftText,
            openProfile = dto.openProfile,
        )
    }

    fun map(dto: InternalLinkTypeUserToken): TdApi.InternalLinkTypeUserToken {
        return TdApi.InternalLinkTypeUserToken(
            token = dto.token,
        )
    }

    fun map(dto: InternalLinkTypeVideoChat): TdApi.InternalLinkTypeVideoChat {
        return TdApi.InternalLinkTypeVideoChat(
            chatUsername = dto.chatUsername,
            inviteHash = dto.inviteHash,
            isLiveStream = dto.isLiveStream,
        )
    }

    fun map(dto: InternalLinkTypeWebApp): TdApi.InternalLinkTypeWebApp {
        return TdApi.InternalLinkTypeWebApp(
            botUsername = dto.botUsername,
            webAppShortName = dto.webAppShortName,
            startParameter = dto.startParameter,
            mode = map(dto.mode),
        )
    }

    fun map(dto: TdApi.InviteGroupCallParticipantResult): InviteGroupCallParticipantResult {
        when (dto) {
            is TdApi.InviteGroupCallParticipantResultUserPrivacyRestricted -> return map(dto)
            is TdApi.InviteGroupCallParticipantResultUserAlreadyParticipant -> return map(dto)
            is TdApi.InviteGroupCallParticipantResultUserWasBanned -> return map(dto)
            is TdApi.InviteGroupCallParticipantResultSuccess -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InviteGroupCallParticipantResultUserPrivacyRestricted): InviteGroupCallParticipantResultUserPrivacyRestricted {
        return InviteGroupCallParticipantResultUserPrivacyRestricted()
    }

    fun map(dto: TdApi.InviteGroupCallParticipantResultUserAlreadyParticipant): InviteGroupCallParticipantResultUserAlreadyParticipant {
        return InviteGroupCallParticipantResultUserAlreadyParticipant()
    }

    fun map(dto: TdApi.InviteGroupCallParticipantResultUserWasBanned): InviteGroupCallParticipantResultUserWasBanned {
        return InviteGroupCallParticipantResultUserWasBanned()
    }

    fun map(dto: TdApi.InviteGroupCallParticipantResultSuccess): InviteGroupCallParticipantResultSuccess {
        return InviteGroupCallParticipantResultSuccess(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: InviteGroupCallParticipantResult): TdApi.InviteGroupCallParticipantResult {
        when (dto) {
            is InviteGroupCallParticipantResultUserPrivacyRestricted -> return map(dto)
            is InviteGroupCallParticipantResultUserAlreadyParticipant -> return map(dto)
            is InviteGroupCallParticipantResultUserWasBanned -> return map(dto)
            is InviteGroupCallParticipantResultSuccess -> return map(dto)
        }
    }

    fun map(dto: InviteGroupCallParticipantResultUserPrivacyRestricted): TdApi.InviteGroupCallParticipantResultUserPrivacyRestricted {
        return TdApi.InviteGroupCallParticipantResultUserPrivacyRestricted()
    }

    fun map(dto: InviteGroupCallParticipantResultUserAlreadyParticipant): TdApi.InviteGroupCallParticipantResultUserAlreadyParticipant {
        return TdApi.InviteGroupCallParticipantResultUserAlreadyParticipant()
    }

    fun map(dto: InviteGroupCallParticipantResultUserWasBanned): TdApi.InviteGroupCallParticipantResultUserWasBanned {
        return TdApi.InviteGroupCallParticipantResultUserWasBanned()
    }

    fun map(dto: InviteGroupCallParticipantResultSuccess): TdApi.InviteGroupCallParticipantResultSuccess {
        return TdApi.InviteGroupCallParticipantResultSuccess(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: TdApi.InviteLinkChatType): InviteLinkChatType {
        when (dto) {
            is TdApi.InviteLinkChatTypeBasicGroup -> return map(dto)
            is TdApi.InviteLinkChatTypeSupergroup -> return map(dto)
            is TdApi.InviteLinkChatTypeChannel -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.InviteLinkChatTypeBasicGroup): InviteLinkChatTypeBasicGroup {
        return InviteLinkChatTypeBasicGroup()
    }

    fun map(dto: TdApi.InviteLinkChatTypeSupergroup): InviteLinkChatTypeSupergroup {
        return InviteLinkChatTypeSupergroup()
    }

    fun map(dto: TdApi.InviteLinkChatTypeChannel): InviteLinkChatTypeChannel {
        return InviteLinkChatTypeChannel()
    }

    fun map(dto: InviteLinkChatType): TdApi.InviteLinkChatType {
        when (dto) {
            is InviteLinkChatTypeBasicGroup -> return map(dto)
            is InviteLinkChatTypeSupergroup -> return map(dto)
            is InviteLinkChatTypeChannel -> return map(dto)
        }
    }

    fun map(dto: InviteLinkChatTypeBasicGroup): TdApi.InviteLinkChatTypeBasicGroup {
        return TdApi.InviteLinkChatTypeBasicGroup()
    }

    fun map(dto: InviteLinkChatTypeSupergroup): TdApi.InviteLinkChatTypeSupergroup {
        return TdApi.InviteLinkChatTypeSupergroup()
    }

    fun map(dto: InviteLinkChatTypeChannel): TdApi.InviteLinkChatTypeChannel {
        return TdApi.InviteLinkChatTypeChannel()
    }

    fun map(dto: TdApi.Invoice): Invoice {
        return Invoice(
            currency = dto.currency,
            priceParts = dto.priceParts.mapArray { map(it) },
            subscriptionPeriod = dto.subscriptionPeriod,
            maxTipAmount = dto.maxTipAmount,
            suggestedTipAmounts = dto.suggestedTipAmounts,
            recurringPaymentTermsOfServiceUrl = dto.recurringPaymentTermsOfServiceUrl,
            termsOfServiceUrl = dto.termsOfServiceUrl,
            isTest = dto.isTest,
            needName = dto.needName,
            needPhoneNumber = dto.needPhoneNumber,
            needEmailAddress = dto.needEmailAddress,
            needShippingAddress = dto.needShippingAddress,
            sendPhoneNumberToProvider = dto.sendPhoneNumberToProvider,
            sendEmailAddressToProvider = dto.sendEmailAddressToProvider,
            isFlexible = dto.isFlexible,
        )
    }

    fun map(dto: Invoice): TdApi.Invoice {
        return TdApi.Invoice(
            currency = dto.currency,
            priceParts = dto.priceParts.mapArray { map(it) },
            subscriptionPeriod = dto.subscriptionPeriod,
            maxTipAmount = dto.maxTipAmount,
            suggestedTipAmounts = dto.suggestedTipAmounts,
            recurringPaymentTermsOfServiceUrl = dto.recurringPaymentTermsOfServiceUrl,
            termsOfServiceUrl = dto.termsOfServiceUrl,
            isTest = dto.isTest,
            needName = dto.needName,
            needPhoneNumber = dto.needPhoneNumber,
            needEmailAddress = dto.needEmailAddress,
            needShippingAddress = dto.needShippingAddress,
            sendPhoneNumberToProvider = dto.sendPhoneNumberToProvider,
            sendEmailAddressToProvider = dto.sendEmailAddressToProvider,
            isFlexible = dto.isFlexible,
        )
    }

    fun map(dto: TdApi.JsonObjectMember): JsonObjectMember {
        return JsonObjectMember(
            key = dto.key,
            value = map(dto.value),
        )
    }

    fun map(dto: JsonObjectMember): TdApi.JsonObjectMember {
        return TdApi.JsonObjectMember(
            key = dto.key,
            value = map(dto.value),
        )
    }

    fun map(dto: TdApi.JsonValue): JsonValue {
        when (dto) {
            is TdApi.JsonValueNull -> return map(dto)
            is TdApi.JsonValueBoolean -> return map(dto)
            is TdApi.JsonValueNumber -> return map(dto)
            is TdApi.JsonValueString -> return map(dto)
            is TdApi.JsonValueArray -> return map(dto)
            is TdApi.JsonValueObject -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.JsonValueNull): JsonValueNull {
        return JsonValueNull()
    }

    fun map(dto: TdApi.JsonValueBoolean): JsonValueBoolean {
        return JsonValueBoolean(
            value = dto.value,
        )
    }

    fun map(dto: TdApi.JsonValueNumber): JsonValueNumber {
        return JsonValueNumber(
            value = dto.value,
        )
    }

    fun map(dto: TdApi.JsonValueString): JsonValueString {
        return JsonValueString(
            value = dto.value,
        )
    }

    fun map(dto: TdApi.JsonValueArray): JsonValueArray {
        return JsonValueArray(
            values = dto.values.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.JsonValueObject): JsonValueObject {
        return JsonValueObject(
            members = dto.members.mapArray { map(it) },
        )
    }

    fun map(dto: JsonValue): TdApi.JsonValue {
        when (dto) {
            is JsonValueNull -> return map(dto)
            is JsonValueBoolean -> return map(dto)
            is JsonValueNumber -> return map(dto)
            is JsonValueString -> return map(dto)
            is JsonValueArray -> return map(dto)
            is JsonValueObject -> return map(dto)
        }
    }

    fun map(dto: JsonValueNull): TdApi.JsonValueNull {
        return TdApi.JsonValueNull()
    }

    fun map(dto: JsonValueBoolean): TdApi.JsonValueBoolean {
        return TdApi.JsonValueBoolean(
            value = dto.value,
        )
    }

    fun map(dto: JsonValueNumber): TdApi.JsonValueNumber {
        return TdApi.JsonValueNumber(
            value = dto.value,
        )
    }

    fun map(dto: JsonValueString): TdApi.JsonValueString {
        return TdApi.JsonValueString(
            value = dto.value,
        )
    }

    fun map(dto: JsonValueArray): TdApi.JsonValueArray {
        return TdApi.JsonValueArray(
            values = dto.values.mapArray { map(it) },
        )
    }

    fun map(dto: JsonValueObject): TdApi.JsonValueObject {
        return TdApi.JsonValueObject(
            members = dto.members.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.KeyboardButton): KeyboardButton {
        return KeyboardButton(
            text = dto.text,
            type = map(dto.type),
        )
    }

    fun map(dto: KeyboardButton): TdApi.KeyboardButton {
        return TdApi.KeyboardButton(
            text = dto.text,
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.KeyboardButtonType): KeyboardButtonType {
        when (dto) {
            is TdApi.KeyboardButtonTypeText -> return map(dto)
            is TdApi.KeyboardButtonTypeRequestPhoneNumber -> return map(dto)
            is TdApi.KeyboardButtonTypeRequestLocation -> return map(dto)
            is TdApi.KeyboardButtonTypeRequestPoll -> return map(dto)
            is TdApi.KeyboardButtonTypeRequestUsers -> return map(dto)
            is TdApi.KeyboardButtonTypeRequestChat -> return map(dto)
            is TdApi.KeyboardButtonTypeWebApp -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.KeyboardButtonTypeText): KeyboardButtonTypeText {
        return KeyboardButtonTypeText()
    }

    fun map(dto: TdApi.KeyboardButtonTypeRequestPhoneNumber): KeyboardButtonTypeRequestPhoneNumber {
        return KeyboardButtonTypeRequestPhoneNumber()
    }

    fun map(dto: TdApi.KeyboardButtonTypeRequestLocation): KeyboardButtonTypeRequestLocation {
        return KeyboardButtonTypeRequestLocation()
    }

    fun map(dto: TdApi.KeyboardButtonTypeRequestPoll): KeyboardButtonTypeRequestPoll {
        return KeyboardButtonTypeRequestPoll(
            forceRegular = dto.forceRegular,
            forceQuiz = dto.forceQuiz,
        )
    }

    fun map(dto: TdApi.KeyboardButtonTypeRequestUsers): KeyboardButtonTypeRequestUsers {
        return KeyboardButtonTypeRequestUsers(
            id = dto.id,
            restrictUserIsBot = dto.restrictUserIsBot,
            userIsBot = dto.userIsBot,
            restrictUserIsPremium = dto.restrictUserIsPremium,
            userIsPremium = dto.userIsPremium,
            maxQuantity = dto.maxQuantity,
            requestName = dto.requestName,
            requestUsername = dto.requestUsername,
            requestPhoto = dto.requestPhoto,
        )
    }

    fun map(dto: TdApi.KeyboardButtonTypeRequestChat): KeyboardButtonTypeRequestChat {
        return KeyboardButtonTypeRequestChat(
            id = dto.id,
            chatIsChannel = dto.chatIsChannel,
            restrictChatIsForum = dto.restrictChatIsForum,
            chatIsForum = dto.chatIsForum,
            restrictChatHasUsername = dto.restrictChatHasUsername,
            chatHasUsername = dto.chatHasUsername,
            chatIsCreated = dto.chatIsCreated,
            userAdministratorRights = dto.userAdministratorRights?.let { map(it) },
            botAdministratorRights = dto.botAdministratorRights?.let { map(it) },
            botIsMember = dto.botIsMember,
            requestTitle = dto.requestTitle,
            requestUsername = dto.requestUsername,
            requestPhoto = dto.requestPhoto,
        )
    }

    fun map(dto: TdApi.KeyboardButtonTypeWebApp): KeyboardButtonTypeWebApp {
        return KeyboardButtonTypeWebApp(
            url = dto.url,
        )
    }

    fun map(dto: KeyboardButtonType): TdApi.KeyboardButtonType {
        when (dto) {
            is KeyboardButtonTypeText -> return map(dto)
            is KeyboardButtonTypeRequestPhoneNumber -> return map(dto)
            is KeyboardButtonTypeRequestLocation -> return map(dto)
            is KeyboardButtonTypeRequestPoll -> return map(dto)
            is KeyboardButtonTypeRequestUsers -> return map(dto)
            is KeyboardButtonTypeRequestChat -> return map(dto)
            is KeyboardButtonTypeWebApp -> return map(dto)
        }
    }

    fun map(dto: KeyboardButtonTypeText): TdApi.KeyboardButtonTypeText {
        return TdApi.KeyboardButtonTypeText()
    }

    fun map(dto: KeyboardButtonTypeRequestPhoneNumber): TdApi.KeyboardButtonTypeRequestPhoneNumber {
        return TdApi.KeyboardButtonTypeRequestPhoneNumber()
    }

    fun map(dto: KeyboardButtonTypeRequestLocation): TdApi.KeyboardButtonTypeRequestLocation {
        return TdApi.KeyboardButtonTypeRequestLocation()
    }

    fun map(dto: KeyboardButtonTypeRequestPoll): TdApi.KeyboardButtonTypeRequestPoll {
        return TdApi.KeyboardButtonTypeRequestPoll(
            forceRegular = dto.forceRegular,
            forceQuiz = dto.forceQuiz,
        )
    }

    fun map(dto: KeyboardButtonTypeRequestUsers): TdApi.KeyboardButtonTypeRequestUsers {
        return TdApi.KeyboardButtonTypeRequestUsers(
            id = dto.id,
            restrictUserIsBot = dto.restrictUserIsBot,
            userIsBot = dto.userIsBot,
            restrictUserIsPremium = dto.restrictUserIsPremium,
            userIsPremium = dto.userIsPremium,
            maxQuantity = dto.maxQuantity,
            requestName = dto.requestName,
            requestUsername = dto.requestUsername,
            requestPhoto = dto.requestPhoto,
        )
    }

    fun map(dto: KeyboardButtonTypeRequestChat): TdApi.KeyboardButtonTypeRequestChat {
        return TdApi.KeyboardButtonTypeRequestChat(
            id = dto.id,
            chatIsChannel = dto.chatIsChannel,
            restrictChatIsForum = dto.restrictChatIsForum,
            chatIsForum = dto.chatIsForum,
            restrictChatHasUsername = dto.restrictChatHasUsername,
            chatHasUsername = dto.chatHasUsername,
            chatIsCreated = dto.chatIsCreated,
            userAdministratorRights = dto.userAdministratorRights?.let { map(it) },
            botAdministratorRights = dto.botAdministratorRights?.let { map(it) },
            botIsMember = dto.botIsMember,
            requestTitle = dto.requestTitle,
            requestUsername = dto.requestUsername,
            requestPhoto = dto.requestPhoto,
        )
    }

    fun map(dto: KeyboardButtonTypeWebApp): TdApi.KeyboardButtonTypeWebApp {
        return TdApi.KeyboardButtonTypeWebApp(
            url = dto.url,
        )
    }

    fun map(dto: TdApi.LabeledPricePart): LabeledPricePart {
        return LabeledPricePart(
            label = dto.label,
            amount = dto.amount,
        )
    }

    fun map(dto: LabeledPricePart): TdApi.LabeledPricePart {
        return TdApi.LabeledPricePart(
            label = dto.label,
            amount = dto.amount,
        )
    }

    fun map(dto: TdApi.LanguagePackInfo): LanguagePackInfo {
        return LanguagePackInfo(
            id = dto.id,
            baseLanguagePackId = dto.baseLanguagePackId,
            name = dto.name,
            nativeName = dto.nativeName,
            pluralCode = dto.pluralCode,
            isOfficial = dto.isOfficial,
            isRtl = dto.isRtl,
            isBeta = dto.isBeta,
            isInstalled = dto.isInstalled,
            totalStringCount = dto.totalStringCount,
            translatedStringCount = dto.translatedStringCount,
            localStringCount = dto.localStringCount,
            translationUrl = dto.translationUrl,
        )
    }

    fun map(dto: LanguagePackInfo): TdApi.LanguagePackInfo {
        return TdApi.LanguagePackInfo(
            id = dto.id,
            baseLanguagePackId = dto.baseLanguagePackId,
            name = dto.name,
            nativeName = dto.nativeName,
            pluralCode = dto.pluralCode,
            isOfficial = dto.isOfficial,
            isRtl = dto.isRtl,
            isBeta = dto.isBeta,
            isInstalled = dto.isInstalled,
            totalStringCount = dto.totalStringCount,
            translatedStringCount = dto.translatedStringCount,
            localStringCount = dto.localStringCount,
            translationUrl = dto.translationUrl,
        )
    }

    fun map(dto: TdApi.LanguagePackString): LanguagePackString {
        return LanguagePackString(
            key = dto.key,
            value = dto.value?.let { map(it) },
        )
    }

    fun map(dto: LanguagePackString): TdApi.LanguagePackString {
        return TdApi.LanguagePackString(
            key = dto.key,
            value = dto.value?.let { map(it) },
        )
    }

    fun map(dto: TdApi.LanguagePackStringValue): LanguagePackStringValue {
        when (dto) {
            is TdApi.LanguagePackStringValueOrdinary -> return map(dto)
            is TdApi.LanguagePackStringValuePluralized -> return map(dto)
            is TdApi.LanguagePackStringValueDeleted -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.LanguagePackStringValueOrdinary): LanguagePackStringValueOrdinary {
        return LanguagePackStringValueOrdinary(
            value = dto.value,
        )
    }

    fun map(dto: TdApi.LanguagePackStringValuePluralized): LanguagePackStringValuePluralized {
        return LanguagePackStringValuePluralized(
            zeroValue = dto.zeroValue,
            oneValue = dto.oneValue,
            twoValue = dto.twoValue,
            fewValue = dto.fewValue,
            manyValue = dto.manyValue,
            otherValue = dto.otherValue,
        )
    }

    fun map(dto: TdApi.LanguagePackStringValueDeleted): LanguagePackStringValueDeleted {
        return LanguagePackStringValueDeleted()
    }

    fun map(dto: LanguagePackStringValue): TdApi.LanguagePackStringValue {
        when (dto) {
            is LanguagePackStringValueOrdinary -> return map(dto)
            is LanguagePackStringValuePluralized -> return map(dto)
            is LanguagePackStringValueDeleted -> return map(dto)
        }
    }

    fun map(dto: LanguagePackStringValueOrdinary): TdApi.LanguagePackStringValueOrdinary {
        return TdApi.LanguagePackStringValueOrdinary(
            value = dto.value,
        )
    }

    fun map(dto: LanguagePackStringValuePluralized): TdApi.LanguagePackStringValuePluralized {
        return TdApi.LanguagePackStringValuePluralized(
            zeroValue = dto.zeroValue,
            oneValue = dto.oneValue,
            twoValue = dto.twoValue,
            fewValue = dto.fewValue,
            manyValue = dto.manyValue,
            otherValue = dto.otherValue,
        )
    }

    fun map(dto: LanguagePackStringValueDeleted): TdApi.LanguagePackStringValueDeleted {
        return TdApi.LanguagePackStringValueDeleted()
    }

    fun map(dto: TdApi.LanguagePackStrings): LanguagePackStrings {
        return LanguagePackStrings(
            strings = dto.strings.mapArray { map(it) },
        )
    }

    fun map(dto: LanguagePackStrings): TdApi.LanguagePackStrings {
        return TdApi.LanguagePackStrings(
            strings = dto.strings.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.LinkPreview): LinkPreview {
        return LinkPreview(
            url = dto.url,
            displayUrl = dto.displayUrl,
            siteName = dto.siteName,
            title = dto.title,
            description = map(dto.description),
            author = dto.author,
            type = map(dto.type),
            hasLargeMedia = dto.hasLargeMedia,
            showLargeMedia = dto.showLargeMedia,
            showMediaAboveDescription = dto.showMediaAboveDescription,
            skipConfirmation = dto.skipConfirmation,
            showAboveText = dto.showAboveText,
            instantViewVersion = dto.instantViewVersion,
        )
    }

    fun map(dto: LinkPreview): TdApi.LinkPreview {
        return TdApi.LinkPreview(
            url = dto.url,
            displayUrl = dto.displayUrl,
            siteName = dto.siteName,
            title = dto.title,
            description = map(dto.description),
            author = dto.author,
            type = map(dto.type),
            hasLargeMedia = dto.hasLargeMedia,
            showLargeMedia = dto.showLargeMedia,
            showMediaAboveDescription = dto.showMediaAboveDescription,
            skipConfirmation = dto.skipConfirmation,
            showAboveText = dto.showAboveText,
            instantViewVersion = dto.instantViewVersion,
        )
    }

    fun map(dto: TdApi.LinkPreviewAlbumMedia): LinkPreviewAlbumMedia {
        when (dto) {
            is TdApi.LinkPreviewAlbumMediaPhoto -> return map(dto)
            is TdApi.LinkPreviewAlbumMediaVideo -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.LinkPreviewAlbumMediaPhoto): LinkPreviewAlbumMediaPhoto {
        return LinkPreviewAlbumMediaPhoto(
            photo = map(dto.photo),
        )
    }

    fun map(dto: TdApi.LinkPreviewAlbumMediaVideo): LinkPreviewAlbumMediaVideo {
        return LinkPreviewAlbumMediaVideo(
            video = map(dto.video),
        )
    }

    fun map(dto: LinkPreviewAlbumMedia): TdApi.LinkPreviewAlbumMedia {
        when (dto) {
            is LinkPreviewAlbumMediaPhoto -> return map(dto)
            is LinkPreviewAlbumMediaVideo -> return map(dto)
        }
    }

    fun map(dto: LinkPreviewAlbumMediaPhoto): TdApi.LinkPreviewAlbumMediaPhoto {
        return TdApi.LinkPreviewAlbumMediaPhoto(
            photo = map(dto.photo),
        )
    }

    fun map(dto: LinkPreviewAlbumMediaVideo): TdApi.LinkPreviewAlbumMediaVideo {
        return TdApi.LinkPreviewAlbumMediaVideo(
            video = map(dto.video),
        )
    }

    fun map(dto: TdApi.LinkPreviewOptions): LinkPreviewOptions {
        return LinkPreviewOptions(
            isDisabled = dto.isDisabled,
            url = dto.url,
            forceSmallMedia = dto.forceSmallMedia,
            forceLargeMedia = dto.forceLargeMedia,
            showAboveText = dto.showAboveText,
        )
    }

    fun map(dto: LinkPreviewOptions): TdApi.LinkPreviewOptions {
        return TdApi.LinkPreviewOptions(
            isDisabled = dto.isDisabled,
            url = dto.url,
            forceSmallMedia = dto.forceSmallMedia,
            forceLargeMedia = dto.forceLargeMedia,
            showAboveText = dto.showAboveText,
        )
    }

    fun map(dto: TdApi.LinkPreviewType): LinkPreviewType {
        when (dto) {
            is TdApi.LinkPreviewTypeAlbum -> return map(dto)
            is TdApi.LinkPreviewTypeAnimation -> return map(dto)
            is TdApi.LinkPreviewTypeApp -> return map(dto)
            is TdApi.LinkPreviewTypeArticle -> return map(dto)
            is TdApi.LinkPreviewTypeAudio -> return map(dto)
            is TdApi.LinkPreviewTypeBackground -> return map(dto)
            is TdApi.LinkPreviewTypeChannelBoost -> return map(dto)
            is TdApi.LinkPreviewTypeChat -> return map(dto)
            is TdApi.LinkPreviewTypeDocument -> return map(dto)
            is TdApi.LinkPreviewTypeEmbeddedAnimationPlayer -> return map(dto)
            is TdApi.LinkPreviewTypeEmbeddedAudioPlayer -> return map(dto)
            is TdApi.LinkPreviewTypeEmbeddedVideoPlayer -> return map(dto)
            is TdApi.LinkPreviewTypeExternalAudio -> return map(dto)
            is TdApi.LinkPreviewTypeExternalVideo -> return map(dto)
            is TdApi.LinkPreviewTypeGroupCall -> return map(dto)
            is TdApi.LinkPreviewTypeInvoice -> return map(dto)
            is TdApi.LinkPreviewTypeMessage -> return map(dto)
            is TdApi.LinkPreviewTypePhoto -> return map(dto)
            is TdApi.LinkPreviewTypePremiumGiftCode -> return map(dto)
            is TdApi.LinkPreviewTypeShareableChatFolder -> return map(dto)
            is TdApi.LinkPreviewTypeSticker -> return map(dto)
            is TdApi.LinkPreviewTypeStickerSet -> return map(dto)
            is TdApi.LinkPreviewTypeStory -> return map(dto)
            is TdApi.LinkPreviewTypeSupergroupBoost -> return map(dto)
            is TdApi.LinkPreviewTypeTheme -> return map(dto)
            is TdApi.LinkPreviewTypeUnsupported -> return map(dto)
            is TdApi.LinkPreviewTypeUpgradedGift -> return map(dto)
            is TdApi.LinkPreviewTypeUser -> return map(dto)
            is TdApi.LinkPreviewTypeVideo -> return map(dto)
            is TdApi.LinkPreviewTypeVideoChat -> return map(dto)
            is TdApi.LinkPreviewTypeVideoNote -> return map(dto)
            is TdApi.LinkPreviewTypeVoiceNote -> return map(dto)
            is TdApi.LinkPreviewTypeWebApp -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.LinkPreviewTypeAlbum): LinkPreviewTypeAlbum {
        return LinkPreviewTypeAlbum(
            media = dto.media.mapArray { map(it) },
            caption = dto.caption,
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeAnimation): LinkPreviewTypeAnimation {
        return LinkPreviewTypeAnimation(
            animation = map(dto.animation),
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeApp): LinkPreviewTypeApp {
        return LinkPreviewTypeApp(
            photo = map(dto.photo),
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeArticle): LinkPreviewTypeArticle {
        return LinkPreviewTypeArticle(
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeAudio): LinkPreviewTypeAudio {
        return LinkPreviewTypeAudio(
            audio = map(dto.audio),
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeBackground): LinkPreviewTypeBackground {
        return LinkPreviewTypeBackground(
            document = dto.document?.let { map(it) },
            backgroundType = dto.backgroundType?.let { map(it) },
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeChannelBoost): LinkPreviewTypeChannelBoost {
        return LinkPreviewTypeChannelBoost(
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeChat): LinkPreviewTypeChat {
        return LinkPreviewTypeChat(
            type = map(dto.type),
            photo = dto.photo?.let { map(it) },
            createsJoinRequest = dto.createsJoinRequest,
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeDocument): LinkPreviewTypeDocument {
        return LinkPreviewTypeDocument(
            document = map(dto.document),
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeEmbeddedAnimationPlayer): LinkPreviewTypeEmbeddedAnimationPlayer {
        return LinkPreviewTypeEmbeddedAnimationPlayer(
            url = dto.url,
            thumbnail = dto.thumbnail?.let { map(it) },
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeEmbeddedAudioPlayer): LinkPreviewTypeEmbeddedAudioPlayer {
        return LinkPreviewTypeEmbeddedAudioPlayer(
            url = dto.url,
            thumbnail = dto.thumbnail?.let { map(it) },
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeEmbeddedVideoPlayer): LinkPreviewTypeEmbeddedVideoPlayer {
        return LinkPreviewTypeEmbeddedVideoPlayer(
            url = dto.url,
            thumbnail = dto.thumbnail?.let { map(it) },
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeExternalAudio): LinkPreviewTypeExternalAudio {
        return LinkPreviewTypeExternalAudio(
            url = dto.url,
            mimeType = dto.mimeType,
            duration = dto.duration,
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeExternalVideo): LinkPreviewTypeExternalVideo {
        return LinkPreviewTypeExternalVideo(
            url = dto.url,
            mimeType = dto.mimeType,
            width = dto.width,
            height = dto.height,
            duration = dto.duration,
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeGroupCall): LinkPreviewTypeGroupCall {
        return LinkPreviewTypeGroupCall()
    }

    fun map(dto: TdApi.LinkPreviewTypeInvoice): LinkPreviewTypeInvoice {
        return LinkPreviewTypeInvoice()
    }

    fun map(dto: TdApi.LinkPreviewTypeMessage): LinkPreviewTypeMessage {
        return LinkPreviewTypeMessage()
    }

    fun map(dto: TdApi.LinkPreviewTypePhoto): LinkPreviewTypePhoto {
        return LinkPreviewTypePhoto(
            photo = map(dto.photo),
        )
    }

    fun map(dto: TdApi.LinkPreviewTypePremiumGiftCode): LinkPreviewTypePremiumGiftCode {
        return LinkPreviewTypePremiumGiftCode()
    }

    fun map(dto: TdApi.LinkPreviewTypeShareableChatFolder): LinkPreviewTypeShareableChatFolder {
        return LinkPreviewTypeShareableChatFolder()
    }

    fun map(dto: TdApi.LinkPreviewTypeSticker): LinkPreviewTypeSticker {
        return LinkPreviewTypeSticker(
            sticker = map(dto.sticker),
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeStickerSet): LinkPreviewTypeStickerSet {
        return LinkPreviewTypeStickerSet(
            stickers = dto.stickers.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeStory): LinkPreviewTypeStory {
        return LinkPreviewTypeStory(
            storyPosterChatId = dto.storyPosterChatId,
            storyId = dto.storyId,
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeSupergroupBoost): LinkPreviewTypeSupergroupBoost {
        return LinkPreviewTypeSupergroupBoost(
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeTheme): LinkPreviewTypeTheme {
        return LinkPreviewTypeTheme(
            documents = dto.documents.mapArray { map(it) },
            settings = dto.settings?.let { map(it) },
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeUnsupported): LinkPreviewTypeUnsupported {
        return LinkPreviewTypeUnsupported()
    }

    fun map(dto: TdApi.LinkPreviewTypeUpgradedGift): LinkPreviewTypeUpgradedGift {
        return LinkPreviewTypeUpgradedGift(
            gift = map(dto.gift),
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeUser): LinkPreviewTypeUser {
        return LinkPreviewTypeUser(
            photo = dto.photo?.let { map(it) },
            isBot = dto.isBot,
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeVideo): LinkPreviewTypeVideo {
        return LinkPreviewTypeVideo(
            video = map(dto.video),
            cover = dto.cover?.let { map(it) },
            startTimestamp = dto.startTimestamp,
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeVideoChat): LinkPreviewTypeVideoChat {
        return LinkPreviewTypeVideoChat(
            photo = dto.photo?.let { map(it) },
            isLiveStream = dto.isLiveStream,
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeVideoNote): LinkPreviewTypeVideoNote {
        return LinkPreviewTypeVideoNote(
            videoNote = map(dto.videoNote),
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeVoiceNote): LinkPreviewTypeVoiceNote {
        return LinkPreviewTypeVoiceNote(
            voiceNote = map(dto.voiceNote),
        )
    }

    fun map(dto: TdApi.LinkPreviewTypeWebApp): LinkPreviewTypeWebApp {
        return LinkPreviewTypeWebApp(
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: LinkPreviewType): TdApi.LinkPreviewType {
        when (dto) {
            is LinkPreviewTypeAlbum -> return map(dto)
            is LinkPreviewTypeAnimation -> return map(dto)
            is LinkPreviewTypeApp -> return map(dto)
            is LinkPreviewTypeArticle -> return map(dto)
            is LinkPreviewTypeAudio -> return map(dto)
            is LinkPreviewTypeBackground -> return map(dto)
            is LinkPreviewTypeChannelBoost -> return map(dto)
            is LinkPreviewTypeChat -> return map(dto)
            is LinkPreviewTypeDocument -> return map(dto)
            is LinkPreviewTypeEmbeddedAnimationPlayer -> return map(dto)
            is LinkPreviewTypeEmbeddedAudioPlayer -> return map(dto)
            is LinkPreviewTypeEmbeddedVideoPlayer -> return map(dto)
            is LinkPreviewTypeExternalAudio -> return map(dto)
            is LinkPreviewTypeExternalVideo -> return map(dto)
            is LinkPreviewTypeGroupCall -> return map(dto)
            is LinkPreviewTypeInvoice -> return map(dto)
            is LinkPreviewTypeMessage -> return map(dto)
            is LinkPreviewTypePhoto -> return map(dto)
            is LinkPreviewTypePremiumGiftCode -> return map(dto)
            is LinkPreviewTypeShareableChatFolder -> return map(dto)
            is LinkPreviewTypeSticker -> return map(dto)
            is LinkPreviewTypeStickerSet -> return map(dto)
            is LinkPreviewTypeStory -> return map(dto)
            is LinkPreviewTypeSupergroupBoost -> return map(dto)
            is LinkPreviewTypeTheme -> return map(dto)
            is LinkPreviewTypeUnsupported -> return map(dto)
            is LinkPreviewTypeUpgradedGift -> return map(dto)
            is LinkPreviewTypeUser -> return map(dto)
            is LinkPreviewTypeVideo -> return map(dto)
            is LinkPreviewTypeVideoChat -> return map(dto)
            is LinkPreviewTypeVideoNote -> return map(dto)
            is LinkPreviewTypeVoiceNote -> return map(dto)
            is LinkPreviewTypeWebApp -> return map(dto)
        }
    }

    fun map(dto: LinkPreviewTypeAlbum): TdApi.LinkPreviewTypeAlbum {
        return TdApi.LinkPreviewTypeAlbum(
            media = dto.media.mapArray { map(it) },
            caption = dto.caption,
        )
    }

    fun map(dto: LinkPreviewTypeAnimation): TdApi.LinkPreviewTypeAnimation {
        return TdApi.LinkPreviewTypeAnimation(
            animation = map(dto.animation),
        )
    }

    fun map(dto: LinkPreviewTypeApp): TdApi.LinkPreviewTypeApp {
        return TdApi.LinkPreviewTypeApp(
            photo = map(dto.photo),
        )
    }

    fun map(dto: LinkPreviewTypeArticle): TdApi.LinkPreviewTypeArticle {
        return TdApi.LinkPreviewTypeArticle(
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: LinkPreviewTypeAudio): TdApi.LinkPreviewTypeAudio {
        return TdApi.LinkPreviewTypeAudio(
            audio = map(dto.audio),
        )
    }

    fun map(dto: LinkPreviewTypeBackground): TdApi.LinkPreviewTypeBackground {
        return TdApi.LinkPreviewTypeBackground(
            document = dto.document?.let { map(it) },
            backgroundType = dto.backgroundType?.let { map(it) },
        )
    }

    fun map(dto: LinkPreviewTypeChannelBoost): TdApi.LinkPreviewTypeChannelBoost {
        return TdApi.LinkPreviewTypeChannelBoost(
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: LinkPreviewTypeChat): TdApi.LinkPreviewTypeChat {
        return TdApi.LinkPreviewTypeChat(
            type = map(dto.type),
            photo = dto.photo?.let { map(it) },
            createsJoinRequest = dto.createsJoinRequest,
        )
    }

    fun map(dto: LinkPreviewTypeDocument): TdApi.LinkPreviewTypeDocument {
        return TdApi.LinkPreviewTypeDocument(
            document = map(dto.document),
        )
    }

    fun map(dto: LinkPreviewTypeEmbeddedAnimationPlayer): TdApi.LinkPreviewTypeEmbeddedAnimationPlayer {
        return TdApi.LinkPreviewTypeEmbeddedAnimationPlayer(
            url = dto.url,
            thumbnail = dto.thumbnail?.let { map(it) },
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
        )
    }

    fun map(dto: LinkPreviewTypeEmbeddedAudioPlayer): TdApi.LinkPreviewTypeEmbeddedAudioPlayer {
        return TdApi.LinkPreviewTypeEmbeddedAudioPlayer(
            url = dto.url,
            thumbnail = dto.thumbnail?.let { map(it) },
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
        )
    }

    fun map(dto: LinkPreviewTypeEmbeddedVideoPlayer): TdApi.LinkPreviewTypeEmbeddedVideoPlayer {
        return TdApi.LinkPreviewTypeEmbeddedVideoPlayer(
            url = dto.url,
            thumbnail = dto.thumbnail?.let { map(it) },
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
        )
    }

    fun map(dto: LinkPreviewTypeExternalAudio): TdApi.LinkPreviewTypeExternalAudio {
        return TdApi.LinkPreviewTypeExternalAudio(
            url = dto.url,
            mimeType = dto.mimeType,
            duration = dto.duration,
        )
    }

    fun map(dto: LinkPreviewTypeExternalVideo): TdApi.LinkPreviewTypeExternalVideo {
        return TdApi.LinkPreviewTypeExternalVideo(
            url = dto.url,
            mimeType = dto.mimeType,
            width = dto.width,
            height = dto.height,
            duration = dto.duration,
        )
    }

    fun map(dto: LinkPreviewTypeGroupCall): TdApi.LinkPreviewTypeGroupCall {
        return TdApi.LinkPreviewTypeGroupCall()
    }

    fun map(dto: LinkPreviewTypeInvoice): TdApi.LinkPreviewTypeInvoice {
        return TdApi.LinkPreviewTypeInvoice()
    }

    fun map(dto: LinkPreviewTypeMessage): TdApi.LinkPreviewTypeMessage {
        return TdApi.LinkPreviewTypeMessage()
    }

    fun map(dto: LinkPreviewTypePhoto): TdApi.LinkPreviewTypePhoto {
        return TdApi.LinkPreviewTypePhoto(
            photo = map(dto.photo),
        )
    }

    fun map(dto: LinkPreviewTypePremiumGiftCode): TdApi.LinkPreviewTypePremiumGiftCode {
        return TdApi.LinkPreviewTypePremiumGiftCode()
    }

    fun map(dto: LinkPreviewTypeShareableChatFolder): TdApi.LinkPreviewTypeShareableChatFolder {
        return TdApi.LinkPreviewTypeShareableChatFolder()
    }

    fun map(dto: LinkPreviewTypeSticker): TdApi.LinkPreviewTypeSticker {
        return TdApi.LinkPreviewTypeSticker(
            sticker = map(dto.sticker),
        )
    }

    fun map(dto: LinkPreviewTypeStickerSet): TdApi.LinkPreviewTypeStickerSet {
        return TdApi.LinkPreviewTypeStickerSet(
            stickers = dto.stickers.mapArray { map(it) },
        )
    }

    fun map(dto: LinkPreviewTypeStory): TdApi.LinkPreviewTypeStory {
        return TdApi.LinkPreviewTypeStory(
            storyPosterChatId = dto.storyPosterChatId,
            storyId = dto.storyId,
        )
    }

    fun map(dto: LinkPreviewTypeSupergroupBoost): TdApi.LinkPreviewTypeSupergroupBoost {
        return TdApi.LinkPreviewTypeSupergroupBoost(
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: LinkPreviewTypeTheme): TdApi.LinkPreviewTypeTheme {
        return TdApi.LinkPreviewTypeTheme(
            documents = dto.documents.mapArray { map(it) },
            settings = dto.settings?.let { map(it) },
        )
    }

    fun map(dto: LinkPreviewTypeUnsupported): TdApi.LinkPreviewTypeUnsupported {
        return TdApi.LinkPreviewTypeUnsupported()
    }

    fun map(dto: LinkPreviewTypeUpgradedGift): TdApi.LinkPreviewTypeUpgradedGift {
        return TdApi.LinkPreviewTypeUpgradedGift(
            gift = map(dto.gift),
        )
    }

    fun map(dto: LinkPreviewTypeUser): TdApi.LinkPreviewTypeUser {
        return TdApi.LinkPreviewTypeUser(
            photo = dto.photo?.let { map(it) },
            isBot = dto.isBot,
        )
    }

    fun map(dto: LinkPreviewTypeVideo): TdApi.LinkPreviewTypeVideo {
        return TdApi.LinkPreviewTypeVideo(
            video = map(dto.video),
            cover = dto.cover?.let { map(it) },
            startTimestamp = dto.startTimestamp,
        )
    }

    fun map(dto: LinkPreviewTypeVideoChat): TdApi.LinkPreviewTypeVideoChat {
        return TdApi.LinkPreviewTypeVideoChat(
            photo = dto.photo?.let { map(it) },
            isLiveStream = dto.isLiveStream,
        )
    }

    fun map(dto: LinkPreviewTypeVideoNote): TdApi.LinkPreviewTypeVideoNote {
        return TdApi.LinkPreviewTypeVideoNote(
            videoNote = map(dto.videoNote),
        )
    }

    fun map(dto: LinkPreviewTypeVoiceNote): TdApi.LinkPreviewTypeVoiceNote {
        return TdApi.LinkPreviewTypeVoiceNote(
            voiceNote = map(dto.voiceNote),
        )
    }

    fun map(dto: LinkPreviewTypeWebApp): TdApi.LinkPreviewTypeWebApp {
        return TdApi.LinkPreviewTypeWebApp(
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: TdApi.LocalFile): LocalFile {
        return LocalFile(
            path = dto.path,
            canBeDownloaded = dto.canBeDownloaded,
            canBeDeleted = dto.canBeDeleted,
            isDownloadingActive = dto.isDownloadingActive,
            isDownloadingCompleted = dto.isDownloadingCompleted,
            downloadOffset = dto.downloadOffset,
            downloadedPrefixSize = dto.downloadedPrefixSize,
            downloadedSize = dto.downloadedSize,
        )
    }

    fun map(dto: LocalFile): TdApi.LocalFile {
        return TdApi.LocalFile(
            path = dto.path,
            canBeDownloaded = dto.canBeDownloaded,
            canBeDeleted = dto.canBeDeleted,
            isDownloadingActive = dto.isDownloadingActive,
            isDownloadingCompleted = dto.isDownloadingCompleted,
            downloadOffset = dto.downloadOffset,
            downloadedPrefixSize = dto.downloadedPrefixSize,
            downloadedSize = dto.downloadedSize,
        )
    }

    fun map(dto: TdApi.LocalizationTargetInfo): LocalizationTargetInfo {
        return LocalizationTargetInfo(
            languagePacks = dto.languagePacks.mapArray { map(it) },
        )
    }

    fun map(dto: LocalizationTargetInfo): TdApi.LocalizationTargetInfo {
        return TdApi.LocalizationTargetInfo(
            languagePacks = dto.languagePacks.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.Location): Location {
        return Location(
            latitude = dto.latitude,
            longitude = dto.longitude,
            horizontalAccuracy = dto.horizontalAccuracy,
        )
    }

    fun map(dto: Location): TdApi.Location {
        return TdApi.Location(
            latitude = dto.latitude,
            longitude = dto.longitude,
            horizontalAccuracy = dto.horizontalAccuracy,
        )
    }

    fun map(dto: TdApi.LocationAddress): LocationAddress {
        return LocationAddress(
            countryCode = dto.countryCode,
            state = dto.state,
            city = dto.city,
            street = dto.street,
        )
    }

    fun map(dto: LocationAddress): TdApi.LocationAddress {
        return TdApi.LocationAddress(
            countryCode = dto.countryCode,
            state = dto.state,
            city = dto.city,
            street = dto.street,
        )
    }

    fun map(dto: TdApi.LogStream): LogStream {
        when (dto) {
            is TdApi.LogStreamDefault -> return map(dto)
            is TdApi.LogStreamFile -> return map(dto)
            is TdApi.LogStreamEmpty -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.LogStreamDefault): LogStreamDefault {
        return LogStreamDefault()
    }

    fun map(dto: TdApi.LogStreamFile): LogStreamFile {
        return LogStreamFile(
            path = dto.path,
            maxFileSize = dto.maxFileSize,
            redirectStderr = dto.redirectStderr,
        )
    }

    fun map(dto: TdApi.LogStreamEmpty): LogStreamEmpty {
        return LogStreamEmpty()
    }

    fun map(dto: LogStream): TdApi.LogStream {
        when (dto) {
            is LogStreamDefault -> return map(dto)
            is LogStreamFile -> return map(dto)
            is LogStreamEmpty -> return map(dto)
        }
    }

    fun map(dto: LogStreamDefault): TdApi.LogStreamDefault {
        return TdApi.LogStreamDefault()
    }

    fun map(dto: LogStreamFile): TdApi.LogStreamFile {
        return TdApi.LogStreamFile(
            path = dto.path,
            maxFileSize = dto.maxFileSize,
            redirectStderr = dto.redirectStderr,
        )
    }

    fun map(dto: LogStreamEmpty): TdApi.LogStreamEmpty {
        return TdApi.LogStreamEmpty()
    }

    fun map(dto: TdApi.LogTags): LogTags {
        return LogTags(
            tags = dto.tags,
        )
    }

    fun map(dto: LogTags): TdApi.LogTags {
        return TdApi.LogTags(
            tags = dto.tags,
        )
    }

    fun map(dto: TdApi.LogVerbosityLevel): LogVerbosityLevel {
        return LogVerbosityLevel(
            verbosityLevel = dto.verbosityLevel,
        )
    }

    fun map(dto: LogVerbosityLevel): TdApi.LogVerbosityLevel {
        return TdApi.LogVerbosityLevel(
            verbosityLevel = dto.verbosityLevel,
        )
    }

    fun map(dto: TdApi.LoginUrlInfo): LoginUrlInfo {
        when (dto) {
            is TdApi.LoginUrlInfoOpen -> return map(dto)
            is TdApi.LoginUrlInfoRequestConfirmation -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.LoginUrlInfoOpen): LoginUrlInfoOpen {
        return LoginUrlInfoOpen(
            url = dto.url,
            skipConfirmation = dto.skipConfirmation,
        )
    }

    fun map(dto: TdApi.LoginUrlInfoRequestConfirmation): LoginUrlInfoRequestConfirmation {
        return LoginUrlInfoRequestConfirmation(
            url = dto.url,
            domain = dto.domain,
            botUserId = dto.botUserId,
            requestWriteAccess = dto.requestWriteAccess,
        )
    }

    fun map(dto: LoginUrlInfo): TdApi.LoginUrlInfo {
        when (dto) {
            is LoginUrlInfoOpen -> return map(dto)
            is LoginUrlInfoRequestConfirmation -> return map(dto)
        }
    }

    fun map(dto: LoginUrlInfoOpen): TdApi.LoginUrlInfoOpen {
        return TdApi.LoginUrlInfoOpen(
            url = dto.url,
            skipConfirmation = dto.skipConfirmation,
        )
    }

    fun map(dto: LoginUrlInfoRequestConfirmation): TdApi.LoginUrlInfoRequestConfirmation {
        return TdApi.LoginUrlInfoRequestConfirmation(
            url = dto.url,
            domain = dto.domain,
            botUserId = dto.botUserId,
            requestWriteAccess = dto.requestWriteAccess,
        )
    }

    fun map(dto: TdApi.MainWebApp): MainWebApp {
        return MainWebApp(
            url = dto.url,
            mode = map(dto.mode),
        )
    }

    fun map(dto: MainWebApp): TdApi.MainWebApp {
        return TdApi.MainWebApp(
            url = dto.url,
            mode = map(dto.mode),
        )
    }

    fun map(dto: TdApi.MaskPoint): MaskPoint {
        when (dto) {
            is TdApi.MaskPointForehead -> return map(dto)
            is TdApi.MaskPointEyes -> return map(dto)
            is TdApi.MaskPointMouth -> return map(dto)
            is TdApi.MaskPointChin -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.MaskPointForehead): MaskPointForehead {
        return MaskPointForehead()
    }

    fun map(dto: TdApi.MaskPointEyes): MaskPointEyes {
        return MaskPointEyes()
    }

    fun map(dto: TdApi.MaskPointMouth): MaskPointMouth {
        return MaskPointMouth()
    }

    fun map(dto: TdApi.MaskPointChin): MaskPointChin {
        return MaskPointChin()
    }

    fun map(dto: MaskPoint): TdApi.MaskPoint {
        when (dto) {
            is MaskPointForehead -> return map(dto)
            is MaskPointEyes -> return map(dto)
            is MaskPointMouth -> return map(dto)
            is MaskPointChin -> return map(dto)
        }
    }

    fun map(dto: MaskPointForehead): TdApi.MaskPointForehead {
        return TdApi.MaskPointForehead()
    }

    fun map(dto: MaskPointEyes): TdApi.MaskPointEyes {
        return TdApi.MaskPointEyes()
    }

    fun map(dto: MaskPointMouth): TdApi.MaskPointMouth {
        return TdApi.MaskPointMouth()
    }

    fun map(dto: MaskPointChin): TdApi.MaskPointChin {
        return TdApi.MaskPointChin()
    }

    fun map(dto: TdApi.MaskPosition): MaskPosition {
        return MaskPosition(
            point = map(dto.point),
            xShift = dto.xShift,
            yShift = dto.yShift,
            scale = dto.scale,
        )
    }

    fun map(dto: MaskPosition): TdApi.MaskPosition {
        return TdApi.MaskPosition(
            point = map(dto.point),
            xShift = dto.xShift,
            yShift = dto.yShift,
            scale = dto.scale,
        )
    }

    fun map(dto: TdApi.Message): Message {
        return Message(
            id = dto.id,
            senderId = map(dto.senderId),
            chatId = dto.chatId,
            sendingState = dto.sendingState?.let { map(it) },
            schedulingState = dto.schedulingState?.let { map(it) },
            isOutgoing = dto.isOutgoing,
            isPinned = dto.isPinned,
            isFromOffline = dto.isFromOffline,
            canBeSaved = dto.canBeSaved,
            hasTimestampedMedia = dto.hasTimestampedMedia,
            isChannelPost = dto.isChannelPost,
            containsUnreadMention = dto.containsUnreadMention,
            date = dto.date,
            editDate = dto.editDate,
            forwardInfo = dto.forwardInfo?.let { map(it) },
            importInfo = dto.importInfo?.let { map(it) },
            interactionInfo = dto.interactionInfo?.let { map(it) },
            unreadReactions = dto.unreadReactions.mapArray { map(it) },
            factCheck = dto.factCheck?.let { map(it) },
            replyTo = dto.replyTo?.let { map(it) },
            messageThreadId = dto.messageThreadId,
            topicId = dto.topicId?.let { map(it) },
            selfDestructType = dto.selfDestructType?.let { map(it) },
            selfDestructIn = dto.selfDestructIn,
            autoDeleteIn = dto.autoDeleteIn,
            viaBotUserId = dto.viaBotUserId,
            senderBusinessBotUserId = dto.senderBusinessBotUserId,
            senderBoostCount = dto.senderBoostCount,
            paidMessageStarCount = dto.paidMessageStarCount,
            authorSignature = dto.authorSignature,
            mediaAlbumId = dto.mediaAlbumId,
            effectId = dto.effectId,
            hasSensitiveContent = dto.hasSensitiveContent,
            restrictionReason = dto.restrictionReason,
            content = map(dto.content),
            replyMarkup = dto.replyMarkup?.let { map(it) },
        )
    }

    fun map(dto: Message): TdApi.Message {
        return TdApi.Message(
            id = dto.id,
            senderId = map(dto.senderId),
            chatId = dto.chatId,
            sendingState = dto.sendingState?.let { map(it) },
            schedulingState = dto.schedulingState?.let { map(it) },
            isOutgoing = dto.isOutgoing,
            isPinned = dto.isPinned,
            isFromOffline = dto.isFromOffline,
            canBeSaved = dto.canBeSaved,
            hasTimestampedMedia = dto.hasTimestampedMedia,
            isChannelPost = dto.isChannelPost,
            containsUnreadMention = dto.containsUnreadMention,
            date = dto.date,
            editDate = dto.editDate,
            forwardInfo = dto.forwardInfo?.let { map(it) },
            importInfo = dto.importInfo?.let { map(it) },
            interactionInfo = dto.interactionInfo?.let { map(it) },
            unreadReactions = dto.unreadReactions.mapArray { map(it) },
            factCheck = dto.factCheck?.let { map(it) },
            replyTo = dto.replyTo?.let { map(it) },
            messageThreadId = dto.messageThreadId,
            topicId = dto.topicId?.let { map(it) },
            selfDestructType = dto.selfDestructType?.let { map(it) },
            selfDestructIn = dto.selfDestructIn,
            autoDeleteIn = dto.autoDeleteIn,
            viaBotUserId = dto.viaBotUserId,
            senderBusinessBotUserId = dto.senderBusinessBotUserId,
            senderBoostCount = dto.senderBoostCount,
            paidMessageStarCount = dto.paidMessageStarCount,
            authorSignature = dto.authorSignature,
            mediaAlbumId = dto.mediaAlbumId,
            effectId = dto.effectId,
            hasSensitiveContent = dto.hasSensitiveContent,
            restrictionReason = dto.restrictionReason,
            content = map(dto.content),
            replyMarkup = dto.replyMarkup?.let { map(it) },
        )
    }

    fun map(dto: TdApi.MessageAutoDeleteTime): MessageAutoDeleteTime {
        return MessageAutoDeleteTime(
            time = dto.time,
        )
    }

    fun map(dto: MessageAutoDeleteTime): TdApi.MessageAutoDeleteTime {
        return TdApi.MessageAutoDeleteTime(
            time = dto.time,
        )
    }

    fun map(dto: TdApi.MessageCalendar): MessageCalendar {
        return MessageCalendar(
            totalCount = dto.totalCount,
            days = dto.days.mapArray { map(it) },
        )
    }

    fun map(dto: MessageCalendar): TdApi.MessageCalendar {
        return TdApi.MessageCalendar(
            totalCount = dto.totalCount,
            days = dto.days.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.MessageCalendarDay): MessageCalendarDay {
        return MessageCalendarDay(
            totalCount = dto.totalCount,
            message = map(dto.message),
        )
    }

    fun map(dto: MessageCalendarDay): TdApi.MessageCalendarDay {
        return TdApi.MessageCalendarDay(
            totalCount = dto.totalCount,
            message = map(dto.message),
        )
    }

    fun map(dto: TdApi.MessageContent): MessageContent {
        when (dto) {
            is TdApi.MessageText -> return map(dto)
            is TdApi.MessageAnimation -> return map(dto)
            is TdApi.MessageAudio -> return map(dto)
            is TdApi.MessageDocument -> return map(dto)
            is TdApi.MessagePaidMedia -> return map(dto)
            is TdApi.MessagePhoto -> return map(dto)
            is TdApi.MessageSticker -> return map(dto)
            is TdApi.MessageVideo -> return map(dto)
            is TdApi.MessageVideoNote -> return map(dto)
            is TdApi.MessageVoiceNote -> return map(dto)
            is TdApi.MessageExpiredPhoto -> return map(dto)
            is TdApi.MessageExpiredVideo -> return map(dto)
            is TdApi.MessageExpiredVideoNote -> return map(dto)
            is TdApi.MessageExpiredVoiceNote -> return map(dto)
            is TdApi.MessageLocation -> return map(dto)
            is TdApi.MessageVenue -> return map(dto)
            is TdApi.MessageContact -> return map(dto)
            is TdApi.MessageAnimatedEmoji -> return map(dto)
            is TdApi.MessageDice -> return map(dto)
            is TdApi.MessageGame -> return map(dto)
            is TdApi.MessagePoll -> return map(dto)
            is TdApi.MessageStory -> return map(dto)
            is TdApi.MessageChecklist -> return map(dto)
            is TdApi.MessageInvoice -> return map(dto)
            is TdApi.MessageCall -> return map(dto)
            is TdApi.MessageGroupCall -> return map(dto)
            is TdApi.MessageVideoChatScheduled -> return map(dto)
            is TdApi.MessageVideoChatStarted -> return map(dto)
            is TdApi.MessageVideoChatEnded -> return map(dto)
            is TdApi.MessageInviteVideoChatParticipants -> return map(dto)
            is TdApi.MessageBasicGroupChatCreate -> return map(dto)
            is TdApi.MessageSupergroupChatCreate -> return map(dto)
            is TdApi.MessageChatChangeTitle -> return map(dto)
            is TdApi.MessageChatChangePhoto -> return map(dto)
            is TdApi.MessageChatDeletePhoto -> return map(dto)
            is TdApi.MessageChatAddMembers -> return map(dto)
            is TdApi.MessageChatJoinByLink -> return map(dto)
            is TdApi.MessageChatJoinByRequest -> return map(dto)
            is TdApi.MessageChatDeleteMember -> return map(dto)
            is TdApi.MessageChatUpgradeTo -> return map(dto)
            is TdApi.MessageChatUpgradeFrom -> return map(dto)
            is TdApi.MessagePinMessage -> return map(dto)
            is TdApi.MessageScreenshotTaken -> return map(dto)
            is TdApi.MessageChatSetBackground -> return map(dto)
            is TdApi.MessageChatSetTheme -> return map(dto)
            is TdApi.MessageChatSetMessageAutoDeleteTime -> return map(dto)
            is TdApi.MessageChatBoost -> return map(dto)
            is TdApi.MessageForumTopicCreated -> return map(dto)
            is TdApi.MessageForumTopicEdited -> return map(dto)
            is TdApi.MessageForumTopicIsClosedToggled -> return map(dto)
            is TdApi.MessageForumTopicIsHiddenToggled -> return map(dto)
            is TdApi.MessageSuggestProfilePhoto -> return map(dto)
            is TdApi.MessageCustomServiceAction -> return map(dto)
            is TdApi.MessageGameScore -> return map(dto)
            is TdApi.MessagePaymentSuccessful -> return map(dto)
            is TdApi.MessagePaymentSuccessfulBot -> return map(dto)
            is TdApi.MessagePaymentRefunded -> return map(dto)
            is TdApi.MessageGiftedPremium -> return map(dto)
            is TdApi.MessagePremiumGiftCode -> return map(dto)
            is TdApi.MessageGiveawayCreated -> return map(dto)
            is TdApi.MessageGiveaway -> return map(dto)
            is TdApi.MessageGiveawayCompleted -> return map(dto)
            is TdApi.MessageGiveawayWinners -> return map(dto)
            is TdApi.MessageGiftedStars -> return map(dto)
            is TdApi.MessageGiveawayPrizeStars -> return map(dto)
            is TdApi.MessageGift -> return map(dto)
            is TdApi.MessageUpgradedGift -> return map(dto)
            is TdApi.MessageRefundedUpgradedGift -> return map(dto)
            is TdApi.MessagePaidMessagesRefunded -> return map(dto)
            is TdApi.MessagePaidMessagePriceChanged -> return map(dto)
            is TdApi.MessageDirectMessagePriceChanged -> return map(dto)
            is TdApi.MessageChecklistTasksDone -> return map(dto)
            is TdApi.MessageChecklistTasksAdded -> return map(dto)
            is TdApi.MessageContactRegistered -> return map(dto)
            is TdApi.MessageUsersShared -> return map(dto)
            is TdApi.MessageChatShared -> return map(dto)
            is TdApi.MessageBotWriteAccessAllowed -> return map(dto)
            is TdApi.MessageWebAppDataSent -> return map(dto)
            is TdApi.MessageWebAppDataReceived -> return map(dto)
            is TdApi.MessagePassportDataSent -> return map(dto)
            is TdApi.MessagePassportDataReceived -> return map(dto)
            is TdApi.MessageProximityAlertTriggered -> return map(dto)
            is TdApi.MessageUnsupported -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.MessageText): MessageText {
        return MessageText(
            text = map(dto.text),
            linkPreview = dto.linkPreview?.let { map(it) },
            linkPreviewOptions = dto.linkPreviewOptions?.let { map(it) },
        )
    }

    fun map(dto: TdApi.MessageAnimation): MessageAnimation {
        return MessageAnimation(
            animation = map(dto.animation),
            caption = map(dto.caption),
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
            hasSpoiler = dto.hasSpoiler,
            isSecret = dto.isSecret,
        )
    }

    fun map(dto: TdApi.MessageAudio): MessageAudio {
        return MessageAudio(
            audio = map(dto.audio),
            caption = map(dto.caption),
        )
    }

    fun map(dto: TdApi.MessageDocument): MessageDocument {
        return MessageDocument(
            document = map(dto.document),
            caption = map(dto.caption),
        )
    }

    fun map(dto: TdApi.MessagePaidMedia): MessagePaidMedia {
        return MessagePaidMedia(
            starCount = dto.starCount,
            media = dto.media.mapArray { map(it) },
            caption = map(dto.caption),
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
        )
    }

    fun map(dto: TdApi.MessagePhoto): MessagePhoto {
        return MessagePhoto(
            photo = map(dto.photo),
            caption = map(dto.caption),
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
            hasSpoiler = dto.hasSpoiler,
            isSecret = dto.isSecret,
        )
    }

    fun map(dto: TdApi.MessageSticker): MessageSticker {
        return MessageSticker(
            sticker = map(dto.sticker),
            isPremium = dto.isPremium,
        )
    }

    fun map(dto: TdApi.MessageVideo): MessageVideo {
        return MessageVideo(
            video = map(dto.video),
            alternativeVideos = dto.alternativeVideos.mapArray { map(it) },
            storyboards = dto.storyboards.mapArray { map(it) },
            cover = dto.cover?.let { map(it) },
            startTimestamp = dto.startTimestamp,
            caption = map(dto.caption),
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
            hasSpoiler = dto.hasSpoiler,
            isSecret = dto.isSecret,
        )
    }

    fun map(dto: TdApi.MessageVideoNote): MessageVideoNote {
        return MessageVideoNote(
            videoNote = map(dto.videoNote),
            isViewed = dto.isViewed,
            isSecret = dto.isSecret,
        )
    }

    fun map(dto: TdApi.MessageVoiceNote): MessageVoiceNote {
        return MessageVoiceNote(
            voiceNote = map(dto.voiceNote),
            caption = map(dto.caption),
            isListened = dto.isListened,
        )
    }

    fun map(dto: TdApi.MessageExpiredPhoto): MessageExpiredPhoto {
        return MessageExpiredPhoto()
    }

    fun map(dto: TdApi.MessageExpiredVideo): MessageExpiredVideo {
        return MessageExpiredVideo()
    }

    fun map(dto: TdApi.MessageExpiredVideoNote): MessageExpiredVideoNote {
        return MessageExpiredVideoNote()
    }

    fun map(dto: TdApi.MessageExpiredVoiceNote): MessageExpiredVoiceNote {
        return MessageExpiredVoiceNote()
    }

    fun map(dto: TdApi.MessageLocation): MessageLocation {
        return MessageLocation(
            location = map(dto.location),
            livePeriod = dto.livePeriod,
            expiresIn = dto.expiresIn,
            heading = dto.heading,
            proximityAlertRadius = dto.proximityAlertRadius,
        )
    }

    fun map(dto: TdApi.MessageVenue): MessageVenue {
        return MessageVenue(
            venue = map(dto.venue),
        )
    }

    fun map(dto: TdApi.MessageContact): MessageContact {
        return MessageContact(
            contact = map(dto.contact),
        )
    }

    fun map(dto: TdApi.MessageAnimatedEmoji): MessageAnimatedEmoji {
        return MessageAnimatedEmoji(
            animatedEmoji = map(dto.animatedEmoji),
            emoji = dto.emoji,
        )
    }

    fun map(dto: TdApi.MessageDice): MessageDice {
        return MessageDice(
            initialState = dto.initialState?.let { map(it) },
            finalState = dto.finalState?.let { map(it) },
            emoji = dto.emoji,
            value = dto.value,
            successAnimationFrameNumber = dto.successAnimationFrameNumber,
        )
    }

    fun map(dto: TdApi.MessageGame): MessageGame {
        return MessageGame(
            game = map(dto.game),
        )
    }

    fun map(dto: TdApi.MessagePoll): MessagePoll {
        return MessagePoll(
            poll = map(dto.poll),
        )
    }

    fun map(dto: TdApi.MessageStory): MessageStory {
        return MessageStory(
            storyPosterChatId = dto.storyPosterChatId,
            storyId = dto.storyId,
            viaMention = dto.viaMention,
        )
    }

    fun map(dto: TdApi.MessageChecklist): MessageChecklist {
        return MessageChecklist(
            list = map(dto.list),
        )
    }

    fun map(dto: TdApi.MessageInvoice): MessageInvoice {
        return MessageInvoice(
            productInfo = map(dto.productInfo),
            currency = dto.currency,
            totalAmount = dto.totalAmount,
            startParameter = dto.startParameter,
            isTest = dto.isTest,
            needShippingAddress = dto.needShippingAddress,
            receiptMessageId = dto.receiptMessageId,
            paidMedia = dto.paidMedia?.let { map(it) },
            paidMediaCaption = dto.paidMediaCaption?.let { map(it) },
        )
    }

    fun map(dto: TdApi.MessageCall): MessageCall {
        return MessageCall(
            isVideo = dto.isVideo,
            discardReason = map(dto.discardReason),
            duration = dto.duration,
        )
    }

    fun map(dto: TdApi.MessageGroupCall): MessageGroupCall {
        return MessageGroupCall(
            isActive = dto.isActive,
            wasMissed = dto.wasMissed,
            isVideo = dto.isVideo,
            duration = dto.duration,
            otherParticipantIds = dto.otherParticipantIds.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.MessageVideoChatScheduled): MessageVideoChatScheduled {
        return MessageVideoChatScheduled(
            groupCallId = dto.groupCallId,
            startDate = dto.startDate,
        )
    }

    fun map(dto: TdApi.MessageVideoChatStarted): MessageVideoChatStarted {
        return MessageVideoChatStarted(
            groupCallId = dto.groupCallId,
        )
    }

    fun map(dto: TdApi.MessageVideoChatEnded): MessageVideoChatEnded {
        return MessageVideoChatEnded(
            duration = dto.duration,
        )
    }

    fun map(dto: TdApi.MessageInviteVideoChatParticipants): MessageInviteVideoChatParticipants {
        return MessageInviteVideoChatParticipants(
            groupCallId = dto.groupCallId,
            userIds = dto.userIds,
        )
    }

    fun map(dto: TdApi.MessageBasicGroupChatCreate): MessageBasicGroupChatCreate {
        return MessageBasicGroupChatCreate(
            title = dto.title,
            memberUserIds = dto.memberUserIds,
        )
    }

    fun map(dto: TdApi.MessageSupergroupChatCreate): MessageSupergroupChatCreate {
        return MessageSupergroupChatCreate(
            title = dto.title,
        )
    }

    fun map(dto: TdApi.MessageChatChangeTitle): MessageChatChangeTitle {
        return MessageChatChangeTitle(
            title = dto.title,
        )
    }

    fun map(dto: TdApi.MessageChatChangePhoto): MessageChatChangePhoto {
        return MessageChatChangePhoto(
            photo = map(dto.photo),
        )
    }

    fun map(dto: TdApi.MessageChatDeletePhoto): MessageChatDeletePhoto {
        return MessageChatDeletePhoto()
    }

    fun map(dto: TdApi.MessageChatAddMembers): MessageChatAddMembers {
        return MessageChatAddMembers(
            memberUserIds = dto.memberUserIds,
        )
    }

    fun map(dto: TdApi.MessageChatJoinByLink): MessageChatJoinByLink {
        return MessageChatJoinByLink()
    }

    fun map(dto: TdApi.MessageChatJoinByRequest): MessageChatJoinByRequest {
        return MessageChatJoinByRequest()
    }

    fun map(dto: TdApi.MessageChatDeleteMember): MessageChatDeleteMember {
        return MessageChatDeleteMember(
            userId = dto.userId,
        )
    }

    fun map(dto: TdApi.MessageChatUpgradeTo): MessageChatUpgradeTo {
        return MessageChatUpgradeTo(
            supergroupId = dto.supergroupId,
        )
    }

    fun map(dto: TdApi.MessageChatUpgradeFrom): MessageChatUpgradeFrom {
        return MessageChatUpgradeFrom(
            title = dto.title,
            basicGroupId = dto.basicGroupId,
        )
    }

    fun map(dto: TdApi.MessagePinMessage): MessagePinMessage {
        return MessagePinMessage(
            messageId = dto.messageId,
        )
    }

    fun map(dto: TdApi.MessageScreenshotTaken): MessageScreenshotTaken {
        return MessageScreenshotTaken()
    }

    fun map(dto: TdApi.MessageChatSetBackground): MessageChatSetBackground {
        return MessageChatSetBackground(
            oldBackgroundMessageId = dto.oldBackgroundMessageId,
            background = map(dto.background),
            onlyForSelf = dto.onlyForSelf,
        )
    }

    fun map(dto: TdApi.MessageChatSetTheme): MessageChatSetTheme {
        return MessageChatSetTheme(
            themeName = dto.themeName,
        )
    }

    fun map(dto: TdApi.MessageChatSetMessageAutoDeleteTime): MessageChatSetMessageAutoDeleteTime {
        return MessageChatSetMessageAutoDeleteTime(
            messageAutoDeleteTime = dto.messageAutoDeleteTime,
            fromUserId = dto.fromUserId,
        )
    }

    fun map(dto: TdApi.MessageChatBoost): MessageChatBoost {
        return MessageChatBoost(
            boostCount = dto.boostCount,
        )
    }

    fun map(dto: TdApi.MessageForumTopicCreated): MessageForumTopicCreated {
        return MessageForumTopicCreated(
            name = dto.name,
            icon = map(dto.icon),
        )
    }

    fun map(dto: TdApi.MessageForumTopicEdited): MessageForumTopicEdited {
        return MessageForumTopicEdited(
            name = dto.name,
            editIconCustomEmojiId = dto.editIconCustomEmojiId,
            iconCustomEmojiId = dto.iconCustomEmojiId,
        )
    }

    fun map(dto: TdApi.MessageForumTopicIsClosedToggled): MessageForumTopicIsClosedToggled {
        return MessageForumTopicIsClosedToggled(
            isClosed = dto.isClosed,
        )
    }

    fun map(dto: TdApi.MessageForumTopicIsHiddenToggled): MessageForumTopicIsHiddenToggled {
        return MessageForumTopicIsHiddenToggled(
            isHidden = dto.isHidden,
        )
    }

    fun map(dto: TdApi.MessageSuggestProfilePhoto): MessageSuggestProfilePhoto {
        return MessageSuggestProfilePhoto(
            photo = map(dto.photo),
        )
    }

    fun map(dto: TdApi.MessageCustomServiceAction): MessageCustomServiceAction {
        return MessageCustomServiceAction(
            text = dto.text,
        )
    }

    fun map(dto: TdApi.MessageGameScore): MessageGameScore {
        return MessageGameScore(
            gameMessageId = dto.gameMessageId,
            gameId = dto.gameId,
            score = dto.score,
        )
    }

    fun map(dto: TdApi.MessagePaymentSuccessful): MessagePaymentSuccessful {
        return MessagePaymentSuccessful(
            invoiceChatId = dto.invoiceChatId,
            invoiceMessageId = dto.invoiceMessageId,
            currency = dto.currency,
            totalAmount = dto.totalAmount,
            subscriptionUntilDate = dto.subscriptionUntilDate,
            isRecurring = dto.isRecurring,
            isFirstRecurring = dto.isFirstRecurring,
            invoiceName = dto.invoiceName,
        )
    }

    fun map(dto: TdApi.MessagePaymentSuccessfulBot): MessagePaymentSuccessfulBot {
        return MessagePaymentSuccessfulBot(
            currency = dto.currency,
            totalAmount = dto.totalAmount,
            subscriptionUntilDate = dto.subscriptionUntilDate,
            isRecurring = dto.isRecurring,
            isFirstRecurring = dto.isFirstRecurring,
            invoicePayload = dto.invoicePayload,
            shippingOptionId = dto.shippingOptionId,
            orderInfo = dto.orderInfo?.let { map(it) },
            telegramPaymentChargeId = dto.telegramPaymentChargeId,
            providerPaymentChargeId = dto.providerPaymentChargeId,
        )
    }

    fun map(dto: TdApi.MessagePaymentRefunded): MessagePaymentRefunded {
        return MessagePaymentRefunded(
            ownerId = map(dto.ownerId),
            currency = dto.currency,
            totalAmount = dto.totalAmount,
            invoicePayload = dto.invoicePayload,
            telegramPaymentChargeId = dto.telegramPaymentChargeId,
            providerPaymentChargeId = dto.providerPaymentChargeId,
        )
    }

    fun map(dto: TdApi.MessageGiftedPremium): MessageGiftedPremium {
        return MessageGiftedPremium(
            gifterUserId = dto.gifterUserId,
            receiverUserId = dto.receiverUserId,
            text = map(dto.text),
            currency = dto.currency,
            amount = dto.amount,
            cryptocurrency = dto.cryptocurrency,
            cryptocurrencyAmount = dto.cryptocurrencyAmount,
            monthCount = dto.monthCount,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: TdApi.MessagePremiumGiftCode): MessagePremiumGiftCode {
        return MessagePremiumGiftCode(
            creatorId = dto.creatorId?.let { map(it) },
            text = map(dto.text),
            isFromGiveaway = dto.isFromGiveaway,
            isUnclaimed = dto.isUnclaimed,
            currency = dto.currency,
            amount = dto.amount,
            cryptocurrency = dto.cryptocurrency,
            cryptocurrencyAmount = dto.cryptocurrencyAmount,
            monthCount = dto.monthCount,
            sticker = dto.sticker?.let { map(it) },
            code = dto.code,
        )
    }

    fun map(dto: TdApi.MessageGiveawayCreated): MessageGiveawayCreated {
        return MessageGiveawayCreated(
            starCount = dto.starCount,
        )
    }

    fun map(dto: TdApi.MessageGiveaway): MessageGiveaway {
        return MessageGiveaway(
            parameters = map(dto.parameters),
            winnerCount = dto.winnerCount,
            prize = map(dto.prize),
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: TdApi.MessageGiveawayCompleted): MessageGiveawayCompleted {
        return MessageGiveawayCompleted(
            giveawayMessageId = dto.giveawayMessageId,
            winnerCount = dto.winnerCount,
            isStarGiveaway = dto.isStarGiveaway,
            unclaimedPrizeCount = dto.unclaimedPrizeCount,
        )
    }

    fun map(dto: TdApi.MessageGiveawayWinners): MessageGiveawayWinners {
        return MessageGiveawayWinners(
            boostedChatId = dto.boostedChatId,
            giveawayMessageId = dto.giveawayMessageId,
            additionalChatCount = dto.additionalChatCount,
            actualWinnersSelectionDate = dto.actualWinnersSelectionDate,
            onlyNewMembers = dto.onlyNewMembers,
            wasRefunded = dto.wasRefunded,
            prize = map(dto.prize),
            prizeDescription = dto.prizeDescription,
            winnerCount = dto.winnerCount,
            winnerUserIds = dto.winnerUserIds,
            unclaimedPrizeCount = dto.unclaimedPrizeCount,
        )
    }

    fun map(dto: TdApi.MessageGiftedStars): MessageGiftedStars {
        return MessageGiftedStars(
            gifterUserId = dto.gifterUserId,
            receiverUserId = dto.receiverUserId,
            currency = dto.currency,
            amount = dto.amount,
            cryptocurrency = dto.cryptocurrency,
            cryptocurrencyAmount = dto.cryptocurrencyAmount,
            starCount = dto.starCount,
            transactionId = dto.transactionId,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: TdApi.MessageGiveawayPrizeStars): MessageGiveawayPrizeStars {
        return MessageGiveawayPrizeStars(
            starCount = dto.starCount,
            transactionId = dto.transactionId,
            boostedChatId = dto.boostedChatId,
            giveawayMessageId = dto.giveawayMessageId,
            isUnclaimed = dto.isUnclaimed,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: TdApi.MessageGift): MessageGift {
        return MessageGift(
            gift = map(dto.gift),
            senderId = map(dto.senderId),
            receiverId = map(dto.receiverId),
            receivedGiftId = dto.receivedGiftId,
            text = map(dto.text),
            sellStarCount = dto.sellStarCount,
            prepaidUpgradeStarCount = dto.prepaidUpgradeStarCount,
            isPrivate = dto.isPrivate,
            isSaved = dto.isSaved,
            canBeUpgraded = dto.canBeUpgraded,
            wasConverted = dto.wasConverted,
            wasUpgraded = dto.wasUpgraded,
            wasRefunded = dto.wasRefunded,
            upgradedReceivedGiftId = dto.upgradedReceivedGiftId,
        )
    }

    fun map(dto: TdApi.MessageUpgradedGift): MessageUpgradedGift {
        return MessageUpgradedGift(
            gift = map(dto.gift),
            senderId = dto.senderId?.let { map(it) },
            receiverId = map(dto.receiverId),
            receivedGiftId = dto.receivedGiftId,
            isUpgrade = dto.isUpgrade,
            isSaved = dto.isSaved,
            canBeTransferred = dto.canBeTransferred,
            wasTransferred = dto.wasTransferred,
            lastResaleStarCount = dto.lastResaleStarCount,
            transferStarCount = dto.transferStarCount,
            nextTransferDate = dto.nextTransferDate,
            nextResaleDate = dto.nextResaleDate,
            exportDate = dto.exportDate,
        )
    }

    fun map(dto: TdApi.MessageRefundedUpgradedGift): MessageRefundedUpgradedGift {
        return MessageRefundedUpgradedGift(
            gift = map(dto.gift),
            senderId = map(dto.senderId),
            receiverId = map(dto.receiverId),
            isUpgrade = dto.isUpgrade,
        )
    }

    fun map(dto: TdApi.MessagePaidMessagesRefunded): MessagePaidMessagesRefunded {
        return MessagePaidMessagesRefunded(
            messageCount = dto.messageCount,
            starCount = dto.starCount,
        )
    }

    fun map(dto: TdApi.MessagePaidMessagePriceChanged): MessagePaidMessagePriceChanged {
        return MessagePaidMessagePriceChanged(
            paidMessageStarCount = dto.paidMessageStarCount,
        )
    }

    fun map(dto: TdApi.MessageDirectMessagePriceChanged): MessageDirectMessagePriceChanged {
        return MessageDirectMessagePriceChanged(
            isEnabled = dto.isEnabled,
            paidMessageStarCount = dto.paidMessageStarCount,
        )
    }

    fun map(dto: TdApi.MessageChecklistTasksDone): MessageChecklistTasksDone {
        return MessageChecklistTasksDone(
            checklistMessageId = dto.checklistMessageId,
            markedAsDoneTaskIds = dto.markedAsDoneTaskIds,
            markedAsNotDoneTaskIds = dto.markedAsNotDoneTaskIds,
        )
    }

    fun map(dto: TdApi.MessageChecklistTasksAdded): MessageChecklistTasksAdded {
        return MessageChecklistTasksAdded(
            checklistMessageId = dto.checklistMessageId,
            tasks = dto.tasks.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.MessageContactRegistered): MessageContactRegistered {
        return MessageContactRegistered()
    }

    fun map(dto: TdApi.MessageUsersShared): MessageUsersShared {
        return MessageUsersShared(
            users = dto.users.mapArray { map(it) },
            buttonId = dto.buttonId,
        )
    }

    fun map(dto: TdApi.MessageChatShared): MessageChatShared {
        return MessageChatShared(
            chat = map(dto.chat),
            buttonId = dto.buttonId,
        )
    }

    fun map(dto: TdApi.MessageBotWriteAccessAllowed): MessageBotWriteAccessAllowed {
        return MessageBotWriteAccessAllowed(
            reason = map(dto.reason),
        )
    }

    fun map(dto: TdApi.MessageWebAppDataSent): MessageWebAppDataSent {
        return MessageWebAppDataSent(
            buttonText = dto.buttonText,
        )
    }

    fun map(dto: TdApi.MessageWebAppDataReceived): MessageWebAppDataReceived {
        return MessageWebAppDataReceived(
            buttonText = dto.buttonText,
            data = dto.data,
        )
    }

    fun map(dto: TdApi.MessagePassportDataSent): MessagePassportDataSent {
        return MessagePassportDataSent(
            types = dto.types.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.MessagePassportDataReceived): MessagePassportDataReceived {
        return MessagePassportDataReceived(
            elements = dto.elements.mapArray { map(it) },
            credentials = map(dto.credentials),
        )
    }

    fun map(dto: TdApi.MessageProximityAlertTriggered): MessageProximityAlertTriggered {
        return MessageProximityAlertTriggered(
            travelerId = map(dto.travelerId),
            watcherId = map(dto.watcherId),
            distance = dto.distance,
        )
    }

    fun map(dto: TdApi.MessageUnsupported): MessageUnsupported {
        return MessageUnsupported()
    }

    fun map(dto: MessageContent): TdApi.MessageContent {
        when (dto) {
            is MessageText -> return map(dto)
            is MessageAnimation -> return map(dto)
            is MessageAudio -> return map(dto)
            is MessageDocument -> return map(dto)
            is MessagePaidMedia -> return map(dto)
            is MessagePhoto -> return map(dto)
            is MessageSticker -> return map(dto)
            is MessageVideo -> return map(dto)
            is MessageVideoNote -> return map(dto)
            is MessageVoiceNote -> return map(dto)
            is MessageExpiredPhoto -> return map(dto)
            is MessageExpiredVideo -> return map(dto)
            is MessageExpiredVideoNote -> return map(dto)
            is MessageExpiredVoiceNote -> return map(dto)
            is MessageLocation -> return map(dto)
            is MessageVenue -> return map(dto)
            is MessageContact -> return map(dto)
            is MessageAnimatedEmoji -> return map(dto)
            is MessageDice -> return map(dto)
            is MessageGame -> return map(dto)
            is MessagePoll -> return map(dto)
            is MessageStory -> return map(dto)
            is MessageChecklist -> return map(dto)
            is MessageInvoice -> return map(dto)
            is MessageCall -> return map(dto)
            is MessageGroupCall -> return map(dto)
            is MessageVideoChatScheduled -> return map(dto)
            is MessageVideoChatStarted -> return map(dto)
            is MessageVideoChatEnded -> return map(dto)
            is MessageInviteVideoChatParticipants -> return map(dto)
            is MessageBasicGroupChatCreate -> return map(dto)
            is MessageSupergroupChatCreate -> return map(dto)
            is MessageChatChangeTitle -> return map(dto)
            is MessageChatChangePhoto -> return map(dto)
            is MessageChatDeletePhoto -> return map(dto)
            is MessageChatAddMembers -> return map(dto)
            is MessageChatJoinByLink -> return map(dto)
            is MessageChatJoinByRequest -> return map(dto)
            is MessageChatDeleteMember -> return map(dto)
            is MessageChatUpgradeTo -> return map(dto)
            is MessageChatUpgradeFrom -> return map(dto)
            is MessagePinMessage -> return map(dto)
            is MessageScreenshotTaken -> return map(dto)
            is MessageChatSetBackground -> return map(dto)
            is MessageChatSetTheme -> return map(dto)
            is MessageChatSetMessageAutoDeleteTime -> return map(dto)
            is MessageChatBoost -> return map(dto)
            is MessageForumTopicCreated -> return map(dto)
            is MessageForumTopicEdited -> return map(dto)
            is MessageForumTopicIsClosedToggled -> return map(dto)
            is MessageForumTopicIsHiddenToggled -> return map(dto)
            is MessageSuggestProfilePhoto -> return map(dto)
            is MessageCustomServiceAction -> return map(dto)
            is MessageGameScore -> return map(dto)
            is MessagePaymentSuccessful -> return map(dto)
            is MessagePaymentSuccessfulBot -> return map(dto)
            is MessagePaymentRefunded -> return map(dto)
            is MessageGiftedPremium -> return map(dto)
            is MessagePremiumGiftCode -> return map(dto)
            is MessageGiveawayCreated -> return map(dto)
            is MessageGiveaway -> return map(dto)
            is MessageGiveawayCompleted -> return map(dto)
            is MessageGiveawayWinners -> return map(dto)
            is MessageGiftedStars -> return map(dto)
            is MessageGiveawayPrizeStars -> return map(dto)
            is MessageGift -> return map(dto)
            is MessageUpgradedGift -> return map(dto)
            is MessageRefundedUpgradedGift -> return map(dto)
            is MessagePaidMessagesRefunded -> return map(dto)
            is MessagePaidMessagePriceChanged -> return map(dto)
            is MessageDirectMessagePriceChanged -> return map(dto)
            is MessageChecklistTasksDone -> return map(dto)
            is MessageChecklistTasksAdded -> return map(dto)
            is MessageContactRegistered -> return map(dto)
            is MessageUsersShared -> return map(dto)
            is MessageChatShared -> return map(dto)
            is MessageBotWriteAccessAllowed -> return map(dto)
            is MessageWebAppDataSent -> return map(dto)
            is MessageWebAppDataReceived -> return map(dto)
            is MessagePassportDataSent -> return map(dto)
            is MessagePassportDataReceived -> return map(dto)
            is MessageProximityAlertTriggered -> return map(dto)
            is MessageUnsupported -> return map(dto)
        }
    }

    fun map(dto: MessageText): TdApi.MessageText {
        return TdApi.MessageText(
            text = map(dto.text),
            linkPreview = dto.linkPreview?.let { map(it) },
            linkPreviewOptions = dto.linkPreviewOptions?.let { map(it) },
        )
    }

    fun map(dto: MessageAnimation): TdApi.MessageAnimation {
        return TdApi.MessageAnimation(
            animation = map(dto.animation),
            caption = map(dto.caption),
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
            hasSpoiler = dto.hasSpoiler,
            isSecret = dto.isSecret,
        )
    }

    fun map(dto: MessageAudio): TdApi.MessageAudio {
        return TdApi.MessageAudio(
            audio = map(dto.audio),
            caption = map(dto.caption),
        )
    }

    fun map(dto: MessageDocument): TdApi.MessageDocument {
        return TdApi.MessageDocument(
            document = map(dto.document),
            caption = map(dto.caption),
        )
    }

    fun map(dto: MessagePaidMedia): TdApi.MessagePaidMedia {
        return TdApi.MessagePaidMedia(
            starCount = dto.starCount,
            media = dto.media.mapArray { map(it) },
            caption = map(dto.caption),
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
        )
    }

    fun map(dto: MessagePhoto): TdApi.MessagePhoto {
        return TdApi.MessagePhoto(
            photo = map(dto.photo),
            caption = map(dto.caption),
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
            hasSpoiler = dto.hasSpoiler,
            isSecret = dto.isSecret,
        )
    }

    fun map(dto: MessageSticker): TdApi.MessageSticker {
        return TdApi.MessageSticker(
            sticker = map(dto.sticker),
            isPremium = dto.isPremium,
        )
    }

    fun map(dto: MessageVideo): TdApi.MessageVideo {
        return TdApi.MessageVideo(
            video = map(dto.video),
            alternativeVideos = dto.alternativeVideos.mapArray { map(it) },
            storyboards = dto.storyboards.mapArray { map(it) },
            cover = dto.cover?.let { map(it) },
            startTimestamp = dto.startTimestamp,
            caption = map(dto.caption),
            showCaptionAboveMedia = dto.showCaptionAboveMedia,
            hasSpoiler = dto.hasSpoiler,
            isSecret = dto.isSecret,
        )
    }

    fun map(dto: MessageVideoNote): TdApi.MessageVideoNote {
        return TdApi.MessageVideoNote(
            videoNote = map(dto.videoNote),
            isViewed = dto.isViewed,
            isSecret = dto.isSecret,
        )
    }

    fun map(dto: MessageVoiceNote): TdApi.MessageVoiceNote {
        return TdApi.MessageVoiceNote(
            voiceNote = map(dto.voiceNote),
            caption = map(dto.caption),
            isListened = dto.isListened,
        )
    }

    fun map(dto: MessageExpiredPhoto): TdApi.MessageExpiredPhoto {
        return TdApi.MessageExpiredPhoto()
    }

    fun map(dto: MessageExpiredVideo): TdApi.MessageExpiredVideo {
        return TdApi.MessageExpiredVideo()
    }

    fun map(dto: MessageExpiredVideoNote): TdApi.MessageExpiredVideoNote {
        return TdApi.MessageExpiredVideoNote()
    }

    fun map(dto: MessageExpiredVoiceNote): TdApi.MessageExpiredVoiceNote {
        return TdApi.MessageExpiredVoiceNote()
    }

    fun map(dto: MessageLocation): TdApi.MessageLocation {
        return TdApi.MessageLocation(
            location = map(dto.location),
            livePeriod = dto.livePeriod,
            expiresIn = dto.expiresIn,
            heading = dto.heading,
            proximityAlertRadius = dto.proximityAlertRadius,
        )
    }

    fun map(dto: MessageVenue): TdApi.MessageVenue {
        return TdApi.MessageVenue(
            venue = map(dto.venue),
        )
    }

    fun map(dto: MessageContact): TdApi.MessageContact {
        return TdApi.MessageContact(
            contact = map(dto.contact),
        )
    }

    fun map(dto: MessageAnimatedEmoji): TdApi.MessageAnimatedEmoji {
        return TdApi.MessageAnimatedEmoji(
            animatedEmoji = map(dto.animatedEmoji),
            emoji = dto.emoji,
        )
    }

    fun map(dto: MessageDice): TdApi.MessageDice {
        return TdApi.MessageDice(
            initialState = dto.initialState?.let { map(it) },
            finalState = dto.finalState?.let { map(it) },
            emoji = dto.emoji,
            value = dto.value,
            successAnimationFrameNumber = dto.successAnimationFrameNumber,
        )
    }

    fun map(dto: MessageGame): TdApi.MessageGame {
        return TdApi.MessageGame(
            game = map(dto.game),
        )
    }

    fun map(dto: MessagePoll): TdApi.MessagePoll {
        return TdApi.MessagePoll(
            poll = map(dto.poll),
        )
    }

    fun map(dto: MessageStory): TdApi.MessageStory {
        return TdApi.MessageStory(
            storyPosterChatId = dto.storyPosterChatId,
            storyId = dto.storyId,
            viaMention = dto.viaMention,
        )
    }

    fun map(dto: MessageChecklist): TdApi.MessageChecklist {
        return TdApi.MessageChecklist(
            list = map(dto.list),
        )
    }

    fun map(dto: MessageInvoice): TdApi.MessageInvoice {
        return TdApi.MessageInvoice(
            productInfo = map(dto.productInfo),
            currency = dto.currency,
            totalAmount = dto.totalAmount,
            startParameter = dto.startParameter,
            isTest = dto.isTest,
            needShippingAddress = dto.needShippingAddress,
            receiptMessageId = dto.receiptMessageId,
            paidMedia = dto.paidMedia?.let { map(it) },
            paidMediaCaption = dto.paidMediaCaption?.let { map(it) },
        )
    }

    fun map(dto: MessageCall): TdApi.MessageCall {
        return TdApi.MessageCall(
            isVideo = dto.isVideo,
            discardReason = map(dto.discardReason),
            duration = dto.duration,
        )
    }

    fun map(dto: MessageGroupCall): TdApi.MessageGroupCall {
        return TdApi.MessageGroupCall(
            isActive = dto.isActive,
            wasMissed = dto.wasMissed,
            isVideo = dto.isVideo,
            duration = dto.duration,
            otherParticipantIds = dto.otherParticipantIds.mapArray { map(it) },
        )
    }

    fun map(dto: MessageVideoChatScheduled): TdApi.MessageVideoChatScheduled {
        return TdApi.MessageVideoChatScheduled(
            groupCallId = dto.groupCallId,
            startDate = dto.startDate,
        )
    }

    fun map(dto: MessageVideoChatStarted): TdApi.MessageVideoChatStarted {
        return TdApi.MessageVideoChatStarted(
            groupCallId = dto.groupCallId,
        )
    }

    fun map(dto: MessageVideoChatEnded): TdApi.MessageVideoChatEnded {
        return TdApi.MessageVideoChatEnded(
            duration = dto.duration,
        )
    }

    fun map(dto: MessageInviteVideoChatParticipants): TdApi.MessageInviteVideoChatParticipants {
        return TdApi.MessageInviteVideoChatParticipants(
            groupCallId = dto.groupCallId,
            userIds = dto.userIds,
        )
    }

    fun map(dto: MessageBasicGroupChatCreate): TdApi.MessageBasicGroupChatCreate {
        return TdApi.MessageBasicGroupChatCreate(
            title = dto.title,
            memberUserIds = dto.memberUserIds,
        )
    }

    fun map(dto: MessageSupergroupChatCreate): TdApi.MessageSupergroupChatCreate {
        return TdApi.MessageSupergroupChatCreate(
            title = dto.title,
        )
    }

    fun map(dto: MessageChatChangeTitle): TdApi.MessageChatChangeTitle {
        return TdApi.MessageChatChangeTitle(
            title = dto.title,
        )
    }

    fun map(dto: MessageChatChangePhoto): TdApi.MessageChatChangePhoto {
        return TdApi.MessageChatChangePhoto(
            photo = map(dto.photo),
        )
    }

    fun map(dto: MessageChatDeletePhoto): TdApi.MessageChatDeletePhoto {
        return TdApi.MessageChatDeletePhoto()
    }

    fun map(dto: MessageChatAddMembers): TdApi.MessageChatAddMembers {
        return TdApi.MessageChatAddMembers(
            memberUserIds = dto.memberUserIds,
        )
    }

    fun map(dto: MessageChatJoinByLink): TdApi.MessageChatJoinByLink {
        return TdApi.MessageChatJoinByLink()
    }

    fun map(dto: MessageChatJoinByRequest): TdApi.MessageChatJoinByRequest {
        return TdApi.MessageChatJoinByRequest()
    }

    fun map(dto: MessageChatDeleteMember): TdApi.MessageChatDeleteMember {
        return TdApi.MessageChatDeleteMember(
            userId = dto.userId,
        )
    }

    fun map(dto: MessageChatUpgradeTo): TdApi.MessageChatUpgradeTo {
        return TdApi.MessageChatUpgradeTo(
            supergroupId = dto.supergroupId,
        )
    }

    fun map(dto: MessageChatUpgradeFrom): TdApi.MessageChatUpgradeFrom {
        return TdApi.MessageChatUpgradeFrom(
            title = dto.title,
            basicGroupId = dto.basicGroupId,
        )
    }

    fun map(dto: MessagePinMessage): TdApi.MessagePinMessage {
        return TdApi.MessagePinMessage(
            messageId = dto.messageId,
        )
    }

    fun map(dto: MessageScreenshotTaken): TdApi.MessageScreenshotTaken {
        return TdApi.MessageScreenshotTaken()
    }

    fun map(dto: MessageChatSetBackground): TdApi.MessageChatSetBackground {
        return TdApi.MessageChatSetBackground(
            oldBackgroundMessageId = dto.oldBackgroundMessageId,
            background = map(dto.background),
            onlyForSelf = dto.onlyForSelf,
        )
    }

    fun map(dto: MessageChatSetTheme): TdApi.MessageChatSetTheme {
        return TdApi.MessageChatSetTheme(
            themeName = dto.themeName,
        )
    }

    fun map(dto: MessageChatSetMessageAutoDeleteTime): TdApi.MessageChatSetMessageAutoDeleteTime {
        return TdApi.MessageChatSetMessageAutoDeleteTime(
            messageAutoDeleteTime = dto.messageAutoDeleteTime,
            fromUserId = dto.fromUserId,
        )
    }

    fun map(dto: MessageChatBoost): TdApi.MessageChatBoost {
        return TdApi.MessageChatBoost(
            boostCount = dto.boostCount,
        )
    }

    fun map(dto: MessageForumTopicCreated): TdApi.MessageForumTopicCreated {
        return TdApi.MessageForumTopicCreated(
            name = dto.name,
            icon = map(dto.icon),
        )
    }

    fun map(dto: MessageForumTopicEdited): TdApi.MessageForumTopicEdited {
        return TdApi.MessageForumTopicEdited(
            name = dto.name,
            editIconCustomEmojiId = dto.editIconCustomEmojiId,
            iconCustomEmojiId = dto.iconCustomEmojiId,
        )
    }

    fun map(dto: MessageForumTopicIsClosedToggled): TdApi.MessageForumTopicIsClosedToggled {
        return TdApi.MessageForumTopicIsClosedToggled(
            isClosed = dto.isClosed,
        )
    }

    fun map(dto: MessageForumTopicIsHiddenToggled): TdApi.MessageForumTopicIsHiddenToggled {
        return TdApi.MessageForumTopicIsHiddenToggled(
            isHidden = dto.isHidden,
        )
    }

    fun map(dto: MessageSuggestProfilePhoto): TdApi.MessageSuggestProfilePhoto {
        return TdApi.MessageSuggestProfilePhoto(
            photo = map(dto.photo),
        )
    }

    fun map(dto: MessageCustomServiceAction): TdApi.MessageCustomServiceAction {
        return TdApi.MessageCustomServiceAction(
            text = dto.text,
        )
    }

    fun map(dto: MessageGameScore): TdApi.MessageGameScore {
        return TdApi.MessageGameScore(
            gameMessageId = dto.gameMessageId,
            gameId = dto.gameId,
            score = dto.score,
        )
    }

    fun map(dto: MessagePaymentSuccessful): TdApi.MessagePaymentSuccessful {
        return TdApi.MessagePaymentSuccessful(
            invoiceChatId = dto.invoiceChatId,
            invoiceMessageId = dto.invoiceMessageId,
            currency = dto.currency,
            totalAmount = dto.totalAmount,
            subscriptionUntilDate = dto.subscriptionUntilDate,
            isRecurring = dto.isRecurring,
            isFirstRecurring = dto.isFirstRecurring,
            invoiceName = dto.invoiceName,
        )
    }

    fun map(dto: MessagePaymentSuccessfulBot): TdApi.MessagePaymentSuccessfulBot {
        return TdApi.MessagePaymentSuccessfulBot(
            currency = dto.currency,
            totalAmount = dto.totalAmount,
            subscriptionUntilDate = dto.subscriptionUntilDate,
            isRecurring = dto.isRecurring,
            isFirstRecurring = dto.isFirstRecurring,
            invoicePayload = dto.invoicePayload,
            shippingOptionId = dto.shippingOptionId,
            orderInfo = dto.orderInfo?.let { map(it) },
            telegramPaymentChargeId = dto.telegramPaymentChargeId,
            providerPaymentChargeId = dto.providerPaymentChargeId,
        )
    }

    fun map(dto: MessagePaymentRefunded): TdApi.MessagePaymentRefunded {
        return TdApi.MessagePaymentRefunded(
            ownerId = map(dto.ownerId),
            currency = dto.currency,
            totalAmount = dto.totalAmount,
            invoicePayload = dto.invoicePayload,
            telegramPaymentChargeId = dto.telegramPaymentChargeId,
            providerPaymentChargeId = dto.providerPaymentChargeId,
        )
    }

    fun map(dto: MessageGiftedPremium): TdApi.MessageGiftedPremium {
        return TdApi.MessageGiftedPremium(
            gifterUserId = dto.gifterUserId,
            receiverUserId = dto.receiverUserId,
            text = map(dto.text),
            currency = dto.currency,
            amount = dto.amount,
            cryptocurrency = dto.cryptocurrency,
            cryptocurrencyAmount = dto.cryptocurrencyAmount,
            monthCount = dto.monthCount,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: MessagePremiumGiftCode): TdApi.MessagePremiumGiftCode {
        return TdApi.MessagePremiumGiftCode(
            creatorId = dto.creatorId?.let { map(it) },
            text = map(dto.text),
            isFromGiveaway = dto.isFromGiveaway,
            isUnclaimed = dto.isUnclaimed,
            currency = dto.currency,
            amount = dto.amount,
            cryptocurrency = dto.cryptocurrency,
            cryptocurrencyAmount = dto.cryptocurrencyAmount,
            monthCount = dto.monthCount,
            sticker = dto.sticker?.let { map(it) },
            code = dto.code,
        )
    }

    fun map(dto: MessageGiveawayCreated): TdApi.MessageGiveawayCreated {
        return TdApi.MessageGiveawayCreated(
            starCount = dto.starCount,
        )
    }

    fun map(dto: MessageGiveaway): TdApi.MessageGiveaway {
        return TdApi.MessageGiveaway(
            parameters = map(dto.parameters),
            winnerCount = dto.winnerCount,
            prize = map(dto.prize),
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: MessageGiveawayCompleted): TdApi.MessageGiveawayCompleted {
        return TdApi.MessageGiveawayCompleted(
            giveawayMessageId = dto.giveawayMessageId,
            winnerCount = dto.winnerCount,
            isStarGiveaway = dto.isStarGiveaway,
            unclaimedPrizeCount = dto.unclaimedPrizeCount,
        )
    }

    fun map(dto: MessageGiveawayWinners): TdApi.MessageGiveawayWinners {
        return TdApi.MessageGiveawayWinners(
            boostedChatId = dto.boostedChatId,
            giveawayMessageId = dto.giveawayMessageId,
            additionalChatCount = dto.additionalChatCount,
            actualWinnersSelectionDate = dto.actualWinnersSelectionDate,
            onlyNewMembers = dto.onlyNewMembers,
            wasRefunded = dto.wasRefunded,
            prize = map(dto.prize),
            prizeDescription = dto.prizeDescription,
            winnerCount = dto.winnerCount,
            winnerUserIds = dto.winnerUserIds,
            unclaimedPrizeCount = dto.unclaimedPrizeCount,
        )
    }

    fun map(dto: MessageGiftedStars): TdApi.MessageGiftedStars {
        return TdApi.MessageGiftedStars(
            gifterUserId = dto.gifterUserId,
            receiverUserId = dto.receiverUserId,
            currency = dto.currency,
            amount = dto.amount,
            cryptocurrency = dto.cryptocurrency,
            cryptocurrencyAmount = dto.cryptocurrencyAmount,
            starCount = dto.starCount,
            transactionId = dto.transactionId,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: MessageGiveawayPrizeStars): TdApi.MessageGiveawayPrizeStars {
        return TdApi.MessageGiveawayPrizeStars(
            starCount = dto.starCount,
            transactionId = dto.transactionId,
            boostedChatId = dto.boostedChatId,
            giveawayMessageId = dto.giveawayMessageId,
            isUnclaimed = dto.isUnclaimed,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: MessageGift): TdApi.MessageGift {
        return TdApi.MessageGift(
            gift = map(dto.gift),
            senderId = map(dto.senderId),
            receiverId = map(dto.receiverId),
            receivedGiftId = dto.receivedGiftId,
            text = map(dto.text),
            sellStarCount = dto.sellStarCount,
            prepaidUpgradeStarCount = dto.prepaidUpgradeStarCount,
            isPrivate = dto.isPrivate,
            isSaved = dto.isSaved,
            canBeUpgraded = dto.canBeUpgraded,
            wasConverted = dto.wasConverted,
            wasUpgraded = dto.wasUpgraded,
            wasRefunded = dto.wasRefunded,
            upgradedReceivedGiftId = dto.upgradedReceivedGiftId,
        )
    }

    fun map(dto: MessageUpgradedGift): TdApi.MessageUpgradedGift {
        return TdApi.MessageUpgradedGift(
            gift = map(dto.gift),
            senderId = dto.senderId?.let { map(it) },
            receiverId = map(dto.receiverId),
            receivedGiftId = dto.receivedGiftId,
            isUpgrade = dto.isUpgrade,
            isSaved = dto.isSaved,
            canBeTransferred = dto.canBeTransferred,
            wasTransferred = dto.wasTransferred,
            lastResaleStarCount = dto.lastResaleStarCount,
            transferStarCount = dto.transferStarCount,
            nextTransferDate = dto.nextTransferDate,
            nextResaleDate = dto.nextResaleDate,
            exportDate = dto.exportDate,
        )
    }

    fun map(dto: MessageRefundedUpgradedGift): TdApi.MessageRefundedUpgradedGift {
        return TdApi.MessageRefundedUpgradedGift(
            gift = map(dto.gift),
            senderId = map(dto.senderId),
            receiverId = map(dto.receiverId),
            isUpgrade = dto.isUpgrade,
        )
    }

    fun map(dto: MessagePaidMessagesRefunded): TdApi.MessagePaidMessagesRefunded {
        return TdApi.MessagePaidMessagesRefunded(
            messageCount = dto.messageCount,
            starCount = dto.starCount,
        )
    }

    fun map(dto: MessagePaidMessagePriceChanged): TdApi.MessagePaidMessagePriceChanged {
        return TdApi.MessagePaidMessagePriceChanged(
            paidMessageStarCount = dto.paidMessageStarCount,
        )
    }

    fun map(dto: MessageDirectMessagePriceChanged): TdApi.MessageDirectMessagePriceChanged {
        return TdApi.MessageDirectMessagePriceChanged(
            isEnabled = dto.isEnabled,
            paidMessageStarCount = dto.paidMessageStarCount,
        )
    }

    fun map(dto: MessageChecklistTasksDone): TdApi.MessageChecklistTasksDone {
        return TdApi.MessageChecklistTasksDone(
            checklistMessageId = dto.checklistMessageId,
            markedAsDoneTaskIds = dto.markedAsDoneTaskIds,
            markedAsNotDoneTaskIds = dto.markedAsNotDoneTaskIds,
        )
    }

    fun map(dto: MessageChecklistTasksAdded): TdApi.MessageChecklistTasksAdded {
        return TdApi.MessageChecklistTasksAdded(
            checklistMessageId = dto.checklistMessageId,
            tasks = dto.tasks.mapArray { map(it) },
        )
    }

    fun map(dto: MessageContactRegistered): TdApi.MessageContactRegistered {
        return TdApi.MessageContactRegistered()
    }

    fun map(dto: MessageUsersShared): TdApi.MessageUsersShared {
        return TdApi.MessageUsersShared(
            users = dto.users.mapArray { map(it) },
            buttonId = dto.buttonId,
        )
    }

    fun map(dto: MessageChatShared): TdApi.MessageChatShared {
        return TdApi.MessageChatShared(
            chat = map(dto.chat),
            buttonId = dto.buttonId,
        )
    }

    fun map(dto: MessageBotWriteAccessAllowed): TdApi.MessageBotWriteAccessAllowed {
        return TdApi.MessageBotWriteAccessAllowed(
            reason = map(dto.reason),
        )
    }

    fun map(dto: MessageWebAppDataSent): TdApi.MessageWebAppDataSent {
        return TdApi.MessageWebAppDataSent(
            buttonText = dto.buttonText,
        )
    }

    fun map(dto: MessageWebAppDataReceived): TdApi.MessageWebAppDataReceived {
        return TdApi.MessageWebAppDataReceived(
            buttonText = dto.buttonText,
            data = dto.data,
        )
    }

    fun map(dto: MessagePassportDataSent): TdApi.MessagePassportDataSent {
        return TdApi.MessagePassportDataSent(
            types = dto.types.mapArray { map(it) },
        )
    }

    fun map(dto: MessagePassportDataReceived): TdApi.MessagePassportDataReceived {
        return TdApi.MessagePassportDataReceived(
            elements = dto.elements.mapArray { map(it) },
            credentials = map(dto.credentials),
        )
    }

    fun map(dto: MessageProximityAlertTriggered): TdApi.MessageProximityAlertTriggered {
        return TdApi.MessageProximityAlertTriggered(
            travelerId = map(dto.travelerId),
            watcherId = map(dto.watcherId),
            distance = dto.distance,
        )
    }

    fun map(dto: MessageUnsupported): TdApi.MessageUnsupported {
        return TdApi.MessageUnsupported()
    }

    fun map(dto: TdApi.MessageCopyOptions): MessageCopyOptions {
        return MessageCopyOptions(
            sendCopy = dto.sendCopy,
            replaceCaption = dto.replaceCaption,
            newCaption = dto.newCaption?.let { map(it) },
            newShowCaptionAboveMedia = dto.newShowCaptionAboveMedia,
        )
    }

    fun map(dto: MessageCopyOptions): TdApi.MessageCopyOptions {
        return TdApi.MessageCopyOptions(
            sendCopy = dto.sendCopy,
            replaceCaption = dto.replaceCaption,
            newCaption = dto.newCaption?.let { map(it) },
            newShowCaptionAboveMedia = dto.newShowCaptionAboveMedia,
        )
    }

    fun map(dto: TdApi.MessageEffect): MessageEffect {
        return MessageEffect(
            id = dto.id,
            staticIcon = dto.staticIcon?.let { map(it) },
            emoji = dto.emoji,
            isPremium = dto.isPremium,
            type = map(dto.type),
        )
    }

    fun map(dto: MessageEffect): TdApi.MessageEffect {
        return TdApi.MessageEffect(
            id = dto.id,
            staticIcon = dto.staticIcon?.let { map(it) },
            emoji = dto.emoji,
            isPremium = dto.isPremium,
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.MessageEffectType): MessageEffectType {
        when (dto) {
            is TdApi.MessageEffectTypeEmojiReaction -> return map(dto)
            is TdApi.MessageEffectTypePremiumSticker -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.MessageEffectTypeEmojiReaction): MessageEffectTypeEmojiReaction {
        return MessageEffectTypeEmojiReaction(
            selectAnimation = map(dto.selectAnimation),
            effectAnimation = map(dto.effectAnimation),
        )
    }

    fun map(dto: TdApi.MessageEffectTypePremiumSticker): MessageEffectTypePremiumSticker {
        return MessageEffectTypePremiumSticker(
            sticker = map(dto.sticker),
        )
    }

    fun map(dto: MessageEffectType): TdApi.MessageEffectType {
        when (dto) {
            is MessageEffectTypeEmojiReaction -> return map(dto)
            is MessageEffectTypePremiumSticker -> return map(dto)
        }
    }

    fun map(dto: MessageEffectTypeEmojiReaction): TdApi.MessageEffectTypeEmojiReaction {
        return TdApi.MessageEffectTypeEmojiReaction(
            selectAnimation = map(dto.selectAnimation),
            effectAnimation = map(dto.effectAnimation),
        )
    }

    fun map(dto: MessageEffectTypePremiumSticker): TdApi.MessageEffectTypePremiumSticker {
        return TdApi.MessageEffectTypePremiumSticker(
            sticker = map(dto.sticker),
        )
    }

    fun map(dto: TdApi.MessageFileType): MessageFileType {
        when (dto) {
            is TdApi.MessageFileTypePrivate -> return map(dto)
            is TdApi.MessageFileTypeGroup -> return map(dto)
            is TdApi.MessageFileTypeUnknown -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.MessageFileTypePrivate): MessageFileTypePrivate {
        return MessageFileTypePrivate(
            name = dto.name,
        )
    }

    fun map(dto: TdApi.MessageFileTypeGroup): MessageFileTypeGroup {
        return MessageFileTypeGroup(
            title = dto.title,
        )
    }

    fun map(dto: TdApi.MessageFileTypeUnknown): MessageFileTypeUnknown {
        return MessageFileTypeUnknown()
    }

    fun map(dto: MessageFileType): TdApi.MessageFileType {
        when (dto) {
            is MessageFileTypePrivate -> return map(dto)
            is MessageFileTypeGroup -> return map(dto)
            is MessageFileTypeUnknown -> return map(dto)
        }
    }

    fun map(dto: MessageFileTypePrivate): TdApi.MessageFileTypePrivate {
        return TdApi.MessageFileTypePrivate(
            name = dto.name,
        )
    }

    fun map(dto: MessageFileTypeGroup): TdApi.MessageFileTypeGroup {
        return TdApi.MessageFileTypeGroup(
            title = dto.title,
        )
    }

    fun map(dto: MessageFileTypeUnknown): TdApi.MessageFileTypeUnknown {
        return TdApi.MessageFileTypeUnknown()
    }

    fun map(dto: TdApi.MessageForwardInfo): MessageForwardInfo {
        return MessageForwardInfo(
            origin = map(dto.origin),
            date = dto.date,
            source = dto.source?.let { map(it) },
            publicServiceAnnouncementType = dto.publicServiceAnnouncementType,
        )
    }

    fun map(dto: MessageForwardInfo): TdApi.MessageForwardInfo {
        return TdApi.MessageForwardInfo(
            origin = map(dto.origin),
            date = dto.date,
            source = dto.source?.let { map(it) },
            publicServiceAnnouncementType = dto.publicServiceAnnouncementType,
        )
    }

    fun map(dto: TdApi.MessageImportInfo): MessageImportInfo {
        return MessageImportInfo(
            senderName = dto.senderName,
            date = dto.date,
        )
    }

    fun map(dto: MessageImportInfo): TdApi.MessageImportInfo {
        return TdApi.MessageImportInfo(
            senderName = dto.senderName,
            date = dto.date,
        )
    }

    fun map(dto: TdApi.MessageInteractionInfo): MessageInteractionInfo {
        return MessageInteractionInfo(
            viewCount = dto.viewCount,
            forwardCount = dto.forwardCount,
            replyInfo = dto.replyInfo?.let { map(it) },
            reactions = dto.reactions?.let { map(it) },
        )
    }

    fun map(dto: MessageInteractionInfo): TdApi.MessageInteractionInfo {
        return TdApi.MessageInteractionInfo(
            viewCount = dto.viewCount,
            forwardCount = dto.forwardCount,
            replyInfo = dto.replyInfo?.let { map(it) },
            reactions = dto.reactions?.let { map(it) },
        )
    }

    fun map(dto: TdApi.MessageLink): MessageLink {
        return MessageLink(
            link = dto.link,
            isPublic = dto.isPublic,
        )
    }

    fun map(dto: MessageLink): TdApi.MessageLink {
        return TdApi.MessageLink(
            link = dto.link,
            isPublic = dto.isPublic,
        )
    }

    fun map(dto: TdApi.MessageLinkInfo): MessageLinkInfo {
        return MessageLinkInfo(
            isPublic = dto.isPublic,
            chatId = dto.chatId,
            messageThreadId = dto.messageThreadId,
            message = dto.message?.let { map(it) },
            mediaTimestamp = dto.mediaTimestamp,
            forAlbum = dto.forAlbum,
        )
    }

    fun map(dto: MessageLinkInfo): TdApi.MessageLinkInfo {
        return TdApi.MessageLinkInfo(
            isPublic = dto.isPublic,
            chatId = dto.chatId,
            messageThreadId = dto.messageThreadId,
            message = dto.message?.let { map(it) },
            mediaTimestamp = dto.mediaTimestamp,
            forAlbum = dto.forAlbum,
        )
    }

    fun map(dto: TdApi.MessageOrigin): MessageOrigin {
        when (dto) {
            is TdApi.MessageOriginUser -> return map(dto)
            is TdApi.MessageOriginHiddenUser -> return map(dto)
            is TdApi.MessageOriginChat -> return map(dto)
            is TdApi.MessageOriginChannel -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.MessageOriginUser): MessageOriginUser {
        return MessageOriginUser(
            senderUserId = dto.senderUserId,
        )
    }

    fun map(dto: TdApi.MessageOriginHiddenUser): MessageOriginHiddenUser {
        return MessageOriginHiddenUser(
            senderName = dto.senderName,
        )
    }

    fun map(dto: TdApi.MessageOriginChat): MessageOriginChat {
        return MessageOriginChat(
            senderChatId = dto.senderChatId,
            authorSignature = dto.authorSignature,
        )
    }

    fun map(dto: TdApi.MessageOriginChannel): MessageOriginChannel {
        return MessageOriginChannel(
            chatId = dto.chatId,
            messageId = dto.messageId,
            authorSignature = dto.authorSignature,
        )
    }

    fun map(dto: MessageOrigin): TdApi.MessageOrigin {
        when (dto) {
            is MessageOriginUser -> return map(dto)
            is MessageOriginHiddenUser -> return map(dto)
            is MessageOriginChat -> return map(dto)
            is MessageOriginChannel -> return map(dto)
        }
    }

    fun map(dto: MessageOriginUser): TdApi.MessageOriginUser {
        return TdApi.MessageOriginUser(
            senderUserId = dto.senderUserId,
        )
    }

    fun map(dto: MessageOriginHiddenUser): TdApi.MessageOriginHiddenUser {
        return TdApi.MessageOriginHiddenUser(
            senderName = dto.senderName,
        )
    }

    fun map(dto: MessageOriginChat): TdApi.MessageOriginChat {
        return TdApi.MessageOriginChat(
            senderChatId = dto.senderChatId,
            authorSignature = dto.authorSignature,
        )
    }

    fun map(dto: MessageOriginChannel): TdApi.MessageOriginChannel {
        return TdApi.MessageOriginChannel(
            chatId = dto.chatId,
            messageId = dto.messageId,
            authorSignature = dto.authorSignature,
        )
    }

    fun map(dto: TdApi.MessagePosition): MessagePosition {
        return MessagePosition(
            position = dto.position,
            messageId = dto.messageId,
            date = dto.date,
        )
    }

    fun map(dto: MessagePosition): TdApi.MessagePosition {
        return TdApi.MessagePosition(
            position = dto.position,
            messageId = dto.messageId,
            date = dto.date,
        )
    }

    fun map(dto: TdApi.MessagePositions): MessagePositions {
        return MessagePositions(
            totalCount = dto.totalCount,
            positions = dto.positions.mapArray { map(it) },
        )
    }

    fun map(dto: MessagePositions): TdApi.MessagePositions {
        return TdApi.MessagePositions(
            totalCount = dto.totalCount,
            positions = dto.positions.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.MessageProperties): MessageProperties {
        return MessageProperties(
            canAddTasks = dto.canAddTasks,
            canBeCopied = dto.canBeCopied,
            canBeCopiedToSecretChat = dto.canBeCopiedToSecretChat,
            canBeDeletedOnlyForSelf = dto.canBeDeletedOnlyForSelf,
            canBeDeletedForAllUsers = dto.canBeDeletedForAllUsers,
            canBeEdited = dto.canBeEdited,
            canBeForwarded = dto.canBeForwarded,
            canBePaid = dto.canBePaid,
            canBePinned = dto.canBePinned,
            canBeReplied = dto.canBeReplied,
            canBeRepliedInAnotherChat = dto.canBeRepliedInAnotherChat,
            canBeSaved = dto.canBeSaved,
            canBeSharedInStory = dto.canBeSharedInStory,
            canEditMedia = dto.canEditMedia,
            canEditSchedulingState = dto.canEditSchedulingState,
            canGetAuthor = dto.canGetAuthor,
            canGetEmbeddingCode = dto.canGetEmbeddingCode,
            canGetLink = dto.canGetLink,
            canGetMediaTimestampLinks = dto.canGetMediaTimestampLinks,
            canGetMessageThread = dto.canGetMessageThread,
            canGetReadDate = dto.canGetReadDate,
            canGetStatistics = dto.canGetStatistics,
            canGetVideoAdvertisements = dto.canGetVideoAdvertisements,
            canGetViewers = dto.canGetViewers,
            canMarkTasksAsDone = dto.canMarkTasksAsDone,
            canRecognizeSpeech = dto.canRecognizeSpeech,
            canReportChat = dto.canReportChat,
            canReportReactions = dto.canReportReactions,
            canReportSupergroupSpam = dto.canReportSupergroupSpam,
            canSetFactCheck = dto.canSetFactCheck,
            needShowStatistics = dto.needShowStatistics,
        )
    }

    fun map(dto: MessageProperties): TdApi.MessageProperties {
        return TdApi.MessageProperties(
            canAddTasks = dto.canAddTasks,
            canBeCopied = dto.canBeCopied,
            canBeCopiedToSecretChat = dto.canBeCopiedToSecretChat,
            canBeDeletedOnlyForSelf = dto.canBeDeletedOnlyForSelf,
            canBeDeletedForAllUsers = dto.canBeDeletedForAllUsers,
            canBeEdited = dto.canBeEdited,
            canBeForwarded = dto.canBeForwarded,
            canBePaid = dto.canBePaid,
            canBePinned = dto.canBePinned,
            canBeReplied = dto.canBeReplied,
            canBeRepliedInAnotherChat = dto.canBeRepliedInAnotherChat,
            canBeSaved = dto.canBeSaved,
            canBeSharedInStory = dto.canBeSharedInStory,
            canEditMedia = dto.canEditMedia,
            canEditSchedulingState = dto.canEditSchedulingState,
            canGetAuthor = dto.canGetAuthor,
            canGetEmbeddingCode = dto.canGetEmbeddingCode,
            canGetLink = dto.canGetLink,
            canGetMediaTimestampLinks = dto.canGetMediaTimestampLinks,
            canGetMessageThread = dto.canGetMessageThread,
            canGetReadDate = dto.canGetReadDate,
            canGetStatistics = dto.canGetStatistics,
            canGetVideoAdvertisements = dto.canGetVideoAdvertisements,
            canGetViewers = dto.canGetViewers,
            canMarkTasksAsDone = dto.canMarkTasksAsDone,
            canRecognizeSpeech = dto.canRecognizeSpeech,
            canReportChat = dto.canReportChat,
            canReportReactions = dto.canReportReactions,
            canReportSupergroupSpam = dto.canReportSupergroupSpam,
            canSetFactCheck = dto.canSetFactCheck,
            needShowStatistics = dto.needShowStatistics,
        )
    }

    fun map(dto: TdApi.MessageReaction): MessageReaction {
        return MessageReaction(
            type = map(dto.type),
            totalCount = dto.totalCount,
            isChosen = dto.isChosen,
            usedSenderId = dto.usedSenderId?.let { map(it) },
            recentSenderIds = dto.recentSenderIds.mapArray { map(it) },
        )
    }

    fun map(dto: MessageReaction): TdApi.MessageReaction {
        return TdApi.MessageReaction(
            type = map(dto.type),
            totalCount = dto.totalCount,
            isChosen = dto.isChosen,
            usedSenderId = dto.usedSenderId?.let { map(it) },
            recentSenderIds = dto.recentSenderIds.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.MessageReactions): MessageReactions {
        return MessageReactions(
            reactions = dto.reactions.mapArray { map(it) },
            areTags = dto.areTags,
            paidReactors = dto.paidReactors.mapArray { map(it) },
            canGetAddedReactions = dto.canGetAddedReactions,
        )
    }

    fun map(dto: MessageReactions): TdApi.MessageReactions {
        return TdApi.MessageReactions(
            reactions = dto.reactions.mapArray { map(it) },
            areTags = dto.areTags,
            paidReactors = dto.paidReactors.mapArray { map(it) },
            canGetAddedReactions = dto.canGetAddedReactions,
        )
    }

    fun map(dto: TdApi.MessageReadDate): MessageReadDate {
        when (dto) {
            is TdApi.MessageReadDateRead -> return map(dto)
            is TdApi.MessageReadDateUnread -> return map(dto)
            is TdApi.MessageReadDateTooOld -> return map(dto)
            is TdApi.MessageReadDateUserPrivacyRestricted -> return map(dto)
            is TdApi.MessageReadDateMyPrivacyRestricted -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.MessageReadDateRead): MessageReadDateRead {
        return MessageReadDateRead(
            readDate = dto.readDate,
        )
    }

    fun map(dto: TdApi.MessageReadDateUnread): MessageReadDateUnread {
        return MessageReadDateUnread()
    }

    fun map(dto: TdApi.MessageReadDateTooOld): MessageReadDateTooOld {
        return MessageReadDateTooOld()
    }

    fun map(dto: TdApi.MessageReadDateUserPrivacyRestricted): MessageReadDateUserPrivacyRestricted {
        return MessageReadDateUserPrivacyRestricted()
    }

    fun map(dto: TdApi.MessageReadDateMyPrivacyRestricted): MessageReadDateMyPrivacyRestricted {
        return MessageReadDateMyPrivacyRestricted()
    }

    fun map(dto: MessageReadDate): TdApi.MessageReadDate {
        when (dto) {
            is MessageReadDateRead -> return map(dto)
            is MessageReadDateUnread -> return map(dto)
            is MessageReadDateTooOld -> return map(dto)
            is MessageReadDateUserPrivacyRestricted -> return map(dto)
            is MessageReadDateMyPrivacyRestricted -> return map(dto)
        }
    }

    fun map(dto: MessageReadDateRead): TdApi.MessageReadDateRead {
        return TdApi.MessageReadDateRead(
            readDate = dto.readDate,
        )
    }

    fun map(dto: MessageReadDateUnread): TdApi.MessageReadDateUnread {
        return TdApi.MessageReadDateUnread()
    }

    fun map(dto: MessageReadDateTooOld): TdApi.MessageReadDateTooOld {
        return TdApi.MessageReadDateTooOld()
    }

    fun map(dto: MessageReadDateUserPrivacyRestricted): TdApi.MessageReadDateUserPrivacyRestricted {
        return TdApi.MessageReadDateUserPrivacyRestricted()
    }

    fun map(dto: MessageReadDateMyPrivacyRestricted): TdApi.MessageReadDateMyPrivacyRestricted {
        return TdApi.MessageReadDateMyPrivacyRestricted()
    }

    fun map(dto: TdApi.MessageReplyInfo): MessageReplyInfo {
        return MessageReplyInfo(
            replyCount = dto.replyCount,
            recentReplierIds = dto.recentReplierIds.mapArray { map(it) },
            lastReadInboxMessageId = dto.lastReadInboxMessageId,
            lastReadOutboxMessageId = dto.lastReadOutboxMessageId,
            lastMessageId = dto.lastMessageId,
        )
    }

    fun map(dto: MessageReplyInfo): TdApi.MessageReplyInfo {
        return TdApi.MessageReplyInfo(
            replyCount = dto.replyCount,
            recentReplierIds = dto.recentReplierIds.mapArray { map(it) },
            lastReadInboxMessageId = dto.lastReadInboxMessageId,
            lastReadOutboxMessageId = dto.lastReadOutboxMessageId,
            lastMessageId = dto.lastMessageId,
        )
    }

    fun map(dto: TdApi.MessageReplyTo): MessageReplyTo {
        when (dto) {
            is TdApi.MessageReplyToMessage -> return map(dto)
            is TdApi.MessageReplyToStory -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.MessageReplyToMessage): MessageReplyToMessage {
        return MessageReplyToMessage(
            chatId = dto.chatId,
            messageId = dto.messageId,
            quote = dto.quote?.let { map(it) },
            origin = dto.origin?.let { map(it) },
            originSendDate = dto.originSendDate,
            content = dto.content?.let { map(it) },
        )
    }

    fun map(dto: TdApi.MessageReplyToStory): MessageReplyToStory {
        return MessageReplyToStory(
            storyPosterChatId = dto.storyPosterChatId,
            storyId = dto.storyId,
        )
    }

    fun map(dto: MessageReplyTo): TdApi.MessageReplyTo {
        when (dto) {
            is MessageReplyToMessage -> return map(dto)
            is MessageReplyToStory -> return map(dto)
        }
    }

    fun map(dto: MessageReplyToMessage): TdApi.MessageReplyToMessage {
        return TdApi.MessageReplyToMessage(
            chatId = dto.chatId,
            messageId = dto.messageId,
            quote = dto.quote?.let { map(it) },
            origin = dto.origin?.let { map(it) },
            originSendDate = dto.originSendDate,
            content = dto.content?.let { map(it) },
        )
    }

    fun map(dto: MessageReplyToStory): TdApi.MessageReplyToStory {
        return TdApi.MessageReplyToStory(
            storyPosterChatId = dto.storyPosterChatId,
            storyId = dto.storyId,
        )
    }

    fun map(dto: TdApi.MessageSchedulingState): MessageSchedulingState {
        when (dto) {
            is TdApi.MessageSchedulingStateSendAtDate -> return map(dto)
            is TdApi.MessageSchedulingStateSendWhenOnline -> return map(dto)
            is TdApi.MessageSchedulingStateSendWhenVideoProcessed -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.MessageSchedulingStateSendAtDate): MessageSchedulingStateSendAtDate {
        return MessageSchedulingStateSendAtDate(
            sendDate = dto.sendDate,
        )
    }

    fun map(dto: TdApi.MessageSchedulingStateSendWhenOnline): MessageSchedulingStateSendWhenOnline {
        return MessageSchedulingStateSendWhenOnline()
    }

    fun map(dto: TdApi.MessageSchedulingStateSendWhenVideoProcessed): MessageSchedulingStateSendWhenVideoProcessed {
        return MessageSchedulingStateSendWhenVideoProcessed(
            sendDate = dto.sendDate,
        )
    }

    fun map(dto: MessageSchedulingState): TdApi.MessageSchedulingState {
        when (dto) {
            is MessageSchedulingStateSendAtDate -> return map(dto)
            is MessageSchedulingStateSendWhenOnline -> return map(dto)
            is MessageSchedulingStateSendWhenVideoProcessed -> return map(dto)
        }
    }

    fun map(dto: MessageSchedulingStateSendAtDate): TdApi.MessageSchedulingStateSendAtDate {
        return TdApi.MessageSchedulingStateSendAtDate(
            sendDate = dto.sendDate,
        )
    }

    fun map(dto: MessageSchedulingStateSendWhenOnline): TdApi.MessageSchedulingStateSendWhenOnline {
        return TdApi.MessageSchedulingStateSendWhenOnline()
    }

    fun map(dto: MessageSchedulingStateSendWhenVideoProcessed): TdApi.MessageSchedulingStateSendWhenVideoProcessed {
        return TdApi.MessageSchedulingStateSendWhenVideoProcessed(
            sendDate = dto.sendDate,
        )
    }

    fun map(dto: TdApi.MessageSelfDestructType): MessageSelfDestructType {
        when (dto) {
            is TdApi.MessageSelfDestructTypeTimer -> return map(dto)
            is TdApi.MessageSelfDestructTypeImmediately -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.MessageSelfDestructTypeTimer): MessageSelfDestructTypeTimer {
        return MessageSelfDestructTypeTimer(
            selfDestructTime = dto.selfDestructTime,
        )
    }

    fun map(dto: TdApi.MessageSelfDestructTypeImmediately): MessageSelfDestructTypeImmediately {
        return MessageSelfDestructTypeImmediately()
    }

    fun map(dto: MessageSelfDestructType): TdApi.MessageSelfDestructType {
        when (dto) {
            is MessageSelfDestructTypeTimer -> return map(dto)
            is MessageSelfDestructTypeImmediately -> return map(dto)
        }
    }

    fun map(dto: MessageSelfDestructTypeTimer): TdApi.MessageSelfDestructTypeTimer {
        return TdApi.MessageSelfDestructTypeTimer(
            selfDestructTime = dto.selfDestructTime,
        )
    }

    fun map(dto: MessageSelfDestructTypeImmediately): TdApi.MessageSelfDestructTypeImmediately {
        return TdApi.MessageSelfDestructTypeImmediately()
    }

    fun map(dto: TdApi.MessageSendOptions): MessageSendOptions {
        return MessageSendOptions(
            directMessagesChatTopicId = dto.directMessagesChatTopicId,
            disableNotification = dto.disableNotification,
            fromBackground = dto.fromBackground,
            protectContent = dto.protectContent,
            allowPaidBroadcast = dto.allowPaidBroadcast,
            paidMessageStarCount = dto.paidMessageStarCount,
            updateOrderOfInstalledStickerSets = dto.updateOrderOfInstalledStickerSets,
            schedulingState = dto.schedulingState?.let { map(it) },
            effectId = dto.effectId,
            sendingId = dto.sendingId,
            onlyPreview = dto.onlyPreview,
        )
    }

    fun map(dto: MessageSendOptions): TdApi.MessageSendOptions {
        return TdApi.MessageSendOptions(
            directMessagesChatTopicId = dto.directMessagesChatTopicId,
            disableNotification = dto.disableNotification,
            fromBackground = dto.fromBackground,
            protectContent = dto.protectContent,
            allowPaidBroadcast = dto.allowPaidBroadcast,
            paidMessageStarCount = dto.paidMessageStarCount,
            updateOrderOfInstalledStickerSets = dto.updateOrderOfInstalledStickerSets,
            schedulingState = dto.schedulingState?.let { map(it) },
            effectId = dto.effectId,
            sendingId = dto.sendingId,
            onlyPreview = dto.onlyPreview,
        )
    }

    fun map(dto: TdApi.MessageSender): MessageSender {
        when (dto) {
            is TdApi.MessageSenderUser -> return map(dto)
            is TdApi.MessageSenderChat -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.MessageSenderUser): MessageSenderUser {
        return MessageSenderUser(
            userId = dto.userId,
        )
    }

    fun map(dto: TdApi.MessageSenderChat): MessageSenderChat {
        return MessageSenderChat(
            chatId = dto.chatId,
        )
    }

    fun map(dto: MessageSender): TdApi.MessageSender {
        when (dto) {
            is MessageSenderUser -> return map(dto)
            is MessageSenderChat -> return map(dto)
        }
    }

    fun map(dto: MessageSenderUser): TdApi.MessageSenderUser {
        return TdApi.MessageSenderUser(
            userId = dto.userId,
        )
    }

    fun map(dto: MessageSenderChat): TdApi.MessageSenderChat {
        return TdApi.MessageSenderChat(
            chatId = dto.chatId,
        )
    }

    fun map(dto: TdApi.MessageSenders): MessageSenders {
        return MessageSenders(
            totalCount = dto.totalCount,
            senders = dto.senders.mapArray { map(it) },
        )
    }

    fun map(dto: MessageSenders): TdApi.MessageSenders {
        return TdApi.MessageSenders(
            totalCount = dto.totalCount,
            senders = dto.senders.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.MessageSendingState): MessageSendingState {
        when (dto) {
            is TdApi.MessageSendingStatePending -> return map(dto)
            is TdApi.MessageSendingStateFailed -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.MessageSendingStatePending): MessageSendingStatePending {
        return MessageSendingStatePending(
            sendingId = dto.sendingId,
        )
    }

    fun map(dto: TdApi.MessageSendingStateFailed): MessageSendingStateFailed {
        return MessageSendingStateFailed(
            error = map(dto.error),
            canRetry = dto.canRetry,
            needAnotherSender = dto.needAnotherSender,
            needAnotherReplyQuote = dto.needAnotherReplyQuote,
            needDropReply = dto.needDropReply,
            requiredPaidMessageStarCount = dto.requiredPaidMessageStarCount,
            retryAfter = dto.retryAfter,
        )
    }

    fun map(dto: MessageSendingState): TdApi.MessageSendingState {
        when (dto) {
            is MessageSendingStatePending -> return map(dto)
            is MessageSendingStateFailed -> return map(dto)
        }
    }

    fun map(dto: MessageSendingStatePending): TdApi.MessageSendingStatePending {
        return TdApi.MessageSendingStatePending(
            sendingId = dto.sendingId,
        )
    }

    fun map(dto: MessageSendingStateFailed): TdApi.MessageSendingStateFailed {
        return TdApi.MessageSendingStateFailed(
            error = map(dto.error),
            canRetry = dto.canRetry,
            needAnotherSender = dto.needAnotherSender,
            needAnotherReplyQuote = dto.needAnotherReplyQuote,
            needDropReply = dto.needDropReply,
            requiredPaidMessageStarCount = dto.requiredPaidMessageStarCount,
            retryAfter = dto.retryAfter,
        )
    }

    fun map(dto: TdApi.MessageSource): MessageSource {
        when (dto) {
            is TdApi.MessageSourceChatHistory -> return map(dto)
            is TdApi.MessageSourceMessageThreadHistory -> return map(dto)
            is TdApi.MessageSourceForumTopicHistory -> return map(dto)
            is TdApi.MessageSourceDirectMessagesChatTopicHistory -> return map(dto)
            is TdApi.MessageSourceHistoryPreview -> return map(dto)
            is TdApi.MessageSourceChatList -> return map(dto)
            is TdApi.MessageSourceSearch -> return map(dto)
            is TdApi.MessageSourceChatEventLog -> return map(dto)
            is TdApi.MessageSourceNotification -> return map(dto)
            is TdApi.MessageSourceScreenshot -> return map(dto)
            is TdApi.MessageSourceOther -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.MessageSourceChatHistory): MessageSourceChatHistory {
        return MessageSourceChatHistory()
    }

    fun map(dto: TdApi.MessageSourceMessageThreadHistory): MessageSourceMessageThreadHistory {
        return MessageSourceMessageThreadHistory()
    }

    fun map(dto: TdApi.MessageSourceForumTopicHistory): MessageSourceForumTopicHistory {
        return MessageSourceForumTopicHistory()
    }

    fun map(dto: TdApi.MessageSourceDirectMessagesChatTopicHistory): MessageSourceDirectMessagesChatTopicHistory {
        return MessageSourceDirectMessagesChatTopicHistory()
    }

    fun map(dto: TdApi.MessageSourceHistoryPreview): MessageSourceHistoryPreview {
        return MessageSourceHistoryPreview()
    }

    fun map(dto: TdApi.MessageSourceChatList): MessageSourceChatList {
        return MessageSourceChatList()
    }

    fun map(dto: TdApi.MessageSourceSearch): MessageSourceSearch {
        return MessageSourceSearch()
    }

    fun map(dto: TdApi.MessageSourceChatEventLog): MessageSourceChatEventLog {
        return MessageSourceChatEventLog()
    }

    fun map(dto: TdApi.MessageSourceNotification): MessageSourceNotification {
        return MessageSourceNotification()
    }

    fun map(dto: TdApi.MessageSourceScreenshot): MessageSourceScreenshot {
        return MessageSourceScreenshot()
    }

    fun map(dto: TdApi.MessageSourceOther): MessageSourceOther {
        return MessageSourceOther()
    }

    fun map(dto: MessageSource): TdApi.MessageSource {
        when (dto) {
            is MessageSourceChatHistory -> return map(dto)
            is MessageSourceMessageThreadHistory -> return map(dto)
            is MessageSourceForumTopicHistory -> return map(dto)
            is MessageSourceDirectMessagesChatTopicHistory -> return map(dto)
            is MessageSourceHistoryPreview -> return map(dto)
            is MessageSourceChatList -> return map(dto)
            is MessageSourceSearch -> return map(dto)
            is MessageSourceChatEventLog -> return map(dto)
            is MessageSourceNotification -> return map(dto)
            is MessageSourceScreenshot -> return map(dto)
            is MessageSourceOther -> return map(dto)
        }
    }

    fun map(dto: MessageSourceChatHistory): TdApi.MessageSourceChatHistory {
        return TdApi.MessageSourceChatHistory()
    }

    fun map(dto: MessageSourceMessageThreadHistory): TdApi.MessageSourceMessageThreadHistory {
        return TdApi.MessageSourceMessageThreadHistory()
    }

    fun map(dto: MessageSourceForumTopicHistory): TdApi.MessageSourceForumTopicHistory {
        return TdApi.MessageSourceForumTopicHistory()
    }

    fun map(dto: MessageSourceDirectMessagesChatTopicHistory): TdApi.MessageSourceDirectMessagesChatTopicHistory {
        return TdApi.MessageSourceDirectMessagesChatTopicHistory()
    }

    fun map(dto: MessageSourceHistoryPreview): TdApi.MessageSourceHistoryPreview {
        return TdApi.MessageSourceHistoryPreview()
    }

    fun map(dto: MessageSourceChatList): TdApi.MessageSourceChatList {
        return TdApi.MessageSourceChatList()
    }

    fun map(dto: MessageSourceSearch): TdApi.MessageSourceSearch {
        return TdApi.MessageSourceSearch()
    }

    fun map(dto: MessageSourceChatEventLog): TdApi.MessageSourceChatEventLog {
        return TdApi.MessageSourceChatEventLog()
    }

    fun map(dto: MessageSourceNotification): TdApi.MessageSourceNotification {
        return TdApi.MessageSourceNotification()
    }

    fun map(dto: MessageSourceScreenshot): TdApi.MessageSourceScreenshot {
        return TdApi.MessageSourceScreenshot()
    }

    fun map(dto: MessageSourceOther): TdApi.MessageSourceOther {
        return TdApi.MessageSourceOther()
    }

    fun map(dto: TdApi.MessageStatistics): MessageStatistics {
        return MessageStatistics(
            messageInteractionGraph = map(dto.messageInteractionGraph),
            messageReactionGraph = map(dto.messageReactionGraph),
        )
    }

    fun map(dto: MessageStatistics): TdApi.MessageStatistics {
        return TdApi.MessageStatistics(
            messageInteractionGraph = map(dto.messageInteractionGraph),
            messageReactionGraph = map(dto.messageReactionGraph),
        )
    }

    fun map(dto: TdApi.MessageThreadInfo): MessageThreadInfo {
        return MessageThreadInfo(
            chatId = dto.chatId,
            messageThreadId = dto.messageThreadId,
            replyInfo = dto.replyInfo?.let { map(it) },
            unreadMessageCount = dto.unreadMessageCount,
            messages = dto.messages.mapArray { map(it) },
            draftMessage = dto.draftMessage?.let { map(it) },
        )
    }

    fun map(dto: MessageThreadInfo): TdApi.MessageThreadInfo {
        return TdApi.MessageThreadInfo(
            chatId = dto.chatId,
            messageThreadId = dto.messageThreadId,
            replyInfo = dto.replyInfo?.let { map(it) },
            unreadMessageCount = dto.unreadMessageCount,
            messages = dto.messages.mapArray { map(it) },
            draftMessage = dto.draftMessage?.let { map(it) },
        )
    }

    fun map(dto: TdApi.MessageTopic): MessageTopic {
        when (dto) {
            is TdApi.MessageTopicForum -> return map(dto)
            is TdApi.MessageTopicDirectMessages -> return map(dto)
            is TdApi.MessageTopicSavedMessages -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.MessageTopicForum): MessageTopicForum {
        return MessageTopicForum(
            forumTopicId = dto.forumTopicId,
        )
    }

    fun map(dto: TdApi.MessageTopicDirectMessages): MessageTopicDirectMessages {
        return MessageTopicDirectMessages(
            directMessagesChatTopicId = dto.directMessagesChatTopicId,
        )
    }

    fun map(dto: TdApi.MessageTopicSavedMessages): MessageTopicSavedMessages {
        return MessageTopicSavedMessages(
            savedMessagesTopicId = dto.savedMessagesTopicId,
        )
    }

    fun map(dto: MessageTopic): TdApi.MessageTopic {
        when (dto) {
            is MessageTopicForum -> return map(dto)
            is MessageTopicDirectMessages -> return map(dto)
            is MessageTopicSavedMessages -> return map(dto)
        }
    }

    fun map(dto: MessageTopicForum): TdApi.MessageTopicForum {
        return TdApi.MessageTopicForum(
            forumTopicId = dto.forumTopicId,
        )
    }

    fun map(dto: MessageTopicDirectMessages): TdApi.MessageTopicDirectMessages {
        return TdApi.MessageTopicDirectMessages(
            directMessagesChatTopicId = dto.directMessagesChatTopicId,
        )
    }

    fun map(dto: MessageTopicSavedMessages): TdApi.MessageTopicSavedMessages {
        return TdApi.MessageTopicSavedMessages(
            savedMessagesTopicId = dto.savedMessagesTopicId,
        )
    }

    fun map(dto: TdApi.MessageViewer): MessageViewer {
        return MessageViewer(
            userId = dto.userId,
            viewDate = dto.viewDate,
        )
    }

    fun map(dto: MessageViewer): TdApi.MessageViewer {
        return TdApi.MessageViewer(
            userId = dto.userId,
            viewDate = dto.viewDate,
        )
    }

    fun map(dto: TdApi.MessageViewers): MessageViewers {
        return MessageViewers(
            viewers = dto.viewers.mapArray { map(it) },
        )
    }

    fun map(dto: MessageViewers): TdApi.MessageViewers {
        return TdApi.MessageViewers(
            viewers = dto.viewers.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.Messages): Messages {
        return Messages(
            totalCount = dto.totalCount,
            messages = dto.messages?.mapArray { map(it) },
        )
    }

    fun map(dto: Messages): TdApi.Messages {
        return TdApi.Messages(
            totalCount = dto.totalCount,
            messages = dto.messages?.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.Minithumbnail): Minithumbnail {
        return Minithumbnail(
            width = dto.width,
            height = dto.height,
            data = dto.data,
        )
    }

    fun map(dto: Minithumbnail): TdApi.Minithumbnail {
        return TdApi.Minithumbnail(
            width = dto.width,
            height = dto.height,
            data = dto.data,
        )
    }

    fun map(dto: TdApi.NetworkStatistics): NetworkStatistics {
        return NetworkStatistics(
            sinceDate = dto.sinceDate,
            entries = dto.entries.mapArray { map(it) },
        )
    }

    fun map(dto: NetworkStatistics): TdApi.NetworkStatistics {
        return TdApi.NetworkStatistics(
            sinceDate = dto.sinceDate,
            entries = dto.entries.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.NetworkStatisticsEntry): NetworkStatisticsEntry {
        when (dto) {
            is TdApi.NetworkStatisticsEntryFile -> return map(dto)
            is TdApi.NetworkStatisticsEntryCall -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.NetworkStatisticsEntryFile): NetworkStatisticsEntryFile {
        return NetworkStatisticsEntryFile(
            fileType = dto.fileType?.let { map(it) },
            networkType = map(dto.networkType),
            sentBytes = dto.sentBytes,
            receivedBytes = dto.receivedBytes,
        )
    }

    fun map(dto: TdApi.NetworkStatisticsEntryCall): NetworkStatisticsEntryCall {
        return NetworkStatisticsEntryCall(
            networkType = map(dto.networkType),
            sentBytes = dto.sentBytes,
            receivedBytes = dto.receivedBytes,
            duration = dto.duration,
        )
    }

    fun map(dto: NetworkStatisticsEntry): TdApi.NetworkStatisticsEntry {
        when (dto) {
            is NetworkStatisticsEntryFile -> return map(dto)
            is NetworkStatisticsEntryCall -> return map(dto)
        }
    }

    fun map(dto: NetworkStatisticsEntryFile): TdApi.NetworkStatisticsEntryFile {
        return TdApi.NetworkStatisticsEntryFile(
            fileType = dto.fileType?.let { map(it) },
            networkType = map(dto.networkType),
            sentBytes = dto.sentBytes,
            receivedBytes = dto.receivedBytes,
        )
    }

    fun map(dto: NetworkStatisticsEntryCall): TdApi.NetworkStatisticsEntryCall {
        return TdApi.NetworkStatisticsEntryCall(
            networkType = map(dto.networkType),
            sentBytes = dto.sentBytes,
            receivedBytes = dto.receivedBytes,
            duration = dto.duration,
        )
    }

    fun map(dto: TdApi.NetworkType): NetworkType {
        when (dto) {
            is TdApi.NetworkTypeNone -> return map(dto)
            is TdApi.NetworkTypeMobile -> return map(dto)
            is TdApi.NetworkTypeMobileRoaming -> return map(dto)
            is TdApi.NetworkTypeWiFi -> return map(dto)
            is TdApi.NetworkTypeOther -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.NetworkTypeNone): NetworkTypeNone {
        return NetworkTypeNone()
    }

    fun map(dto: TdApi.NetworkTypeMobile): NetworkTypeMobile {
        return NetworkTypeMobile()
    }

    fun map(dto: TdApi.NetworkTypeMobileRoaming): NetworkTypeMobileRoaming {
        return NetworkTypeMobileRoaming()
    }

    fun map(dto: TdApi.NetworkTypeWiFi): NetworkTypeWiFi {
        return NetworkTypeWiFi()
    }

    fun map(dto: TdApi.NetworkTypeOther): NetworkTypeOther {
        return NetworkTypeOther()
    }

    fun map(dto: NetworkType): TdApi.NetworkType {
        when (dto) {
            is NetworkTypeNone -> return map(dto)
            is NetworkTypeMobile -> return map(dto)
            is NetworkTypeMobileRoaming -> return map(dto)
            is NetworkTypeWiFi -> return map(dto)
            is NetworkTypeOther -> return map(dto)
        }
    }

    fun map(dto: NetworkTypeNone): TdApi.NetworkTypeNone {
        return TdApi.NetworkTypeNone()
    }

    fun map(dto: NetworkTypeMobile): TdApi.NetworkTypeMobile {
        return TdApi.NetworkTypeMobile()
    }

    fun map(dto: NetworkTypeMobileRoaming): TdApi.NetworkTypeMobileRoaming {
        return TdApi.NetworkTypeMobileRoaming()
    }

    fun map(dto: NetworkTypeWiFi): TdApi.NetworkTypeWiFi {
        return TdApi.NetworkTypeWiFi()
    }

    fun map(dto: NetworkTypeOther): TdApi.NetworkTypeOther {
        return TdApi.NetworkTypeOther()
    }

    fun map(dto: TdApi.NewChatPrivacySettings): NewChatPrivacySettings {
        return NewChatPrivacySettings(
            allowNewChatsFromUnknownUsers = dto.allowNewChatsFromUnknownUsers,
            incomingPaidMessageStarCount = dto.incomingPaidMessageStarCount,
        )
    }

    fun map(dto: NewChatPrivacySettings): TdApi.NewChatPrivacySettings {
        return TdApi.NewChatPrivacySettings(
            allowNewChatsFromUnknownUsers = dto.allowNewChatsFromUnknownUsers,
            incomingPaidMessageStarCount = dto.incomingPaidMessageStarCount,
        )
    }

    fun map(dto: TdApi.Notification): Notification {
        return Notification(
            id = dto.id,
            date = dto.date,
            isSilent = dto.isSilent,
            type = map(dto.type),
        )
    }

    fun map(dto: Notification): TdApi.Notification {
        return TdApi.Notification(
            id = dto.id,
            date = dto.date,
            isSilent = dto.isSilent,
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.NotificationGroup): NotificationGroup {
        return NotificationGroup(
            id = dto.id,
            type = map(dto.type),
            chatId = dto.chatId,
            totalCount = dto.totalCount,
            notifications = dto.notifications.mapArray { map(it) },
        )
    }

    fun map(dto: NotificationGroup): TdApi.NotificationGroup {
        return TdApi.NotificationGroup(
            id = dto.id,
            type = map(dto.type),
            chatId = dto.chatId,
            totalCount = dto.totalCount,
            notifications = dto.notifications.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.NotificationGroupType): NotificationGroupType {
        when (dto) {
            is TdApi.NotificationGroupTypeMessages -> return map(dto)
            is TdApi.NotificationGroupTypeMentions -> return map(dto)
            is TdApi.NotificationGroupTypeSecretChat -> return map(dto)
            is TdApi.NotificationGroupTypeCalls -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.NotificationGroupTypeMessages): NotificationGroupTypeMessages {
        return NotificationGroupTypeMessages()
    }

    fun map(dto: TdApi.NotificationGroupTypeMentions): NotificationGroupTypeMentions {
        return NotificationGroupTypeMentions()
    }

    fun map(dto: TdApi.NotificationGroupTypeSecretChat): NotificationGroupTypeSecretChat {
        return NotificationGroupTypeSecretChat()
    }

    fun map(dto: TdApi.NotificationGroupTypeCalls): NotificationGroupTypeCalls {
        return NotificationGroupTypeCalls()
    }

    fun map(dto: NotificationGroupType): TdApi.NotificationGroupType {
        when (dto) {
            is NotificationGroupTypeMessages -> return map(dto)
            is NotificationGroupTypeMentions -> return map(dto)
            is NotificationGroupTypeSecretChat -> return map(dto)
            is NotificationGroupTypeCalls -> return map(dto)
        }
    }

    fun map(dto: NotificationGroupTypeMessages): TdApi.NotificationGroupTypeMessages {
        return TdApi.NotificationGroupTypeMessages()
    }

    fun map(dto: NotificationGroupTypeMentions): TdApi.NotificationGroupTypeMentions {
        return TdApi.NotificationGroupTypeMentions()
    }

    fun map(dto: NotificationGroupTypeSecretChat): TdApi.NotificationGroupTypeSecretChat {
        return TdApi.NotificationGroupTypeSecretChat()
    }

    fun map(dto: NotificationGroupTypeCalls): TdApi.NotificationGroupTypeCalls {
        return TdApi.NotificationGroupTypeCalls()
    }

    fun map(dto: TdApi.NotificationSettingsScope): NotificationSettingsScope {
        when (dto) {
            is TdApi.NotificationSettingsScopePrivateChats -> return map(dto)
            is TdApi.NotificationSettingsScopeGroupChats -> return map(dto)
            is TdApi.NotificationSettingsScopeChannelChats -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.NotificationSettingsScopePrivateChats): NotificationSettingsScopePrivateChats {
        return NotificationSettingsScopePrivateChats()
    }

    fun map(dto: TdApi.NotificationSettingsScopeGroupChats): NotificationSettingsScopeGroupChats {
        return NotificationSettingsScopeGroupChats()
    }

    fun map(dto: TdApi.NotificationSettingsScopeChannelChats): NotificationSettingsScopeChannelChats {
        return NotificationSettingsScopeChannelChats()
    }

    fun map(dto: NotificationSettingsScope): TdApi.NotificationSettingsScope {
        when (dto) {
            is NotificationSettingsScopePrivateChats -> return map(dto)
            is NotificationSettingsScopeGroupChats -> return map(dto)
            is NotificationSettingsScopeChannelChats -> return map(dto)
        }
    }

    fun map(dto: NotificationSettingsScopePrivateChats): TdApi.NotificationSettingsScopePrivateChats {
        return TdApi.NotificationSettingsScopePrivateChats()
    }

    fun map(dto: NotificationSettingsScopeGroupChats): TdApi.NotificationSettingsScopeGroupChats {
        return TdApi.NotificationSettingsScopeGroupChats()
    }

    fun map(dto: NotificationSettingsScopeChannelChats): TdApi.NotificationSettingsScopeChannelChats {
        return TdApi.NotificationSettingsScopeChannelChats()
    }

    fun map(dto: TdApi.NotificationSound): NotificationSound {
        return NotificationSound(
            id = dto.id,
            duration = dto.duration,
            date = dto.date,
            title = dto.title,
            data = dto.data,
            sound = map(dto.sound),
        )
    }

    fun map(dto: NotificationSound): TdApi.NotificationSound {
        return TdApi.NotificationSound(
            id = dto.id,
            duration = dto.duration,
            date = dto.date,
            title = dto.title,
            data = dto.data,
            sound = map(dto.sound),
        )
    }

    fun map(dto: TdApi.NotificationSounds): NotificationSounds {
        return NotificationSounds(
            notificationSounds = dto.notificationSounds.mapArray { map(it) },
        )
    }

    fun map(dto: NotificationSounds): TdApi.NotificationSounds {
        return TdApi.NotificationSounds(
            notificationSounds = dto.notificationSounds.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.NotificationType): NotificationType {
        when (dto) {
            is TdApi.NotificationTypeNewMessage -> return map(dto)
            is TdApi.NotificationTypeNewSecretChat -> return map(dto)
            is TdApi.NotificationTypeNewCall -> return map(dto)
            is TdApi.NotificationTypeNewPushMessage -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.NotificationTypeNewMessage): NotificationTypeNewMessage {
        return NotificationTypeNewMessage(
            message = map(dto.message),
            showPreview = dto.showPreview,
        )
    }

    fun map(dto: TdApi.NotificationTypeNewSecretChat): NotificationTypeNewSecretChat {
        return NotificationTypeNewSecretChat()
    }

    fun map(dto: TdApi.NotificationTypeNewCall): NotificationTypeNewCall {
        return NotificationTypeNewCall(
            callId = dto.callId,
        )
    }

    fun map(dto: TdApi.NotificationTypeNewPushMessage): NotificationTypeNewPushMessage {
        return NotificationTypeNewPushMessage(
            messageId = dto.messageId,
            senderId = map(dto.senderId),
            senderName = dto.senderName,
            isOutgoing = dto.isOutgoing,
            content = map(dto.content),
        )
    }

    fun map(dto: NotificationType): TdApi.NotificationType {
        when (dto) {
            is NotificationTypeNewMessage -> return map(dto)
            is NotificationTypeNewSecretChat -> return map(dto)
            is NotificationTypeNewCall -> return map(dto)
            is NotificationTypeNewPushMessage -> return map(dto)
        }
    }

    fun map(dto: NotificationTypeNewMessage): TdApi.NotificationTypeNewMessage {
        return TdApi.NotificationTypeNewMessage(
            message = map(dto.message),
            showPreview = dto.showPreview,
        )
    }

    fun map(dto: NotificationTypeNewSecretChat): TdApi.NotificationTypeNewSecretChat {
        return TdApi.NotificationTypeNewSecretChat()
    }

    fun map(dto: NotificationTypeNewCall): TdApi.NotificationTypeNewCall {
        return TdApi.NotificationTypeNewCall(
            callId = dto.callId,
        )
    }

    fun map(dto: NotificationTypeNewPushMessage): TdApi.NotificationTypeNewPushMessage {
        return TdApi.NotificationTypeNewPushMessage(
            messageId = dto.messageId,
            senderId = map(dto.senderId),
            senderName = dto.senderName,
            isOutgoing = dto.isOutgoing,
            content = map(dto.content),
        )
    }

    fun map(dto: TdApi.Ok): Ok {
        return Ok()
    }

    fun map(dto: Ok): TdApi.Ok {
        return TdApi.Ok()
    }

    fun map(dto: TdApi.OptionValue): OptionValue {
        when (dto) {
            is TdApi.OptionValueBoolean -> return map(dto)
            is TdApi.OptionValueEmpty -> return map(dto)
            is TdApi.OptionValueInteger -> return map(dto)
            is TdApi.OptionValueString -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.OptionValueBoolean): OptionValueBoolean {
        return OptionValueBoolean(
            value = dto.value,
        )
    }

    fun map(dto: TdApi.OptionValueEmpty): OptionValueEmpty {
        return OptionValueEmpty()
    }

    fun map(dto: TdApi.OptionValueInteger): OptionValueInteger {
        return OptionValueInteger(
            value = dto.value,
        )
    }

    fun map(dto: TdApi.OptionValueString): OptionValueString {
        return OptionValueString(
            value = dto.value,
        )
    }

    fun map(dto: OptionValue): TdApi.OptionValue {
        when (dto) {
            is OptionValueBoolean -> return map(dto)
            is OptionValueEmpty -> return map(dto)
            is OptionValueInteger -> return map(dto)
            is OptionValueString -> return map(dto)
        }
    }

    fun map(dto: OptionValueBoolean): TdApi.OptionValueBoolean {
        return TdApi.OptionValueBoolean(
            value = dto.value,
        )
    }

    fun map(dto: OptionValueEmpty): TdApi.OptionValueEmpty {
        return TdApi.OptionValueEmpty()
    }

    fun map(dto: OptionValueInteger): TdApi.OptionValueInteger {
        return TdApi.OptionValueInteger(
            value = dto.value,
        )
    }

    fun map(dto: OptionValueString): TdApi.OptionValueString {
        return TdApi.OptionValueString(
            value = dto.value,
        )
    }

    fun map(dto: TdApi.OrderInfo): OrderInfo {
        return OrderInfo(
            name = dto.name,
            phoneNumber = dto.phoneNumber,
            emailAddress = dto.emailAddress,
            shippingAddress = dto.shippingAddress?.let { map(it) },
        )
    }

    fun map(dto: OrderInfo): TdApi.OrderInfo {
        return TdApi.OrderInfo(
            name = dto.name,
            phoneNumber = dto.phoneNumber,
            emailAddress = dto.emailAddress,
            shippingAddress = dto.shippingAddress?.let { map(it) },
        )
    }

    fun map(dto: TdApi.Outline): Outline {
        return Outline(
            paths = dto.paths.mapArray { map(it) },
        )
    }

    fun map(dto: Outline): TdApi.Outline {
        return TdApi.Outline(
            paths = dto.paths.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.PageBlock): PageBlock {
        when (dto) {
            is TdApi.PageBlockTitle -> return map(dto)
            is TdApi.PageBlockSubtitle -> return map(dto)
            is TdApi.PageBlockAuthorDate -> return map(dto)
            is TdApi.PageBlockHeader -> return map(dto)
            is TdApi.PageBlockSubheader -> return map(dto)
            is TdApi.PageBlockKicker -> return map(dto)
            is TdApi.PageBlockParagraph -> return map(dto)
            is TdApi.PageBlockPreformatted -> return map(dto)
            is TdApi.PageBlockFooter -> return map(dto)
            is TdApi.PageBlockDivider -> return map(dto)
            is TdApi.PageBlockAnchor -> return map(dto)
            is TdApi.PageBlockList -> return map(dto)
            is TdApi.PageBlockBlockQuote -> return map(dto)
            is TdApi.PageBlockPullQuote -> return map(dto)
            is TdApi.PageBlockAnimation -> return map(dto)
            is TdApi.PageBlockAudio -> return map(dto)
            is TdApi.PageBlockPhoto -> return map(dto)
            is TdApi.PageBlockVideo -> return map(dto)
            is TdApi.PageBlockVoiceNote -> return map(dto)
            is TdApi.PageBlockCover -> return map(dto)
            is TdApi.PageBlockEmbedded -> return map(dto)
            is TdApi.PageBlockEmbeddedPost -> return map(dto)
            is TdApi.PageBlockCollage -> return map(dto)
            is TdApi.PageBlockSlideshow -> return map(dto)
            is TdApi.PageBlockChatLink -> return map(dto)
            is TdApi.PageBlockTable -> return map(dto)
            is TdApi.PageBlockDetails -> return map(dto)
            is TdApi.PageBlockRelatedArticles -> return map(dto)
            is TdApi.PageBlockMap -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PageBlockTitle): PageBlockTitle {
        return PageBlockTitle(
            title = map(dto.title),
        )
    }

    fun map(dto: TdApi.PageBlockSubtitle): PageBlockSubtitle {
        return PageBlockSubtitle(
            subtitle = map(dto.subtitle),
        )
    }

    fun map(dto: TdApi.PageBlockAuthorDate): PageBlockAuthorDate {
        return PageBlockAuthorDate(
            author = map(dto.author),
            publishDate = dto.publishDate,
        )
    }

    fun map(dto: TdApi.PageBlockHeader): PageBlockHeader {
        return PageBlockHeader(
            header = map(dto.header),
        )
    }

    fun map(dto: TdApi.PageBlockSubheader): PageBlockSubheader {
        return PageBlockSubheader(
            subheader = map(dto.subheader),
        )
    }

    fun map(dto: TdApi.PageBlockKicker): PageBlockKicker {
        return PageBlockKicker(
            kicker = map(dto.kicker),
        )
    }

    fun map(dto: TdApi.PageBlockParagraph): PageBlockParagraph {
        return PageBlockParagraph(
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.PageBlockPreformatted): PageBlockPreformatted {
        return PageBlockPreformatted(
            text = map(dto.text),
            language = dto.language,
        )
    }

    fun map(dto: TdApi.PageBlockFooter): PageBlockFooter {
        return PageBlockFooter(
            footer = map(dto.footer),
        )
    }

    fun map(dto: TdApi.PageBlockDivider): PageBlockDivider {
        return PageBlockDivider()
    }

    fun map(dto: TdApi.PageBlockAnchor): PageBlockAnchor {
        return PageBlockAnchor(
            name = dto.name,
        )
    }

    fun map(dto: TdApi.PageBlockList): PageBlockList {
        return PageBlockList(
            items = dto.items.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.PageBlockBlockQuote): PageBlockBlockQuote {
        return PageBlockBlockQuote(
            text = map(dto.text),
            credit = map(dto.credit),
        )
    }

    fun map(dto: TdApi.PageBlockPullQuote): PageBlockPullQuote {
        return PageBlockPullQuote(
            text = map(dto.text),
            credit = map(dto.credit),
        )
    }

    fun map(dto: TdApi.PageBlockAnimation): PageBlockAnimation {
        return PageBlockAnimation(
            animation = dto.animation?.let { map(it) },
            caption = map(dto.caption),
            needAutoplay = dto.needAutoplay,
        )
    }

    fun map(dto: TdApi.PageBlockAudio): PageBlockAudio {
        return PageBlockAudio(
            audio = dto.audio?.let { map(it) },
            caption = map(dto.caption),
        )
    }

    fun map(dto: TdApi.PageBlockPhoto): PageBlockPhoto {
        return PageBlockPhoto(
            photo = dto.photo?.let { map(it) },
            caption = map(dto.caption),
            url = dto.url,
        )
    }

    fun map(dto: TdApi.PageBlockVideo): PageBlockVideo {
        return PageBlockVideo(
            video = dto.video?.let { map(it) },
            caption = map(dto.caption),
            needAutoplay = dto.needAutoplay,
            isLooped = dto.isLooped,
        )
    }

    fun map(dto: TdApi.PageBlockVoiceNote): PageBlockVoiceNote {
        return PageBlockVoiceNote(
            voiceNote = dto.voiceNote?.let { map(it) },
            caption = map(dto.caption),
        )
    }

    fun map(dto: TdApi.PageBlockCover): PageBlockCover {
        return PageBlockCover(
            cover = map(dto.cover),
        )
    }

    fun map(dto: TdApi.PageBlockEmbedded): PageBlockEmbedded {
        return PageBlockEmbedded(
            url = dto.url,
            html = dto.html,
            posterPhoto = dto.posterPhoto?.let { map(it) },
            width = dto.width,
            height = dto.height,
            caption = map(dto.caption),
            isFullWidth = dto.isFullWidth,
            allowScrolling = dto.allowScrolling,
        )
    }

    fun map(dto: TdApi.PageBlockEmbeddedPost): PageBlockEmbeddedPost {
        return PageBlockEmbeddedPost(
            url = dto.url,
            author = dto.author,
            authorPhoto = dto.authorPhoto?.let { map(it) },
            date = dto.date,
            pageBlocks = dto.pageBlocks.mapArray { map(it) },
            caption = map(dto.caption),
        )
    }

    fun map(dto: TdApi.PageBlockCollage): PageBlockCollage {
        return PageBlockCollage(
            pageBlocks = dto.pageBlocks.mapArray { map(it) },
            caption = map(dto.caption),
        )
    }

    fun map(dto: TdApi.PageBlockSlideshow): PageBlockSlideshow {
        return PageBlockSlideshow(
            pageBlocks = dto.pageBlocks.mapArray { map(it) },
            caption = map(dto.caption),
        )
    }

    fun map(dto: TdApi.PageBlockChatLink): PageBlockChatLink {
        return PageBlockChatLink(
            title = dto.title,
            photo = dto.photo?.let { map(it) },
            accentColorId = dto.accentColorId,
            username = dto.username,
        )
    }

    fun map(dto: TdApi.PageBlockTable): PageBlockTable {
        return PageBlockTable(
            caption = map(dto.caption),
            cells = dto.cells.mapArrayOfArrays { map(it) },
            isBordered = dto.isBordered,
            isStriped = dto.isStriped,
        )
    }

    fun map(dto: TdApi.PageBlockDetails): PageBlockDetails {
        return PageBlockDetails(
            header = map(dto.header),
            pageBlocks = dto.pageBlocks.mapArray { map(it) },
            isOpen = dto.isOpen,
        )
    }

    fun map(dto: TdApi.PageBlockRelatedArticles): PageBlockRelatedArticles {
        return PageBlockRelatedArticles(
            header = map(dto.header),
            articles = dto.articles.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.PageBlockMap): PageBlockMap {
        return PageBlockMap(
            location = map(dto.location),
            zoom = dto.zoom,
            width = dto.width,
            height = dto.height,
            caption = map(dto.caption),
        )
    }

    fun map(dto: PageBlock): TdApi.PageBlock {
        when (dto) {
            is PageBlockTitle -> return map(dto)
            is PageBlockSubtitle -> return map(dto)
            is PageBlockAuthorDate -> return map(dto)
            is PageBlockHeader -> return map(dto)
            is PageBlockSubheader -> return map(dto)
            is PageBlockKicker -> return map(dto)
            is PageBlockParagraph -> return map(dto)
            is PageBlockPreformatted -> return map(dto)
            is PageBlockFooter -> return map(dto)
            is PageBlockDivider -> return map(dto)
            is PageBlockAnchor -> return map(dto)
            is PageBlockList -> return map(dto)
            is PageBlockBlockQuote -> return map(dto)
            is PageBlockPullQuote -> return map(dto)
            is PageBlockAnimation -> return map(dto)
            is PageBlockAudio -> return map(dto)
            is PageBlockPhoto -> return map(dto)
            is PageBlockVideo -> return map(dto)
            is PageBlockVoiceNote -> return map(dto)
            is PageBlockCover -> return map(dto)
            is PageBlockEmbedded -> return map(dto)
            is PageBlockEmbeddedPost -> return map(dto)
            is PageBlockCollage -> return map(dto)
            is PageBlockSlideshow -> return map(dto)
            is PageBlockChatLink -> return map(dto)
            is PageBlockTable -> return map(dto)
            is PageBlockDetails -> return map(dto)
            is PageBlockRelatedArticles -> return map(dto)
            is PageBlockMap -> return map(dto)
        }
    }

    fun map(dto: PageBlockTitle): TdApi.PageBlockTitle {
        return TdApi.PageBlockTitle(
            title = map(dto.title),
        )
    }

    fun map(dto: PageBlockSubtitle): TdApi.PageBlockSubtitle {
        return TdApi.PageBlockSubtitle(
            subtitle = map(dto.subtitle),
        )
    }

    fun map(dto: PageBlockAuthorDate): TdApi.PageBlockAuthorDate {
        return TdApi.PageBlockAuthorDate(
            author = map(dto.author),
            publishDate = dto.publishDate,
        )
    }

    fun map(dto: PageBlockHeader): TdApi.PageBlockHeader {
        return TdApi.PageBlockHeader(
            header = map(dto.header),
        )
    }

    fun map(dto: PageBlockSubheader): TdApi.PageBlockSubheader {
        return TdApi.PageBlockSubheader(
            subheader = map(dto.subheader),
        )
    }

    fun map(dto: PageBlockKicker): TdApi.PageBlockKicker {
        return TdApi.PageBlockKicker(
            kicker = map(dto.kicker),
        )
    }

    fun map(dto: PageBlockParagraph): TdApi.PageBlockParagraph {
        return TdApi.PageBlockParagraph(
            text = map(dto.text),
        )
    }

    fun map(dto: PageBlockPreformatted): TdApi.PageBlockPreformatted {
        return TdApi.PageBlockPreformatted(
            text = map(dto.text),
            language = dto.language,
        )
    }

    fun map(dto: PageBlockFooter): TdApi.PageBlockFooter {
        return TdApi.PageBlockFooter(
            footer = map(dto.footer),
        )
    }

    fun map(dto: PageBlockDivider): TdApi.PageBlockDivider {
        return TdApi.PageBlockDivider()
    }

    fun map(dto: PageBlockAnchor): TdApi.PageBlockAnchor {
        return TdApi.PageBlockAnchor(
            name = dto.name,
        )
    }

    fun map(dto: PageBlockList): TdApi.PageBlockList {
        return TdApi.PageBlockList(
            items = dto.items.mapArray { map(it) },
        )
    }

    fun map(dto: PageBlockBlockQuote): TdApi.PageBlockBlockQuote {
        return TdApi.PageBlockBlockQuote(
            text = map(dto.text),
            credit = map(dto.credit),
        )
    }

    fun map(dto: PageBlockPullQuote): TdApi.PageBlockPullQuote {
        return TdApi.PageBlockPullQuote(
            text = map(dto.text),
            credit = map(dto.credit),
        )
    }

    fun map(dto: PageBlockAnimation): TdApi.PageBlockAnimation {
        return TdApi.PageBlockAnimation(
            animation = dto.animation?.let { map(it) },
            caption = map(dto.caption),
            needAutoplay = dto.needAutoplay,
        )
    }

    fun map(dto: PageBlockAudio): TdApi.PageBlockAudio {
        return TdApi.PageBlockAudio(
            audio = dto.audio?.let { map(it) },
            caption = map(dto.caption),
        )
    }

    fun map(dto: PageBlockPhoto): TdApi.PageBlockPhoto {
        return TdApi.PageBlockPhoto(
            photo = dto.photo?.let { map(it) },
            caption = map(dto.caption),
            url = dto.url,
        )
    }

    fun map(dto: PageBlockVideo): TdApi.PageBlockVideo {
        return TdApi.PageBlockVideo(
            video = dto.video?.let { map(it) },
            caption = map(dto.caption),
            needAutoplay = dto.needAutoplay,
            isLooped = dto.isLooped,
        )
    }

    fun map(dto: PageBlockVoiceNote): TdApi.PageBlockVoiceNote {
        return TdApi.PageBlockVoiceNote(
            voiceNote = dto.voiceNote?.let { map(it) },
            caption = map(dto.caption),
        )
    }

    fun map(dto: PageBlockCover): TdApi.PageBlockCover {
        return TdApi.PageBlockCover(
            cover = map(dto.cover),
        )
    }

    fun map(dto: PageBlockEmbedded): TdApi.PageBlockEmbedded {
        return TdApi.PageBlockEmbedded(
            url = dto.url,
            html = dto.html,
            posterPhoto = dto.posterPhoto?.let { map(it) },
            width = dto.width,
            height = dto.height,
            caption = map(dto.caption),
            isFullWidth = dto.isFullWidth,
            allowScrolling = dto.allowScrolling,
        )
    }

    fun map(dto: PageBlockEmbeddedPost): TdApi.PageBlockEmbeddedPost {
        return TdApi.PageBlockEmbeddedPost(
            url = dto.url,
            author = dto.author,
            authorPhoto = dto.authorPhoto?.let { map(it) },
            date = dto.date,
            pageBlocks = dto.pageBlocks.mapArray { map(it) },
            caption = map(dto.caption),
        )
    }

    fun map(dto: PageBlockCollage): TdApi.PageBlockCollage {
        return TdApi.PageBlockCollage(
            pageBlocks = dto.pageBlocks.mapArray { map(it) },
            caption = map(dto.caption),
        )
    }

    fun map(dto: PageBlockSlideshow): TdApi.PageBlockSlideshow {
        return TdApi.PageBlockSlideshow(
            pageBlocks = dto.pageBlocks.mapArray { map(it) },
            caption = map(dto.caption),
        )
    }

    fun map(dto: PageBlockChatLink): TdApi.PageBlockChatLink {
        return TdApi.PageBlockChatLink(
            title = dto.title,
            photo = dto.photo?.let { map(it) },
            accentColorId = dto.accentColorId,
            username = dto.username,
        )
    }

    fun map(dto: PageBlockTable): TdApi.PageBlockTable {
        return TdApi.PageBlockTable(
            caption = map(dto.caption),
            cells = dto.cells.mapArrayOfArrays { map(it) },
            isBordered = dto.isBordered,
            isStriped = dto.isStriped,
        )
    }

    fun map(dto: PageBlockDetails): TdApi.PageBlockDetails {
        return TdApi.PageBlockDetails(
            header = map(dto.header),
            pageBlocks = dto.pageBlocks.mapArray { map(it) },
            isOpen = dto.isOpen,
        )
    }

    fun map(dto: PageBlockRelatedArticles): TdApi.PageBlockRelatedArticles {
        return TdApi.PageBlockRelatedArticles(
            header = map(dto.header),
            articles = dto.articles.mapArray { map(it) },
        )
    }

    fun map(dto: PageBlockMap): TdApi.PageBlockMap {
        return TdApi.PageBlockMap(
            location = map(dto.location),
            zoom = dto.zoom,
            width = dto.width,
            height = dto.height,
            caption = map(dto.caption),
        )
    }

    fun map(dto: TdApi.PageBlockCaption): PageBlockCaption {
        return PageBlockCaption(
            text = map(dto.text),
            credit = map(dto.credit),
        )
    }

    fun map(dto: PageBlockCaption): TdApi.PageBlockCaption {
        return TdApi.PageBlockCaption(
            text = map(dto.text),
            credit = map(dto.credit),
        )
    }

    fun map(dto: TdApi.PageBlockHorizontalAlignment): PageBlockHorizontalAlignment {
        when (dto) {
            is TdApi.PageBlockHorizontalAlignmentLeft -> return map(dto)
            is TdApi.PageBlockHorizontalAlignmentCenter -> return map(dto)
            is TdApi.PageBlockHorizontalAlignmentRight -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PageBlockHorizontalAlignmentLeft): PageBlockHorizontalAlignmentLeft {
        return PageBlockHorizontalAlignmentLeft()
    }

    fun map(dto: TdApi.PageBlockHorizontalAlignmentCenter): PageBlockHorizontalAlignmentCenter {
        return PageBlockHorizontalAlignmentCenter()
    }

    fun map(dto: TdApi.PageBlockHorizontalAlignmentRight): PageBlockHorizontalAlignmentRight {
        return PageBlockHorizontalAlignmentRight()
    }

    fun map(dto: PageBlockHorizontalAlignment): TdApi.PageBlockHorizontalAlignment {
        when (dto) {
            is PageBlockHorizontalAlignmentLeft -> return map(dto)
            is PageBlockHorizontalAlignmentCenter -> return map(dto)
            is PageBlockHorizontalAlignmentRight -> return map(dto)
        }
    }

    fun map(dto: PageBlockHorizontalAlignmentLeft): TdApi.PageBlockHorizontalAlignmentLeft {
        return TdApi.PageBlockHorizontalAlignmentLeft()
    }

    fun map(dto: PageBlockHorizontalAlignmentCenter): TdApi.PageBlockHorizontalAlignmentCenter {
        return TdApi.PageBlockHorizontalAlignmentCenter()
    }

    fun map(dto: PageBlockHorizontalAlignmentRight): TdApi.PageBlockHorizontalAlignmentRight {
        return TdApi.PageBlockHorizontalAlignmentRight()
    }

    fun map(dto: TdApi.PageBlockListItem): PageBlockListItem {
        return PageBlockListItem(
            label = dto.label,
            pageBlocks = dto.pageBlocks.mapArray { map(it) },
        )
    }

    fun map(dto: PageBlockListItem): TdApi.PageBlockListItem {
        return TdApi.PageBlockListItem(
            label = dto.label,
            pageBlocks = dto.pageBlocks.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.PageBlockRelatedArticle): PageBlockRelatedArticle {
        return PageBlockRelatedArticle(
            url = dto.url,
            title = dto.title,
            description = dto.description,
            photo = dto.photo?.let { map(it) },
            author = dto.author,
            publishDate = dto.publishDate,
        )
    }

    fun map(dto: PageBlockRelatedArticle): TdApi.PageBlockRelatedArticle {
        return TdApi.PageBlockRelatedArticle(
            url = dto.url,
            title = dto.title,
            description = dto.description,
            photo = dto.photo?.let { map(it) },
            author = dto.author,
            publishDate = dto.publishDate,
        )
    }

    fun map(dto: TdApi.PageBlockTableCell): PageBlockTableCell {
        return PageBlockTableCell(
            text = dto.text?.let { map(it) },
            isHeader = dto.isHeader,
            colspan = dto.colspan,
            rowspan = dto.rowspan,
            align = map(dto.align),
            valign = map(dto.valign),
        )
    }

    fun map(dto: PageBlockTableCell): TdApi.PageBlockTableCell {
        return TdApi.PageBlockTableCell(
            text = dto.text?.let { map(it) },
            isHeader = dto.isHeader,
            colspan = dto.colspan,
            rowspan = dto.rowspan,
            align = map(dto.align),
            valign = map(dto.valign),
        )
    }

    fun map(dto: TdApi.PageBlockVerticalAlignment): PageBlockVerticalAlignment {
        when (dto) {
            is TdApi.PageBlockVerticalAlignmentTop -> return map(dto)
            is TdApi.PageBlockVerticalAlignmentMiddle -> return map(dto)
            is TdApi.PageBlockVerticalAlignmentBottom -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PageBlockVerticalAlignmentTop): PageBlockVerticalAlignmentTop {
        return PageBlockVerticalAlignmentTop()
    }

    fun map(dto: TdApi.PageBlockVerticalAlignmentMiddle): PageBlockVerticalAlignmentMiddle {
        return PageBlockVerticalAlignmentMiddle()
    }

    fun map(dto: TdApi.PageBlockVerticalAlignmentBottom): PageBlockVerticalAlignmentBottom {
        return PageBlockVerticalAlignmentBottom()
    }

    fun map(dto: PageBlockVerticalAlignment): TdApi.PageBlockVerticalAlignment {
        when (dto) {
            is PageBlockVerticalAlignmentTop -> return map(dto)
            is PageBlockVerticalAlignmentMiddle -> return map(dto)
            is PageBlockVerticalAlignmentBottom -> return map(dto)
        }
    }

    fun map(dto: PageBlockVerticalAlignmentTop): TdApi.PageBlockVerticalAlignmentTop {
        return TdApi.PageBlockVerticalAlignmentTop()
    }

    fun map(dto: PageBlockVerticalAlignmentMiddle): TdApi.PageBlockVerticalAlignmentMiddle {
        return TdApi.PageBlockVerticalAlignmentMiddle()
    }

    fun map(dto: PageBlockVerticalAlignmentBottom): TdApi.PageBlockVerticalAlignmentBottom {
        return TdApi.PageBlockVerticalAlignmentBottom()
    }

    fun map(dto: TdApi.PaidMedia): PaidMedia {
        when (dto) {
            is TdApi.PaidMediaPreview -> return map(dto)
            is TdApi.PaidMediaPhoto -> return map(dto)
            is TdApi.PaidMediaVideo -> return map(dto)
            is TdApi.PaidMediaUnsupported -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PaidMediaPreview): PaidMediaPreview {
        return PaidMediaPreview(
            width = dto.width,
            height = dto.height,
            duration = dto.duration,
            minithumbnail = dto.minithumbnail?.let { map(it) },
        )
    }

    fun map(dto: TdApi.PaidMediaPhoto): PaidMediaPhoto {
        return PaidMediaPhoto(
            photo = map(dto.photo),
        )
    }

    fun map(dto: TdApi.PaidMediaVideo): PaidMediaVideo {
        return PaidMediaVideo(
            video = map(dto.video),
            cover = dto.cover?.let { map(it) },
            startTimestamp = dto.startTimestamp,
        )
    }

    fun map(dto: TdApi.PaidMediaUnsupported): PaidMediaUnsupported {
        return PaidMediaUnsupported()
    }

    fun map(dto: PaidMedia): TdApi.PaidMedia {
        when (dto) {
            is PaidMediaPreview -> return map(dto)
            is PaidMediaPhoto -> return map(dto)
            is PaidMediaVideo -> return map(dto)
            is PaidMediaUnsupported -> return map(dto)
        }
    }

    fun map(dto: PaidMediaPreview): TdApi.PaidMediaPreview {
        return TdApi.PaidMediaPreview(
            width = dto.width,
            height = dto.height,
            duration = dto.duration,
            minithumbnail = dto.minithumbnail?.let { map(it) },
        )
    }

    fun map(dto: PaidMediaPhoto): TdApi.PaidMediaPhoto {
        return TdApi.PaidMediaPhoto(
            photo = map(dto.photo),
        )
    }

    fun map(dto: PaidMediaVideo): TdApi.PaidMediaVideo {
        return TdApi.PaidMediaVideo(
            video = map(dto.video),
            cover = dto.cover?.let { map(it) },
            startTimestamp = dto.startTimestamp,
        )
    }

    fun map(dto: PaidMediaUnsupported): TdApi.PaidMediaUnsupported {
        return TdApi.PaidMediaUnsupported()
    }

    fun map(dto: TdApi.PaidReactionType): PaidReactionType {
        when (dto) {
            is TdApi.PaidReactionTypeRegular -> return map(dto)
            is TdApi.PaidReactionTypeAnonymous -> return map(dto)
            is TdApi.PaidReactionTypeChat -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PaidReactionTypeRegular): PaidReactionTypeRegular {
        return PaidReactionTypeRegular()
    }

    fun map(dto: TdApi.PaidReactionTypeAnonymous): PaidReactionTypeAnonymous {
        return PaidReactionTypeAnonymous()
    }

    fun map(dto: TdApi.PaidReactionTypeChat): PaidReactionTypeChat {
        return PaidReactionTypeChat(
            chatId = dto.chatId,
        )
    }

    fun map(dto: PaidReactionType): TdApi.PaidReactionType {
        when (dto) {
            is PaidReactionTypeRegular -> return map(dto)
            is PaidReactionTypeAnonymous -> return map(dto)
            is PaidReactionTypeChat -> return map(dto)
        }
    }

    fun map(dto: PaidReactionTypeRegular): TdApi.PaidReactionTypeRegular {
        return TdApi.PaidReactionTypeRegular()
    }

    fun map(dto: PaidReactionTypeAnonymous): TdApi.PaidReactionTypeAnonymous {
        return TdApi.PaidReactionTypeAnonymous()
    }

    fun map(dto: PaidReactionTypeChat): TdApi.PaidReactionTypeChat {
        return TdApi.PaidReactionTypeChat(
            chatId = dto.chatId,
        )
    }

    fun map(dto: TdApi.PaidReactor): PaidReactor {
        return PaidReactor(
            senderId = dto.senderId?.let { map(it) },
            starCount = dto.starCount,
            isTop = dto.isTop,
            isMe = dto.isMe,
            isAnonymous = dto.isAnonymous,
        )
    }

    fun map(dto: PaidReactor): TdApi.PaidReactor {
        return TdApi.PaidReactor(
            senderId = dto.senderId?.let { map(it) },
            starCount = dto.starCount,
            isTop = dto.isTop,
            isMe = dto.isMe,
            isAnonymous = dto.isAnonymous,
        )
    }

    fun map(dto: TdApi.PassportAuthorizationForm): PassportAuthorizationForm {
        return PassportAuthorizationForm(
            id = dto.id,
            requiredElements = dto.requiredElements.mapArray { map(it) },
            privacyPolicyUrl = dto.privacyPolicyUrl,
        )
    }

    fun map(dto: PassportAuthorizationForm): TdApi.PassportAuthorizationForm {
        return TdApi.PassportAuthorizationForm(
            id = dto.id,
            requiredElements = dto.requiredElements.mapArray { map(it) },
            privacyPolicyUrl = dto.privacyPolicyUrl,
        )
    }

    fun map(dto: TdApi.PassportElement): PassportElement {
        when (dto) {
            is TdApi.PassportElementPersonalDetails -> return map(dto)
            is TdApi.PassportElementPassport -> return map(dto)
            is TdApi.PassportElementDriverLicense -> return map(dto)
            is TdApi.PassportElementIdentityCard -> return map(dto)
            is TdApi.PassportElementInternalPassport -> return map(dto)
            is TdApi.PassportElementAddress -> return map(dto)
            is TdApi.PassportElementUtilityBill -> return map(dto)
            is TdApi.PassportElementBankStatement -> return map(dto)
            is TdApi.PassportElementRentalAgreement -> return map(dto)
            is TdApi.PassportElementPassportRegistration -> return map(dto)
            is TdApi.PassportElementTemporaryRegistration -> return map(dto)
            is TdApi.PassportElementPhoneNumber -> return map(dto)
            is TdApi.PassportElementEmailAddress -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PassportElementPersonalDetails): PassportElementPersonalDetails {
        return PassportElementPersonalDetails(
            personalDetails = map(dto.personalDetails),
        )
    }

    fun map(dto: TdApi.PassportElementPassport): PassportElementPassport {
        return PassportElementPassport(
            passport = map(dto.passport),
        )
    }

    fun map(dto: TdApi.PassportElementDriverLicense): PassportElementDriverLicense {
        return PassportElementDriverLicense(
            driverLicense = map(dto.driverLicense),
        )
    }

    fun map(dto: TdApi.PassportElementIdentityCard): PassportElementIdentityCard {
        return PassportElementIdentityCard(
            identityCard = map(dto.identityCard),
        )
    }

    fun map(dto: TdApi.PassportElementInternalPassport): PassportElementInternalPassport {
        return PassportElementInternalPassport(
            internalPassport = map(dto.internalPassport),
        )
    }

    fun map(dto: TdApi.PassportElementAddress): PassportElementAddress {
        return PassportElementAddress(
            address = map(dto.address),
        )
    }

    fun map(dto: TdApi.PassportElementUtilityBill): PassportElementUtilityBill {
        return PassportElementUtilityBill(
            utilityBill = map(dto.utilityBill),
        )
    }

    fun map(dto: TdApi.PassportElementBankStatement): PassportElementBankStatement {
        return PassportElementBankStatement(
            bankStatement = map(dto.bankStatement),
        )
    }

    fun map(dto: TdApi.PassportElementRentalAgreement): PassportElementRentalAgreement {
        return PassportElementRentalAgreement(
            rentalAgreement = map(dto.rentalAgreement),
        )
    }

    fun map(dto: TdApi.PassportElementPassportRegistration): PassportElementPassportRegistration {
        return PassportElementPassportRegistration(
            passportRegistration = map(dto.passportRegistration),
        )
    }

    fun map(dto: TdApi.PassportElementTemporaryRegistration): PassportElementTemporaryRegistration {
        return PassportElementTemporaryRegistration(
            temporaryRegistration = map(dto.temporaryRegistration),
        )
    }

    fun map(dto: TdApi.PassportElementPhoneNumber): PassportElementPhoneNumber {
        return PassportElementPhoneNumber(
            phoneNumber = dto.phoneNumber,
        )
    }

    fun map(dto: TdApi.PassportElementEmailAddress): PassportElementEmailAddress {
        return PassportElementEmailAddress(
            emailAddress = dto.emailAddress,
        )
    }

    fun map(dto: PassportElement): TdApi.PassportElement {
        when (dto) {
            is PassportElementPersonalDetails -> return map(dto)
            is PassportElementPassport -> return map(dto)
            is PassportElementDriverLicense -> return map(dto)
            is PassportElementIdentityCard -> return map(dto)
            is PassportElementInternalPassport -> return map(dto)
            is PassportElementAddress -> return map(dto)
            is PassportElementUtilityBill -> return map(dto)
            is PassportElementBankStatement -> return map(dto)
            is PassportElementRentalAgreement -> return map(dto)
            is PassportElementPassportRegistration -> return map(dto)
            is PassportElementTemporaryRegistration -> return map(dto)
            is PassportElementPhoneNumber -> return map(dto)
            is PassportElementEmailAddress -> return map(dto)
        }
    }

    fun map(dto: PassportElementPersonalDetails): TdApi.PassportElementPersonalDetails {
        return TdApi.PassportElementPersonalDetails(
            personalDetails = map(dto.personalDetails),
        )
    }

    fun map(dto: PassportElementPassport): TdApi.PassportElementPassport {
        return TdApi.PassportElementPassport(
            passport = map(dto.passport),
        )
    }

    fun map(dto: PassportElementDriverLicense): TdApi.PassportElementDriverLicense {
        return TdApi.PassportElementDriverLicense(
            driverLicense = map(dto.driverLicense),
        )
    }

    fun map(dto: PassportElementIdentityCard): TdApi.PassportElementIdentityCard {
        return TdApi.PassportElementIdentityCard(
            identityCard = map(dto.identityCard),
        )
    }

    fun map(dto: PassportElementInternalPassport): TdApi.PassportElementInternalPassport {
        return TdApi.PassportElementInternalPassport(
            internalPassport = map(dto.internalPassport),
        )
    }

    fun map(dto: PassportElementAddress): TdApi.PassportElementAddress {
        return TdApi.PassportElementAddress(
            address = map(dto.address),
        )
    }

    fun map(dto: PassportElementUtilityBill): TdApi.PassportElementUtilityBill {
        return TdApi.PassportElementUtilityBill(
            utilityBill = map(dto.utilityBill),
        )
    }

    fun map(dto: PassportElementBankStatement): TdApi.PassportElementBankStatement {
        return TdApi.PassportElementBankStatement(
            bankStatement = map(dto.bankStatement),
        )
    }

    fun map(dto: PassportElementRentalAgreement): TdApi.PassportElementRentalAgreement {
        return TdApi.PassportElementRentalAgreement(
            rentalAgreement = map(dto.rentalAgreement),
        )
    }

    fun map(dto: PassportElementPassportRegistration): TdApi.PassportElementPassportRegistration {
        return TdApi.PassportElementPassportRegistration(
            passportRegistration = map(dto.passportRegistration),
        )
    }

    fun map(dto: PassportElementTemporaryRegistration): TdApi.PassportElementTemporaryRegistration {
        return TdApi.PassportElementTemporaryRegistration(
            temporaryRegistration = map(dto.temporaryRegistration),
        )
    }

    fun map(dto: PassportElementPhoneNumber): TdApi.PassportElementPhoneNumber {
        return TdApi.PassportElementPhoneNumber(
            phoneNumber = dto.phoneNumber,
        )
    }

    fun map(dto: PassportElementEmailAddress): TdApi.PassportElementEmailAddress {
        return TdApi.PassportElementEmailAddress(
            emailAddress = dto.emailAddress,
        )
    }

    fun map(dto: TdApi.PassportElementError): PassportElementError {
        return PassportElementError(
            type = map(dto.type),
            message = dto.message,
            source = map(dto.source),
        )
    }

    fun map(dto: PassportElementError): TdApi.PassportElementError {
        return TdApi.PassportElementError(
            type = map(dto.type),
            message = dto.message,
            source = map(dto.source),
        )
    }

    fun map(dto: TdApi.PassportElementErrorSource): PassportElementErrorSource {
        when (dto) {
            is TdApi.PassportElementErrorSourceUnspecified -> return map(dto)
            is TdApi.PassportElementErrorSourceDataField -> return map(dto)
            is TdApi.PassportElementErrorSourceFrontSide -> return map(dto)
            is TdApi.PassportElementErrorSourceReverseSide -> return map(dto)
            is TdApi.PassportElementErrorSourceSelfie -> return map(dto)
            is TdApi.PassportElementErrorSourceTranslationFile -> return map(dto)
            is TdApi.PassportElementErrorSourceTranslationFiles -> return map(dto)
            is TdApi.PassportElementErrorSourceFile -> return map(dto)
            is TdApi.PassportElementErrorSourceFiles -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PassportElementErrorSourceUnspecified): PassportElementErrorSourceUnspecified {
        return PassportElementErrorSourceUnspecified()
    }

    fun map(dto: TdApi.PassportElementErrorSourceDataField): PassportElementErrorSourceDataField {
        return PassportElementErrorSourceDataField(
            fieldName = dto.fieldName,
        )
    }

    fun map(dto: TdApi.PassportElementErrorSourceFrontSide): PassportElementErrorSourceFrontSide {
        return PassportElementErrorSourceFrontSide()
    }

    fun map(dto: TdApi.PassportElementErrorSourceReverseSide): PassportElementErrorSourceReverseSide {
        return PassportElementErrorSourceReverseSide()
    }

    fun map(dto: TdApi.PassportElementErrorSourceSelfie): PassportElementErrorSourceSelfie {
        return PassportElementErrorSourceSelfie()
    }

    fun map(dto: TdApi.PassportElementErrorSourceTranslationFile): PassportElementErrorSourceTranslationFile {
        return PassportElementErrorSourceTranslationFile(
            fileIndex = dto.fileIndex,
        )
    }

    fun map(dto: TdApi.PassportElementErrorSourceTranslationFiles): PassportElementErrorSourceTranslationFiles {
        return PassportElementErrorSourceTranslationFiles()
    }

    fun map(dto: TdApi.PassportElementErrorSourceFile): PassportElementErrorSourceFile {
        return PassportElementErrorSourceFile(
            fileIndex = dto.fileIndex,
        )
    }

    fun map(dto: TdApi.PassportElementErrorSourceFiles): PassportElementErrorSourceFiles {
        return PassportElementErrorSourceFiles()
    }

    fun map(dto: PassportElementErrorSource): TdApi.PassportElementErrorSource {
        when (dto) {
            is PassportElementErrorSourceUnspecified -> return map(dto)
            is PassportElementErrorSourceDataField -> return map(dto)
            is PassportElementErrorSourceFrontSide -> return map(dto)
            is PassportElementErrorSourceReverseSide -> return map(dto)
            is PassportElementErrorSourceSelfie -> return map(dto)
            is PassportElementErrorSourceTranslationFile -> return map(dto)
            is PassportElementErrorSourceTranslationFiles -> return map(dto)
            is PassportElementErrorSourceFile -> return map(dto)
            is PassportElementErrorSourceFiles -> return map(dto)
        }
    }

    fun map(dto: PassportElementErrorSourceUnspecified): TdApi.PassportElementErrorSourceUnspecified {
        return TdApi.PassportElementErrorSourceUnspecified()
    }

    fun map(dto: PassportElementErrorSourceDataField): TdApi.PassportElementErrorSourceDataField {
        return TdApi.PassportElementErrorSourceDataField(
            fieldName = dto.fieldName,
        )
    }

    fun map(dto: PassportElementErrorSourceFrontSide): TdApi.PassportElementErrorSourceFrontSide {
        return TdApi.PassportElementErrorSourceFrontSide()
    }

    fun map(dto: PassportElementErrorSourceReverseSide): TdApi.PassportElementErrorSourceReverseSide {
        return TdApi.PassportElementErrorSourceReverseSide()
    }

    fun map(dto: PassportElementErrorSourceSelfie): TdApi.PassportElementErrorSourceSelfie {
        return TdApi.PassportElementErrorSourceSelfie()
    }

    fun map(dto: PassportElementErrorSourceTranslationFile): TdApi.PassportElementErrorSourceTranslationFile {
        return TdApi.PassportElementErrorSourceTranslationFile(
            fileIndex = dto.fileIndex,
        )
    }

    fun map(dto: PassportElementErrorSourceTranslationFiles): TdApi.PassportElementErrorSourceTranslationFiles {
        return TdApi.PassportElementErrorSourceTranslationFiles()
    }

    fun map(dto: PassportElementErrorSourceFile): TdApi.PassportElementErrorSourceFile {
        return TdApi.PassportElementErrorSourceFile(
            fileIndex = dto.fileIndex,
        )
    }

    fun map(dto: PassportElementErrorSourceFiles): TdApi.PassportElementErrorSourceFiles {
        return TdApi.PassportElementErrorSourceFiles()
    }

    fun map(dto: TdApi.PassportElementType): PassportElementType {
        when (dto) {
            is TdApi.PassportElementTypePersonalDetails -> return map(dto)
            is TdApi.PassportElementTypePassport -> return map(dto)
            is TdApi.PassportElementTypeDriverLicense -> return map(dto)
            is TdApi.PassportElementTypeIdentityCard -> return map(dto)
            is TdApi.PassportElementTypeInternalPassport -> return map(dto)
            is TdApi.PassportElementTypeAddress -> return map(dto)
            is TdApi.PassportElementTypeUtilityBill -> return map(dto)
            is TdApi.PassportElementTypeBankStatement -> return map(dto)
            is TdApi.PassportElementTypeRentalAgreement -> return map(dto)
            is TdApi.PassportElementTypePassportRegistration -> return map(dto)
            is TdApi.PassportElementTypeTemporaryRegistration -> return map(dto)
            is TdApi.PassportElementTypePhoneNumber -> return map(dto)
            is TdApi.PassportElementTypeEmailAddress -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PassportElementTypePersonalDetails): PassportElementTypePersonalDetails {
        return PassportElementTypePersonalDetails()
    }

    fun map(dto: TdApi.PassportElementTypePassport): PassportElementTypePassport {
        return PassportElementTypePassport()
    }

    fun map(dto: TdApi.PassportElementTypeDriverLicense): PassportElementTypeDriverLicense {
        return PassportElementTypeDriverLicense()
    }

    fun map(dto: TdApi.PassportElementTypeIdentityCard): PassportElementTypeIdentityCard {
        return PassportElementTypeIdentityCard()
    }

    fun map(dto: TdApi.PassportElementTypeInternalPassport): PassportElementTypeInternalPassport {
        return PassportElementTypeInternalPassport()
    }

    fun map(dto: TdApi.PassportElementTypeAddress): PassportElementTypeAddress {
        return PassportElementTypeAddress()
    }

    fun map(dto: TdApi.PassportElementTypeUtilityBill): PassportElementTypeUtilityBill {
        return PassportElementTypeUtilityBill()
    }

    fun map(dto: TdApi.PassportElementTypeBankStatement): PassportElementTypeBankStatement {
        return PassportElementTypeBankStatement()
    }

    fun map(dto: TdApi.PassportElementTypeRentalAgreement): PassportElementTypeRentalAgreement {
        return PassportElementTypeRentalAgreement()
    }

    fun map(dto: TdApi.PassportElementTypePassportRegistration): PassportElementTypePassportRegistration {
        return PassportElementTypePassportRegistration()
    }

    fun map(dto: TdApi.PassportElementTypeTemporaryRegistration): PassportElementTypeTemporaryRegistration {
        return PassportElementTypeTemporaryRegistration()
    }

    fun map(dto: TdApi.PassportElementTypePhoneNumber): PassportElementTypePhoneNumber {
        return PassportElementTypePhoneNumber()
    }

    fun map(dto: TdApi.PassportElementTypeEmailAddress): PassportElementTypeEmailAddress {
        return PassportElementTypeEmailAddress()
    }

    fun map(dto: PassportElementType): TdApi.PassportElementType {
        when (dto) {
            is PassportElementTypePersonalDetails -> return map(dto)
            is PassportElementTypePassport -> return map(dto)
            is PassportElementTypeDriverLicense -> return map(dto)
            is PassportElementTypeIdentityCard -> return map(dto)
            is PassportElementTypeInternalPassport -> return map(dto)
            is PassportElementTypeAddress -> return map(dto)
            is PassportElementTypeUtilityBill -> return map(dto)
            is PassportElementTypeBankStatement -> return map(dto)
            is PassportElementTypeRentalAgreement -> return map(dto)
            is PassportElementTypePassportRegistration -> return map(dto)
            is PassportElementTypeTemporaryRegistration -> return map(dto)
            is PassportElementTypePhoneNumber -> return map(dto)
            is PassportElementTypeEmailAddress -> return map(dto)
        }
    }

    fun map(dto: PassportElementTypePersonalDetails): TdApi.PassportElementTypePersonalDetails {
        return TdApi.PassportElementTypePersonalDetails()
    }

    fun map(dto: PassportElementTypePassport): TdApi.PassportElementTypePassport {
        return TdApi.PassportElementTypePassport()
    }

    fun map(dto: PassportElementTypeDriverLicense): TdApi.PassportElementTypeDriverLicense {
        return TdApi.PassportElementTypeDriverLicense()
    }

    fun map(dto: PassportElementTypeIdentityCard): TdApi.PassportElementTypeIdentityCard {
        return TdApi.PassportElementTypeIdentityCard()
    }

    fun map(dto: PassportElementTypeInternalPassport): TdApi.PassportElementTypeInternalPassport {
        return TdApi.PassportElementTypeInternalPassport()
    }

    fun map(dto: PassportElementTypeAddress): TdApi.PassportElementTypeAddress {
        return TdApi.PassportElementTypeAddress()
    }

    fun map(dto: PassportElementTypeUtilityBill): TdApi.PassportElementTypeUtilityBill {
        return TdApi.PassportElementTypeUtilityBill()
    }

    fun map(dto: PassportElementTypeBankStatement): TdApi.PassportElementTypeBankStatement {
        return TdApi.PassportElementTypeBankStatement()
    }

    fun map(dto: PassportElementTypeRentalAgreement): TdApi.PassportElementTypeRentalAgreement {
        return TdApi.PassportElementTypeRentalAgreement()
    }

    fun map(dto: PassportElementTypePassportRegistration): TdApi.PassportElementTypePassportRegistration {
        return TdApi.PassportElementTypePassportRegistration()
    }

    fun map(dto: PassportElementTypeTemporaryRegistration): TdApi.PassportElementTypeTemporaryRegistration {
        return TdApi.PassportElementTypeTemporaryRegistration()
    }

    fun map(dto: PassportElementTypePhoneNumber): TdApi.PassportElementTypePhoneNumber {
        return TdApi.PassportElementTypePhoneNumber()
    }

    fun map(dto: PassportElementTypeEmailAddress): TdApi.PassportElementTypeEmailAddress {
        return TdApi.PassportElementTypeEmailAddress()
    }

    fun map(dto: TdApi.PassportElements): PassportElements {
        return PassportElements(
            elements = dto.elements.mapArray { map(it) },
        )
    }

    fun map(dto: PassportElements): TdApi.PassportElements {
        return TdApi.PassportElements(
            elements = dto.elements.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.PassportElementsWithErrors): PassportElementsWithErrors {
        return PassportElementsWithErrors(
            elements = dto.elements.mapArray { map(it) },
            errors = dto.errors.mapArray { map(it) },
        )
    }

    fun map(dto: PassportElementsWithErrors): TdApi.PassportElementsWithErrors {
        return TdApi.PassportElementsWithErrors(
            elements = dto.elements.mapArray { map(it) },
            errors = dto.errors.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.PassportRequiredElement): PassportRequiredElement {
        return PassportRequiredElement(
            suitableElements = dto.suitableElements.mapArray { map(it) },
        )
    }

    fun map(dto: PassportRequiredElement): TdApi.PassportRequiredElement {
        return TdApi.PassportRequiredElement(
            suitableElements = dto.suitableElements.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.PassportSuitableElement): PassportSuitableElement {
        return PassportSuitableElement(
            type = map(dto.type),
            isSelfieRequired = dto.isSelfieRequired,
            isTranslationRequired = dto.isTranslationRequired,
            isNativeNameRequired = dto.isNativeNameRequired,
        )
    }

    fun map(dto: PassportSuitableElement): TdApi.PassportSuitableElement {
        return TdApi.PassportSuitableElement(
            type = map(dto.type),
            isSelfieRequired = dto.isSelfieRequired,
            isTranslationRequired = dto.isTranslationRequired,
            isNativeNameRequired = dto.isNativeNameRequired,
        )
    }

    fun map(dto: TdApi.PasswordState): PasswordState {
        return PasswordState(
            hasPassword = dto.hasPassword,
            passwordHint = dto.passwordHint,
            hasRecoveryEmailAddress = dto.hasRecoveryEmailAddress,
            hasPassportData = dto.hasPassportData,
            recoveryEmailAddressCodeInfo = dto.recoveryEmailAddressCodeInfo?.let { map(it) },
            loginEmailAddressPattern = dto.loginEmailAddressPattern,
            pendingResetDate = dto.pendingResetDate,
        )
    }

    fun map(dto: PasswordState): TdApi.PasswordState {
        return TdApi.PasswordState(
            hasPassword = dto.hasPassword,
            passwordHint = dto.passwordHint,
            hasRecoveryEmailAddress = dto.hasRecoveryEmailAddress,
            hasPassportData = dto.hasPassportData,
            recoveryEmailAddressCodeInfo = dto.recoveryEmailAddressCodeInfo?.let { map(it) },
            loginEmailAddressPattern = dto.loginEmailAddressPattern,
            pendingResetDate = dto.pendingResetDate,
        )
    }

    fun map(dto: TdApi.PaymentForm): PaymentForm {
        return PaymentForm(
            id = dto.id,
            type = map(dto.type),
            sellerBotUserId = dto.sellerBotUserId,
            productInfo = map(dto.productInfo),
        )
    }

    fun map(dto: PaymentForm): TdApi.PaymentForm {
        return TdApi.PaymentForm(
            id = dto.id,
            type = map(dto.type),
            sellerBotUserId = dto.sellerBotUserId,
            productInfo = map(dto.productInfo),
        )
    }

    fun map(dto: TdApi.PaymentFormType): PaymentFormType {
        when (dto) {
            is TdApi.PaymentFormTypeRegular -> return map(dto)
            is TdApi.PaymentFormTypeStars -> return map(dto)
            is TdApi.PaymentFormTypeStarSubscription -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PaymentFormTypeRegular): PaymentFormTypeRegular {
        return PaymentFormTypeRegular(
            invoice = map(dto.invoice),
            paymentProviderUserId = dto.paymentProviderUserId,
            paymentProvider = map(dto.paymentProvider),
            additionalPaymentOptions = dto.additionalPaymentOptions.mapArray { map(it) },
            savedOrderInfo = dto.savedOrderInfo?.let { map(it) },
            savedCredentials = dto.savedCredentials.mapArray { map(it) },
            canSaveCredentials = dto.canSaveCredentials,
            needPassword = dto.needPassword,
        )
    }

    fun map(dto: TdApi.PaymentFormTypeStars): PaymentFormTypeStars {
        return PaymentFormTypeStars(
            starCount = dto.starCount,
        )
    }

    fun map(dto: TdApi.PaymentFormTypeStarSubscription): PaymentFormTypeStarSubscription {
        return PaymentFormTypeStarSubscription(
            pricing = map(dto.pricing),
        )
    }

    fun map(dto: PaymentFormType): TdApi.PaymentFormType {
        when (dto) {
            is PaymentFormTypeRegular -> return map(dto)
            is PaymentFormTypeStars -> return map(dto)
            is PaymentFormTypeStarSubscription -> return map(dto)
        }
    }

    fun map(dto: PaymentFormTypeRegular): TdApi.PaymentFormTypeRegular {
        return TdApi.PaymentFormTypeRegular(
            invoice = map(dto.invoice),
            paymentProviderUserId = dto.paymentProviderUserId,
            paymentProvider = map(dto.paymentProvider),
            additionalPaymentOptions = dto.additionalPaymentOptions.mapArray { map(it) },
            savedOrderInfo = dto.savedOrderInfo?.let { map(it) },
            savedCredentials = dto.savedCredentials.mapArray { map(it) },
            canSaveCredentials = dto.canSaveCredentials,
            needPassword = dto.needPassword,
        )
    }

    fun map(dto: PaymentFormTypeStars): TdApi.PaymentFormTypeStars {
        return TdApi.PaymentFormTypeStars(
            starCount = dto.starCount,
        )
    }

    fun map(dto: PaymentFormTypeStarSubscription): TdApi.PaymentFormTypeStarSubscription {
        return TdApi.PaymentFormTypeStarSubscription(
            pricing = map(dto.pricing),
        )
    }

    fun map(dto: TdApi.PaymentOption): PaymentOption {
        return PaymentOption(
            title = dto.title,
            url = dto.url,
        )
    }

    fun map(dto: PaymentOption): TdApi.PaymentOption {
        return TdApi.PaymentOption(
            title = dto.title,
            url = dto.url,
        )
    }

    fun map(dto: TdApi.PaymentProvider): PaymentProvider {
        when (dto) {
            is TdApi.PaymentProviderSmartGlocal -> return map(dto)
            is TdApi.PaymentProviderStripe -> return map(dto)
            is TdApi.PaymentProviderOther -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PaymentProviderSmartGlocal): PaymentProviderSmartGlocal {
        return PaymentProviderSmartGlocal(
            publicToken = dto.publicToken,
            tokenizeUrl = dto.tokenizeUrl,
        )
    }

    fun map(dto: TdApi.PaymentProviderStripe): PaymentProviderStripe {
        return PaymentProviderStripe(
            publishableKey = dto.publishableKey,
            needCountry = dto.needCountry,
            needPostalCode = dto.needPostalCode,
            needCardholderName = dto.needCardholderName,
        )
    }

    fun map(dto: TdApi.PaymentProviderOther): PaymentProviderOther {
        return PaymentProviderOther(
            url = dto.url,
        )
    }

    fun map(dto: PaymentProvider): TdApi.PaymentProvider {
        when (dto) {
            is PaymentProviderSmartGlocal -> return map(dto)
            is PaymentProviderStripe -> return map(dto)
            is PaymentProviderOther -> return map(dto)
        }
    }

    fun map(dto: PaymentProviderSmartGlocal): TdApi.PaymentProviderSmartGlocal {
        return TdApi.PaymentProviderSmartGlocal(
            publicToken = dto.publicToken,
            tokenizeUrl = dto.tokenizeUrl,
        )
    }

    fun map(dto: PaymentProviderStripe): TdApi.PaymentProviderStripe {
        return TdApi.PaymentProviderStripe(
            publishableKey = dto.publishableKey,
            needCountry = dto.needCountry,
            needPostalCode = dto.needPostalCode,
            needCardholderName = dto.needCardholderName,
        )
    }

    fun map(dto: PaymentProviderOther): TdApi.PaymentProviderOther {
        return TdApi.PaymentProviderOther(
            url = dto.url,
        )
    }

    fun map(dto: TdApi.PaymentReceipt): PaymentReceipt {
        return PaymentReceipt(
            productInfo = map(dto.productInfo),
            date = dto.date,
            sellerBotUserId = dto.sellerBotUserId,
            type = map(dto.type),
        )
    }

    fun map(dto: PaymentReceipt): TdApi.PaymentReceipt {
        return TdApi.PaymentReceipt(
            productInfo = map(dto.productInfo),
            date = dto.date,
            sellerBotUserId = dto.sellerBotUserId,
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.PaymentReceiptType): PaymentReceiptType {
        when (dto) {
            is TdApi.PaymentReceiptTypeRegular -> return map(dto)
            is TdApi.PaymentReceiptTypeStars -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PaymentReceiptTypeRegular): PaymentReceiptTypeRegular {
        return PaymentReceiptTypeRegular(
            paymentProviderUserId = dto.paymentProviderUserId,
            invoice = map(dto.invoice),
            orderInfo = dto.orderInfo?.let { map(it) },
            shippingOption = dto.shippingOption?.let { map(it) },
            credentialsTitle = dto.credentialsTitle,
            tipAmount = dto.tipAmount,
        )
    }

    fun map(dto: TdApi.PaymentReceiptTypeStars): PaymentReceiptTypeStars {
        return PaymentReceiptTypeStars(
            starCount = dto.starCount,
            transactionId = dto.transactionId,
        )
    }

    fun map(dto: PaymentReceiptType): TdApi.PaymentReceiptType {
        when (dto) {
            is PaymentReceiptTypeRegular -> return map(dto)
            is PaymentReceiptTypeStars -> return map(dto)
        }
    }

    fun map(dto: PaymentReceiptTypeRegular): TdApi.PaymentReceiptTypeRegular {
        return TdApi.PaymentReceiptTypeRegular(
            paymentProviderUserId = dto.paymentProviderUserId,
            invoice = map(dto.invoice),
            orderInfo = dto.orderInfo?.let { map(it) },
            shippingOption = dto.shippingOption?.let { map(it) },
            credentialsTitle = dto.credentialsTitle,
            tipAmount = dto.tipAmount,
        )
    }

    fun map(dto: PaymentReceiptTypeStars): TdApi.PaymentReceiptTypeStars {
        return TdApi.PaymentReceiptTypeStars(
            starCount = dto.starCount,
            transactionId = dto.transactionId,
        )
    }

    fun map(dto: TdApi.PaymentResult): PaymentResult {
        return PaymentResult(
            success = dto.success,
            verificationUrl = dto.verificationUrl,
        )
    }

    fun map(dto: PaymentResult): TdApi.PaymentResult {
        return TdApi.PaymentResult(
            success = dto.success,
            verificationUrl = dto.verificationUrl,
        )
    }

    fun map(dto: TdApi.PersonalDetails): PersonalDetails {
        return PersonalDetails(
            firstName = dto.firstName,
            middleName = dto.middleName,
            lastName = dto.lastName,
            nativeFirstName = dto.nativeFirstName,
            nativeMiddleName = dto.nativeMiddleName,
            nativeLastName = dto.nativeLastName,
            birthdate = map(dto.birthdate),
            gender = dto.gender,
            countryCode = dto.countryCode,
            residenceCountryCode = dto.residenceCountryCode,
        )
    }

    fun map(dto: PersonalDetails): TdApi.PersonalDetails {
        return TdApi.PersonalDetails(
            firstName = dto.firstName,
            middleName = dto.middleName,
            lastName = dto.lastName,
            nativeFirstName = dto.nativeFirstName,
            nativeMiddleName = dto.nativeMiddleName,
            nativeLastName = dto.nativeLastName,
            birthdate = map(dto.birthdate),
            gender = dto.gender,
            countryCode = dto.countryCode,
            residenceCountryCode = dto.residenceCountryCode,
        )
    }

    fun map(dto: TdApi.PersonalDocument): PersonalDocument {
        return PersonalDocument(
            files = dto.files.mapArray { map(it) },
            translation = dto.translation.mapArray { map(it) },
        )
    }

    fun map(dto: PersonalDocument): TdApi.PersonalDocument {
        return TdApi.PersonalDocument(
            files = dto.files.mapArray { map(it) },
            translation = dto.translation.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.PhoneNumberAuthenticationSettings): PhoneNumberAuthenticationSettings {
        return PhoneNumberAuthenticationSettings(
            allowFlashCall = dto.allowFlashCall,
            allowMissedCall = dto.allowMissedCall,
            isCurrentPhoneNumber = dto.isCurrentPhoneNumber,
            hasUnknownPhoneNumber = dto.hasUnknownPhoneNumber,
            allowSmsRetrieverApi = dto.allowSmsRetrieverApi,
            firebaseAuthenticationSettings = dto.firebaseAuthenticationSettings?.let { map(it) },
            authenticationTokens = dto.authenticationTokens,
        )
    }

    fun map(dto: PhoneNumberAuthenticationSettings): TdApi.PhoneNumberAuthenticationSettings {
        return TdApi.PhoneNumberAuthenticationSettings(
            allowFlashCall = dto.allowFlashCall,
            allowMissedCall = dto.allowMissedCall,
            isCurrentPhoneNumber = dto.isCurrentPhoneNumber,
            hasUnknownPhoneNumber = dto.hasUnknownPhoneNumber,
            allowSmsRetrieverApi = dto.allowSmsRetrieverApi,
            firebaseAuthenticationSettings = dto.firebaseAuthenticationSettings?.let { map(it) },
            authenticationTokens = dto.authenticationTokens,
        )
    }

    fun map(dto: TdApi.PhoneNumberCodeType): PhoneNumberCodeType {
        when (dto) {
            is TdApi.PhoneNumberCodeTypeChange -> return map(dto)
            is TdApi.PhoneNumberCodeTypeVerify -> return map(dto)
            is TdApi.PhoneNumberCodeTypeConfirmOwnership -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PhoneNumberCodeTypeChange): PhoneNumberCodeTypeChange {
        return PhoneNumberCodeTypeChange()
    }

    fun map(dto: TdApi.PhoneNumberCodeTypeVerify): PhoneNumberCodeTypeVerify {
        return PhoneNumberCodeTypeVerify()
    }

    fun map(dto: TdApi.PhoneNumberCodeTypeConfirmOwnership): PhoneNumberCodeTypeConfirmOwnership {
        return PhoneNumberCodeTypeConfirmOwnership(
            hash = dto.hash,
        )
    }

    fun map(dto: PhoneNumberCodeType): TdApi.PhoneNumberCodeType {
        when (dto) {
            is PhoneNumberCodeTypeChange -> return map(dto)
            is PhoneNumberCodeTypeVerify -> return map(dto)
            is PhoneNumberCodeTypeConfirmOwnership -> return map(dto)
        }
    }

    fun map(dto: PhoneNumberCodeTypeChange): TdApi.PhoneNumberCodeTypeChange {
        return TdApi.PhoneNumberCodeTypeChange()
    }

    fun map(dto: PhoneNumberCodeTypeVerify): TdApi.PhoneNumberCodeTypeVerify {
        return TdApi.PhoneNumberCodeTypeVerify()
    }

    fun map(dto: PhoneNumberCodeTypeConfirmOwnership): TdApi.PhoneNumberCodeTypeConfirmOwnership {
        return TdApi.PhoneNumberCodeTypeConfirmOwnership(
            hash = dto.hash,
        )
    }

    fun map(dto: TdApi.PhoneNumberInfo): PhoneNumberInfo {
        return PhoneNumberInfo(
            country = dto.country?.let { map(it) },
            countryCallingCode = dto.countryCallingCode,
            formattedPhoneNumber = dto.formattedPhoneNumber,
            isAnonymous = dto.isAnonymous,
        )
    }

    fun map(dto: PhoneNumberInfo): TdApi.PhoneNumberInfo {
        return TdApi.PhoneNumberInfo(
            country = dto.country?.let { map(it) },
            countryCallingCode = dto.countryCallingCode,
            formattedPhoneNumber = dto.formattedPhoneNumber,
            isAnonymous = dto.isAnonymous,
        )
    }

    fun map(dto: TdApi.Photo): Photo {
        return Photo(
            hasStickers = dto.hasStickers,
            minithumbnail = dto.minithumbnail?.let { map(it) },
            sizes = dto.sizes.mapArray { map(it) },
        )
    }

    fun map(dto: Photo): TdApi.Photo {
        return TdApi.Photo(
            hasStickers = dto.hasStickers,
            minithumbnail = dto.minithumbnail?.let { map(it) },
            sizes = dto.sizes.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.PhotoSize): PhotoSize {
        return PhotoSize(
            type = dto.type,
            photo = map(dto.photo),
            width = dto.width,
            height = dto.height,
            progressiveSizes = dto.progressiveSizes,
        )
    }

    fun map(dto: PhotoSize): TdApi.PhotoSize {
        return TdApi.PhotoSize(
            type = dto.type,
            photo = map(dto.photo),
            width = dto.width,
            height = dto.height,
            progressiveSizes = dto.progressiveSizes,
        )
    }

    fun map(dto: TdApi.Point): Point {
        return Point(
            x = dto.x,
            y = dto.y,
        )
    }

    fun map(dto: Point): TdApi.Point {
        return TdApi.Point(
            x = dto.x,
            y = dto.y,
        )
    }

    fun map(dto: TdApi.Poll): Poll {
        return Poll(
            id = dto.id,
            question = map(dto.question),
            options = dto.options.mapArray { map(it) },
            totalVoterCount = dto.totalVoterCount,
            recentVoterIds = dto.recentVoterIds.mapArray { map(it) },
            isAnonymous = dto.isAnonymous,
            type = map(dto.type),
            openPeriod = dto.openPeriod,
            closeDate = dto.closeDate,
            isClosed = dto.isClosed,
        )
    }

    fun map(dto: Poll): TdApi.Poll {
        return TdApi.Poll(
            id = dto.id,
            question = map(dto.question),
            options = dto.options.mapArray { map(it) },
            totalVoterCount = dto.totalVoterCount,
            recentVoterIds = dto.recentVoterIds.mapArray { map(it) },
            isAnonymous = dto.isAnonymous,
            type = map(dto.type),
            openPeriod = dto.openPeriod,
            closeDate = dto.closeDate,
            isClosed = dto.isClosed,
        )
    }

    fun map(dto: TdApi.PollOption): PollOption {
        return PollOption(
            text = map(dto.text),
            voterCount = dto.voterCount,
            votePercentage = dto.votePercentage,
            isChosen = dto.isChosen,
            isBeingChosen = dto.isBeingChosen,
        )
    }

    fun map(dto: PollOption): TdApi.PollOption {
        return TdApi.PollOption(
            text = map(dto.text),
            voterCount = dto.voterCount,
            votePercentage = dto.votePercentage,
            isChosen = dto.isChosen,
            isBeingChosen = dto.isBeingChosen,
        )
    }

    fun map(dto: TdApi.PollType): PollType {
        when (dto) {
            is TdApi.PollTypeRegular -> return map(dto)
            is TdApi.PollTypeQuiz -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PollTypeRegular): PollTypeRegular {
        return PollTypeRegular(
            allowMultipleAnswers = dto.allowMultipleAnswers,
        )
    }

    fun map(dto: TdApi.PollTypeQuiz): PollTypeQuiz {
        return PollTypeQuiz(
            correctOptionId = dto.correctOptionId,
            explanation = map(dto.explanation),
        )
    }

    fun map(dto: PollType): TdApi.PollType {
        when (dto) {
            is PollTypeRegular -> return map(dto)
            is PollTypeQuiz -> return map(dto)
        }
    }

    fun map(dto: PollTypeRegular): TdApi.PollTypeRegular {
        return TdApi.PollTypeRegular(
            allowMultipleAnswers = dto.allowMultipleAnswers,
        )
    }

    fun map(dto: PollTypeQuiz): TdApi.PollTypeQuiz {
        return TdApi.PollTypeQuiz(
            correctOptionId = dto.correctOptionId,
            explanation = map(dto.explanation),
        )
    }

    fun map(dto: TdApi.PremiumFeature): PremiumFeature {
        when (dto) {
            is TdApi.PremiumFeatureIncreasedLimits -> return map(dto)
            is TdApi.PremiumFeatureIncreasedUploadFileSize -> return map(dto)
            is TdApi.PremiumFeatureImprovedDownloadSpeed -> return map(dto)
            is TdApi.PremiumFeatureVoiceRecognition -> return map(dto)
            is TdApi.PremiumFeatureDisabledAds -> return map(dto)
            is TdApi.PremiumFeatureUniqueReactions -> return map(dto)
            is TdApi.PremiumFeatureUniqueStickers -> return map(dto)
            is TdApi.PremiumFeatureCustomEmoji -> return map(dto)
            is TdApi.PremiumFeatureAdvancedChatManagement -> return map(dto)
            is TdApi.PremiumFeatureProfileBadge -> return map(dto)
            is TdApi.PremiumFeatureEmojiStatus -> return map(dto)
            is TdApi.PremiumFeatureAnimatedProfilePhoto -> return map(dto)
            is TdApi.PremiumFeatureForumTopicIcon -> return map(dto)
            is TdApi.PremiumFeatureAppIcons -> return map(dto)
            is TdApi.PremiumFeatureRealTimeChatTranslation -> return map(dto)
            is TdApi.PremiumFeatureUpgradedStories -> return map(dto)
            is TdApi.PremiumFeatureChatBoost -> return map(dto)
            is TdApi.PremiumFeatureAccentColor -> return map(dto)
            is TdApi.PremiumFeatureBackgroundForBoth -> return map(dto)
            is TdApi.PremiumFeatureSavedMessagesTags -> return map(dto)
            is TdApi.PremiumFeatureMessagePrivacy -> return map(dto)
            is TdApi.PremiumFeatureLastSeenTimes -> return map(dto)
            is TdApi.PremiumFeatureBusiness -> return map(dto)
            is TdApi.PremiumFeatureMessageEffects -> return map(dto)
            is TdApi.PremiumFeatureChecklists -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PremiumFeatureIncreasedLimits): PremiumFeatureIncreasedLimits {
        return PremiumFeatureIncreasedLimits()
    }

    fun map(dto: TdApi.PremiumFeatureIncreasedUploadFileSize): PremiumFeatureIncreasedUploadFileSize {
        return PremiumFeatureIncreasedUploadFileSize()
    }

    fun map(dto: TdApi.PremiumFeatureImprovedDownloadSpeed): PremiumFeatureImprovedDownloadSpeed {
        return PremiumFeatureImprovedDownloadSpeed()
    }

    fun map(dto: TdApi.PremiumFeatureVoiceRecognition): PremiumFeatureVoiceRecognition {
        return PremiumFeatureVoiceRecognition()
    }

    fun map(dto: TdApi.PremiumFeatureDisabledAds): PremiumFeatureDisabledAds {
        return PremiumFeatureDisabledAds()
    }

    fun map(dto: TdApi.PremiumFeatureUniqueReactions): PremiumFeatureUniqueReactions {
        return PremiumFeatureUniqueReactions()
    }

    fun map(dto: TdApi.PremiumFeatureUniqueStickers): PremiumFeatureUniqueStickers {
        return PremiumFeatureUniqueStickers()
    }

    fun map(dto: TdApi.PremiumFeatureCustomEmoji): PremiumFeatureCustomEmoji {
        return PremiumFeatureCustomEmoji()
    }

    fun map(dto: TdApi.PremiumFeatureAdvancedChatManagement): PremiumFeatureAdvancedChatManagement {
        return PremiumFeatureAdvancedChatManagement()
    }

    fun map(dto: TdApi.PremiumFeatureProfileBadge): PremiumFeatureProfileBadge {
        return PremiumFeatureProfileBadge()
    }

    fun map(dto: TdApi.PremiumFeatureEmojiStatus): PremiumFeatureEmojiStatus {
        return PremiumFeatureEmojiStatus()
    }

    fun map(dto: TdApi.PremiumFeatureAnimatedProfilePhoto): PremiumFeatureAnimatedProfilePhoto {
        return PremiumFeatureAnimatedProfilePhoto()
    }

    fun map(dto: TdApi.PremiumFeatureForumTopicIcon): PremiumFeatureForumTopicIcon {
        return PremiumFeatureForumTopicIcon()
    }

    fun map(dto: TdApi.PremiumFeatureAppIcons): PremiumFeatureAppIcons {
        return PremiumFeatureAppIcons()
    }

    fun map(dto: TdApi.PremiumFeatureRealTimeChatTranslation): PremiumFeatureRealTimeChatTranslation {
        return PremiumFeatureRealTimeChatTranslation()
    }

    fun map(dto: TdApi.PremiumFeatureUpgradedStories): PremiumFeatureUpgradedStories {
        return PremiumFeatureUpgradedStories()
    }

    fun map(dto: TdApi.PremiumFeatureChatBoost): PremiumFeatureChatBoost {
        return PremiumFeatureChatBoost()
    }

    fun map(dto: TdApi.PremiumFeatureAccentColor): PremiumFeatureAccentColor {
        return PremiumFeatureAccentColor()
    }

    fun map(dto: TdApi.PremiumFeatureBackgroundForBoth): PremiumFeatureBackgroundForBoth {
        return PremiumFeatureBackgroundForBoth()
    }

    fun map(dto: TdApi.PremiumFeatureSavedMessagesTags): PremiumFeatureSavedMessagesTags {
        return PremiumFeatureSavedMessagesTags()
    }

    fun map(dto: TdApi.PremiumFeatureMessagePrivacy): PremiumFeatureMessagePrivacy {
        return PremiumFeatureMessagePrivacy()
    }

    fun map(dto: TdApi.PremiumFeatureLastSeenTimes): PremiumFeatureLastSeenTimes {
        return PremiumFeatureLastSeenTimes()
    }

    fun map(dto: TdApi.PremiumFeatureBusiness): PremiumFeatureBusiness {
        return PremiumFeatureBusiness()
    }

    fun map(dto: TdApi.PremiumFeatureMessageEffects): PremiumFeatureMessageEffects {
        return PremiumFeatureMessageEffects()
    }

    fun map(dto: TdApi.PremiumFeatureChecklists): PremiumFeatureChecklists {
        return PremiumFeatureChecklists()
    }

    fun map(dto: PremiumFeature): TdApi.PremiumFeature {
        when (dto) {
            is PremiumFeatureIncreasedLimits -> return map(dto)
            is PremiumFeatureIncreasedUploadFileSize -> return map(dto)
            is PremiumFeatureImprovedDownloadSpeed -> return map(dto)
            is PremiumFeatureVoiceRecognition -> return map(dto)
            is PremiumFeatureDisabledAds -> return map(dto)
            is PremiumFeatureUniqueReactions -> return map(dto)
            is PremiumFeatureUniqueStickers -> return map(dto)
            is PremiumFeatureCustomEmoji -> return map(dto)
            is PremiumFeatureAdvancedChatManagement -> return map(dto)
            is PremiumFeatureProfileBadge -> return map(dto)
            is PremiumFeatureEmojiStatus -> return map(dto)
            is PremiumFeatureAnimatedProfilePhoto -> return map(dto)
            is PremiumFeatureForumTopicIcon -> return map(dto)
            is PremiumFeatureAppIcons -> return map(dto)
            is PremiumFeatureRealTimeChatTranslation -> return map(dto)
            is PremiumFeatureUpgradedStories -> return map(dto)
            is PremiumFeatureChatBoost -> return map(dto)
            is PremiumFeatureAccentColor -> return map(dto)
            is PremiumFeatureBackgroundForBoth -> return map(dto)
            is PremiumFeatureSavedMessagesTags -> return map(dto)
            is PremiumFeatureMessagePrivacy -> return map(dto)
            is PremiumFeatureLastSeenTimes -> return map(dto)
            is PremiumFeatureBusiness -> return map(dto)
            is PremiumFeatureMessageEffects -> return map(dto)
            is PremiumFeatureChecklists -> return map(dto)
        }
    }

    fun map(dto: PremiumFeatureIncreasedLimits): TdApi.PremiumFeatureIncreasedLimits {
        return TdApi.PremiumFeatureIncreasedLimits()
    }

    fun map(dto: PremiumFeatureIncreasedUploadFileSize): TdApi.PremiumFeatureIncreasedUploadFileSize {
        return TdApi.PremiumFeatureIncreasedUploadFileSize()
    }

    fun map(dto: PremiumFeatureImprovedDownloadSpeed): TdApi.PremiumFeatureImprovedDownloadSpeed {
        return TdApi.PremiumFeatureImprovedDownloadSpeed()
    }

    fun map(dto: PremiumFeatureVoiceRecognition): TdApi.PremiumFeatureVoiceRecognition {
        return TdApi.PremiumFeatureVoiceRecognition()
    }

    fun map(dto: PremiumFeatureDisabledAds): TdApi.PremiumFeatureDisabledAds {
        return TdApi.PremiumFeatureDisabledAds()
    }

    fun map(dto: PremiumFeatureUniqueReactions): TdApi.PremiumFeatureUniqueReactions {
        return TdApi.PremiumFeatureUniqueReactions()
    }

    fun map(dto: PremiumFeatureUniqueStickers): TdApi.PremiumFeatureUniqueStickers {
        return TdApi.PremiumFeatureUniqueStickers()
    }

    fun map(dto: PremiumFeatureCustomEmoji): TdApi.PremiumFeatureCustomEmoji {
        return TdApi.PremiumFeatureCustomEmoji()
    }

    fun map(dto: PremiumFeatureAdvancedChatManagement): TdApi.PremiumFeatureAdvancedChatManagement {
        return TdApi.PremiumFeatureAdvancedChatManagement()
    }

    fun map(dto: PremiumFeatureProfileBadge): TdApi.PremiumFeatureProfileBadge {
        return TdApi.PremiumFeatureProfileBadge()
    }

    fun map(dto: PremiumFeatureEmojiStatus): TdApi.PremiumFeatureEmojiStatus {
        return TdApi.PremiumFeatureEmojiStatus()
    }

    fun map(dto: PremiumFeatureAnimatedProfilePhoto): TdApi.PremiumFeatureAnimatedProfilePhoto {
        return TdApi.PremiumFeatureAnimatedProfilePhoto()
    }

    fun map(dto: PremiumFeatureForumTopicIcon): TdApi.PremiumFeatureForumTopicIcon {
        return TdApi.PremiumFeatureForumTopicIcon()
    }

    fun map(dto: PremiumFeatureAppIcons): TdApi.PremiumFeatureAppIcons {
        return TdApi.PremiumFeatureAppIcons()
    }

    fun map(dto: PremiumFeatureRealTimeChatTranslation): TdApi.PremiumFeatureRealTimeChatTranslation {
        return TdApi.PremiumFeatureRealTimeChatTranslation()
    }

    fun map(dto: PremiumFeatureUpgradedStories): TdApi.PremiumFeatureUpgradedStories {
        return TdApi.PremiumFeatureUpgradedStories()
    }

    fun map(dto: PremiumFeatureChatBoost): TdApi.PremiumFeatureChatBoost {
        return TdApi.PremiumFeatureChatBoost()
    }

    fun map(dto: PremiumFeatureAccentColor): TdApi.PremiumFeatureAccentColor {
        return TdApi.PremiumFeatureAccentColor()
    }

    fun map(dto: PremiumFeatureBackgroundForBoth): TdApi.PremiumFeatureBackgroundForBoth {
        return TdApi.PremiumFeatureBackgroundForBoth()
    }

    fun map(dto: PremiumFeatureSavedMessagesTags): TdApi.PremiumFeatureSavedMessagesTags {
        return TdApi.PremiumFeatureSavedMessagesTags()
    }

    fun map(dto: PremiumFeatureMessagePrivacy): TdApi.PremiumFeatureMessagePrivacy {
        return TdApi.PremiumFeatureMessagePrivacy()
    }

    fun map(dto: PremiumFeatureLastSeenTimes): TdApi.PremiumFeatureLastSeenTimes {
        return TdApi.PremiumFeatureLastSeenTimes()
    }

    fun map(dto: PremiumFeatureBusiness): TdApi.PremiumFeatureBusiness {
        return TdApi.PremiumFeatureBusiness()
    }

    fun map(dto: PremiumFeatureMessageEffects): TdApi.PremiumFeatureMessageEffects {
        return TdApi.PremiumFeatureMessageEffects()
    }

    fun map(dto: PremiumFeatureChecklists): TdApi.PremiumFeatureChecklists {
        return TdApi.PremiumFeatureChecklists()
    }

    fun map(dto: TdApi.PremiumFeaturePromotionAnimation): PremiumFeaturePromotionAnimation {
        return PremiumFeaturePromotionAnimation(
            feature = map(dto.feature),
            animation = map(dto.animation),
        )
    }

    fun map(dto: PremiumFeaturePromotionAnimation): TdApi.PremiumFeaturePromotionAnimation {
        return TdApi.PremiumFeaturePromotionAnimation(
            feature = map(dto.feature),
            animation = map(dto.animation),
        )
    }

    fun map(dto: TdApi.PremiumFeatures): PremiumFeatures {
        return PremiumFeatures(
            features = dto.features.mapArray { map(it) },
            limits = dto.limits.mapArray { map(it) },
            paymentLink = dto.paymentLink?.let { map(it) },
        )
    }

    fun map(dto: PremiumFeatures): TdApi.PremiumFeatures {
        return TdApi.PremiumFeatures(
            features = dto.features.mapArray { map(it) },
            limits = dto.limits.mapArray { map(it) },
            paymentLink = dto.paymentLink?.let { map(it) },
        )
    }

    fun map(dto: TdApi.PremiumGiftCodeInfo): PremiumGiftCodeInfo {
        return PremiumGiftCodeInfo(
            creatorId = dto.creatorId?.let { map(it) },
            creationDate = dto.creationDate,
            isFromGiveaway = dto.isFromGiveaway,
            giveawayMessageId = dto.giveawayMessageId,
            monthCount = dto.monthCount,
            userId = dto.userId,
            useDate = dto.useDate,
        )
    }

    fun map(dto: PremiumGiftCodeInfo): TdApi.PremiumGiftCodeInfo {
        return TdApi.PremiumGiftCodeInfo(
            creatorId = dto.creatorId?.let { map(it) },
            creationDate = dto.creationDate,
            isFromGiveaway = dto.isFromGiveaway,
            giveawayMessageId = dto.giveawayMessageId,
            monthCount = dto.monthCount,
            userId = dto.userId,
            useDate = dto.useDate,
        )
    }

    fun map(dto: TdApi.PremiumGiftPaymentOption): PremiumGiftPaymentOption {
        return PremiumGiftPaymentOption(
            currency = dto.currency,
            amount = dto.amount,
            starCount = dto.starCount,
            discountPercentage = dto.discountPercentage,
            monthCount = dto.monthCount,
            storeProductId = dto.storeProductId,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: PremiumGiftPaymentOption): TdApi.PremiumGiftPaymentOption {
        return TdApi.PremiumGiftPaymentOption(
            currency = dto.currency,
            amount = dto.amount,
            starCount = dto.starCount,
            discountPercentage = dto.discountPercentage,
            monthCount = dto.monthCount,
            storeProductId = dto.storeProductId,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: TdApi.PremiumGiftPaymentOptions): PremiumGiftPaymentOptions {
        return PremiumGiftPaymentOptions(
            options = dto.options.mapArray { map(it) },
        )
    }

    fun map(dto: PremiumGiftPaymentOptions): TdApi.PremiumGiftPaymentOptions {
        return TdApi.PremiumGiftPaymentOptions(
            options = dto.options.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.PremiumGiveawayPaymentOption): PremiumGiveawayPaymentOption {
        return PremiumGiveawayPaymentOption(
            currency = dto.currency,
            amount = dto.amount,
            winnerCount = dto.winnerCount,
            monthCount = dto.monthCount,
            storeProductId = dto.storeProductId,
            storeProductQuantity = dto.storeProductQuantity,
        )
    }

    fun map(dto: PremiumGiveawayPaymentOption): TdApi.PremiumGiveawayPaymentOption {
        return TdApi.PremiumGiveawayPaymentOption(
            currency = dto.currency,
            amount = dto.amount,
            winnerCount = dto.winnerCount,
            monthCount = dto.monthCount,
            storeProductId = dto.storeProductId,
            storeProductQuantity = dto.storeProductQuantity,
        )
    }

    fun map(dto: TdApi.PremiumGiveawayPaymentOptions): PremiumGiveawayPaymentOptions {
        return PremiumGiveawayPaymentOptions(
            options = dto.options.mapArray { map(it) },
        )
    }

    fun map(dto: PremiumGiveawayPaymentOptions): TdApi.PremiumGiveawayPaymentOptions {
        return TdApi.PremiumGiveawayPaymentOptions(
            options = dto.options.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.PremiumLimit): PremiumLimit {
        return PremiumLimit(
            type = map(dto.type),
            defaultValue = dto.defaultValue,
            premiumValue = dto.premiumValue,
        )
    }

    fun map(dto: PremiumLimit): TdApi.PremiumLimit {
        return TdApi.PremiumLimit(
            type = map(dto.type),
            defaultValue = dto.defaultValue,
            premiumValue = dto.premiumValue,
        )
    }

    fun map(dto: TdApi.PremiumLimitType): PremiumLimitType {
        when (dto) {
            is TdApi.PremiumLimitTypeSupergroupCount -> return map(dto)
            is TdApi.PremiumLimitTypePinnedChatCount -> return map(dto)
            is TdApi.PremiumLimitTypeCreatedPublicChatCount -> return map(dto)
            is TdApi.PremiumLimitTypeSavedAnimationCount -> return map(dto)
            is TdApi.PremiumLimitTypeFavoriteStickerCount -> return map(dto)
            is TdApi.PremiumLimitTypeChatFolderCount -> return map(dto)
            is TdApi.PremiumLimitTypeChatFolderChosenChatCount -> return map(dto)
            is TdApi.PremiumLimitTypePinnedArchivedChatCount -> return map(dto)
            is TdApi.PremiumLimitTypePinnedSavedMessagesTopicCount -> return map(dto)
            is TdApi.PremiumLimitTypeCaptionLength -> return map(dto)
            is TdApi.PremiumLimitTypeBioLength -> return map(dto)
            is TdApi.PremiumLimitTypeChatFolderInviteLinkCount -> return map(dto)
            is TdApi.PremiumLimitTypeShareableChatFolderCount -> return map(dto)
            is TdApi.PremiumLimitTypeActiveStoryCount -> return map(dto)
            is TdApi.PremiumLimitTypeWeeklyPostedStoryCount -> return map(dto)
            is TdApi.PremiumLimitTypeMonthlyPostedStoryCount -> return map(dto)
            is TdApi.PremiumLimitTypeStoryCaptionLength -> return map(dto)
            is TdApi.PremiumLimitTypeStorySuggestedReactionAreaCount -> return map(dto)
            is TdApi.PremiumLimitTypeSimilarChatCount -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PremiumLimitTypeSupergroupCount): PremiumLimitTypeSupergroupCount {
        return PremiumLimitTypeSupergroupCount()
    }

    fun map(dto: TdApi.PremiumLimitTypePinnedChatCount): PremiumLimitTypePinnedChatCount {
        return PremiumLimitTypePinnedChatCount()
    }

    fun map(dto: TdApi.PremiumLimitTypeCreatedPublicChatCount): PremiumLimitTypeCreatedPublicChatCount {
        return PremiumLimitTypeCreatedPublicChatCount()
    }

    fun map(dto: TdApi.PremiumLimitTypeSavedAnimationCount): PremiumLimitTypeSavedAnimationCount {
        return PremiumLimitTypeSavedAnimationCount()
    }

    fun map(dto: TdApi.PremiumLimitTypeFavoriteStickerCount): PremiumLimitTypeFavoriteStickerCount {
        return PremiumLimitTypeFavoriteStickerCount()
    }

    fun map(dto: TdApi.PremiumLimitTypeChatFolderCount): PremiumLimitTypeChatFolderCount {
        return PremiumLimitTypeChatFolderCount()
    }

    fun map(dto: TdApi.PremiumLimitTypeChatFolderChosenChatCount): PremiumLimitTypeChatFolderChosenChatCount {
        return PremiumLimitTypeChatFolderChosenChatCount()
    }

    fun map(dto: TdApi.PremiumLimitTypePinnedArchivedChatCount): PremiumLimitTypePinnedArchivedChatCount {
        return PremiumLimitTypePinnedArchivedChatCount()
    }

    fun map(dto: TdApi.PremiumLimitTypePinnedSavedMessagesTopicCount): PremiumLimitTypePinnedSavedMessagesTopicCount {
        return PremiumLimitTypePinnedSavedMessagesTopicCount()
    }

    fun map(dto: TdApi.PremiumLimitTypeCaptionLength): PremiumLimitTypeCaptionLength {
        return PremiumLimitTypeCaptionLength()
    }

    fun map(dto: TdApi.PremiumLimitTypeBioLength): PremiumLimitTypeBioLength {
        return PremiumLimitTypeBioLength()
    }

    fun map(dto: TdApi.PremiumLimitTypeChatFolderInviteLinkCount): PremiumLimitTypeChatFolderInviteLinkCount {
        return PremiumLimitTypeChatFolderInviteLinkCount()
    }

    fun map(dto: TdApi.PremiumLimitTypeShareableChatFolderCount): PremiumLimitTypeShareableChatFolderCount {
        return PremiumLimitTypeShareableChatFolderCount()
    }

    fun map(dto: TdApi.PremiumLimitTypeActiveStoryCount): PremiumLimitTypeActiveStoryCount {
        return PremiumLimitTypeActiveStoryCount()
    }

    fun map(dto: TdApi.PremiumLimitTypeWeeklyPostedStoryCount): PremiumLimitTypeWeeklyPostedStoryCount {
        return PremiumLimitTypeWeeklyPostedStoryCount()
    }

    fun map(dto: TdApi.PremiumLimitTypeMonthlyPostedStoryCount): PremiumLimitTypeMonthlyPostedStoryCount {
        return PremiumLimitTypeMonthlyPostedStoryCount()
    }

    fun map(dto: TdApi.PremiumLimitTypeStoryCaptionLength): PremiumLimitTypeStoryCaptionLength {
        return PremiumLimitTypeStoryCaptionLength()
    }

    fun map(dto: TdApi.PremiumLimitTypeStorySuggestedReactionAreaCount): PremiumLimitTypeStorySuggestedReactionAreaCount {
        return PremiumLimitTypeStorySuggestedReactionAreaCount()
    }

    fun map(dto: TdApi.PremiumLimitTypeSimilarChatCount): PremiumLimitTypeSimilarChatCount {
        return PremiumLimitTypeSimilarChatCount()
    }

    fun map(dto: PremiumLimitType): TdApi.PremiumLimitType {
        when (dto) {
            is PremiumLimitTypeSupergroupCount -> return map(dto)
            is PremiumLimitTypePinnedChatCount -> return map(dto)
            is PremiumLimitTypeCreatedPublicChatCount -> return map(dto)
            is PremiumLimitTypeSavedAnimationCount -> return map(dto)
            is PremiumLimitTypeFavoriteStickerCount -> return map(dto)
            is PremiumLimitTypeChatFolderCount -> return map(dto)
            is PremiumLimitTypeChatFolderChosenChatCount -> return map(dto)
            is PremiumLimitTypePinnedArchivedChatCount -> return map(dto)
            is PremiumLimitTypePinnedSavedMessagesTopicCount -> return map(dto)
            is PremiumLimitTypeCaptionLength -> return map(dto)
            is PremiumLimitTypeBioLength -> return map(dto)
            is PremiumLimitTypeChatFolderInviteLinkCount -> return map(dto)
            is PremiumLimitTypeShareableChatFolderCount -> return map(dto)
            is PremiumLimitTypeActiveStoryCount -> return map(dto)
            is PremiumLimitTypeWeeklyPostedStoryCount -> return map(dto)
            is PremiumLimitTypeMonthlyPostedStoryCount -> return map(dto)
            is PremiumLimitTypeStoryCaptionLength -> return map(dto)
            is PremiumLimitTypeStorySuggestedReactionAreaCount -> return map(dto)
            is PremiumLimitTypeSimilarChatCount -> return map(dto)
        }
    }

    fun map(dto: PremiumLimitTypeSupergroupCount): TdApi.PremiumLimitTypeSupergroupCount {
        return TdApi.PremiumLimitTypeSupergroupCount()
    }

    fun map(dto: PremiumLimitTypePinnedChatCount): TdApi.PremiumLimitTypePinnedChatCount {
        return TdApi.PremiumLimitTypePinnedChatCount()
    }

    fun map(dto: PremiumLimitTypeCreatedPublicChatCount): TdApi.PremiumLimitTypeCreatedPublicChatCount {
        return TdApi.PremiumLimitTypeCreatedPublicChatCount()
    }

    fun map(dto: PremiumLimitTypeSavedAnimationCount): TdApi.PremiumLimitTypeSavedAnimationCount {
        return TdApi.PremiumLimitTypeSavedAnimationCount()
    }

    fun map(dto: PremiumLimitTypeFavoriteStickerCount): TdApi.PremiumLimitTypeFavoriteStickerCount {
        return TdApi.PremiumLimitTypeFavoriteStickerCount()
    }

    fun map(dto: PremiumLimitTypeChatFolderCount): TdApi.PremiumLimitTypeChatFolderCount {
        return TdApi.PremiumLimitTypeChatFolderCount()
    }

    fun map(dto: PremiumLimitTypeChatFolderChosenChatCount): TdApi.PremiumLimitTypeChatFolderChosenChatCount {
        return TdApi.PremiumLimitTypeChatFolderChosenChatCount()
    }

    fun map(dto: PremiumLimitTypePinnedArchivedChatCount): TdApi.PremiumLimitTypePinnedArchivedChatCount {
        return TdApi.PremiumLimitTypePinnedArchivedChatCount()
    }

    fun map(dto: PremiumLimitTypePinnedSavedMessagesTopicCount): TdApi.PremiumLimitTypePinnedSavedMessagesTopicCount {
        return TdApi.PremiumLimitTypePinnedSavedMessagesTopicCount()
    }

    fun map(dto: PremiumLimitTypeCaptionLength): TdApi.PremiumLimitTypeCaptionLength {
        return TdApi.PremiumLimitTypeCaptionLength()
    }

    fun map(dto: PremiumLimitTypeBioLength): TdApi.PremiumLimitTypeBioLength {
        return TdApi.PremiumLimitTypeBioLength()
    }

    fun map(dto: PremiumLimitTypeChatFolderInviteLinkCount): TdApi.PremiumLimitTypeChatFolderInviteLinkCount {
        return TdApi.PremiumLimitTypeChatFolderInviteLinkCount()
    }

    fun map(dto: PremiumLimitTypeShareableChatFolderCount): TdApi.PremiumLimitTypeShareableChatFolderCount {
        return TdApi.PremiumLimitTypeShareableChatFolderCount()
    }

    fun map(dto: PremiumLimitTypeActiveStoryCount): TdApi.PremiumLimitTypeActiveStoryCount {
        return TdApi.PremiumLimitTypeActiveStoryCount()
    }

    fun map(dto: PremiumLimitTypeWeeklyPostedStoryCount): TdApi.PremiumLimitTypeWeeklyPostedStoryCount {
        return TdApi.PremiumLimitTypeWeeklyPostedStoryCount()
    }

    fun map(dto: PremiumLimitTypeMonthlyPostedStoryCount): TdApi.PremiumLimitTypeMonthlyPostedStoryCount {
        return TdApi.PremiumLimitTypeMonthlyPostedStoryCount()
    }

    fun map(dto: PremiumLimitTypeStoryCaptionLength): TdApi.PremiumLimitTypeStoryCaptionLength {
        return TdApi.PremiumLimitTypeStoryCaptionLength()
    }

    fun map(dto: PremiumLimitTypeStorySuggestedReactionAreaCount): TdApi.PremiumLimitTypeStorySuggestedReactionAreaCount {
        return TdApi.PremiumLimitTypeStorySuggestedReactionAreaCount()
    }

    fun map(dto: PremiumLimitTypeSimilarChatCount): TdApi.PremiumLimitTypeSimilarChatCount {
        return TdApi.PremiumLimitTypeSimilarChatCount()
    }

    fun map(dto: TdApi.PremiumPaymentOption): PremiumPaymentOption {
        return PremiumPaymentOption(
            currency = dto.currency,
            amount = dto.amount,
            discountPercentage = dto.discountPercentage,
            monthCount = dto.monthCount,
            storeProductId = dto.storeProductId,
            paymentLink = dto.paymentLink?.let { map(it) },
        )
    }

    fun map(dto: PremiumPaymentOption): TdApi.PremiumPaymentOption {
        return TdApi.PremiumPaymentOption(
            currency = dto.currency,
            amount = dto.amount,
            discountPercentage = dto.discountPercentage,
            monthCount = dto.monthCount,
            storeProductId = dto.storeProductId,
            paymentLink = dto.paymentLink?.let { map(it) },
        )
    }

    fun map(dto: TdApi.PremiumSource): PremiumSource {
        when (dto) {
            is TdApi.PremiumSourceLimitExceeded -> return map(dto)
            is TdApi.PremiumSourceFeature -> return map(dto)
            is TdApi.PremiumSourceBusinessFeature -> return map(dto)
            is TdApi.PremiumSourceStoryFeature -> return map(dto)
            is TdApi.PremiumSourceLink -> return map(dto)
            is TdApi.PremiumSourceSettings -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PremiumSourceLimitExceeded): PremiumSourceLimitExceeded {
        return PremiumSourceLimitExceeded(
            limitType = map(dto.limitType),
        )
    }

    fun map(dto: TdApi.PremiumSourceFeature): PremiumSourceFeature {
        return PremiumSourceFeature(
            feature = map(dto.feature),
        )
    }

    fun map(dto: TdApi.PremiumSourceBusinessFeature): PremiumSourceBusinessFeature {
        return PremiumSourceBusinessFeature(
            feature = dto.feature?.let { map(it) },
        )
    }

    fun map(dto: TdApi.PremiumSourceStoryFeature): PremiumSourceStoryFeature {
        return PremiumSourceStoryFeature(
            feature = map(dto.feature),
        )
    }

    fun map(dto: TdApi.PremiumSourceLink): PremiumSourceLink {
        return PremiumSourceLink(
            referrer = dto.referrer,
        )
    }

    fun map(dto: TdApi.PremiumSourceSettings): PremiumSourceSettings {
        return PremiumSourceSettings()
    }

    fun map(dto: PremiumSource): TdApi.PremiumSource {
        when (dto) {
            is PremiumSourceLimitExceeded -> return map(dto)
            is PremiumSourceFeature -> return map(dto)
            is PremiumSourceBusinessFeature -> return map(dto)
            is PremiumSourceStoryFeature -> return map(dto)
            is PremiumSourceLink -> return map(dto)
            is PremiumSourceSettings -> return map(dto)
        }
    }

    fun map(dto: PremiumSourceLimitExceeded): TdApi.PremiumSourceLimitExceeded {
        return TdApi.PremiumSourceLimitExceeded(
            limitType = map(dto.limitType),
        )
    }

    fun map(dto: PremiumSourceFeature): TdApi.PremiumSourceFeature {
        return TdApi.PremiumSourceFeature(
            feature = map(dto.feature),
        )
    }

    fun map(dto: PremiumSourceBusinessFeature): TdApi.PremiumSourceBusinessFeature {
        return TdApi.PremiumSourceBusinessFeature(
            feature = dto.feature?.let { map(it) },
        )
    }

    fun map(dto: PremiumSourceStoryFeature): TdApi.PremiumSourceStoryFeature {
        return TdApi.PremiumSourceStoryFeature(
            feature = map(dto.feature),
        )
    }

    fun map(dto: PremiumSourceLink): TdApi.PremiumSourceLink {
        return TdApi.PremiumSourceLink(
            referrer = dto.referrer,
        )
    }

    fun map(dto: PremiumSourceSettings): TdApi.PremiumSourceSettings {
        return TdApi.PremiumSourceSettings()
    }

    fun map(dto: TdApi.PremiumState): PremiumState {
        return PremiumState(
            state = map(dto.state),
            paymentOptions = dto.paymentOptions.mapArray { map(it) },
            animations = dto.animations.mapArray { map(it) },
            businessAnimations = dto.businessAnimations.mapArray { map(it) },
        )
    }

    fun map(dto: PremiumState): TdApi.PremiumState {
        return TdApi.PremiumState(
            state = map(dto.state),
            paymentOptions = dto.paymentOptions.mapArray { map(it) },
            animations = dto.animations.mapArray { map(it) },
            businessAnimations = dto.businessAnimations.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.PremiumStatePaymentOption): PremiumStatePaymentOption {
        return PremiumStatePaymentOption(
            paymentOption = map(dto.paymentOption),
            isCurrent = dto.isCurrent,
            isUpgrade = dto.isUpgrade,
            lastTransactionId = dto.lastTransactionId,
        )
    }

    fun map(dto: PremiumStatePaymentOption): TdApi.PremiumStatePaymentOption {
        return TdApi.PremiumStatePaymentOption(
            paymentOption = map(dto.paymentOption),
            isCurrent = dto.isCurrent,
            isUpgrade = dto.isUpgrade,
            lastTransactionId = dto.lastTransactionId,
        )
    }

    fun map(dto: TdApi.PremiumStoryFeature): PremiumStoryFeature {
        when (dto) {
            is TdApi.PremiumStoryFeaturePriorityOrder -> return map(dto)
            is TdApi.PremiumStoryFeatureStealthMode -> return map(dto)
            is TdApi.PremiumStoryFeaturePermanentViewsHistory -> return map(dto)
            is TdApi.PremiumStoryFeatureCustomExpirationDuration -> return map(dto)
            is TdApi.PremiumStoryFeatureSaveStories -> return map(dto)
            is TdApi.PremiumStoryFeatureLinksAndFormatting -> return map(dto)
            is TdApi.PremiumStoryFeatureVideoQuality -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PremiumStoryFeaturePriorityOrder): PremiumStoryFeaturePriorityOrder {
        return PremiumStoryFeaturePriorityOrder()
    }

    fun map(dto: TdApi.PremiumStoryFeatureStealthMode): PremiumStoryFeatureStealthMode {
        return PremiumStoryFeatureStealthMode()
    }

    fun map(dto: TdApi.PremiumStoryFeaturePermanentViewsHistory): PremiumStoryFeaturePermanentViewsHistory {
        return PremiumStoryFeaturePermanentViewsHistory()
    }

    fun map(dto: TdApi.PremiumStoryFeatureCustomExpirationDuration): PremiumStoryFeatureCustomExpirationDuration {
        return PremiumStoryFeatureCustomExpirationDuration()
    }

    fun map(dto: TdApi.PremiumStoryFeatureSaveStories): PremiumStoryFeatureSaveStories {
        return PremiumStoryFeatureSaveStories()
    }

    fun map(dto: TdApi.PremiumStoryFeatureLinksAndFormatting): PremiumStoryFeatureLinksAndFormatting {
        return PremiumStoryFeatureLinksAndFormatting()
    }

    fun map(dto: TdApi.PremiumStoryFeatureVideoQuality): PremiumStoryFeatureVideoQuality {
        return PremiumStoryFeatureVideoQuality()
    }

    fun map(dto: PremiumStoryFeature): TdApi.PremiumStoryFeature {
        when (dto) {
            is PremiumStoryFeaturePriorityOrder -> return map(dto)
            is PremiumStoryFeatureStealthMode -> return map(dto)
            is PremiumStoryFeaturePermanentViewsHistory -> return map(dto)
            is PremiumStoryFeatureCustomExpirationDuration -> return map(dto)
            is PremiumStoryFeatureSaveStories -> return map(dto)
            is PremiumStoryFeatureLinksAndFormatting -> return map(dto)
            is PremiumStoryFeatureVideoQuality -> return map(dto)
        }
    }

    fun map(dto: PremiumStoryFeaturePriorityOrder): TdApi.PremiumStoryFeaturePriorityOrder {
        return TdApi.PremiumStoryFeaturePriorityOrder()
    }

    fun map(dto: PremiumStoryFeatureStealthMode): TdApi.PremiumStoryFeatureStealthMode {
        return TdApi.PremiumStoryFeatureStealthMode()
    }

    fun map(dto: PremiumStoryFeaturePermanentViewsHistory): TdApi.PremiumStoryFeaturePermanentViewsHistory {
        return TdApi.PremiumStoryFeaturePermanentViewsHistory()
    }

    fun map(dto: PremiumStoryFeatureCustomExpirationDuration): TdApi.PremiumStoryFeatureCustomExpirationDuration {
        return TdApi.PremiumStoryFeatureCustomExpirationDuration()
    }

    fun map(dto: PremiumStoryFeatureSaveStories): TdApi.PremiumStoryFeatureSaveStories {
        return TdApi.PremiumStoryFeatureSaveStories()
    }

    fun map(dto: PremiumStoryFeatureLinksAndFormatting): TdApi.PremiumStoryFeatureLinksAndFormatting {
        return TdApi.PremiumStoryFeatureLinksAndFormatting()
    }

    fun map(dto: PremiumStoryFeatureVideoQuality): TdApi.PremiumStoryFeatureVideoQuality {
        return TdApi.PremiumStoryFeatureVideoQuality()
    }

    fun map(dto: TdApi.PrepaidGiveaway): PrepaidGiveaway {
        return PrepaidGiveaway(
            id = dto.id,
            winnerCount = dto.winnerCount,
            prize = map(dto.prize),
            boostCount = dto.boostCount,
            paymentDate = dto.paymentDate,
        )
    }

    fun map(dto: PrepaidGiveaway): TdApi.PrepaidGiveaway {
        return TdApi.PrepaidGiveaway(
            id = dto.id,
            winnerCount = dto.winnerCount,
            prize = map(dto.prize),
            boostCount = dto.boostCount,
            paymentDate = dto.paymentDate,
        )
    }

    fun map(dto: TdApi.PreparedInlineMessage): PreparedInlineMessage {
        return PreparedInlineMessage(
            inlineQueryId = dto.inlineQueryId,
            result = map(dto.result),
            chatTypes = map(dto.chatTypes),
        )
    }

    fun map(dto: PreparedInlineMessage): TdApi.PreparedInlineMessage {
        return TdApi.PreparedInlineMessage(
            inlineQueryId = dto.inlineQueryId,
            result = map(dto.result),
            chatTypes = map(dto.chatTypes),
        )
    }

    fun map(dto: TdApi.PreparedInlineMessageId): PreparedInlineMessageId {
        return PreparedInlineMessageId(
            id = dto.id,
            expirationDate = dto.expirationDate,
        )
    }

    fun map(dto: PreparedInlineMessageId): TdApi.PreparedInlineMessageId {
        return TdApi.PreparedInlineMessageId(
            id = dto.id,
            expirationDate = dto.expirationDate,
        )
    }

    fun map(dto: TdApi.ProductInfo): ProductInfo {
        return ProductInfo(
            title = dto.title,
            description = map(dto.description),
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: ProductInfo): TdApi.ProductInfo {
        return TdApi.ProductInfo(
            title = dto.title,
            description = map(dto.description),
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: TdApi.ProfileAccentColor): ProfileAccentColor {
        return ProfileAccentColor(
            id = dto.id,
            lightThemeColors = map(dto.lightThemeColors),
            darkThemeColors = map(dto.darkThemeColors),
            minSupergroupChatBoostLevel = dto.minSupergroupChatBoostLevel,
            minChannelChatBoostLevel = dto.minChannelChatBoostLevel,
        )
    }

    fun map(dto: ProfileAccentColor): TdApi.ProfileAccentColor {
        return TdApi.ProfileAccentColor(
            id = dto.id,
            lightThemeColors = map(dto.lightThemeColors),
            darkThemeColors = map(dto.darkThemeColors),
            minSupergroupChatBoostLevel = dto.minSupergroupChatBoostLevel,
            minChannelChatBoostLevel = dto.minChannelChatBoostLevel,
        )
    }

    fun map(dto: TdApi.ProfileAccentColors): ProfileAccentColors {
        return ProfileAccentColors(
            paletteColors = dto.paletteColors,
            backgroundColors = dto.backgroundColors,
            storyColors = dto.storyColors,
        )
    }

    fun map(dto: ProfileAccentColors): TdApi.ProfileAccentColors {
        return TdApi.ProfileAccentColors(
            paletteColors = dto.paletteColors,
            backgroundColors = dto.backgroundColors,
            storyColors = dto.storyColors,
        )
    }

    fun map(dto: TdApi.ProfilePhoto): ProfilePhoto {
        return ProfilePhoto(
            id = dto.id,
            small = map(dto.small),
            big = map(dto.big),
            minithumbnail = dto.minithumbnail?.let { map(it) },
            hasAnimation = dto.hasAnimation,
            isPersonal = dto.isPersonal,
        )
    }

    fun map(dto: ProfilePhoto): TdApi.ProfilePhoto {
        return TdApi.ProfilePhoto(
            id = dto.id,
            small = map(dto.small),
            big = map(dto.big),
            minithumbnail = dto.minithumbnail?.let { map(it) },
            hasAnimation = dto.hasAnimation,
            isPersonal = dto.isPersonal,
        )
    }

    fun map(dto: TdApi.Proxies): Proxies {
        return Proxies(
            proxies = dto.proxies.mapArray { map(it) },
        )
    }

    fun map(dto: Proxies): TdApi.Proxies {
        return TdApi.Proxies(
            proxies = dto.proxies.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.Proxy): Proxy {
        return Proxy(
            id = dto.id,
            server = dto.server,
            port = dto.port,
            lastUsedDate = dto.lastUsedDate,
            isEnabled = dto.isEnabled,
            type = map(dto.type),
        )
    }

    fun map(dto: Proxy): TdApi.Proxy {
        return TdApi.Proxy(
            id = dto.id,
            server = dto.server,
            port = dto.port,
            lastUsedDate = dto.lastUsedDate,
            isEnabled = dto.isEnabled,
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.ProxyType): ProxyType {
        when (dto) {
            is TdApi.ProxyTypeSocks5 -> return map(dto)
            is TdApi.ProxyTypeHttp -> return map(dto)
            is TdApi.ProxyTypeMtproto -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ProxyTypeSocks5): ProxyTypeSocks5 {
        return ProxyTypeSocks5(
            username = dto.username,
            password = dto.password,
        )
    }

    fun map(dto: TdApi.ProxyTypeHttp): ProxyTypeHttp {
        return ProxyTypeHttp(
            username = dto.username,
            password = dto.password,
            httpOnly = dto.httpOnly,
        )
    }

    fun map(dto: TdApi.ProxyTypeMtproto): ProxyTypeMtproto {
        return ProxyTypeMtproto(
            secret = dto.secret,
        )
    }

    fun map(dto: ProxyType): TdApi.ProxyType {
        when (dto) {
            is ProxyTypeSocks5 -> return map(dto)
            is ProxyTypeHttp -> return map(dto)
            is ProxyTypeMtproto -> return map(dto)
        }
    }

    fun map(dto: ProxyTypeSocks5): TdApi.ProxyTypeSocks5 {
        return TdApi.ProxyTypeSocks5(
            username = dto.username,
            password = dto.password,
        )
    }

    fun map(dto: ProxyTypeHttp): TdApi.ProxyTypeHttp {
        return TdApi.ProxyTypeHttp(
            username = dto.username,
            password = dto.password,
            httpOnly = dto.httpOnly,
        )
    }

    fun map(dto: ProxyTypeMtproto): TdApi.ProxyTypeMtproto {
        return TdApi.ProxyTypeMtproto(
            secret = dto.secret,
        )
    }

    fun map(dto: TdApi.PublicChatType): PublicChatType {
        when (dto) {
            is TdApi.PublicChatTypeHasUsername -> return map(dto)
            is TdApi.PublicChatTypeIsLocationBased -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PublicChatTypeHasUsername): PublicChatTypeHasUsername {
        return PublicChatTypeHasUsername()
    }

    fun map(dto: TdApi.PublicChatTypeIsLocationBased): PublicChatTypeIsLocationBased {
        return PublicChatTypeIsLocationBased()
    }

    fun map(dto: PublicChatType): TdApi.PublicChatType {
        when (dto) {
            is PublicChatTypeHasUsername -> return map(dto)
            is PublicChatTypeIsLocationBased -> return map(dto)
        }
    }

    fun map(dto: PublicChatTypeHasUsername): TdApi.PublicChatTypeHasUsername {
        return TdApi.PublicChatTypeHasUsername()
    }

    fun map(dto: PublicChatTypeIsLocationBased): TdApi.PublicChatTypeIsLocationBased {
        return TdApi.PublicChatTypeIsLocationBased()
    }

    fun map(dto: TdApi.PublicForward): PublicForward {
        when (dto) {
            is TdApi.PublicForwardMessage -> return map(dto)
            is TdApi.PublicForwardStory -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PublicForwardMessage): PublicForwardMessage {
        return PublicForwardMessage(
            message = map(dto.message),
        )
    }

    fun map(dto: TdApi.PublicForwardStory): PublicForwardStory {
        return PublicForwardStory(
            story = map(dto.story),
        )
    }

    fun map(dto: PublicForward): TdApi.PublicForward {
        when (dto) {
            is PublicForwardMessage -> return map(dto)
            is PublicForwardStory -> return map(dto)
        }
    }

    fun map(dto: PublicForwardMessage): TdApi.PublicForwardMessage {
        return TdApi.PublicForwardMessage(
            message = map(dto.message),
        )
    }

    fun map(dto: PublicForwardStory): TdApi.PublicForwardStory {
        return TdApi.PublicForwardStory(
            story = map(dto.story),
        )
    }

    fun map(dto: TdApi.PublicForwards): PublicForwards {
        return PublicForwards(
            totalCount = dto.totalCount,
            forwards = dto.forwards.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: PublicForwards): TdApi.PublicForwards {
        return TdApi.PublicForwards(
            totalCount = dto.totalCount,
            forwards = dto.forwards.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.PushMessageContent): PushMessageContent {
        when (dto) {
            is TdApi.PushMessageContentHidden -> return map(dto)
            is TdApi.PushMessageContentAnimation -> return map(dto)
            is TdApi.PushMessageContentAudio -> return map(dto)
            is TdApi.PushMessageContentContact -> return map(dto)
            is TdApi.PushMessageContentContactRegistered -> return map(dto)
            is TdApi.PushMessageContentDocument -> return map(dto)
            is TdApi.PushMessageContentGame -> return map(dto)
            is TdApi.PushMessageContentGameScore -> return map(dto)
            is TdApi.PushMessageContentInvoice -> return map(dto)
            is TdApi.PushMessageContentLocation -> return map(dto)
            is TdApi.PushMessageContentPaidMedia -> return map(dto)
            is TdApi.PushMessageContentPhoto -> return map(dto)
            is TdApi.PushMessageContentPoll -> return map(dto)
            is TdApi.PushMessageContentPremiumGiftCode -> return map(dto)
            is TdApi.PushMessageContentGiveaway -> return map(dto)
            is TdApi.PushMessageContentGift -> return map(dto)
            is TdApi.PushMessageContentUpgradedGift -> return map(dto)
            is TdApi.PushMessageContentScreenshotTaken -> return map(dto)
            is TdApi.PushMessageContentSticker -> return map(dto)
            is TdApi.PushMessageContentStory -> return map(dto)
            is TdApi.PushMessageContentText -> return map(dto)
            is TdApi.PushMessageContentChecklist -> return map(dto)
            is TdApi.PushMessageContentVideo -> return map(dto)
            is TdApi.PushMessageContentVideoNote -> return map(dto)
            is TdApi.PushMessageContentVoiceNote -> return map(dto)
            is TdApi.PushMessageContentBasicGroupChatCreate -> return map(dto)
            is TdApi.PushMessageContentVideoChatStarted -> return map(dto)
            is TdApi.PushMessageContentVideoChatEnded -> return map(dto)
            is TdApi.PushMessageContentInviteVideoChatParticipants -> return map(dto)
            is TdApi.PushMessageContentChatAddMembers -> return map(dto)
            is TdApi.PushMessageContentChatChangePhoto -> return map(dto)
            is TdApi.PushMessageContentChatChangeTitle -> return map(dto)
            is TdApi.PushMessageContentChatSetBackground -> return map(dto)
            is TdApi.PushMessageContentChatSetTheme -> return map(dto)
            is TdApi.PushMessageContentChatDeleteMember -> return map(dto)
            is TdApi.PushMessageContentChatJoinByLink -> return map(dto)
            is TdApi.PushMessageContentChatJoinByRequest -> return map(dto)
            is TdApi.PushMessageContentRecurringPayment -> return map(dto)
            is TdApi.PushMessageContentSuggestProfilePhoto -> return map(dto)
            is TdApi.PushMessageContentProximityAlertTriggered -> return map(dto)
            is TdApi.PushMessageContentChecklistTasksAdded -> return map(dto)
            is TdApi.PushMessageContentChecklistTasksDone -> return map(dto)
            is TdApi.PushMessageContentMessageForwards -> return map(dto)
            is TdApi.PushMessageContentMediaAlbum -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.PushMessageContentHidden): PushMessageContentHidden {
        return PushMessageContentHidden(
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentAnimation): PushMessageContentAnimation {
        return PushMessageContentAnimation(
            animation = dto.animation?.let { map(it) },
            caption = dto.caption,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentAudio): PushMessageContentAudio {
        return PushMessageContentAudio(
            audio = dto.audio?.let { map(it) },
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentContact): PushMessageContentContact {
        return PushMessageContentContact(
            name = dto.name,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentContactRegistered): PushMessageContentContactRegistered {
        return PushMessageContentContactRegistered()
    }

    fun map(dto: TdApi.PushMessageContentDocument): PushMessageContentDocument {
        return PushMessageContentDocument(
            document = dto.document?.let { map(it) },
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentGame): PushMessageContentGame {
        return PushMessageContentGame(
            title = dto.title,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentGameScore): PushMessageContentGameScore {
        return PushMessageContentGameScore(
            title = dto.title,
            score = dto.score,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentInvoice): PushMessageContentInvoice {
        return PushMessageContentInvoice(
            price = dto.price,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentLocation): PushMessageContentLocation {
        return PushMessageContentLocation(
            isLive = dto.isLive,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentPaidMedia): PushMessageContentPaidMedia {
        return PushMessageContentPaidMedia(
            starCount = dto.starCount,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentPhoto): PushMessageContentPhoto {
        return PushMessageContentPhoto(
            photo = dto.photo?.let { map(it) },
            caption = dto.caption,
            isSecret = dto.isSecret,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentPoll): PushMessageContentPoll {
        return PushMessageContentPoll(
            question = dto.question,
            isRegular = dto.isRegular,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentPremiumGiftCode): PushMessageContentPremiumGiftCode {
        return PushMessageContentPremiumGiftCode(
            monthCount = dto.monthCount,
        )
    }

    fun map(dto: TdApi.PushMessageContentGiveaway): PushMessageContentGiveaway {
        return PushMessageContentGiveaway(
            winnerCount = dto.winnerCount,
            prize = dto.prize?.let { map(it) },
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentGift): PushMessageContentGift {
        return PushMessageContentGift(
            starCount = dto.starCount,
        )
    }

    fun map(dto: TdApi.PushMessageContentUpgradedGift): PushMessageContentUpgradedGift {
        return PushMessageContentUpgradedGift(
            isUpgrade = dto.isUpgrade,
        )
    }

    fun map(dto: TdApi.PushMessageContentScreenshotTaken): PushMessageContentScreenshotTaken {
        return PushMessageContentScreenshotTaken()
    }

    fun map(dto: TdApi.PushMessageContentSticker): PushMessageContentSticker {
        return PushMessageContentSticker(
            sticker = dto.sticker?.let { map(it) },
            emoji = dto.emoji,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentStory): PushMessageContentStory {
        return PushMessageContentStory(
            isMention = dto.isMention,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentText): PushMessageContentText {
        return PushMessageContentText(
            text = dto.text,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentChecklist): PushMessageContentChecklist {
        return PushMessageContentChecklist(
            title = dto.title,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentVideo): PushMessageContentVideo {
        return PushMessageContentVideo(
            video = dto.video?.let { map(it) },
            caption = dto.caption,
            isSecret = dto.isSecret,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentVideoNote): PushMessageContentVideoNote {
        return PushMessageContentVideoNote(
            videoNote = dto.videoNote?.let { map(it) },
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentVoiceNote): PushMessageContentVoiceNote {
        return PushMessageContentVoiceNote(
            voiceNote = dto.voiceNote?.let { map(it) },
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.PushMessageContentBasicGroupChatCreate): PushMessageContentBasicGroupChatCreate {
        return PushMessageContentBasicGroupChatCreate()
    }

    fun map(dto: TdApi.PushMessageContentVideoChatStarted): PushMessageContentVideoChatStarted {
        return PushMessageContentVideoChatStarted()
    }

    fun map(dto: TdApi.PushMessageContentVideoChatEnded): PushMessageContentVideoChatEnded {
        return PushMessageContentVideoChatEnded()
    }

    fun map(dto: TdApi.PushMessageContentInviteVideoChatParticipants): PushMessageContentInviteVideoChatParticipants {
        return PushMessageContentInviteVideoChatParticipants(
            isCurrentUser = dto.isCurrentUser,
        )
    }

    fun map(dto: TdApi.PushMessageContentChatAddMembers): PushMessageContentChatAddMembers {
        return PushMessageContentChatAddMembers(
            memberName = dto.memberName,
            isCurrentUser = dto.isCurrentUser,
            isReturned = dto.isReturned,
        )
    }

    fun map(dto: TdApi.PushMessageContentChatChangePhoto): PushMessageContentChatChangePhoto {
        return PushMessageContentChatChangePhoto()
    }

    fun map(dto: TdApi.PushMessageContentChatChangeTitle): PushMessageContentChatChangeTitle {
        return PushMessageContentChatChangeTitle(
            title = dto.title,
        )
    }

    fun map(dto: TdApi.PushMessageContentChatSetBackground): PushMessageContentChatSetBackground {
        return PushMessageContentChatSetBackground(
            isSame = dto.isSame,
        )
    }

    fun map(dto: TdApi.PushMessageContentChatSetTheme): PushMessageContentChatSetTheme {
        return PushMessageContentChatSetTheme(
            themeName = dto.themeName,
        )
    }

    fun map(dto: TdApi.PushMessageContentChatDeleteMember): PushMessageContentChatDeleteMember {
        return PushMessageContentChatDeleteMember(
            memberName = dto.memberName,
            isCurrentUser = dto.isCurrentUser,
            isLeft = dto.isLeft,
        )
    }

    fun map(dto: TdApi.PushMessageContentChatJoinByLink): PushMessageContentChatJoinByLink {
        return PushMessageContentChatJoinByLink()
    }

    fun map(dto: TdApi.PushMessageContentChatJoinByRequest): PushMessageContentChatJoinByRequest {
        return PushMessageContentChatJoinByRequest()
    }

    fun map(dto: TdApi.PushMessageContentRecurringPayment): PushMessageContentRecurringPayment {
        return PushMessageContentRecurringPayment(
            amount = dto.amount,
        )
    }

    fun map(dto: TdApi.PushMessageContentSuggestProfilePhoto): PushMessageContentSuggestProfilePhoto {
        return PushMessageContentSuggestProfilePhoto()
    }

    fun map(dto: TdApi.PushMessageContentProximityAlertTriggered): PushMessageContentProximityAlertTriggered {
        return PushMessageContentProximityAlertTriggered(
            distance = dto.distance,
        )
    }

    fun map(dto: TdApi.PushMessageContentChecklistTasksAdded): PushMessageContentChecklistTasksAdded {
        return PushMessageContentChecklistTasksAdded(
            taskCount = dto.taskCount,
        )
    }

    fun map(dto: TdApi.PushMessageContentChecklistTasksDone): PushMessageContentChecklistTasksDone {
        return PushMessageContentChecklistTasksDone(
            taskCount = dto.taskCount,
        )
    }

    fun map(dto: TdApi.PushMessageContentMessageForwards): PushMessageContentMessageForwards {
        return PushMessageContentMessageForwards(
            totalCount = dto.totalCount,
        )
    }

    fun map(dto: TdApi.PushMessageContentMediaAlbum): PushMessageContentMediaAlbum {
        return PushMessageContentMediaAlbum(
            totalCount = dto.totalCount,
            hasPhotos = dto.hasPhotos,
            hasVideos = dto.hasVideos,
            hasAudios = dto.hasAudios,
            hasDocuments = dto.hasDocuments,
        )
    }

    fun map(dto: PushMessageContent): TdApi.PushMessageContent {
        when (dto) {
            is PushMessageContentHidden -> return map(dto)
            is PushMessageContentAnimation -> return map(dto)
            is PushMessageContentAudio -> return map(dto)
            is PushMessageContentContact -> return map(dto)
            is PushMessageContentContactRegistered -> return map(dto)
            is PushMessageContentDocument -> return map(dto)
            is PushMessageContentGame -> return map(dto)
            is PushMessageContentGameScore -> return map(dto)
            is PushMessageContentInvoice -> return map(dto)
            is PushMessageContentLocation -> return map(dto)
            is PushMessageContentPaidMedia -> return map(dto)
            is PushMessageContentPhoto -> return map(dto)
            is PushMessageContentPoll -> return map(dto)
            is PushMessageContentPremiumGiftCode -> return map(dto)
            is PushMessageContentGiveaway -> return map(dto)
            is PushMessageContentGift -> return map(dto)
            is PushMessageContentUpgradedGift -> return map(dto)
            is PushMessageContentScreenshotTaken -> return map(dto)
            is PushMessageContentSticker -> return map(dto)
            is PushMessageContentStory -> return map(dto)
            is PushMessageContentText -> return map(dto)
            is PushMessageContentChecklist -> return map(dto)
            is PushMessageContentVideo -> return map(dto)
            is PushMessageContentVideoNote -> return map(dto)
            is PushMessageContentVoiceNote -> return map(dto)
            is PushMessageContentBasicGroupChatCreate -> return map(dto)
            is PushMessageContentVideoChatStarted -> return map(dto)
            is PushMessageContentVideoChatEnded -> return map(dto)
            is PushMessageContentInviteVideoChatParticipants -> return map(dto)
            is PushMessageContentChatAddMembers -> return map(dto)
            is PushMessageContentChatChangePhoto -> return map(dto)
            is PushMessageContentChatChangeTitle -> return map(dto)
            is PushMessageContentChatSetBackground -> return map(dto)
            is PushMessageContentChatSetTheme -> return map(dto)
            is PushMessageContentChatDeleteMember -> return map(dto)
            is PushMessageContentChatJoinByLink -> return map(dto)
            is PushMessageContentChatJoinByRequest -> return map(dto)
            is PushMessageContentRecurringPayment -> return map(dto)
            is PushMessageContentSuggestProfilePhoto -> return map(dto)
            is PushMessageContentProximityAlertTriggered -> return map(dto)
            is PushMessageContentChecklistTasksAdded -> return map(dto)
            is PushMessageContentChecklistTasksDone -> return map(dto)
            is PushMessageContentMessageForwards -> return map(dto)
            is PushMessageContentMediaAlbum -> return map(dto)
        }
    }

    fun map(dto: PushMessageContentHidden): TdApi.PushMessageContentHidden {
        return TdApi.PushMessageContentHidden(
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentAnimation): TdApi.PushMessageContentAnimation {
        return TdApi.PushMessageContentAnimation(
            animation = dto.animation?.let { map(it) },
            caption = dto.caption,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentAudio): TdApi.PushMessageContentAudio {
        return TdApi.PushMessageContentAudio(
            audio = dto.audio?.let { map(it) },
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentContact): TdApi.PushMessageContentContact {
        return TdApi.PushMessageContentContact(
            name = dto.name,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentContactRegistered): TdApi.PushMessageContentContactRegistered {
        return TdApi.PushMessageContentContactRegistered()
    }

    fun map(dto: PushMessageContentDocument): TdApi.PushMessageContentDocument {
        return TdApi.PushMessageContentDocument(
            document = dto.document?.let { map(it) },
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentGame): TdApi.PushMessageContentGame {
        return TdApi.PushMessageContentGame(
            title = dto.title,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentGameScore): TdApi.PushMessageContentGameScore {
        return TdApi.PushMessageContentGameScore(
            title = dto.title,
            score = dto.score,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentInvoice): TdApi.PushMessageContentInvoice {
        return TdApi.PushMessageContentInvoice(
            price = dto.price,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentLocation): TdApi.PushMessageContentLocation {
        return TdApi.PushMessageContentLocation(
            isLive = dto.isLive,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentPaidMedia): TdApi.PushMessageContentPaidMedia {
        return TdApi.PushMessageContentPaidMedia(
            starCount = dto.starCount,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentPhoto): TdApi.PushMessageContentPhoto {
        return TdApi.PushMessageContentPhoto(
            photo = dto.photo?.let { map(it) },
            caption = dto.caption,
            isSecret = dto.isSecret,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentPoll): TdApi.PushMessageContentPoll {
        return TdApi.PushMessageContentPoll(
            question = dto.question,
            isRegular = dto.isRegular,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentPremiumGiftCode): TdApi.PushMessageContentPremiumGiftCode {
        return TdApi.PushMessageContentPremiumGiftCode(
            monthCount = dto.monthCount,
        )
    }

    fun map(dto: PushMessageContentGiveaway): TdApi.PushMessageContentGiveaway {
        return TdApi.PushMessageContentGiveaway(
            winnerCount = dto.winnerCount,
            prize = dto.prize?.let { map(it) },
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentGift): TdApi.PushMessageContentGift {
        return TdApi.PushMessageContentGift(
            starCount = dto.starCount,
        )
    }

    fun map(dto: PushMessageContentUpgradedGift): TdApi.PushMessageContentUpgradedGift {
        return TdApi.PushMessageContentUpgradedGift(
            isUpgrade = dto.isUpgrade,
        )
    }

    fun map(dto: PushMessageContentScreenshotTaken): TdApi.PushMessageContentScreenshotTaken {
        return TdApi.PushMessageContentScreenshotTaken()
    }

    fun map(dto: PushMessageContentSticker): TdApi.PushMessageContentSticker {
        return TdApi.PushMessageContentSticker(
            sticker = dto.sticker?.let { map(it) },
            emoji = dto.emoji,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentStory): TdApi.PushMessageContentStory {
        return TdApi.PushMessageContentStory(
            isMention = dto.isMention,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentText): TdApi.PushMessageContentText {
        return TdApi.PushMessageContentText(
            text = dto.text,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentChecklist): TdApi.PushMessageContentChecklist {
        return TdApi.PushMessageContentChecklist(
            title = dto.title,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentVideo): TdApi.PushMessageContentVideo {
        return TdApi.PushMessageContentVideo(
            video = dto.video?.let { map(it) },
            caption = dto.caption,
            isSecret = dto.isSecret,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentVideoNote): TdApi.PushMessageContentVideoNote {
        return TdApi.PushMessageContentVideoNote(
            videoNote = dto.videoNote?.let { map(it) },
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentVoiceNote): TdApi.PushMessageContentVoiceNote {
        return TdApi.PushMessageContentVoiceNote(
            voiceNote = dto.voiceNote?.let { map(it) },
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: PushMessageContentBasicGroupChatCreate): TdApi.PushMessageContentBasicGroupChatCreate {
        return TdApi.PushMessageContentBasicGroupChatCreate()
    }

    fun map(dto: PushMessageContentVideoChatStarted): TdApi.PushMessageContentVideoChatStarted {
        return TdApi.PushMessageContentVideoChatStarted()
    }

    fun map(dto: PushMessageContentVideoChatEnded): TdApi.PushMessageContentVideoChatEnded {
        return TdApi.PushMessageContentVideoChatEnded()
    }

    fun map(dto: PushMessageContentInviteVideoChatParticipants): TdApi.PushMessageContentInviteVideoChatParticipants {
        return TdApi.PushMessageContentInviteVideoChatParticipants(
            isCurrentUser = dto.isCurrentUser,
        )
    }

    fun map(dto: PushMessageContentChatAddMembers): TdApi.PushMessageContentChatAddMembers {
        return TdApi.PushMessageContentChatAddMembers(
            memberName = dto.memberName,
            isCurrentUser = dto.isCurrentUser,
            isReturned = dto.isReturned,
        )
    }

    fun map(dto: PushMessageContentChatChangePhoto): TdApi.PushMessageContentChatChangePhoto {
        return TdApi.PushMessageContentChatChangePhoto()
    }

    fun map(dto: PushMessageContentChatChangeTitle): TdApi.PushMessageContentChatChangeTitle {
        return TdApi.PushMessageContentChatChangeTitle(
            title = dto.title,
        )
    }

    fun map(dto: PushMessageContentChatSetBackground): TdApi.PushMessageContentChatSetBackground {
        return TdApi.PushMessageContentChatSetBackground(
            isSame = dto.isSame,
        )
    }

    fun map(dto: PushMessageContentChatSetTheme): TdApi.PushMessageContentChatSetTheme {
        return TdApi.PushMessageContentChatSetTheme(
            themeName = dto.themeName,
        )
    }

    fun map(dto: PushMessageContentChatDeleteMember): TdApi.PushMessageContentChatDeleteMember {
        return TdApi.PushMessageContentChatDeleteMember(
            memberName = dto.memberName,
            isCurrentUser = dto.isCurrentUser,
            isLeft = dto.isLeft,
        )
    }

    fun map(dto: PushMessageContentChatJoinByLink): TdApi.PushMessageContentChatJoinByLink {
        return TdApi.PushMessageContentChatJoinByLink()
    }

    fun map(dto: PushMessageContentChatJoinByRequest): TdApi.PushMessageContentChatJoinByRequest {
        return TdApi.PushMessageContentChatJoinByRequest()
    }

    fun map(dto: PushMessageContentRecurringPayment): TdApi.PushMessageContentRecurringPayment {
        return TdApi.PushMessageContentRecurringPayment(
            amount = dto.amount,
        )
    }

    fun map(dto: PushMessageContentSuggestProfilePhoto): TdApi.PushMessageContentSuggestProfilePhoto {
        return TdApi.PushMessageContentSuggestProfilePhoto()
    }

    fun map(dto: PushMessageContentProximityAlertTriggered): TdApi.PushMessageContentProximityAlertTriggered {
        return TdApi.PushMessageContentProximityAlertTriggered(
            distance = dto.distance,
        )
    }

    fun map(dto: PushMessageContentChecklistTasksAdded): TdApi.PushMessageContentChecklistTasksAdded {
        return TdApi.PushMessageContentChecklistTasksAdded(
            taskCount = dto.taskCount,
        )
    }

    fun map(dto: PushMessageContentChecklistTasksDone): TdApi.PushMessageContentChecklistTasksDone {
        return TdApi.PushMessageContentChecklistTasksDone(
            taskCount = dto.taskCount,
        )
    }

    fun map(dto: PushMessageContentMessageForwards): TdApi.PushMessageContentMessageForwards {
        return TdApi.PushMessageContentMessageForwards(
            totalCount = dto.totalCount,
        )
    }

    fun map(dto: PushMessageContentMediaAlbum): TdApi.PushMessageContentMediaAlbum {
        return TdApi.PushMessageContentMediaAlbum(
            totalCount = dto.totalCount,
            hasPhotos = dto.hasPhotos,
            hasVideos = dto.hasVideos,
            hasAudios = dto.hasAudios,
            hasDocuments = dto.hasDocuments,
        )
    }

    fun map(dto: TdApi.PushReceiverId): PushReceiverId {
        return PushReceiverId(
            id = dto.id,
        )
    }

    fun map(dto: PushReceiverId): TdApi.PushReceiverId {
        return TdApi.PushReceiverId(
            id = dto.id,
        )
    }

    fun map(dto: TdApi.QuickReplyMessage): QuickReplyMessage {
        return QuickReplyMessage(
            id = dto.id,
            sendingState = dto.sendingState?.let { map(it) },
            canBeEdited = dto.canBeEdited,
            replyToMessageId = dto.replyToMessageId,
            viaBotUserId = dto.viaBotUserId,
            mediaAlbumId = dto.mediaAlbumId,
            content = map(dto.content),
            replyMarkup = dto.replyMarkup?.let { map(it) },
        )
    }

    fun map(dto: QuickReplyMessage): TdApi.QuickReplyMessage {
        return TdApi.QuickReplyMessage(
            id = dto.id,
            sendingState = dto.sendingState?.let { map(it) },
            canBeEdited = dto.canBeEdited,
            replyToMessageId = dto.replyToMessageId,
            viaBotUserId = dto.viaBotUserId,
            mediaAlbumId = dto.mediaAlbumId,
            content = map(dto.content),
            replyMarkup = dto.replyMarkup?.let { map(it) },
        )
    }

    fun map(dto: TdApi.QuickReplyMessages): QuickReplyMessages {
        return QuickReplyMessages(
            messages = dto.messages?.mapArray { map(it) },
        )
    }

    fun map(dto: QuickReplyMessages): TdApi.QuickReplyMessages {
        return TdApi.QuickReplyMessages(
            messages = dto.messages?.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.QuickReplyShortcut): QuickReplyShortcut {
        return QuickReplyShortcut(
            id = dto.id,
            name = dto.name,
            firstMessage = map(dto.firstMessage),
            messageCount = dto.messageCount,
        )
    }

    fun map(dto: QuickReplyShortcut): TdApi.QuickReplyShortcut {
        return TdApi.QuickReplyShortcut(
            id = dto.id,
            name = dto.name,
            firstMessage = map(dto.firstMessage),
            messageCount = dto.messageCount,
        )
    }

    fun map(dto: TdApi.ReactionNotificationSettings): ReactionNotificationSettings {
        return ReactionNotificationSettings(
            messageReactionSource = map(dto.messageReactionSource),
            storyReactionSource = map(dto.storyReactionSource),
            soundId = dto.soundId,
            showPreview = dto.showPreview,
        )
    }

    fun map(dto: ReactionNotificationSettings): TdApi.ReactionNotificationSettings {
        return TdApi.ReactionNotificationSettings(
            messageReactionSource = map(dto.messageReactionSource),
            storyReactionSource = map(dto.storyReactionSource),
            soundId = dto.soundId,
            showPreview = dto.showPreview,
        )
    }

    fun map(dto: TdApi.ReactionNotificationSource): ReactionNotificationSource {
        when (dto) {
            is TdApi.ReactionNotificationSourceNone -> return map(dto)
            is TdApi.ReactionNotificationSourceContacts -> return map(dto)
            is TdApi.ReactionNotificationSourceAll -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ReactionNotificationSourceNone): ReactionNotificationSourceNone {
        return ReactionNotificationSourceNone()
    }

    fun map(dto: TdApi.ReactionNotificationSourceContacts): ReactionNotificationSourceContacts {
        return ReactionNotificationSourceContacts()
    }

    fun map(dto: TdApi.ReactionNotificationSourceAll): ReactionNotificationSourceAll {
        return ReactionNotificationSourceAll()
    }

    fun map(dto: ReactionNotificationSource): TdApi.ReactionNotificationSource {
        when (dto) {
            is ReactionNotificationSourceNone -> return map(dto)
            is ReactionNotificationSourceContacts -> return map(dto)
            is ReactionNotificationSourceAll -> return map(dto)
        }
    }

    fun map(dto: ReactionNotificationSourceNone): TdApi.ReactionNotificationSourceNone {
        return TdApi.ReactionNotificationSourceNone()
    }

    fun map(dto: ReactionNotificationSourceContacts): TdApi.ReactionNotificationSourceContacts {
        return TdApi.ReactionNotificationSourceContacts()
    }

    fun map(dto: ReactionNotificationSourceAll): TdApi.ReactionNotificationSourceAll {
        return TdApi.ReactionNotificationSourceAll()
    }

    fun map(dto: TdApi.ReactionType): ReactionType {
        when (dto) {
            is TdApi.ReactionTypeEmoji -> return map(dto)
            is TdApi.ReactionTypeCustomEmoji -> return map(dto)
            is TdApi.ReactionTypePaid -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ReactionTypeEmoji): ReactionTypeEmoji {
        return ReactionTypeEmoji(
            emoji = dto.emoji,
        )
    }

    fun map(dto: TdApi.ReactionTypeCustomEmoji): ReactionTypeCustomEmoji {
        return ReactionTypeCustomEmoji(
            customEmojiId = dto.customEmojiId,
        )
    }

    fun map(dto: TdApi.ReactionTypePaid): ReactionTypePaid {
        return ReactionTypePaid()
    }

    fun map(dto: ReactionType): TdApi.ReactionType {
        when (dto) {
            is ReactionTypeEmoji -> return map(dto)
            is ReactionTypeCustomEmoji -> return map(dto)
            is ReactionTypePaid -> return map(dto)
        }
    }

    fun map(dto: ReactionTypeEmoji): TdApi.ReactionTypeEmoji {
        return TdApi.ReactionTypeEmoji(
            emoji = dto.emoji,
        )
    }

    fun map(dto: ReactionTypeCustomEmoji): TdApi.ReactionTypeCustomEmoji {
        return TdApi.ReactionTypeCustomEmoji(
            customEmojiId = dto.customEmojiId,
        )
    }

    fun map(dto: ReactionTypePaid): TdApi.ReactionTypePaid {
        return TdApi.ReactionTypePaid()
    }

    fun map(dto: TdApi.ReactionUnavailabilityReason): ReactionUnavailabilityReason {
        when (dto) {
            is TdApi.ReactionUnavailabilityReasonAnonymousAdministrator -> return map(dto)
            is TdApi.ReactionUnavailabilityReasonGuest -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ReactionUnavailabilityReasonAnonymousAdministrator): ReactionUnavailabilityReasonAnonymousAdministrator {
        return ReactionUnavailabilityReasonAnonymousAdministrator()
    }

    fun map(dto: TdApi.ReactionUnavailabilityReasonGuest): ReactionUnavailabilityReasonGuest {
        return ReactionUnavailabilityReasonGuest()
    }

    fun map(dto: ReactionUnavailabilityReason): TdApi.ReactionUnavailabilityReason {
        when (dto) {
            is ReactionUnavailabilityReasonAnonymousAdministrator -> return map(dto)
            is ReactionUnavailabilityReasonGuest -> return map(dto)
        }
    }

    fun map(dto: ReactionUnavailabilityReasonAnonymousAdministrator): TdApi.ReactionUnavailabilityReasonAnonymousAdministrator {
        return TdApi.ReactionUnavailabilityReasonAnonymousAdministrator()
    }

    fun map(dto: ReactionUnavailabilityReasonGuest): TdApi.ReactionUnavailabilityReasonGuest {
        return TdApi.ReactionUnavailabilityReasonGuest()
    }

    fun map(dto: TdApi.ReadDatePrivacySettings): ReadDatePrivacySettings {
        return ReadDatePrivacySettings(
            showReadDate = dto.showReadDate,
        )
    }

    fun map(dto: ReadDatePrivacySettings): TdApi.ReadDatePrivacySettings {
        return TdApi.ReadDatePrivacySettings(
            showReadDate = dto.showReadDate,
        )
    }

    fun map(dto: TdApi.ReceivedGift): ReceivedGift {
        return ReceivedGift(
            receivedGiftId = dto.receivedGiftId,
            senderId = dto.senderId?.let { map(it) },
            text = map(dto.text),
            isPrivate = dto.isPrivate,
            isSaved = dto.isSaved,
            isPinned = dto.isPinned,
            canBeUpgraded = dto.canBeUpgraded,
            canBeTransferred = dto.canBeTransferred,
            wasRefunded = dto.wasRefunded,
            date = dto.date,
            gift = map(dto.gift),
            sellStarCount = dto.sellStarCount,
            prepaidUpgradeStarCount = dto.prepaidUpgradeStarCount,
            transferStarCount = dto.transferStarCount,
            nextTransferDate = dto.nextTransferDate,
            nextResaleDate = dto.nextResaleDate,
            exportDate = dto.exportDate,
        )
    }

    fun map(dto: ReceivedGift): TdApi.ReceivedGift {
        return TdApi.ReceivedGift(
            receivedGiftId = dto.receivedGiftId,
            senderId = dto.senderId?.let { map(it) },
            text = map(dto.text),
            isPrivate = dto.isPrivate,
            isSaved = dto.isSaved,
            isPinned = dto.isPinned,
            canBeUpgraded = dto.canBeUpgraded,
            canBeTransferred = dto.canBeTransferred,
            wasRefunded = dto.wasRefunded,
            date = dto.date,
            gift = map(dto.gift),
            sellStarCount = dto.sellStarCount,
            prepaidUpgradeStarCount = dto.prepaidUpgradeStarCount,
            transferStarCount = dto.transferStarCount,
            nextTransferDate = dto.nextTransferDate,
            nextResaleDate = dto.nextResaleDate,
            exportDate = dto.exportDate,
        )
    }

    fun map(dto: TdApi.ReceivedGifts): ReceivedGifts {
        return ReceivedGifts(
            totalCount = dto.totalCount,
            gifts = dto.gifts.mapArray { map(it) },
            areNotificationsEnabled = dto.areNotificationsEnabled,
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: ReceivedGifts): TdApi.ReceivedGifts {
        return TdApi.ReceivedGifts(
            totalCount = dto.totalCount,
            gifts = dto.gifts.mapArray { map(it) },
            areNotificationsEnabled = dto.areNotificationsEnabled,
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.RecommendedChatFolder): RecommendedChatFolder {
        return RecommendedChatFolder(
            folder = map(dto.folder),
            description = dto.description,
        )
    }

    fun map(dto: RecommendedChatFolder): TdApi.RecommendedChatFolder {
        return TdApi.RecommendedChatFolder(
            folder = map(dto.folder),
            description = dto.description,
        )
    }

    fun map(dto: TdApi.RecommendedChatFolders): RecommendedChatFolders {
        return RecommendedChatFolders(
            chatFolders = dto.chatFolders.mapArray { map(it) },
        )
    }

    fun map(dto: RecommendedChatFolders): TdApi.RecommendedChatFolders {
        return TdApi.RecommendedChatFolders(
            chatFolders = dto.chatFolders.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.RecoveryEmailAddress): RecoveryEmailAddress {
        return RecoveryEmailAddress(
            recoveryEmailAddress = dto.recoveryEmailAddress,
        )
    }

    fun map(dto: RecoveryEmailAddress): TdApi.RecoveryEmailAddress {
        return TdApi.RecoveryEmailAddress(
            recoveryEmailAddress = dto.recoveryEmailAddress,
        )
    }

    fun map(dto: TdApi.RemoteFile): RemoteFile {
        return RemoteFile(
            id = dto.id,
            uniqueId = dto.uniqueId,
            isUploadingActive = dto.isUploadingActive,
            isUploadingCompleted = dto.isUploadingCompleted,
            uploadedSize = dto.uploadedSize,
        )
    }

    fun map(dto: RemoteFile): TdApi.RemoteFile {
        return TdApi.RemoteFile(
            id = dto.id,
            uniqueId = dto.uniqueId,
            isUploadingActive = dto.isUploadingActive,
            isUploadingCompleted = dto.isUploadingCompleted,
            uploadedSize = dto.uploadedSize,
        )
    }

    fun map(dto: TdApi.ReplyMarkup): ReplyMarkup {
        when (dto) {
            is TdApi.ReplyMarkupRemoveKeyboard -> return map(dto)
            is TdApi.ReplyMarkupForceReply -> return map(dto)
            is TdApi.ReplyMarkupShowKeyboard -> return map(dto)
            is TdApi.ReplyMarkupInlineKeyboard -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ReplyMarkupRemoveKeyboard): ReplyMarkupRemoveKeyboard {
        return ReplyMarkupRemoveKeyboard(
            isPersonal = dto.isPersonal,
        )
    }

    fun map(dto: TdApi.ReplyMarkupForceReply): ReplyMarkupForceReply {
        return ReplyMarkupForceReply(
            isPersonal = dto.isPersonal,
            inputFieldPlaceholder = dto.inputFieldPlaceholder,
        )
    }

    fun map(dto: TdApi.ReplyMarkupShowKeyboard): ReplyMarkupShowKeyboard {
        return ReplyMarkupShowKeyboard(
            rows = dto.rows.mapArrayOfArrays { map(it) },
            isPersistent = dto.isPersistent,
            resizeKeyboard = dto.resizeKeyboard,
            oneTime = dto.oneTime,
            isPersonal = dto.isPersonal,
            inputFieldPlaceholder = dto.inputFieldPlaceholder,
        )
    }

    fun map(dto: TdApi.ReplyMarkupInlineKeyboard): ReplyMarkupInlineKeyboard {
        return ReplyMarkupInlineKeyboard(
            rows = dto.rows.mapArrayOfArrays { map(it) },
        )
    }

    fun map(dto: ReplyMarkup): TdApi.ReplyMarkup {
        when (dto) {
            is ReplyMarkupRemoveKeyboard -> return map(dto)
            is ReplyMarkupForceReply -> return map(dto)
            is ReplyMarkupShowKeyboard -> return map(dto)
            is ReplyMarkupInlineKeyboard -> return map(dto)
        }
    }

    fun map(dto: ReplyMarkupRemoveKeyboard): TdApi.ReplyMarkupRemoveKeyboard {
        return TdApi.ReplyMarkupRemoveKeyboard(
            isPersonal = dto.isPersonal,
        )
    }

    fun map(dto: ReplyMarkupForceReply): TdApi.ReplyMarkupForceReply {
        return TdApi.ReplyMarkupForceReply(
            isPersonal = dto.isPersonal,
            inputFieldPlaceholder = dto.inputFieldPlaceholder,
        )
    }

    fun map(dto: ReplyMarkupShowKeyboard): TdApi.ReplyMarkupShowKeyboard {
        return TdApi.ReplyMarkupShowKeyboard(
            rows = dto.rows.mapArrayOfArrays { map(it) },
            isPersistent = dto.isPersistent,
            resizeKeyboard = dto.resizeKeyboard,
            oneTime = dto.oneTime,
            isPersonal = dto.isPersonal,
            inputFieldPlaceholder = dto.inputFieldPlaceholder,
        )
    }

    fun map(dto: ReplyMarkupInlineKeyboard): TdApi.ReplyMarkupInlineKeyboard {
        return TdApi.ReplyMarkupInlineKeyboard(
            rows = dto.rows.mapArrayOfArrays { map(it) },
        )
    }

    fun map(dto: TdApi.ReportChatResult): ReportChatResult {
        when (dto) {
            is TdApi.ReportChatResultOk -> return map(dto)
            is TdApi.ReportChatResultOptionRequired -> return map(dto)
            is TdApi.ReportChatResultTextRequired -> return map(dto)
            is TdApi.ReportChatResultMessagesRequired -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ReportChatResultOk): ReportChatResultOk {
        return ReportChatResultOk()
    }

    fun map(dto: TdApi.ReportChatResultOptionRequired): ReportChatResultOptionRequired {
        return ReportChatResultOptionRequired(
            title = dto.title,
            options = dto.options.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ReportChatResultTextRequired): ReportChatResultTextRequired {
        return ReportChatResultTextRequired(
            optionId = dto.optionId,
            isOptional = dto.isOptional,
        )
    }

    fun map(dto: TdApi.ReportChatResultMessagesRequired): ReportChatResultMessagesRequired {
        return ReportChatResultMessagesRequired()
    }

    fun map(dto: ReportChatResult): TdApi.ReportChatResult {
        when (dto) {
            is ReportChatResultOk -> return map(dto)
            is ReportChatResultOptionRequired -> return map(dto)
            is ReportChatResultTextRequired -> return map(dto)
            is ReportChatResultMessagesRequired -> return map(dto)
        }
    }

    fun map(dto: ReportChatResultOk): TdApi.ReportChatResultOk {
        return TdApi.ReportChatResultOk()
    }

    fun map(dto: ReportChatResultOptionRequired): TdApi.ReportChatResultOptionRequired {
        return TdApi.ReportChatResultOptionRequired(
            title = dto.title,
            options = dto.options.mapArray { map(it) },
        )
    }

    fun map(dto: ReportChatResultTextRequired): TdApi.ReportChatResultTextRequired {
        return TdApi.ReportChatResultTextRequired(
            optionId = dto.optionId,
            isOptional = dto.isOptional,
        )
    }

    fun map(dto: ReportChatResultMessagesRequired): TdApi.ReportChatResultMessagesRequired {
        return TdApi.ReportChatResultMessagesRequired()
    }

    fun map(dto: TdApi.ReportOption): ReportOption {
        return ReportOption(
            id = dto.id,
            text = dto.text,
        )
    }

    fun map(dto: ReportOption): TdApi.ReportOption {
        return TdApi.ReportOption(
            id = dto.id,
            text = dto.text,
        )
    }

    fun map(dto: TdApi.ReportReason): ReportReason {
        when (dto) {
            is TdApi.ReportReasonSpam -> return map(dto)
            is TdApi.ReportReasonViolence -> return map(dto)
            is TdApi.ReportReasonPornography -> return map(dto)
            is TdApi.ReportReasonChildAbuse -> return map(dto)
            is TdApi.ReportReasonCopyright -> return map(dto)
            is TdApi.ReportReasonUnrelatedLocation -> return map(dto)
            is TdApi.ReportReasonFake -> return map(dto)
            is TdApi.ReportReasonIllegalDrugs -> return map(dto)
            is TdApi.ReportReasonPersonalDetails -> return map(dto)
            is TdApi.ReportReasonCustom -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ReportReasonSpam): ReportReasonSpam {
        return ReportReasonSpam()
    }

    fun map(dto: TdApi.ReportReasonViolence): ReportReasonViolence {
        return ReportReasonViolence()
    }

    fun map(dto: TdApi.ReportReasonPornography): ReportReasonPornography {
        return ReportReasonPornography()
    }

    fun map(dto: TdApi.ReportReasonChildAbuse): ReportReasonChildAbuse {
        return ReportReasonChildAbuse()
    }

    fun map(dto: TdApi.ReportReasonCopyright): ReportReasonCopyright {
        return ReportReasonCopyright()
    }

    fun map(dto: TdApi.ReportReasonUnrelatedLocation): ReportReasonUnrelatedLocation {
        return ReportReasonUnrelatedLocation()
    }

    fun map(dto: TdApi.ReportReasonFake): ReportReasonFake {
        return ReportReasonFake()
    }

    fun map(dto: TdApi.ReportReasonIllegalDrugs): ReportReasonIllegalDrugs {
        return ReportReasonIllegalDrugs()
    }

    fun map(dto: TdApi.ReportReasonPersonalDetails): ReportReasonPersonalDetails {
        return ReportReasonPersonalDetails()
    }

    fun map(dto: TdApi.ReportReasonCustom): ReportReasonCustom {
        return ReportReasonCustom()
    }

    fun map(dto: ReportReason): TdApi.ReportReason {
        when (dto) {
            is ReportReasonSpam -> return map(dto)
            is ReportReasonViolence -> return map(dto)
            is ReportReasonPornography -> return map(dto)
            is ReportReasonChildAbuse -> return map(dto)
            is ReportReasonCopyright -> return map(dto)
            is ReportReasonUnrelatedLocation -> return map(dto)
            is ReportReasonFake -> return map(dto)
            is ReportReasonIllegalDrugs -> return map(dto)
            is ReportReasonPersonalDetails -> return map(dto)
            is ReportReasonCustom -> return map(dto)
        }
    }

    fun map(dto: ReportReasonSpam): TdApi.ReportReasonSpam {
        return TdApi.ReportReasonSpam()
    }

    fun map(dto: ReportReasonViolence): TdApi.ReportReasonViolence {
        return TdApi.ReportReasonViolence()
    }

    fun map(dto: ReportReasonPornography): TdApi.ReportReasonPornography {
        return TdApi.ReportReasonPornography()
    }

    fun map(dto: ReportReasonChildAbuse): TdApi.ReportReasonChildAbuse {
        return TdApi.ReportReasonChildAbuse()
    }

    fun map(dto: ReportReasonCopyright): TdApi.ReportReasonCopyright {
        return TdApi.ReportReasonCopyright()
    }

    fun map(dto: ReportReasonUnrelatedLocation): TdApi.ReportReasonUnrelatedLocation {
        return TdApi.ReportReasonUnrelatedLocation()
    }

    fun map(dto: ReportReasonFake): TdApi.ReportReasonFake {
        return TdApi.ReportReasonFake()
    }

    fun map(dto: ReportReasonIllegalDrugs): TdApi.ReportReasonIllegalDrugs {
        return TdApi.ReportReasonIllegalDrugs()
    }

    fun map(dto: ReportReasonPersonalDetails): TdApi.ReportReasonPersonalDetails {
        return TdApi.ReportReasonPersonalDetails()
    }

    fun map(dto: ReportReasonCustom): TdApi.ReportReasonCustom {
        return TdApi.ReportReasonCustom()
    }

    fun map(dto: TdApi.ReportSponsoredResult): ReportSponsoredResult {
        when (dto) {
            is TdApi.ReportSponsoredResultOk -> return map(dto)
            is TdApi.ReportSponsoredResultFailed -> return map(dto)
            is TdApi.ReportSponsoredResultOptionRequired -> return map(dto)
            is TdApi.ReportSponsoredResultAdsHidden -> return map(dto)
            is TdApi.ReportSponsoredResultPremiumRequired -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ReportSponsoredResultOk): ReportSponsoredResultOk {
        return ReportSponsoredResultOk()
    }

    fun map(dto: TdApi.ReportSponsoredResultFailed): ReportSponsoredResultFailed {
        return ReportSponsoredResultFailed()
    }

    fun map(dto: TdApi.ReportSponsoredResultOptionRequired): ReportSponsoredResultOptionRequired {
        return ReportSponsoredResultOptionRequired(
            title = dto.title,
            options = dto.options.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ReportSponsoredResultAdsHidden): ReportSponsoredResultAdsHidden {
        return ReportSponsoredResultAdsHidden()
    }

    fun map(dto: TdApi.ReportSponsoredResultPremiumRequired): ReportSponsoredResultPremiumRequired {
        return ReportSponsoredResultPremiumRequired()
    }

    fun map(dto: ReportSponsoredResult): TdApi.ReportSponsoredResult {
        when (dto) {
            is ReportSponsoredResultOk -> return map(dto)
            is ReportSponsoredResultFailed -> return map(dto)
            is ReportSponsoredResultOptionRequired -> return map(dto)
            is ReportSponsoredResultAdsHidden -> return map(dto)
            is ReportSponsoredResultPremiumRequired -> return map(dto)
        }
    }

    fun map(dto: ReportSponsoredResultOk): TdApi.ReportSponsoredResultOk {
        return TdApi.ReportSponsoredResultOk()
    }

    fun map(dto: ReportSponsoredResultFailed): TdApi.ReportSponsoredResultFailed {
        return TdApi.ReportSponsoredResultFailed()
    }

    fun map(dto: ReportSponsoredResultOptionRequired): TdApi.ReportSponsoredResultOptionRequired {
        return TdApi.ReportSponsoredResultOptionRequired(
            title = dto.title,
            options = dto.options.mapArray { map(it) },
        )
    }

    fun map(dto: ReportSponsoredResultAdsHidden): TdApi.ReportSponsoredResultAdsHidden {
        return TdApi.ReportSponsoredResultAdsHidden()
    }

    fun map(dto: ReportSponsoredResultPremiumRequired): TdApi.ReportSponsoredResultPremiumRequired {
        return TdApi.ReportSponsoredResultPremiumRequired()
    }

    fun map(dto: TdApi.ReportStoryResult): ReportStoryResult {
        when (dto) {
            is TdApi.ReportStoryResultOk -> return map(dto)
            is TdApi.ReportStoryResultOptionRequired -> return map(dto)
            is TdApi.ReportStoryResultTextRequired -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ReportStoryResultOk): ReportStoryResultOk {
        return ReportStoryResultOk()
    }

    fun map(dto: TdApi.ReportStoryResultOptionRequired): ReportStoryResultOptionRequired {
        return ReportStoryResultOptionRequired(
            title = dto.title,
            options = dto.options.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.ReportStoryResultTextRequired): ReportStoryResultTextRequired {
        return ReportStoryResultTextRequired(
            optionId = dto.optionId,
            isOptional = dto.isOptional,
        )
    }

    fun map(dto: ReportStoryResult): TdApi.ReportStoryResult {
        when (dto) {
            is ReportStoryResultOk -> return map(dto)
            is ReportStoryResultOptionRequired -> return map(dto)
            is ReportStoryResultTextRequired -> return map(dto)
        }
    }

    fun map(dto: ReportStoryResultOk): TdApi.ReportStoryResultOk {
        return TdApi.ReportStoryResultOk()
    }

    fun map(dto: ReportStoryResultOptionRequired): TdApi.ReportStoryResultOptionRequired {
        return TdApi.ReportStoryResultOptionRequired(
            title = dto.title,
            options = dto.options.mapArray { map(it) },
        )
    }

    fun map(dto: ReportStoryResultTextRequired): TdApi.ReportStoryResultTextRequired {
        return TdApi.ReportStoryResultTextRequired(
            optionId = dto.optionId,
            isOptional = dto.isOptional,
        )
    }

    fun map(dto: TdApi.ResendCodeReason): ResendCodeReason {
        when (dto) {
            is TdApi.ResendCodeReasonUserRequest -> return map(dto)
            is TdApi.ResendCodeReasonVerificationFailed -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ResendCodeReasonUserRequest): ResendCodeReasonUserRequest {
        return ResendCodeReasonUserRequest()
    }

    fun map(dto: TdApi.ResendCodeReasonVerificationFailed): ResendCodeReasonVerificationFailed {
        return ResendCodeReasonVerificationFailed(
            errorMessage = dto.errorMessage,
        )
    }

    fun map(dto: ResendCodeReason): TdApi.ResendCodeReason {
        when (dto) {
            is ResendCodeReasonUserRequest -> return map(dto)
            is ResendCodeReasonVerificationFailed -> return map(dto)
        }
    }

    fun map(dto: ResendCodeReasonUserRequest): TdApi.ResendCodeReasonUserRequest {
        return TdApi.ResendCodeReasonUserRequest()
    }

    fun map(dto: ResendCodeReasonVerificationFailed): TdApi.ResendCodeReasonVerificationFailed {
        return TdApi.ResendCodeReasonVerificationFailed(
            errorMessage = dto.errorMessage,
        )
    }

    fun map(dto: TdApi.ResetPasswordResult): ResetPasswordResult {
        when (dto) {
            is TdApi.ResetPasswordResultOk -> return map(dto)
            is TdApi.ResetPasswordResultPending -> return map(dto)
            is TdApi.ResetPasswordResultDeclined -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ResetPasswordResultOk): ResetPasswordResultOk {
        return ResetPasswordResultOk()
    }

    fun map(dto: TdApi.ResetPasswordResultPending): ResetPasswordResultPending {
        return ResetPasswordResultPending(
            pendingResetDate = dto.pendingResetDate,
        )
    }

    fun map(dto: TdApi.ResetPasswordResultDeclined): ResetPasswordResultDeclined {
        return ResetPasswordResultDeclined(
            retryDate = dto.retryDate,
        )
    }

    fun map(dto: ResetPasswordResult): TdApi.ResetPasswordResult {
        when (dto) {
            is ResetPasswordResultOk -> return map(dto)
            is ResetPasswordResultPending -> return map(dto)
            is ResetPasswordResultDeclined -> return map(dto)
        }
    }

    fun map(dto: ResetPasswordResultOk): TdApi.ResetPasswordResultOk {
        return TdApi.ResetPasswordResultOk()
    }

    fun map(dto: ResetPasswordResultPending): TdApi.ResetPasswordResultPending {
        return TdApi.ResetPasswordResultPending(
            pendingResetDate = dto.pendingResetDate,
        )
    }

    fun map(dto: ResetPasswordResultDeclined): TdApi.ResetPasswordResultDeclined {
        return TdApi.ResetPasswordResultDeclined(
            retryDate = dto.retryDate,
        )
    }

    fun map(dto: TdApi.RevenueWithdrawalState): RevenueWithdrawalState {
        when (dto) {
            is TdApi.RevenueWithdrawalStatePending -> return map(dto)
            is TdApi.RevenueWithdrawalStateSucceeded -> return map(dto)
            is TdApi.RevenueWithdrawalStateFailed -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.RevenueWithdrawalStatePending): RevenueWithdrawalStatePending {
        return RevenueWithdrawalStatePending()
    }

    fun map(dto: TdApi.RevenueWithdrawalStateSucceeded): RevenueWithdrawalStateSucceeded {
        return RevenueWithdrawalStateSucceeded(
            date = dto.date,
            url = dto.url,
        )
    }

    fun map(dto: TdApi.RevenueWithdrawalStateFailed): RevenueWithdrawalStateFailed {
        return RevenueWithdrawalStateFailed()
    }

    fun map(dto: RevenueWithdrawalState): TdApi.RevenueWithdrawalState {
        when (dto) {
            is RevenueWithdrawalStatePending -> return map(dto)
            is RevenueWithdrawalStateSucceeded -> return map(dto)
            is RevenueWithdrawalStateFailed -> return map(dto)
        }
    }

    fun map(dto: RevenueWithdrawalStatePending): TdApi.RevenueWithdrawalStatePending {
        return TdApi.RevenueWithdrawalStatePending()
    }

    fun map(dto: RevenueWithdrawalStateSucceeded): TdApi.RevenueWithdrawalStateSucceeded {
        return TdApi.RevenueWithdrawalStateSucceeded(
            date = dto.date,
            url = dto.url,
        )
    }

    fun map(dto: RevenueWithdrawalStateFailed): TdApi.RevenueWithdrawalStateFailed {
        return TdApi.RevenueWithdrawalStateFailed()
    }

    fun map(dto: TdApi.RichText): RichText {
        when (dto) {
            is TdApi.RichTextPlain -> return map(dto)
            is TdApi.RichTextBold -> return map(dto)
            is TdApi.RichTextItalic -> return map(dto)
            is TdApi.RichTextUnderline -> return map(dto)
            is TdApi.RichTextStrikethrough -> return map(dto)
            is TdApi.RichTextFixed -> return map(dto)
            is TdApi.RichTextUrl -> return map(dto)
            is TdApi.RichTextEmailAddress -> return map(dto)
            is TdApi.RichTextSubscript -> return map(dto)
            is TdApi.RichTextSuperscript -> return map(dto)
            is TdApi.RichTextMarked -> return map(dto)
            is TdApi.RichTextPhoneNumber -> return map(dto)
            is TdApi.RichTextIcon -> return map(dto)
            is TdApi.RichTextReference -> return map(dto)
            is TdApi.RichTextAnchor -> return map(dto)
            is TdApi.RichTextAnchorLink -> return map(dto)
            is TdApi.RichTexts -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.RichTextPlain): RichTextPlain {
        return RichTextPlain(
            text = dto.text,
        )
    }

    fun map(dto: TdApi.RichTextBold): RichTextBold {
        return RichTextBold(
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.RichTextItalic): RichTextItalic {
        return RichTextItalic(
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.RichTextUnderline): RichTextUnderline {
        return RichTextUnderline(
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.RichTextStrikethrough): RichTextStrikethrough {
        return RichTextStrikethrough(
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.RichTextFixed): RichTextFixed {
        return RichTextFixed(
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.RichTextUrl): RichTextUrl {
        return RichTextUrl(
            text = map(dto.text),
            url = dto.url,
            isCached = dto.isCached,
        )
    }

    fun map(dto: TdApi.RichTextEmailAddress): RichTextEmailAddress {
        return RichTextEmailAddress(
            text = map(dto.text),
            emailAddress = dto.emailAddress,
        )
    }

    fun map(dto: TdApi.RichTextSubscript): RichTextSubscript {
        return RichTextSubscript(
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.RichTextSuperscript): RichTextSuperscript {
        return RichTextSuperscript(
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.RichTextMarked): RichTextMarked {
        return RichTextMarked(
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.RichTextPhoneNumber): RichTextPhoneNumber {
        return RichTextPhoneNumber(
            text = map(dto.text),
            phoneNumber = dto.phoneNumber,
        )
    }

    fun map(dto: TdApi.RichTextIcon): RichTextIcon {
        return RichTextIcon(
            document = map(dto.document),
            width = dto.width,
            height = dto.height,
        )
    }

    fun map(dto: TdApi.RichTextReference): RichTextReference {
        return RichTextReference(
            text = map(dto.text),
            anchorName = dto.anchorName,
            url = dto.url,
        )
    }

    fun map(dto: TdApi.RichTextAnchor): RichTextAnchor {
        return RichTextAnchor(
            name = dto.name,
        )
    }

    fun map(dto: TdApi.RichTextAnchorLink): RichTextAnchorLink {
        return RichTextAnchorLink(
            text = map(dto.text),
            anchorName = dto.anchorName,
            url = dto.url,
        )
    }

    fun map(dto: TdApi.RichTexts): RichTexts {
        return RichTexts(
            texts = dto.texts.mapArray { map(it) },
        )
    }

    fun map(dto: RichText): TdApi.RichText {
        when (dto) {
            is RichTextPlain -> return map(dto)
            is RichTextBold -> return map(dto)
            is RichTextItalic -> return map(dto)
            is RichTextUnderline -> return map(dto)
            is RichTextStrikethrough -> return map(dto)
            is RichTextFixed -> return map(dto)
            is RichTextUrl -> return map(dto)
            is RichTextEmailAddress -> return map(dto)
            is RichTextSubscript -> return map(dto)
            is RichTextSuperscript -> return map(dto)
            is RichTextMarked -> return map(dto)
            is RichTextPhoneNumber -> return map(dto)
            is RichTextIcon -> return map(dto)
            is RichTextReference -> return map(dto)
            is RichTextAnchor -> return map(dto)
            is RichTextAnchorLink -> return map(dto)
            is RichTexts -> return map(dto)
        }
    }

    fun map(dto: RichTextPlain): TdApi.RichTextPlain {
        return TdApi.RichTextPlain(
            text = dto.text,
        )
    }

    fun map(dto: RichTextBold): TdApi.RichTextBold {
        return TdApi.RichTextBold(
            text = map(dto.text),
        )
    }

    fun map(dto: RichTextItalic): TdApi.RichTextItalic {
        return TdApi.RichTextItalic(
            text = map(dto.text),
        )
    }

    fun map(dto: RichTextUnderline): TdApi.RichTextUnderline {
        return TdApi.RichTextUnderline(
            text = map(dto.text),
        )
    }

    fun map(dto: RichTextStrikethrough): TdApi.RichTextStrikethrough {
        return TdApi.RichTextStrikethrough(
            text = map(dto.text),
        )
    }

    fun map(dto: RichTextFixed): TdApi.RichTextFixed {
        return TdApi.RichTextFixed(
            text = map(dto.text),
        )
    }

    fun map(dto: RichTextUrl): TdApi.RichTextUrl {
        return TdApi.RichTextUrl(
            text = map(dto.text),
            url = dto.url,
            isCached = dto.isCached,
        )
    }

    fun map(dto: RichTextEmailAddress): TdApi.RichTextEmailAddress {
        return TdApi.RichTextEmailAddress(
            text = map(dto.text),
            emailAddress = dto.emailAddress,
        )
    }

    fun map(dto: RichTextSubscript): TdApi.RichTextSubscript {
        return TdApi.RichTextSubscript(
            text = map(dto.text),
        )
    }

    fun map(dto: RichTextSuperscript): TdApi.RichTextSuperscript {
        return TdApi.RichTextSuperscript(
            text = map(dto.text),
        )
    }

    fun map(dto: RichTextMarked): TdApi.RichTextMarked {
        return TdApi.RichTextMarked(
            text = map(dto.text),
        )
    }

    fun map(dto: RichTextPhoneNumber): TdApi.RichTextPhoneNumber {
        return TdApi.RichTextPhoneNumber(
            text = map(dto.text),
            phoneNumber = dto.phoneNumber,
        )
    }

    fun map(dto: RichTextIcon): TdApi.RichTextIcon {
        return TdApi.RichTextIcon(
            document = map(dto.document),
            width = dto.width,
            height = dto.height,
        )
    }

    fun map(dto: RichTextReference): TdApi.RichTextReference {
        return TdApi.RichTextReference(
            text = map(dto.text),
            anchorName = dto.anchorName,
            url = dto.url,
        )
    }

    fun map(dto: RichTextAnchor): TdApi.RichTextAnchor {
        return TdApi.RichTextAnchor(
            name = dto.name,
        )
    }

    fun map(dto: RichTextAnchorLink): TdApi.RichTextAnchorLink {
        return TdApi.RichTextAnchorLink(
            text = map(dto.text),
            anchorName = dto.anchorName,
            url = dto.url,
        )
    }

    fun map(dto: RichTexts): TdApi.RichTexts {
        return TdApi.RichTexts(
            texts = dto.texts.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.RtmpUrl): RtmpUrl {
        return RtmpUrl(
            url = dto.url,
            streamKey = dto.streamKey,
        )
    }

    fun map(dto: RtmpUrl): TdApi.RtmpUrl {
        return TdApi.RtmpUrl(
            url = dto.url,
            streamKey = dto.streamKey,
        )
    }

    fun map(dto: TdApi.SavedCredentials): SavedCredentials {
        return SavedCredentials(
            id = dto.id,
            title = dto.title,
        )
    }

    fun map(dto: SavedCredentials): TdApi.SavedCredentials {
        return TdApi.SavedCredentials(
            id = dto.id,
            title = dto.title,
        )
    }

    fun map(dto: TdApi.SavedMessagesTag): SavedMessagesTag {
        return SavedMessagesTag(
            tag = map(dto.tag),
            label = dto.label,
            count = dto.count,
        )
    }

    fun map(dto: SavedMessagesTag): TdApi.SavedMessagesTag {
        return TdApi.SavedMessagesTag(
            tag = map(dto.tag),
            label = dto.label,
            count = dto.count,
        )
    }

    fun map(dto: TdApi.SavedMessagesTags): SavedMessagesTags {
        return SavedMessagesTags(
            tags = dto.tags.mapArray { map(it) },
        )
    }

    fun map(dto: SavedMessagesTags): TdApi.SavedMessagesTags {
        return TdApi.SavedMessagesTags(
            tags = dto.tags.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.SavedMessagesTopic): SavedMessagesTopic {
        return SavedMessagesTopic(
            id = dto.id,
            type = map(dto.type),
            isPinned = dto.isPinned,
            order = dto.order,
            lastMessage = dto.lastMessage?.let { map(it) },
            draftMessage = dto.draftMessage?.let { map(it) },
        )
    }

    fun map(dto: SavedMessagesTopic): TdApi.SavedMessagesTopic {
        return TdApi.SavedMessagesTopic(
            id = dto.id,
            type = map(dto.type),
            isPinned = dto.isPinned,
            order = dto.order,
            lastMessage = dto.lastMessage?.let { map(it) },
            draftMessage = dto.draftMessage?.let { map(it) },
        )
    }

    fun map(dto: TdApi.SavedMessagesTopicType): SavedMessagesTopicType {
        when (dto) {
            is TdApi.SavedMessagesTopicTypeMyNotes -> return map(dto)
            is TdApi.SavedMessagesTopicTypeAuthorHidden -> return map(dto)
            is TdApi.SavedMessagesTopicTypeSavedFromChat -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.SavedMessagesTopicTypeMyNotes): SavedMessagesTopicTypeMyNotes {
        return SavedMessagesTopicTypeMyNotes()
    }

    fun map(dto: TdApi.SavedMessagesTopicTypeAuthorHidden): SavedMessagesTopicTypeAuthorHidden {
        return SavedMessagesTopicTypeAuthorHidden()
    }

    fun map(dto: TdApi.SavedMessagesTopicTypeSavedFromChat): SavedMessagesTopicTypeSavedFromChat {
        return SavedMessagesTopicTypeSavedFromChat(
            chatId = dto.chatId,
        )
    }

    fun map(dto: SavedMessagesTopicType): TdApi.SavedMessagesTopicType {
        when (dto) {
            is SavedMessagesTopicTypeMyNotes -> return map(dto)
            is SavedMessagesTopicTypeAuthorHidden -> return map(dto)
            is SavedMessagesTopicTypeSavedFromChat -> return map(dto)
        }
    }

    fun map(dto: SavedMessagesTopicTypeMyNotes): TdApi.SavedMessagesTopicTypeMyNotes {
        return TdApi.SavedMessagesTopicTypeMyNotes()
    }

    fun map(dto: SavedMessagesTopicTypeAuthorHidden): TdApi.SavedMessagesTopicTypeAuthorHidden {
        return TdApi.SavedMessagesTopicTypeAuthorHidden()
    }

    fun map(dto: SavedMessagesTopicTypeSavedFromChat): TdApi.SavedMessagesTopicTypeSavedFromChat {
        return TdApi.SavedMessagesTopicTypeSavedFromChat(
            chatId = dto.chatId,
        )
    }

    fun map(dto: TdApi.ScopeAutosaveSettings): ScopeAutosaveSettings {
        return ScopeAutosaveSettings(
            autosavePhotos = dto.autosavePhotos,
            autosaveVideos = dto.autosaveVideos,
            maxVideoFileSize = dto.maxVideoFileSize,
        )
    }

    fun map(dto: ScopeAutosaveSettings): TdApi.ScopeAutosaveSettings {
        return TdApi.ScopeAutosaveSettings(
            autosavePhotos = dto.autosavePhotos,
            autosaveVideos = dto.autosaveVideos,
            maxVideoFileSize = dto.maxVideoFileSize,
        )
    }

    fun map(dto: TdApi.ScopeNotificationSettings): ScopeNotificationSettings {
        return ScopeNotificationSettings(
            muteFor = dto.muteFor,
            soundId = dto.soundId,
            showPreview = dto.showPreview,
            useDefaultMuteStories = dto.useDefaultMuteStories,
            muteStories = dto.muteStories,
            storySoundId = dto.storySoundId,
            showStoryPoster = dto.showStoryPoster,
            disablePinnedMessageNotifications = dto.disablePinnedMessageNotifications,
            disableMentionNotifications = dto.disableMentionNotifications,
        )
    }

    fun map(dto: ScopeNotificationSettings): TdApi.ScopeNotificationSettings {
        return TdApi.ScopeNotificationSettings(
            muteFor = dto.muteFor,
            soundId = dto.soundId,
            showPreview = dto.showPreview,
            useDefaultMuteStories = dto.useDefaultMuteStories,
            muteStories = dto.muteStories,
            storySoundId = dto.storySoundId,
            showStoryPoster = dto.showStoryPoster,
            disablePinnedMessageNotifications = dto.disablePinnedMessageNotifications,
            disableMentionNotifications = dto.disableMentionNotifications,
        )
    }

    fun map(dto: TdApi.SearchMessagesChatTypeFilter): SearchMessagesChatTypeFilter {
        when (dto) {
            is TdApi.SearchMessagesChatTypeFilterPrivate -> return map(dto)
            is TdApi.SearchMessagesChatTypeFilterGroup -> return map(dto)
            is TdApi.SearchMessagesChatTypeFilterChannel -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.SearchMessagesChatTypeFilterPrivate): SearchMessagesChatTypeFilterPrivate {
        return SearchMessagesChatTypeFilterPrivate()
    }

    fun map(dto: TdApi.SearchMessagesChatTypeFilterGroup): SearchMessagesChatTypeFilterGroup {
        return SearchMessagesChatTypeFilterGroup()
    }

    fun map(dto: TdApi.SearchMessagesChatTypeFilterChannel): SearchMessagesChatTypeFilterChannel {
        return SearchMessagesChatTypeFilterChannel()
    }

    fun map(dto: SearchMessagesChatTypeFilter): TdApi.SearchMessagesChatTypeFilter {
        when (dto) {
            is SearchMessagesChatTypeFilterPrivate -> return map(dto)
            is SearchMessagesChatTypeFilterGroup -> return map(dto)
            is SearchMessagesChatTypeFilterChannel -> return map(dto)
        }
    }

    fun map(dto: SearchMessagesChatTypeFilterPrivate): TdApi.SearchMessagesChatTypeFilterPrivate {
        return TdApi.SearchMessagesChatTypeFilterPrivate()
    }

    fun map(dto: SearchMessagesChatTypeFilterGroup): TdApi.SearchMessagesChatTypeFilterGroup {
        return TdApi.SearchMessagesChatTypeFilterGroup()
    }

    fun map(dto: SearchMessagesChatTypeFilterChannel): TdApi.SearchMessagesChatTypeFilterChannel {
        return TdApi.SearchMessagesChatTypeFilterChannel()
    }

    fun map(dto: TdApi.SearchMessagesFilter): SearchMessagesFilter {
        when (dto) {
            is TdApi.SearchMessagesFilterEmpty -> return map(dto)
            is TdApi.SearchMessagesFilterAnimation -> return map(dto)
            is TdApi.SearchMessagesFilterAudio -> return map(dto)
            is TdApi.SearchMessagesFilterDocument -> return map(dto)
            is TdApi.SearchMessagesFilterPhoto -> return map(dto)
            is TdApi.SearchMessagesFilterVideo -> return map(dto)
            is TdApi.SearchMessagesFilterVoiceNote -> return map(dto)
            is TdApi.SearchMessagesFilterPhotoAndVideo -> return map(dto)
            is TdApi.SearchMessagesFilterUrl -> return map(dto)
            is TdApi.SearchMessagesFilterChatPhoto -> return map(dto)
            is TdApi.SearchMessagesFilterVideoNote -> return map(dto)
            is TdApi.SearchMessagesFilterVoiceAndVideoNote -> return map(dto)
            is TdApi.SearchMessagesFilterMention -> return map(dto)
            is TdApi.SearchMessagesFilterUnreadMention -> return map(dto)
            is TdApi.SearchMessagesFilterUnreadReaction -> return map(dto)
            is TdApi.SearchMessagesFilterFailedToSend -> return map(dto)
            is TdApi.SearchMessagesFilterPinned -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.SearchMessagesFilterEmpty): SearchMessagesFilterEmpty {
        return SearchMessagesFilterEmpty()
    }

    fun map(dto: TdApi.SearchMessagesFilterAnimation): SearchMessagesFilterAnimation {
        return SearchMessagesFilterAnimation()
    }

    fun map(dto: TdApi.SearchMessagesFilterAudio): SearchMessagesFilterAudio {
        return SearchMessagesFilterAudio()
    }

    fun map(dto: TdApi.SearchMessagesFilterDocument): SearchMessagesFilterDocument {
        return SearchMessagesFilterDocument()
    }

    fun map(dto: TdApi.SearchMessagesFilterPhoto): SearchMessagesFilterPhoto {
        return SearchMessagesFilterPhoto()
    }

    fun map(dto: TdApi.SearchMessagesFilterVideo): SearchMessagesFilterVideo {
        return SearchMessagesFilterVideo()
    }

    fun map(dto: TdApi.SearchMessagesFilterVoiceNote): SearchMessagesFilterVoiceNote {
        return SearchMessagesFilterVoiceNote()
    }

    fun map(dto: TdApi.SearchMessagesFilterPhotoAndVideo): SearchMessagesFilterPhotoAndVideo {
        return SearchMessagesFilterPhotoAndVideo()
    }

    fun map(dto: TdApi.SearchMessagesFilterUrl): SearchMessagesFilterUrl {
        return SearchMessagesFilterUrl()
    }

    fun map(dto: TdApi.SearchMessagesFilterChatPhoto): SearchMessagesFilterChatPhoto {
        return SearchMessagesFilterChatPhoto()
    }

    fun map(dto: TdApi.SearchMessagesFilterVideoNote): SearchMessagesFilterVideoNote {
        return SearchMessagesFilterVideoNote()
    }

    fun map(dto: TdApi.SearchMessagesFilterVoiceAndVideoNote): SearchMessagesFilterVoiceAndVideoNote {
        return SearchMessagesFilterVoiceAndVideoNote()
    }

    fun map(dto: TdApi.SearchMessagesFilterMention): SearchMessagesFilterMention {
        return SearchMessagesFilterMention()
    }

    fun map(dto: TdApi.SearchMessagesFilterUnreadMention): SearchMessagesFilterUnreadMention {
        return SearchMessagesFilterUnreadMention()
    }

    fun map(dto: TdApi.SearchMessagesFilterUnreadReaction): SearchMessagesFilterUnreadReaction {
        return SearchMessagesFilterUnreadReaction()
    }

    fun map(dto: TdApi.SearchMessagesFilterFailedToSend): SearchMessagesFilterFailedToSend {
        return SearchMessagesFilterFailedToSend()
    }

    fun map(dto: TdApi.SearchMessagesFilterPinned): SearchMessagesFilterPinned {
        return SearchMessagesFilterPinned()
    }

    fun map(dto: SearchMessagesFilter): TdApi.SearchMessagesFilter {
        when (dto) {
            is SearchMessagesFilterEmpty -> return map(dto)
            is SearchMessagesFilterAnimation -> return map(dto)
            is SearchMessagesFilterAudio -> return map(dto)
            is SearchMessagesFilterDocument -> return map(dto)
            is SearchMessagesFilterPhoto -> return map(dto)
            is SearchMessagesFilterVideo -> return map(dto)
            is SearchMessagesFilterVoiceNote -> return map(dto)
            is SearchMessagesFilterPhotoAndVideo -> return map(dto)
            is SearchMessagesFilterUrl -> return map(dto)
            is SearchMessagesFilterChatPhoto -> return map(dto)
            is SearchMessagesFilterVideoNote -> return map(dto)
            is SearchMessagesFilterVoiceAndVideoNote -> return map(dto)
            is SearchMessagesFilterMention -> return map(dto)
            is SearchMessagesFilterUnreadMention -> return map(dto)
            is SearchMessagesFilterUnreadReaction -> return map(dto)
            is SearchMessagesFilterFailedToSend -> return map(dto)
            is SearchMessagesFilterPinned -> return map(dto)
        }
    }

    fun map(dto: SearchMessagesFilterEmpty): TdApi.SearchMessagesFilterEmpty {
        return TdApi.SearchMessagesFilterEmpty()
    }

    fun map(dto: SearchMessagesFilterAnimation): TdApi.SearchMessagesFilterAnimation {
        return TdApi.SearchMessagesFilterAnimation()
    }

    fun map(dto: SearchMessagesFilterAudio): TdApi.SearchMessagesFilterAudio {
        return TdApi.SearchMessagesFilterAudio()
    }

    fun map(dto: SearchMessagesFilterDocument): TdApi.SearchMessagesFilterDocument {
        return TdApi.SearchMessagesFilterDocument()
    }

    fun map(dto: SearchMessagesFilterPhoto): TdApi.SearchMessagesFilterPhoto {
        return TdApi.SearchMessagesFilterPhoto()
    }

    fun map(dto: SearchMessagesFilterVideo): TdApi.SearchMessagesFilterVideo {
        return TdApi.SearchMessagesFilterVideo()
    }

    fun map(dto: SearchMessagesFilterVoiceNote): TdApi.SearchMessagesFilterVoiceNote {
        return TdApi.SearchMessagesFilterVoiceNote()
    }

    fun map(dto: SearchMessagesFilterPhotoAndVideo): TdApi.SearchMessagesFilterPhotoAndVideo {
        return TdApi.SearchMessagesFilterPhotoAndVideo()
    }

    fun map(dto: SearchMessagesFilterUrl): TdApi.SearchMessagesFilterUrl {
        return TdApi.SearchMessagesFilterUrl()
    }

    fun map(dto: SearchMessagesFilterChatPhoto): TdApi.SearchMessagesFilterChatPhoto {
        return TdApi.SearchMessagesFilterChatPhoto()
    }

    fun map(dto: SearchMessagesFilterVideoNote): TdApi.SearchMessagesFilterVideoNote {
        return TdApi.SearchMessagesFilterVideoNote()
    }

    fun map(dto: SearchMessagesFilterVoiceAndVideoNote): TdApi.SearchMessagesFilterVoiceAndVideoNote {
        return TdApi.SearchMessagesFilterVoiceAndVideoNote()
    }

    fun map(dto: SearchMessagesFilterMention): TdApi.SearchMessagesFilterMention {
        return TdApi.SearchMessagesFilterMention()
    }

    fun map(dto: SearchMessagesFilterUnreadMention): TdApi.SearchMessagesFilterUnreadMention {
        return TdApi.SearchMessagesFilterUnreadMention()
    }

    fun map(dto: SearchMessagesFilterUnreadReaction): TdApi.SearchMessagesFilterUnreadReaction {
        return TdApi.SearchMessagesFilterUnreadReaction()
    }

    fun map(dto: SearchMessagesFilterFailedToSend): TdApi.SearchMessagesFilterFailedToSend {
        return TdApi.SearchMessagesFilterFailedToSend()
    }

    fun map(dto: SearchMessagesFilterPinned): TdApi.SearchMessagesFilterPinned {
        return TdApi.SearchMessagesFilterPinned()
    }

    fun map(dto: TdApi.Seconds): Seconds {
        return Seconds(
            seconds = dto.seconds,
        )
    }

    fun map(dto: Seconds): TdApi.Seconds {
        return TdApi.Seconds(
            seconds = dto.seconds,
        )
    }

    fun map(dto: TdApi.SecretChat): SecretChat {
        return SecretChat(
            id = dto.id,
            userId = dto.userId,
            state = map(dto.state),
            isOutbound = dto.isOutbound,
            keyHash = dto.keyHash,
            layer = dto.layer,
        )
    }

    fun map(dto: SecretChat): TdApi.SecretChat {
        return TdApi.SecretChat(
            id = dto.id,
            userId = dto.userId,
            state = map(dto.state),
            isOutbound = dto.isOutbound,
            keyHash = dto.keyHash,
            layer = dto.layer,
        )
    }

    fun map(dto: TdApi.SecretChatState): SecretChatState {
        when (dto) {
            is TdApi.SecretChatStatePending -> return map(dto)
            is TdApi.SecretChatStateReady -> return map(dto)
            is TdApi.SecretChatStateClosed -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.SecretChatStatePending): SecretChatStatePending {
        return SecretChatStatePending()
    }

    fun map(dto: TdApi.SecretChatStateReady): SecretChatStateReady {
        return SecretChatStateReady()
    }

    fun map(dto: TdApi.SecretChatStateClosed): SecretChatStateClosed {
        return SecretChatStateClosed()
    }

    fun map(dto: SecretChatState): TdApi.SecretChatState {
        when (dto) {
            is SecretChatStatePending -> return map(dto)
            is SecretChatStateReady -> return map(dto)
            is SecretChatStateClosed -> return map(dto)
        }
    }

    fun map(dto: SecretChatStatePending): TdApi.SecretChatStatePending {
        return TdApi.SecretChatStatePending()
    }

    fun map(dto: SecretChatStateReady): TdApi.SecretChatStateReady {
        return TdApi.SecretChatStateReady()
    }

    fun map(dto: SecretChatStateClosed): TdApi.SecretChatStateClosed {
        return TdApi.SecretChatStateClosed()
    }

    fun map(dto: TdApi.SentGift): SentGift {
        when (dto) {
            is TdApi.SentGiftRegular -> return map(dto)
            is TdApi.SentGiftUpgraded -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.SentGiftRegular): SentGiftRegular {
        return SentGiftRegular(
            gift = map(dto.gift),
        )
    }

    fun map(dto: TdApi.SentGiftUpgraded): SentGiftUpgraded {
        return SentGiftUpgraded(
            gift = map(dto.gift),
        )
    }

    fun map(dto: SentGift): TdApi.SentGift {
        when (dto) {
            is SentGiftRegular -> return map(dto)
            is SentGiftUpgraded -> return map(dto)
        }
    }

    fun map(dto: SentGiftRegular): TdApi.SentGiftRegular {
        return TdApi.SentGiftRegular(
            gift = map(dto.gift),
        )
    }

    fun map(dto: SentGiftUpgraded): TdApi.SentGiftUpgraded {
        return TdApi.SentGiftUpgraded(
            gift = map(dto.gift),
        )
    }

    fun map(dto: TdApi.SentWebAppMessage): SentWebAppMessage {
        return SentWebAppMessage(
            inlineMessageId = dto.inlineMessageId,
        )
    }

    fun map(dto: SentWebAppMessage): TdApi.SentWebAppMessage {
        return TdApi.SentWebAppMessage(
            inlineMessageId = dto.inlineMessageId,
        )
    }

    fun map(dto: TdApi.Session): Session {
        return Session(
            id = dto.id,
            isCurrent = dto.isCurrent,
            isPasswordPending = dto.isPasswordPending,
            isUnconfirmed = dto.isUnconfirmed,
            canAcceptSecretChats = dto.canAcceptSecretChats,
            canAcceptCalls = dto.canAcceptCalls,
            type = map(dto.type),
            apiId = dto.apiId,
            applicationName = dto.applicationName,
            applicationVersion = dto.applicationVersion,
            isOfficialApplication = dto.isOfficialApplication,
            deviceModel = dto.deviceModel,
            platform = dto.platform,
            systemVersion = dto.systemVersion,
            logInDate = dto.logInDate,
            lastActiveDate = dto.lastActiveDate,
            ipAddress = dto.ipAddress,
            location = dto.location,
        )
    }

    fun map(dto: Session): TdApi.Session {
        return TdApi.Session(
            id = dto.id,
            isCurrent = dto.isCurrent,
            isPasswordPending = dto.isPasswordPending,
            isUnconfirmed = dto.isUnconfirmed,
            canAcceptSecretChats = dto.canAcceptSecretChats,
            canAcceptCalls = dto.canAcceptCalls,
            type = map(dto.type),
            apiId = dto.apiId,
            applicationName = dto.applicationName,
            applicationVersion = dto.applicationVersion,
            isOfficialApplication = dto.isOfficialApplication,
            deviceModel = dto.deviceModel,
            platform = dto.platform,
            systemVersion = dto.systemVersion,
            logInDate = dto.logInDate,
            lastActiveDate = dto.lastActiveDate,
            ipAddress = dto.ipAddress,
            location = dto.location,
        )
    }

    fun map(dto: TdApi.SessionType): SessionType {
        when (dto) {
            is TdApi.SessionTypeAndroid -> return map(dto)
            is TdApi.SessionTypeApple -> return map(dto)
            is TdApi.SessionTypeBrave -> return map(dto)
            is TdApi.SessionTypeChrome -> return map(dto)
            is TdApi.SessionTypeEdge -> return map(dto)
            is TdApi.SessionTypeFirefox -> return map(dto)
            is TdApi.SessionTypeIpad -> return map(dto)
            is TdApi.SessionTypeIphone -> return map(dto)
            is TdApi.SessionTypeLinux -> return map(dto)
            is TdApi.SessionTypeMac -> return map(dto)
            is TdApi.SessionTypeOpera -> return map(dto)
            is TdApi.SessionTypeSafari -> return map(dto)
            is TdApi.SessionTypeUbuntu -> return map(dto)
            is TdApi.SessionTypeUnknown -> return map(dto)
            is TdApi.SessionTypeVivaldi -> return map(dto)
            is TdApi.SessionTypeWindows -> return map(dto)
            is TdApi.SessionTypeXbox -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.SessionTypeAndroid): SessionTypeAndroid {
        return SessionTypeAndroid()
    }

    fun map(dto: TdApi.SessionTypeApple): SessionTypeApple {
        return SessionTypeApple()
    }

    fun map(dto: TdApi.SessionTypeBrave): SessionTypeBrave {
        return SessionTypeBrave()
    }

    fun map(dto: TdApi.SessionTypeChrome): SessionTypeChrome {
        return SessionTypeChrome()
    }

    fun map(dto: TdApi.SessionTypeEdge): SessionTypeEdge {
        return SessionTypeEdge()
    }

    fun map(dto: TdApi.SessionTypeFirefox): SessionTypeFirefox {
        return SessionTypeFirefox()
    }

    fun map(dto: TdApi.SessionTypeIpad): SessionTypeIpad {
        return SessionTypeIpad()
    }

    fun map(dto: TdApi.SessionTypeIphone): SessionTypeIphone {
        return SessionTypeIphone()
    }

    fun map(dto: TdApi.SessionTypeLinux): SessionTypeLinux {
        return SessionTypeLinux()
    }

    fun map(dto: TdApi.SessionTypeMac): SessionTypeMac {
        return SessionTypeMac()
    }

    fun map(dto: TdApi.SessionTypeOpera): SessionTypeOpera {
        return SessionTypeOpera()
    }

    fun map(dto: TdApi.SessionTypeSafari): SessionTypeSafari {
        return SessionTypeSafari()
    }

    fun map(dto: TdApi.SessionTypeUbuntu): SessionTypeUbuntu {
        return SessionTypeUbuntu()
    }

    fun map(dto: TdApi.SessionTypeUnknown): SessionTypeUnknown {
        return SessionTypeUnknown()
    }

    fun map(dto: TdApi.SessionTypeVivaldi): SessionTypeVivaldi {
        return SessionTypeVivaldi()
    }

    fun map(dto: TdApi.SessionTypeWindows): SessionTypeWindows {
        return SessionTypeWindows()
    }

    fun map(dto: TdApi.SessionTypeXbox): SessionTypeXbox {
        return SessionTypeXbox()
    }

    fun map(dto: SessionType): TdApi.SessionType {
        when (dto) {
            is SessionTypeAndroid -> return map(dto)
            is SessionTypeApple -> return map(dto)
            is SessionTypeBrave -> return map(dto)
            is SessionTypeChrome -> return map(dto)
            is SessionTypeEdge -> return map(dto)
            is SessionTypeFirefox -> return map(dto)
            is SessionTypeIpad -> return map(dto)
            is SessionTypeIphone -> return map(dto)
            is SessionTypeLinux -> return map(dto)
            is SessionTypeMac -> return map(dto)
            is SessionTypeOpera -> return map(dto)
            is SessionTypeSafari -> return map(dto)
            is SessionTypeUbuntu -> return map(dto)
            is SessionTypeUnknown -> return map(dto)
            is SessionTypeVivaldi -> return map(dto)
            is SessionTypeWindows -> return map(dto)
            is SessionTypeXbox -> return map(dto)
        }
    }

    fun map(dto: SessionTypeAndroid): TdApi.SessionTypeAndroid {
        return TdApi.SessionTypeAndroid()
    }

    fun map(dto: SessionTypeApple): TdApi.SessionTypeApple {
        return TdApi.SessionTypeApple()
    }

    fun map(dto: SessionTypeBrave): TdApi.SessionTypeBrave {
        return TdApi.SessionTypeBrave()
    }

    fun map(dto: SessionTypeChrome): TdApi.SessionTypeChrome {
        return TdApi.SessionTypeChrome()
    }

    fun map(dto: SessionTypeEdge): TdApi.SessionTypeEdge {
        return TdApi.SessionTypeEdge()
    }

    fun map(dto: SessionTypeFirefox): TdApi.SessionTypeFirefox {
        return TdApi.SessionTypeFirefox()
    }

    fun map(dto: SessionTypeIpad): TdApi.SessionTypeIpad {
        return TdApi.SessionTypeIpad()
    }

    fun map(dto: SessionTypeIphone): TdApi.SessionTypeIphone {
        return TdApi.SessionTypeIphone()
    }

    fun map(dto: SessionTypeLinux): TdApi.SessionTypeLinux {
        return TdApi.SessionTypeLinux()
    }

    fun map(dto: SessionTypeMac): TdApi.SessionTypeMac {
        return TdApi.SessionTypeMac()
    }

    fun map(dto: SessionTypeOpera): TdApi.SessionTypeOpera {
        return TdApi.SessionTypeOpera()
    }

    fun map(dto: SessionTypeSafari): TdApi.SessionTypeSafari {
        return TdApi.SessionTypeSafari()
    }

    fun map(dto: SessionTypeUbuntu): TdApi.SessionTypeUbuntu {
        return TdApi.SessionTypeUbuntu()
    }

    fun map(dto: SessionTypeUnknown): TdApi.SessionTypeUnknown {
        return TdApi.SessionTypeUnknown()
    }

    fun map(dto: SessionTypeVivaldi): TdApi.SessionTypeVivaldi {
        return TdApi.SessionTypeVivaldi()
    }

    fun map(dto: SessionTypeWindows): TdApi.SessionTypeWindows {
        return TdApi.SessionTypeWindows()
    }

    fun map(dto: SessionTypeXbox): TdApi.SessionTypeXbox {
        return TdApi.SessionTypeXbox()
    }

    fun map(dto: TdApi.Sessions): Sessions {
        return Sessions(
            sessions = dto.sessions.mapArray { map(it) },
            inactiveSessionTtlDays = dto.inactiveSessionTtlDays,
        )
    }

    fun map(dto: Sessions): TdApi.Sessions {
        return TdApi.Sessions(
            sessions = dto.sessions.mapArray { map(it) },
            inactiveSessionTtlDays = dto.inactiveSessionTtlDays,
        )
    }

    fun map(dto: TdApi.SharedChat): SharedChat {
        return SharedChat(
            chatId = dto.chatId,
            title = dto.title,
            username = dto.username,
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: SharedChat): TdApi.SharedChat {
        return TdApi.SharedChat(
            chatId = dto.chatId,
            title = dto.title,
            username = dto.username,
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: TdApi.SharedUser): SharedUser {
        return SharedUser(
            userId = dto.userId,
            firstName = dto.firstName,
            lastName = dto.lastName,
            username = dto.username,
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: SharedUser): TdApi.SharedUser {
        return TdApi.SharedUser(
            userId = dto.userId,
            firstName = dto.firstName,
            lastName = dto.lastName,
            username = dto.username,
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: TdApi.ShippingOption): ShippingOption {
        return ShippingOption(
            id = dto.id,
            title = dto.title,
            priceParts = dto.priceParts.mapArray { map(it) },
        )
    }

    fun map(dto: ShippingOption): TdApi.ShippingOption {
        return TdApi.ShippingOption(
            id = dto.id,
            title = dto.title,
            priceParts = dto.priceParts.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.SpeechRecognitionResult): SpeechRecognitionResult {
        when (dto) {
            is TdApi.SpeechRecognitionResultPending -> return map(dto)
            is TdApi.SpeechRecognitionResultText -> return map(dto)
            is TdApi.SpeechRecognitionResultError -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.SpeechRecognitionResultPending): SpeechRecognitionResultPending {
        return SpeechRecognitionResultPending(
            partialText = dto.partialText,
        )
    }

    fun map(dto: TdApi.SpeechRecognitionResultText): SpeechRecognitionResultText {
        return SpeechRecognitionResultText(
            text = dto.text,
        )
    }

    fun map(dto: TdApi.SpeechRecognitionResultError): SpeechRecognitionResultError {
        return SpeechRecognitionResultError(
            error = map(dto.error),
        )
    }

    fun map(dto: SpeechRecognitionResult): TdApi.SpeechRecognitionResult {
        when (dto) {
            is SpeechRecognitionResultPending -> return map(dto)
            is SpeechRecognitionResultText -> return map(dto)
            is SpeechRecognitionResultError -> return map(dto)
        }
    }

    fun map(dto: SpeechRecognitionResultPending): TdApi.SpeechRecognitionResultPending {
        return TdApi.SpeechRecognitionResultPending(
            partialText = dto.partialText,
        )
    }

    fun map(dto: SpeechRecognitionResultText): TdApi.SpeechRecognitionResultText {
        return TdApi.SpeechRecognitionResultText(
            text = dto.text,
        )
    }

    fun map(dto: SpeechRecognitionResultError): TdApi.SpeechRecognitionResultError {
        return TdApi.SpeechRecognitionResultError(
            error = map(dto.error),
        )
    }

    fun map(dto: TdApi.SponsoredChat): SponsoredChat {
        return SponsoredChat(
            uniqueId = dto.uniqueId,
            chatId = dto.chatId,
            sponsorInfo = dto.sponsorInfo,
            additionalInfo = dto.additionalInfo,
        )
    }

    fun map(dto: SponsoredChat): TdApi.SponsoredChat {
        return TdApi.SponsoredChat(
            uniqueId = dto.uniqueId,
            chatId = dto.chatId,
            sponsorInfo = dto.sponsorInfo,
            additionalInfo = dto.additionalInfo,
        )
    }

    fun map(dto: TdApi.SponsoredChats): SponsoredChats {
        return SponsoredChats(
            chats = dto.chats.mapArray { map(it) },
        )
    }

    fun map(dto: SponsoredChats): TdApi.SponsoredChats {
        return TdApi.SponsoredChats(
            chats = dto.chats.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.SponsoredMessage): SponsoredMessage {
        return SponsoredMessage(
            messageId = dto.messageId,
            isRecommended = dto.isRecommended,
            canBeReported = dto.canBeReported,
            content = map(dto.content),
            sponsor = map(dto.sponsor),
            title = dto.title,
            buttonText = dto.buttonText,
            accentColorId = dto.accentColorId,
            backgroundCustomEmojiId = dto.backgroundCustomEmojiId,
            additionalInfo = dto.additionalInfo,
        )
    }

    fun map(dto: SponsoredMessage): TdApi.SponsoredMessage {
        return TdApi.SponsoredMessage(
            messageId = dto.messageId,
            isRecommended = dto.isRecommended,
            canBeReported = dto.canBeReported,
            content = map(dto.content),
            sponsor = map(dto.sponsor),
            title = dto.title,
            buttonText = dto.buttonText,
            accentColorId = dto.accentColorId,
            backgroundCustomEmojiId = dto.backgroundCustomEmojiId,
            additionalInfo = dto.additionalInfo,
        )
    }

    fun map(dto: TdApi.SponsoredMessages): SponsoredMessages {
        return SponsoredMessages(
            messages = dto.messages.mapArray { map(it) },
            messagesBetween = dto.messagesBetween,
        )
    }

    fun map(dto: SponsoredMessages): TdApi.SponsoredMessages {
        return TdApi.SponsoredMessages(
            messages = dto.messages.mapArray { map(it) },
            messagesBetween = dto.messagesBetween,
        )
    }

    fun map(dto: TdApi.StarAmount): StarAmount {
        return StarAmount(
            starCount = dto.starCount,
            nanostarCount = dto.nanostarCount,
        )
    }

    fun map(dto: StarAmount): TdApi.StarAmount {
        return TdApi.StarAmount(
            starCount = dto.starCount,
            nanostarCount = dto.nanostarCount,
        )
    }

    fun map(dto: TdApi.StarCount): StarCount {
        return StarCount(
            starCount = dto.starCount,
        )
    }

    fun map(dto: StarCount): TdApi.StarCount {
        return TdApi.StarCount(
            starCount = dto.starCount,
        )
    }

    fun map(dto: TdApi.StarGiveawayPaymentOption): StarGiveawayPaymentOption {
        return StarGiveawayPaymentOption(
            currency = dto.currency,
            amount = dto.amount,
            starCount = dto.starCount,
            storeProductId = dto.storeProductId,
            yearlyBoostCount = dto.yearlyBoostCount,
            winnerOptions = dto.winnerOptions.mapArray { map(it) },
            isDefault = dto.isDefault,
            isAdditional = dto.isAdditional,
        )
    }

    fun map(dto: StarGiveawayPaymentOption): TdApi.StarGiveawayPaymentOption {
        return TdApi.StarGiveawayPaymentOption(
            currency = dto.currency,
            amount = dto.amount,
            starCount = dto.starCount,
            storeProductId = dto.storeProductId,
            yearlyBoostCount = dto.yearlyBoostCount,
            winnerOptions = dto.winnerOptions.mapArray { map(it) },
            isDefault = dto.isDefault,
            isAdditional = dto.isAdditional,
        )
    }

    fun map(dto: TdApi.StarGiveawayPaymentOptions): StarGiveawayPaymentOptions {
        return StarGiveawayPaymentOptions(
            options = dto.options.mapArray { map(it) },
        )
    }

    fun map(dto: StarGiveawayPaymentOptions): TdApi.StarGiveawayPaymentOptions {
        return TdApi.StarGiveawayPaymentOptions(
            options = dto.options.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.StarGiveawayWinnerOption): StarGiveawayWinnerOption {
        return StarGiveawayWinnerOption(
            winnerCount = dto.winnerCount,
            wonStarCount = dto.wonStarCount,
            isDefault = dto.isDefault,
        )
    }

    fun map(dto: StarGiveawayWinnerOption): TdApi.StarGiveawayWinnerOption {
        return TdApi.StarGiveawayWinnerOption(
            winnerCount = dto.winnerCount,
            wonStarCount = dto.wonStarCount,
            isDefault = dto.isDefault,
        )
    }

    fun map(dto: TdApi.StarPaymentOption): StarPaymentOption {
        return StarPaymentOption(
            currency = dto.currency,
            amount = dto.amount,
            starCount = dto.starCount,
            storeProductId = dto.storeProductId,
            isAdditional = dto.isAdditional,
        )
    }

    fun map(dto: StarPaymentOption): TdApi.StarPaymentOption {
        return TdApi.StarPaymentOption(
            currency = dto.currency,
            amount = dto.amount,
            starCount = dto.starCount,
            storeProductId = dto.storeProductId,
            isAdditional = dto.isAdditional,
        )
    }

    fun map(dto: TdApi.StarPaymentOptions): StarPaymentOptions {
        return StarPaymentOptions(
            options = dto.options.mapArray { map(it) },
        )
    }

    fun map(dto: StarPaymentOptions): TdApi.StarPaymentOptions {
        return TdApi.StarPaymentOptions(
            options = dto.options.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.StarRevenueStatistics): StarRevenueStatistics {
        return StarRevenueStatistics(
            revenueByDayGraph = map(dto.revenueByDayGraph),
            status = map(dto.status),
            usdRate = dto.usdRate,
        )
    }

    fun map(dto: StarRevenueStatistics): TdApi.StarRevenueStatistics {
        return TdApi.StarRevenueStatistics(
            revenueByDayGraph = map(dto.revenueByDayGraph),
            status = map(dto.status),
            usdRate = dto.usdRate,
        )
    }

    fun map(dto: TdApi.StarRevenueStatus): StarRevenueStatus {
        return StarRevenueStatus(
            totalAmount = map(dto.totalAmount),
            currentAmount = map(dto.currentAmount),
            availableAmount = map(dto.availableAmount),
            withdrawalEnabled = dto.withdrawalEnabled,
            nextWithdrawalIn = dto.nextWithdrawalIn,
        )
    }

    fun map(dto: StarRevenueStatus): TdApi.StarRevenueStatus {
        return TdApi.StarRevenueStatus(
            totalAmount = map(dto.totalAmount),
            currentAmount = map(dto.currentAmount),
            availableAmount = map(dto.availableAmount),
            withdrawalEnabled = dto.withdrawalEnabled,
            nextWithdrawalIn = dto.nextWithdrawalIn,
        )
    }

    fun map(dto: TdApi.StarSubscription): StarSubscription {
        return StarSubscription(
            id = dto.id,
            chatId = dto.chatId,
            expirationDate = dto.expirationDate,
            isCanceled = dto.isCanceled,
            isExpiring = dto.isExpiring,
            pricing = map(dto.pricing),
            type = map(dto.type),
        )
    }

    fun map(dto: StarSubscription): TdApi.StarSubscription {
        return TdApi.StarSubscription(
            id = dto.id,
            chatId = dto.chatId,
            expirationDate = dto.expirationDate,
            isCanceled = dto.isCanceled,
            isExpiring = dto.isExpiring,
            pricing = map(dto.pricing),
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.StarSubscriptionPricing): StarSubscriptionPricing {
        return StarSubscriptionPricing(
            period = dto.period,
            starCount = dto.starCount,
        )
    }

    fun map(dto: StarSubscriptionPricing): TdApi.StarSubscriptionPricing {
        return TdApi.StarSubscriptionPricing(
            period = dto.period,
            starCount = dto.starCount,
        )
    }

    fun map(dto: TdApi.StarSubscriptionType): StarSubscriptionType {
        when (dto) {
            is TdApi.StarSubscriptionTypeChannel -> return map(dto)
            is TdApi.StarSubscriptionTypeBot -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StarSubscriptionTypeChannel): StarSubscriptionTypeChannel {
        return StarSubscriptionTypeChannel(
            canReuse = dto.canReuse,
            inviteLink = dto.inviteLink,
        )
    }

    fun map(dto: TdApi.StarSubscriptionTypeBot): StarSubscriptionTypeBot {
        return StarSubscriptionTypeBot(
            isCanceledByBot = dto.isCanceledByBot,
            title = dto.title,
            photo = map(dto.photo),
            invoiceLink = dto.invoiceLink,
        )
    }

    fun map(dto: StarSubscriptionType): TdApi.StarSubscriptionType {
        when (dto) {
            is StarSubscriptionTypeChannel -> return map(dto)
            is StarSubscriptionTypeBot -> return map(dto)
        }
    }

    fun map(dto: StarSubscriptionTypeChannel): TdApi.StarSubscriptionTypeChannel {
        return TdApi.StarSubscriptionTypeChannel(
            canReuse = dto.canReuse,
            inviteLink = dto.inviteLink,
        )
    }

    fun map(dto: StarSubscriptionTypeBot): TdApi.StarSubscriptionTypeBot {
        return TdApi.StarSubscriptionTypeBot(
            isCanceledByBot = dto.isCanceledByBot,
            title = dto.title,
            photo = map(dto.photo),
            invoiceLink = dto.invoiceLink,
        )
    }

    fun map(dto: TdApi.StarSubscriptions): StarSubscriptions {
        return StarSubscriptions(
            starAmount = map(dto.starAmount),
            subscriptions = dto.subscriptions.mapArray { map(it) },
            requiredStarCount = dto.requiredStarCount,
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: StarSubscriptions): TdApi.StarSubscriptions {
        return TdApi.StarSubscriptions(
            starAmount = map(dto.starAmount),
            subscriptions = dto.subscriptions.mapArray { map(it) },
            requiredStarCount = dto.requiredStarCount,
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.StarTransaction): StarTransaction {
        return StarTransaction(
            id = dto.id,
            starAmount = map(dto.starAmount),
            isRefund = dto.isRefund,
            date = dto.date,
            type = map(dto.type),
        )
    }

    fun map(dto: StarTransaction): TdApi.StarTransaction {
        return TdApi.StarTransaction(
            id = dto.id,
            starAmount = map(dto.starAmount),
            isRefund = dto.isRefund,
            date = dto.date,
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.StarTransactionDirection): StarTransactionDirection {
        when (dto) {
            is TdApi.StarTransactionDirectionIncoming -> return map(dto)
            is TdApi.StarTransactionDirectionOutgoing -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StarTransactionDirectionIncoming): StarTransactionDirectionIncoming {
        return StarTransactionDirectionIncoming()
    }

    fun map(dto: TdApi.StarTransactionDirectionOutgoing): StarTransactionDirectionOutgoing {
        return StarTransactionDirectionOutgoing()
    }

    fun map(dto: StarTransactionDirection): TdApi.StarTransactionDirection {
        when (dto) {
            is StarTransactionDirectionIncoming -> return map(dto)
            is StarTransactionDirectionOutgoing -> return map(dto)
        }
    }

    fun map(dto: StarTransactionDirectionIncoming): TdApi.StarTransactionDirectionIncoming {
        return TdApi.StarTransactionDirectionIncoming()
    }

    fun map(dto: StarTransactionDirectionOutgoing): TdApi.StarTransactionDirectionOutgoing {
        return TdApi.StarTransactionDirectionOutgoing()
    }

    fun map(dto: TdApi.StarTransactionType): StarTransactionType {
        when (dto) {
            is TdApi.StarTransactionTypePremiumBotDeposit -> return map(dto)
            is TdApi.StarTransactionTypeAppStoreDeposit -> return map(dto)
            is TdApi.StarTransactionTypeGooglePlayDeposit -> return map(dto)
            is TdApi.StarTransactionTypeFragmentDeposit -> return map(dto)
            is TdApi.StarTransactionTypeUserDeposit -> return map(dto)
            is TdApi.StarTransactionTypeGiveawayDeposit -> return map(dto)
            is TdApi.StarTransactionTypeFragmentWithdrawal -> return map(dto)
            is TdApi.StarTransactionTypeTelegramAdsWithdrawal -> return map(dto)
            is TdApi.StarTransactionTypeTelegramApiUsage -> return map(dto)
            is TdApi.StarTransactionTypeBotPaidMediaPurchase -> return map(dto)
            is TdApi.StarTransactionTypeBotPaidMediaSale -> return map(dto)
            is TdApi.StarTransactionTypeChannelPaidMediaPurchase -> return map(dto)
            is TdApi.StarTransactionTypeChannelPaidMediaSale -> return map(dto)
            is TdApi.StarTransactionTypeBotInvoicePurchase -> return map(dto)
            is TdApi.StarTransactionTypeBotInvoiceSale -> return map(dto)
            is TdApi.StarTransactionTypeBotSubscriptionPurchase -> return map(dto)
            is TdApi.StarTransactionTypeBotSubscriptionSale -> return map(dto)
            is TdApi.StarTransactionTypeChannelSubscriptionPurchase -> return map(dto)
            is TdApi.StarTransactionTypeChannelSubscriptionSale -> return map(dto)
            is TdApi.StarTransactionTypeGiftPurchase -> return map(dto)
            is TdApi.StarTransactionTypeGiftTransfer -> return map(dto)
            is TdApi.StarTransactionTypeGiftSale -> return map(dto)
            is TdApi.StarTransactionTypeGiftUpgrade -> return map(dto)
            is TdApi.StarTransactionTypeUpgradedGiftPurchase -> return map(dto)
            is TdApi.StarTransactionTypeUpgradedGiftSale -> return map(dto)
            is TdApi.StarTransactionTypeChannelPaidReactionSend -> return map(dto)
            is TdApi.StarTransactionTypeChannelPaidReactionReceive -> return map(dto)
            is TdApi.StarTransactionTypeAffiliateProgramCommission -> return map(dto)
            is TdApi.StarTransactionTypePaidMessageSend -> return map(dto)
            is TdApi.StarTransactionTypePaidMessageReceive -> return map(dto)
            is TdApi.StarTransactionTypePremiumPurchase -> return map(dto)
            is TdApi.StarTransactionTypeBusinessBotTransferSend -> return map(dto)
            is TdApi.StarTransactionTypeBusinessBotTransferReceive -> return map(dto)
            is TdApi.StarTransactionTypeUnsupported -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StarTransactionTypePremiumBotDeposit): StarTransactionTypePremiumBotDeposit {
        return StarTransactionTypePremiumBotDeposit()
    }

    fun map(dto: TdApi.StarTransactionTypeAppStoreDeposit): StarTransactionTypeAppStoreDeposit {
        return StarTransactionTypeAppStoreDeposit()
    }

    fun map(dto: TdApi.StarTransactionTypeGooglePlayDeposit): StarTransactionTypeGooglePlayDeposit {
        return StarTransactionTypeGooglePlayDeposit()
    }

    fun map(dto: TdApi.StarTransactionTypeFragmentDeposit): StarTransactionTypeFragmentDeposit {
        return StarTransactionTypeFragmentDeposit()
    }

    fun map(dto: TdApi.StarTransactionTypeUserDeposit): StarTransactionTypeUserDeposit {
        return StarTransactionTypeUserDeposit(
            userId = dto.userId,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: TdApi.StarTransactionTypeGiveawayDeposit): StarTransactionTypeGiveawayDeposit {
        return StarTransactionTypeGiveawayDeposit(
            chatId = dto.chatId,
            giveawayMessageId = dto.giveawayMessageId,
        )
    }

    fun map(dto: TdApi.StarTransactionTypeFragmentWithdrawal): StarTransactionTypeFragmentWithdrawal {
        return StarTransactionTypeFragmentWithdrawal(
            withdrawalState = dto.withdrawalState?.let { map(it) },
        )
    }

    fun map(dto: TdApi.StarTransactionTypeTelegramAdsWithdrawal): StarTransactionTypeTelegramAdsWithdrawal {
        return StarTransactionTypeTelegramAdsWithdrawal()
    }

    fun map(dto: TdApi.StarTransactionTypeTelegramApiUsage): StarTransactionTypeTelegramApiUsage {
        return StarTransactionTypeTelegramApiUsage(
            requestCount = dto.requestCount,
        )
    }

    fun map(dto: TdApi.StarTransactionTypeBotPaidMediaPurchase): StarTransactionTypeBotPaidMediaPurchase {
        return StarTransactionTypeBotPaidMediaPurchase(
            userId = dto.userId,
            media = dto.media.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.StarTransactionTypeBotPaidMediaSale): StarTransactionTypeBotPaidMediaSale {
        return StarTransactionTypeBotPaidMediaSale(
            userId = dto.userId,
            media = dto.media.mapArray { map(it) },
            payload = dto.payload,
            affiliate = dto.affiliate?.let { map(it) },
        )
    }

    fun map(dto: TdApi.StarTransactionTypeChannelPaidMediaPurchase): StarTransactionTypeChannelPaidMediaPurchase {
        return StarTransactionTypeChannelPaidMediaPurchase(
            chatId = dto.chatId,
            messageId = dto.messageId,
            media = dto.media.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.StarTransactionTypeChannelPaidMediaSale): StarTransactionTypeChannelPaidMediaSale {
        return StarTransactionTypeChannelPaidMediaSale(
            userId = dto.userId,
            messageId = dto.messageId,
            media = dto.media.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.StarTransactionTypeBotInvoicePurchase): StarTransactionTypeBotInvoicePurchase {
        return StarTransactionTypeBotInvoicePurchase(
            userId = dto.userId,
            productInfo = map(dto.productInfo),
        )
    }

    fun map(dto: TdApi.StarTransactionTypeBotInvoiceSale): StarTransactionTypeBotInvoiceSale {
        return StarTransactionTypeBotInvoiceSale(
            userId = dto.userId,
            productInfo = map(dto.productInfo),
            invoicePayload = dto.invoicePayload,
            affiliate = dto.affiliate?.let { map(it) },
        )
    }

    fun map(dto: TdApi.StarTransactionTypeBotSubscriptionPurchase): StarTransactionTypeBotSubscriptionPurchase {
        return StarTransactionTypeBotSubscriptionPurchase(
            userId = dto.userId,
            subscriptionPeriod = dto.subscriptionPeriod,
            productInfo = map(dto.productInfo),
        )
    }

    fun map(dto: TdApi.StarTransactionTypeBotSubscriptionSale): StarTransactionTypeBotSubscriptionSale {
        return StarTransactionTypeBotSubscriptionSale(
            userId = dto.userId,
            subscriptionPeriod = dto.subscriptionPeriod,
            productInfo = map(dto.productInfo),
            invoicePayload = dto.invoicePayload,
            affiliate = dto.affiliate?.let { map(it) },
        )
    }

    fun map(dto: TdApi.StarTransactionTypeChannelSubscriptionPurchase): StarTransactionTypeChannelSubscriptionPurchase {
        return StarTransactionTypeChannelSubscriptionPurchase(
            chatId = dto.chatId,
            subscriptionPeriod = dto.subscriptionPeriod,
        )
    }

    fun map(dto: TdApi.StarTransactionTypeChannelSubscriptionSale): StarTransactionTypeChannelSubscriptionSale {
        return StarTransactionTypeChannelSubscriptionSale(
            userId = dto.userId,
            subscriptionPeriod = dto.subscriptionPeriod,
        )
    }

    fun map(dto: TdApi.StarTransactionTypeGiftPurchase): StarTransactionTypeGiftPurchase {
        return StarTransactionTypeGiftPurchase(
            ownerId = map(dto.ownerId),
            gift = map(dto.gift),
        )
    }

    fun map(dto: TdApi.StarTransactionTypeGiftTransfer): StarTransactionTypeGiftTransfer {
        return StarTransactionTypeGiftTransfer(
            ownerId = map(dto.ownerId),
            gift = map(dto.gift),
        )
    }

    fun map(dto: TdApi.StarTransactionTypeGiftSale): StarTransactionTypeGiftSale {
        return StarTransactionTypeGiftSale(
            userId = dto.userId,
            gift = map(dto.gift),
        )
    }

    fun map(dto: TdApi.StarTransactionTypeGiftUpgrade): StarTransactionTypeGiftUpgrade {
        return StarTransactionTypeGiftUpgrade(
            userId = dto.userId,
            gift = map(dto.gift),
        )
    }

    fun map(dto: TdApi.StarTransactionTypeUpgradedGiftPurchase): StarTransactionTypeUpgradedGiftPurchase {
        return StarTransactionTypeUpgradedGiftPurchase(
            userId = dto.userId,
            gift = map(dto.gift),
        )
    }

    fun map(dto: TdApi.StarTransactionTypeUpgradedGiftSale): StarTransactionTypeUpgradedGiftSale {
        return StarTransactionTypeUpgradedGiftSale(
            userId = dto.userId,
            gift = map(dto.gift),
            affiliate = map(dto.affiliate),
        )
    }

    fun map(dto: TdApi.StarTransactionTypeChannelPaidReactionSend): StarTransactionTypeChannelPaidReactionSend {
        return StarTransactionTypeChannelPaidReactionSend(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: TdApi.StarTransactionTypeChannelPaidReactionReceive): StarTransactionTypeChannelPaidReactionReceive {
        return StarTransactionTypeChannelPaidReactionReceive(
            userId = dto.userId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: TdApi.StarTransactionTypeAffiliateProgramCommission): StarTransactionTypeAffiliateProgramCommission {
        return StarTransactionTypeAffiliateProgramCommission(
            chatId = dto.chatId,
            commissionPerMille = dto.commissionPerMille,
        )
    }

    fun map(dto: TdApi.StarTransactionTypePaidMessageSend): StarTransactionTypePaidMessageSend {
        return StarTransactionTypePaidMessageSend(
            chatId = dto.chatId,
            messageCount = dto.messageCount,
        )
    }

    fun map(dto: TdApi.StarTransactionTypePaidMessageReceive): StarTransactionTypePaidMessageReceive {
        return StarTransactionTypePaidMessageReceive(
            senderId = map(dto.senderId),
            messageCount = dto.messageCount,
            commissionPerMille = dto.commissionPerMille,
            commissionStarAmount = map(dto.commissionStarAmount),
        )
    }

    fun map(dto: TdApi.StarTransactionTypePremiumPurchase): StarTransactionTypePremiumPurchase {
        return StarTransactionTypePremiumPurchase(
            userId = dto.userId,
            monthCount = dto.monthCount,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: TdApi.StarTransactionTypeBusinessBotTransferSend): StarTransactionTypeBusinessBotTransferSend {
        return StarTransactionTypeBusinessBotTransferSend(
            userId = dto.userId,
        )
    }

    fun map(dto: TdApi.StarTransactionTypeBusinessBotTransferReceive): StarTransactionTypeBusinessBotTransferReceive {
        return StarTransactionTypeBusinessBotTransferReceive(
            userId = dto.userId,
        )
    }

    fun map(dto: TdApi.StarTransactionTypeUnsupported): StarTransactionTypeUnsupported {
        return StarTransactionTypeUnsupported()
    }

    fun map(dto: StarTransactionType): TdApi.StarTransactionType {
        when (dto) {
            is StarTransactionTypePremiumBotDeposit -> return map(dto)
            is StarTransactionTypeAppStoreDeposit -> return map(dto)
            is StarTransactionTypeGooglePlayDeposit -> return map(dto)
            is StarTransactionTypeFragmentDeposit -> return map(dto)
            is StarTransactionTypeUserDeposit -> return map(dto)
            is StarTransactionTypeGiveawayDeposit -> return map(dto)
            is StarTransactionTypeFragmentWithdrawal -> return map(dto)
            is StarTransactionTypeTelegramAdsWithdrawal -> return map(dto)
            is StarTransactionTypeTelegramApiUsage -> return map(dto)
            is StarTransactionTypeBotPaidMediaPurchase -> return map(dto)
            is StarTransactionTypeBotPaidMediaSale -> return map(dto)
            is StarTransactionTypeChannelPaidMediaPurchase -> return map(dto)
            is StarTransactionTypeChannelPaidMediaSale -> return map(dto)
            is StarTransactionTypeBotInvoicePurchase -> return map(dto)
            is StarTransactionTypeBotInvoiceSale -> return map(dto)
            is StarTransactionTypeBotSubscriptionPurchase -> return map(dto)
            is StarTransactionTypeBotSubscriptionSale -> return map(dto)
            is StarTransactionTypeChannelSubscriptionPurchase -> return map(dto)
            is StarTransactionTypeChannelSubscriptionSale -> return map(dto)
            is StarTransactionTypeGiftPurchase -> return map(dto)
            is StarTransactionTypeGiftTransfer -> return map(dto)
            is StarTransactionTypeGiftSale -> return map(dto)
            is StarTransactionTypeGiftUpgrade -> return map(dto)
            is StarTransactionTypeUpgradedGiftPurchase -> return map(dto)
            is StarTransactionTypeUpgradedGiftSale -> return map(dto)
            is StarTransactionTypeChannelPaidReactionSend -> return map(dto)
            is StarTransactionTypeChannelPaidReactionReceive -> return map(dto)
            is StarTransactionTypeAffiliateProgramCommission -> return map(dto)
            is StarTransactionTypePaidMessageSend -> return map(dto)
            is StarTransactionTypePaidMessageReceive -> return map(dto)
            is StarTransactionTypePremiumPurchase -> return map(dto)
            is StarTransactionTypeBusinessBotTransferSend -> return map(dto)
            is StarTransactionTypeBusinessBotTransferReceive -> return map(dto)
            is StarTransactionTypeUnsupported -> return map(dto)
        }
    }

    fun map(dto: StarTransactionTypePremiumBotDeposit): TdApi.StarTransactionTypePremiumBotDeposit {
        return TdApi.StarTransactionTypePremiumBotDeposit()
    }

    fun map(dto: StarTransactionTypeAppStoreDeposit): TdApi.StarTransactionTypeAppStoreDeposit {
        return TdApi.StarTransactionTypeAppStoreDeposit()
    }

    fun map(dto: StarTransactionTypeGooglePlayDeposit): TdApi.StarTransactionTypeGooglePlayDeposit {
        return TdApi.StarTransactionTypeGooglePlayDeposit()
    }

    fun map(dto: StarTransactionTypeFragmentDeposit): TdApi.StarTransactionTypeFragmentDeposit {
        return TdApi.StarTransactionTypeFragmentDeposit()
    }

    fun map(dto: StarTransactionTypeUserDeposit): TdApi.StarTransactionTypeUserDeposit {
        return TdApi.StarTransactionTypeUserDeposit(
            userId = dto.userId,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: StarTransactionTypeGiveawayDeposit): TdApi.StarTransactionTypeGiveawayDeposit {
        return TdApi.StarTransactionTypeGiveawayDeposit(
            chatId = dto.chatId,
            giveawayMessageId = dto.giveawayMessageId,
        )
    }

    fun map(dto: StarTransactionTypeFragmentWithdrawal): TdApi.StarTransactionTypeFragmentWithdrawal {
        return TdApi.StarTransactionTypeFragmentWithdrawal(
            withdrawalState = dto.withdrawalState?.let { map(it) },
        )
    }

    fun map(dto: StarTransactionTypeTelegramAdsWithdrawal): TdApi.StarTransactionTypeTelegramAdsWithdrawal {
        return TdApi.StarTransactionTypeTelegramAdsWithdrawal()
    }

    fun map(dto: StarTransactionTypeTelegramApiUsage): TdApi.StarTransactionTypeTelegramApiUsage {
        return TdApi.StarTransactionTypeTelegramApiUsage(
            requestCount = dto.requestCount,
        )
    }

    fun map(dto: StarTransactionTypeBotPaidMediaPurchase): TdApi.StarTransactionTypeBotPaidMediaPurchase {
        return TdApi.StarTransactionTypeBotPaidMediaPurchase(
            userId = dto.userId,
            media = dto.media.mapArray { map(it) },
        )
    }

    fun map(dto: StarTransactionTypeBotPaidMediaSale): TdApi.StarTransactionTypeBotPaidMediaSale {
        return TdApi.StarTransactionTypeBotPaidMediaSale(
            userId = dto.userId,
            media = dto.media.mapArray { map(it) },
            payload = dto.payload,
            affiliate = dto.affiliate?.let { map(it) },
        )
    }

    fun map(dto: StarTransactionTypeChannelPaidMediaPurchase): TdApi.StarTransactionTypeChannelPaidMediaPurchase {
        return TdApi.StarTransactionTypeChannelPaidMediaPurchase(
            chatId = dto.chatId,
            messageId = dto.messageId,
            media = dto.media.mapArray { map(it) },
        )
    }

    fun map(dto: StarTransactionTypeChannelPaidMediaSale): TdApi.StarTransactionTypeChannelPaidMediaSale {
        return TdApi.StarTransactionTypeChannelPaidMediaSale(
            userId = dto.userId,
            messageId = dto.messageId,
            media = dto.media.mapArray { map(it) },
        )
    }

    fun map(dto: StarTransactionTypeBotInvoicePurchase): TdApi.StarTransactionTypeBotInvoicePurchase {
        return TdApi.StarTransactionTypeBotInvoicePurchase(
            userId = dto.userId,
            productInfo = map(dto.productInfo),
        )
    }

    fun map(dto: StarTransactionTypeBotInvoiceSale): TdApi.StarTransactionTypeBotInvoiceSale {
        return TdApi.StarTransactionTypeBotInvoiceSale(
            userId = dto.userId,
            productInfo = map(dto.productInfo),
            invoicePayload = dto.invoicePayload,
            affiliate = dto.affiliate?.let { map(it) },
        )
    }

    fun map(dto: StarTransactionTypeBotSubscriptionPurchase): TdApi.StarTransactionTypeBotSubscriptionPurchase {
        return TdApi.StarTransactionTypeBotSubscriptionPurchase(
            userId = dto.userId,
            subscriptionPeriod = dto.subscriptionPeriod,
            productInfo = map(dto.productInfo),
        )
    }

    fun map(dto: StarTransactionTypeBotSubscriptionSale): TdApi.StarTransactionTypeBotSubscriptionSale {
        return TdApi.StarTransactionTypeBotSubscriptionSale(
            userId = dto.userId,
            subscriptionPeriod = dto.subscriptionPeriod,
            productInfo = map(dto.productInfo),
            invoicePayload = dto.invoicePayload,
            affiliate = dto.affiliate?.let { map(it) },
        )
    }

    fun map(dto: StarTransactionTypeChannelSubscriptionPurchase): TdApi.StarTransactionTypeChannelSubscriptionPurchase {
        return TdApi.StarTransactionTypeChannelSubscriptionPurchase(
            chatId = dto.chatId,
            subscriptionPeriod = dto.subscriptionPeriod,
        )
    }

    fun map(dto: StarTransactionTypeChannelSubscriptionSale): TdApi.StarTransactionTypeChannelSubscriptionSale {
        return TdApi.StarTransactionTypeChannelSubscriptionSale(
            userId = dto.userId,
            subscriptionPeriod = dto.subscriptionPeriod,
        )
    }

    fun map(dto: StarTransactionTypeGiftPurchase): TdApi.StarTransactionTypeGiftPurchase {
        return TdApi.StarTransactionTypeGiftPurchase(
            ownerId = map(dto.ownerId),
            gift = map(dto.gift),
        )
    }

    fun map(dto: StarTransactionTypeGiftTransfer): TdApi.StarTransactionTypeGiftTransfer {
        return TdApi.StarTransactionTypeGiftTransfer(
            ownerId = map(dto.ownerId),
            gift = map(dto.gift),
        )
    }

    fun map(dto: StarTransactionTypeGiftSale): TdApi.StarTransactionTypeGiftSale {
        return TdApi.StarTransactionTypeGiftSale(
            userId = dto.userId,
            gift = map(dto.gift),
        )
    }

    fun map(dto: StarTransactionTypeGiftUpgrade): TdApi.StarTransactionTypeGiftUpgrade {
        return TdApi.StarTransactionTypeGiftUpgrade(
            userId = dto.userId,
            gift = map(dto.gift),
        )
    }

    fun map(dto: StarTransactionTypeUpgradedGiftPurchase): TdApi.StarTransactionTypeUpgradedGiftPurchase {
        return TdApi.StarTransactionTypeUpgradedGiftPurchase(
            userId = dto.userId,
            gift = map(dto.gift),
        )
    }

    fun map(dto: StarTransactionTypeUpgradedGiftSale): TdApi.StarTransactionTypeUpgradedGiftSale {
        return TdApi.StarTransactionTypeUpgradedGiftSale(
            userId = dto.userId,
            gift = map(dto.gift),
            affiliate = map(dto.affiliate),
        )
    }

    fun map(dto: StarTransactionTypeChannelPaidReactionSend): TdApi.StarTransactionTypeChannelPaidReactionSend {
        return TdApi.StarTransactionTypeChannelPaidReactionSend(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: StarTransactionTypeChannelPaidReactionReceive): TdApi.StarTransactionTypeChannelPaidReactionReceive {
        return TdApi.StarTransactionTypeChannelPaidReactionReceive(
            userId = dto.userId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: StarTransactionTypeAffiliateProgramCommission): TdApi.StarTransactionTypeAffiliateProgramCommission {
        return TdApi.StarTransactionTypeAffiliateProgramCommission(
            chatId = dto.chatId,
            commissionPerMille = dto.commissionPerMille,
        )
    }

    fun map(dto: StarTransactionTypePaidMessageSend): TdApi.StarTransactionTypePaidMessageSend {
        return TdApi.StarTransactionTypePaidMessageSend(
            chatId = dto.chatId,
            messageCount = dto.messageCount,
        )
    }

    fun map(dto: StarTransactionTypePaidMessageReceive): TdApi.StarTransactionTypePaidMessageReceive {
        return TdApi.StarTransactionTypePaidMessageReceive(
            senderId = map(dto.senderId),
            messageCount = dto.messageCount,
            commissionPerMille = dto.commissionPerMille,
            commissionStarAmount = map(dto.commissionStarAmount),
        )
    }

    fun map(dto: StarTransactionTypePremiumPurchase): TdApi.StarTransactionTypePremiumPurchase {
        return TdApi.StarTransactionTypePremiumPurchase(
            userId = dto.userId,
            monthCount = dto.monthCount,
            sticker = dto.sticker?.let { map(it) },
        )
    }

    fun map(dto: StarTransactionTypeBusinessBotTransferSend): TdApi.StarTransactionTypeBusinessBotTransferSend {
        return TdApi.StarTransactionTypeBusinessBotTransferSend(
            userId = dto.userId,
        )
    }

    fun map(dto: StarTransactionTypeBusinessBotTransferReceive): TdApi.StarTransactionTypeBusinessBotTransferReceive {
        return TdApi.StarTransactionTypeBusinessBotTransferReceive(
            userId = dto.userId,
        )
    }

    fun map(dto: StarTransactionTypeUnsupported): TdApi.StarTransactionTypeUnsupported {
        return TdApi.StarTransactionTypeUnsupported()
    }

    fun map(dto: TdApi.StarTransactions): StarTransactions {
        return StarTransactions(
            starAmount = map(dto.starAmount),
            transactions = dto.transactions.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: StarTransactions): TdApi.StarTransactions {
        return TdApi.StarTransactions(
            starAmount = map(dto.starAmount),
            transactions = dto.transactions.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.StatisticalGraph): StatisticalGraph {
        when (dto) {
            is TdApi.StatisticalGraphData -> return map(dto)
            is TdApi.StatisticalGraphAsync -> return map(dto)
            is TdApi.StatisticalGraphError -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StatisticalGraphData): StatisticalGraphData {
        return StatisticalGraphData(
            jsonData = dto.jsonData,
            zoomToken = dto.zoomToken,
        )
    }

    fun map(dto: TdApi.StatisticalGraphAsync): StatisticalGraphAsync {
        return StatisticalGraphAsync(
            token = dto.token,
        )
    }

    fun map(dto: TdApi.StatisticalGraphError): StatisticalGraphError {
        return StatisticalGraphError(
            errorMessage = dto.errorMessage,
        )
    }

    fun map(dto: StatisticalGraph): TdApi.StatisticalGraph {
        when (dto) {
            is StatisticalGraphData -> return map(dto)
            is StatisticalGraphAsync -> return map(dto)
            is StatisticalGraphError -> return map(dto)
        }
    }

    fun map(dto: StatisticalGraphData): TdApi.StatisticalGraphData {
        return TdApi.StatisticalGraphData(
            jsonData = dto.jsonData,
            zoomToken = dto.zoomToken,
        )
    }

    fun map(dto: StatisticalGraphAsync): TdApi.StatisticalGraphAsync {
        return TdApi.StatisticalGraphAsync(
            token = dto.token,
        )
    }

    fun map(dto: StatisticalGraphError): TdApi.StatisticalGraphError {
        return TdApi.StatisticalGraphError(
            errorMessage = dto.errorMessage,
        )
    }

    fun map(dto: TdApi.StatisticalValue): StatisticalValue {
        return StatisticalValue(
            value = dto.value,
            previousValue = dto.previousValue,
            growthRatePercentage = dto.growthRatePercentage,
        )
    }

    fun map(dto: StatisticalValue): TdApi.StatisticalValue {
        return TdApi.StatisticalValue(
            value = dto.value,
            previousValue = dto.previousValue,
            growthRatePercentage = dto.growthRatePercentage,
        )
    }

    fun map(dto: TdApi.Sticker): Sticker {
        return Sticker(
            id = dto.id,
            setId = dto.setId,
            width = dto.width,
            height = dto.height,
            emoji = dto.emoji,
            format = map(dto.format),
            fullType = map(dto.fullType),
            thumbnail = dto.thumbnail?.let { map(it) },
            sticker = map(dto.sticker),
        )
    }

    fun map(dto: Sticker): TdApi.Sticker {
        return TdApi.Sticker(
            id = dto.id,
            setId = dto.setId,
            width = dto.width,
            height = dto.height,
            emoji = dto.emoji,
            format = map(dto.format),
            fullType = map(dto.fullType),
            thumbnail = dto.thumbnail?.let { map(it) },
            sticker = map(dto.sticker),
        )
    }

    fun map(dto: TdApi.StickerFormat): StickerFormat {
        when (dto) {
            is TdApi.StickerFormatWebp -> return map(dto)
            is TdApi.StickerFormatTgs -> return map(dto)
            is TdApi.StickerFormatWebm -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StickerFormatWebp): StickerFormatWebp {
        return StickerFormatWebp()
    }

    fun map(dto: TdApi.StickerFormatTgs): StickerFormatTgs {
        return StickerFormatTgs()
    }

    fun map(dto: TdApi.StickerFormatWebm): StickerFormatWebm {
        return StickerFormatWebm()
    }

    fun map(dto: StickerFormat): TdApi.StickerFormat {
        when (dto) {
            is StickerFormatWebp -> return map(dto)
            is StickerFormatTgs -> return map(dto)
            is StickerFormatWebm -> return map(dto)
        }
    }

    fun map(dto: StickerFormatWebp): TdApi.StickerFormatWebp {
        return TdApi.StickerFormatWebp()
    }

    fun map(dto: StickerFormatTgs): TdApi.StickerFormatTgs {
        return TdApi.StickerFormatTgs()
    }

    fun map(dto: StickerFormatWebm): TdApi.StickerFormatWebm {
        return TdApi.StickerFormatWebm()
    }

    fun map(dto: TdApi.StickerFullType): StickerFullType {
        when (dto) {
            is TdApi.StickerFullTypeRegular -> return map(dto)
            is TdApi.StickerFullTypeMask -> return map(dto)
            is TdApi.StickerFullTypeCustomEmoji -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StickerFullTypeRegular): StickerFullTypeRegular {
        return StickerFullTypeRegular(
            premiumAnimation = dto.premiumAnimation?.let { map(it) },
        )
    }

    fun map(dto: TdApi.StickerFullTypeMask): StickerFullTypeMask {
        return StickerFullTypeMask(
            maskPosition = dto.maskPosition?.let { map(it) },
        )
    }

    fun map(dto: TdApi.StickerFullTypeCustomEmoji): StickerFullTypeCustomEmoji {
        return StickerFullTypeCustomEmoji(
            customEmojiId = dto.customEmojiId,
            needsRepainting = dto.needsRepainting,
        )
    }

    fun map(dto: StickerFullType): TdApi.StickerFullType {
        when (dto) {
            is StickerFullTypeRegular -> return map(dto)
            is StickerFullTypeMask -> return map(dto)
            is StickerFullTypeCustomEmoji -> return map(dto)
        }
    }

    fun map(dto: StickerFullTypeRegular): TdApi.StickerFullTypeRegular {
        return TdApi.StickerFullTypeRegular(
            premiumAnimation = dto.premiumAnimation?.let { map(it) },
        )
    }

    fun map(dto: StickerFullTypeMask): TdApi.StickerFullTypeMask {
        return TdApi.StickerFullTypeMask(
            maskPosition = dto.maskPosition?.let { map(it) },
        )
    }

    fun map(dto: StickerFullTypeCustomEmoji): TdApi.StickerFullTypeCustomEmoji {
        return TdApi.StickerFullTypeCustomEmoji(
            customEmojiId = dto.customEmojiId,
            needsRepainting = dto.needsRepainting,
        )
    }

    fun map(dto: TdApi.StickerSet): StickerSet {
        return StickerSet(
            id = dto.id,
            title = dto.title,
            name = dto.name,
            thumbnail = dto.thumbnail?.let { map(it) },
            thumbnailOutline = dto.thumbnailOutline?.let { map(it) },
            isOwned = dto.isOwned,
            isInstalled = dto.isInstalled,
            isArchived = dto.isArchived,
            isOfficial = dto.isOfficial,
            stickerType = map(dto.stickerType),
            needsRepainting = dto.needsRepainting,
            isAllowedAsChatEmojiStatus = dto.isAllowedAsChatEmojiStatus,
            isViewed = dto.isViewed,
            stickers = dto.stickers.mapArray { map(it) },
            emojis = dto.emojis.mapArray { map(it) },
        )
    }

    fun map(dto: StickerSet): TdApi.StickerSet {
        return TdApi.StickerSet(
            id = dto.id,
            title = dto.title,
            name = dto.name,
            thumbnail = dto.thumbnail?.let { map(it) },
            thumbnailOutline = dto.thumbnailOutline?.let { map(it) },
            isOwned = dto.isOwned,
            isInstalled = dto.isInstalled,
            isArchived = dto.isArchived,
            isOfficial = dto.isOfficial,
            stickerType = map(dto.stickerType),
            needsRepainting = dto.needsRepainting,
            isAllowedAsChatEmojiStatus = dto.isAllowedAsChatEmojiStatus,
            isViewed = dto.isViewed,
            stickers = dto.stickers.mapArray { map(it) },
            emojis = dto.emojis.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.StickerSetInfo): StickerSetInfo {
        return StickerSetInfo(
            id = dto.id,
            title = dto.title,
            name = dto.name,
            thumbnail = dto.thumbnail?.let { map(it) },
            thumbnailOutline = dto.thumbnailOutline?.let { map(it) },
            isOwned = dto.isOwned,
            isInstalled = dto.isInstalled,
            isArchived = dto.isArchived,
            isOfficial = dto.isOfficial,
            stickerType = map(dto.stickerType),
            needsRepainting = dto.needsRepainting,
            isAllowedAsChatEmojiStatus = dto.isAllowedAsChatEmojiStatus,
            isViewed = dto.isViewed,
            size = dto.size,
            covers = dto.covers.mapArray { map(it) },
        )
    }

    fun map(dto: StickerSetInfo): TdApi.StickerSetInfo {
        return TdApi.StickerSetInfo(
            id = dto.id,
            title = dto.title,
            name = dto.name,
            thumbnail = dto.thumbnail?.let { map(it) },
            thumbnailOutline = dto.thumbnailOutline?.let { map(it) },
            isOwned = dto.isOwned,
            isInstalled = dto.isInstalled,
            isArchived = dto.isArchived,
            isOfficial = dto.isOfficial,
            stickerType = map(dto.stickerType),
            needsRepainting = dto.needsRepainting,
            isAllowedAsChatEmojiStatus = dto.isAllowedAsChatEmojiStatus,
            isViewed = dto.isViewed,
            size = dto.size,
            covers = dto.covers.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.StickerSets): StickerSets {
        return StickerSets(
            totalCount = dto.totalCount,
            sets = dto.sets.mapArray { map(it) },
        )
    }

    fun map(dto: StickerSets): TdApi.StickerSets {
        return TdApi.StickerSets(
            totalCount = dto.totalCount,
            sets = dto.sets.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.StickerType): StickerType {
        when (dto) {
            is TdApi.StickerTypeRegular -> return map(dto)
            is TdApi.StickerTypeMask -> return map(dto)
            is TdApi.StickerTypeCustomEmoji -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StickerTypeRegular): StickerTypeRegular {
        return StickerTypeRegular()
    }

    fun map(dto: TdApi.StickerTypeMask): StickerTypeMask {
        return StickerTypeMask()
    }

    fun map(dto: TdApi.StickerTypeCustomEmoji): StickerTypeCustomEmoji {
        return StickerTypeCustomEmoji()
    }

    fun map(dto: StickerType): TdApi.StickerType {
        when (dto) {
            is StickerTypeRegular -> return map(dto)
            is StickerTypeMask -> return map(dto)
            is StickerTypeCustomEmoji -> return map(dto)
        }
    }

    fun map(dto: StickerTypeRegular): TdApi.StickerTypeRegular {
        return TdApi.StickerTypeRegular()
    }

    fun map(dto: StickerTypeMask): TdApi.StickerTypeMask {
        return TdApi.StickerTypeMask()
    }

    fun map(dto: StickerTypeCustomEmoji): TdApi.StickerTypeCustomEmoji {
        return TdApi.StickerTypeCustomEmoji()
    }

    fun map(dto: TdApi.Stickers): Stickers {
        return Stickers(
            stickers = dto.stickers.mapArray { map(it) },
        )
    }

    fun map(dto: Stickers): TdApi.Stickers {
        return TdApi.Stickers(
            stickers = dto.stickers.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.StorageStatistics): StorageStatistics {
        return StorageStatistics(
            size = dto.size,
            count = dto.count,
            byChat = dto.byChat.mapArray { map(it) },
        )
    }

    fun map(dto: StorageStatistics): TdApi.StorageStatistics {
        return TdApi.StorageStatistics(
            size = dto.size,
            count = dto.count,
            byChat = dto.byChat.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.StorageStatisticsByChat): StorageStatisticsByChat {
        return StorageStatisticsByChat(
            chatId = dto.chatId,
            size = dto.size,
            count = dto.count,
            byFileType = dto.byFileType.mapArray { map(it) },
        )
    }

    fun map(dto: StorageStatisticsByChat): TdApi.StorageStatisticsByChat {
        return TdApi.StorageStatisticsByChat(
            chatId = dto.chatId,
            size = dto.size,
            count = dto.count,
            byFileType = dto.byFileType.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.StorageStatisticsByFileType): StorageStatisticsByFileType {
        return StorageStatisticsByFileType(
            fileType = map(dto.fileType),
            size = dto.size,
            count = dto.count,
        )
    }

    fun map(dto: StorageStatisticsByFileType): TdApi.StorageStatisticsByFileType {
        return TdApi.StorageStatisticsByFileType(
            fileType = map(dto.fileType),
            size = dto.size,
            count = dto.count,
        )
    }

    fun map(dto: TdApi.StorageStatisticsFast): StorageStatisticsFast {
        return StorageStatisticsFast(
            filesSize = dto.filesSize,
            fileCount = dto.fileCount,
            databaseSize = dto.databaseSize,
            languagePackDatabaseSize = dto.languagePackDatabaseSize,
            logSize = dto.logSize,
        )
    }

    fun map(dto: StorageStatisticsFast): TdApi.StorageStatisticsFast {
        return TdApi.StorageStatisticsFast(
            filesSize = dto.filesSize,
            fileCount = dto.fileCount,
            databaseSize = dto.databaseSize,
            languagePackDatabaseSize = dto.languagePackDatabaseSize,
            logSize = dto.logSize,
        )
    }

    fun map(dto: TdApi.StorePaymentPurpose): StorePaymentPurpose {
        when (dto) {
            is TdApi.StorePaymentPurposePremiumSubscription -> return map(dto)
            is TdApi.StorePaymentPurposePremiumGift -> return map(dto)
            is TdApi.StorePaymentPurposePremiumGiftCodes -> return map(dto)
            is TdApi.StorePaymentPurposePremiumGiveaway -> return map(dto)
            is TdApi.StorePaymentPurposeStarGiveaway -> return map(dto)
            is TdApi.StorePaymentPurposeStars -> return map(dto)
            is TdApi.StorePaymentPurposeGiftedStars -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StorePaymentPurposePremiumSubscription): StorePaymentPurposePremiumSubscription {
        return StorePaymentPurposePremiumSubscription(
            isRestore = dto.isRestore,
            isUpgrade = dto.isUpgrade,
        )
    }

    fun map(dto: TdApi.StorePaymentPurposePremiumGift): StorePaymentPurposePremiumGift {
        return StorePaymentPurposePremiumGift(
            currency = dto.currency,
            amount = dto.amount,
            userId = dto.userId,
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.StorePaymentPurposePremiumGiftCodes): StorePaymentPurposePremiumGiftCodes {
        return StorePaymentPurposePremiumGiftCodes(
            boostedChatId = dto.boostedChatId,
            currency = dto.currency,
            amount = dto.amount,
            userIds = dto.userIds,
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.StorePaymentPurposePremiumGiveaway): StorePaymentPurposePremiumGiveaway {
        return StorePaymentPurposePremiumGiveaway(
            parameters = map(dto.parameters),
            currency = dto.currency,
            amount = dto.amount,
        )
    }

    fun map(dto: TdApi.StorePaymentPurposeStarGiveaway): StorePaymentPurposeStarGiveaway {
        return StorePaymentPurposeStarGiveaway(
            parameters = map(dto.parameters),
            currency = dto.currency,
            amount = dto.amount,
            winnerCount = dto.winnerCount,
            starCount = dto.starCount,
        )
    }

    fun map(dto: TdApi.StorePaymentPurposeStars): StorePaymentPurposeStars {
        return StorePaymentPurposeStars(
            currency = dto.currency,
            amount = dto.amount,
            starCount = dto.starCount,
        )
    }

    fun map(dto: TdApi.StorePaymentPurposeGiftedStars): StorePaymentPurposeGiftedStars {
        return StorePaymentPurposeGiftedStars(
            userId = dto.userId,
            currency = dto.currency,
            amount = dto.amount,
            starCount = dto.starCount,
        )
    }

    fun map(dto: StorePaymentPurpose): TdApi.StorePaymentPurpose {
        when (dto) {
            is StorePaymentPurposePremiumSubscription -> return map(dto)
            is StorePaymentPurposePremiumGift -> return map(dto)
            is StorePaymentPurposePremiumGiftCodes -> return map(dto)
            is StorePaymentPurposePremiumGiveaway -> return map(dto)
            is StorePaymentPurposeStarGiveaway -> return map(dto)
            is StorePaymentPurposeStars -> return map(dto)
            is StorePaymentPurposeGiftedStars -> return map(dto)
        }
    }

    fun map(dto: StorePaymentPurposePremiumSubscription): TdApi.StorePaymentPurposePremiumSubscription {
        return TdApi.StorePaymentPurposePremiumSubscription(
            isRestore = dto.isRestore,
            isUpgrade = dto.isUpgrade,
        )
    }

    fun map(dto: StorePaymentPurposePremiumGift): TdApi.StorePaymentPurposePremiumGift {
        return TdApi.StorePaymentPurposePremiumGift(
            currency = dto.currency,
            amount = dto.amount,
            userId = dto.userId,
            text = map(dto.text),
        )
    }

    fun map(dto: StorePaymentPurposePremiumGiftCodes): TdApi.StorePaymentPurposePremiumGiftCodes {
        return TdApi.StorePaymentPurposePremiumGiftCodes(
            boostedChatId = dto.boostedChatId,
            currency = dto.currency,
            amount = dto.amount,
            userIds = dto.userIds,
            text = map(dto.text),
        )
    }

    fun map(dto: StorePaymentPurposePremiumGiveaway): TdApi.StorePaymentPurposePremiumGiveaway {
        return TdApi.StorePaymentPurposePremiumGiveaway(
            parameters = map(dto.parameters),
            currency = dto.currency,
            amount = dto.amount,
        )
    }

    fun map(dto: StorePaymentPurposeStarGiveaway): TdApi.StorePaymentPurposeStarGiveaway {
        return TdApi.StorePaymentPurposeStarGiveaway(
            parameters = map(dto.parameters),
            currency = dto.currency,
            amount = dto.amount,
            winnerCount = dto.winnerCount,
            starCount = dto.starCount,
        )
    }

    fun map(dto: StorePaymentPurposeStars): TdApi.StorePaymentPurposeStars {
        return TdApi.StorePaymentPurposeStars(
            currency = dto.currency,
            amount = dto.amount,
            starCount = dto.starCount,
        )
    }

    fun map(dto: StorePaymentPurposeGiftedStars): TdApi.StorePaymentPurposeGiftedStars {
        return TdApi.StorePaymentPurposeGiftedStars(
            userId = dto.userId,
            currency = dto.currency,
            amount = dto.amount,
            starCount = dto.starCount,
        )
    }

    fun map(dto: TdApi.StoreTransaction): StoreTransaction {
        when (dto) {
            is TdApi.StoreTransactionAppStore -> return map(dto)
            is TdApi.StoreTransactionGooglePlay -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StoreTransactionAppStore): StoreTransactionAppStore {
        return StoreTransactionAppStore(
            receipt = dto.receipt,
        )
    }

    fun map(dto: TdApi.StoreTransactionGooglePlay): StoreTransactionGooglePlay {
        return StoreTransactionGooglePlay(
            packageName = dto.packageName,
            storeProductId = dto.storeProductId,
            purchaseToken = dto.purchaseToken,
        )
    }

    fun map(dto: StoreTransaction): TdApi.StoreTransaction {
        when (dto) {
            is StoreTransactionAppStore -> return map(dto)
            is StoreTransactionGooglePlay -> return map(dto)
        }
    }

    fun map(dto: StoreTransactionAppStore): TdApi.StoreTransactionAppStore {
        return TdApi.StoreTransactionAppStore(
            receipt = dto.receipt,
        )
    }

    fun map(dto: StoreTransactionGooglePlay): TdApi.StoreTransactionGooglePlay {
        return TdApi.StoreTransactionGooglePlay(
            packageName = dto.packageName,
            storeProductId = dto.storeProductId,
            purchaseToken = dto.purchaseToken,
        )
    }

    fun map(dto: TdApi.Stories): Stories {
        return Stories(
            totalCount = dto.totalCount,
            stories = dto.stories.mapArray { map(it) },
            pinnedStoryIds = dto.pinnedStoryIds,
        )
    }

    fun map(dto: Stories): TdApi.Stories {
        return TdApi.Stories(
            totalCount = dto.totalCount,
            stories = dto.stories.mapArray { map(it) },
            pinnedStoryIds = dto.pinnedStoryIds,
        )
    }

    fun map(dto: TdApi.Story): Story {
        return Story(
            id = dto.id,
            posterChatId = dto.posterChatId,
            posterId = dto.posterId?.let { map(it) },
            date = dto.date,
            isBeingPosted = dto.isBeingPosted,
            isBeingEdited = dto.isBeingEdited,
            isEdited = dto.isEdited,
            isPostedToChatPage = dto.isPostedToChatPage,
            isVisibleOnlyForSelf = dto.isVisibleOnlyForSelf,
            canBeDeleted = dto.canBeDeleted,
            canBeEdited = dto.canBeEdited,
            canBeForwarded = dto.canBeForwarded,
            canBeReplied = dto.canBeReplied,
            canToggleIsPostedToChatPage = dto.canToggleIsPostedToChatPage,
            canGetStatistics = dto.canGetStatistics,
            canGetInteractions = dto.canGetInteractions,
            hasExpiredViewers = dto.hasExpiredViewers,
            repostInfo = dto.repostInfo?.let { map(it) },
            interactionInfo = dto.interactionInfo?.let { map(it) },
            chosenReactionType = dto.chosenReactionType?.let { map(it) },
            privacySettings = map(dto.privacySettings),
            content = map(dto.content),
            areas = dto.areas.mapArray { map(it) },
            caption = map(dto.caption),
        )
    }

    fun map(dto: Story): TdApi.Story {
        return TdApi.Story(
            id = dto.id,
            posterChatId = dto.posterChatId,
            posterId = dto.posterId?.let { map(it) },
            date = dto.date,
            isBeingPosted = dto.isBeingPosted,
            isBeingEdited = dto.isBeingEdited,
            isEdited = dto.isEdited,
            isPostedToChatPage = dto.isPostedToChatPage,
            isVisibleOnlyForSelf = dto.isVisibleOnlyForSelf,
            canBeDeleted = dto.canBeDeleted,
            canBeEdited = dto.canBeEdited,
            canBeForwarded = dto.canBeForwarded,
            canBeReplied = dto.canBeReplied,
            canToggleIsPostedToChatPage = dto.canToggleIsPostedToChatPage,
            canGetStatistics = dto.canGetStatistics,
            canGetInteractions = dto.canGetInteractions,
            hasExpiredViewers = dto.hasExpiredViewers,
            repostInfo = dto.repostInfo?.let { map(it) },
            interactionInfo = dto.interactionInfo?.let { map(it) },
            chosenReactionType = dto.chosenReactionType?.let { map(it) },
            privacySettings = map(dto.privacySettings),
            content = map(dto.content),
            areas = dto.areas.mapArray { map(it) },
            caption = map(dto.caption),
        )
    }

    fun map(dto: TdApi.StoryArea): StoryArea {
        return StoryArea(
            position = map(dto.position),
            type = map(dto.type),
        )
    }

    fun map(dto: StoryArea): TdApi.StoryArea {
        return TdApi.StoryArea(
            position = map(dto.position),
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.StoryAreaPosition): StoryAreaPosition {
        return StoryAreaPosition(
            xPercentage = dto.xPercentage,
            yPercentage = dto.yPercentage,
            widthPercentage = dto.widthPercentage,
            heightPercentage = dto.heightPercentage,
            rotationAngle = dto.rotationAngle,
            cornerRadiusPercentage = dto.cornerRadiusPercentage,
        )
    }

    fun map(dto: StoryAreaPosition): TdApi.StoryAreaPosition {
        return TdApi.StoryAreaPosition(
            xPercentage = dto.xPercentage,
            yPercentage = dto.yPercentage,
            widthPercentage = dto.widthPercentage,
            heightPercentage = dto.heightPercentage,
            rotationAngle = dto.rotationAngle,
            cornerRadiusPercentage = dto.cornerRadiusPercentage,
        )
    }

    fun map(dto: TdApi.StoryAreaType): StoryAreaType {
        when (dto) {
            is TdApi.StoryAreaTypeLocation -> return map(dto)
            is TdApi.StoryAreaTypeVenue -> return map(dto)
            is TdApi.StoryAreaTypeSuggestedReaction -> return map(dto)
            is TdApi.StoryAreaTypeMessage -> return map(dto)
            is TdApi.StoryAreaTypeLink -> return map(dto)
            is TdApi.StoryAreaTypeWeather -> return map(dto)
            is TdApi.StoryAreaTypeUpgradedGift -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StoryAreaTypeLocation): StoryAreaTypeLocation {
        return StoryAreaTypeLocation(
            location = map(dto.location),
            address = dto.address?.let { map(it) },
        )
    }

    fun map(dto: TdApi.StoryAreaTypeVenue): StoryAreaTypeVenue {
        return StoryAreaTypeVenue(
            venue = map(dto.venue),
        )
    }

    fun map(dto: TdApi.StoryAreaTypeSuggestedReaction): StoryAreaTypeSuggestedReaction {
        return StoryAreaTypeSuggestedReaction(
            reactionType = map(dto.reactionType),
            totalCount = dto.totalCount,
            isDark = dto.isDark,
            isFlipped = dto.isFlipped,
        )
    }

    fun map(dto: TdApi.StoryAreaTypeMessage): StoryAreaTypeMessage {
        return StoryAreaTypeMessage(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: TdApi.StoryAreaTypeLink): StoryAreaTypeLink {
        return StoryAreaTypeLink(
            url = dto.url,
        )
    }

    fun map(dto: TdApi.StoryAreaTypeWeather): StoryAreaTypeWeather {
        return StoryAreaTypeWeather(
            temperature = dto.temperature,
            emoji = dto.emoji,
            backgroundColor = dto.backgroundColor,
        )
    }

    fun map(dto: TdApi.StoryAreaTypeUpgradedGift): StoryAreaTypeUpgradedGift {
        return StoryAreaTypeUpgradedGift(
            giftName = dto.giftName,
        )
    }

    fun map(dto: StoryAreaType): TdApi.StoryAreaType {
        when (dto) {
            is StoryAreaTypeLocation -> return map(dto)
            is StoryAreaTypeVenue -> return map(dto)
            is StoryAreaTypeSuggestedReaction -> return map(dto)
            is StoryAreaTypeMessage -> return map(dto)
            is StoryAreaTypeLink -> return map(dto)
            is StoryAreaTypeWeather -> return map(dto)
            is StoryAreaTypeUpgradedGift -> return map(dto)
        }
    }

    fun map(dto: StoryAreaTypeLocation): TdApi.StoryAreaTypeLocation {
        return TdApi.StoryAreaTypeLocation(
            location = map(dto.location),
            address = dto.address?.let { map(it) },
        )
    }

    fun map(dto: StoryAreaTypeVenue): TdApi.StoryAreaTypeVenue {
        return TdApi.StoryAreaTypeVenue(
            venue = map(dto.venue),
        )
    }

    fun map(dto: StoryAreaTypeSuggestedReaction): TdApi.StoryAreaTypeSuggestedReaction {
        return TdApi.StoryAreaTypeSuggestedReaction(
            reactionType = map(dto.reactionType),
            totalCount = dto.totalCount,
            isDark = dto.isDark,
            isFlipped = dto.isFlipped,
        )
    }

    fun map(dto: StoryAreaTypeMessage): TdApi.StoryAreaTypeMessage {
        return TdApi.StoryAreaTypeMessage(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: StoryAreaTypeLink): TdApi.StoryAreaTypeLink {
        return TdApi.StoryAreaTypeLink(
            url = dto.url,
        )
    }

    fun map(dto: StoryAreaTypeWeather): TdApi.StoryAreaTypeWeather {
        return TdApi.StoryAreaTypeWeather(
            temperature = dto.temperature,
            emoji = dto.emoji,
            backgroundColor = dto.backgroundColor,
        )
    }

    fun map(dto: StoryAreaTypeUpgradedGift): TdApi.StoryAreaTypeUpgradedGift {
        return TdApi.StoryAreaTypeUpgradedGift(
            giftName = dto.giftName,
        )
    }

    fun map(dto: TdApi.StoryContent): StoryContent {
        when (dto) {
            is TdApi.StoryContentPhoto -> return map(dto)
            is TdApi.StoryContentVideo -> return map(dto)
            is TdApi.StoryContentUnsupported -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StoryContentPhoto): StoryContentPhoto {
        return StoryContentPhoto(
            photo = map(dto.photo),
        )
    }

    fun map(dto: TdApi.StoryContentVideo): StoryContentVideo {
        return StoryContentVideo(
            video = map(dto.video),
            alternativeVideo = dto.alternativeVideo?.let { map(it) },
        )
    }

    fun map(dto: TdApi.StoryContentUnsupported): StoryContentUnsupported {
        return StoryContentUnsupported()
    }

    fun map(dto: StoryContent): TdApi.StoryContent {
        when (dto) {
            is StoryContentPhoto -> return map(dto)
            is StoryContentVideo -> return map(dto)
            is StoryContentUnsupported -> return map(dto)
        }
    }

    fun map(dto: StoryContentPhoto): TdApi.StoryContentPhoto {
        return TdApi.StoryContentPhoto(
            photo = map(dto.photo),
        )
    }

    fun map(dto: StoryContentVideo): TdApi.StoryContentVideo {
        return TdApi.StoryContentVideo(
            video = map(dto.video),
            alternativeVideo = dto.alternativeVideo?.let { map(it) },
        )
    }

    fun map(dto: StoryContentUnsupported): TdApi.StoryContentUnsupported {
        return TdApi.StoryContentUnsupported()
    }

    fun map(dto: TdApi.StoryFullId): StoryFullId {
        return StoryFullId(
            posterChatId = dto.posterChatId,
            storyId = dto.storyId,
        )
    }

    fun map(dto: StoryFullId): TdApi.StoryFullId {
        return TdApi.StoryFullId(
            posterChatId = dto.posterChatId,
            storyId = dto.storyId,
        )
    }

    fun map(dto: TdApi.StoryInfo): StoryInfo {
        return StoryInfo(
            storyId = dto.storyId,
            date = dto.date,
            isForCloseFriends = dto.isForCloseFriends,
        )
    }

    fun map(dto: StoryInfo): TdApi.StoryInfo {
        return TdApi.StoryInfo(
            storyId = dto.storyId,
            date = dto.date,
            isForCloseFriends = dto.isForCloseFriends,
        )
    }

    fun map(dto: TdApi.StoryInteraction): StoryInteraction {
        return StoryInteraction(
            actorId = map(dto.actorId),
            interactionDate = dto.interactionDate,
            blockList = dto.blockList?.let { map(it) },
            type = map(dto.type),
        )
    }

    fun map(dto: StoryInteraction): TdApi.StoryInteraction {
        return TdApi.StoryInteraction(
            actorId = map(dto.actorId),
            interactionDate = dto.interactionDate,
            blockList = dto.blockList?.let { map(it) },
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.StoryInteractionInfo): StoryInteractionInfo {
        return StoryInteractionInfo(
            viewCount = dto.viewCount,
            forwardCount = dto.forwardCount,
            reactionCount = dto.reactionCount,
            recentViewerUserIds = dto.recentViewerUserIds,
        )
    }

    fun map(dto: StoryInteractionInfo): TdApi.StoryInteractionInfo {
        return TdApi.StoryInteractionInfo(
            viewCount = dto.viewCount,
            forwardCount = dto.forwardCount,
            reactionCount = dto.reactionCount,
            recentViewerUserIds = dto.recentViewerUserIds,
        )
    }

    fun map(dto: TdApi.StoryInteractionType): StoryInteractionType {
        when (dto) {
            is TdApi.StoryInteractionTypeView -> return map(dto)
            is TdApi.StoryInteractionTypeForward -> return map(dto)
            is TdApi.StoryInteractionTypeRepost -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StoryInteractionTypeView): StoryInteractionTypeView {
        return StoryInteractionTypeView(
            chosenReactionType = dto.chosenReactionType?.let { map(it) },
        )
    }

    fun map(dto: TdApi.StoryInteractionTypeForward): StoryInteractionTypeForward {
        return StoryInteractionTypeForward(
            message = map(dto.message),
        )
    }

    fun map(dto: TdApi.StoryInteractionTypeRepost): StoryInteractionTypeRepost {
        return StoryInteractionTypeRepost(
            story = map(dto.story),
        )
    }

    fun map(dto: StoryInteractionType): TdApi.StoryInteractionType {
        when (dto) {
            is StoryInteractionTypeView -> return map(dto)
            is StoryInteractionTypeForward -> return map(dto)
            is StoryInteractionTypeRepost -> return map(dto)
        }
    }

    fun map(dto: StoryInteractionTypeView): TdApi.StoryInteractionTypeView {
        return TdApi.StoryInteractionTypeView(
            chosenReactionType = dto.chosenReactionType?.let { map(it) },
        )
    }

    fun map(dto: StoryInteractionTypeForward): TdApi.StoryInteractionTypeForward {
        return TdApi.StoryInteractionTypeForward(
            message = map(dto.message),
        )
    }

    fun map(dto: StoryInteractionTypeRepost): TdApi.StoryInteractionTypeRepost {
        return TdApi.StoryInteractionTypeRepost(
            story = map(dto.story),
        )
    }

    fun map(dto: TdApi.StoryInteractions): StoryInteractions {
        return StoryInteractions(
            totalCount = dto.totalCount,
            totalForwardCount = dto.totalForwardCount,
            totalReactionCount = dto.totalReactionCount,
            interactions = dto.interactions.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: StoryInteractions): TdApi.StoryInteractions {
        return TdApi.StoryInteractions(
            totalCount = dto.totalCount,
            totalForwardCount = dto.totalForwardCount,
            totalReactionCount = dto.totalReactionCount,
            interactions = dto.interactions.mapArray { map(it) },
            nextOffset = dto.nextOffset,
        )
    }

    fun map(dto: TdApi.StoryList): StoryList {
        when (dto) {
            is TdApi.StoryListMain -> return map(dto)
            is TdApi.StoryListArchive -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StoryListMain): StoryListMain {
        return StoryListMain()
    }

    fun map(dto: TdApi.StoryListArchive): StoryListArchive {
        return StoryListArchive()
    }

    fun map(dto: StoryList): TdApi.StoryList {
        when (dto) {
            is StoryListMain -> return map(dto)
            is StoryListArchive -> return map(dto)
        }
    }

    fun map(dto: StoryListMain): TdApi.StoryListMain {
        return TdApi.StoryListMain()
    }

    fun map(dto: StoryListArchive): TdApi.StoryListArchive {
        return TdApi.StoryListArchive()
    }

    fun map(dto: TdApi.StoryOrigin): StoryOrigin {
        when (dto) {
            is TdApi.StoryOriginPublicStory -> return map(dto)
            is TdApi.StoryOriginHiddenUser -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StoryOriginPublicStory): StoryOriginPublicStory {
        return StoryOriginPublicStory(
            chatId = dto.chatId,
            storyId = dto.storyId,
        )
    }

    fun map(dto: TdApi.StoryOriginHiddenUser): StoryOriginHiddenUser {
        return StoryOriginHiddenUser(
            posterName = dto.posterName,
        )
    }

    fun map(dto: StoryOrigin): TdApi.StoryOrigin {
        when (dto) {
            is StoryOriginPublicStory -> return map(dto)
            is StoryOriginHiddenUser -> return map(dto)
        }
    }

    fun map(dto: StoryOriginPublicStory): TdApi.StoryOriginPublicStory {
        return TdApi.StoryOriginPublicStory(
            chatId = dto.chatId,
            storyId = dto.storyId,
        )
    }

    fun map(dto: StoryOriginHiddenUser): TdApi.StoryOriginHiddenUser {
        return TdApi.StoryOriginHiddenUser(
            posterName = dto.posterName,
        )
    }

    fun map(dto: TdApi.StoryPrivacySettings): StoryPrivacySettings {
        when (dto) {
            is TdApi.StoryPrivacySettingsEveryone -> return map(dto)
            is TdApi.StoryPrivacySettingsContacts -> return map(dto)
            is TdApi.StoryPrivacySettingsCloseFriends -> return map(dto)
            is TdApi.StoryPrivacySettingsSelectedUsers -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.StoryPrivacySettingsEveryone): StoryPrivacySettingsEveryone {
        return StoryPrivacySettingsEveryone(
            exceptUserIds = dto.exceptUserIds,
        )
    }

    fun map(dto: TdApi.StoryPrivacySettingsContacts): StoryPrivacySettingsContacts {
        return StoryPrivacySettingsContacts(
            exceptUserIds = dto.exceptUserIds,
        )
    }

    fun map(dto: TdApi.StoryPrivacySettingsCloseFriends): StoryPrivacySettingsCloseFriends {
        return StoryPrivacySettingsCloseFriends()
    }

    fun map(dto: TdApi.StoryPrivacySettingsSelectedUsers): StoryPrivacySettingsSelectedUsers {
        return StoryPrivacySettingsSelectedUsers(
            userIds = dto.userIds,
        )
    }

    fun map(dto: StoryPrivacySettings): TdApi.StoryPrivacySettings {
        when (dto) {
            is StoryPrivacySettingsEveryone -> return map(dto)
            is StoryPrivacySettingsContacts -> return map(dto)
            is StoryPrivacySettingsCloseFriends -> return map(dto)
            is StoryPrivacySettingsSelectedUsers -> return map(dto)
        }
    }

    fun map(dto: StoryPrivacySettingsEveryone): TdApi.StoryPrivacySettingsEveryone {
        return TdApi.StoryPrivacySettingsEveryone(
            exceptUserIds = dto.exceptUserIds,
        )
    }

    fun map(dto: StoryPrivacySettingsContacts): TdApi.StoryPrivacySettingsContacts {
        return TdApi.StoryPrivacySettingsContacts(
            exceptUserIds = dto.exceptUserIds,
        )
    }

    fun map(dto: StoryPrivacySettingsCloseFriends): TdApi.StoryPrivacySettingsCloseFriends {
        return TdApi.StoryPrivacySettingsCloseFriends()
    }

    fun map(dto: StoryPrivacySettingsSelectedUsers): TdApi.StoryPrivacySettingsSelectedUsers {
        return TdApi.StoryPrivacySettingsSelectedUsers(
            userIds = dto.userIds,
        )
    }

    fun map(dto: TdApi.StoryRepostInfo): StoryRepostInfo {
        return StoryRepostInfo(
            origin = map(dto.origin),
            isContentModified = dto.isContentModified,
        )
    }

    fun map(dto: StoryRepostInfo): TdApi.StoryRepostInfo {
        return TdApi.StoryRepostInfo(
            origin = map(dto.origin),
            isContentModified = dto.isContentModified,
        )
    }

    fun map(dto: TdApi.StoryStatistics): StoryStatistics {
        return StoryStatistics(
            storyInteractionGraph = map(dto.storyInteractionGraph),
            storyReactionGraph = map(dto.storyReactionGraph),
        )
    }

    fun map(dto: StoryStatistics): TdApi.StoryStatistics {
        return TdApi.StoryStatistics(
            storyInteractionGraph = map(dto.storyInteractionGraph),
            storyReactionGraph = map(dto.storyReactionGraph),
        )
    }

    fun map(dto: TdApi.StoryVideo): StoryVideo {
        return StoryVideo(
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
            hasStickers = dto.hasStickers,
            isAnimation = dto.isAnimation,
            minithumbnail = dto.minithumbnail?.let { map(it) },
            thumbnail = dto.thumbnail?.let { map(it) },
            preloadPrefixSize = dto.preloadPrefixSize,
            coverFrameTimestamp = dto.coverFrameTimestamp,
            video = map(dto.video),
        )
    }

    fun map(dto: StoryVideo): TdApi.StoryVideo {
        return TdApi.StoryVideo(
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
            hasStickers = dto.hasStickers,
            isAnimation = dto.isAnimation,
            minithumbnail = dto.minithumbnail?.let { map(it) },
            thumbnail = dto.thumbnail?.let { map(it) },
            preloadPrefixSize = dto.preloadPrefixSize,
            coverFrameTimestamp = dto.coverFrameTimestamp,
            video = map(dto.video),
        )
    }

    fun map(dto: TdApi.SuggestedAction): SuggestedAction {
        when (dto) {
            is TdApi.SuggestedActionEnableArchiveAndMuteNewChats -> return map(dto)
            is TdApi.SuggestedActionCheckPassword -> return map(dto)
            is TdApi.SuggestedActionCheckPhoneNumber -> return map(dto)
            is TdApi.SuggestedActionViewChecksHint -> return map(dto)
            is TdApi.SuggestedActionConvertToBroadcastGroup -> return map(dto)
            is TdApi.SuggestedActionSetPassword -> return map(dto)
            is TdApi.SuggestedActionUpgradePremium -> return map(dto)
            is TdApi.SuggestedActionRestorePremium -> return map(dto)
            is TdApi.SuggestedActionSubscribeToAnnualPremium -> return map(dto)
            is TdApi.SuggestedActionGiftPremiumForChristmas -> return map(dto)
            is TdApi.SuggestedActionSetBirthdate -> return map(dto)
            is TdApi.SuggestedActionSetProfilePhoto -> return map(dto)
            is TdApi.SuggestedActionExtendPremium -> return map(dto)
            is TdApi.SuggestedActionExtendStarSubscriptions -> return map(dto)
            is TdApi.SuggestedActionCustom -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.SuggestedActionEnableArchiveAndMuteNewChats): SuggestedActionEnableArchiveAndMuteNewChats {
        return SuggestedActionEnableArchiveAndMuteNewChats()
    }

    fun map(dto: TdApi.SuggestedActionCheckPassword): SuggestedActionCheckPassword {
        return SuggestedActionCheckPassword()
    }

    fun map(dto: TdApi.SuggestedActionCheckPhoneNumber): SuggestedActionCheckPhoneNumber {
        return SuggestedActionCheckPhoneNumber()
    }

    fun map(dto: TdApi.SuggestedActionViewChecksHint): SuggestedActionViewChecksHint {
        return SuggestedActionViewChecksHint()
    }

    fun map(dto: TdApi.SuggestedActionConvertToBroadcastGroup): SuggestedActionConvertToBroadcastGroup {
        return SuggestedActionConvertToBroadcastGroup(
            supergroupId = dto.supergroupId,
        )
    }

    fun map(dto: TdApi.SuggestedActionSetPassword): SuggestedActionSetPassword {
        return SuggestedActionSetPassword(
            authorizationDelay = dto.authorizationDelay,
        )
    }

    fun map(dto: TdApi.SuggestedActionUpgradePremium): SuggestedActionUpgradePremium {
        return SuggestedActionUpgradePremium()
    }

    fun map(dto: TdApi.SuggestedActionRestorePremium): SuggestedActionRestorePremium {
        return SuggestedActionRestorePremium()
    }

    fun map(dto: TdApi.SuggestedActionSubscribeToAnnualPremium): SuggestedActionSubscribeToAnnualPremium {
        return SuggestedActionSubscribeToAnnualPremium()
    }

    fun map(dto: TdApi.SuggestedActionGiftPremiumForChristmas): SuggestedActionGiftPremiumForChristmas {
        return SuggestedActionGiftPremiumForChristmas()
    }

    fun map(dto: TdApi.SuggestedActionSetBirthdate): SuggestedActionSetBirthdate {
        return SuggestedActionSetBirthdate()
    }

    fun map(dto: TdApi.SuggestedActionSetProfilePhoto): SuggestedActionSetProfilePhoto {
        return SuggestedActionSetProfilePhoto()
    }

    fun map(dto: TdApi.SuggestedActionExtendPremium): SuggestedActionExtendPremium {
        return SuggestedActionExtendPremium(
            managePremiumSubscriptionUrl = dto.managePremiumSubscriptionUrl,
        )
    }

    fun map(dto: TdApi.SuggestedActionExtendStarSubscriptions): SuggestedActionExtendStarSubscriptions {
        return SuggestedActionExtendStarSubscriptions()
    }

    fun map(dto: TdApi.SuggestedActionCustom): SuggestedActionCustom {
        return SuggestedActionCustom(
            name = dto.name,
            title = map(dto.title),
            description = map(dto.description),
            url = dto.url,
        )
    }

    fun map(dto: SuggestedAction): TdApi.SuggestedAction {
        when (dto) {
            is SuggestedActionEnableArchiveAndMuteNewChats -> return map(dto)
            is SuggestedActionCheckPassword -> return map(dto)
            is SuggestedActionCheckPhoneNumber -> return map(dto)
            is SuggestedActionViewChecksHint -> return map(dto)
            is SuggestedActionConvertToBroadcastGroup -> return map(dto)
            is SuggestedActionSetPassword -> return map(dto)
            is SuggestedActionUpgradePremium -> return map(dto)
            is SuggestedActionRestorePremium -> return map(dto)
            is SuggestedActionSubscribeToAnnualPremium -> return map(dto)
            is SuggestedActionGiftPremiumForChristmas -> return map(dto)
            is SuggestedActionSetBirthdate -> return map(dto)
            is SuggestedActionSetProfilePhoto -> return map(dto)
            is SuggestedActionExtendPremium -> return map(dto)
            is SuggestedActionExtendStarSubscriptions -> return map(dto)
            is SuggestedActionCustom -> return map(dto)
        }
    }

    fun map(dto: SuggestedActionEnableArchiveAndMuteNewChats): TdApi.SuggestedActionEnableArchiveAndMuteNewChats {
        return TdApi.SuggestedActionEnableArchiveAndMuteNewChats()
    }

    fun map(dto: SuggestedActionCheckPassword): TdApi.SuggestedActionCheckPassword {
        return TdApi.SuggestedActionCheckPassword()
    }

    fun map(dto: SuggestedActionCheckPhoneNumber): TdApi.SuggestedActionCheckPhoneNumber {
        return TdApi.SuggestedActionCheckPhoneNumber()
    }

    fun map(dto: SuggestedActionViewChecksHint): TdApi.SuggestedActionViewChecksHint {
        return TdApi.SuggestedActionViewChecksHint()
    }

    fun map(dto: SuggestedActionConvertToBroadcastGroup): TdApi.SuggestedActionConvertToBroadcastGroup {
        return TdApi.SuggestedActionConvertToBroadcastGroup(
            supergroupId = dto.supergroupId,
        )
    }

    fun map(dto: SuggestedActionSetPassword): TdApi.SuggestedActionSetPassword {
        return TdApi.SuggestedActionSetPassword(
            authorizationDelay = dto.authorizationDelay,
        )
    }

    fun map(dto: SuggestedActionUpgradePremium): TdApi.SuggestedActionUpgradePremium {
        return TdApi.SuggestedActionUpgradePremium()
    }

    fun map(dto: SuggestedActionRestorePremium): TdApi.SuggestedActionRestorePremium {
        return TdApi.SuggestedActionRestorePremium()
    }

    fun map(dto: SuggestedActionSubscribeToAnnualPremium): TdApi.SuggestedActionSubscribeToAnnualPremium {
        return TdApi.SuggestedActionSubscribeToAnnualPremium()
    }

    fun map(dto: SuggestedActionGiftPremiumForChristmas): TdApi.SuggestedActionGiftPremiumForChristmas {
        return TdApi.SuggestedActionGiftPremiumForChristmas()
    }

    fun map(dto: SuggestedActionSetBirthdate): TdApi.SuggestedActionSetBirthdate {
        return TdApi.SuggestedActionSetBirthdate()
    }

    fun map(dto: SuggestedActionSetProfilePhoto): TdApi.SuggestedActionSetProfilePhoto {
        return TdApi.SuggestedActionSetProfilePhoto()
    }

    fun map(dto: SuggestedActionExtendPremium): TdApi.SuggestedActionExtendPremium {
        return TdApi.SuggestedActionExtendPremium(
            managePremiumSubscriptionUrl = dto.managePremiumSubscriptionUrl,
        )
    }

    fun map(dto: SuggestedActionExtendStarSubscriptions): TdApi.SuggestedActionExtendStarSubscriptions {
        return TdApi.SuggestedActionExtendStarSubscriptions()
    }

    fun map(dto: SuggestedActionCustom): TdApi.SuggestedActionCustom {
        return TdApi.SuggestedActionCustom(
            name = dto.name,
            title = map(dto.title),
            description = map(dto.description),
            url = dto.url,
        )
    }

    fun map(dto: TdApi.Supergroup): Supergroup {
        return Supergroup(
            id = dto.id,
            usernames = dto.usernames?.let { map(it) },
            date = dto.date,
            status = map(dto.status),
            memberCount = dto.memberCount,
            boostLevel = dto.boostLevel,
            hasAutomaticTranslation = dto.hasAutomaticTranslation,
            hasLinkedChat = dto.hasLinkedChat,
            hasLocation = dto.hasLocation,
            signMessages = dto.signMessages,
            showMessageSender = dto.showMessageSender,
            joinToSendMessages = dto.joinToSendMessages,
            joinByRequest = dto.joinByRequest,
            isSlowModeEnabled = dto.isSlowModeEnabled,
            isChannel = dto.isChannel,
            isBroadcastGroup = dto.isBroadcastGroup,
            isForum = dto.isForum,
            isDirectMessagesGroup = dto.isDirectMessagesGroup,
            isAdministeredDirectMessagesGroup = dto.isAdministeredDirectMessagesGroup,
            verificationStatus = dto.verificationStatus?.let { map(it) },
            hasDirectMessagesGroup = dto.hasDirectMessagesGroup,
            hasForumTabs = dto.hasForumTabs,
            hasSensitiveContent = dto.hasSensitiveContent,
            restrictionReason = dto.restrictionReason,
            paidMessageStarCount = dto.paidMessageStarCount,
            hasActiveStories = dto.hasActiveStories,
            hasUnreadActiveStories = dto.hasUnreadActiveStories,
        )
    }

    fun map(dto: Supergroup): TdApi.Supergroup {
        return TdApi.Supergroup(
            id = dto.id,
            usernames = dto.usernames?.let { map(it) },
            date = dto.date,
            status = map(dto.status),
            memberCount = dto.memberCount,
            boostLevel = dto.boostLevel,
            hasAutomaticTranslation = dto.hasAutomaticTranslation,
            hasLinkedChat = dto.hasLinkedChat,
            hasLocation = dto.hasLocation,
            signMessages = dto.signMessages,
            showMessageSender = dto.showMessageSender,
            joinToSendMessages = dto.joinToSendMessages,
            joinByRequest = dto.joinByRequest,
            isSlowModeEnabled = dto.isSlowModeEnabled,
            isChannel = dto.isChannel,
            isBroadcastGroup = dto.isBroadcastGroup,
            isForum = dto.isForum,
            isDirectMessagesGroup = dto.isDirectMessagesGroup,
            isAdministeredDirectMessagesGroup = dto.isAdministeredDirectMessagesGroup,
            verificationStatus = dto.verificationStatus?.let { map(it) },
            hasDirectMessagesGroup = dto.hasDirectMessagesGroup,
            hasForumTabs = dto.hasForumTabs,
            hasSensitiveContent = dto.hasSensitiveContent,
            restrictionReason = dto.restrictionReason,
            paidMessageStarCount = dto.paidMessageStarCount,
            hasActiveStories = dto.hasActiveStories,
            hasUnreadActiveStories = dto.hasUnreadActiveStories,
        )
    }

    fun map(dto: TdApi.SupergroupFullInfo): SupergroupFullInfo {
        return SupergroupFullInfo(
            photo = dto.photo?.let { map(it) },
            description = dto.description,
            memberCount = dto.memberCount,
            administratorCount = dto.administratorCount,
            restrictedCount = dto.restrictedCount,
            bannedCount = dto.bannedCount,
            linkedChatId = dto.linkedChatId,
            directMessagesChatId = dto.directMessagesChatId,
            slowModeDelay = dto.slowModeDelay,
            slowModeDelayExpiresIn = dto.slowModeDelayExpiresIn,
            canEnablePaidMessages = dto.canEnablePaidMessages,
            canEnablePaidReaction = dto.canEnablePaidReaction,
            canGetMembers = dto.canGetMembers,
            hasHiddenMembers = dto.hasHiddenMembers,
            canHideMembers = dto.canHideMembers,
            canSetStickerSet = dto.canSetStickerSet,
            canSetLocation = dto.canSetLocation,
            canGetStatistics = dto.canGetStatistics,
            canGetRevenueStatistics = dto.canGetRevenueStatistics,
            canGetStarRevenueStatistics = dto.canGetStarRevenueStatistics,
            canSendGift = dto.canSendGift,
            canToggleAggressiveAntiSpam = dto.canToggleAggressiveAntiSpam,
            isAllHistoryAvailable = dto.isAllHistoryAvailable,
            canHaveSponsoredMessages = dto.canHaveSponsoredMessages,
            hasAggressiveAntiSpamEnabled = dto.hasAggressiveAntiSpamEnabled,
            hasPaidMediaAllowed = dto.hasPaidMediaAllowed,
            hasPinnedStories = dto.hasPinnedStories,
            giftCount = dto.giftCount,
            myBoostCount = dto.myBoostCount,
            unrestrictBoostCount = dto.unrestrictBoostCount,
            outgoingPaidMessageStarCount = dto.outgoingPaidMessageStarCount,
            stickerSetId = dto.stickerSetId,
            customEmojiStickerSetId = dto.customEmojiStickerSetId,
            location = dto.location?.let { map(it) },
            inviteLink = dto.inviteLink?.let { map(it) },
            botCommands = dto.botCommands.mapArray { map(it) },
            botVerification = dto.botVerification?.let { map(it) },
            upgradedFromBasicGroupId = dto.upgradedFromBasicGroupId,
            upgradedFromMaxMessageId = dto.upgradedFromMaxMessageId,
        )
    }

    fun map(dto: SupergroupFullInfo): TdApi.SupergroupFullInfo {
        return TdApi.SupergroupFullInfo(
            photo = dto.photo?.let { map(it) },
            description = dto.description,
            memberCount = dto.memberCount,
            administratorCount = dto.administratorCount,
            restrictedCount = dto.restrictedCount,
            bannedCount = dto.bannedCount,
            linkedChatId = dto.linkedChatId,
            directMessagesChatId = dto.directMessagesChatId,
            slowModeDelay = dto.slowModeDelay,
            slowModeDelayExpiresIn = dto.slowModeDelayExpiresIn,
            canEnablePaidMessages = dto.canEnablePaidMessages,
            canEnablePaidReaction = dto.canEnablePaidReaction,
            canGetMembers = dto.canGetMembers,
            hasHiddenMembers = dto.hasHiddenMembers,
            canHideMembers = dto.canHideMembers,
            canSetStickerSet = dto.canSetStickerSet,
            canSetLocation = dto.canSetLocation,
            canGetStatistics = dto.canGetStatistics,
            canGetRevenueStatistics = dto.canGetRevenueStatistics,
            canGetStarRevenueStatistics = dto.canGetStarRevenueStatistics,
            canSendGift = dto.canSendGift,
            canToggleAggressiveAntiSpam = dto.canToggleAggressiveAntiSpam,
            isAllHistoryAvailable = dto.isAllHistoryAvailable,
            canHaveSponsoredMessages = dto.canHaveSponsoredMessages,
            hasAggressiveAntiSpamEnabled = dto.hasAggressiveAntiSpamEnabled,
            hasPaidMediaAllowed = dto.hasPaidMediaAllowed,
            hasPinnedStories = dto.hasPinnedStories,
            giftCount = dto.giftCount,
            myBoostCount = dto.myBoostCount,
            unrestrictBoostCount = dto.unrestrictBoostCount,
            outgoingPaidMessageStarCount = dto.outgoingPaidMessageStarCount,
            stickerSetId = dto.stickerSetId,
            customEmojiStickerSetId = dto.customEmojiStickerSetId,
            location = dto.location?.let { map(it) },
            inviteLink = dto.inviteLink?.let { map(it) },
            botCommands = dto.botCommands.mapArray { map(it) },
            botVerification = dto.botVerification?.let { map(it) },
            upgradedFromBasicGroupId = dto.upgradedFromBasicGroupId,
            upgradedFromMaxMessageId = dto.upgradedFromMaxMessageId,
        )
    }

    fun map(dto: TdApi.SupergroupMembersFilter): SupergroupMembersFilter {
        when (dto) {
            is TdApi.SupergroupMembersFilterRecent -> return map(dto)
            is TdApi.SupergroupMembersFilterContacts -> return map(dto)
            is TdApi.SupergroupMembersFilterAdministrators -> return map(dto)
            is TdApi.SupergroupMembersFilterSearch -> return map(dto)
            is TdApi.SupergroupMembersFilterRestricted -> return map(dto)
            is TdApi.SupergroupMembersFilterBanned -> return map(dto)
            is TdApi.SupergroupMembersFilterMention -> return map(dto)
            is TdApi.SupergroupMembersFilterBots -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.SupergroupMembersFilterRecent): SupergroupMembersFilterRecent {
        return SupergroupMembersFilterRecent()
    }

    fun map(dto: TdApi.SupergroupMembersFilterContacts): SupergroupMembersFilterContacts {
        return SupergroupMembersFilterContacts(
            query = dto.query,
        )
    }

    fun map(dto: TdApi.SupergroupMembersFilterAdministrators): SupergroupMembersFilterAdministrators {
        return SupergroupMembersFilterAdministrators()
    }

    fun map(dto: TdApi.SupergroupMembersFilterSearch): SupergroupMembersFilterSearch {
        return SupergroupMembersFilterSearch(
            query = dto.query,
        )
    }

    fun map(dto: TdApi.SupergroupMembersFilterRestricted): SupergroupMembersFilterRestricted {
        return SupergroupMembersFilterRestricted(
            query = dto.query,
        )
    }

    fun map(dto: TdApi.SupergroupMembersFilterBanned): SupergroupMembersFilterBanned {
        return SupergroupMembersFilterBanned(
            query = dto.query,
        )
    }

    fun map(dto: TdApi.SupergroupMembersFilterMention): SupergroupMembersFilterMention {
        return SupergroupMembersFilterMention(
            query = dto.query,
            messageThreadId = dto.messageThreadId,
        )
    }

    fun map(dto: TdApi.SupergroupMembersFilterBots): SupergroupMembersFilterBots {
        return SupergroupMembersFilterBots()
    }

    fun map(dto: SupergroupMembersFilter): TdApi.SupergroupMembersFilter {
        when (dto) {
            is SupergroupMembersFilterRecent -> return map(dto)
            is SupergroupMembersFilterContacts -> return map(dto)
            is SupergroupMembersFilterAdministrators -> return map(dto)
            is SupergroupMembersFilterSearch -> return map(dto)
            is SupergroupMembersFilterRestricted -> return map(dto)
            is SupergroupMembersFilterBanned -> return map(dto)
            is SupergroupMembersFilterMention -> return map(dto)
            is SupergroupMembersFilterBots -> return map(dto)
        }
    }

    fun map(dto: SupergroupMembersFilterRecent): TdApi.SupergroupMembersFilterRecent {
        return TdApi.SupergroupMembersFilterRecent()
    }

    fun map(dto: SupergroupMembersFilterContacts): TdApi.SupergroupMembersFilterContacts {
        return TdApi.SupergroupMembersFilterContacts(
            query = dto.query,
        )
    }

    fun map(dto: SupergroupMembersFilterAdministrators): TdApi.SupergroupMembersFilterAdministrators {
        return TdApi.SupergroupMembersFilterAdministrators()
    }

    fun map(dto: SupergroupMembersFilterSearch): TdApi.SupergroupMembersFilterSearch {
        return TdApi.SupergroupMembersFilterSearch(
            query = dto.query,
        )
    }

    fun map(dto: SupergroupMembersFilterRestricted): TdApi.SupergroupMembersFilterRestricted {
        return TdApi.SupergroupMembersFilterRestricted(
            query = dto.query,
        )
    }

    fun map(dto: SupergroupMembersFilterBanned): TdApi.SupergroupMembersFilterBanned {
        return TdApi.SupergroupMembersFilterBanned(
            query = dto.query,
        )
    }

    fun map(dto: SupergroupMembersFilterMention): TdApi.SupergroupMembersFilterMention {
        return TdApi.SupergroupMembersFilterMention(
            query = dto.query,
            messageThreadId = dto.messageThreadId,
        )
    }

    fun map(dto: SupergroupMembersFilterBots): TdApi.SupergroupMembersFilterBots {
        return TdApi.SupergroupMembersFilterBots()
    }

    fun map(dto: TdApi.TMeUrl): TMeUrl {
        return TMeUrl(
            url = dto.url,
            type = map(dto.type),
        )
    }

    fun map(dto: TMeUrl): TdApi.TMeUrl {
        return TdApi.TMeUrl(
            url = dto.url,
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.TMeUrlType): TMeUrlType {
        when (dto) {
            is TdApi.TMeUrlTypeUser -> return map(dto)
            is TdApi.TMeUrlTypeSupergroup -> return map(dto)
            is TdApi.TMeUrlTypeChatInvite -> return map(dto)
            is TdApi.TMeUrlTypeStickerSet -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.TMeUrlTypeUser): TMeUrlTypeUser {
        return TMeUrlTypeUser(
            userId = dto.userId,
        )
    }

    fun map(dto: TdApi.TMeUrlTypeSupergroup): TMeUrlTypeSupergroup {
        return TMeUrlTypeSupergroup(
            supergroupId = dto.supergroupId,
        )
    }

    fun map(dto: TdApi.TMeUrlTypeChatInvite): TMeUrlTypeChatInvite {
        return TMeUrlTypeChatInvite(
            info = map(dto.info),
        )
    }

    fun map(dto: TdApi.TMeUrlTypeStickerSet): TMeUrlTypeStickerSet {
        return TMeUrlTypeStickerSet(
            stickerSetId = dto.stickerSetId,
        )
    }

    fun map(dto: TMeUrlType): TdApi.TMeUrlType {
        when (dto) {
            is TMeUrlTypeUser -> return map(dto)
            is TMeUrlTypeSupergroup -> return map(dto)
            is TMeUrlTypeChatInvite -> return map(dto)
            is TMeUrlTypeStickerSet -> return map(dto)
        }
    }

    fun map(dto: TMeUrlTypeUser): TdApi.TMeUrlTypeUser {
        return TdApi.TMeUrlTypeUser(
            userId = dto.userId,
        )
    }

    fun map(dto: TMeUrlTypeSupergroup): TdApi.TMeUrlTypeSupergroup {
        return TdApi.TMeUrlTypeSupergroup(
            supergroupId = dto.supergroupId,
        )
    }

    fun map(dto: TMeUrlTypeChatInvite): TdApi.TMeUrlTypeChatInvite {
        return TdApi.TMeUrlTypeChatInvite(
            info = map(dto.info),
        )
    }

    fun map(dto: TMeUrlTypeStickerSet): TdApi.TMeUrlTypeStickerSet {
        return TdApi.TMeUrlTypeStickerSet(
            stickerSetId = dto.stickerSetId,
        )
    }

    fun map(dto: TdApi.TMeUrls): TMeUrls {
        return TMeUrls(
            urls = dto.urls.mapArray { map(it) },
        )
    }

    fun map(dto: TMeUrls): TdApi.TMeUrls {
        return TdApi.TMeUrls(
            urls = dto.urls.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.TargetChat): TargetChat {
        when (dto) {
            is TdApi.TargetChatCurrent -> return map(dto)
            is TdApi.TargetChatChosen -> return map(dto)
            is TdApi.TargetChatInternalLink -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.TargetChatCurrent): TargetChatCurrent {
        return TargetChatCurrent()
    }

    fun map(dto: TdApi.TargetChatChosen): TargetChatChosen {
        return TargetChatChosen(
            types = map(dto.types),
        )
    }

    fun map(dto: TdApi.TargetChatInternalLink): TargetChatInternalLink {
        return TargetChatInternalLink(
            link = map(dto.link),
        )
    }

    fun map(dto: TargetChat): TdApi.TargetChat {
        when (dto) {
            is TargetChatCurrent -> return map(dto)
            is TargetChatChosen -> return map(dto)
            is TargetChatInternalLink -> return map(dto)
        }
    }

    fun map(dto: TargetChatCurrent): TdApi.TargetChatCurrent {
        return TdApi.TargetChatCurrent()
    }

    fun map(dto: TargetChatChosen): TdApi.TargetChatChosen {
        return TdApi.TargetChatChosen(
            types = map(dto.types),
        )
    }

    fun map(dto: TargetChatInternalLink): TdApi.TargetChatInternalLink {
        return TdApi.TargetChatInternalLink(
            link = map(dto.link),
        )
    }

    fun map(dto: TdApi.TargetChatTypes): TargetChatTypes {
        return TargetChatTypes(
            allowUserChats = dto.allowUserChats,
            allowBotChats = dto.allowBotChats,
            allowGroupChats = dto.allowGroupChats,
            allowChannelChats = dto.allowChannelChats,
        )
    }

    fun map(dto: TargetChatTypes): TdApi.TargetChatTypes {
        return TdApi.TargetChatTypes(
            allowUserChats = dto.allowUserChats,
            allowBotChats = dto.allowBotChats,
            allowGroupChats = dto.allowGroupChats,
            allowChannelChats = dto.allowChannelChats,
        )
    }

    fun map(dto: TdApi.TelegramPaymentPurpose): TelegramPaymentPurpose {
        when (dto) {
            is TdApi.TelegramPaymentPurposePremiumGift -> return map(dto)
            is TdApi.TelegramPaymentPurposePremiumGiftCodes -> return map(dto)
            is TdApi.TelegramPaymentPurposePremiumGiveaway -> return map(dto)
            is TdApi.TelegramPaymentPurposeStars -> return map(dto)
            is TdApi.TelegramPaymentPurposeGiftedStars -> return map(dto)
            is TdApi.TelegramPaymentPurposeStarGiveaway -> return map(dto)
            is TdApi.TelegramPaymentPurposeJoinChat -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.TelegramPaymentPurposePremiumGift): TelegramPaymentPurposePremiumGift {
        return TelegramPaymentPurposePremiumGift(
            currency = dto.currency,
            amount = dto.amount,
            userId = dto.userId,
            monthCount = dto.monthCount,
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.TelegramPaymentPurposePremiumGiftCodes): TelegramPaymentPurposePremiumGiftCodes {
        return TelegramPaymentPurposePremiumGiftCodes(
            boostedChatId = dto.boostedChatId,
            currency = dto.currency,
            amount = dto.amount,
            userIds = dto.userIds,
            monthCount = dto.monthCount,
            text = map(dto.text),
        )
    }

    fun map(dto: TdApi.TelegramPaymentPurposePremiumGiveaway): TelegramPaymentPurposePremiumGiveaway {
        return TelegramPaymentPurposePremiumGiveaway(
            parameters = map(dto.parameters),
            currency = dto.currency,
            amount = dto.amount,
            winnerCount = dto.winnerCount,
            monthCount = dto.monthCount,
        )
    }

    fun map(dto: TdApi.TelegramPaymentPurposeStars): TelegramPaymentPurposeStars {
        return TelegramPaymentPurposeStars(
            currency = dto.currency,
            amount = dto.amount,
            starCount = dto.starCount,
        )
    }

    fun map(dto: TdApi.TelegramPaymentPurposeGiftedStars): TelegramPaymentPurposeGiftedStars {
        return TelegramPaymentPurposeGiftedStars(
            userId = dto.userId,
            currency = dto.currency,
            amount = dto.amount,
            starCount = dto.starCount,
        )
    }

    fun map(dto: TdApi.TelegramPaymentPurposeStarGiveaway): TelegramPaymentPurposeStarGiveaway {
        return TelegramPaymentPurposeStarGiveaway(
            parameters = map(dto.parameters),
            currency = dto.currency,
            amount = dto.amount,
            winnerCount = dto.winnerCount,
            starCount = dto.starCount,
        )
    }

    fun map(dto: TdApi.TelegramPaymentPurposeJoinChat): TelegramPaymentPurposeJoinChat {
        return TelegramPaymentPurposeJoinChat(
            inviteLink = dto.inviteLink,
        )
    }

    fun map(dto: TelegramPaymentPurpose): TdApi.TelegramPaymentPurpose {
        when (dto) {
            is TelegramPaymentPurposePremiumGift -> return map(dto)
            is TelegramPaymentPurposePremiumGiftCodes -> return map(dto)
            is TelegramPaymentPurposePremiumGiveaway -> return map(dto)
            is TelegramPaymentPurposeStars -> return map(dto)
            is TelegramPaymentPurposeGiftedStars -> return map(dto)
            is TelegramPaymentPurposeStarGiveaway -> return map(dto)
            is TelegramPaymentPurposeJoinChat -> return map(dto)
        }
    }

    fun map(dto: TelegramPaymentPurposePremiumGift): TdApi.TelegramPaymentPurposePremiumGift {
        return TdApi.TelegramPaymentPurposePremiumGift(
            currency = dto.currency,
            amount = dto.amount,
            userId = dto.userId,
            monthCount = dto.monthCount,
            text = map(dto.text),
        )
    }

    fun map(dto: TelegramPaymentPurposePremiumGiftCodes): TdApi.TelegramPaymentPurposePremiumGiftCodes {
        return TdApi.TelegramPaymentPurposePremiumGiftCodes(
            boostedChatId = dto.boostedChatId,
            currency = dto.currency,
            amount = dto.amount,
            userIds = dto.userIds,
            monthCount = dto.monthCount,
            text = map(dto.text),
        )
    }

    fun map(dto: TelegramPaymentPurposePremiumGiveaway): TdApi.TelegramPaymentPurposePremiumGiveaway {
        return TdApi.TelegramPaymentPurposePremiumGiveaway(
            parameters = map(dto.parameters),
            currency = dto.currency,
            amount = dto.amount,
            winnerCount = dto.winnerCount,
            monthCount = dto.monthCount,
        )
    }

    fun map(dto: TelegramPaymentPurposeStars): TdApi.TelegramPaymentPurposeStars {
        return TdApi.TelegramPaymentPurposeStars(
            currency = dto.currency,
            amount = dto.amount,
            starCount = dto.starCount,
        )
    }

    fun map(dto: TelegramPaymentPurposeGiftedStars): TdApi.TelegramPaymentPurposeGiftedStars {
        return TdApi.TelegramPaymentPurposeGiftedStars(
            userId = dto.userId,
            currency = dto.currency,
            amount = dto.amount,
            starCount = dto.starCount,
        )
    }

    fun map(dto: TelegramPaymentPurposeStarGiveaway): TdApi.TelegramPaymentPurposeStarGiveaway {
        return TdApi.TelegramPaymentPurposeStarGiveaway(
            parameters = map(dto.parameters),
            currency = dto.currency,
            amount = dto.amount,
            winnerCount = dto.winnerCount,
            starCount = dto.starCount,
        )
    }

    fun map(dto: TelegramPaymentPurposeJoinChat): TdApi.TelegramPaymentPurposeJoinChat {
        return TdApi.TelegramPaymentPurposeJoinChat(
            inviteLink = dto.inviteLink,
        )
    }

    fun map(dto: TdApi.TemporaryPasswordState): TemporaryPasswordState {
        return TemporaryPasswordState(
            hasPassword = dto.hasPassword,
            validFor = dto.validFor,
        )
    }

    fun map(dto: TemporaryPasswordState): TdApi.TemporaryPasswordState {
        return TdApi.TemporaryPasswordState(
            hasPassword = dto.hasPassword,
            validFor = dto.validFor,
        )
    }

    fun map(dto: TdApi.TermsOfService): TermsOfService {
        return TermsOfService(
            text = map(dto.text),
            minUserAge = dto.minUserAge,
            showPopup = dto.showPopup,
        )
    }

    fun map(dto: TermsOfService): TdApi.TermsOfService {
        return TdApi.TermsOfService(
            text = map(dto.text),
            minUserAge = dto.minUserAge,
            showPopup = dto.showPopup,
        )
    }

    fun map(dto: TdApi.TestBytes): TestBytes {
        return TestBytes(
            value = dto.value,
        )
    }

    fun map(dto: TestBytes): TdApi.TestBytes {
        return TdApi.TestBytes(
            value = dto.value,
        )
    }

    fun map(dto: TdApi.TestInt): TestInt {
        return TestInt(
            value = dto.value,
        )
    }

    fun map(dto: TestInt): TdApi.TestInt {
        return TdApi.TestInt(
            value = dto.value,
        )
    }

    fun map(dto: TdApi.TestString): TestString {
        return TestString(
            value = dto.value,
        )
    }

    fun map(dto: TestString): TdApi.TestString {
        return TdApi.TestString(
            value = dto.value,
        )
    }

    fun map(dto: TdApi.TestVectorInt): TestVectorInt {
        return TestVectorInt(
            value = dto.value,
        )
    }

    fun map(dto: TestVectorInt): TdApi.TestVectorInt {
        return TdApi.TestVectorInt(
            value = dto.value,
        )
    }

    fun map(dto: TdApi.TestVectorIntObject): TestVectorIntObject {
        return TestVectorIntObject(
            value = dto.value.mapArray { map(it) },
        )
    }

    fun map(dto: TestVectorIntObject): TdApi.TestVectorIntObject {
        return TdApi.TestVectorIntObject(
            value = dto.value.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.TestVectorString): TestVectorString {
        return TestVectorString(
            value = dto.value,
        )
    }

    fun map(dto: TestVectorString): TdApi.TestVectorString {
        return TdApi.TestVectorString(
            value = dto.value,
        )
    }

    fun map(dto: TdApi.TestVectorStringObject): TestVectorStringObject {
        return TestVectorStringObject(
            value = dto.value.mapArray { map(it) },
        )
    }

    fun map(dto: TestVectorStringObject): TdApi.TestVectorStringObject {
        return TdApi.TestVectorStringObject(
            value = dto.value.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.Text): Text {
        return Text(
            text = dto.text,
        )
    }

    fun map(dto: Text): TdApi.Text {
        return TdApi.Text(
            text = dto.text,
        )
    }

    fun map(dto: TdApi.TextEntities): TextEntities {
        return TextEntities(
            entities = dto.entities.mapArray { map(it) },
        )
    }

    fun map(dto: TextEntities): TdApi.TextEntities {
        return TdApi.TextEntities(
            entities = dto.entities.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.TextEntity): TextEntity {
        return TextEntity(
            offset = dto.offset,
            length = dto.length,
            type = map(dto.type),
        )
    }

    fun map(dto: TextEntity): TdApi.TextEntity {
        return TdApi.TextEntity(
            offset = dto.offset,
            length = dto.length,
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.TextEntityType): TextEntityType {
        when (dto) {
            is TdApi.TextEntityTypeMention -> return map(dto)
            is TdApi.TextEntityTypeHashtag -> return map(dto)
            is TdApi.TextEntityTypeCashtag -> return map(dto)
            is TdApi.TextEntityTypeBotCommand -> return map(dto)
            is TdApi.TextEntityTypeUrl -> return map(dto)
            is TdApi.TextEntityTypeEmailAddress -> return map(dto)
            is TdApi.TextEntityTypePhoneNumber -> return map(dto)
            is TdApi.TextEntityTypeBankCardNumber -> return map(dto)
            is TdApi.TextEntityTypeBold -> return map(dto)
            is TdApi.TextEntityTypeItalic -> return map(dto)
            is TdApi.TextEntityTypeUnderline -> return map(dto)
            is TdApi.TextEntityTypeStrikethrough -> return map(dto)
            is TdApi.TextEntityTypeSpoiler -> return map(dto)
            is TdApi.TextEntityTypeCode -> return map(dto)
            is TdApi.TextEntityTypePre -> return map(dto)
            is TdApi.TextEntityTypePreCode -> return map(dto)
            is TdApi.TextEntityTypeBlockQuote -> return map(dto)
            is TdApi.TextEntityTypeExpandableBlockQuote -> return map(dto)
            is TdApi.TextEntityTypeTextUrl -> return map(dto)
            is TdApi.TextEntityTypeMentionName -> return map(dto)
            is TdApi.TextEntityTypeCustomEmoji -> return map(dto)
            is TdApi.TextEntityTypeMediaTimestamp -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.TextEntityTypeMention): TextEntityTypeMention {
        return TextEntityTypeMention()
    }

    fun map(dto: TdApi.TextEntityTypeHashtag): TextEntityTypeHashtag {
        return TextEntityTypeHashtag()
    }

    fun map(dto: TdApi.TextEntityTypeCashtag): TextEntityTypeCashtag {
        return TextEntityTypeCashtag()
    }

    fun map(dto: TdApi.TextEntityTypeBotCommand): TextEntityTypeBotCommand {
        return TextEntityTypeBotCommand()
    }

    fun map(dto: TdApi.TextEntityTypeUrl): TextEntityTypeUrl {
        return TextEntityTypeUrl()
    }

    fun map(dto: TdApi.TextEntityTypeEmailAddress): TextEntityTypeEmailAddress {
        return TextEntityTypeEmailAddress()
    }

    fun map(dto: TdApi.TextEntityTypePhoneNumber): TextEntityTypePhoneNumber {
        return TextEntityTypePhoneNumber()
    }

    fun map(dto: TdApi.TextEntityTypeBankCardNumber): TextEntityTypeBankCardNumber {
        return TextEntityTypeBankCardNumber()
    }

    fun map(dto: TdApi.TextEntityTypeBold): TextEntityTypeBold {
        return TextEntityTypeBold()
    }

    fun map(dto: TdApi.TextEntityTypeItalic): TextEntityTypeItalic {
        return TextEntityTypeItalic()
    }

    fun map(dto: TdApi.TextEntityTypeUnderline): TextEntityTypeUnderline {
        return TextEntityTypeUnderline()
    }

    fun map(dto: TdApi.TextEntityTypeStrikethrough): TextEntityTypeStrikethrough {
        return TextEntityTypeStrikethrough()
    }

    fun map(dto: TdApi.TextEntityTypeSpoiler): TextEntityTypeSpoiler {
        return TextEntityTypeSpoiler()
    }

    fun map(dto: TdApi.TextEntityTypeCode): TextEntityTypeCode {
        return TextEntityTypeCode()
    }

    fun map(dto: TdApi.TextEntityTypePre): TextEntityTypePre {
        return TextEntityTypePre()
    }

    fun map(dto: TdApi.TextEntityTypePreCode): TextEntityTypePreCode {
        return TextEntityTypePreCode(
            language = dto.language,
        )
    }

    fun map(dto: TdApi.TextEntityTypeBlockQuote): TextEntityTypeBlockQuote {
        return TextEntityTypeBlockQuote()
    }

    fun map(dto: TdApi.TextEntityTypeExpandableBlockQuote): TextEntityTypeExpandableBlockQuote {
        return TextEntityTypeExpandableBlockQuote()
    }

    fun map(dto: TdApi.TextEntityTypeTextUrl): TextEntityTypeTextUrl {
        return TextEntityTypeTextUrl(
            url = dto.url,
        )
    }

    fun map(dto: TdApi.TextEntityTypeMentionName): TextEntityTypeMentionName {
        return TextEntityTypeMentionName(
            userId = dto.userId,
        )
    }

    fun map(dto: TdApi.TextEntityTypeCustomEmoji): TextEntityTypeCustomEmoji {
        return TextEntityTypeCustomEmoji(
            customEmojiId = dto.customEmojiId,
        )
    }

    fun map(dto: TdApi.TextEntityTypeMediaTimestamp): TextEntityTypeMediaTimestamp {
        return TextEntityTypeMediaTimestamp(
            mediaTimestamp = dto.mediaTimestamp,
        )
    }

    fun map(dto: TextEntityType): TdApi.TextEntityType {
        when (dto) {
            is TextEntityTypeMention -> return map(dto)
            is TextEntityTypeHashtag -> return map(dto)
            is TextEntityTypeCashtag -> return map(dto)
            is TextEntityTypeBotCommand -> return map(dto)
            is TextEntityTypeUrl -> return map(dto)
            is TextEntityTypeEmailAddress -> return map(dto)
            is TextEntityTypePhoneNumber -> return map(dto)
            is TextEntityTypeBankCardNumber -> return map(dto)
            is TextEntityTypeBold -> return map(dto)
            is TextEntityTypeItalic -> return map(dto)
            is TextEntityTypeUnderline -> return map(dto)
            is TextEntityTypeStrikethrough -> return map(dto)
            is TextEntityTypeSpoiler -> return map(dto)
            is TextEntityTypeCode -> return map(dto)
            is TextEntityTypePre -> return map(dto)
            is TextEntityTypePreCode -> return map(dto)
            is TextEntityTypeBlockQuote -> return map(dto)
            is TextEntityTypeExpandableBlockQuote -> return map(dto)
            is TextEntityTypeTextUrl -> return map(dto)
            is TextEntityTypeMentionName -> return map(dto)
            is TextEntityTypeCustomEmoji -> return map(dto)
            is TextEntityTypeMediaTimestamp -> return map(dto)
        }
    }

    fun map(dto: TextEntityTypeMention): TdApi.TextEntityTypeMention {
        return TdApi.TextEntityTypeMention()
    }

    fun map(dto: TextEntityTypeHashtag): TdApi.TextEntityTypeHashtag {
        return TdApi.TextEntityTypeHashtag()
    }

    fun map(dto: TextEntityTypeCashtag): TdApi.TextEntityTypeCashtag {
        return TdApi.TextEntityTypeCashtag()
    }

    fun map(dto: TextEntityTypeBotCommand): TdApi.TextEntityTypeBotCommand {
        return TdApi.TextEntityTypeBotCommand()
    }

    fun map(dto: TextEntityTypeUrl): TdApi.TextEntityTypeUrl {
        return TdApi.TextEntityTypeUrl()
    }

    fun map(dto: TextEntityTypeEmailAddress): TdApi.TextEntityTypeEmailAddress {
        return TdApi.TextEntityTypeEmailAddress()
    }

    fun map(dto: TextEntityTypePhoneNumber): TdApi.TextEntityTypePhoneNumber {
        return TdApi.TextEntityTypePhoneNumber()
    }

    fun map(dto: TextEntityTypeBankCardNumber): TdApi.TextEntityTypeBankCardNumber {
        return TdApi.TextEntityTypeBankCardNumber()
    }

    fun map(dto: TextEntityTypeBold): TdApi.TextEntityTypeBold {
        return TdApi.TextEntityTypeBold()
    }

    fun map(dto: TextEntityTypeItalic): TdApi.TextEntityTypeItalic {
        return TdApi.TextEntityTypeItalic()
    }

    fun map(dto: TextEntityTypeUnderline): TdApi.TextEntityTypeUnderline {
        return TdApi.TextEntityTypeUnderline()
    }

    fun map(dto: TextEntityTypeStrikethrough): TdApi.TextEntityTypeStrikethrough {
        return TdApi.TextEntityTypeStrikethrough()
    }

    fun map(dto: TextEntityTypeSpoiler): TdApi.TextEntityTypeSpoiler {
        return TdApi.TextEntityTypeSpoiler()
    }

    fun map(dto: TextEntityTypeCode): TdApi.TextEntityTypeCode {
        return TdApi.TextEntityTypeCode()
    }

    fun map(dto: TextEntityTypePre): TdApi.TextEntityTypePre {
        return TdApi.TextEntityTypePre()
    }

    fun map(dto: TextEntityTypePreCode): TdApi.TextEntityTypePreCode {
        return TdApi.TextEntityTypePreCode(
            language = dto.language,
        )
    }

    fun map(dto: TextEntityTypeBlockQuote): TdApi.TextEntityTypeBlockQuote {
        return TdApi.TextEntityTypeBlockQuote()
    }

    fun map(dto: TextEntityTypeExpandableBlockQuote): TdApi.TextEntityTypeExpandableBlockQuote {
        return TdApi.TextEntityTypeExpandableBlockQuote()
    }

    fun map(dto: TextEntityTypeTextUrl): TdApi.TextEntityTypeTextUrl {
        return TdApi.TextEntityTypeTextUrl(
            url = dto.url,
        )
    }

    fun map(dto: TextEntityTypeMentionName): TdApi.TextEntityTypeMentionName {
        return TdApi.TextEntityTypeMentionName(
            userId = dto.userId,
        )
    }

    fun map(dto: TextEntityTypeCustomEmoji): TdApi.TextEntityTypeCustomEmoji {
        return TdApi.TextEntityTypeCustomEmoji(
            customEmojiId = dto.customEmojiId,
        )
    }

    fun map(dto: TextEntityTypeMediaTimestamp): TdApi.TextEntityTypeMediaTimestamp {
        return TdApi.TextEntityTypeMediaTimestamp(
            mediaTimestamp = dto.mediaTimestamp,
        )
    }

    fun map(dto: TdApi.TextParseMode): TextParseMode {
        when (dto) {
            is TdApi.TextParseModeMarkdown -> return map(dto)
            is TdApi.TextParseModeHTML -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.TextParseModeMarkdown): TextParseModeMarkdown {
        return TextParseModeMarkdown(
            version = dto.version,
        )
    }

    fun map(dto: TdApi.TextParseModeHTML): TextParseModeHTML {
        return TextParseModeHTML()
    }

    fun map(dto: TextParseMode): TdApi.TextParseMode {
        when (dto) {
            is TextParseModeMarkdown -> return map(dto)
            is TextParseModeHTML -> return map(dto)
        }
    }

    fun map(dto: TextParseModeMarkdown): TdApi.TextParseModeMarkdown {
        return TdApi.TextParseModeMarkdown(
            version = dto.version,
        )
    }

    fun map(dto: TextParseModeHTML): TdApi.TextParseModeHTML {
        return TdApi.TextParseModeHTML()
    }

    fun map(dto: TdApi.TextQuote): TextQuote {
        return TextQuote(
            text = map(dto.text),
            position = dto.position,
            isManual = dto.isManual,
        )
    }

    fun map(dto: TextQuote): TdApi.TextQuote {
        return TdApi.TextQuote(
            text = map(dto.text),
            position = dto.position,
            isManual = dto.isManual,
        )
    }

    fun map(dto: TdApi.ThemeParameters): ThemeParameters {
        return ThemeParameters(
            backgroundColor = dto.backgroundColor,
            secondaryBackgroundColor = dto.secondaryBackgroundColor,
            headerBackgroundColor = dto.headerBackgroundColor,
            bottomBarBackgroundColor = dto.bottomBarBackgroundColor,
            sectionBackgroundColor = dto.sectionBackgroundColor,
            sectionSeparatorColor = dto.sectionSeparatorColor,
            textColor = dto.textColor,
            accentTextColor = dto.accentTextColor,
            sectionHeaderTextColor = dto.sectionHeaderTextColor,
            subtitleTextColor = dto.subtitleTextColor,
            destructiveTextColor = dto.destructiveTextColor,
            hintColor = dto.hintColor,
            linkColor = dto.linkColor,
            buttonColor = dto.buttonColor,
            buttonTextColor = dto.buttonTextColor,
        )
    }

    fun map(dto: ThemeParameters): TdApi.ThemeParameters {
        return TdApi.ThemeParameters(
            backgroundColor = dto.backgroundColor,
            secondaryBackgroundColor = dto.secondaryBackgroundColor,
            headerBackgroundColor = dto.headerBackgroundColor,
            bottomBarBackgroundColor = dto.bottomBarBackgroundColor,
            sectionBackgroundColor = dto.sectionBackgroundColor,
            sectionSeparatorColor = dto.sectionSeparatorColor,
            textColor = dto.textColor,
            accentTextColor = dto.accentTextColor,
            sectionHeaderTextColor = dto.sectionHeaderTextColor,
            subtitleTextColor = dto.subtitleTextColor,
            destructiveTextColor = dto.destructiveTextColor,
            hintColor = dto.hintColor,
            linkColor = dto.linkColor,
            buttonColor = dto.buttonColor,
            buttonTextColor = dto.buttonTextColor,
        )
    }

    fun map(dto: TdApi.ThemeSettings): ThemeSettings {
        return ThemeSettings(
            accentColor = dto.accentColor,
            background = dto.background?.let { map(it) },
            outgoingMessageFill = map(dto.outgoingMessageFill),
            animateOutgoingMessageFill = dto.animateOutgoingMessageFill,
            outgoingMessageAccentColor = dto.outgoingMessageAccentColor,
        )
    }

    fun map(dto: ThemeSettings): TdApi.ThemeSettings {
        return TdApi.ThemeSettings(
            accentColor = dto.accentColor,
            background = dto.background?.let { map(it) },
            outgoingMessageFill = map(dto.outgoingMessageFill),
            animateOutgoingMessageFill = dto.animateOutgoingMessageFill,
            outgoingMessageAccentColor = dto.outgoingMessageAccentColor,
        )
    }

    fun map(dto: TdApi.Thumbnail): Thumbnail {
        return Thumbnail(
            format = map(dto.format),
            width = dto.width,
            height = dto.height,
            file = map(dto.file),
        )
    }

    fun map(dto: Thumbnail): TdApi.Thumbnail {
        return TdApi.Thumbnail(
            format = map(dto.format),
            width = dto.width,
            height = dto.height,
            file = map(dto.file),
        )
    }

    fun map(dto: TdApi.ThumbnailFormat): ThumbnailFormat {
        when (dto) {
            is TdApi.ThumbnailFormatJpeg -> return map(dto)
            is TdApi.ThumbnailFormatGif -> return map(dto)
            is TdApi.ThumbnailFormatMpeg4 -> return map(dto)
            is TdApi.ThumbnailFormatPng -> return map(dto)
            is TdApi.ThumbnailFormatTgs -> return map(dto)
            is TdApi.ThumbnailFormatWebm -> return map(dto)
            is TdApi.ThumbnailFormatWebp -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.ThumbnailFormatJpeg): ThumbnailFormatJpeg {
        return ThumbnailFormatJpeg()
    }

    fun map(dto: TdApi.ThumbnailFormatGif): ThumbnailFormatGif {
        return ThumbnailFormatGif()
    }

    fun map(dto: TdApi.ThumbnailFormatMpeg4): ThumbnailFormatMpeg4 {
        return ThumbnailFormatMpeg4()
    }

    fun map(dto: TdApi.ThumbnailFormatPng): ThumbnailFormatPng {
        return ThumbnailFormatPng()
    }

    fun map(dto: TdApi.ThumbnailFormatTgs): ThumbnailFormatTgs {
        return ThumbnailFormatTgs()
    }

    fun map(dto: TdApi.ThumbnailFormatWebm): ThumbnailFormatWebm {
        return ThumbnailFormatWebm()
    }

    fun map(dto: TdApi.ThumbnailFormatWebp): ThumbnailFormatWebp {
        return ThumbnailFormatWebp()
    }

    fun map(dto: ThumbnailFormat): TdApi.ThumbnailFormat {
        when (dto) {
            is ThumbnailFormatJpeg -> return map(dto)
            is ThumbnailFormatGif -> return map(dto)
            is ThumbnailFormatMpeg4 -> return map(dto)
            is ThumbnailFormatPng -> return map(dto)
            is ThumbnailFormatTgs -> return map(dto)
            is ThumbnailFormatWebm -> return map(dto)
            is ThumbnailFormatWebp -> return map(dto)
        }
    }

    fun map(dto: ThumbnailFormatJpeg): TdApi.ThumbnailFormatJpeg {
        return TdApi.ThumbnailFormatJpeg()
    }

    fun map(dto: ThumbnailFormatGif): TdApi.ThumbnailFormatGif {
        return TdApi.ThumbnailFormatGif()
    }

    fun map(dto: ThumbnailFormatMpeg4): TdApi.ThumbnailFormatMpeg4 {
        return TdApi.ThumbnailFormatMpeg4()
    }

    fun map(dto: ThumbnailFormatPng): TdApi.ThumbnailFormatPng {
        return TdApi.ThumbnailFormatPng()
    }

    fun map(dto: ThumbnailFormatTgs): TdApi.ThumbnailFormatTgs {
        return TdApi.ThumbnailFormatTgs()
    }

    fun map(dto: ThumbnailFormatWebm): TdApi.ThumbnailFormatWebm {
        return TdApi.ThumbnailFormatWebm()
    }

    fun map(dto: ThumbnailFormatWebp): TdApi.ThumbnailFormatWebp {
        return TdApi.ThumbnailFormatWebp()
    }

    fun map(dto: TdApi.TimeZone): TimeZone {
        return TimeZone(
            id = dto.id,
            name = dto.name,
            utcTimeOffset = dto.utcTimeOffset,
        )
    }

    fun map(dto: TimeZone): TdApi.TimeZone {
        return TdApi.TimeZone(
            id = dto.id,
            name = dto.name,
            utcTimeOffset = dto.utcTimeOffset,
        )
    }

    fun map(dto: TdApi.TimeZones): TimeZones {
        return TimeZones(
            timeZones = dto.timeZones.mapArray { map(it) },
        )
    }

    fun map(dto: TimeZones): TdApi.TimeZones {
        return TdApi.TimeZones(
            timeZones = dto.timeZones.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.TopChatCategory): TopChatCategory {
        when (dto) {
            is TdApi.TopChatCategoryUsers -> return map(dto)
            is TdApi.TopChatCategoryBots -> return map(dto)
            is TdApi.TopChatCategoryGroups -> return map(dto)
            is TdApi.TopChatCategoryChannels -> return map(dto)
            is TdApi.TopChatCategoryInlineBots -> return map(dto)
            is TdApi.TopChatCategoryWebAppBots -> return map(dto)
            is TdApi.TopChatCategoryCalls -> return map(dto)
            is TdApi.TopChatCategoryForwardChats -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.TopChatCategoryUsers): TopChatCategoryUsers {
        return TopChatCategoryUsers()
    }

    fun map(dto: TdApi.TopChatCategoryBots): TopChatCategoryBots {
        return TopChatCategoryBots()
    }

    fun map(dto: TdApi.TopChatCategoryGroups): TopChatCategoryGroups {
        return TopChatCategoryGroups()
    }

    fun map(dto: TdApi.TopChatCategoryChannels): TopChatCategoryChannels {
        return TopChatCategoryChannels()
    }

    fun map(dto: TdApi.TopChatCategoryInlineBots): TopChatCategoryInlineBots {
        return TopChatCategoryInlineBots()
    }

    fun map(dto: TdApi.TopChatCategoryWebAppBots): TopChatCategoryWebAppBots {
        return TopChatCategoryWebAppBots()
    }

    fun map(dto: TdApi.TopChatCategoryCalls): TopChatCategoryCalls {
        return TopChatCategoryCalls()
    }

    fun map(dto: TdApi.TopChatCategoryForwardChats): TopChatCategoryForwardChats {
        return TopChatCategoryForwardChats()
    }

    fun map(dto: TopChatCategory): TdApi.TopChatCategory {
        when (dto) {
            is TopChatCategoryUsers -> return map(dto)
            is TopChatCategoryBots -> return map(dto)
            is TopChatCategoryGroups -> return map(dto)
            is TopChatCategoryChannels -> return map(dto)
            is TopChatCategoryInlineBots -> return map(dto)
            is TopChatCategoryWebAppBots -> return map(dto)
            is TopChatCategoryCalls -> return map(dto)
            is TopChatCategoryForwardChats -> return map(dto)
        }
    }

    fun map(dto: TopChatCategoryUsers): TdApi.TopChatCategoryUsers {
        return TdApi.TopChatCategoryUsers()
    }

    fun map(dto: TopChatCategoryBots): TdApi.TopChatCategoryBots {
        return TdApi.TopChatCategoryBots()
    }

    fun map(dto: TopChatCategoryGroups): TdApi.TopChatCategoryGroups {
        return TdApi.TopChatCategoryGroups()
    }

    fun map(dto: TopChatCategoryChannels): TdApi.TopChatCategoryChannels {
        return TdApi.TopChatCategoryChannels()
    }

    fun map(dto: TopChatCategoryInlineBots): TdApi.TopChatCategoryInlineBots {
        return TdApi.TopChatCategoryInlineBots()
    }

    fun map(dto: TopChatCategoryWebAppBots): TdApi.TopChatCategoryWebAppBots {
        return TdApi.TopChatCategoryWebAppBots()
    }

    fun map(dto: TopChatCategoryCalls): TdApi.TopChatCategoryCalls {
        return TdApi.TopChatCategoryCalls()
    }

    fun map(dto: TopChatCategoryForwardChats): TdApi.TopChatCategoryForwardChats {
        return TdApi.TopChatCategoryForwardChats()
    }

    fun map(dto: TdApi.TrendingStickerSets): TrendingStickerSets {
        return TrendingStickerSets(
            totalCount = dto.totalCount,
            sets = dto.sets.mapArray { map(it) },
            isPremium = dto.isPremium,
        )
    }

    fun map(dto: TrendingStickerSets): TdApi.TrendingStickerSets {
        return TdApi.TrendingStickerSets(
            totalCount = dto.totalCount,
            sets = dto.sets.mapArray { map(it) },
            isPremium = dto.isPremium,
        )
    }

    fun map(dto: TdApi.UnconfirmedSession): UnconfirmedSession {
        return UnconfirmedSession(
            id = dto.id,
            logInDate = dto.logInDate,
            deviceModel = dto.deviceModel,
            location = dto.location,
        )
    }

    fun map(dto: UnconfirmedSession): TdApi.UnconfirmedSession {
        return TdApi.UnconfirmedSession(
            id = dto.id,
            logInDate = dto.logInDate,
            deviceModel = dto.deviceModel,
            location = dto.location,
        )
    }

    fun map(dto: TdApi.UnreadReaction): UnreadReaction {
        return UnreadReaction(
            type = map(dto.type),
            senderId = map(dto.senderId),
            isBig = dto.isBig,
        )
    }

    fun map(dto: UnreadReaction): TdApi.UnreadReaction {
        return TdApi.UnreadReaction(
            type = map(dto.type),
            senderId = map(dto.senderId),
            isBig = dto.isBig,
        )
    }

    fun map(dto: TdApi.Update): Update {
        when (dto) {
            is TdApi.UpdateAuthorizationState -> return map(dto)
            is TdApi.UpdateNewMessage -> return map(dto)
            is TdApi.UpdateMessageSendAcknowledged -> return map(dto)
            is TdApi.UpdateMessageSendSucceeded -> return map(dto)
            is TdApi.UpdateMessageSendFailed -> return map(dto)
            is TdApi.UpdateMessageContent -> return map(dto)
            is TdApi.UpdateMessageEdited -> return map(dto)
            is TdApi.UpdateMessageIsPinned -> return map(dto)
            is TdApi.UpdateMessageInteractionInfo -> return map(dto)
            is TdApi.UpdateMessageContentOpened -> return map(dto)
            is TdApi.UpdateMessageMentionRead -> return map(dto)
            is TdApi.UpdateMessageUnreadReactions -> return map(dto)
            is TdApi.UpdateMessageFactCheck -> return map(dto)
            is TdApi.UpdateMessageLiveLocationViewed -> return map(dto)
            is TdApi.UpdateVideoPublished -> return map(dto)
            is TdApi.UpdateNewChat -> return map(dto)
            is TdApi.UpdateChatTitle -> return map(dto)
            is TdApi.UpdateChatPhoto -> return map(dto)
            is TdApi.UpdateChatAccentColors -> return map(dto)
            is TdApi.UpdateChatPermissions -> return map(dto)
            is TdApi.UpdateChatLastMessage -> return map(dto)
            is TdApi.UpdateChatPosition -> return map(dto)
            is TdApi.UpdateChatAddedToList -> return map(dto)
            is TdApi.UpdateChatRemovedFromList -> return map(dto)
            is TdApi.UpdateChatReadInbox -> return map(dto)
            is TdApi.UpdateChatReadOutbox -> return map(dto)
            is TdApi.UpdateChatActionBar -> return map(dto)
            is TdApi.UpdateChatBusinessBotManageBar -> return map(dto)
            is TdApi.UpdateChatAvailableReactions -> return map(dto)
            is TdApi.UpdateChatDraftMessage -> return map(dto)
            is TdApi.UpdateChatEmojiStatus -> return map(dto)
            is TdApi.UpdateChatMessageSender -> return map(dto)
            is TdApi.UpdateChatMessageAutoDeleteTime -> return map(dto)
            is TdApi.UpdateChatNotificationSettings -> return map(dto)
            is TdApi.UpdateChatPendingJoinRequests -> return map(dto)
            is TdApi.UpdateChatReplyMarkup -> return map(dto)
            is TdApi.UpdateChatBackground -> return map(dto)
            is TdApi.UpdateChatTheme -> return map(dto)
            is TdApi.UpdateChatUnreadMentionCount -> return map(dto)
            is TdApi.UpdateChatUnreadReactionCount -> return map(dto)
            is TdApi.UpdateChatVideoChat -> return map(dto)
            is TdApi.UpdateChatDefaultDisableNotification -> return map(dto)
            is TdApi.UpdateChatHasProtectedContent -> return map(dto)
            is TdApi.UpdateChatIsTranslatable -> return map(dto)
            is TdApi.UpdateChatIsMarkedAsUnread -> return map(dto)
            is TdApi.UpdateChatViewAsTopics -> return map(dto)
            is TdApi.UpdateChatBlockList -> return map(dto)
            is TdApi.UpdateChatHasScheduledMessages -> return map(dto)
            is TdApi.UpdateChatFolders -> return map(dto)
            is TdApi.UpdateChatOnlineMemberCount -> return map(dto)
            is TdApi.UpdateSavedMessagesTopic -> return map(dto)
            is TdApi.UpdateSavedMessagesTopicCount -> return map(dto)
            is TdApi.UpdateDirectMessagesChatTopic -> return map(dto)
            is TdApi.UpdateTopicMessageCount -> return map(dto)
            is TdApi.UpdateQuickReplyShortcut -> return map(dto)
            is TdApi.UpdateQuickReplyShortcutDeleted -> return map(dto)
            is TdApi.UpdateQuickReplyShortcuts -> return map(dto)
            is TdApi.UpdateQuickReplyShortcutMessages -> return map(dto)
            is TdApi.UpdateForumTopicInfo -> return map(dto)
            is TdApi.UpdateForumTopic -> return map(dto)
            is TdApi.UpdateScopeNotificationSettings -> return map(dto)
            is TdApi.UpdateReactionNotificationSettings -> return map(dto)
            is TdApi.UpdateNotification -> return map(dto)
            is TdApi.UpdateNotificationGroup -> return map(dto)
            is TdApi.UpdateActiveNotifications -> return map(dto)
            is TdApi.UpdateHavePendingNotifications -> return map(dto)
            is TdApi.UpdateDeleteMessages -> return map(dto)
            is TdApi.UpdateChatAction -> return map(dto)
            is TdApi.UpdateUserStatus -> return map(dto)
            is TdApi.UpdateUser -> return map(dto)
            is TdApi.UpdateBasicGroup -> return map(dto)
            is TdApi.UpdateSupergroup -> return map(dto)
            is TdApi.UpdateSecretChat -> return map(dto)
            is TdApi.UpdateUserFullInfo -> return map(dto)
            is TdApi.UpdateBasicGroupFullInfo -> return map(dto)
            is TdApi.UpdateSupergroupFullInfo -> return map(dto)
            is TdApi.UpdateServiceNotification -> return map(dto)
            is TdApi.UpdateFile -> return map(dto)
            is TdApi.UpdateFileGenerationStart -> return map(dto)
            is TdApi.UpdateFileGenerationStop -> return map(dto)
            is TdApi.UpdateFileDownloads -> return map(dto)
            is TdApi.UpdateFileAddedToDownloads -> return map(dto)
            is TdApi.UpdateFileDownload -> return map(dto)
            is TdApi.UpdateFileRemovedFromDownloads -> return map(dto)
            is TdApi.UpdateApplicationVerificationRequired -> return map(dto)
            is TdApi.UpdateApplicationRecaptchaVerificationRequired -> return map(dto)
            is TdApi.UpdateCall -> return map(dto)
            is TdApi.UpdateGroupCall -> return map(dto)
            is TdApi.UpdateGroupCallParticipant -> return map(dto)
            is TdApi.UpdateGroupCallParticipants -> return map(dto)
            is TdApi.UpdateGroupCallVerificationState -> return map(dto)
            is TdApi.UpdateNewCallSignalingData -> return map(dto)
            is TdApi.UpdateUserPrivacySettingRules -> return map(dto)
            is TdApi.UpdateUnreadMessageCount -> return map(dto)
            is TdApi.UpdateUnreadChatCount -> return map(dto)
            is TdApi.UpdateStory -> return map(dto)
            is TdApi.UpdateStoryDeleted -> return map(dto)
            is TdApi.UpdateStoryPostSucceeded -> return map(dto)
            is TdApi.UpdateStoryPostFailed -> return map(dto)
            is TdApi.UpdateChatActiveStories -> return map(dto)
            is TdApi.UpdateStoryListChatCount -> return map(dto)
            is TdApi.UpdateStoryStealthMode -> return map(dto)
            is TdApi.UpdateOption -> return map(dto)
            is TdApi.UpdateStickerSet -> return map(dto)
            is TdApi.UpdateInstalledStickerSets -> return map(dto)
            is TdApi.UpdateTrendingStickerSets -> return map(dto)
            is TdApi.UpdateRecentStickers -> return map(dto)
            is TdApi.UpdateFavoriteStickers -> return map(dto)
            is TdApi.UpdateSavedAnimations -> return map(dto)
            is TdApi.UpdateSavedNotificationSounds -> return map(dto)
            is TdApi.UpdateDefaultBackground -> return map(dto)
            is TdApi.UpdateChatThemes -> return map(dto)
            is TdApi.UpdateAccentColors -> return map(dto)
            is TdApi.UpdateProfileAccentColors -> return map(dto)
            is TdApi.UpdateLanguagePackStrings -> return map(dto)
            is TdApi.UpdateConnectionState -> return map(dto)
            is TdApi.UpdateFreezeState -> return map(dto)
            is TdApi.UpdateTermsOfService -> return map(dto)
            is TdApi.UpdateUnconfirmedSession -> return map(dto)
            is TdApi.UpdateAttachmentMenuBots -> return map(dto)
            is TdApi.UpdateWebAppMessageSent -> return map(dto)
            is TdApi.UpdateActiveEmojiReactions -> return map(dto)
            is TdApi.UpdateAvailableMessageEffects -> return map(dto)
            is TdApi.UpdateDefaultReactionType -> return map(dto)
            is TdApi.UpdateDefaultPaidReactionType -> return map(dto)
            is TdApi.UpdateSavedMessagesTags -> return map(dto)
            is TdApi.UpdateActiveLiveLocationMessages -> return map(dto)
            is TdApi.UpdateOwnedStarCount -> return map(dto)
            is TdApi.UpdateChatRevenueAmount -> return map(dto)
            is TdApi.UpdateStarRevenueStatus -> return map(dto)
            is TdApi.UpdateSpeechRecognitionTrial -> return map(dto)
            is TdApi.UpdateDiceEmojis -> return map(dto)
            is TdApi.UpdateAnimatedEmojiMessageClicked -> return map(dto)
            is TdApi.UpdateAnimationSearchParameters -> return map(dto)
            is TdApi.UpdateSuggestedActions -> return map(dto)
            is TdApi.UpdateSpeedLimitNotification -> return map(dto)
            is TdApi.UpdateContactCloseBirthdays -> return map(dto)
            is TdApi.UpdateAutosaveSettings -> return map(dto)
            is TdApi.UpdateBusinessConnection -> return map(dto)
            is TdApi.UpdateNewBusinessMessage -> return map(dto)
            is TdApi.UpdateBusinessMessageEdited -> return map(dto)
            is TdApi.UpdateBusinessMessagesDeleted -> return map(dto)
            is TdApi.UpdateNewInlineQuery -> return map(dto)
            is TdApi.UpdateNewChosenInlineResult -> return map(dto)
            is TdApi.UpdateNewCallbackQuery -> return map(dto)
            is TdApi.UpdateNewInlineCallbackQuery -> return map(dto)
            is TdApi.UpdateNewBusinessCallbackQuery -> return map(dto)
            is TdApi.UpdateNewShippingQuery -> return map(dto)
            is TdApi.UpdateNewPreCheckoutQuery -> return map(dto)
            is TdApi.UpdateNewCustomEvent -> return map(dto)
            is TdApi.UpdateNewCustomQuery -> return map(dto)
            is TdApi.UpdatePoll -> return map(dto)
            is TdApi.UpdatePollAnswer -> return map(dto)
            is TdApi.UpdateChatMember -> return map(dto)
            is TdApi.UpdateNewChatJoinRequest -> return map(dto)
            is TdApi.UpdateChatBoost -> return map(dto)
            is TdApi.UpdateMessageReaction -> return map(dto)
            is TdApi.UpdateMessageReactions -> return map(dto)
            is TdApi.UpdatePaidMediaPurchased -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.UpdateAuthorizationState): UpdateAuthorizationState {
        return UpdateAuthorizationState(
            authorizationState = map(dto.authorizationState),
        )
    }

    fun map(dto: TdApi.UpdateNewMessage): UpdateNewMessage {
        return UpdateNewMessage(
            message = map(dto.message),
        )
    }

    fun map(dto: TdApi.UpdateMessageSendAcknowledged): UpdateMessageSendAcknowledged {
        return UpdateMessageSendAcknowledged(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: TdApi.UpdateMessageSendSucceeded): UpdateMessageSendSucceeded {
        return UpdateMessageSendSucceeded(
            message = map(dto.message),
            oldMessageId = dto.oldMessageId,
        )
    }

    fun map(dto: TdApi.UpdateMessageSendFailed): UpdateMessageSendFailed {
        return UpdateMessageSendFailed(
            message = map(dto.message),
            oldMessageId = dto.oldMessageId,
            error = map(dto.error),
        )
    }

    fun map(dto: TdApi.UpdateMessageContent): UpdateMessageContent {
        return UpdateMessageContent(
            chatId = dto.chatId,
            messageId = dto.messageId,
            newContent = map(dto.newContent),
        )
    }

    fun map(dto: TdApi.UpdateMessageEdited): UpdateMessageEdited {
        return UpdateMessageEdited(
            chatId = dto.chatId,
            messageId = dto.messageId,
            editDate = dto.editDate,
            replyMarkup = dto.replyMarkup?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateMessageIsPinned): UpdateMessageIsPinned {
        return UpdateMessageIsPinned(
            chatId = dto.chatId,
            messageId = dto.messageId,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: TdApi.UpdateMessageInteractionInfo): UpdateMessageInteractionInfo {
        return UpdateMessageInteractionInfo(
            chatId = dto.chatId,
            messageId = dto.messageId,
            interactionInfo = dto.interactionInfo?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateMessageContentOpened): UpdateMessageContentOpened {
        return UpdateMessageContentOpened(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: TdApi.UpdateMessageMentionRead): UpdateMessageMentionRead {
        return UpdateMessageMentionRead(
            chatId = dto.chatId,
            messageId = dto.messageId,
            unreadMentionCount = dto.unreadMentionCount,
        )
    }

    fun map(dto: TdApi.UpdateMessageUnreadReactions): UpdateMessageUnreadReactions {
        return UpdateMessageUnreadReactions(
            chatId = dto.chatId,
            messageId = dto.messageId,
            unreadReactions = dto.unreadReactions.mapArray { map(it) },
            unreadReactionCount = dto.unreadReactionCount,
        )
    }

    fun map(dto: TdApi.UpdateMessageFactCheck): UpdateMessageFactCheck {
        return UpdateMessageFactCheck(
            chatId = dto.chatId,
            messageId = dto.messageId,
            factCheck = map(dto.factCheck),
        )
    }

    fun map(dto: TdApi.UpdateMessageLiveLocationViewed): UpdateMessageLiveLocationViewed {
        return UpdateMessageLiveLocationViewed(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: TdApi.UpdateVideoPublished): UpdateVideoPublished {
        return UpdateVideoPublished(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: TdApi.UpdateNewChat): UpdateNewChat {
        return UpdateNewChat(
            chat = map(dto.chat),
        )
    }

    fun map(dto: TdApi.UpdateChatTitle): UpdateChatTitle {
        return UpdateChatTitle(
            chatId = dto.chatId,
            title = dto.title,
        )
    }

    fun map(dto: TdApi.UpdateChatPhoto): UpdateChatPhoto {
        return UpdateChatPhoto(
            chatId = dto.chatId,
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateChatAccentColors): UpdateChatAccentColors {
        return UpdateChatAccentColors(
            chatId = dto.chatId,
            accentColorId = dto.accentColorId,
            backgroundCustomEmojiId = dto.backgroundCustomEmojiId,
            profileAccentColorId = dto.profileAccentColorId,
            profileBackgroundCustomEmojiId = dto.profileBackgroundCustomEmojiId,
        )
    }

    fun map(dto: TdApi.UpdateChatPermissions): UpdateChatPermissions {
        return UpdateChatPermissions(
            chatId = dto.chatId,
            permissions = map(dto.permissions),
        )
    }

    fun map(dto: TdApi.UpdateChatLastMessage): UpdateChatLastMessage {
        return UpdateChatLastMessage(
            chatId = dto.chatId,
            lastMessage = dto.lastMessage?.let { map(it) },
            positions = dto.positions.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateChatPosition): UpdateChatPosition {
        return UpdateChatPosition(
            chatId = dto.chatId,
            position = map(dto.position),
        )
    }

    fun map(dto: TdApi.UpdateChatAddedToList): UpdateChatAddedToList {
        return UpdateChatAddedToList(
            chatId = dto.chatId,
            chatList = map(dto.chatList),
        )
    }

    fun map(dto: TdApi.UpdateChatRemovedFromList): UpdateChatRemovedFromList {
        return UpdateChatRemovedFromList(
            chatId = dto.chatId,
            chatList = map(dto.chatList),
        )
    }

    fun map(dto: TdApi.UpdateChatReadInbox): UpdateChatReadInbox {
        return UpdateChatReadInbox(
            chatId = dto.chatId,
            lastReadInboxMessageId = dto.lastReadInboxMessageId,
            unreadCount = dto.unreadCount,
        )
    }

    fun map(dto: TdApi.UpdateChatReadOutbox): UpdateChatReadOutbox {
        return UpdateChatReadOutbox(
            chatId = dto.chatId,
            lastReadOutboxMessageId = dto.lastReadOutboxMessageId,
        )
    }

    fun map(dto: TdApi.UpdateChatActionBar): UpdateChatActionBar {
        return UpdateChatActionBar(
            chatId = dto.chatId,
            actionBar = dto.actionBar?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateChatBusinessBotManageBar): UpdateChatBusinessBotManageBar {
        return UpdateChatBusinessBotManageBar(
            chatId = dto.chatId,
            businessBotManageBar = dto.businessBotManageBar?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateChatAvailableReactions): UpdateChatAvailableReactions {
        return UpdateChatAvailableReactions(
            chatId = dto.chatId,
            availableReactions = map(dto.availableReactions),
        )
    }

    fun map(dto: TdApi.UpdateChatDraftMessage): UpdateChatDraftMessage {
        return UpdateChatDraftMessage(
            chatId = dto.chatId,
            draftMessage = dto.draftMessage?.let { map(it) },
            positions = dto.positions.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateChatEmojiStatus): UpdateChatEmojiStatus {
        return UpdateChatEmojiStatus(
            chatId = dto.chatId,
            emojiStatus = dto.emojiStatus?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateChatMessageSender): UpdateChatMessageSender {
        return UpdateChatMessageSender(
            chatId = dto.chatId,
            messageSenderId = dto.messageSenderId?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateChatMessageAutoDeleteTime): UpdateChatMessageAutoDeleteTime {
        return UpdateChatMessageAutoDeleteTime(
            chatId = dto.chatId,
            messageAutoDeleteTime = dto.messageAutoDeleteTime,
        )
    }

    fun map(dto: TdApi.UpdateChatNotificationSettings): UpdateChatNotificationSettings {
        return UpdateChatNotificationSettings(
            chatId = dto.chatId,
            notificationSettings = map(dto.notificationSettings),
        )
    }

    fun map(dto: TdApi.UpdateChatPendingJoinRequests): UpdateChatPendingJoinRequests {
        return UpdateChatPendingJoinRequests(
            chatId = dto.chatId,
            pendingJoinRequests = dto.pendingJoinRequests?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateChatReplyMarkup): UpdateChatReplyMarkup {
        return UpdateChatReplyMarkup(
            chatId = dto.chatId,
            replyMarkupMessageId = dto.replyMarkupMessageId,
        )
    }

    fun map(dto: TdApi.UpdateChatBackground): UpdateChatBackground {
        return UpdateChatBackground(
            chatId = dto.chatId,
            background = dto.background?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateChatTheme): UpdateChatTheme {
        return UpdateChatTheme(
            chatId = dto.chatId,
            themeName = dto.themeName,
        )
    }

    fun map(dto: TdApi.UpdateChatUnreadMentionCount): UpdateChatUnreadMentionCount {
        return UpdateChatUnreadMentionCount(
            chatId = dto.chatId,
            unreadMentionCount = dto.unreadMentionCount,
        )
    }

    fun map(dto: TdApi.UpdateChatUnreadReactionCount): UpdateChatUnreadReactionCount {
        return UpdateChatUnreadReactionCount(
            chatId = dto.chatId,
            unreadReactionCount = dto.unreadReactionCount,
        )
    }

    fun map(dto: TdApi.UpdateChatVideoChat): UpdateChatVideoChat {
        return UpdateChatVideoChat(
            chatId = dto.chatId,
            videoChat = map(dto.videoChat),
        )
    }

    fun map(dto: TdApi.UpdateChatDefaultDisableNotification): UpdateChatDefaultDisableNotification {
        return UpdateChatDefaultDisableNotification(
            chatId = dto.chatId,
            defaultDisableNotification = dto.defaultDisableNotification,
        )
    }

    fun map(dto: TdApi.UpdateChatHasProtectedContent): UpdateChatHasProtectedContent {
        return UpdateChatHasProtectedContent(
            chatId = dto.chatId,
            hasProtectedContent = dto.hasProtectedContent,
        )
    }

    fun map(dto: TdApi.UpdateChatIsTranslatable): UpdateChatIsTranslatable {
        return UpdateChatIsTranslatable(
            chatId = dto.chatId,
            isTranslatable = dto.isTranslatable,
        )
    }

    fun map(dto: TdApi.UpdateChatIsMarkedAsUnread): UpdateChatIsMarkedAsUnread {
        return UpdateChatIsMarkedAsUnread(
            chatId = dto.chatId,
            isMarkedAsUnread = dto.isMarkedAsUnread,
        )
    }

    fun map(dto: TdApi.UpdateChatViewAsTopics): UpdateChatViewAsTopics {
        return UpdateChatViewAsTopics(
            chatId = dto.chatId,
            viewAsTopics = dto.viewAsTopics,
        )
    }

    fun map(dto: TdApi.UpdateChatBlockList): UpdateChatBlockList {
        return UpdateChatBlockList(
            chatId = dto.chatId,
            blockList = dto.blockList?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateChatHasScheduledMessages): UpdateChatHasScheduledMessages {
        return UpdateChatHasScheduledMessages(
            chatId = dto.chatId,
            hasScheduledMessages = dto.hasScheduledMessages,
        )
    }

    fun map(dto: TdApi.UpdateChatFolders): UpdateChatFolders {
        return UpdateChatFolders(
            chatFolders = dto.chatFolders.mapArray { map(it) },
            mainChatListPosition = dto.mainChatListPosition,
            areTagsEnabled = dto.areTagsEnabled,
        )
    }

    fun map(dto: TdApi.UpdateChatOnlineMemberCount): UpdateChatOnlineMemberCount {
        return UpdateChatOnlineMemberCount(
            chatId = dto.chatId,
            onlineMemberCount = dto.onlineMemberCount,
        )
    }

    fun map(dto: TdApi.UpdateSavedMessagesTopic): UpdateSavedMessagesTopic {
        return UpdateSavedMessagesTopic(
            topic = map(dto.topic),
        )
    }

    fun map(dto: TdApi.UpdateSavedMessagesTopicCount): UpdateSavedMessagesTopicCount {
        return UpdateSavedMessagesTopicCount(
            topicCount = dto.topicCount,
        )
    }

    fun map(dto: TdApi.UpdateDirectMessagesChatTopic): UpdateDirectMessagesChatTopic {
        return UpdateDirectMessagesChatTopic(
            topic = map(dto.topic),
        )
    }

    fun map(dto: TdApi.UpdateTopicMessageCount): UpdateTopicMessageCount {
        return UpdateTopicMessageCount(
            chatId = dto.chatId,
            topicId = map(dto.topicId),
            messageCount = dto.messageCount,
        )
    }

    fun map(dto: TdApi.UpdateQuickReplyShortcut): UpdateQuickReplyShortcut {
        return UpdateQuickReplyShortcut(
            shortcut = map(dto.shortcut),
        )
    }

    fun map(dto: TdApi.UpdateQuickReplyShortcutDeleted): UpdateQuickReplyShortcutDeleted {
        return UpdateQuickReplyShortcutDeleted(
            shortcutId = dto.shortcutId,
        )
    }

    fun map(dto: TdApi.UpdateQuickReplyShortcuts): UpdateQuickReplyShortcuts {
        return UpdateQuickReplyShortcuts(
            shortcutIds = dto.shortcutIds,
        )
    }

    fun map(dto: TdApi.UpdateQuickReplyShortcutMessages): UpdateQuickReplyShortcutMessages {
        return UpdateQuickReplyShortcutMessages(
            shortcutId = dto.shortcutId,
            messages = dto.messages.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateForumTopicInfo): UpdateForumTopicInfo {
        return UpdateForumTopicInfo(
            info = map(dto.info),
        )
    }

    fun map(dto: TdApi.UpdateForumTopic): UpdateForumTopic {
        return UpdateForumTopic(
            chatId = dto.chatId,
            messageThreadId = dto.messageThreadId,
            isPinned = dto.isPinned,
            lastReadInboxMessageId = dto.lastReadInboxMessageId,
            lastReadOutboxMessageId = dto.lastReadOutboxMessageId,
            unreadMentionCount = dto.unreadMentionCount,
            unreadReactionCount = dto.unreadReactionCount,
            notificationSettings = map(dto.notificationSettings),
        )
    }

    fun map(dto: TdApi.UpdateScopeNotificationSettings): UpdateScopeNotificationSettings {
        return UpdateScopeNotificationSettings(
            scope = map(dto.scope),
            notificationSettings = map(dto.notificationSettings),
        )
    }

    fun map(dto: TdApi.UpdateReactionNotificationSettings): UpdateReactionNotificationSettings {
        return UpdateReactionNotificationSettings(
            notificationSettings = map(dto.notificationSettings),
        )
    }

    fun map(dto: TdApi.UpdateNotification): UpdateNotification {
        return UpdateNotification(
            notificationGroupId = dto.notificationGroupId,
            notification = map(dto.notification),
        )
    }

    fun map(dto: TdApi.UpdateNotificationGroup): UpdateNotificationGroup {
        return UpdateNotificationGroup(
            notificationGroupId = dto.notificationGroupId,
            type = map(dto.type),
            chatId = dto.chatId,
            notificationSettingsChatId = dto.notificationSettingsChatId,
            notificationSoundId = dto.notificationSoundId,
            totalCount = dto.totalCount,
            addedNotifications = dto.addedNotifications.mapArray { map(it) },
            removedNotificationIds = dto.removedNotificationIds,
        )
    }

    fun map(dto: TdApi.UpdateActiveNotifications): UpdateActiveNotifications {
        return UpdateActiveNotifications(
            groups = dto.groups.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateHavePendingNotifications): UpdateHavePendingNotifications {
        return UpdateHavePendingNotifications(
            haveDelayedNotifications = dto.haveDelayedNotifications,
            haveUnreceivedNotifications = dto.haveUnreceivedNotifications,
        )
    }

    fun map(dto: TdApi.UpdateDeleteMessages): UpdateDeleteMessages {
        return UpdateDeleteMessages(
            chatId = dto.chatId,
            messageIds = dto.messageIds,
            isPermanent = dto.isPermanent,
            fromCache = dto.fromCache,
        )
    }

    fun map(dto: TdApi.UpdateChatAction): UpdateChatAction {
        return UpdateChatAction(
            chatId = dto.chatId,
            messageThreadId = dto.messageThreadId,
            senderId = map(dto.senderId),
            action = map(dto.action),
        )
    }

    fun map(dto: TdApi.UpdateUserStatus): UpdateUserStatus {
        return UpdateUserStatus(
            userId = dto.userId,
            status = map(dto.status),
        )
    }

    fun map(dto: TdApi.UpdateUser): UpdateUser {
        return UpdateUser(
            user = map(dto.user),
        )
    }

    fun map(dto: TdApi.UpdateBasicGroup): UpdateBasicGroup {
        return UpdateBasicGroup(
            basicGroup = map(dto.basicGroup),
        )
    }

    fun map(dto: TdApi.UpdateSupergroup): UpdateSupergroup {
        return UpdateSupergroup(
            supergroup = map(dto.supergroup),
        )
    }

    fun map(dto: TdApi.UpdateSecretChat): UpdateSecretChat {
        return UpdateSecretChat(
            secretChat = map(dto.secretChat),
        )
    }

    fun map(dto: TdApi.UpdateUserFullInfo): UpdateUserFullInfo {
        return UpdateUserFullInfo(
            userId = dto.userId,
            userFullInfo = map(dto.userFullInfo),
        )
    }

    fun map(dto: TdApi.UpdateBasicGroupFullInfo): UpdateBasicGroupFullInfo {
        return UpdateBasicGroupFullInfo(
            basicGroupId = dto.basicGroupId,
            basicGroupFullInfo = map(dto.basicGroupFullInfo),
        )
    }

    fun map(dto: TdApi.UpdateSupergroupFullInfo): UpdateSupergroupFullInfo {
        return UpdateSupergroupFullInfo(
            supergroupId = dto.supergroupId,
            supergroupFullInfo = map(dto.supergroupFullInfo),
        )
    }

    fun map(dto: TdApi.UpdateServiceNotification): UpdateServiceNotification {
        return UpdateServiceNotification(
            type = dto.type,
            content = map(dto.content),
        )
    }

    fun map(dto: TdApi.UpdateFile): UpdateFile {
        return UpdateFile(
            file = map(dto.file),
        )
    }

    fun map(dto: TdApi.UpdateFileGenerationStart): UpdateFileGenerationStart {
        return UpdateFileGenerationStart(
            generationId = dto.generationId,
            originalPath = dto.originalPath,
            destinationPath = dto.destinationPath,
            conversion = dto.conversion,
        )
    }

    fun map(dto: TdApi.UpdateFileGenerationStop): UpdateFileGenerationStop {
        return UpdateFileGenerationStop(
            generationId = dto.generationId,
        )
    }

    fun map(dto: TdApi.UpdateFileDownloads): UpdateFileDownloads {
        return UpdateFileDownloads(
            totalSize = dto.totalSize,
            totalCount = dto.totalCount,
            downloadedSize = dto.downloadedSize,
        )
    }

    fun map(dto: TdApi.UpdateFileAddedToDownloads): UpdateFileAddedToDownloads {
        return UpdateFileAddedToDownloads(
            fileDownload = map(dto.fileDownload),
            counts = map(dto.counts),
        )
    }

    fun map(dto: TdApi.UpdateFileDownload): UpdateFileDownload {
        return UpdateFileDownload(
            fileId = dto.fileId,
            completeDate = dto.completeDate,
            isPaused = dto.isPaused,
            counts = map(dto.counts),
        )
    }

    fun map(dto: TdApi.UpdateFileRemovedFromDownloads): UpdateFileRemovedFromDownloads {
        return UpdateFileRemovedFromDownloads(
            fileId = dto.fileId,
            counts = map(dto.counts),
        )
    }

    fun map(dto: TdApi.UpdateApplicationVerificationRequired): UpdateApplicationVerificationRequired {
        return UpdateApplicationVerificationRequired(
            verificationId = dto.verificationId,
            nonce = dto.nonce,
            cloudProjectNumber = dto.cloudProjectNumber,
        )
    }

    fun map(dto: TdApi.UpdateApplicationRecaptchaVerificationRequired): UpdateApplicationRecaptchaVerificationRequired {
        return UpdateApplicationRecaptchaVerificationRequired(
            verificationId = dto.verificationId,
            action = dto.action,
            recaptchaKeyId = dto.recaptchaKeyId,
        )
    }

    fun map(dto: TdApi.UpdateCall): UpdateCall {
        return UpdateCall(
            call = map(dto.call),
        )
    }

    fun map(dto: TdApi.UpdateGroupCall): UpdateGroupCall {
        return UpdateGroupCall(
            groupCall = map(dto.groupCall),
        )
    }

    fun map(dto: TdApi.UpdateGroupCallParticipant): UpdateGroupCallParticipant {
        return UpdateGroupCallParticipant(
            groupCallId = dto.groupCallId,
            participant = map(dto.participant),
        )
    }

    fun map(dto: TdApi.UpdateGroupCallParticipants): UpdateGroupCallParticipants {
        return UpdateGroupCallParticipants(
            groupCallId = dto.groupCallId,
            participantUserIds = dto.participantUserIds,
        )
    }

    fun map(dto: TdApi.UpdateGroupCallVerificationState): UpdateGroupCallVerificationState {
        return UpdateGroupCallVerificationState(
            groupCallId = dto.groupCallId,
            generation = dto.generation,
            emojis = dto.emojis,
        )
    }

    fun map(dto: TdApi.UpdateNewCallSignalingData): UpdateNewCallSignalingData {
        return UpdateNewCallSignalingData(
            callId = dto.callId,
            data = dto.data,
        )
    }

    fun map(dto: TdApi.UpdateUserPrivacySettingRules): UpdateUserPrivacySettingRules {
        return UpdateUserPrivacySettingRules(
            setting = map(dto.setting),
            rules = map(dto.rules),
        )
    }

    fun map(dto: TdApi.UpdateUnreadMessageCount): UpdateUnreadMessageCount {
        return UpdateUnreadMessageCount(
            chatList = map(dto.chatList),
            unreadCount = dto.unreadCount,
            unreadUnmutedCount = dto.unreadUnmutedCount,
        )
    }

    fun map(dto: TdApi.UpdateUnreadChatCount): UpdateUnreadChatCount {
        return UpdateUnreadChatCount(
            chatList = map(dto.chatList),
            totalCount = dto.totalCount,
            unreadCount = dto.unreadCount,
            unreadUnmutedCount = dto.unreadUnmutedCount,
            markedAsUnreadCount = dto.markedAsUnreadCount,
            markedAsUnreadUnmutedCount = dto.markedAsUnreadUnmutedCount,
        )
    }

    fun map(dto: TdApi.UpdateStory): UpdateStory {
        return UpdateStory(
            story = map(dto.story),
        )
    }

    fun map(dto: TdApi.UpdateStoryDeleted): UpdateStoryDeleted {
        return UpdateStoryDeleted(
            storyPosterChatId = dto.storyPosterChatId,
            storyId = dto.storyId,
        )
    }

    fun map(dto: TdApi.UpdateStoryPostSucceeded): UpdateStoryPostSucceeded {
        return UpdateStoryPostSucceeded(
            story = map(dto.story),
            oldStoryId = dto.oldStoryId,
        )
    }

    fun map(dto: TdApi.UpdateStoryPostFailed): UpdateStoryPostFailed {
        return UpdateStoryPostFailed(
            story = map(dto.story),
            error = map(dto.error),
            errorType = dto.errorType?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateChatActiveStories): UpdateChatActiveStories {
        return UpdateChatActiveStories(
            activeStories = map(dto.activeStories),
        )
    }

    fun map(dto: TdApi.UpdateStoryListChatCount): UpdateStoryListChatCount {
        return UpdateStoryListChatCount(
            storyList = map(dto.storyList),
            chatCount = dto.chatCount,
        )
    }

    fun map(dto: TdApi.UpdateStoryStealthMode): UpdateStoryStealthMode {
        return UpdateStoryStealthMode(
            activeUntilDate = dto.activeUntilDate,
            cooldownUntilDate = dto.cooldownUntilDate,
        )
    }

    fun map(dto: TdApi.UpdateOption): UpdateOption {
        return UpdateOption(
            name = dto.name,
            value = map(dto.value),
        )
    }

    fun map(dto: TdApi.UpdateStickerSet): UpdateStickerSet {
        return UpdateStickerSet(
            stickerSet = map(dto.stickerSet),
        )
    }

    fun map(dto: TdApi.UpdateInstalledStickerSets): UpdateInstalledStickerSets {
        return UpdateInstalledStickerSets(
            stickerType = map(dto.stickerType),
            stickerSetIds = dto.stickerSetIds,
        )
    }

    fun map(dto: TdApi.UpdateTrendingStickerSets): UpdateTrendingStickerSets {
        return UpdateTrendingStickerSets(
            stickerType = map(dto.stickerType),
            stickerSets = map(dto.stickerSets),
        )
    }

    fun map(dto: TdApi.UpdateRecentStickers): UpdateRecentStickers {
        return UpdateRecentStickers(
            isAttached = dto.isAttached,
            stickerIds = dto.stickerIds,
        )
    }

    fun map(dto: TdApi.UpdateFavoriteStickers): UpdateFavoriteStickers {
        return UpdateFavoriteStickers(
            stickerIds = dto.stickerIds,
        )
    }

    fun map(dto: TdApi.UpdateSavedAnimations): UpdateSavedAnimations {
        return UpdateSavedAnimations(
            animationIds = dto.animationIds,
        )
    }

    fun map(dto: TdApi.UpdateSavedNotificationSounds): UpdateSavedNotificationSounds {
        return UpdateSavedNotificationSounds(
            notificationSoundIds = dto.notificationSoundIds,
        )
    }

    fun map(dto: TdApi.UpdateDefaultBackground): UpdateDefaultBackground {
        return UpdateDefaultBackground(
            forDarkTheme = dto.forDarkTheme,
            background = dto.background?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateChatThemes): UpdateChatThemes {
        return UpdateChatThemes(
            chatThemes = dto.chatThemes.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateAccentColors): UpdateAccentColors {
        return UpdateAccentColors(
            colors = dto.colors.mapArray { map(it) },
            availableAccentColorIds = dto.availableAccentColorIds,
        )
    }

    fun map(dto: TdApi.UpdateProfileAccentColors): UpdateProfileAccentColors {
        return UpdateProfileAccentColors(
            colors = dto.colors.mapArray { map(it) },
            availableAccentColorIds = dto.availableAccentColorIds,
        )
    }

    fun map(dto: TdApi.UpdateLanguagePackStrings): UpdateLanguagePackStrings {
        return UpdateLanguagePackStrings(
            localizationTarget = dto.localizationTarget,
            languagePackId = dto.languagePackId,
            strings = dto.strings.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateConnectionState): UpdateConnectionState {
        return UpdateConnectionState(
            state = map(dto.state),
        )
    }

    fun map(dto: TdApi.UpdateFreezeState): UpdateFreezeState {
        return UpdateFreezeState(
            isFrozen = dto.isFrozen,
            freezingDate = dto.freezingDate,
            deletionDate = dto.deletionDate,
            appealLink = dto.appealLink,
        )
    }

    fun map(dto: TdApi.UpdateTermsOfService): UpdateTermsOfService {
        return UpdateTermsOfService(
            termsOfServiceId = dto.termsOfServiceId,
            termsOfService = map(dto.termsOfService),
        )
    }

    fun map(dto: TdApi.UpdateUnconfirmedSession): UpdateUnconfirmedSession {
        return UpdateUnconfirmedSession(
            session = dto.session?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateAttachmentMenuBots): UpdateAttachmentMenuBots {
        return UpdateAttachmentMenuBots(
            bots = dto.bots.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateWebAppMessageSent): UpdateWebAppMessageSent {
        return UpdateWebAppMessageSent(
            webAppLaunchId = dto.webAppLaunchId,
        )
    }

    fun map(dto: TdApi.UpdateActiveEmojiReactions): UpdateActiveEmojiReactions {
        return UpdateActiveEmojiReactions(
            emojis = dto.emojis,
        )
    }

    fun map(dto: TdApi.UpdateAvailableMessageEffects): UpdateAvailableMessageEffects {
        return UpdateAvailableMessageEffects(
            reactionEffectIds = dto.reactionEffectIds,
            stickerEffectIds = dto.stickerEffectIds,
        )
    }

    fun map(dto: TdApi.UpdateDefaultReactionType): UpdateDefaultReactionType {
        return UpdateDefaultReactionType(
            reactionType = map(dto.reactionType),
        )
    }

    fun map(dto: TdApi.UpdateDefaultPaidReactionType): UpdateDefaultPaidReactionType {
        return UpdateDefaultPaidReactionType(
            type = map(dto.type),
        )
    }

    fun map(dto: TdApi.UpdateSavedMessagesTags): UpdateSavedMessagesTags {
        return UpdateSavedMessagesTags(
            savedMessagesTopicId = dto.savedMessagesTopicId,
            tags = map(dto.tags),
        )
    }

    fun map(dto: TdApi.UpdateActiveLiveLocationMessages): UpdateActiveLiveLocationMessages {
        return UpdateActiveLiveLocationMessages(
            messages = dto.messages.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateOwnedStarCount): UpdateOwnedStarCount {
        return UpdateOwnedStarCount(
            starAmount = map(dto.starAmount),
        )
    }

    fun map(dto: TdApi.UpdateChatRevenueAmount): UpdateChatRevenueAmount {
        return UpdateChatRevenueAmount(
            chatId = dto.chatId,
            revenueAmount = map(dto.revenueAmount),
        )
    }

    fun map(dto: TdApi.UpdateStarRevenueStatus): UpdateStarRevenueStatus {
        return UpdateStarRevenueStatus(
            ownerId = map(dto.ownerId),
            status = map(dto.status),
        )
    }

    fun map(dto: TdApi.UpdateSpeechRecognitionTrial): UpdateSpeechRecognitionTrial {
        return UpdateSpeechRecognitionTrial(
            maxMediaDuration = dto.maxMediaDuration,
            weeklyCount = dto.weeklyCount,
            leftCount = dto.leftCount,
            nextResetDate = dto.nextResetDate,
        )
    }

    fun map(dto: TdApi.UpdateDiceEmojis): UpdateDiceEmojis {
        return UpdateDiceEmojis(
            emojis = dto.emojis,
        )
    }

    fun map(dto: TdApi.UpdateAnimatedEmojiMessageClicked): UpdateAnimatedEmojiMessageClicked {
        return UpdateAnimatedEmojiMessageClicked(
            chatId = dto.chatId,
            messageId = dto.messageId,
            sticker = map(dto.sticker),
        )
    }

    fun map(dto: TdApi.UpdateAnimationSearchParameters): UpdateAnimationSearchParameters {
        return UpdateAnimationSearchParameters(
            provider = dto.provider,
            emojis = dto.emojis,
        )
    }

    fun map(dto: TdApi.UpdateSuggestedActions): UpdateSuggestedActions {
        return UpdateSuggestedActions(
            addedActions = dto.addedActions.mapArray { map(it) },
            removedActions = dto.removedActions.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateSpeedLimitNotification): UpdateSpeedLimitNotification {
        return UpdateSpeedLimitNotification(
            isUpload = dto.isUpload,
        )
    }

    fun map(dto: TdApi.UpdateContactCloseBirthdays): UpdateContactCloseBirthdays {
        return UpdateContactCloseBirthdays(
            closeBirthdayUsers = dto.closeBirthdayUsers.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateAutosaveSettings): UpdateAutosaveSettings {
        return UpdateAutosaveSettings(
            scope = map(dto.scope),
            settings = dto.settings?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateBusinessConnection): UpdateBusinessConnection {
        return UpdateBusinessConnection(
            connection = map(dto.connection),
        )
    }

    fun map(dto: TdApi.UpdateNewBusinessMessage): UpdateNewBusinessMessage {
        return UpdateNewBusinessMessage(
            connectionId = dto.connectionId,
            message = map(dto.message),
        )
    }

    fun map(dto: TdApi.UpdateBusinessMessageEdited): UpdateBusinessMessageEdited {
        return UpdateBusinessMessageEdited(
            connectionId = dto.connectionId,
            message = map(dto.message),
        )
    }

    fun map(dto: TdApi.UpdateBusinessMessagesDeleted): UpdateBusinessMessagesDeleted {
        return UpdateBusinessMessagesDeleted(
            connectionId = dto.connectionId,
            chatId = dto.chatId,
            messageIds = dto.messageIds,
        )
    }

    fun map(dto: TdApi.UpdateNewInlineQuery): UpdateNewInlineQuery {
        return UpdateNewInlineQuery(
            id = dto.id,
            senderUserId = dto.senderUserId,
            userLocation = dto.userLocation?.let { map(it) },
            chatType = dto.chatType?.let { map(it) },
            query = dto.query,
            offset = dto.offset,
        )
    }

    fun map(dto: TdApi.UpdateNewChosenInlineResult): UpdateNewChosenInlineResult {
        return UpdateNewChosenInlineResult(
            senderUserId = dto.senderUserId,
            userLocation = dto.userLocation?.let { map(it) },
            query = dto.query,
            resultId = dto.resultId,
            inlineMessageId = dto.inlineMessageId,
        )
    }

    fun map(dto: TdApi.UpdateNewCallbackQuery): UpdateNewCallbackQuery {
        return UpdateNewCallbackQuery(
            id = dto.id,
            senderUserId = dto.senderUserId,
            chatId = dto.chatId,
            messageId = dto.messageId,
            chatInstance = dto.chatInstance,
            payload = map(dto.payload),
        )
    }

    fun map(dto: TdApi.UpdateNewInlineCallbackQuery): UpdateNewInlineCallbackQuery {
        return UpdateNewInlineCallbackQuery(
            id = dto.id,
            senderUserId = dto.senderUserId,
            inlineMessageId = dto.inlineMessageId,
            chatInstance = dto.chatInstance,
            payload = map(dto.payload),
        )
    }

    fun map(dto: TdApi.UpdateNewBusinessCallbackQuery): UpdateNewBusinessCallbackQuery {
        return UpdateNewBusinessCallbackQuery(
            id = dto.id,
            senderUserId = dto.senderUserId,
            connectionId = dto.connectionId,
            message = map(dto.message),
            chatInstance = dto.chatInstance,
            payload = map(dto.payload),
        )
    }

    fun map(dto: TdApi.UpdateNewShippingQuery): UpdateNewShippingQuery {
        return UpdateNewShippingQuery(
            id = dto.id,
            senderUserId = dto.senderUserId,
            invoicePayload = dto.invoicePayload,
            shippingAddress = map(dto.shippingAddress),
        )
    }

    fun map(dto: TdApi.UpdateNewPreCheckoutQuery): UpdateNewPreCheckoutQuery {
        return UpdateNewPreCheckoutQuery(
            id = dto.id,
            senderUserId = dto.senderUserId,
            currency = dto.currency,
            totalAmount = dto.totalAmount,
            invoicePayload = dto.invoicePayload,
            shippingOptionId = dto.shippingOptionId,
            orderInfo = dto.orderInfo?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateNewCustomEvent): UpdateNewCustomEvent {
        return UpdateNewCustomEvent(
            event = dto.event,
        )
    }

    fun map(dto: TdApi.UpdateNewCustomQuery): UpdateNewCustomQuery {
        return UpdateNewCustomQuery(
            id = dto.id,
            data = dto.data,
            timeout = dto.timeout,
        )
    }

    fun map(dto: TdApi.UpdatePoll): UpdatePoll {
        return UpdatePoll(
            poll = map(dto.poll),
        )
    }

    fun map(dto: TdApi.UpdatePollAnswer): UpdatePollAnswer {
        return UpdatePollAnswer(
            pollId = dto.pollId,
            voterId = map(dto.voterId),
            optionIds = dto.optionIds,
        )
    }

    fun map(dto: TdApi.UpdateChatMember): UpdateChatMember {
        return UpdateChatMember(
            chatId = dto.chatId,
            actorUserId = dto.actorUserId,
            date = dto.date,
            inviteLink = dto.inviteLink?.let { map(it) },
            viaJoinRequest = dto.viaJoinRequest,
            viaChatFolderInviteLink = dto.viaChatFolderInviteLink,
            oldChatMember = map(dto.oldChatMember),
            newChatMember = map(dto.newChatMember),
        )
    }

    fun map(dto: TdApi.UpdateNewChatJoinRequest): UpdateNewChatJoinRequest {
        return UpdateNewChatJoinRequest(
            chatId = dto.chatId,
            request = map(dto.request),
            userChatId = dto.userChatId,
            inviteLink = dto.inviteLink?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateChatBoost): UpdateChatBoost {
        return UpdateChatBoost(
            chatId = dto.chatId,
            boost = map(dto.boost),
        )
    }

    fun map(dto: TdApi.UpdateMessageReaction): UpdateMessageReaction {
        return UpdateMessageReaction(
            chatId = dto.chatId,
            messageId = dto.messageId,
            actorId = map(dto.actorId),
            date = dto.date,
            oldReactionTypes = dto.oldReactionTypes.mapArray { map(it) },
            newReactionTypes = dto.newReactionTypes.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.UpdateMessageReactions): UpdateMessageReactions {
        return UpdateMessageReactions(
            chatId = dto.chatId,
            messageId = dto.messageId,
            date = dto.date,
            reactions = dto.reactions.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.UpdatePaidMediaPurchased): UpdatePaidMediaPurchased {
        return UpdatePaidMediaPurchased(
            userId = dto.userId,
            payload = dto.payload,
        )
    }

    fun map(dto: Update): TdApi.Update {
        when (dto) {
            is UpdateAuthorizationState -> return map(dto)
            is UpdateNewMessage -> return map(dto)
            is UpdateMessageSendAcknowledged -> return map(dto)
            is UpdateMessageSendSucceeded -> return map(dto)
            is UpdateMessageSendFailed -> return map(dto)
            is UpdateMessageContent -> return map(dto)
            is UpdateMessageEdited -> return map(dto)
            is UpdateMessageIsPinned -> return map(dto)
            is UpdateMessageInteractionInfo -> return map(dto)
            is UpdateMessageContentOpened -> return map(dto)
            is UpdateMessageMentionRead -> return map(dto)
            is UpdateMessageUnreadReactions -> return map(dto)
            is UpdateMessageFactCheck -> return map(dto)
            is UpdateMessageLiveLocationViewed -> return map(dto)
            is UpdateVideoPublished -> return map(dto)
            is UpdateNewChat -> return map(dto)
            is UpdateChatTitle -> return map(dto)
            is UpdateChatPhoto -> return map(dto)
            is UpdateChatAccentColors -> return map(dto)
            is UpdateChatPermissions -> return map(dto)
            is UpdateChatLastMessage -> return map(dto)
            is UpdateChatPosition -> return map(dto)
            is UpdateChatAddedToList -> return map(dto)
            is UpdateChatRemovedFromList -> return map(dto)
            is UpdateChatReadInbox -> return map(dto)
            is UpdateChatReadOutbox -> return map(dto)
            is UpdateChatActionBar -> return map(dto)
            is UpdateChatBusinessBotManageBar -> return map(dto)
            is UpdateChatAvailableReactions -> return map(dto)
            is UpdateChatDraftMessage -> return map(dto)
            is UpdateChatEmojiStatus -> return map(dto)
            is UpdateChatMessageSender -> return map(dto)
            is UpdateChatMessageAutoDeleteTime -> return map(dto)
            is UpdateChatNotificationSettings -> return map(dto)
            is UpdateChatPendingJoinRequests -> return map(dto)
            is UpdateChatReplyMarkup -> return map(dto)
            is UpdateChatBackground -> return map(dto)
            is UpdateChatTheme -> return map(dto)
            is UpdateChatUnreadMentionCount -> return map(dto)
            is UpdateChatUnreadReactionCount -> return map(dto)
            is UpdateChatVideoChat -> return map(dto)
            is UpdateChatDefaultDisableNotification -> return map(dto)
            is UpdateChatHasProtectedContent -> return map(dto)
            is UpdateChatIsTranslatable -> return map(dto)
            is UpdateChatIsMarkedAsUnread -> return map(dto)
            is UpdateChatViewAsTopics -> return map(dto)
            is UpdateChatBlockList -> return map(dto)
            is UpdateChatHasScheduledMessages -> return map(dto)
            is UpdateChatFolders -> return map(dto)
            is UpdateChatOnlineMemberCount -> return map(dto)
            is UpdateSavedMessagesTopic -> return map(dto)
            is UpdateSavedMessagesTopicCount -> return map(dto)
            is UpdateDirectMessagesChatTopic -> return map(dto)
            is UpdateTopicMessageCount -> return map(dto)
            is UpdateQuickReplyShortcut -> return map(dto)
            is UpdateQuickReplyShortcutDeleted -> return map(dto)
            is UpdateQuickReplyShortcuts -> return map(dto)
            is UpdateQuickReplyShortcutMessages -> return map(dto)
            is UpdateForumTopicInfo -> return map(dto)
            is UpdateForumTopic -> return map(dto)
            is UpdateScopeNotificationSettings -> return map(dto)
            is UpdateReactionNotificationSettings -> return map(dto)
            is UpdateNotification -> return map(dto)
            is UpdateNotificationGroup -> return map(dto)
            is UpdateActiveNotifications -> return map(dto)
            is UpdateHavePendingNotifications -> return map(dto)
            is UpdateDeleteMessages -> return map(dto)
            is UpdateChatAction -> return map(dto)
            is UpdateUserStatus -> return map(dto)
            is UpdateUser -> return map(dto)
            is UpdateBasicGroup -> return map(dto)
            is UpdateSupergroup -> return map(dto)
            is UpdateSecretChat -> return map(dto)
            is UpdateUserFullInfo -> return map(dto)
            is UpdateBasicGroupFullInfo -> return map(dto)
            is UpdateSupergroupFullInfo -> return map(dto)
            is UpdateServiceNotification -> return map(dto)
            is UpdateFile -> return map(dto)
            is UpdateFileGenerationStart -> return map(dto)
            is UpdateFileGenerationStop -> return map(dto)
            is UpdateFileDownloads -> return map(dto)
            is UpdateFileAddedToDownloads -> return map(dto)
            is UpdateFileDownload -> return map(dto)
            is UpdateFileRemovedFromDownloads -> return map(dto)
            is UpdateApplicationVerificationRequired -> return map(dto)
            is UpdateApplicationRecaptchaVerificationRequired -> return map(dto)
            is UpdateCall -> return map(dto)
            is UpdateGroupCall -> return map(dto)
            is UpdateGroupCallParticipant -> return map(dto)
            is UpdateGroupCallParticipants -> return map(dto)
            is UpdateGroupCallVerificationState -> return map(dto)
            is UpdateNewCallSignalingData -> return map(dto)
            is UpdateUserPrivacySettingRules -> return map(dto)
            is UpdateUnreadMessageCount -> return map(dto)
            is UpdateUnreadChatCount -> return map(dto)
            is UpdateStory -> return map(dto)
            is UpdateStoryDeleted -> return map(dto)
            is UpdateStoryPostSucceeded -> return map(dto)
            is UpdateStoryPostFailed -> return map(dto)
            is UpdateChatActiveStories -> return map(dto)
            is UpdateStoryListChatCount -> return map(dto)
            is UpdateStoryStealthMode -> return map(dto)
            is UpdateOption -> return map(dto)
            is UpdateStickerSet -> return map(dto)
            is UpdateInstalledStickerSets -> return map(dto)
            is UpdateTrendingStickerSets -> return map(dto)
            is UpdateRecentStickers -> return map(dto)
            is UpdateFavoriteStickers -> return map(dto)
            is UpdateSavedAnimations -> return map(dto)
            is UpdateSavedNotificationSounds -> return map(dto)
            is UpdateDefaultBackground -> return map(dto)
            is UpdateChatThemes -> return map(dto)
            is UpdateAccentColors -> return map(dto)
            is UpdateProfileAccentColors -> return map(dto)
            is UpdateLanguagePackStrings -> return map(dto)
            is UpdateConnectionState -> return map(dto)
            is UpdateFreezeState -> return map(dto)
            is UpdateTermsOfService -> return map(dto)
            is UpdateUnconfirmedSession -> return map(dto)
            is UpdateAttachmentMenuBots -> return map(dto)
            is UpdateWebAppMessageSent -> return map(dto)
            is UpdateActiveEmojiReactions -> return map(dto)
            is UpdateAvailableMessageEffects -> return map(dto)
            is UpdateDefaultReactionType -> return map(dto)
            is UpdateDefaultPaidReactionType -> return map(dto)
            is UpdateSavedMessagesTags -> return map(dto)
            is UpdateActiveLiveLocationMessages -> return map(dto)
            is UpdateOwnedStarCount -> return map(dto)
            is UpdateChatRevenueAmount -> return map(dto)
            is UpdateStarRevenueStatus -> return map(dto)
            is UpdateSpeechRecognitionTrial -> return map(dto)
            is UpdateDiceEmojis -> return map(dto)
            is UpdateAnimatedEmojiMessageClicked -> return map(dto)
            is UpdateAnimationSearchParameters -> return map(dto)
            is UpdateSuggestedActions -> return map(dto)
            is UpdateSpeedLimitNotification -> return map(dto)
            is UpdateContactCloseBirthdays -> return map(dto)
            is UpdateAutosaveSettings -> return map(dto)
            is UpdateBusinessConnection -> return map(dto)
            is UpdateNewBusinessMessage -> return map(dto)
            is UpdateBusinessMessageEdited -> return map(dto)
            is UpdateBusinessMessagesDeleted -> return map(dto)
            is UpdateNewInlineQuery -> return map(dto)
            is UpdateNewChosenInlineResult -> return map(dto)
            is UpdateNewCallbackQuery -> return map(dto)
            is UpdateNewInlineCallbackQuery -> return map(dto)
            is UpdateNewBusinessCallbackQuery -> return map(dto)
            is UpdateNewShippingQuery -> return map(dto)
            is UpdateNewPreCheckoutQuery -> return map(dto)
            is UpdateNewCustomEvent -> return map(dto)
            is UpdateNewCustomQuery -> return map(dto)
            is UpdatePoll -> return map(dto)
            is UpdatePollAnswer -> return map(dto)
            is UpdateChatMember -> return map(dto)
            is UpdateNewChatJoinRequest -> return map(dto)
            is UpdateChatBoost -> return map(dto)
            is UpdateMessageReaction -> return map(dto)
            is UpdateMessageReactions -> return map(dto)
            is UpdatePaidMediaPurchased -> return map(dto)
        }
    }

    fun map(dto: UpdateAuthorizationState): TdApi.UpdateAuthorizationState {
        return TdApi.UpdateAuthorizationState(
            authorizationState = map(dto.authorizationState),
        )
    }

    fun map(dto: UpdateNewMessage): TdApi.UpdateNewMessage {
        return TdApi.UpdateNewMessage(
            message = map(dto.message),
        )
    }

    fun map(dto: UpdateMessageSendAcknowledged): TdApi.UpdateMessageSendAcknowledged {
        return TdApi.UpdateMessageSendAcknowledged(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: UpdateMessageSendSucceeded): TdApi.UpdateMessageSendSucceeded {
        return TdApi.UpdateMessageSendSucceeded(
            message = map(dto.message),
            oldMessageId = dto.oldMessageId,
        )
    }

    fun map(dto: UpdateMessageSendFailed): TdApi.UpdateMessageSendFailed {
        return TdApi.UpdateMessageSendFailed(
            message = map(dto.message),
            oldMessageId = dto.oldMessageId,
            error = map(dto.error),
        )
    }

    fun map(dto: UpdateMessageContent): TdApi.UpdateMessageContent {
        return TdApi.UpdateMessageContent(
            chatId = dto.chatId,
            messageId = dto.messageId,
            newContent = map(dto.newContent),
        )
    }

    fun map(dto: UpdateMessageEdited): TdApi.UpdateMessageEdited {
        return TdApi.UpdateMessageEdited(
            chatId = dto.chatId,
            messageId = dto.messageId,
            editDate = dto.editDate,
            replyMarkup = dto.replyMarkup?.let { map(it) },
        )
    }

    fun map(dto: UpdateMessageIsPinned): TdApi.UpdateMessageIsPinned {
        return TdApi.UpdateMessageIsPinned(
            chatId = dto.chatId,
            messageId = dto.messageId,
            isPinned = dto.isPinned,
        )
    }

    fun map(dto: UpdateMessageInteractionInfo): TdApi.UpdateMessageInteractionInfo {
        return TdApi.UpdateMessageInteractionInfo(
            chatId = dto.chatId,
            messageId = dto.messageId,
            interactionInfo = dto.interactionInfo?.let { map(it) },
        )
    }

    fun map(dto: UpdateMessageContentOpened): TdApi.UpdateMessageContentOpened {
        return TdApi.UpdateMessageContentOpened(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: UpdateMessageMentionRead): TdApi.UpdateMessageMentionRead {
        return TdApi.UpdateMessageMentionRead(
            chatId = dto.chatId,
            messageId = dto.messageId,
            unreadMentionCount = dto.unreadMentionCount,
        )
    }

    fun map(dto: UpdateMessageUnreadReactions): TdApi.UpdateMessageUnreadReactions {
        return TdApi.UpdateMessageUnreadReactions(
            chatId = dto.chatId,
            messageId = dto.messageId,
            unreadReactions = dto.unreadReactions.mapArray { map(it) },
            unreadReactionCount = dto.unreadReactionCount,
        )
    }

    fun map(dto: UpdateMessageFactCheck): TdApi.UpdateMessageFactCheck {
        return TdApi.UpdateMessageFactCheck(
            chatId = dto.chatId,
            messageId = dto.messageId,
            factCheck = map(dto.factCheck),
        )
    }

    fun map(dto: UpdateMessageLiveLocationViewed): TdApi.UpdateMessageLiveLocationViewed {
        return TdApi.UpdateMessageLiveLocationViewed(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: UpdateVideoPublished): TdApi.UpdateVideoPublished {
        return TdApi.UpdateVideoPublished(
            chatId = dto.chatId,
            messageId = dto.messageId,
        )
    }

    fun map(dto: UpdateNewChat): TdApi.UpdateNewChat {
        return TdApi.UpdateNewChat(
            chat = map(dto.chat),
        )
    }

    fun map(dto: UpdateChatTitle): TdApi.UpdateChatTitle {
        return TdApi.UpdateChatTitle(
            chatId = dto.chatId,
            title = dto.title,
        )
    }

    fun map(dto: UpdateChatPhoto): TdApi.UpdateChatPhoto {
        return TdApi.UpdateChatPhoto(
            chatId = dto.chatId,
            photo = dto.photo?.let { map(it) },
        )
    }

    fun map(dto: UpdateChatAccentColors): TdApi.UpdateChatAccentColors {
        return TdApi.UpdateChatAccentColors(
            chatId = dto.chatId,
            accentColorId = dto.accentColorId,
            backgroundCustomEmojiId = dto.backgroundCustomEmojiId,
            profileAccentColorId = dto.profileAccentColorId,
            profileBackgroundCustomEmojiId = dto.profileBackgroundCustomEmojiId,
        )
    }

    fun map(dto: UpdateChatPermissions): TdApi.UpdateChatPermissions {
        return TdApi.UpdateChatPermissions(
            chatId = dto.chatId,
            permissions = map(dto.permissions),
        )
    }

    fun map(dto: UpdateChatLastMessage): TdApi.UpdateChatLastMessage {
        return TdApi.UpdateChatLastMessage(
            chatId = dto.chatId,
            lastMessage = dto.lastMessage?.let { map(it) },
            positions = dto.positions.mapArray { map(it) },
        )
    }

    fun map(dto: UpdateChatPosition): TdApi.UpdateChatPosition {
        return TdApi.UpdateChatPosition(
            chatId = dto.chatId,
            position = map(dto.position),
        )
    }

    fun map(dto: UpdateChatAddedToList): TdApi.UpdateChatAddedToList {
        return TdApi.UpdateChatAddedToList(
            chatId = dto.chatId,
            chatList = map(dto.chatList),
        )
    }

    fun map(dto: UpdateChatRemovedFromList): TdApi.UpdateChatRemovedFromList {
        return TdApi.UpdateChatRemovedFromList(
            chatId = dto.chatId,
            chatList = map(dto.chatList),
        )
    }

    fun map(dto: UpdateChatReadInbox): TdApi.UpdateChatReadInbox {
        return TdApi.UpdateChatReadInbox(
            chatId = dto.chatId,
            lastReadInboxMessageId = dto.lastReadInboxMessageId,
            unreadCount = dto.unreadCount,
        )
    }

    fun map(dto: UpdateChatReadOutbox): TdApi.UpdateChatReadOutbox {
        return TdApi.UpdateChatReadOutbox(
            chatId = dto.chatId,
            lastReadOutboxMessageId = dto.lastReadOutboxMessageId,
        )
    }

    fun map(dto: UpdateChatActionBar): TdApi.UpdateChatActionBar {
        return TdApi.UpdateChatActionBar(
            chatId = dto.chatId,
            actionBar = dto.actionBar?.let { map(it) },
        )
    }

    fun map(dto: UpdateChatBusinessBotManageBar): TdApi.UpdateChatBusinessBotManageBar {
        return TdApi.UpdateChatBusinessBotManageBar(
            chatId = dto.chatId,
            businessBotManageBar = dto.businessBotManageBar?.let { map(it) },
        )
    }

    fun map(dto: UpdateChatAvailableReactions): TdApi.UpdateChatAvailableReactions {
        return TdApi.UpdateChatAvailableReactions(
            chatId = dto.chatId,
            availableReactions = map(dto.availableReactions),
        )
    }

    fun map(dto: UpdateChatDraftMessage): TdApi.UpdateChatDraftMessage {
        return TdApi.UpdateChatDraftMessage(
            chatId = dto.chatId,
            draftMessage = dto.draftMessage?.let { map(it) },
            positions = dto.positions.mapArray { map(it) },
        )
    }

    fun map(dto: UpdateChatEmojiStatus): TdApi.UpdateChatEmojiStatus {
        return TdApi.UpdateChatEmojiStatus(
            chatId = dto.chatId,
            emojiStatus = dto.emojiStatus?.let { map(it) },
        )
    }

    fun map(dto: UpdateChatMessageSender): TdApi.UpdateChatMessageSender {
        return TdApi.UpdateChatMessageSender(
            chatId = dto.chatId,
            messageSenderId = dto.messageSenderId?.let { map(it) },
        )
    }

    fun map(dto: UpdateChatMessageAutoDeleteTime): TdApi.UpdateChatMessageAutoDeleteTime {
        return TdApi.UpdateChatMessageAutoDeleteTime(
            chatId = dto.chatId,
            messageAutoDeleteTime = dto.messageAutoDeleteTime,
        )
    }

    fun map(dto: UpdateChatNotificationSettings): TdApi.UpdateChatNotificationSettings {
        return TdApi.UpdateChatNotificationSettings(
            chatId = dto.chatId,
            notificationSettings = map(dto.notificationSettings),
        )
    }

    fun map(dto: UpdateChatPendingJoinRequests): TdApi.UpdateChatPendingJoinRequests {
        return TdApi.UpdateChatPendingJoinRequests(
            chatId = dto.chatId,
            pendingJoinRequests = dto.pendingJoinRequests?.let { map(it) },
        )
    }

    fun map(dto: UpdateChatReplyMarkup): TdApi.UpdateChatReplyMarkup {
        return TdApi.UpdateChatReplyMarkup(
            chatId = dto.chatId,
            replyMarkupMessageId = dto.replyMarkupMessageId,
        )
    }

    fun map(dto: UpdateChatBackground): TdApi.UpdateChatBackground {
        return TdApi.UpdateChatBackground(
            chatId = dto.chatId,
            background = dto.background?.let { map(it) },
        )
    }

    fun map(dto: UpdateChatTheme): TdApi.UpdateChatTheme {
        return TdApi.UpdateChatTheme(
            chatId = dto.chatId,
            themeName = dto.themeName,
        )
    }

    fun map(dto: UpdateChatUnreadMentionCount): TdApi.UpdateChatUnreadMentionCount {
        return TdApi.UpdateChatUnreadMentionCount(
            chatId = dto.chatId,
            unreadMentionCount = dto.unreadMentionCount,
        )
    }

    fun map(dto: UpdateChatUnreadReactionCount): TdApi.UpdateChatUnreadReactionCount {
        return TdApi.UpdateChatUnreadReactionCount(
            chatId = dto.chatId,
            unreadReactionCount = dto.unreadReactionCount,
        )
    }

    fun map(dto: UpdateChatVideoChat): TdApi.UpdateChatVideoChat {
        return TdApi.UpdateChatVideoChat(
            chatId = dto.chatId,
            videoChat = map(dto.videoChat),
        )
    }

    fun map(dto: UpdateChatDefaultDisableNotification): TdApi.UpdateChatDefaultDisableNotification {
        return TdApi.UpdateChatDefaultDisableNotification(
            chatId = dto.chatId,
            defaultDisableNotification = dto.defaultDisableNotification,
        )
    }

    fun map(dto: UpdateChatHasProtectedContent): TdApi.UpdateChatHasProtectedContent {
        return TdApi.UpdateChatHasProtectedContent(
            chatId = dto.chatId,
            hasProtectedContent = dto.hasProtectedContent,
        )
    }

    fun map(dto: UpdateChatIsTranslatable): TdApi.UpdateChatIsTranslatable {
        return TdApi.UpdateChatIsTranslatable(
            chatId = dto.chatId,
            isTranslatable = dto.isTranslatable,
        )
    }

    fun map(dto: UpdateChatIsMarkedAsUnread): TdApi.UpdateChatIsMarkedAsUnread {
        return TdApi.UpdateChatIsMarkedAsUnread(
            chatId = dto.chatId,
            isMarkedAsUnread = dto.isMarkedAsUnread,
        )
    }

    fun map(dto: UpdateChatViewAsTopics): TdApi.UpdateChatViewAsTopics {
        return TdApi.UpdateChatViewAsTopics(
            chatId = dto.chatId,
            viewAsTopics = dto.viewAsTopics,
        )
    }

    fun map(dto: UpdateChatBlockList): TdApi.UpdateChatBlockList {
        return TdApi.UpdateChatBlockList(
            chatId = dto.chatId,
            blockList = dto.blockList?.let { map(it) },
        )
    }

    fun map(dto: UpdateChatHasScheduledMessages): TdApi.UpdateChatHasScheduledMessages {
        return TdApi.UpdateChatHasScheduledMessages(
            chatId = dto.chatId,
            hasScheduledMessages = dto.hasScheduledMessages,
        )
    }

    fun map(dto: UpdateChatFolders): TdApi.UpdateChatFolders {
        return TdApi.UpdateChatFolders(
            chatFolders = dto.chatFolders.mapArray { map(it) },
            mainChatListPosition = dto.mainChatListPosition,
            areTagsEnabled = dto.areTagsEnabled,
        )
    }

    fun map(dto: UpdateChatOnlineMemberCount): TdApi.UpdateChatOnlineMemberCount {
        return TdApi.UpdateChatOnlineMemberCount(
            chatId = dto.chatId,
            onlineMemberCount = dto.onlineMemberCount,
        )
    }

    fun map(dto: UpdateSavedMessagesTopic): TdApi.UpdateSavedMessagesTopic {
        return TdApi.UpdateSavedMessagesTopic(
            topic = map(dto.topic),
        )
    }

    fun map(dto: UpdateSavedMessagesTopicCount): TdApi.UpdateSavedMessagesTopicCount {
        return TdApi.UpdateSavedMessagesTopicCount(
            topicCount = dto.topicCount,
        )
    }

    fun map(dto: UpdateDirectMessagesChatTopic): TdApi.UpdateDirectMessagesChatTopic {
        return TdApi.UpdateDirectMessagesChatTopic(
            topic = map(dto.topic),
        )
    }

    fun map(dto: UpdateTopicMessageCount): TdApi.UpdateTopicMessageCount {
        return TdApi.UpdateTopicMessageCount(
            chatId = dto.chatId,
            topicId = map(dto.topicId),
            messageCount = dto.messageCount,
        )
    }

    fun map(dto: UpdateQuickReplyShortcut): TdApi.UpdateQuickReplyShortcut {
        return TdApi.UpdateQuickReplyShortcut(
            shortcut = map(dto.shortcut),
        )
    }

    fun map(dto: UpdateQuickReplyShortcutDeleted): TdApi.UpdateQuickReplyShortcutDeleted {
        return TdApi.UpdateQuickReplyShortcutDeleted(
            shortcutId = dto.shortcutId,
        )
    }

    fun map(dto: UpdateQuickReplyShortcuts): TdApi.UpdateQuickReplyShortcuts {
        return TdApi.UpdateQuickReplyShortcuts(
            shortcutIds = dto.shortcutIds,
        )
    }

    fun map(dto: UpdateQuickReplyShortcutMessages): TdApi.UpdateQuickReplyShortcutMessages {
        return TdApi.UpdateQuickReplyShortcutMessages(
            shortcutId = dto.shortcutId,
            messages = dto.messages.mapArray { map(it) },
        )
    }

    fun map(dto: UpdateForumTopicInfo): TdApi.UpdateForumTopicInfo {
        return TdApi.UpdateForumTopicInfo(
            info = map(dto.info),
        )
    }

    fun map(dto: UpdateForumTopic): TdApi.UpdateForumTopic {
        return TdApi.UpdateForumTopic(
            chatId = dto.chatId,
            messageThreadId = dto.messageThreadId,
            isPinned = dto.isPinned,
            lastReadInboxMessageId = dto.lastReadInboxMessageId,
            lastReadOutboxMessageId = dto.lastReadOutboxMessageId,
            unreadMentionCount = dto.unreadMentionCount,
            unreadReactionCount = dto.unreadReactionCount,
            notificationSettings = map(dto.notificationSettings),
        )
    }

    fun map(dto: UpdateScopeNotificationSettings): TdApi.UpdateScopeNotificationSettings {
        return TdApi.UpdateScopeNotificationSettings(
            scope = map(dto.scope),
            notificationSettings = map(dto.notificationSettings),
        )
    }

    fun map(dto: UpdateReactionNotificationSettings): TdApi.UpdateReactionNotificationSettings {
        return TdApi.UpdateReactionNotificationSettings(
            notificationSettings = map(dto.notificationSettings),
        )
    }

    fun map(dto: UpdateNotification): TdApi.UpdateNotification {
        return TdApi.UpdateNotification(
            notificationGroupId = dto.notificationGroupId,
            notification = map(dto.notification),
        )
    }

    fun map(dto: UpdateNotificationGroup): TdApi.UpdateNotificationGroup {
        return TdApi.UpdateNotificationGroup(
            notificationGroupId = dto.notificationGroupId,
            type = map(dto.type),
            chatId = dto.chatId,
            notificationSettingsChatId = dto.notificationSettingsChatId,
            notificationSoundId = dto.notificationSoundId,
            totalCount = dto.totalCount,
            addedNotifications = dto.addedNotifications.mapArray { map(it) },
            removedNotificationIds = dto.removedNotificationIds,
        )
    }

    fun map(dto: UpdateActiveNotifications): TdApi.UpdateActiveNotifications {
        return TdApi.UpdateActiveNotifications(
            groups = dto.groups.mapArray { map(it) },
        )
    }

    fun map(dto: UpdateHavePendingNotifications): TdApi.UpdateHavePendingNotifications {
        return TdApi.UpdateHavePendingNotifications(
            haveDelayedNotifications = dto.haveDelayedNotifications,
            haveUnreceivedNotifications = dto.haveUnreceivedNotifications,
        )
    }

    fun map(dto: UpdateDeleteMessages): TdApi.UpdateDeleteMessages {
        return TdApi.UpdateDeleteMessages(
            chatId = dto.chatId,
            messageIds = dto.messageIds,
            isPermanent = dto.isPermanent,
            fromCache = dto.fromCache,
        )
    }

    fun map(dto: UpdateChatAction): TdApi.UpdateChatAction {
        return TdApi.UpdateChatAction(
            chatId = dto.chatId,
            messageThreadId = dto.messageThreadId,
            senderId = map(dto.senderId),
            action = map(dto.action),
        )
    }

    fun map(dto: UpdateUserStatus): TdApi.UpdateUserStatus {
        return TdApi.UpdateUserStatus(
            userId = dto.userId,
            status = map(dto.status),
        )
    }

    fun map(dto: UpdateUser): TdApi.UpdateUser {
        return TdApi.UpdateUser(
            user = map(dto.user),
        )
    }

    fun map(dto: UpdateBasicGroup): TdApi.UpdateBasicGroup {
        return TdApi.UpdateBasicGroup(
            basicGroup = map(dto.basicGroup),
        )
    }

    fun map(dto: UpdateSupergroup): TdApi.UpdateSupergroup {
        return TdApi.UpdateSupergroup(
            supergroup = map(dto.supergroup),
        )
    }

    fun map(dto: UpdateSecretChat): TdApi.UpdateSecretChat {
        return TdApi.UpdateSecretChat(
            secretChat = map(dto.secretChat),
        )
    }

    fun map(dto: UpdateUserFullInfo): TdApi.UpdateUserFullInfo {
        return TdApi.UpdateUserFullInfo(
            userId = dto.userId,
            userFullInfo = map(dto.userFullInfo),
        )
    }

    fun map(dto: UpdateBasicGroupFullInfo): TdApi.UpdateBasicGroupFullInfo {
        return TdApi.UpdateBasicGroupFullInfo(
            basicGroupId = dto.basicGroupId,
            basicGroupFullInfo = map(dto.basicGroupFullInfo),
        )
    }

    fun map(dto: UpdateSupergroupFullInfo): TdApi.UpdateSupergroupFullInfo {
        return TdApi.UpdateSupergroupFullInfo(
            supergroupId = dto.supergroupId,
            supergroupFullInfo = map(dto.supergroupFullInfo),
        )
    }

    fun map(dto: UpdateServiceNotification): TdApi.UpdateServiceNotification {
        return TdApi.UpdateServiceNotification(
            type = dto.type,
            content = map(dto.content),
        )
    }

    fun map(dto: UpdateFile): TdApi.UpdateFile {
        return TdApi.UpdateFile(
            file = map(dto.file),
        )
    }

    fun map(dto: UpdateFileGenerationStart): TdApi.UpdateFileGenerationStart {
        return TdApi.UpdateFileGenerationStart(
            generationId = dto.generationId,
            originalPath = dto.originalPath,
            destinationPath = dto.destinationPath,
            conversion = dto.conversion,
        )
    }

    fun map(dto: UpdateFileGenerationStop): TdApi.UpdateFileGenerationStop {
        return TdApi.UpdateFileGenerationStop(
            generationId = dto.generationId,
        )
    }

    fun map(dto: UpdateFileDownloads): TdApi.UpdateFileDownloads {
        return TdApi.UpdateFileDownloads(
            totalSize = dto.totalSize,
            totalCount = dto.totalCount,
            downloadedSize = dto.downloadedSize,
        )
    }

    fun map(dto: UpdateFileAddedToDownloads): TdApi.UpdateFileAddedToDownloads {
        return TdApi.UpdateFileAddedToDownloads(
            fileDownload = map(dto.fileDownload),
            counts = map(dto.counts),
        )
    }

    fun map(dto: UpdateFileDownload): TdApi.UpdateFileDownload {
        return TdApi.UpdateFileDownload(
            fileId = dto.fileId,
            completeDate = dto.completeDate,
            isPaused = dto.isPaused,
            counts = map(dto.counts),
        )
    }

    fun map(dto: UpdateFileRemovedFromDownloads): TdApi.UpdateFileRemovedFromDownloads {
        return TdApi.UpdateFileRemovedFromDownloads(
            fileId = dto.fileId,
            counts = map(dto.counts),
        )
    }

    fun map(dto: UpdateApplicationVerificationRequired): TdApi.UpdateApplicationVerificationRequired {
        return TdApi.UpdateApplicationVerificationRequired(
            verificationId = dto.verificationId,
            nonce = dto.nonce,
            cloudProjectNumber = dto.cloudProjectNumber,
        )
    }

    fun map(dto: UpdateApplicationRecaptchaVerificationRequired): TdApi.UpdateApplicationRecaptchaVerificationRequired {
        return TdApi.UpdateApplicationRecaptchaVerificationRequired(
            verificationId = dto.verificationId,
            action = dto.action,
            recaptchaKeyId = dto.recaptchaKeyId,
        )
    }

    fun map(dto: UpdateCall): TdApi.UpdateCall {
        return TdApi.UpdateCall(
            call = map(dto.call),
        )
    }

    fun map(dto: UpdateGroupCall): TdApi.UpdateGroupCall {
        return TdApi.UpdateGroupCall(
            groupCall = map(dto.groupCall),
        )
    }

    fun map(dto: UpdateGroupCallParticipant): TdApi.UpdateGroupCallParticipant {
        return TdApi.UpdateGroupCallParticipant(
            groupCallId = dto.groupCallId,
            participant = map(dto.participant),
        )
    }

    fun map(dto: UpdateGroupCallParticipants): TdApi.UpdateGroupCallParticipants {
        return TdApi.UpdateGroupCallParticipants(
            groupCallId = dto.groupCallId,
            participantUserIds = dto.participantUserIds,
        )
    }

    fun map(dto: UpdateGroupCallVerificationState): TdApi.UpdateGroupCallVerificationState {
        return TdApi.UpdateGroupCallVerificationState(
            groupCallId = dto.groupCallId,
            generation = dto.generation,
            emojis = dto.emojis,
        )
    }

    fun map(dto: UpdateNewCallSignalingData): TdApi.UpdateNewCallSignalingData {
        return TdApi.UpdateNewCallSignalingData(
            callId = dto.callId,
            data = dto.data,
        )
    }

    fun map(dto: UpdateUserPrivacySettingRules): TdApi.UpdateUserPrivacySettingRules {
        return TdApi.UpdateUserPrivacySettingRules(
            setting = map(dto.setting),
            rules = map(dto.rules),
        )
    }

    fun map(dto: UpdateUnreadMessageCount): TdApi.UpdateUnreadMessageCount {
        return TdApi.UpdateUnreadMessageCount(
            chatList = map(dto.chatList),
            unreadCount = dto.unreadCount,
            unreadUnmutedCount = dto.unreadUnmutedCount,
        )
    }

    fun map(dto: UpdateUnreadChatCount): TdApi.UpdateUnreadChatCount {
        return TdApi.UpdateUnreadChatCount(
            chatList = map(dto.chatList),
            totalCount = dto.totalCount,
            unreadCount = dto.unreadCount,
            unreadUnmutedCount = dto.unreadUnmutedCount,
            markedAsUnreadCount = dto.markedAsUnreadCount,
            markedAsUnreadUnmutedCount = dto.markedAsUnreadUnmutedCount,
        )
    }

    fun map(dto: UpdateStory): TdApi.UpdateStory {
        return TdApi.UpdateStory(
            story = map(dto.story),
        )
    }

    fun map(dto: UpdateStoryDeleted): TdApi.UpdateStoryDeleted {
        return TdApi.UpdateStoryDeleted(
            storyPosterChatId = dto.storyPosterChatId,
            storyId = dto.storyId,
        )
    }

    fun map(dto: UpdateStoryPostSucceeded): TdApi.UpdateStoryPostSucceeded {
        return TdApi.UpdateStoryPostSucceeded(
            story = map(dto.story),
            oldStoryId = dto.oldStoryId,
        )
    }

    fun map(dto: UpdateStoryPostFailed): TdApi.UpdateStoryPostFailed {
        return TdApi.UpdateStoryPostFailed(
            story = map(dto.story),
            error = map(dto.error),
            errorType = dto.errorType?.let { map(it) },
        )
    }

    fun map(dto: UpdateChatActiveStories): TdApi.UpdateChatActiveStories {
        return TdApi.UpdateChatActiveStories(
            activeStories = map(dto.activeStories),
        )
    }

    fun map(dto: UpdateStoryListChatCount): TdApi.UpdateStoryListChatCount {
        return TdApi.UpdateStoryListChatCount(
            storyList = map(dto.storyList),
            chatCount = dto.chatCount,
        )
    }

    fun map(dto: UpdateStoryStealthMode): TdApi.UpdateStoryStealthMode {
        return TdApi.UpdateStoryStealthMode(
            activeUntilDate = dto.activeUntilDate,
            cooldownUntilDate = dto.cooldownUntilDate,
        )
    }

    fun map(dto: UpdateOption): TdApi.UpdateOption {
        return TdApi.UpdateOption(
            name = dto.name,
            value = map(dto.value),
        )
    }

    fun map(dto: UpdateStickerSet): TdApi.UpdateStickerSet {
        return TdApi.UpdateStickerSet(
            stickerSet = map(dto.stickerSet),
        )
    }

    fun map(dto: UpdateInstalledStickerSets): TdApi.UpdateInstalledStickerSets {
        return TdApi.UpdateInstalledStickerSets(
            stickerType = map(dto.stickerType),
            stickerSetIds = dto.stickerSetIds,
        )
    }

    fun map(dto: UpdateTrendingStickerSets): TdApi.UpdateTrendingStickerSets {
        return TdApi.UpdateTrendingStickerSets(
            stickerType = map(dto.stickerType),
            stickerSets = map(dto.stickerSets),
        )
    }

    fun map(dto: UpdateRecentStickers): TdApi.UpdateRecentStickers {
        return TdApi.UpdateRecentStickers(
            isAttached = dto.isAttached,
            stickerIds = dto.stickerIds,
        )
    }

    fun map(dto: UpdateFavoriteStickers): TdApi.UpdateFavoriteStickers {
        return TdApi.UpdateFavoriteStickers(
            stickerIds = dto.stickerIds,
        )
    }

    fun map(dto: UpdateSavedAnimations): TdApi.UpdateSavedAnimations {
        return TdApi.UpdateSavedAnimations(
            animationIds = dto.animationIds,
        )
    }

    fun map(dto: UpdateSavedNotificationSounds): TdApi.UpdateSavedNotificationSounds {
        return TdApi.UpdateSavedNotificationSounds(
            notificationSoundIds = dto.notificationSoundIds,
        )
    }

    fun map(dto: UpdateDefaultBackground): TdApi.UpdateDefaultBackground {
        return TdApi.UpdateDefaultBackground(
            forDarkTheme = dto.forDarkTheme,
            background = dto.background?.let { map(it) },
        )
    }

    fun map(dto: UpdateChatThemes): TdApi.UpdateChatThemes {
        return TdApi.UpdateChatThemes(
            chatThemes = dto.chatThemes.mapArray { map(it) },
        )
    }

    fun map(dto: UpdateAccentColors): TdApi.UpdateAccentColors {
        return TdApi.UpdateAccentColors(
            colors = dto.colors.mapArray { map(it) },
            availableAccentColorIds = dto.availableAccentColorIds,
        )
    }

    fun map(dto: UpdateProfileAccentColors): TdApi.UpdateProfileAccentColors {
        return TdApi.UpdateProfileAccentColors(
            colors = dto.colors.mapArray { map(it) },
            availableAccentColorIds = dto.availableAccentColorIds,
        )
    }

    fun map(dto: UpdateLanguagePackStrings): TdApi.UpdateLanguagePackStrings {
        return TdApi.UpdateLanguagePackStrings(
            localizationTarget = dto.localizationTarget,
            languagePackId = dto.languagePackId,
            strings = dto.strings.mapArray { map(it) },
        )
    }

    fun map(dto: UpdateConnectionState): TdApi.UpdateConnectionState {
        return TdApi.UpdateConnectionState(
            state = map(dto.state),
        )
    }

    fun map(dto: UpdateFreezeState): TdApi.UpdateFreezeState {
        return TdApi.UpdateFreezeState(
            isFrozen = dto.isFrozen,
            freezingDate = dto.freezingDate,
            deletionDate = dto.deletionDate,
            appealLink = dto.appealLink,
        )
    }

    fun map(dto: UpdateTermsOfService): TdApi.UpdateTermsOfService {
        return TdApi.UpdateTermsOfService(
            termsOfServiceId = dto.termsOfServiceId,
            termsOfService = map(dto.termsOfService),
        )
    }

    fun map(dto: UpdateUnconfirmedSession): TdApi.UpdateUnconfirmedSession {
        return TdApi.UpdateUnconfirmedSession(
            session = dto.session?.let { map(it) },
        )
    }

    fun map(dto: UpdateAttachmentMenuBots): TdApi.UpdateAttachmentMenuBots {
        return TdApi.UpdateAttachmentMenuBots(
            bots = dto.bots.mapArray { map(it) },
        )
    }

    fun map(dto: UpdateWebAppMessageSent): TdApi.UpdateWebAppMessageSent {
        return TdApi.UpdateWebAppMessageSent(
            webAppLaunchId = dto.webAppLaunchId,
        )
    }

    fun map(dto: UpdateActiveEmojiReactions): TdApi.UpdateActiveEmojiReactions {
        return TdApi.UpdateActiveEmojiReactions(
            emojis = dto.emojis,
        )
    }

    fun map(dto: UpdateAvailableMessageEffects): TdApi.UpdateAvailableMessageEffects {
        return TdApi.UpdateAvailableMessageEffects(
            reactionEffectIds = dto.reactionEffectIds,
            stickerEffectIds = dto.stickerEffectIds,
        )
    }

    fun map(dto: UpdateDefaultReactionType): TdApi.UpdateDefaultReactionType {
        return TdApi.UpdateDefaultReactionType(
            reactionType = map(dto.reactionType),
        )
    }

    fun map(dto: UpdateDefaultPaidReactionType): TdApi.UpdateDefaultPaidReactionType {
        return TdApi.UpdateDefaultPaidReactionType(
            type = map(dto.type),
        )
    }

    fun map(dto: UpdateSavedMessagesTags): TdApi.UpdateSavedMessagesTags {
        return TdApi.UpdateSavedMessagesTags(
            savedMessagesTopicId = dto.savedMessagesTopicId,
            tags = map(dto.tags),
        )
    }

    fun map(dto: UpdateActiveLiveLocationMessages): TdApi.UpdateActiveLiveLocationMessages {
        return TdApi.UpdateActiveLiveLocationMessages(
            messages = dto.messages.mapArray { map(it) },
        )
    }

    fun map(dto: UpdateOwnedStarCount): TdApi.UpdateOwnedStarCount {
        return TdApi.UpdateOwnedStarCount(
            starAmount = map(dto.starAmount),
        )
    }

    fun map(dto: UpdateChatRevenueAmount): TdApi.UpdateChatRevenueAmount {
        return TdApi.UpdateChatRevenueAmount(
            chatId = dto.chatId,
            revenueAmount = map(dto.revenueAmount),
        )
    }

    fun map(dto: UpdateStarRevenueStatus): TdApi.UpdateStarRevenueStatus {
        return TdApi.UpdateStarRevenueStatus(
            ownerId = map(dto.ownerId),
            status = map(dto.status),
        )
    }

    fun map(dto: UpdateSpeechRecognitionTrial): TdApi.UpdateSpeechRecognitionTrial {
        return TdApi.UpdateSpeechRecognitionTrial(
            maxMediaDuration = dto.maxMediaDuration,
            weeklyCount = dto.weeklyCount,
            leftCount = dto.leftCount,
            nextResetDate = dto.nextResetDate,
        )
    }

    fun map(dto: UpdateDiceEmojis): TdApi.UpdateDiceEmojis {
        return TdApi.UpdateDiceEmojis(
            emojis = dto.emojis,
        )
    }

    fun map(dto: UpdateAnimatedEmojiMessageClicked): TdApi.UpdateAnimatedEmojiMessageClicked {
        return TdApi.UpdateAnimatedEmojiMessageClicked(
            chatId = dto.chatId,
            messageId = dto.messageId,
            sticker = map(dto.sticker),
        )
    }

    fun map(dto: UpdateAnimationSearchParameters): TdApi.UpdateAnimationSearchParameters {
        return TdApi.UpdateAnimationSearchParameters(
            provider = dto.provider,
            emojis = dto.emojis,
        )
    }

    fun map(dto: UpdateSuggestedActions): TdApi.UpdateSuggestedActions {
        return TdApi.UpdateSuggestedActions(
            addedActions = dto.addedActions.mapArray { map(it) },
            removedActions = dto.removedActions.mapArray { map(it) },
        )
    }

    fun map(dto: UpdateSpeedLimitNotification): TdApi.UpdateSpeedLimitNotification {
        return TdApi.UpdateSpeedLimitNotification(
            isUpload = dto.isUpload,
        )
    }

    fun map(dto: UpdateContactCloseBirthdays): TdApi.UpdateContactCloseBirthdays {
        return TdApi.UpdateContactCloseBirthdays(
            closeBirthdayUsers = dto.closeBirthdayUsers.mapArray { map(it) },
        )
    }

    fun map(dto: UpdateAutosaveSettings): TdApi.UpdateAutosaveSettings {
        return TdApi.UpdateAutosaveSettings(
            scope = map(dto.scope),
            settings = dto.settings?.let { map(it) },
        )
    }

    fun map(dto: UpdateBusinessConnection): TdApi.UpdateBusinessConnection {
        return TdApi.UpdateBusinessConnection(
            connection = map(dto.connection),
        )
    }

    fun map(dto: UpdateNewBusinessMessage): TdApi.UpdateNewBusinessMessage {
        return TdApi.UpdateNewBusinessMessage(
            connectionId = dto.connectionId,
            message = map(dto.message),
        )
    }

    fun map(dto: UpdateBusinessMessageEdited): TdApi.UpdateBusinessMessageEdited {
        return TdApi.UpdateBusinessMessageEdited(
            connectionId = dto.connectionId,
            message = map(dto.message),
        )
    }

    fun map(dto: UpdateBusinessMessagesDeleted): TdApi.UpdateBusinessMessagesDeleted {
        return TdApi.UpdateBusinessMessagesDeleted(
            connectionId = dto.connectionId,
            chatId = dto.chatId,
            messageIds = dto.messageIds,
        )
    }

    fun map(dto: UpdateNewInlineQuery): TdApi.UpdateNewInlineQuery {
        return TdApi.UpdateNewInlineQuery(
            id = dto.id,
            senderUserId = dto.senderUserId,
            userLocation = dto.userLocation?.let { map(it) },
            chatType = dto.chatType?.let { map(it) },
            query = dto.query,
            offset = dto.offset,
        )
    }

    fun map(dto: UpdateNewChosenInlineResult): TdApi.UpdateNewChosenInlineResult {
        return TdApi.UpdateNewChosenInlineResult(
            senderUserId = dto.senderUserId,
            userLocation = dto.userLocation?.let { map(it) },
            query = dto.query,
            resultId = dto.resultId,
            inlineMessageId = dto.inlineMessageId,
        )
    }

    fun map(dto: UpdateNewCallbackQuery): TdApi.UpdateNewCallbackQuery {
        return TdApi.UpdateNewCallbackQuery(
            id = dto.id,
            senderUserId = dto.senderUserId,
            chatId = dto.chatId,
            messageId = dto.messageId,
            chatInstance = dto.chatInstance,
            payload = map(dto.payload),
        )
    }

    fun map(dto: UpdateNewInlineCallbackQuery): TdApi.UpdateNewInlineCallbackQuery {
        return TdApi.UpdateNewInlineCallbackQuery(
            id = dto.id,
            senderUserId = dto.senderUserId,
            inlineMessageId = dto.inlineMessageId,
            chatInstance = dto.chatInstance,
            payload = map(dto.payload),
        )
    }

    fun map(dto: UpdateNewBusinessCallbackQuery): TdApi.UpdateNewBusinessCallbackQuery {
        return TdApi.UpdateNewBusinessCallbackQuery(
            id = dto.id,
            senderUserId = dto.senderUserId,
            connectionId = dto.connectionId,
            message = map(dto.message),
            chatInstance = dto.chatInstance,
            payload = map(dto.payload),
        )
    }

    fun map(dto: UpdateNewShippingQuery): TdApi.UpdateNewShippingQuery {
        return TdApi.UpdateNewShippingQuery(
            id = dto.id,
            senderUserId = dto.senderUserId,
            invoicePayload = dto.invoicePayload,
            shippingAddress = map(dto.shippingAddress),
        )
    }

    fun map(dto: UpdateNewPreCheckoutQuery): TdApi.UpdateNewPreCheckoutQuery {
        return TdApi.UpdateNewPreCheckoutQuery(
            id = dto.id,
            senderUserId = dto.senderUserId,
            currency = dto.currency,
            totalAmount = dto.totalAmount,
            invoicePayload = dto.invoicePayload,
            shippingOptionId = dto.shippingOptionId,
            orderInfo = dto.orderInfo?.let { map(it) },
        )
    }

    fun map(dto: UpdateNewCustomEvent): TdApi.UpdateNewCustomEvent {
        return TdApi.UpdateNewCustomEvent(
            event = dto.event,
        )
    }

    fun map(dto: UpdateNewCustomQuery): TdApi.UpdateNewCustomQuery {
        return TdApi.UpdateNewCustomQuery(
            id = dto.id,
            data = dto.data,
            timeout = dto.timeout,
        )
    }

    fun map(dto: UpdatePoll): TdApi.UpdatePoll {
        return TdApi.UpdatePoll(
            poll = map(dto.poll),
        )
    }

    fun map(dto: UpdatePollAnswer): TdApi.UpdatePollAnswer {
        return TdApi.UpdatePollAnswer(
            pollId = dto.pollId,
            voterId = map(dto.voterId),
            optionIds = dto.optionIds,
        )
    }

    fun map(dto: UpdateChatMember): TdApi.UpdateChatMember {
        return TdApi.UpdateChatMember(
            chatId = dto.chatId,
            actorUserId = dto.actorUserId,
            date = dto.date,
            inviteLink = dto.inviteLink?.let { map(it) },
            viaJoinRequest = dto.viaJoinRequest,
            viaChatFolderInviteLink = dto.viaChatFolderInviteLink,
            oldChatMember = map(dto.oldChatMember),
            newChatMember = map(dto.newChatMember),
        )
    }

    fun map(dto: UpdateNewChatJoinRequest): TdApi.UpdateNewChatJoinRequest {
        return TdApi.UpdateNewChatJoinRequest(
            chatId = dto.chatId,
            request = map(dto.request),
            userChatId = dto.userChatId,
            inviteLink = dto.inviteLink?.let { map(it) },
        )
    }

    fun map(dto: UpdateChatBoost): TdApi.UpdateChatBoost {
        return TdApi.UpdateChatBoost(
            chatId = dto.chatId,
            boost = map(dto.boost),
        )
    }

    fun map(dto: UpdateMessageReaction): TdApi.UpdateMessageReaction {
        return TdApi.UpdateMessageReaction(
            chatId = dto.chatId,
            messageId = dto.messageId,
            actorId = map(dto.actorId),
            date = dto.date,
            oldReactionTypes = dto.oldReactionTypes.mapArray { map(it) },
            newReactionTypes = dto.newReactionTypes.mapArray { map(it) },
        )
    }

    fun map(dto: UpdateMessageReactions): TdApi.UpdateMessageReactions {
        return TdApi.UpdateMessageReactions(
            chatId = dto.chatId,
            messageId = dto.messageId,
            date = dto.date,
            reactions = dto.reactions.mapArray { map(it) },
        )
    }

    fun map(dto: UpdatePaidMediaPurchased): TdApi.UpdatePaidMediaPurchased {
        return TdApi.UpdatePaidMediaPurchased(
            userId = dto.userId,
            payload = dto.payload,
        )
    }

    fun map(dto: TdApi.Updates): Updates {
        return Updates(
            updates = dto.updates.mapArray { map(it) },
        )
    }

    fun map(dto: Updates): TdApi.Updates {
        return TdApi.Updates(
            updates = dto.updates.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.UpgradeGiftResult): UpgradeGiftResult {
        return UpgradeGiftResult(
            gift = map(dto.gift),
            receivedGiftId = dto.receivedGiftId,
            isSaved = dto.isSaved,
            canBeTransferred = dto.canBeTransferred,
            transferStarCount = dto.transferStarCount,
            nextTransferDate = dto.nextTransferDate,
            nextResaleDate = dto.nextResaleDate,
            exportDate = dto.exportDate,
        )
    }

    fun map(dto: UpgradeGiftResult): TdApi.UpgradeGiftResult {
        return TdApi.UpgradeGiftResult(
            gift = map(dto.gift),
            receivedGiftId = dto.receivedGiftId,
            isSaved = dto.isSaved,
            canBeTransferred = dto.canBeTransferred,
            transferStarCount = dto.transferStarCount,
            nextTransferDate = dto.nextTransferDate,
            nextResaleDate = dto.nextResaleDate,
            exportDate = dto.exportDate,
        )
    }

    fun map(dto: TdApi.UpgradedGift): UpgradedGift {
        return UpgradedGift(
            id = dto.id,
            title = dto.title,
            name = dto.name,
            number = dto.number,
            totalUpgradedCount = dto.totalUpgradedCount,
            maxUpgradedCount = dto.maxUpgradedCount,
            ownerId = dto.ownerId?.let { map(it) },
            ownerAddress = dto.ownerAddress,
            ownerName = dto.ownerName,
            giftAddress = dto.giftAddress,
            model = map(dto.model),
            symbol = map(dto.symbol),
            backdrop = map(dto.backdrop),
            originalDetails = dto.originalDetails?.let { map(it) },
            resaleStarCount = dto.resaleStarCount,
        )
    }

    fun map(dto: UpgradedGift): TdApi.UpgradedGift {
        return TdApi.UpgradedGift(
            id = dto.id,
            title = dto.title,
            name = dto.name,
            number = dto.number,
            totalUpgradedCount = dto.totalUpgradedCount,
            maxUpgradedCount = dto.maxUpgradedCount,
            ownerId = dto.ownerId?.let { map(it) },
            ownerAddress = dto.ownerAddress,
            ownerName = dto.ownerName,
            giftAddress = dto.giftAddress,
            model = map(dto.model),
            symbol = map(dto.symbol),
            backdrop = map(dto.backdrop),
            originalDetails = dto.originalDetails?.let { map(it) },
            resaleStarCount = dto.resaleStarCount,
        )
    }

    fun map(dto: TdApi.UpgradedGiftAttributeId): UpgradedGiftAttributeId {
        when (dto) {
            is TdApi.UpgradedGiftAttributeIdModel -> return map(dto)
            is TdApi.UpgradedGiftAttributeIdSymbol -> return map(dto)
            is TdApi.UpgradedGiftAttributeIdBackdrop -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.UpgradedGiftAttributeIdModel): UpgradedGiftAttributeIdModel {
        return UpgradedGiftAttributeIdModel(
            stickerId = dto.stickerId,
        )
    }

    fun map(dto: TdApi.UpgradedGiftAttributeIdSymbol): UpgradedGiftAttributeIdSymbol {
        return UpgradedGiftAttributeIdSymbol(
            stickerId = dto.stickerId,
        )
    }

    fun map(dto: TdApi.UpgradedGiftAttributeIdBackdrop): UpgradedGiftAttributeIdBackdrop {
        return UpgradedGiftAttributeIdBackdrop(
            backdropId = dto.backdropId,
        )
    }

    fun map(dto: UpgradedGiftAttributeId): TdApi.UpgradedGiftAttributeId {
        when (dto) {
            is UpgradedGiftAttributeIdModel -> return map(dto)
            is UpgradedGiftAttributeIdSymbol -> return map(dto)
            is UpgradedGiftAttributeIdBackdrop -> return map(dto)
        }
    }

    fun map(dto: UpgradedGiftAttributeIdModel): TdApi.UpgradedGiftAttributeIdModel {
        return TdApi.UpgradedGiftAttributeIdModel(
            stickerId = dto.stickerId,
        )
    }

    fun map(dto: UpgradedGiftAttributeIdSymbol): TdApi.UpgradedGiftAttributeIdSymbol {
        return TdApi.UpgradedGiftAttributeIdSymbol(
            stickerId = dto.stickerId,
        )
    }

    fun map(dto: UpgradedGiftAttributeIdBackdrop): TdApi.UpgradedGiftAttributeIdBackdrop {
        return TdApi.UpgradedGiftAttributeIdBackdrop(
            backdropId = dto.backdropId,
        )
    }

    fun map(dto: TdApi.UpgradedGiftBackdrop): UpgradedGiftBackdrop {
        return UpgradedGiftBackdrop(
            id = dto.id,
            name = dto.name,
            colors = map(dto.colors),
            rarityPerMille = dto.rarityPerMille,
        )
    }

    fun map(dto: UpgradedGiftBackdrop): TdApi.UpgradedGiftBackdrop {
        return TdApi.UpgradedGiftBackdrop(
            id = dto.id,
            name = dto.name,
            colors = map(dto.colors),
            rarityPerMille = dto.rarityPerMille,
        )
    }

    fun map(dto: TdApi.UpgradedGiftBackdropColors): UpgradedGiftBackdropColors {
        return UpgradedGiftBackdropColors(
            centerColor = dto.centerColor,
            edgeColor = dto.edgeColor,
            symbolColor = dto.symbolColor,
            textColor = dto.textColor,
        )
    }

    fun map(dto: UpgradedGiftBackdropColors): TdApi.UpgradedGiftBackdropColors {
        return TdApi.UpgradedGiftBackdropColors(
            centerColor = dto.centerColor,
            edgeColor = dto.edgeColor,
            symbolColor = dto.symbolColor,
            textColor = dto.textColor,
        )
    }

    fun map(dto: TdApi.UpgradedGiftBackdropCount): UpgradedGiftBackdropCount {
        return UpgradedGiftBackdropCount(
            backdrop = map(dto.backdrop),
            totalCount = dto.totalCount,
        )
    }

    fun map(dto: UpgradedGiftBackdropCount): TdApi.UpgradedGiftBackdropCount {
        return TdApi.UpgradedGiftBackdropCount(
            backdrop = map(dto.backdrop),
            totalCount = dto.totalCount,
        )
    }

    fun map(dto: TdApi.UpgradedGiftModel): UpgradedGiftModel {
        return UpgradedGiftModel(
            name = dto.name,
            sticker = map(dto.sticker),
            rarityPerMille = dto.rarityPerMille,
        )
    }

    fun map(dto: UpgradedGiftModel): TdApi.UpgradedGiftModel {
        return TdApi.UpgradedGiftModel(
            name = dto.name,
            sticker = map(dto.sticker),
            rarityPerMille = dto.rarityPerMille,
        )
    }

    fun map(dto: TdApi.UpgradedGiftModelCount): UpgradedGiftModelCount {
        return UpgradedGiftModelCount(
            model = map(dto.model),
            totalCount = dto.totalCount,
        )
    }

    fun map(dto: UpgradedGiftModelCount): TdApi.UpgradedGiftModelCount {
        return TdApi.UpgradedGiftModelCount(
            model = map(dto.model),
            totalCount = dto.totalCount,
        )
    }

    fun map(dto: TdApi.UpgradedGiftOriginalDetails): UpgradedGiftOriginalDetails {
        return UpgradedGiftOriginalDetails(
            senderId = dto.senderId?.let { map(it) },
            receiverId = map(dto.receiverId),
            text = map(dto.text),
            date = dto.date,
        )
    }

    fun map(dto: UpgradedGiftOriginalDetails): TdApi.UpgradedGiftOriginalDetails {
        return TdApi.UpgradedGiftOriginalDetails(
            senderId = dto.senderId?.let { map(it) },
            receiverId = map(dto.receiverId),
            text = map(dto.text),
            date = dto.date,
        )
    }

    fun map(dto: TdApi.UpgradedGiftSymbol): UpgradedGiftSymbol {
        return UpgradedGiftSymbol(
            name = dto.name,
            sticker = map(dto.sticker),
            rarityPerMille = dto.rarityPerMille,
        )
    }

    fun map(dto: UpgradedGiftSymbol): TdApi.UpgradedGiftSymbol {
        return TdApi.UpgradedGiftSymbol(
            name = dto.name,
            sticker = map(dto.sticker),
            rarityPerMille = dto.rarityPerMille,
        )
    }

    fun map(dto: TdApi.UpgradedGiftSymbolCount): UpgradedGiftSymbolCount {
        return UpgradedGiftSymbolCount(
            symbol = map(dto.symbol),
            totalCount = dto.totalCount,
        )
    }

    fun map(dto: UpgradedGiftSymbolCount): TdApi.UpgradedGiftSymbolCount {
        return TdApi.UpgradedGiftSymbolCount(
            symbol = map(dto.symbol),
            totalCount = dto.totalCount,
        )
    }

    fun map(dto: TdApi.User): User {
        return User(
            id = dto.id,
            firstName = dto.firstName,
            lastName = dto.lastName,
            usernames = dto.usernames?.let { map(it) },
            phoneNumber = dto.phoneNumber,
            status = map(dto.status),
            profilePhoto = dto.profilePhoto?.let { map(it) },
            accentColorId = dto.accentColorId,
            backgroundCustomEmojiId = dto.backgroundCustomEmojiId,
            profileAccentColorId = dto.profileAccentColorId,
            profileBackgroundCustomEmojiId = dto.profileBackgroundCustomEmojiId,
            emojiStatus = dto.emojiStatus?.let { map(it) },
            isContact = dto.isContact,
            isMutualContact = dto.isMutualContact,
            isCloseFriend = dto.isCloseFriend,
            verificationStatus = dto.verificationStatus?.let { map(it) },
            isPremium = dto.isPremium,
            isSupport = dto.isSupport,
            restrictionReason = dto.restrictionReason,
            hasActiveStories = dto.hasActiveStories,
            hasUnreadActiveStories = dto.hasUnreadActiveStories,
            restrictsNewChats = dto.restrictsNewChats,
            paidMessageStarCount = dto.paidMessageStarCount,
            haveAccess = dto.haveAccess,
            type = map(dto.type),
            languageCode = dto.languageCode,
            addedToAttachmentMenu = dto.addedToAttachmentMenu,
        )
    }

    fun map(dto: User): TdApi.User {
        return TdApi.User(
            id = dto.id,
            firstName = dto.firstName,
            lastName = dto.lastName,
            usernames = dto.usernames?.let { map(it) },
            phoneNumber = dto.phoneNumber,
            status = map(dto.status),
            profilePhoto = dto.profilePhoto?.let { map(it) },
            accentColorId = dto.accentColorId,
            backgroundCustomEmojiId = dto.backgroundCustomEmojiId,
            profileAccentColorId = dto.profileAccentColorId,
            profileBackgroundCustomEmojiId = dto.profileBackgroundCustomEmojiId,
            emojiStatus = dto.emojiStatus?.let { map(it) },
            isContact = dto.isContact,
            isMutualContact = dto.isMutualContact,
            isCloseFriend = dto.isCloseFriend,
            verificationStatus = dto.verificationStatus?.let { map(it) },
            isPremium = dto.isPremium,
            isSupport = dto.isSupport,
            restrictionReason = dto.restrictionReason,
            hasActiveStories = dto.hasActiveStories,
            hasUnreadActiveStories = dto.hasUnreadActiveStories,
            restrictsNewChats = dto.restrictsNewChats,
            paidMessageStarCount = dto.paidMessageStarCount,
            haveAccess = dto.haveAccess,
            type = map(dto.type),
            languageCode = dto.languageCode,
            addedToAttachmentMenu = dto.addedToAttachmentMenu,
        )
    }

    fun map(dto: TdApi.UserFullInfo): UserFullInfo {
        return UserFullInfo(
            personalPhoto = dto.personalPhoto?.let { map(it) },
            photo = dto.photo?.let { map(it) },
            publicPhoto = dto.publicPhoto?.let { map(it) },
            blockList = dto.blockList?.let { map(it) },
            canBeCalled = dto.canBeCalled,
            supportsVideoCalls = dto.supportsVideoCalls,
            hasPrivateCalls = dto.hasPrivateCalls,
            hasPrivateForwards = dto.hasPrivateForwards,
            hasRestrictedVoiceAndVideoNoteMessages = dto.hasRestrictedVoiceAndVideoNoteMessages,
            hasPostedToProfileStories = dto.hasPostedToProfileStories,
            hasSponsoredMessagesEnabled = dto.hasSponsoredMessagesEnabled,
            needPhoneNumberPrivacyException = dto.needPhoneNumberPrivacyException,
            setChatBackground = dto.setChatBackground,
            bio = dto.bio?.let { map(it) },
            birthdate = dto.birthdate?.let { map(it) },
            personalChatId = dto.personalChatId,
            giftCount = dto.giftCount,
            groupInCommonCount = dto.groupInCommonCount,
            incomingPaidMessageStarCount = dto.incomingPaidMessageStarCount,
            outgoingPaidMessageStarCount = dto.outgoingPaidMessageStarCount,
            giftSettings = map(dto.giftSettings),
            botVerification = dto.botVerification?.let { map(it) },
            businessInfo = dto.businessInfo?.let { map(it) },
            botInfo = dto.botInfo?.let { map(it) },
        )
    }

    fun map(dto: UserFullInfo): TdApi.UserFullInfo {
        return TdApi.UserFullInfo(
            personalPhoto = dto.personalPhoto?.let { map(it) },
            photo = dto.photo?.let { map(it) },
            publicPhoto = dto.publicPhoto?.let { map(it) },
            blockList = dto.blockList?.let { map(it) },
            canBeCalled = dto.canBeCalled,
            supportsVideoCalls = dto.supportsVideoCalls,
            hasPrivateCalls = dto.hasPrivateCalls,
            hasPrivateForwards = dto.hasPrivateForwards,
            hasRestrictedVoiceAndVideoNoteMessages = dto.hasRestrictedVoiceAndVideoNoteMessages,
            hasPostedToProfileStories = dto.hasPostedToProfileStories,
            hasSponsoredMessagesEnabled = dto.hasSponsoredMessagesEnabled,
            needPhoneNumberPrivacyException = dto.needPhoneNumberPrivacyException,
            setChatBackground = dto.setChatBackground,
            bio = dto.bio?.let { map(it) },
            birthdate = dto.birthdate?.let { map(it) },
            personalChatId = dto.personalChatId,
            giftCount = dto.giftCount,
            groupInCommonCount = dto.groupInCommonCount,
            incomingPaidMessageStarCount = dto.incomingPaidMessageStarCount,
            outgoingPaidMessageStarCount = dto.outgoingPaidMessageStarCount,
            giftSettings = map(dto.giftSettings),
            botVerification = dto.botVerification?.let { map(it) },
            businessInfo = dto.businessInfo?.let { map(it) },
            botInfo = dto.botInfo?.let { map(it) },
        )
    }

    fun map(dto: TdApi.UserLink): UserLink {
        return UserLink(
            url = dto.url,
            expiresIn = dto.expiresIn,
        )
    }

    fun map(dto: UserLink): TdApi.UserLink {
        return TdApi.UserLink(
            url = dto.url,
            expiresIn = dto.expiresIn,
        )
    }

    fun map(dto: TdApi.UserPrivacySetting): UserPrivacySetting {
        when (dto) {
            is TdApi.UserPrivacySettingShowStatus -> return map(dto)
            is TdApi.UserPrivacySettingShowProfilePhoto -> return map(dto)
            is TdApi.UserPrivacySettingShowLinkInForwardedMessages -> return map(dto)
            is TdApi.UserPrivacySettingShowPhoneNumber -> return map(dto)
            is TdApi.UserPrivacySettingShowBio -> return map(dto)
            is TdApi.UserPrivacySettingShowBirthdate -> return map(dto)
            is TdApi.UserPrivacySettingAllowChatInvites -> return map(dto)
            is TdApi.UserPrivacySettingAllowCalls -> return map(dto)
            is TdApi.UserPrivacySettingAllowPeerToPeerCalls -> return map(dto)
            is TdApi.UserPrivacySettingAllowFindingByPhoneNumber -> return map(dto)
            is TdApi.UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages -> return map(dto)
            is TdApi.UserPrivacySettingAutosaveGifts -> return map(dto)
            is TdApi.UserPrivacySettingAllowUnpaidMessages -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.UserPrivacySettingShowStatus): UserPrivacySettingShowStatus {
        return UserPrivacySettingShowStatus()
    }

    fun map(dto: TdApi.UserPrivacySettingShowProfilePhoto): UserPrivacySettingShowProfilePhoto {
        return UserPrivacySettingShowProfilePhoto()
    }

    fun map(dto: TdApi.UserPrivacySettingShowLinkInForwardedMessages): UserPrivacySettingShowLinkInForwardedMessages {
        return UserPrivacySettingShowLinkInForwardedMessages()
    }

    fun map(dto: TdApi.UserPrivacySettingShowPhoneNumber): UserPrivacySettingShowPhoneNumber {
        return UserPrivacySettingShowPhoneNumber()
    }

    fun map(dto: TdApi.UserPrivacySettingShowBio): UserPrivacySettingShowBio {
        return UserPrivacySettingShowBio()
    }

    fun map(dto: TdApi.UserPrivacySettingShowBirthdate): UserPrivacySettingShowBirthdate {
        return UserPrivacySettingShowBirthdate()
    }

    fun map(dto: TdApi.UserPrivacySettingAllowChatInvites): UserPrivacySettingAllowChatInvites {
        return UserPrivacySettingAllowChatInvites()
    }

    fun map(dto: TdApi.UserPrivacySettingAllowCalls): UserPrivacySettingAllowCalls {
        return UserPrivacySettingAllowCalls()
    }

    fun map(dto: TdApi.UserPrivacySettingAllowPeerToPeerCalls): UserPrivacySettingAllowPeerToPeerCalls {
        return UserPrivacySettingAllowPeerToPeerCalls()
    }

    fun map(dto: TdApi.UserPrivacySettingAllowFindingByPhoneNumber): UserPrivacySettingAllowFindingByPhoneNumber {
        return UserPrivacySettingAllowFindingByPhoneNumber()
    }

    fun map(dto: TdApi.UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages): UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages {
        return UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages()
    }

    fun map(dto: TdApi.UserPrivacySettingAutosaveGifts): UserPrivacySettingAutosaveGifts {
        return UserPrivacySettingAutosaveGifts()
    }

    fun map(dto: TdApi.UserPrivacySettingAllowUnpaidMessages): UserPrivacySettingAllowUnpaidMessages {
        return UserPrivacySettingAllowUnpaidMessages()
    }

    fun map(dto: UserPrivacySetting): TdApi.UserPrivacySetting {
        when (dto) {
            is UserPrivacySettingShowStatus -> return map(dto)
            is UserPrivacySettingShowProfilePhoto -> return map(dto)
            is UserPrivacySettingShowLinkInForwardedMessages -> return map(dto)
            is UserPrivacySettingShowPhoneNumber -> return map(dto)
            is UserPrivacySettingShowBio -> return map(dto)
            is UserPrivacySettingShowBirthdate -> return map(dto)
            is UserPrivacySettingAllowChatInvites -> return map(dto)
            is UserPrivacySettingAllowCalls -> return map(dto)
            is UserPrivacySettingAllowPeerToPeerCalls -> return map(dto)
            is UserPrivacySettingAllowFindingByPhoneNumber -> return map(dto)
            is UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages -> return map(dto)
            is UserPrivacySettingAutosaveGifts -> return map(dto)
            is UserPrivacySettingAllowUnpaidMessages -> return map(dto)
        }
    }

    fun map(dto: UserPrivacySettingShowStatus): TdApi.UserPrivacySettingShowStatus {
        return TdApi.UserPrivacySettingShowStatus()
    }

    fun map(dto: UserPrivacySettingShowProfilePhoto): TdApi.UserPrivacySettingShowProfilePhoto {
        return TdApi.UserPrivacySettingShowProfilePhoto()
    }

    fun map(dto: UserPrivacySettingShowLinkInForwardedMessages): TdApi.UserPrivacySettingShowLinkInForwardedMessages {
        return TdApi.UserPrivacySettingShowLinkInForwardedMessages()
    }

    fun map(dto: UserPrivacySettingShowPhoneNumber): TdApi.UserPrivacySettingShowPhoneNumber {
        return TdApi.UserPrivacySettingShowPhoneNumber()
    }

    fun map(dto: UserPrivacySettingShowBio): TdApi.UserPrivacySettingShowBio {
        return TdApi.UserPrivacySettingShowBio()
    }

    fun map(dto: UserPrivacySettingShowBirthdate): TdApi.UserPrivacySettingShowBirthdate {
        return TdApi.UserPrivacySettingShowBirthdate()
    }

    fun map(dto: UserPrivacySettingAllowChatInvites): TdApi.UserPrivacySettingAllowChatInvites {
        return TdApi.UserPrivacySettingAllowChatInvites()
    }

    fun map(dto: UserPrivacySettingAllowCalls): TdApi.UserPrivacySettingAllowCalls {
        return TdApi.UserPrivacySettingAllowCalls()
    }

    fun map(dto: UserPrivacySettingAllowPeerToPeerCalls): TdApi.UserPrivacySettingAllowPeerToPeerCalls {
        return TdApi.UserPrivacySettingAllowPeerToPeerCalls()
    }

    fun map(dto: UserPrivacySettingAllowFindingByPhoneNumber): TdApi.UserPrivacySettingAllowFindingByPhoneNumber {
        return TdApi.UserPrivacySettingAllowFindingByPhoneNumber()
    }

    fun map(dto: UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages): TdApi.UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages {
        return TdApi.UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages()
    }

    fun map(dto: UserPrivacySettingAutosaveGifts): TdApi.UserPrivacySettingAutosaveGifts {
        return TdApi.UserPrivacySettingAutosaveGifts()
    }

    fun map(dto: UserPrivacySettingAllowUnpaidMessages): TdApi.UserPrivacySettingAllowUnpaidMessages {
        return TdApi.UserPrivacySettingAllowUnpaidMessages()
    }

    fun map(dto: TdApi.UserPrivacySettingRule): UserPrivacySettingRule {
        when (dto) {
            is TdApi.UserPrivacySettingRuleAllowAll -> return map(dto)
            is TdApi.UserPrivacySettingRuleAllowContacts -> return map(dto)
            is TdApi.UserPrivacySettingRuleAllowBots -> return map(dto)
            is TdApi.UserPrivacySettingRuleAllowPremiumUsers -> return map(dto)
            is TdApi.UserPrivacySettingRuleAllowUsers -> return map(dto)
            is TdApi.UserPrivacySettingRuleAllowChatMembers -> return map(dto)
            is TdApi.UserPrivacySettingRuleRestrictAll -> return map(dto)
            is TdApi.UserPrivacySettingRuleRestrictContacts -> return map(dto)
            is TdApi.UserPrivacySettingRuleRestrictBots -> return map(dto)
            is TdApi.UserPrivacySettingRuleRestrictUsers -> return map(dto)
            is TdApi.UserPrivacySettingRuleRestrictChatMembers -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.UserPrivacySettingRuleAllowAll): UserPrivacySettingRuleAllowAll {
        return UserPrivacySettingRuleAllowAll()
    }

    fun map(dto: TdApi.UserPrivacySettingRuleAllowContacts): UserPrivacySettingRuleAllowContacts {
        return UserPrivacySettingRuleAllowContacts()
    }

    fun map(dto: TdApi.UserPrivacySettingRuleAllowBots): UserPrivacySettingRuleAllowBots {
        return UserPrivacySettingRuleAllowBots()
    }

    fun map(dto: TdApi.UserPrivacySettingRuleAllowPremiumUsers): UserPrivacySettingRuleAllowPremiumUsers {
        return UserPrivacySettingRuleAllowPremiumUsers()
    }

    fun map(dto: TdApi.UserPrivacySettingRuleAllowUsers): UserPrivacySettingRuleAllowUsers {
        return UserPrivacySettingRuleAllowUsers(
            userIds = dto.userIds,
        )
    }

    fun map(dto: TdApi.UserPrivacySettingRuleAllowChatMembers): UserPrivacySettingRuleAllowChatMembers {
        return UserPrivacySettingRuleAllowChatMembers(
            chatIds = dto.chatIds,
        )
    }

    fun map(dto: TdApi.UserPrivacySettingRuleRestrictAll): UserPrivacySettingRuleRestrictAll {
        return UserPrivacySettingRuleRestrictAll()
    }

    fun map(dto: TdApi.UserPrivacySettingRuleRestrictContacts): UserPrivacySettingRuleRestrictContacts {
        return UserPrivacySettingRuleRestrictContacts()
    }

    fun map(dto: TdApi.UserPrivacySettingRuleRestrictBots): UserPrivacySettingRuleRestrictBots {
        return UserPrivacySettingRuleRestrictBots()
    }

    fun map(dto: TdApi.UserPrivacySettingRuleRestrictUsers): UserPrivacySettingRuleRestrictUsers {
        return UserPrivacySettingRuleRestrictUsers(
            userIds = dto.userIds,
        )
    }

    fun map(dto: TdApi.UserPrivacySettingRuleRestrictChatMembers): UserPrivacySettingRuleRestrictChatMembers {
        return UserPrivacySettingRuleRestrictChatMembers(
            chatIds = dto.chatIds,
        )
    }

    fun map(dto: UserPrivacySettingRule): TdApi.UserPrivacySettingRule {
        when (dto) {
            is UserPrivacySettingRuleAllowAll -> return map(dto)
            is UserPrivacySettingRuleAllowContacts -> return map(dto)
            is UserPrivacySettingRuleAllowBots -> return map(dto)
            is UserPrivacySettingRuleAllowPremiumUsers -> return map(dto)
            is UserPrivacySettingRuleAllowUsers -> return map(dto)
            is UserPrivacySettingRuleAllowChatMembers -> return map(dto)
            is UserPrivacySettingRuleRestrictAll -> return map(dto)
            is UserPrivacySettingRuleRestrictContacts -> return map(dto)
            is UserPrivacySettingRuleRestrictBots -> return map(dto)
            is UserPrivacySettingRuleRestrictUsers -> return map(dto)
            is UserPrivacySettingRuleRestrictChatMembers -> return map(dto)
        }
    }

    fun map(dto: UserPrivacySettingRuleAllowAll): TdApi.UserPrivacySettingRuleAllowAll {
        return TdApi.UserPrivacySettingRuleAllowAll()
    }

    fun map(dto: UserPrivacySettingRuleAllowContacts): TdApi.UserPrivacySettingRuleAllowContacts {
        return TdApi.UserPrivacySettingRuleAllowContacts()
    }

    fun map(dto: UserPrivacySettingRuleAllowBots): TdApi.UserPrivacySettingRuleAllowBots {
        return TdApi.UserPrivacySettingRuleAllowBots()
    }

    fun map(dto: UserPrivacySettingRuleAllowPremiumUsers): TdApi.UserPrivacySettingRuleAllowPremiumUsers {
        return TdApi.UserPrivacySettingRuleAllowPremiumUsers()
    }

    fun map(dto: UserPrivacySettingRuleAllowUsers): TdApi.UserPrivacySettingRuleAllowUsers {
        return TdApi.UserPrivacySettingRuleAllowUsers(
            userIds = dto.userIds,
        )
    }

    fun map(dto: UserPrivacySettingRuleAllowChatMembers): TdApi.UserPrivacySettingRuleAllowChatMembers {
        return TdApi.UserPrivacySettingRuleAllowChatMembers(
            chatIds = dto.chatIds,
        )
    }

    fun map(dto: UserPrivacySettingRuleRestrictAll): TdApi.UserPrivacySettingRuleRestrictAll {
        return TdApi.UserPrivacySettingRuleRestrictAll()
    }

    fun map(dto: UserPrivacySettingRuleRestrictContacts): TdApi.UserPrivacySettingRuleRestrictContacts {
        return TdApi.UserPrivacySettingRuleRestrictContacts()
    }

    fun map(dto: UserPrivacySettingRuleRestrictBots): TdApi.UserPrivacySettingRuleRestrictBots {
        return TdApi.UserPrivacySettingRuleRestrictBots()
    }

    fun map(dto: UserPrivacySettingRuleRestrictUsers): TdApi.UserPrivacySettingRuleRestrictUsers {
        return TdApi.UserPrivacySettingRuleRestrictUsers(
            userIds = dto.userIds,
        )
    }

    fun map(dto: UserPrivacySettingRuleRestrictChatMembers): TdApi.UserPrivacySettingRuleRestrictChatMembers {
        return TdApi.UserPrivacySettingRuleRestrictChatMembers(
            chatIds = dto.chatIds,
        )
    }

    fun map(dto: TdApi.UserPrivacySettingRules): UserPrivacySettingRules {
        return UserPrivacySettingRules(
            rules = dto.rules.mapArray { map(it) },
        )
    }

    fun map(dto: UserPrivacySettingRules): TdApi.UserPrivacySettingRules {
        return TdApi.UserPrivacySettingRules(
            rules = dto.rules.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.UserStatus): UserStatus {
        when (dto) {
            is TdApi.UserStatusEmpty -> return map(dto)
            is TdApi.UserStatusOnline -> return map(dto)
            is TdApi.UserStatusOffline -> return map(dto)
            is TdApi.UserStatusRecently -> return map(dto)
            is TdApi.UserStatusLastWeek -> return map(dto)
            is TdApi.UserStatusLastMonth -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.UserStatusEmpty): UserStatusEmpty {
        return UserStatusEmpty()
    }

    fun map(dto: TdApi.UserStatusOnline): UserStatusOnline {
        return UserStatusOnline(
            expires = dto.expires,
        )
    }

    fun map(dto: TdApi.UserStatusOffline): UserStatusOffline {
        return UserStatusOffline(
            wasOnline = dto.wasOnline,
        )
    }

    fun map(dto: TdApi.UserStatusRecently): UserStatusRecently {
        return UserStatusRecently(
            byMyPrivacySettings = dto.byMyPrivacySettings,
        )
    }

    fun map(dto: TdApi.UserStatusLastWeek): UserStatusLastWeek {
        return UserStatusLastWeek(
            byMyPrivacySettings = dto.byMyPrivacySettings,
        )
    }

    fun map(dto: TdApi.UserStatusLastMonth): UserStatusLastMonth {
        return UserStatusLastMonth(
            byMyPrivacySettings = dto.byMyPrivacySettings,
        )
    }

    fun map(dto: UserStatus): TdApi.UserStatus {
        when (dto) {
            is UserStatusEmpty -> return map(dto)
            is UserStatusOnline -> return map(dto)
            is UserStatusOffline -> return map(dto)
            is UserStatusRecently -> return map(dto)
            is UserStatusLastWeek -> return map(dto)
            is UserStatusLastMonth -> return map(dto)
        }
    }

    fun map(dto: UserStatusEmpty): TdApi.UserStatusEmpty {
        return TdApi.UserStatusEmpty()
    }

    fun map(dto: UserStatusOnline): TdApi.UserStatusOnline {
        return TdApi.UserStatusOnline(
            expires = dto.expires,
        )
    }

    fun map(dto: UserStatusOffline): TdApi.UserStatusOffline {
        return TdApi.UserStatusOffline(
            wasOnline = dto.wasOnline,
        )
    }

    fun map(dto: UserStatusRecently): TdApi.UserStatusRecently {
        return TdApi.UserStatusRecently(
            byMyPrivacySettings = dto.byMyPrivacySettings,
        )
    }

    fun map(dto: UserStatusLastWeek): TdApi.UserStatusLastWeek {
        return TdApi.UserStatusLastWeek(
            byMyPrivacySettings = dto.byMyPrivacySettings,
        )
    }

    fun map(dto: UserStatusLastMonth): TdApi.UserStatusLastMonth {
        return TdApi.UserStatusLastMonth(
            byMyPrivacySettings = dto.byMyPrivacySettings,
        )
    }

    fun map(dto: TdApi.UserSupportInfo): UserSupportInfo {
        return UserSupportInfo(
            message = map(dto.message),
            author = dto.author,
            date = dto.date,
        )
    }

    fun map(dto: UserSupportInfo): TdApi.UserSupportInfo {
        return TdApi.UserSupportInfo(
            message = map(dto.message),
            author = dto.author,
            date = dto.date,
        )
    }

    fun map(dto: TdApi.UserType): UserType {
        when (dto) {
            is TdApi.UserTypeRegular -> return map(dto)
            is TdApi.UserTypeDeleted -> return map(dto)
            is TdApi.UserTypeBot -> return map(dto)
            is TdApi.UserTypeUnknown -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.UserTypeRegular): UserTypeRegular {
        return UserTypeRegular()
    }

    fun map(dto: TdApi.UserTypeDeleted): UserTypeDeleted {
        return UserTypeDeleted()
    }

    fun map(dto: TdApi.UserTypeBot): UserTypeBot {
        return UserTypeBot(
            canBeEdited = dto.canBeEdited,
            canJoinGroups = dto.canJoinGroups,
            canReadAllGroupMessages = dto.canReadAllGroupMessages,
            hasMainWebApp = dto.hasMainWebApp,
            isInline = dto.isInline,
            inlineQueryPlaceholder = dto.inlineQueryPlaceholder,
            needLocation = dto.needLocation,
            canConnectToBusiness = dto.canConnectToBusiness,
            canBeAddedToAttachmentMenu = dto.canBeAddedToAttachmentMenu,
            activeUserCount = dto.activeUserCount,
        )
    }

    fun map(dto: TdApi.UserTypeUnknown): UserTypeUnknown {
        return UserTypeUnknown()
    }

    fun map(dto: UserType): TdApi.UserType {
        when (dto) {
            is UserTypeRegular -> return map(dto)
            is UserTypeDeleted -> return map(dto)
            is UserTypeBot -> return map(dto)
            is UserTypeUnknown -> return map(dto)
        }
    }

    fun map(dto: UserTypeRegular): TdApi.UserTypeRegular {
        return TdApi.UserTypeRegular()
    }

    fun map(dto: UserTypeDeleted): TdApi.UserTypeDeleted {
        return TdApi.UserTypeDeleted()
    }

    fun map(dto: UserTypeBot): TdApi.UserTypeBot {
        return TdApi.UserTypeBot(
            canBeEdited = dto.canBeEdited,
            canJoinGroups = dto.canJoinGroups,
            canReadAllGroupMessages = dto.canReadAllGroupMessages,
            hasMainWebApp = dto.hasMainWebApp,
            isInline = dto.isInline,
            inlineQueryPlaceholder = dto.inlineQueryPlaceholder,
            needLocation = dto.needLocation,
            canConnectToBusiness = dto.canConnectToBusiness,
            canBeAddedToAttachmentMenu = dto.canBeAddedToAttachmentMenu,
            activeUserCount = dto.activeUserCount,
        )
    }

    fun map(dto: UserTypeUnknown): TdApi.UserTypeUnknown {
        return TdApi.UserTypeUnknown()
    }

    fun map(dto: TdApi.Usernames): Usernames {
        return Usernames(
            activeUsernames = dto.activeUsernames,
            disabledUsernames = dto.disabledUsernames,
            editableUsername = dto.editableUsername,
        )
    }

    fun map(dto: Usernames): TdApi.Usernames {
        return TdApi.Usernames(
            activeUsernames = dto.activeUsernames,
            disabledUsernames = dto.disabledUsernames,
            editableUsername = dto.editableUsername,
        )
    }

    fun map(dto: TdApi.Users): Users {
        return Users(
            totalCount = dto.totalCount,
            userIds = dto.userIds,
        )
    }

    fun map(dto: Users): TdApi.Users {
        return TdApi.Users(
            totalCount = dto.totalCount,
            userIds = dto.userIds,
        )
    }

    fun map(dto: TdApi.ValidatedOrderInfo): ValidatedOrderInfo {
        return ValidatedOrderInfo(
            orderInfoId = dto.orderInfoId,
            shippingOptions = dto.shippingOptions.mapArray { map(it) },
        )
    }

    fun map(dto: ValidatedOrderInfo): TdApi.ValidatedOrderInfo {
        return TdApi.ValidatedOrderInfo(
            orderInfoId = dto.orderInfoId,
            shippingOptions = dto.shippingOptions.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.VectorPathCommand): VectorPathCommand {
        when (dto) {
            is TdApi.VectorPathCommandLine -> return map(dto)
            is TdApi.VectorPathCommandCubicBezierCurve -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.VectorPathCommandLine): VectorPathCommandLine {
        return VectorPathCommandLine(
            endPoint = map(dto.endPoint),
        )
    }

    fun map(dto: TdApi.VectorPathCommandCubicBezierCurve): VectorPathCommandCubicBezierCurve {
        return VectorPathCommandCubicBezierCurve(
            startControlPoint = map(dto.startControlPoint),
            endControlPoint = map(dto.endControlPoint),
            endPoint = map(dto.endPoint),
        )
    }

    fun map(dto: VectorPathCommand): TdApi.VectorPathCommand {
        when (dto) {
            is VectorPathCommandLine -> return map(dto)
            is VectorPathCommandCubicBezierCurve -> return map(dto)
        }
    }

    fun map(dto: VectorPathCommandLine): TdApi.VectorPathCommandLine {
        return TdApi.VectorPathCommandLine(
            endPoint = map(dto.endPoint),
        )
    }

    fun map(dto: VectorPathCommandCubicBezierCurve): TdApi.VectorPathCommandCubicBezierCurve {
        return TdApi.VectorPathCommandCubicBezierCurve(
            startControlPoint = map(dto.startControlPoint),
            endControlPoint = map(dto.endControlPoint),
            endPoint = map(dto.endPoint),
        )
    }

    fun map(dto: TdApi.Venue): Venue {
        return Venue(
            location = map(dto.location),
            title = dto.title,
            address = dto.address,
            provider = dto.provider,
            id = dto.id,
            type = dto.type,
        )
    }

    fun map(dto: Venue): TdApi.Venue {
        return TdApi.Venue(
            location = map(dto.location),
            title = dto.title,
            address = dto.address,
            provider = dto.provider,
            id = dto.id,
            type = dto.type,
        )
    }

    fun map(dto: TdApi.VerificationStatus): VerificationStatus {
        return VerificationStatus(
            isVerified = dto.isVerified,
            isScam = dto.isScam,
            isFake = dto.isFake,
            botVerificationIconCustomEmojiId = dto.botVerificationIconCustomEmojiId,
        )
    }

    fun map(dto: VerificationStatus): TdApi.VerificationStatus {
        return TdApi.VerificationStatus(
            isVerified = dto.isVerified,
            isScam = dto.isScam,
            isFake = dto.isFake,
            botVerificationIconCustomEmojiId = dto.botVerificationIconCustomEmojiId,
        )
    }

    fun map(dto: TdApi.Video): Video {
        return Video(
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
            fileName = dto.fileName,
            mimeType = dto.mimeType,
            hasStickers = dto.hasStickers,
            supportsStreaming = dto.supportsStreaming,
            minithumbnail = dto.minithumbnail?.let { map(it) },
            thumbnail = dto.thumbnail?.let { map(it) },
            video = map(dto.video),
        )
    }

    fun map(dto: Video): TdApi.Video {
        return TdApi.Video(
            duration = dto.duration,
            width = dto.width,
            height = dto.height,
            fileName = dto.fileName,
            mimeType = dto.mimeType,
            hasStickers = dto.hasStickers,
            supportsStreaming = dto.supportsStreaming,
            minithumbnail = dto.minithumbnail?.let { map(it) },
            thumbnail = dto.thumbnail?.let { map(it) },
            video = map(dto.video),
        )
    }

    fun map(dto: TdApi.VideoChat): VideoChat {
        return VideoChat(
            groupCallId = dto.groupCallId,
            hasParticipants = dto.hasParticipants,
            defaultParticipantId = dto.defaultParticipantId?.let { map(it) },
        )
    }

    fun map(dto: VideoChat): TdApi.VideoChat {
        return TdApi.VideoChat(
            groupCallId = dto.groupCallId,
            hasParticipants = dto.hasParticipants,
            defaultParticipantId = dto.defaultParticipantId?.let { map(it) },
        )
    }

    fun map(dto: TdApi.VideoChatStream): VideoChatStream {
        return VideoChatStream(
            channelId = dto.channelId,
            scale = dto.scale,
            timeOffset = dto.timeOffset,
        )
    }

    fun map(dto: VideoChatStream): TdApi.VideoChatStream {
        return TdApi.VideoChatStream(
            channelId = dto.channelId,
            scale = dto.scale,
            timeOffset = dto.timeOffset,
        )
    }

    fun map(dto: TdApi.VideoChatStreams): VideoChatStreams {
        return VideoChatStreams(
            streams = dto.streams.mapArray { map(it) },
        )
    }

    fun map(dto: VideoChatStreams): TdApi.VideoChatStreams {
        return TdApi.VideoChatStreams(
            streams = dto.streams.mapArray { map(it) },
        )
    }

    fun map(dto: TdApi.VideoMessageAdvertisement): VideoMessageAdvertisement {
        return VideoMessageAdvertisement(
            uniqueId = dto.uniqueId,
            text = dto.text,
            minDisplayDuration = dto.minDisplayDuration,
            maxDisplayDuration = dto.maxDisplayDuration,
            canBeReported = dto.canBeReported,
            sponsor = map(dto.sponsor),
            title = dto.title,
            additionalInfo = dto.additionalInfo,
        )
    }

    fun map(dto: VideoMessageAdvertisement): TdApi.VideoMessageAdvertisement {
        return TdApi.VideoMessageAdvertisement(
            uniqueId = dto.uniqueId,
            text = dto.text,
            minDisplayDuration = dto.minDisplayDuration,
            maxDisplayDuration = dto.maxDisplayDuration,
            canBeReported = dto.canBeReported,
            sponsor = map(dto.sponsor),
            title = dto.title,
            additionalInfo = dto.additionalInfo,
        )
    }

    fun map(dto: TdApi.VideoMessageAdvertisements): VideoMessageAdvertisements {
        return VideoMessageAdvertisements(
            advertisements = dto.advertisements.mapArray { map(it) },
            startDelay = dto.startDelay,
            betweenDelay = dto.betweenDelay,
        )
    }

    fun map(dto: VideoMessageAdvertisements): TdApi.VideoMessageAdvertisements {
        return TdApi.VideoMessageAdvertisements(
            advertisements = dto.advertisements.mapArray { map(it) },
            startDelay = dto.startDelay,
            betweenDelay = dto.betweenDelay,
        )
    }

    fun map(dto: TdApi.VideoNote): VideoNote {
        return VideoNote(
            duration = dto.duration,
            waveform = dto.waveform,
            length = dto.length,
            minithumbnail = dto.minithumbnail?.let { map(it) },
            thumbnail = dto.thumbnail?.let { map(it) },
            speechRecognitionResult = dto.speechRecognitionResult?.let { map(it) },
            video = map(dto.video),
        )
    }

    fun map(dto: VideoNote): TdApi.VideoNote {
        return TdApi.VideoNote(
            duration = dto.duration,
            waveform = dto.waveform,
            length = dto.length,
            minithumbnail = dto.minithumbnail?.let { map(it) },
            thumbnail = dto.thumbnail?.let { map(it) },
            speechRecognitionResult = dto.speechRecognitionResult?.let { map(it) },
            video = map(dto.video),
        )
    }

    fun map(dto: TdApi.VideoStoryboard): VideoStoryboard {
        return VideoStoryboard(
            storyboardFile = map(dto.storyboardFile),
            width = dto.width,
            height = dto.height,
            mapFile = map(dto.mapFile),
        )
    }

    fun map(dto: VideoStoryboard): TdApi.VideoStoryboard {
        return TdApi.VideoStoryboard(
            storyboardFile = map(dto.storyboardFile),
            width = dto.width,
            height = dto.height,
            mapFile = map(dto.mapFile),
        )
    }

    fun map(dto: TdApi.VoiceNote): VoiceNote {
        return VoiceNote(
            duration = dto.duration,
            waveform = dto.waveform,
            mimeType = dto.mimeType,
            speechRecognitionResult = dto.speechRecognitionResult?.let { map(it) },
            voice = map(dto.voice),
        )
    }

    fun map(dto: VoiceNote): TdApi.VoiceNote {
        return TdApi.VoiceNote(
            duration = dto.duration,
            waveform = dto.waveform,
            mimeType = dto.mimeType,
            speechRecognitionResult = dto.speechRecognitionResult?.let { map(it) },
            voice = map(dto.voice),
        )
    }

    fun map(dto: TdApi.WebApp): WebApp {
        return WebApp(
            shortName = dto.shortName,
            title = dto.title,
            description = dto.description,
            photo = map(dto.photo),
            animation = dto.animation?.let { map(it) },
        )
    }

    fun map(dto: WebApp): TdApi.WebApp {
        return TdApi.WebApp(
            shortName = dto.shortName,
            title = dto.title,
            description = dto.description,
            photo = map(dto.photo),
            animation = dto.animation?.let { map(it) },
        )
    }

    fun map(dto: TdApi.WebAppInfo): WebAppInfo {
        return WebAppInfo(
            launchId = dto.launchId,
            url = dto.url,
        )
    }

    fun map(dto: WebAppInfo): TdApi.WebAppInfo {
        return TdApi.WebAppInfo(
            launchId = dto.launchId,
            url = dto.url,
        )
    }

    fun map(dto: TdApi.WebAppOpenMode): WebAppOpenMode {
        when (dto) {
            is TdApi.WebAppOpenModeCompact -> return map(dto)
            is TdApi.WebAppOpenModeFullSize -> return map(dto)
            is TdApi.WebAppOpenModeFullScreen -> return map(dto)
            else -> error("Unknown DTO class type (${dto.javaClass})")
        }
    }

    fun map(dto: TdApi.WebAppOpenModeCompact): WebAppOpenModeCompact {
        return WebAppOpenModeCompact()
    }

    fun map(dto: TdApi.WebAppOpenModeFullSize): WebAppOpenModeFullSize {
        return WebAppOpenModeFullSize()
    }

    fun map(dto: TdApi.WebAppOpenModeFullScreen): WebAppOpenModeFullScreen {
        return WebAppOpenModeFullScreen()
    }

    fun map(dto: WebAppOpenMode): TdApi.WebAppOpenMode {
        when (dto) {
            is WebAppOpenModeCompact -> return map(dto)
            is WebAppOpenModeFullSize -> return map(dto)
            is WebAppOpenModeFullScreen -> return map(dto)
        }
    }

    fun map(dto: WebAppOpenModeCompact): TdApi.WebAppOpenModeCompact {
        return TdApi.WebAppOpenModeCompact()
    }

    fun map(dto: WebAppOpenModeFullSize): TdApi.WebAppOpenModeFullSize {
        return TdApi.WebAppOpenModeFullSize()
    }

    fun map(dto: WebAppOpenModeFullScreen): TdApi.WebAppOpenModeFullScreen {
        return TdApi.WebAppOpenModeFullScreen()
    }

    fun map(dto: TdApi.WebAppOpenParameters): WebAppOpenParameters {
        return WebAppOpenParameters(
            theme = dto.theme?.let { map(it) },
            applicationName = dto.applicationName,
            mode = dto.mode?.let { map(it) },
        )
    }

    fun map(dto: WebAppOpenParameters): TdApi.WebAppOpenParameters {
        return TdApi.WebAppOpenParameters(
            theme = dto.theme?.let { map(it) },
            applicationName = dto.applicationName,
            mode = dto.mode?.let { map(it) },
        )
    }

    fun map(dto: TdApi.WebPageInstantView): WebPageInstantView {
        return WebPageInstantView(
            pageBlocks = dto.pageBlocks.mapArray { map(it) },
            viewCount = dto.viewCount,
            version = dto.version,
            isRtl = dto.isRtl,
            isFull = dto.isFull,
            feedbackLink = map(dto.feedbackLink),
        )
    }

    fun map(dto: WebPageInstantView): TdApi.WebPageInstantView {
        return TdApi.WebPageInstantView(
            pageBlocks = dto.pageBlocks.mapArray { map(it) },
            viewCount = dto.viewCount,
            version = dto.version,
            isRtl = dto.isRtl,
            isFull = dto.isFull,
            feedbackLink = map(dto.feedbackLink),
        )
    }
}
