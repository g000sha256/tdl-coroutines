/*
 * Copyright 2025 Georgii Ippolitov (g000sha256)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dev.g000sha256.tdl.dto

import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String

/**
 * This class is an abstract base class.
 * Points to a file.
 */
public sealed class InputFileDto private constructor() {
    /**
     * A file defined by its unique identifier.
     *
     * @property id Unique file identifier.
     */
    public class Id public constructor(
        public val id: Int,
    ) : InputFileDto() {
        override fun equals(other: Any?): Boolean {
            if (other === this) {
                return true
            }
            if (other == null) {
                return false
            }
            if (other::class != this::class) {
                return false
            }
            other as Id
            return other.id == id
        }

        override fun hashCode(): Int {
            var hashCode = this::class.hashCode()
            hashCode = 31 * hashCode + id.hashCode()
            return hashCode
        }

        override fun toString(): String {
            return buildString {
                append("InputFileDto.Id")
                append("(")
                append("id=")
                append(id)
                append(")")
            }
        }
    }

    /**
     * A file defined by its remote identifier. The remote identifier is guaranteed to be usable only if the corresponding file is still accessible to the user and known to TDLib. For example, if the file is from a message, then the message must be not deleted and accessible to the user. If the file database is disabled, then the corresponding object with the file must be preloaded by the application.
     *
     * @property id Remote file identifier.
     */
    public class Remote public constructor(
        public val id: String,
    ) : InputFileDto() {
        override fun equals(other: Any?): Boolean {
            if (other === this) {
                return true
            }
            if (other == null) {
                return false
            }
            if (other::class != this::class) {
                return false
            }
            other as Remote
            return other.id == id
        }

        override fun hashCode(): Int {
            var hashCode = this::class.hashCode()
            hashCode = 31 * hashCode + id.hashCode()
            return hashCode
        }

        override fun toString(): String {
            return buildString {
                append("InputFileDto.Remote")
                append("(")
                append("id=")
                append(id)
                append(")")
            }
        }
    }

    /**
     * A file defined by a local path.
     *
     * @property path Local path to the file.
     */
    public class Local public constructor(
        public val path: String,
    ) : InputFileDto() {
        override fun equals(other: Any?): Boolean {
            if (other === this) {
                return true
            }
            if (other == null) {
                return false
            }
            if (other::class != this::class) {
                return false
            }
            other as Local
            return other.path == path
        }

        override fun hashCode(): Int {
            var hashCode = this::class.hashCode()
            hashCode = 31 * hashCode + path.hashCode()
            return hashCode
        }

        override fun toString(): String {
            return buildString {
                append("InputFileDto.Local")
                append("(")
                append("path=")
                append(path)
                append(")")
            }
        }
    }

    /**
     * A file generated by the application. The application must handle updates updateFileGenerationStart and updateFileGenerationStop to generate the file when asked by TDLib.
     *
     * @property originalPath Local path to a file from which the file is generated. The path doesn't have to be a valid path and is used by TDLib only to detect name and MIME type of the generated file.
     * @property conversion String specifying the conversion applied to the original file; must be persistent across application restarts. Conversions beginning with '#' are reserved for internal TDLib usage.
     * @property expectedSize Expected size of the generated file, in bytes; pass 0 if unknown.
     */
    public class Generated public constructor(
        public val originalPath: String,
        public val conversion: String,
        public val expectedSize: Long,
    ) : InputFileDto() {
        override fun equals(other: Any?): Boolean {
            if (other === this) {
                return true
            }
            if (other == null) {
                return false
            }
            if (other::class != this::class) {
                return false
            }
            other as Generated
            if (other.originalPath != originalPath) {
                return false
            }
            if (other.conversion != conversion) {
                return false
            }
            return other.expectedSize == expectedSize
        }

        override fun hashCode(): Int {
            var hashCode = this::class.hashCode()
            hashCode = 31 * hashCode + originalPath.hashCode()
            hashCode = 31 * hashCode + conversion.hashCode()
            hashCode = 31 * hashCode + expectedSize.hashCode()
            return hashCode
        }

        override fun toString(): String {
            return buildString {
                append("InputFileDto.Generated")
                append("(")
                append("originalPath=")
                append(originalPath)
                append(", ")
                append("conversion=")
                append(conversion)
                append(", ")
                append("expectedSize=")
                append(expectedSize)
                append(")")
            }
        }
    }
}
