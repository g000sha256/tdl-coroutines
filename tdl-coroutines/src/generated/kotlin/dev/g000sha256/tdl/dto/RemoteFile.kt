/*
 * Copyright 2025 Georgii Ippolitov (g000sha256)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dev.g000sha256.tdl.dto

import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String

/**
 * Represents a remote file.
 *
 * @property id Remote file identifier; may be empty. Can be used by the current user across application restarts or even from other devices. Uniquely identifies a file, but a file can have a lot of different valid identifiers. If the identifier starts with &quot;http://&quot; or &quot;https://&quot;, it represents the HTTP URL of the file. TDLib is currently unable to download files if only their URL is known. If downloadFile/addFileToDownloads is called on such a file or if it is sent to a secret chat, TDLib starts a file generation process by sending updateFileGenerationStart to the application with the HTTP URL in the originalPath and &quot;#url#&quot; as the conversion string. Application must generate the file by downloading it to the specified location.
 * @property uniqueId Unique file identifier; may be empty if unknown. The unique file identifier which is the same for the same file even for different users and is persistent over time.
 * @property isUploadingActive True, if the file is currently being uploaded (or a remote copy is being generated by some other means).
 * @property isUploadingCompleted True, if a remote copy is fully available.
 * @property uploadedSize Size of the remote available part of the file, in bytes; 0 if unknown.
 */
public class RemoteFile public constructor(
    public val id: String,
    public val uniqueId: String,
    public val isUploadingActive: Boolean,
    public val isUploadingCompleted: Boolean,
    public val uploadedSize: Long,
) {
    override fun equals(other: Any?): Boolean {
        if (other === this) {
            return true
        }
        if (other == null) {
            return false
        }
        if (other::class != this::class) {
            return false
        }
        other as RemoteFile
        if (other.id != id) {
            return false
        }
        if (other.uniqueId != uniqueId) {
            return false
        }
        if (other.isUploadingActive != isUploadingActive) {
            return false
        }
        if (other.isUploadingCompleted != isUploadingCompleted) {
            return false
        }
        return other.uploadedSize == uploadedSize
    }

    override fun hashCode(): Int {
        var hashCode = this::class.hashCode()
        hashCode = 31 * hashCode + id.hashCode()
        hashCode = 31 * hashCode + uniqueId.hashCode()
        hashCode = 31 * hashCode + isUploadingActive.hashCode()
        hashCode = 31 * hashCode + isUploadingCompleted.hashCode()
        hashCode = 31 * hashCode + uploadedSize.hashCode()
        return hashCode
    }

    override fun toString(): String {
        return buildString {
            append("RemoteFile")
            append("(")
            append("id=")
            append(id)
            append(", ")
            append("uniqueId=")
            append(uniqueId)
            append(", ")
            append("isUploadingActive=")
            append(isUploadingActive)
            append(", ")
            append("isUploadingCompleted=")
            append(isUploadingCompleted)
            append(", ")
            append("uploadedSize=")
            append(uploadedSize)
            append(")")
        }
    }
}
