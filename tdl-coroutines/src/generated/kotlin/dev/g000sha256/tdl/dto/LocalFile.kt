/*
 * Copyright 2025 Georgii Ippolitov (g000sha256)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dev.g000sha256.tdl.dto

import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String

/**
 * Represents a local file.
 *
 * @property path Local path to the locally available file part; may be empty.
 * @property canBeDownloaded True, if it is possible to download or generate the file.
 * @property canBeDeleted True, if the file can be deleted.
 * @property isDownloadingActive True, if the file is currently being downloaded (or a local copy is being generated by some other means).
 * @property isDownloadingCompleted True, if the local copy is fully available.
 * @property downloadOffset Download will be started from this offset. downloadedPrefixSize is calculated from this offset.
 * @property downloadedPrefixSize If isDownloadingCompleted is false, then only some prefix of the file starting from downloadOffset is ready to be read. downloadedPrefixSize is the size of that prefix in bytes.
 * @property downloadedSize Total downloaded file size, in bytes. Can be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage.
 */
public class LocalFile public constructor(
    public val path: String,
    public val canBeDownloaded: Boolean,
    public val canBeDeleted: Boolean,
    public val isDownloadingActive: Boolean,
    public val isDownloadingCompleted: Boolean,
    public val downloadOffset: Long,
    public val downloadedPrefixSize: Long,
    public val downloadedSize: Long,
) {
    override fun equals(other: Any?): Boolean {
        if (other === this) {
            return true
        }
        if (other == null) {
            return false
        }
        if (other::class != this::class) {
            return false
        }
        other as LocalFile
        if (other.path != path) {
            return false
        }
        if (other.canBeDownloaded != canBeDownloaded) {
            return false
        }
        if (other.canBeDeleted != canBeDeleted) {
            return false
        }
        if (other.isDownloadingActive != isDownloadingActive) {
            return false
        }
        if (other.isDownloadingCompleted != isDownloadingCompleted) {
            return false
        }
        if (other.downloadOffset != downloadOffset) {
            return false
        }
        if (other.downloadedPrefixSize != downloadedPrefixSize) {
            return false
        }
        return other.downloadedSize == downloadedSize
    }

    override fun hashCode(): Int {
        var hashCode = this::class.hashCode()
        hashCode = 31 * hashCode + path.hashCode()
        hashCode = 31 * hashCode + canBeDownloaded.hashCode()
        hashCode = 31 * hashCode + canBeDeleted.hashCode()
        hashCode = 31 * hashCode + isDownloadingActive.hashCode()
        hashCode = 31 * hashCode + isDownloadingCompleted.hashCode()
        hashCode = 31 * hashCode + downloadOffset.hashCode()
        hashCode = 31 * hashCode + downloadedPrefixSize.hashCode()
        hashCode = 31 * hashCode + downloadedSize.hashCode()
        return hashCode
    }

    override fun toString(): String {
        return buildString {
            append("LocalFile")
            append("(")
            append("path=")
            append(path)
            append(", ")
            append("canBeDownloaded=")
            append(canBeDownloaded)
            append(", ")
            append("canBeDeleted=")
            append(canBeDeleted)
            append(", ")
            append("isDownloadingActive=")
            append(isDownloadingActive)
            append(", ")
            append("isDownloadingCompleted=")
            append(isDownloadingCompleted)
            append(", ")
            append("downloadOffset=")
            append(downloadOffset)
            append(", ")
            append("downloadedPrefixSize=")
            append(downloadedPrefixSize)
            append(", ")
            append("downloadedSize=")
            append(downloadedSize)
            append(")")
        }
    }
}
